//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ice.seqMapping.AMD
{
    namespace Test
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial record struct S
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int i;

            #endregion

            partial void ice_initialize();

            #region Constructor

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public S(int i)
            {
                this.i = i;
                ice_initialize();
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeInt(this.i);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.i = istr.readInt();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, S v)
            {
                v.ice_writeMembers(ostr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static S ice_read(global::Ice.InputStream istr)
            {
                var v = new S();
                v.ice_readMembers(istr);
                return v;
            }

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public sealed partial class SD : global::System.ICloneable, global::System.IEquatable<SD>
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int i = 1;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public SD()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public SD(int i)
            {
                this.i = i;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public object Clone() => MemberwiseClone();

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::Ice.Internal.HashUtil.hashAdd(ref h_, "::Test::SD");
                global::Ice.Internal.HashUtil.hashAdd(ref h_, i);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override bool Equals(object other) => Equals(other as SD);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bool Equals(SD other)
            {
                if (ReferenceEquals(this, other))
                {
                    return true;
                }
                return other is not null && 
                    this.i == other.i;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator ==(SD lhs, SD rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static bool operator !=(SD lhs, SD rhs) => !(lhs == rhs);

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeInt(this.i);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.i = istr.readInt();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(global::Ice.OutputStream ostr, SD v)
            {
                if (v is null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static SD ice_read(global::Ice.InputStream istr)
            {
                var v = new SD();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly SD _nullMarshalValue = new SD();

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class CV : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int i;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public CV()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public CV(int i)
            {
                this.i = i;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::CV";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(i);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                i = istr_.readInt();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface I : global::Ice.Object, IOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class CR : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public CV v;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public CR()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public CR(CV v)
            {
                this.v = v;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::CR";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(v);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((CV v) => { this.v = v; });
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public enum En
        {
            A,
            B,
            C
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class EnHelper
        {
            public static void write(global::Ice.OutputStream ostr, En v)
            {
                ostr.writeEnum((int)v, 2);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static En read(global::Ice.InputStream istr)
            {
                En v;
                v = (En)istr.readEnum(2);
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface MyClass : global::Ice.Object, MyClassOperations_
        {
        }
    }
}

namespace Ice.seqMapping.AMD.TypeId.Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class CV
    {
        public abstract global::Ice.seqMapping.AMD.Test.CV targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class CR
    {
        public abstract global::Ice.seqMapping.AMD.Test.CR targetClass { get; }
    }
}

namespace Ice.seqMapping.AMD
{
    namespace Test
    {
        public struct MyClass_OpAByteSResult
        {
            public MyClass_OpAByteSResult(byte[] returnValue, byte[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public byte[] returnValue;
            public byte[] o;
        }

        public struct MyClass_OpLByteSResult
        {
            public MyClass_OpLByteSResult(global::System.Collections.Generic.List<byte> returnValue, global::System.Collections.Generic.List<byte> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<byte> returnValue;
            public global::System.Collections.Generic.List<byte> o;
        }

        public struct MyClass_OpKByteSResult
        {
            public MyClass_OpKByteSResult(global::System.Collections.Generic.LinkedList<byte> returnValue, global::System.Collections.Generic.LinkedList<byte> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.LinkedList<byte> returnValue;
            public global::System.Collections.Generic.LinkedList<byte> o;
        }

        public struct MyClass_OpQByteSResult
        {
            public MyClass_OpQByteSResult(global::System.Collections.Generic.Queue<byte> returnValue, global::System.Collections.Generic.Queue<byte> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Queue<byte> returnValue;
            public global::System.Collections.Generic.Queue<byte> o;
        }

        public struct MyClass_OpSByteSResult
        {
            public MyClass_OpSByteSResult(global::System.Collections.Generic.Stack<byte> returnValue, global::System.Collections.Generic.Stack<byte> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Stack<byte> returnValue;
            public global::System.Collections.Generic.Stack<byte> o;
        }

        public struct MyClass_OpABoolSResult
        {
            public MyClass_OpABoolSResult(bool[] returnValue, bool[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public bool[] returnValue;
            public bool[] o;
        }

        public struct MyClass_OpLBoolSResult
        {
            public MyClass_OpLBoolSResult(global::System.Collections.Generic.List<bool> returnValue, global::System.Collections.Generic.List<bool> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<bool> returnValue;
            public global::System.Collections.Generic.List<bool> o;
        }

        public struct MyClass_OpKBoolSResult
        {
            public MyClass_OpKBoolSResult(global::System.Collections.Generic.LinkedList<bool> returnValue, global::System.Collections.Generic.LinkedList<bool> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.LinkedList<bool> returnValue;
            public global::System.Collections.Generic.LinkedList<bool> o;
        }

        public struct MyClass_OpQBoolSResult
        {
            public MyClass_OpQBoolSResult(global::System.Collections.Generic.Queue<bool> returnValue, global::System.Collections.Generic.Queue<bool> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Queue<bool> returnValue;
            public global::System.Collections.Generic.Queue<bool> o;
        }

        public struct MyClass_OpSBoolSResult
        {
            public MyClass_OpSBoolSResult(global::System.Collections.Generic.Stack<bool> returnValue, global::System.Collections.Generic.Stack<bool> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Stack<bool> returnValue;
            public global::System.Collections.Generic.Stack<bool> o;
        }

        public struct MyClass_OpAShortSResult
        {
            public MyClass_OpAShortSResult(short[] returnValue, short[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public short[] returnValue;
            public short[] o;
        }

        public struct MyClass_OpLShortSResult
        {
            public MyClass_OpLShortSResult(global::System.Collections.Generic.List<short> returnValue, global::System.Collections.Generic.List<short> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<short> returnValue;
            public global::System.Collections.Generic.List<short> o;
        }

        public struct MyClass_OpKShortSResult
        {
            public MyClass_OpKShortSResult(global::System.Collections.Generic.LinkedList<short> returnValue, global::System.Collections.Generic.LinkedList<short> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.LinkedList<short> returnValue;
            public global::System.Collections.Generic.LinkedList<short> o;
        }

        public struct MyClass_OpQShortSResult
        {
            public MyClass_OpQShortSResult(global::System.Collections.Generic.Queue<short> returnValue, global::System.Collections.Generic.Queue<short> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Queue<short> returnValue;
            public global::System.Collections.Generic.Queue<short> o;
        }

        public struct MyClass_OpSShortSResult
        {
            public MyClass_OpSShortSResult(global::System.Collections.Generic.Stack<short> returnValue, global::System.Collections.Generic.Stack<short> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Stack<short> returnValue;
            public global::System.Collections.Generic.Stack<short> o;
        }

        public struct MyClass_OpAIntSResult
        {
            public MyClass_OpAIntSResult(int[] returnValue, int[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public int[] returnValue;
            public int[] o;
        }

        public struct MyClass_OpLIntSResult
        {
            public MyClass_OpLIntSResult(global::System.Collections.Generic.List<int> returnValue, global::System.Collections.Generic.List<int> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<int> returnValue;
            public global::System.Collections.Generic.List<int> o;
        }

        public struct MyClass_OpKIntSResult
        {
            public MyClass_OpKIntSResult(global::System.Collections.Generic.LinkedList<int> returnValue, global::System.Collections.Generic.LinkedList<int> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.LinkedList<int> returnValue;
            public global::System.Collections.Generic.LinkedList<int> o;
        }

        public struct MyClass_OpQIntSResult
        {
            public MyClass_OpQIntSResult(global::System.Collections.Generic.Queue<int> returnValue, global::System.Collections.Generic.Queue<int> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Queue<int> returnValue;
            public global::System.Collections.Generic.Queue<int> o;
        }

        public struct MyClass_OpSIntSResult
        {
            public MyClass_OpSIntSResult(global::System.Collections.Generic.Stack<int> returnValue, global::System.Collections.Generic.Stack<int> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Stack<int> returnValue;
            public global::System.Collections.Generic.Stack<int> o;
        }

        public struct MyClass_OpALongSResult
        {
            public MyClass_OpALongSResult(long[] returnValue, long[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public long[] returnValue;
            public long[] o;
        }

        public struct MyClass_OpLLongSResult
        {
            public MyClass_OpLLongSResult(global::System.Collections.Generic.List<long> returnValue, global::System.Collections.Generic.List<long> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<long> returnValue;
            public global::System.Collections.Generic.List<long> o;
        }

        public struct MyClass_OpKLongSResult
        {
            public MyClass_OpKLongSResult(global::System.Collections.Generic.LinkedList<long> returnValue, global::System.Collections.Generic.LinkedList<long> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.LinkedList<long> returnValue;
            public global::System.Collections.Generic.LinkedList<long> o;
        }

        public struct MyClass_OpQLongSResult
        {
            public MyClass_OpQLongSResult(global::System.Collections.Generic.Queue<long> returnValue, global::System.Collections.Generic.Queue<long> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Queue<long> returnValue;
            public global::System.Collections.Generic.Queue<long> o;
        }

        public struct MyClass_OpSLongSResult
        {
            public MyClass_OpSLongSResult(global::System.Collections.Generic.Stack<long> returnValue, global::System.Collections.Generic.Stack<long> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Stack<long> returnValue;
            public global::System.Collections.Generic.Stack<long> o;
        }

        public struct MyClass_OpAFloatSResult
        {
            public MyClass_OpAFloatSResult(float[] returnValue, float[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public float[] returnValue;
            public float[] o;
        }

        public struct MyClass_OpLFloatSResult
        {
            public MyClass_OpLFloatSResult(global::System.Collections.Generic.List<float> returnValue, global::System.Collections.Generic.List<float> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<float> returnValue;
            public global::System.Collections.Generic.List<float> o;
        }

        public struct MyClass_OpKFloatSResult
        {
            public MyClass_OpKFloatSResult(global::System.Collections.Generic.LinkedList<float> returnValue, global::System.Collections.Generic.LinkedList<float> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.LinkedList<float> returnValue;
            public global::System.Collections.Generic.LinkedList<float> o;
        }

        public struct MyClass_OpQFloatSResult
        {
            public MyClass_OpQFloatSResult(global::System.Collections.Generic.Queue<float> returnValue, global::System.Collections.Generic.Queue<float> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Queue<float> returnValue;
            public global::System.Collections.Generic.Queue<float> o;
        }

        public struct MyClass_OpSFloatSResult
        {
            public MyClass_OpSFloatSResult(global::System.Collections.Generic.Stack<float> returnValue, global::System.Collections.Generic.Stack<float> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Stack<float> returnValue;
            public global::System.Collections.Generic.Stack<float> o;
        }

        public struct MyClass_OpADoubleSResult
        {
            public MyClass_OpADoubleSResult(double[] returnValue, double[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public double[] returnValue;
            public double[] o;
        }

        public struct MyClass_OpLDoubleSResult
        {
            public MyClass_OpLDoubleSResult(global::System.Collections.Generic.List<double> returnValue, global::System.Collections.Generic.List<double> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<double> returnValue;
            public global::System.Collections.Generic.List<double> o;
        }

        public struct MyClass_OpKDoubleSResult
        {
            public MyClass_OpKDoubleSResult(global::System.Collections.Generic.LinkedList<double> returnValue, global::System.Collections.Generic.LinkedList<double> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.LinkedList<double> returnValue;
            public global::System.Collections.Generic.LinkedList<double> o;
        }

        public struct MyClass_OpQDoubleSResult
        {
            public MyClass_OpQDoubleSResult(global::System.Collections.Generic.Queue<double> returnValue, global::System.Collections.Generic.Queue<double> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Queue<double> returnValue;
            public global::System.Collections.Generic.Queue<double> o;
        }

        public struct MyClass_OpSDoubleSResult
        {
            public MyClass_OpSDoubleSResult(global::System.Collections.Generic.Stack<double> returnValue, global::System.Collections.Generic.Stack<double> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Stack<double> returnValue;
            public global::System.Collections.Generic.Stack<double> o;
        }

        public struct MyClass_OpAStringSResult
        {
            public MyClass_OpAStringSResult(string[] returnValue, string[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public string[] returnValue;
            public string[] o;
        }

        public struct MyClass_OpLStringSResult
        {
            public MyClass_OpLStringSResult(global::System.Collections.Generic.List<string> returnValue, global::System.Collections.Generic.List<string> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<string> returnValue;
            public global::System.Collections.Generic.List<string> o;
        }

        public struct MyClass_OpKStringSResult
        {
            public MyClass_OpKStringSResult(global::System.Collections.Generic.LinkedList<string> returnValue, global::System.Collections.Generic.LinkedList<string> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.LinkedList<string> returnValue;
            public global::System.Collections.Generic.LinkedList<string> o;
        }

        public struct MyClass_OpQStringSResult
        {
            public MyClass_OpQStringSResult(global::System.Collections.Generic.Queue<string> returnValue, global::System.Collections.Generic.Queue<string> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Queue<string> returnValue;
            public global::System.Collections.Generic.Queue<string> o;
        }

        public struct MyClass_OpSStringSResult
        {
            public MyClass_OpSStringSResult(global::System.Collections.Generic.Stack<string> returnValue, global::System.Collections.Generic.Stack<string> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Stack<string> returnValue;
            public global::System.Collections.Generic.Stack<string> o;
        }

        public struct MyClass_OpAObjectSResult
        {
            public MyClass_OpAObjectSResult(global::Ice.Value[] returnValue, global::Ice.Value[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::Ice.Value[] returnValue;
            public global::Ice.Value[] o;
        }

        public struct MyClass_OpLObjectSResult
        {
            public MyClass_OpLObjectSResult(global::System.Collections.Generic.List<global::Ice.Value> returnValue, global::System.Collections.Generic.List<global::Ice.Value> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<global::Ice.Value> returnValue;
            public global::System.Collections.Generic.List<global::Ice.Value> o;
        }

        public struct MyClass_OpAObjectPrxSResult
        {
            public MyClass_OpAObjectPrxSResult(global::Ice.ObjectPrx[] returnValue, global::Ice.ObjectPrx[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::Ice.ObjectPrx[] returnValue;
            public global::Ice.ObjectPrx[] o;
        }

        public struct MyClass_OpLObjectPrxSResult
        {
            public MyClass_OpLObjectPrxSResult(global::System.Collections.Generic.List<global::Ice.ObjectPrx> returnValue, global::System.Collections.Generic.List<global::Ice.ObjectPrx> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<global::Ice.ObjectPrx> returnValue;
            public global::System.Collections.Generic.List<global::Ice.ObjectPrx> o;
        }

        public struct MyClass_OpKObjectPrxSResult
        {
            public MyClass_OpKObjectPrxSResult(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> returnValue, global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> returnValue;
            public global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> o;
        }

        public struct MyClass_OpQObjectPrxSResult
        {
            public MyClass_OpQObjectPrxSResult(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> returnValue, global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> returnValue;
            public global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> o;
        }

        public struct MyClass_OpSObjectPrxSResult
        {
            public MyClass_OpSObjectPrxSResult(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> returnValue, global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> returnValue;
            public global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> o;
        }

        public struct MyClass_OpAStructSResult
        {
            public MyClass_OpAStructSResult(S[] returnValue, S[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public S[] returnValue;
            public S[] o;
        }

        public struct MyClass_OpLStructSResult
        {
            public MyClass_OpLStructSResult(global::System.Collections.Generic.List<S> returnValue, global::System.Collections.Generic.List<S> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<S> returnValue;
            public global::System.Collections.Generic.List<S> o;
        }

        public struct MyClass_OpKStructSResult
        {
            public MyClass_OpKStructSResult(global::System.Collections.Generic.LinkedList<S> returnValue, global::System.Collections.Generic.LinkedList<S> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.LinkedList<S> returnValue;
            public global::System.Collections.Generic.LinkedList<S> o;
        }

        public struct MyClass_OpQStructSResult
        {
            public MyClass_OpQStructSResult(global::System.Collections.Generic.Queue<S> returnValue, global::System.Collections.Generic.Queue<S> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Queue<S> returnValue;
            public global::System.Collections.Generic.Queue<S> o;
        }

        public struct MyClass_OpSStructSResult
        {
            public MyClass_OpSStructSResult(global::System.Collections.Generic.Stack<S> returnValue, global::System.Collections.Generic.Stack<S> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Stack<S> returnValue;
            public global::System.Collections.Generic.Stack<S> o;
        }

        public struct MyClass_OpAStructSDResult
        {
            public MyClass_OpAStructSDResult(SD[] returnValue, SD[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public SD[] returnValue;
            public SD[] o;
        }

        public struct MyClass_OpLStructSDResult
        {
            public MyClass_OpLStructSDResult(global::System.Collections.Generic.List<SD> returnValue, global::System.Collections.Generic.List<SD> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<SD> returnValue;
            public global::System.Collections.Generic.List<SD> o;
        }

        public struct MyClass_OpKStructSDResult
        {
            public MyClass_OpKStructSDResult(global::System.Collections.Generic.LinkedList<SD> returnValue, global::System.Collections.Generic.LinkedList<SD> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.LinkedList<SD> returnValue;
            public global::System.Collections.Generic.LinkedList<SD> o;
        }

        public struct MyClass_OpQStructSDResult
        {
            public MyClass_OpQStructSDResult(global::System.Collections.Generic.Queue<SD> returnValue, global::System.Collections.Generic.Queue<SD> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Queue<SD> returnValue;
            public global::System.Collections.Generic.Queue<SD> o;
        }

        public struct MyClass_OpSStructSDResult
        {
            public MyClass_OpSStructSDResult(global::System.Collections.Generic.Stack<SD> returnValue, global::System.Collections.Generic.Stack<SD> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Stack<SD> returnValue;
            public global::System.Collections.Generic.Stack<SD> o;
        }

        public struct MyClass_OpACVSResult
        {
            public MyClass_OpACVSResult(CV[] returnValue, CV[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public CV[] returnValue;
            public CV[] o;
        }

        public struct MyClass_OpLCVSResult
        {
            public MyClass_OpLCVSResult(global::System.Collections.Generic.List<CV> returnValue, global::System.Collections.Generic.List<CV> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<CV> returnValue;
            public global::System.Collections.Generic.List<CV> o;
        }

        public struct MyClass_OpACRSResult
        {
            public MyClass_OpACRSResult(CR[] returnValue, CR[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public CR[] returnValue;
            public CR[] o;
        }

        public struct MyClass_OpLCRSResult
        {
            public MyClass_OpLCRSResult(global::System.Collections.Generic.List<CR> returnValue, global::System.Collections.Generic.List<CR> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<CR> returnValue;
            public global::System.Collections.Generic.List<CR> o;
        }

        public struct MyClass_OpAEnSResult
        {
            public MyClass_OpAEnSResult(En[] returnValue, En[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public En[] returnValue;
            public En[] o;
        }

        public struct MyClass_OpLEnSResult
        {
            public MyClass_OpLEnSResult(global::System.Collections.Generic.List<En> returnValue, global::System.Collections.Generic.List<En> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<En> returnValue;
            public global::System.Collections.Generic.List<En> o;
        }

        public struct MyClass_OpKEnSResult
        {
            public MyClass_OpKEnSResult(global::System.Collections.Generic.LinkedList<En> returnValue, global::System.Collections.Generic.LinkedList<En> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.LinkedList<En> returnValue;
            public global::System.Collections.Generic.LinkedList<En> o;
        }

        public struct MyClass_OpQEnSResult
        {
            public MyClass_OpQEnSResult(global::System.Collections.Generic.Queue<En> returnValue, global::System.Collections.Generic.Queue<En> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Queue<En> returnValue;
            public global::System.Collections.Generic.Queue<En> o;
        }

        public struct MyClass_OpSEnSResult
        {
            public MyClass_OpSEnSResult(global::System.Collections.Generic.Stack<En> returnValue, global::System.Collections.Generic.Stack<En> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Stack<En> returnValue;
            public global::System.Collections.Generic.Stack<En> o;
        }

        public struct MyClass_OpAIPrxSResult
        {
            public MyClass_OpAIPrxSResult(IPrx[] returnValue, IPrx[] o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public IPrx[] returnValue;
            public IPrx[] o;
        }

        public struct MyClass_OpLIPrxSResult
        {
            public MyClass_OpLIPrxSResult(global::System.Collections.Generic.List<IPrx> returnValue, global::System.Collections.Generic.List<IPrx> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.List<IPrx> returnValue;
            public global::System.Collections.Generic.List<IPrx> o;
        }

        public struct MyClass_OpKIPrxSResult
        {
            public MyClass_OpKIPrxSResult(global::System.Collections.Generic.LinkedList<IPrx> returnValue, global::System.Collections.Generic.LinkedList<IPrx> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.LinkedList<IPrx> returnValue;
            public global::System.Collections.Generic.LinkedList<IPrx> o;
        }

        public struct MyClass_OpQIPrxSResult
        {
            public MyClass_OpQIPrxSResult(global::System.Collections.Generic.Queue<IPrx> returnValue, global::System.Collections.Generic.Queue<IPrx> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Queue<IPrx> returnValue;
            public global::System.Collections.Generic.Queue<IPrx> o;
        }

        public struct MyClass_OpSIPrxSResult
        {
            public MyClass_OpSIPrxSResult(global::System.Collections.Generic.Stack<IPrx> returnValue, global::System.Collections.Generic.Stack<IPrx> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::System.Collections.Generic.Stack<IPrx> returnValue;
            public global::System.Collections.Generic.Stack<IPrx> o;
        }

        public struct MyClass_OpCustomIntSResult
        {
            public MyClass_OpCustomIntSResult(global::Ice.seqMapping.Custom<int> returnValue, global::Ice.seqMapping.Custom<int> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::Ice.seqMapping.Custom<int> returnValue;
            public global::Ice.seqMapping.Custom<int> o;
        }

        public struct MyClass_OpCustomCVSResult
        {
            public MyClass_OpCustomCVSResult(global::Ice.seqMapping.Custom<CV> returnValue, global::Ice.seqMapping.Custom<CV> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::Ice.seqMapping.Custom<CV> returnValue;
            public global::Ice.seqMapping.Custom<CV> o;
        }

        public struct MyClass_OpCustomIntSSResult
        {
            public MyClass_OpCustomIntSSResult(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> returnValue, global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> returnValue;
            public global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> o;
        }

        public struct MyClass_OpCustomCVSSResult
        {
            public MyClass_OpCustomCVSSResult(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> returnValue, global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> o)
            {
                this.returnValue = returnValue;
                this.o = o;
            }

            public global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> returnValue;
            public global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> o;
        }
    }
}

namespace Ice.seqMapping.AMD
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface IPrx : global::Ice.ObjectPrx
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface MyClassPrx : global::Ice.ObjectPrx
        {
            void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            byte[] opAByteS(byte[] i, out byte[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAByteSResult> opAByteSAsync(byte[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<byte> opLByteS(global::System.Collections.Generic.List<byte> i, out global::System.Collections.Generic.List<byte> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLByteSResult> opLByteSAsync(global::System.Collections.Generic.List<byte> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<byte> opKByteS(global::System.Collections.Generic.LinkedList<byte> i, out global::System.Collections.Generic.LinkedList<byte> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKByteSResult> opKByteSAsync(global::System.Collections.Generic.LinkedList<byte> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<byte> opQByteS(global::System.Collections.Generic.Queue<byte> i, out global::System.Collections.Generic.Queue<byte> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQByteSResult> opQByteSAsync(global::System.Collections.Generic.Queue<byte> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<byte> opSByteS(global::System.Collections.Generic.Stack<byte> i, out global::System.Collections.Generic.Stack<byte> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSByteSResult> opSByteSAsync(global::System.Collections.Generic.Stack<byte> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            bool[] opABoolS(bool[] i, out bool[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpABoolSResult> opABoolSAsync(bool[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<bool> opLBoolS(global::System.Collections.Generic.List<bool> i, out global::System.Collections.Generic.List<bool> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLBoolSResult> opLBoolSAsync(global::System.Collections.Generic.List<bool> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<bool> opKBoolS(global::System.Collections.Generic.LinkedList<bool> i, out global::System.Collections.Generic.LinkedList<bool> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKBoolSResult> opKBoolSAsync(global::System.Collections.Generic.LinkedList<bool> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<bool> opQBoolS(global::System.Collections.Generic.Queue<bool> i, out global::System.Collections.Generic.Queue<bool> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQBoolSResult> opQBoolSAsync(global::System.Collections.Generic.Queue<bool> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<bool> opSBoolS(global::System.Collections.Generic.Stack<bool> i, out global::System.Collections.Generic.Stack<bool> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSBoolSResult> opSBoolSAsync(global::System.Collections.Generic.Stack<bool> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            short[] opAShortS(short[] i, out short[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAShortSResult> opAShortSAsync(short[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<short> opLShortS(global::System.Collections.Generic.List<short> i, out global::System.Collections.Generic.List<short> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLShortSResult> opLShortSAsync(global::System.Collections.Generic.List<short> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<short> opKShortS(global::System.Collections.Generic.LinkedList<short> i, out global::System.Collections.Generic.LinkedList<short> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKShortSResult> opKShortSAsync(global::System.Collections.Generic.LinkedList<short> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<short> opQShortS(global::System.Collections.Generic.Queue<short> i, out global::System.Collections.Generic.Queue<short> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQShortSResult> opQShortSAsync(global::System.Collections.Generic.Queue<short> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<short> opSShortS(global::System.Collections.Generic.Stack<short> i, out global::System.Collections.Generic.Stack<short> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSShortSResult> opSShortSAsync(global::System.Collections.Generic.Stack<short> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            int[] opAIntS(int[] i, out int[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAIntSResult> opAIntSAsync(int[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<int> opLIntS(global::System.Collections.Generic.List<int> i, out global::System.Collections.Generic.List<int> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLIntSResult> opLIntSAsync(global::System.Collections.Generic.List<int> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<int> opKIntS(global::System.Collections.Generic.LinkedList<int> i, out global::System.Collections.Generic.LinkedList<int> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKIntSResult> opKIntSAsync(global::System.Collections.Generic.LinkedList<int> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<int> opQIntS(global::System.Collections.Generic.Queue<int> i, out global::System.Collections.Generic.Queue<int> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQIntSResult> opQIntSAsync(global::System.Collections.Generic.Queue<int> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<int> opSIntS(global::System.Collections.Generic.Stack<int> i, out global::System.Collections.Generic.Stack<int> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSIntSResult> opSIntSAsync(global::System.Collections.Generic.Stack<int> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            long[] opALongS(long[] i, out long[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpALongSResult> opALongSAsync(long[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<long> opLLongS(global::System.Collections.Generic.List<long> i, out global::System.Collections.Generic.List<long> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLLongSResult> opLLongSAsync(global::System.Collections.Generic.List<long> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<long> opKLongS(global::System.Collections.Generic.LinkedList<long> i, out global::System.Collections.Generic.LinkedList<long> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKLongSResult> opKLongSAsync(global::System.Collections.Generic.LinkedList<long> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<long> opQLongS(global::System.Collections.Generic.Queue<long> i, out global::System.Collections.Generic.Queue<long> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQLongSResult> opQLongSAsync(global::System.Collections.Generic.Queue<long> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<long> opSLongS(global::System.Collections.Generic.Stack<long> i, out global::System.Collections.Generic.Stack<long> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSLongSResult> opSLongSAsync(global::System.Collections.Generic.Stack<long> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            float[] opAFloatS(float[] i, out float[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAFloatSResult> opAFloatSAsync(float[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<float> opLFloatS(global::System.Collections.Generic.List<float> i, out global::System.Collections.Generic.List<float> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLFloatSResult> opLFloatSAsync(global::System.Collections.Generic.List<float> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<float> opKFloatS(global::System.Collections.Generic.LinkedList<float> i, out global::System.Collections.Generic.LinkedList<float> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKFloatSResult> opKFloatSAsync(global::System.Collections.Generic.LinkedList<float> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<float> opQFloatS(global::System.Collections.Generic.Queue<float> i, out global::System.Collections.Generic.Queue<float> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQFloatSResult> opQFloatSAsync(global::System.Collections.Generic.Queue<float> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<float> opSFloatS(global::System.Collections.Generic.Stack<float> i, out global::System.Collections.Generic.Stack<float> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSFloatSResult> opSFloatSAsync(global::System.Collections.Generic.Stack<float> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            double[] opADoubleS(double[] i, out double[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpADoubleSResult> opADoubleSAsync(double[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<double> opLDoubleS(global::System.Collections.Generic.List<double> i, out global::System.Collections.Generic.List<double> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLDoubleSResult> opLDoubleSAsync(global::System.Collections.Generic.List<double> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<double> opKDoubleS(global::System.Collections.Generic.LinkedList<double> i, out global::System.Collections.Generic.LinkedList<double> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKDoubleSResult> opKDoubleSAsync(global::System.Collections.Generic.LinkedList<double> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<double> opQDoubleS(global::System.Collections.Generic.Queue<double> i, out global::System.Collections.Generic.Queue<double> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQDoubleSResult> opQDoubleSAsync(global::System.Collections.Generic.Queue<double> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<double> opSDoubleS(global::System.Collections.Generic.Stack<double> i, out global::System.Collections.Generic.Stack<double> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSDoubleSResult> opSDoubleSAsync(global::System.Collections.Generic.Stack<double> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            string[] opAStringS(string[] i, out string[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAStringSResult> opAStringSAsync(string[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<string> opLStringS(global::System.Collections.Generic.List<string> i, out global::System.Collections.Generic.List<string> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLStringSResult> opLStringSAsync(global::System.Collections.Generic.List<string> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<string> opKStringS(global::System.Collections.Generic.LinkedList<string> i, out global::System.Collections.Generic.LinkedList<string> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKStringSResult> opKStringSAsync(global::System.Collections.Generic.LinkedList<string> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<string> opQStringS(global::System.Collections.Generic.Queue<string> i, out global::System.Collections.Generic.Queue<string> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQStringSResult> opQStringSAsync(global::System.Collections.Generic.Queue<string> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<string> opSStringS(global::System.Collections.Generic.Stack<string> i, out global::System.Collections.Generic.Stack<string> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSStringSResult> opSStringSAsync(global::System.Collections.Generic.Stack<string> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.Value[] opAObjectS(global::Ice.Value[] i, out global::Ice.Value[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAObjectSResult> opAObjectSAsync(global::Ice.Value[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<global::Ice.Value> opLObjectS(global::System.Collections.Generic.List<global::Ice.Value> i, out global::System.Collections.Generic.List<global::Ice.Value> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLObjectSResult> opLObjectSAsync(global::System.Collections.Generic.List<global::Ice.Value> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.ObjectPrx[] opAObjectPrxS(global::Ice.ObjectPrx[] i, out global::Ice.ObjectPrx[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAObjectPrxSResult> opAObjectPrxSAsync(global::Ice.ObjectPrx[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<global::Ice.ObjectPrx> opLObjectPrxS(global::System.Collections.Generic.List<global::Ice.ObjectPrx> i, out global::System.Collections.Generic.List<global::Ice.ObjectPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLObjectPrxSResult> opLObjectPrxSAsync(global::System.Collections.Generic.List<global::Ice.ObjectPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> opKObjectPrxS(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> i, out global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKObjectPrxSResult> opKObjectPrxSAsync(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> opQObjectPrxS(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> i, out global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQObjectPrxSResult> opQObjectPrxSAsync(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> opSObjectPrxS(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> i, out global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSObjectPrxSResult> opSObjectPrxSAsync(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            S[] opAStructS(S[] i, out S[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAStructSResult> opAStructSAsync(S[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<S> opLStructS(global::System.Collections.Generic.List<S> i, out global::System.Collections.Generic.List<S> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLStructSResult> opLStructSAsync(global::System.Collections.Generic.List<S> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<S> opKStructS(global::System.Collections.Generic.LinkedList<S> i, out global::System.Collections.Generic.LinkedList<S> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKStructSResult> opKStructSAsync(global::System.Collections.Generic.LinkedList<S> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<S> opQStructS(global::System.Collections.Generic.Queue<S> i, out global::System.Collections.Generic.Queue<S> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQStructSResult> opQStructSAsync(global::System.Collections.Generic.Queue<S> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<S> opSStructS(global::System.Collections.Generic.Stack<S> i, out global::System.Collections.Generic.Stack<S> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSStructSResult> opSStructSAsync(global::System.Collections.Generic.Stack<S> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            SD[] opAStructSD(SD[] i, out SD[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAStructSDResult> opAStructSDAsync(SD[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<SD> opLStructSD(global::System.Collections.Generic.List<SD> i, out global::System.Collections.Generic.List<SD> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLStructSDResult> opLStructSDAsync(global::System.Collections.Generic.List<SD> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<SD> opKStructSD(global::System.Collections.Generic.LinkedList<SD> i, out global::System.Collections.Generic.LinkedList<SD> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKStructSDResult> opKStructSDAsync(global::System.Collections.Generic.LinkedList<SD> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<SD> opQStructSD(global::System.Collections.Generic.Queue<SD> i, out global::System.Collections.Generic.Queue<SD> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQStructSDResult> opQStructSDAsync(global::System.Collections.Generic.Queue<SD> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<SD> opSStructSD(global::System.Collections.Generic.Stack<SD> i, out global::System.Collections.Generic.Stack<SD> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSStructSDResult> opSStructSDAsync(global::System.Collections.Generic.Stack<SD> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            CV[] opACVS(CV[] i, out CV[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpACVSResult> opACVSAsync(CV[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<CV> opLCVS(global::System.Collections.Generic.List<CV> i, out global::System.Collections.Generic.List<CV> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLCVSResult> opLCVSAsync(global::System.Collections.Generic.List<CV> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            CR[] opACRS(CR[] i, out CR[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpACRSResult> opACRSAsync(CR[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<CR> opLCRS(global::System.Collections.Generic.List<CR> i, out global::System.Collections.Generic.List<CR> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLCRSResult> opLCRSAsync(global::System.Collections.Generic.List<CR> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            En[] opAEnS(En[] i, out En[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAEnSResult> opAEnSAsync(En[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<En> opLEnS(global::System.Collections.Generic.List<En> i, out global::System.Collections.Generic.List<En> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLEnSResult> opLEnSAsync(global::System.Collections.Generic.List<En> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<En> opKEnS(global::System.Collections.Generic.LinkedList<En> i, out global::System.Collections.Generic.LinkedList<En> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKEnSResult> opKEnSAsync(global::System.Collections.Generic.LinkedList<En> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<En> opQEnS(global::System.Collections.Generic.Queue<En> i, out global::System.Collections.Generic.Queue<En> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQEnSResult> opQEnSAsync(global::System.Collections.Generic.Queue<En> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<En> opSEnS(global::System.Collections.Generic.Stack<En> i, out global::System.Collections.Generic.Stack<En> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSEnSResult> opSEnSAsync(global::System.Collections.Generic.Stack<En> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            IPrx[] opAIPrxS(IPrx[] i, out IPrx[] o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAIPrxSResult> opAIPrxSAsync(IPrx[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<IPrx> opLIPrxS(global::System.Collections.Generic.List<IPrx> i, out global::System.Collections.Generic.List<IPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLIPrxSResult> opLIPrxSAsync(global::System.Collections.Generic.List<IPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<IPrx> opKIPrxS(global::System.Collections.Generic.LinkedList<IPrx> i, out global::System.Collections.Generic.LinkedList<IPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKIPrxSResult> opKIPrxSAsync(global::System.Collections.Generic.LinkedList<IPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<IPrx> opQIPrxS(global::System.Collections.Generic.Queue<IPrx> i, out global::System.Collections.Generic.Queue<IPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQIPrxSResult> opQIPrxSAsync(global::System.Collections.Generic.Queue<IPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<IPrx> opSIPrxS(global::System.Collections.Generic.Stack<IPrx> i, out global::System.Collections.Generic.Stack<IPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSIPrxSResult> opSIPrxSAsync(global::System.Collections.Generic.Stack<IPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.seqMapping.Custom<int> opCustomIntS(global::Ice.seqMapping.Custom<int> i, out global::Ice.seqMapping.Custom<int> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpCustomIntSResult> opCustomIntSAsync(global::Ice.seqMapping.Custom<int> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.seqMapping.Custom<CV> opCustomCVS(global::Ice.seqMapping.Custom<CV> i, out global::Ice.seqMapping.Custom<CV> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpCustomCVSResult> opCustomCVSAsync(global::Ice.seqMapping.Custom<CV> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> opCustomIntSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> i, out global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpCustomIntSSResult> opCustomIntSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> opCustomCVSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> i, out global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> o, global::System.Collections.Generic.Dictionary<string, string> context = null);

            global::System.Threading.Tasks.Task<MyClass_OpCustomCVSSResult> opCustomCVSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Ice.seqMapping.AMD
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface IOperations_
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface MyClassOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task shutdownAsync(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpAByteSResult> opAByteSAsync(byte[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLByteSResult> opLByteSAsync(global::System.Collections.Generic.List<byte> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpKByteSResult> opKByteSAsync(global::System.Collections.Generic.LinkedList<byte> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpQByteSResult> opQByteSAsync(global::System.Collections.Generic.Queue<byte> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpSByteSResult> opSByteSAsync(global::System.Collections.Generic.Stack<byte> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpABoolSResult> opABoolSAsync(bool[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLBoolSResult> opLBoolSAsync(global::System.Collections.Generic.List<bool> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpKBoolSResult> opKBoolSAsync(global::System.Collections.Generic.LinkedList<bool> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpQBoolSResult> opQBoolSAsync(global::System.Collections.Generic.Queue<bool> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpSBoolSResult> opSBoolSAsync(global::System.Collections.Generic.Stack<bool> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpAShortSResult> opAShortSAsync(short[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLShortSResult> opLShortSAsync(global::System.Collections.Generic.List<short> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpKShortSResult> opKShortSAsync(global::System.Collections.Generic.LinkedList<short> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpQShortSResult> opQShortSAsync(global::System.Collections.Generic.Queue<short> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpSShortSResult> opSShortSAsync(global::System.Collections.Generic.Stack<short> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpAIntSResult> opAIntSAsync(int[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLIntSResult> opLIntSAsync(global::System.Collections.Generic.List<int> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpKIntSResult> opKIntSAsync(global::System.Collections.Generic.LinkedList<int> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpQIntSResult> opQIntSAsync(global::System.Collections.Generic.Queue<int> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpSIntSResult> opSIntSAsync(global::System.Collections.Generic.Stack<int> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpALongSResult> opALongSAsync(long[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLLongSResult> opLLongSAsync(global::System.Collections.Generic.List<long> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpKLongSResult> opKLongSAsync(global::System.Collections.Generic.LinkedList<long> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpQLongSResult> opQLongSAsync(global::System.Collections.Generic.Queue<long> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpSLongSResult> opSLongSAsync(global::System.Collections.Generic.Stack<long> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpAFloatSResult> opAFloatSAsync(float[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLFloatSResult> opLFloatSAsync(global::System.Collections.Generic.List<float> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpKFloatSResult> opKFloatSAsync(global::System.Collections.Generic.LinkedList<float> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpQFloatSResult> opQFloatSAsync(global::System.Collections.Generic.Queue<float> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpSFloatSResult> opSFloatSAsync(global::System.Collections.Generic.Stack<float> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpADoubleSResult> opADoubleSAsync(double[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLDoubleSResult> opLDoubleSAsync(global::System.Collections.Generic.List<double> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpKDoubleSResult> opKDoubleSAsync(global::System.Collections.Generic.LinkedList<double> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpQDoubleSResult> opQDoubleSAsync(global::System.Collections.Generic.Queue<double> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpSDoubleSResult> opSDoubleSAsync(global::System.Collections.Generic.Stack<double> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpAStringSResult> opAStringSAsync(string[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLStringSResult> opLStringSAsync(global::System.Collections.Generic.List<string> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpKStringSResult> opKStringSAsync(global::System.Collections.Generic.LinkedList<string> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpQStringSResult> opQStringSAsync(global::System.Collections.Generic.Queue<string> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpSStringSResult> opSStringSAsync(global::System.Collections.Generic.Stack<string> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpAObjectSResult> opAObjectSAsync(global::Ice.Value[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLObjectSResult> opLObjectSAsync(global::System.Collections.Generic.List<global::Ice.Value> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpAObjectPrxSResult> opAObjectPrxSAsync(global::Ice.ObjectPrx[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLObjectPrxSResult> opLObjectPrxSAsync(global::System.Collections.Generic.List<global::Ice.ObjectPrx> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpKObjectPrxSResult> opKObjectPrxSAsync(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpQObjectPrxSResult> opQObjectPrxSAsync(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpSObjectPrxSResult> opSObjectPrxSAsync(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpAStructSResult> opAStructSAsync(S[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLStructSResult> opLStructSAsync(global::System.Collections.Generic.List<S> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpKStructSResult> opKStructSAsync(global::System.Collections.Generic.LinkedList<S> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpQStructSResult> opQStructSAsync(global::System.Collections.Generic.Queue<S> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpSStructSResult> opSStructSAsync(global::System.Collections.Generic.Stack<S> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpAStructSDResult> opAStructSDAsync(SD[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLStructSDResult> opLStructSDAsync(global::System.Collections.Generic.List<SD> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpKStructSDResult> opKStructSDAsync(global::System.Collections.Generic.LinkedList<SD> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpQStructSDResult> opQStructSDAsync(global::System.Collections.Generic.Queue<SD> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpSStructSDResult> opSStructSDAsync(global::System.Collections.Generic.Stack<SD> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpACVSResult> opACVSAsync(CV[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLCVSResult> opLCVSAsync(global::System.Collections.Generic.List<CV> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpACRSResult> opACRSAsync(CR[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLCRSResult> opLCRSAsync(global::System.Collections.Generic.List<CR> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpAEnSResult> opAEnSAsync(En[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLEnSResult> opLEnSAsync(global::System.Collections.Generic.List<En> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpKEnSResult> opKEnSAsync(global::System.Collections.Generic.LinkedList<En> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpQEnSResult> opQEnSAsync(global::System.Collections.Generic.Queue<En> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpSEnSResult> opSEnSAsync(global::System.Collections.Generic.Stack<En> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpAIPrxSResult> opAIPrxSAsync(IPrx[] i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpLIPrxSResult> opLIPrxSAsync(global::System.Collections.Generic.List<IPrx> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpKIPrxSResult> opKIPrxSAsync(global::System.Collections.Generic.LinkedList<IPrx> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpQIPrxSResult> opQIPrxSAsync(global::System.Collections.Generic.Queue<IPrx> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpSIPrxSResult> opSIPrxSAsync(global::System.Collections.Generic.Stack<IPrx> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpCustomIntSResult> opCustomIntSAsync(global::Ice.seqMapping.Custom<int> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpCustomCVSResult> opCustomCVSAsync(global::Ice.seqMapping.Custom<CV> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpCustomIntSSResult> opCustomIntSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> i, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<MyClass_OpCustomCVSSResult> opCustomCVSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> i, global::Ice.Current current = null);
        }
    }
}

namespace Ice.seqMapping.AMD
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class AByteSHelper
        {
            public static void write(global::Ice.OutputStream ostr, byte[] v)
            {
                ostr.writeByteSeq(v);
            }

            public static byte[] read(global::Ice.InputStream istr)
            {
                byte[] v;
                v = istr.readByteSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LByteSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<byte> v)
            {
                ostr.writeByteSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.List<byte> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<byte> v;
                istr.readByteSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class KByteSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<byte> v)
            {
                ostr.writeByteSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.LinkedList<byte> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<byte> v;
                istr.readByteSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class QByteSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<byte> v)
            {
                ostr.writeByteSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Queue<byte> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<byte> v;
                istr.readByteSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SByteSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<byte> v)
            {
                ostr.writeByteSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Stack<byte> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<byte> v;
                istr.readByteSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ABoolSHelper
        {
            public static void write(global::Ice.OutputStream ostr, bool[] v)
            {
                ostr.writeBoolSeq(v);
            }

            public static bool[] read(global::Ice.InputStream istr)
            {
                bool[] v;
                v = istr.readBoolSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LBoolSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<bool> v)
            {
                ostr.writeBoolSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.List<bool> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<bool> v;
                istr.readBoolSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class KBoolSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<bool> v)
            {
                ostr.writeBoolSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.LinkedList<bool> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<bool> v;
                istr.readBoolSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class QBoolSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<bool> v)
            {
                ostr.writeBoolSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Queue<bool> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<bool> v;
                istr.readBoolSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SBoolSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<bool> v)
            {
                ostr.writeBoolSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Stack<bool> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<bool> v;
                istr.readBoolSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class AShortSHelper
        {
            public static void write(global::Ice.OutputStream ostr, short[] v)
            {
                ostr.writeShortSeq(v);
            }

            public static short[] read(global::Ice.InputStream istr)
            {
                short[] v;
                v = istr.readShortSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LShortSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<short> v)
            {
                ostr.writeShortSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.List<short> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<short> v;
                istr.readShortSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class KShortSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<short> v)
            {
                ostr.writeShortSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.LinkedList<short> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<short> v;
                istr.readShortSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class QShortSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<short> v)
            {
                ostr.writeShortSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Queue<short> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<short> v;
                istr.readShortSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SShortSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<short> v)
            {
                ostr.writeShortSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Stack<short> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<short> v;
                istr.readShortSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class AIntSHelper
        {
            public static void write(global::Ice.OutputStream ostr, int[] v)
            {
                ostr.writeIntSeq(v);
            }

            public static int[] read(global::Ice.InputStream istr)
            {
                int[] v;
                v = istr.readIntSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LIntSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<int> v)
            {
                ostr.writeIntSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.List<int> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<int> v;
                istr.readIntSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class KIntSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<int> v)
            {
                ostr.writeIntSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.LinkedList<int> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<int> v;
                istr.readIntSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class QIntSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<int> v)
            {
                ostr.writeIntSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Queue<int> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<int> v;
                istr.readIntSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SIntSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<int> v)
            {
                ostr.writeIntSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Stack<int> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<int> v;
                istr.readIntSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ALongSHelper
        {
            public static void write(global::Ice.OutputStream ostr, long[] v)
            {
                ostr.writeLongSeq(v);
            }

            public static long[] read(global::Ice.InputStream istr)
            {
                long[] v;
                v = istr.readLongSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LLongSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<long> v)
            {
                ostr.writeLongSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.List<long> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<long> v;
                istr.readLongSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class KLongSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<long> v)
            {
                ostr.writeLongSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.LinkedList<long> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<long> v;
                istr.readLongSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class QLongSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<long> v)
            {
                ostr.writeLongSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Queue<long> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<long> v;
                istr.readLongSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SLongSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<long> v)
            {
                ostr.writeLongSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Stack<long> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<long> v;
                istr.readLongSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class AFloatSHelper
        {
            public static void write(global::Ice.OutputStream ostr, float[] v)
            {
                ostr.writeFloatSeq(v);
            }

            public static float[] read(global::Ice.InputStream istr)
            {
                float[] v;
                v = istr.readFloatSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LFloatSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<float> v)
            {
                ostr.writeFloatSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.List<float> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<float> v;
                istr.readFloatSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class KFloatSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<float> v)
            {
                ostr.writeFloatSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.LinkedList<float> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<float> v;
                istr.readFloatSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class QFloatSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<float> v)
            {
                ostr.writeFloatSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Queue<float> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<float> v;
                istr.readFloatSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SFloatSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<float> v)
            {
                ostr.writeFloatSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Stack<float> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<float> v;
                istr.readFloatSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ADoubleSHelper
        {
            public static void write(global::Ice.OutputStream ostr, double[] v)
            {
                ostr.writeDoubleSeq(v);
            }

            public static double[] read(global::Ice.InputStream istr)
            {
                double[] v;
                v = istr.readDoubleSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LDoubleSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<double> v)
            {
                ostr.writeDoubleSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.List<double> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<double> v;
                istr.readDoubleSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class KDoubleSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<double> v)
            {
                ostr.writeDoubleSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.LinkedList<double> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<double> v;
                istr.readDoubleSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class QDoubleSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<double> v)
            {
                ostr.writeDoubleSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Queue<double> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<double> v;
                istr.readDoubleSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SDoubleSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<double> v)
            {
                ostr.writeDoubleSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Stack<double> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<double> v;
                istr.readDoubleSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class AStringSHelper
        {
            public static void write(global::Ice.OutputStream ostr, string[] v)
            {
                ostr.writeStringSeq(v);
            }

            public static string[] read(global::Ice.InputStream istr)
            {
                string[] v;
                v = istr.readStringSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LStringSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<string> v)
            {
                ostr.writeStringSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.List<string> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<string> v;
                istr.readStringSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class KStringSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<string> v)
            {
                ostr.writeStringSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.LinkedList<string> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<string> v;
                istr.readStringSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class QStringSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<string> v)
            {
                ostr.writeStringSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Queue<string> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<string> v;
                istr.readStringSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SStringSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<string> v)
            {
                ostr.writeStringSeq(v == null ? 0 : v.Count, v);
            }

            public static global::System.Collections.Generic.Stack<string> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<string> v;
                istr.readStringSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class AObjectSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Ice.Value[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static global::Ice.Value[] read(global::Ice.InputStream istr)
            {
                global::Ice.Value[] v;
                int v_lenx = istr.readAndCheckSeqSize(1);
                v = new global::Ice.Value[v_lenx];
                for(int ix = 0; ix < v_lenx; ++ix)
                {
                    istr.readValue(global::Ice.Internal.Patcher.arrayReadValue<global::Ice.Value>(v, ix));
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LObjectSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<global::Ice.Value> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.List<global::Ice.Value> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<global::Ice.Value> v;
                int v_lenx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.List<global::Ice.Value>(v_lenx);
                for(int ix = 0; ix < v_lenx; ++ix)
                {
                    istr.readValue(global::Ice.Internal.Patcher.listReadValue<global::Ice.Value>(v, ix));
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class AObjectPrxSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Ice.ObjectPrx[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeProxy(v[ix]);
                    }
                }
            }

            public static global::Ice.ObjectPrx[] read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx[] v;
                int v_lenx = istr.readAndCheckSeqSize(2);
                v = new global::Ice.ObjectPrx[v_lenx];
                for(int ix = 0; ix < v_lenx; ++ix)
                {
                    v[ix] = istr.readProxy();
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LObjectPrxSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<global::Ice.ObjectPrx> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        ostr.writeProxy(v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.List<global::Ice.ObjectPrx> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<global::Ice.ObjectPrx> v;
                int v_lenx = istr.readAndCheckSeqSize(2);
                v = new global::System.Collections.Generic.List<global::Ice.ObjectPrx>(v_lenx);
                for(int ix = 0; ix < v_lenx; ++ix)
                {
                    global::Ice.ObjectPrx val = new global::Ice.ObjectPrxHelperBase();
                    val = istr.readProxy();
                    v.Add(val);
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class KObjectPrxSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<global::Ice.ObjectPrx> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        ostr.writeProxy(e.Current);
                    }
                }
            }

            public static global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> v;
                int v_lenx = istr.readAndCheckSeqSize(2);
                v = new global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx>();
                for(int ix = 0; ix < v_lenx; ++ix)
                {
                    global::Ice.ObjectPrx val = new global::Ice.ObjectPrxHelperBase();
                    val = istr.readProxy();
                    v.AddLast(val);
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class QObjectPrxSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<global::Ice.ObjectPrx> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        ostr.writeProxy(e.Current);
                    }
                }
            }

            public static global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> v;
                int v_lenx = istr.readAndCheckSeqSize(2);
                v = new global::System.Collections.Generic.Queue<global::Ice.ObjectPrx>(v_lenx);
                for(int ix = 0; ix < v_lenx; ++ix)
                {
                    global::Ice.ObjectPrx val = new global::Ice.ObjectPrxHelperBase();
                    val = istr.readProxy();
                    v.Enqueue(val);
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SObjectPrxSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::Ice.ObjectPrx[] v_tmp = v.ToArray();
                    for(int ix = 0; ix < v_tmp.Length; ++ix)
                    {
                        ostr.writeProxy(v_tmp[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> v;
                int v_lenx = istr.readAndCheckSeqSize(2);
                global::Ice.ObjectPrx[] v_tmp = new global::Ice.ObjectPrx[v_lenx];
                for(int ix = 0; ix < v_lenx; ++ix)
                {
                    v_tmp[ix] = istr.readProxy();
                }
                global::System.Array.Reverse(v_tmp);
                v = new global::System.Collections.Generic.Stack<global::Ice.ObjectPrx>(v_tmp);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class AStructSHelper
        {
            public static void write(global::Ice.OutputStream ostr, S[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        v[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static S[] read(global::Ice.InputStream istr)
            {
                S[] v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new S[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LStructSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<S> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        v[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.List<S> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<S> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::System.Collections.Generic.List<S>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        S val = new S();
                        val.ice_readMembers(istr);
                        v.Add(val);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class KStructSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<S> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<S> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        e.Current.ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.LinkedList<S> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<S> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::System.Collections.Generic.LinkedList<S>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        S val = new S();
                        val.ice_readMembers(istr);
                        v.AddLast(val);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class QStructSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<S> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<S> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        e.Current.ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Queue<S> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<S> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::System.Collections.Generic.Queue<S>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        S val = new S();
                        val.ice_readMembers(istr);
                        v.Enqueue(val);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SStructSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<S> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    S[] v_tmp = v.ToArray();
                    for(int ix = 0; ix < v_tmp.Length; ++ix)
                    {
                        v_tmp[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Stack<S> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<S> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    S[] v_tmp = new S[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v_tmp[ix].ice_readMembers(istr);
                    }
                    global::System.Array.Reverse(v_tmp);
                    v = new global::System.Collections.Generic.Stack<S>(v_tmp);
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class AStructSDHelper
        {
            public static void write(global::Ice.OutputStream ostr, SD[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new SD() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static SD[] read(global::Ice.InputStream istr)
            {
                SD[] v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new SD[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new SD();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LStructSDHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<SD> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        (v[ix] == null ? new SD() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.List<SD> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<SD> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::System.Collections.Generic.List<SD>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        SD val = new SD();
                        val.ice_readMembers(istr);
                        v.Add(val);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class KStructSDHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<SD> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<SD> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        (e.Current == null ? new SD() : e.Current).ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.LinkedList<SD> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<SD> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::System.Collections.Generic.LinkedList<SD>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        SD val = new SD();
                        val.ice_readMembers(istr);
                        v.AddLast(val);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class QStructSDHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<SD> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<SD> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        (e.Current == null ? new SD() : e.Current).ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Queue<SD> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<SD> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::System.Collections.Generic.Queue<SD>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        SD val = new SD();
                        val.ice_readMembers(istr);
                        v.Enqueue(val);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SStructSDHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<SD> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    SD[] v_tmp = v.ToArray();
                    for(int ix = 0; ix < v_tmp.Length; ++ix)
                    {
                        (v_tmp[ix] == null ? new SD() : v_tmp[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Stack<SD> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<SD> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    SD[] v_tmp = new SD[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v_tmp[ix] = new SD();
                        v_tmp[ix].ice_readMembers(istr);
                    }
                    global::System.Array.Reverse(v_tmp);
                    v = new global::System.Collections.Generic.Stack<SD>(v_tmp);
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ACVSHelper
        {
            public static void write(global::Ice.OutputStream ostr, CV[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static CV[] read(global::Ice.InputStream istr)
            {
                CV[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new CV[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(global::Ice.Internal.Patcher.arrayReadValue<CV>(v, ix));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LCVSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<CV> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.List<CV> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<CV> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.List<CV>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(global::Ice.Internal.Patcher.listReadValue<CV>(v, ix));
                    }
                }
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IPrxHelper : global::Ice.ObjectPrxHelperBase, IPrx
        {
            public IPrxHelper()
            {
            }

            #region Async Task operations

            #endregion

            #region Checked and unchecked cast operations

            public static IPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
            {
                if (b is not null && b.ice_isA(ice_staticId(), ctx))
                {
                    IPrxHelper prx = new IPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static IPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
            {
                global::Ice.ObjectPrx bb = b?.ice_facet(f);
                try
                {
                    if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                    {
                        IPrxHelper prx = new IPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static IPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if (b is not null)
                {
                    IPrxHelper prx = new IPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static IPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if (b is not null)
                {
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    IPrxHelper prx = new IPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
                return null;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::I"
            };

            public static string ice_staticId() => "::Test::I";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, IPrx v)
            {
                ostr.writeProxy(v);
            }

            public static IPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    IPrxHelper result = new IPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class AIPrxSHelper
        {
            public static void write(global::Ice.OutputStream ostr, IPrx[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        IPrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static IPrx[] read(global::Ice.InputStream istr)
            {
                IPrx[] v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new IPrx[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = IPrxHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LIPrxSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<IPrx> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        IPrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.List<IPrx> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<IPrx> v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new global::System.Collections.Generic.List<IPrx>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(IPrxHelper.read(istr));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class KIPrxSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<IPrx> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<IPrx> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        IPrxHelper.write(ostr, e.Current);
                    }
                }
            }

            public static global::System.Collections.Generic.LinkedList<IPrx> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<IPrx> v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new global::System.Collections.Generic.LinkedList<IPrx>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.AddLast(IPrxHelper.read(istr));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class QIPrxSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<IPrx> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<IPrx> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        IPrxHelper.write(ostr, e.Current);
                    }
                }
            }

            public static global::System.Collections.Generic.Queue<IPrx> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<IPrx> v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new global::System.Collections.Generic.Queue<IPrx>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Enqueue(IPrxHelper.read(istr));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SIPrxSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<IPrx> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    IPrx[] v_tmp = v.ToArray();
                    for(int ix = 0; ix < v_tmp.Length; ++ix)
                    {
                        IPrxHelper.write(ostr, v_tmp[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.Stack<IPrx> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<IPrx> v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    IPrx[] v_tmp = new IPrx[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v_tmp[ix] = IPrxHelper.read(istr);
                    }
                    global::System.Array.Reverse(v_tmp);
                    v = new global::System.Collections.Generic.Stack<IPrx>(v_tmp);
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ACRSHelper
        {
            public static void write(global::Ice.OutputStream ostr, CR[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static CR[] read(global::Ice.InputStream istr)
            {
                CR[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new CR[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(global::Ice.Internal.Patcher.arrayReadValue<CR>(v, ix));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LCRSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<CR> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.List<CR> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<CR> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.List<CR>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(global::Ice.Internal.Patcher.listReadValue<CR>(v, ix));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class AEnSHelper
        {
            public static void write(global::Ice.OutputStream ostr, En[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeEnum((int)v[ix], 2);
                    }
                }
            }

            public static En[] read(global::Ice.InputStream istr)
            {
                En[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new En[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = (En)istr.readEnum(2);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LEnSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.List<En> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        ostr.writeEnum((int)v[ix], 2);
                    }
                }
            }

            public static global::System.Collections.Generic.List<En> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<En> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.List<En>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add((En)istr.readEnum(2));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class KEnSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<En> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<En> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        ostr.writeEnum((int)e.Current, 2);
                    }
                }
            }

            public static global::System.Collections.Generic.LinkedList<En> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<En> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.LinkedList<En>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.AddLast((En)istr.readEnum(2));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class QEnSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Queue<En> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<En> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        ostr.writeEnum((int)e.Current, 2);
                    }
                }
            }

            public static global::System.Collections.Generic.Queue<En> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<En> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.Queue<En>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Enqueue((En)istr.readEnum(2));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class SEnSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::System.Collections.Generic.Stack<En> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    En[] v_tmp = v.ToArray();
                    for(int ix = 0; ix < v_tmp.Length; ++ix)
                    {
                        ostr.writeEnum((int)v_tmp[ix], 2);
                    }
                }
            }

            public static global::System.Collections.Generic.Stack<En> read(global::Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<En> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    En[] v_tmp = new En[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v_tmp[ix] = (En)istr.readEnum(2);
                    }
                    global::System.Array.Reverse(v_tmp);
                    v = new global::System.Collections.Generic.Stack<En>(v_tmp);
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class CustomIntSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Ice.seqMapping.Custom<int> v)
            {
                ostr.writeIntSeq(v == null ? 0 : v.Count, v);
            }

            public static global::Ice.seqMapping.Custom<int> read(global::Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<int> v;
                {
                    v = new global::Ice.seqMapping.Custom<int>();
                    int szx = istr.readSize();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(istr.readInt());
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class CustomCVSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Ice.seqMapping.Custom<CV> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<CV> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        ostr.writeValue(e.Current);
                    }
                }
            }

            public static global::Ice.seqMapping.Custom<CV> read(global::Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<CV> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::Ice.seqMapping.Custom<CV>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(global::Ice.Internal.Patcher.customSeqReadValue<CV>(v, ix));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public class CustomCVS_Tester
        {
            CustomCVS_Tester()
            {
                global::Ice.seqMapping.Custom<CV> test = new global::Ice.seqMapping.Custom<CV>();
                test[0] = null;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class CustomIntSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<global::Ice.seqMapping.Custom<int>> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        CustomIntSHelper.write(ostr, e.Current);
                    }
                }
            }

            public static global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> read(global::Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(CustomIntSHelper.read(istr));
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class CustomCVSSHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<global::Ice.seqMapping.Custom<CV>> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        CustomCVSHelper.write(ostr, e.Current);
                    }
                }
            }

            public static global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> read(global::Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(CustomCVSHelper.read(istr));
                    }
                }
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyClassPrxHelper : global::Ice.ObjectPrxHelperBase, MyClassPrx
        {
            public MyClassPrxHelper()
            {
            }

            #region Synchronous operations

            public void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[] opAByteS(byte[] i, out byte[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opAByteSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<byte> opLByteS(global::System.Collections.Generic.List<byte> i, out global::System.Collections.Generic.List<byte> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLByteSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.LinkedList<byte> opKByteS(global::System.Collections.Generic.LinkedList<byte> i, out global::System.Collections.Generic.LinkedList<byte> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opKByteSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Queue<byte> opQByteS(global::System.Collections.Generic.Queue<byte> i, out global::System.Collections.Generic.Queue<byte> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opQByteSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Stack<byte> opSByteS(global::System.Collections.Generic.Stack<byte> i, out global::System.Collections.Generic.Stack<byte> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSByteSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool[] opABoolS(bool[] i, out bool[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opABoolSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<bool> opLBoolS(global::System.Collections.Generic.List<bool> i, out global::System.Collections.Generic.List<bool> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLBoolSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.LinkedList<bool> opKBoolS(global::System.Collections.Generic.LinkedList<bool> i, out global::System.Collections.Generic.LinkedList<bool> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opKBoolSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Queue<bool> opQBoolS(global::System.Collections.Generic.Queue<bool> i, out global::System.Collections.Generic.Queue<bool> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opQBoolSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Stack<bool> opSBoolS(global::System.Collections.Generic.Stack<bool> i, out global::System.Collections.Generic.Stack<bool> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSBoolSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public short[] opAShortS(short[] i, out short[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opAShortSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<short> opLShortS(global::System.Collections.Generic.List<short> i, out global::System.Collections.Generic.List<short> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLShortSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.LinkedList<short> opKShortS(global::System.Collections.Generic.LinkedList<short> i, out global::System.Collections.Generic.LinkedList<short> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opKShortSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Queue<short> opQShortS(global::System.Collections.Generic.Queue<short> i, out global::System.Collections.Generic.Queue<short> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opQShortSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Stack<short> opSShortS(global::System.Collections.Generic.Stack<short> i, out global::System.Collections.Generic.Stack<short> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSShortSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int[] opAIntS(int[] i, out int[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opAIntSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<int> opLIntS(global::System.Collections.Generic.List<int> i, out global::System.Collections.Generic.List<int> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLIntSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.LinkedList<int> opKIntS(global::System.Collections.Generic.LinkedList<int> i, out global::System.Collections.Generic.LinkedList<int> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opKIntSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Queue<int> opQIntS(global::System.Collections.Generic.Queue<int> i, out global::System.Collections.Generic.Queue<int> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opQIntSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Stack<int> opSIntS(global::System.Collections.Generic.Stack<int> i, out global::System.Collections.Generic.Stack<int> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSIntSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long[] opALongS(long[] i, out long[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opALongSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<long> opLLongS(global::System.Collections.Generic.List<long> i, out global::System.Collections.Generic.List<long> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLLongSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.LinkedList<long> opKLongS(global::System.Collections.Generic.LinkedList<long> i, out global::System.Collections.Generic.LinkedList<long> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opKLongSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Queue<long> opQLongS(global::System.Collections.Generic.Queue<long> i, out global::System.Collections.Generic.Queue<long> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opQLongSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Stack<long> opSLongS(global::System.Collections.Generic.Stack<long> i, out global::System.Collections.Generic.Stack<long> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSLongSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public float[] opAFloatS(float[] i, out float[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opAFloatSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<float> opLFloatS(global::System.Collections.Generic.List<float> i, out global::System.Collections.Generic.List<float> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLFloatSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.LinkedList<float> opKFloatS(global::System.Collections.Generic.LinkedList<float> i, out global::System.Collections.Generic.LinkedList<float> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opKFloatSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Queue<float> opQFloatS(global::System.Collections.Generic.Queue<float> i, out global::System.Collections.Generic.Queue<float> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opQFloatSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Stack<float> opSFloatS(global::System.Collections.Generic.Stack<float> i, out global::System.Collections.Generic.Stack<float> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSFloatSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double[] opADoubleS(double[] i, out double[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opADoubleSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<double> opLDoubleS(global::System.Collections.Generic.List<double> i, out global::System.Collections.Generic.List<double> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLDoubleSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.LinkedList<double> opKDoubleS(global::System.Collections.Generic.LinkedList<double> i, out global::System.Collections.Generic.LinkedList<double> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opKDoubleSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Queue<double> opQDoubleS(global::System.Collections.Generic.Queue<double> i, out global::System.Collections.Generic.Queue<double> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opQDoubleSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Stack<double> opSDoubleS(global::System.Collections.Generic.Stack<double> i, out global::System.Collections.Generic.Stack<double> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSDoubleSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] opAStringS(string[] i, out string[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opAStringSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<string> opLStringS(global::System.Collections.Generic.List<string> i, out global::System.Collections.Generic.List<string> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLStringSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.LinkedList<string> opKStringS(global::System.Collections.Generic.LinkedList<string> i, out global::System.Collections.Generic.LinkedList<string> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opKStringSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Queue<string> opQStringS(global::System.Collections.Generic.Queue<string> i, out global::System.Collections.Generic.Queue<string> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opQStringSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Stack<string> opSStringS(global::System.Collections.Generic.Stack<string> i, out global::System.Collections.Generic.Stack<string> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSStringSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.Value[] opAObjectS(global::Ice.Value[] i, out global::Ice.Value[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opAObjectSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<global::Ice.Value> opLObjectS(global::System.Collections.Generic.List<global::Ice.Value> i, out global::System.Collections.Generic.List<global::Ice.Value> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLObjectSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.ObjectPrx[] opAObjectPrxS(global::Ice.ObjectPrx[] i, out global::Ice.ObjectPrx[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opAObjectPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<global::Ice.ObjectPrx> opLObjectPrxS(global::System.Collections.Generic.List<global::Ice.ObjectPrx> i, out global::System.Collections.Generic.List<global::Ice.ObjectPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLObjectPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> opKObjectPrxS(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> i, out global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opKObjectPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> opQObjectPrxS(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> i, out global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opQObjectPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> opSObjectPrxS(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> i, out global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSObjectPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public S[] opAStructS(S[] i, out S[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opAStructSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<S> opLStructS(global::System.Collections.Generic.List<S> i, out global::System.Collections.Generic.List<S> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLStructSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.LinkedList<S> opKStructS(global::System.Collections.Generic.LinkedList<S> i, out global::System.Collections.Generic.LinkedList<S> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opKStructSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Queue<S> opQStructS(global::System.Collections.Generic.Queue<S> i, out global::System.Collections.Generic.Queue<S> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opQStructSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Stack<S> opSStructS(global::System.Collections.Generic.Stack<S> i, out global::System.Collections.Generic.Stack<S> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSStructSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public SD[] opAStructSD(SD[] i, out SD[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opAStructSDAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<SD> opLStructSD(global::System.Collections.Generic.List<SD> i, out global::System.Collections.Generic.List<SD> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLStructSDAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.LinkedList<SD> opKStructSD(global::System.Collections.Generic.LinkedList<SD> i, out global::System.Collections.Generic.LinkedList<SD> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opKStructSDAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Queue<SD> opQStructSD(global::System.Collections.Generic.Queue<SD> i, out global::System.Collections.Generic.Queue<SD> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opQStructSDAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Stack<SD> opSStructSD(global::System.Collections.Generic.Stack<SD> i, out global::System.Collections.Generic.Stack<SD> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSStructSDAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public CV[] opACVS(CV[] i, out CV[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opACVSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<CV> opLCVS(global::System.Collections.Generic.List<CV> i, out global::System.Collections.Generic.List<CV> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLCVSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public CR[] opACRS(CR[] i, out CR[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opACRSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<CR> opLCRS(global::System.Collections.Generic.List<CR> i, out global::System.Collections.Generic.List<CR> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLCRSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public En[] opAEnS(En[] i, out En[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opAEnSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<En> opLEnS(global::System.Collections.Generic.List<En> i, out global::System.Collections.Generic.List<En> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLEnSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.LinkedList<En> opKEnS(global::System.Collections.Generic.LinkedList<En> i, out global::System.Collections.Generic.LinkedList<En> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opKEnSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Queue<En> opQEnS(global::System.Collections.Generic.Queue<En> i, out global::System.Collections.Generic.Queue<En> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opQEnSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Stack<En> opSEnS(global::System.Collections.Generic.Stack<En> i, out global::System.Collections.Generic.Stack<En> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSEnSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public IPrx[] opAIPrxS(IPrx[] i, out IPrx[] o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opAIPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.List<IPrx> opLIPrxS(global::System.Collections.Generic.List<IPrx> i, out global::System.Collections.Generic.List<IPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opLIPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.LinkedList<IPrx> opKIPrxS(global::System.Collections.Generic.LinkedList<IPrx> i, out global::System.Collections.Generic.LinkedList<IPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opKIPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Queue<IPrx> opQIPrxS(global::System.Collections.Generic.Queue<IPrx> i, out global::System.Collections.Generic.Queue<IPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opQIPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::System.Collections.Generic.Stack<IPrx> opSIPrxS(global::System.Collections.Generic.Stack<IPrx> i, out global::System.Collections.Generic.Stack<IPrx> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opSIPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.seqMapping.Custom<int> opCustomIntS(global::Ice.seqMapping.Custom<int> i, out global::Ice.seqMapping.Custom<int> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opCustomIntSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.seqMapping.Custom<CV> opCustomCVS(global::Ice.seqMapping.Custom<CV> i, out global::Ice.seqMapping.Custom<CV> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opCustomCVSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> opCustomIntSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> i, out global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opCustomIntSSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> opCustomCVSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> i, out global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> o, global::System.Collections.Generic.Dictionary<string, string> context = null)
            {
                try
                {
                    var result_ = _iceI_opCustomCVSSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAByteSResult> opAByteSAsync(byte[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAByteSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAByteSResult> _iceI_opAByteSAsync(byte[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAByteS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAByteSResult>(progress, cancel);
                _iceI_opAByteS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAByteS_name = "opAByteS";

            private void _iceI_opAByteS(byte[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAByteSResult>(completed);
                outAsync.invoke(
                    _opAByteS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        AByteSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpAByteSResult ret = new MyClass_OpAByteSResult();
                        ret.o = AByteSHelper.read(istr);
                        ret.returnValue = AByteSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLByteSResult> opLByteSAsync(global::System.Collections.Generic.List<byte> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLByteSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLByteSResult> _iceI_opLByteSAsync(global::System.Collections.Generic.List<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLByteS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLByteSResult>(progress, cancel);
                _iceI_opLByteS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLByteS_name = "opLByteS";

            private void _iceI_opLByteS(global::System.Collections.Generic.List<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLByteSResult>(completed);
                outAsync.invoke(
                    _opLByteS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LByteSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLByteSResult ret = new MyClass_OpLByteSResult();
                        ret.o = LByteSHelper.read(istr);
                        ret.returnValue = LByteSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKByteSResult> opKByteSAsync(global::System.Collections.Generic.LinkedList<byte> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKByteSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKByteSResult> _iceI_opKByteSAsync(global::System.Collections.Generic.LinkedList<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKByteS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKByteSResult>(progress, cancel);
                _iceI_opKByteS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKByteS_name = "opKByteS";

            private void _iceI_opKByteS(global::System.Collections.Generic.LinkedList<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKByteSResult>(completed);
                outAsync.invoke(
                    _opKByteS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        KByteSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpKByteSResult ret = new MyClass_OpKByteSResult();
                        ret.o = KByteSHelper.read(istr);
                        ret.returnValue = KByteSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQByteSResult> opQByteSAsync(global::System.Collections.Generic.Queue<byte> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQByteSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQByteSResult> _iceI_opQByteSAsync(global::System.Collections.Generic.Queue<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQByteS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQByteSResult>(progress, cancel);
                _iceI_opQByteS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQByteS_name = "opQByteS";

            private void _iceI_opQByteS(global::System.Collections.Generic.Queue<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQByteSResult>(completed);
                outAsync.invoke(
                    _opQByteS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        QByteSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpQByteSResult ret = new MyClass_OpQByteSResult();
                        ret.o = QByteSHelper.read(istr);
                        ret.returnValue = QByteSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSByteSResult> opSByteSAsync(global::System.Collections.Generic.Stack<byte> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSByteSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSByteSResult> _iceI_opSByteSAsync(global::System.Collections.Generic.Stack<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSByteS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSByteSResult>(progress, cancel);
                _iceI_opSByteS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSByteS_name = "opSByteS";

            private void _iceI_opSByteS(global::System.Collections.Generic.Stack<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSByteSResult>(completed);
                outAsync.invoke(
                    _opSByteS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SByteSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpSByteSResult ret = new MyClass_OpSByteSResult();
                        ret.o = SByteSHelper.read(istr);
                        ret.returnValue = SByteSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpABoolSResult> opABoolSAsync(bool[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opABoolSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpABoolSResult> _iceI_opABoolSAsync(bool[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opABoolS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpABoolSResult>(progress, cancel);
                _iceI_opABoolS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opABoolS_name = "opABoolS";

            private void _iceI_opABoolS(bool[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpABoolSResult>(completed);
                outAsync.invoke(
                    _opABoolS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ABoolSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpABoolSResult ret = new MyClass_OpABoolSResult();
                        ret.o = ABoolSHelper.read(istr);
                        ret.returnValue = ABoolSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLBoolSResult> opLBoolSAsync(global::System.Collections.Generic.List<bool> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLBoolSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLBoolSResult> _iceI_opLBoolSAsync(global::System.Collections.Generic.List<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLBoolS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLBoolSResult>(progress, cancel);
                _iceI_opLBoolS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLBoolS_name = "opLBoolS";

            private void _iceI_opLBoolS(global::System.Collections.Generic.List<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLBoolSResult>(completed);
                outAsync.invoke(
                    _opLBoolS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LBoolSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLBoolSResult ret = new MyClass_OpLBoolSResult();
                        ret.o = LBoolSHelper.read(istr);
                        ret.returnValue = LBoolSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKBoolSResult> opKBoolSAsync(global::System.Collections.Generic.LinkedList<bool> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKBoolSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKBoolSResult> _iceI_opKBoolSAsync(global::System.Collections.Generic.LinkedList<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKBoolS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKBoolSResult>(progress, cancel);
                _iceI_opKBoolS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKBoolS_name = "opKBoolS";

            private void _iceI_opKBoolS(global::System.Collections.Generic.LinkedList<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKBoolSResult>(completed);
                outAsync.invoke(
                    _opKBoolS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        KBoolSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpKBoolSResult ret = new MyClass_OpKBoolSResult();
                        ret.o = KBoolSHelper.read(istr);
                        ret.returnValue = KBoolSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQBoolSResult> opQBoolSAsync(global::System.Collections.Generic.Queue<bool> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQBoolSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQBoolSResult> _iceI_opQBoolSAsync(global::System.Collections.Generic.Queue<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQBoolS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQBoolSResult>(progress, cancel);
                _iceI_opQBoolS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQBoolS_name = "opQBoolS";

            private void _iceI_opQBoolS(global::System.Collections.Generic.Queue<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQBoolSResult>(completed);
                outAsync.invoke(
                    _opQBoolS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        QBoolSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpQBoolSResult ret = new MyClass_OpQBoolSResult();
                        ret.o = QBoolSHelper.read(istr);
                        ret.returnValue = QBoolSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSBoolSResult> opSBoolSAsync(global::System.Collections.Generic.Stack<bool> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSBoolSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSBoolSResult> _iceI_opSBoolSAsync(global::System.Collections.Generic.Stack<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSBoolS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSBoolSResult>(progress, cancel);
                _iceI_opSBoolS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSBoolS_name = "opSBoolS";

            private void _iceI_opSBoolS(global::System.Collections.Generic.Stack<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSBoolSResult>(completed);
                outAsync.invoke(
                    _opSBoolS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SBoolSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpSBoolSResult ret = new MyClass_OpSBoolSResult();
                        ret.o = SBoolSHelper.read(istr);
                        ret.returnValue = SBoolSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAShortSResult> opAShortSAsync(short[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAShortSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAShortSResult> _iceI_opAShortSAsync(short[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAShortS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAShortSResult>(progress, cancel);
                _iceI_opAShortS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAShortS_name = "opAShortS";

            private void _iceI_opAShortS(short[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAShortSResult>(completed);
                outAsync.invoke(
                    _opAShortS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        AShortSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpAShortSResult ret = new MyClass_OpAShortSResult();
                        ret.o = AShortSHelper.read(istr);
                        ret.returnValue = AShortSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLShortSResult> opLShortSAsync(global::System.Collections.Generic.List<short> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLShortSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLShortSResult> _iceI_opLShortSAsync(global::System.Collections.Generic.List<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLShortS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLShortSResult>(progress, cancel);
                _iceI_opLShortS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLShortS_name = "opLShortS";

            private void _iceI_opLShortS(global::System.Collections.Generic.List<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLShortSResult>(completed);
                outAsync.invoke(
                    _opLShortS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LShortSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLShortSResult ret = new MyClass_OpLShortSResult();
                        ret.o = LShortSHelper.read(istr);
                        ret.returnValue = LShortSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKShortSResult> opKShortSAsync(global::System.Collections.Generic.LinkedList<short> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKShortSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKShortSResult> _iceI_opKShortSAsync(global::System.Collections.Generic.LinkedList<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKShortS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKShortSResult>(progress, cancel);
                _iceI_opKShortS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKShortS_name = "opKShortS";

            private void _iceI_opKShortS(global::System.Collections.Generic.LinkedList<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKShortSResult>(completed);
                outAsync.invoke(
                    _opKShortS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        KShortSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpKShortSResult ret = new MyClass_OpKShortSResult();
                        ret.o = KShortSHelper.read(istr);
                        ret.returnValue = KShortSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQShortSResult> opQShortSAsync(global::System.Collections.Generic.Queue<short> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQShortSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQShortSResult> _iceI_opQShortSAsync(global::System.Collections.Generic.Queue<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQShortS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQShortSResult>(progress, cancel);
                _iceI_opQShortS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQShortS_name = "opQShortS";

            private void _iceI_opQShortS(global::System.Collections.Generic.Queue<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQShortSResult>(completed);
                outAsync.invoke(
                    _opQShortS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        QShortSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpQShortSResult ret = new MyClass_OpQShortSResult();
                        ret.o = QShortSHelper.read(istr);
                        ret.returnValue = QShortSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSShortSResult> opSShortSAsync(global::System.Collections.Generic.Stack<short> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSShortSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSShortSResult> _iceI_opSShortSAsync(global::System.Collections.Generic.Stack<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSShortS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSShortSResult>(progress, cancel);
                _iceI_opSShortS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSShortS_name = "opSShortS";

            private void _iceI_opSShortS(global::System.Collections.Generic.Stack<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSShortSResult>(completed);
                outAsync.invoke(
                    _opSShortS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SShortSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpSShortSResult ret = new MyClass_OpSShortSResult();
                        ret.o = SShortSHelper.read(istr);
                        ret.returnValue = SShortSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAIntSResult> opAIntSAsync(int[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAIntSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAIntSResult> _iceI_opAIntSAsync(int[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAIntS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAIntSResult>(progress, cancel);
                _iceI_opAIntS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAIntS_name = "opAIntS";

            private void _iceI_opAIntS(int[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAIntSResult>(completed);
                outAsync.invoke(
                    _opAIntS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        AIntSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpAIntSResult ret = new MyClass_OpAIntSResult();
                        ret.o = AIntSHelper.read(istr);
                        ret.returnValue = AIntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLIntSResult> opLIntSAsync(global::System.Collections.Generic.List<int> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLIntSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLIntSResult> _iceI_opLIntSAsync(global::System.Collections.Generic.List<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLIntS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLIntSResult>(progress, cancel);
                _iceI_opLIntS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLIntS_name = "opLIntS";

            private void _iceI_opLIntS(global::System.Collections.Generic.List<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLIntSResult>(completed);
                outAsync.invoke(
                    _opLIntS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LIntSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLIntSResult ret = new MyClass_OpLIntSResult();
                        ret.o = LIntSHelper.read(istr);
                        ret.returnValue = LIntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKIntSResult> opKIntSAsync(global::System.Collections.Generic.LinkedList<int> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKIntSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKIntSResult> _iceI_opKIntSAsync(global::System.Collections.Generic.LinkedList<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKIntS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKIntSResult>(progress, cancel);
                _iceI_opKIntS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKIntS_name = "opKIntS";

            private void _iceI_opKIntS(global::System.Collections.Generic.LinkedList<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKIntSResult>(completed);
                outAsync.invoke(
                    _opKIntS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        KIntSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpKIntSResult ret = new MyClass_OpKIntSResult();
                        ret.o = KIntSHelper.read(istr);
                        ret.returnValue = KIntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQIntSResult> opQIntSAsync(global::System.Collections.Generic.Queue<int> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQIntSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQIntSResult> _iceI_opQIntSAsync(global::System.Collections.Generic.Queue<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQIntS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQIntSResult>(progress, cancel);
                _iceI_opQIntS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQIntS_name = "opQIntS";

            private void _iceI_opQIntS(global::System.Collections.Generic.Queue<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQIntSResult>(completed);
                outAsync.invoke(
                    _opQIntS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        QIntSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpQIntSResult ret = new MyClass_OpQIntSResult();
                        ret.o = QIntSHelper.read(istr);
                        ret.returnValue = QIntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSIntSResult> opSIntSAsync(global::System.Collections.Generic.Stack<int> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSIntSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSIntSResult> _iceI_opSIntSAsync(global::System.Collections.Generic.Stack<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSIntS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSIntSResult>(progress, cancel);
                _iceI_opSIntS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSIntS_name = "opSIntS";

            private void _iceI_opSIntS(global::System.Collections.Generic.Stack<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSIntSResult>(completed);
                outAsync.invoke(
                    _opSIntS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SIntSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpSIntSResult ret = new MyClass_OpSIntSResult();
                        ret.o = SIntSHelper.read(istr);
                        ret.returnValue = SIntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpALongSResult> opALongSAsync(long[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opALongSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpALongSResult> _iceI_opALongSAsync(long[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opALongS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpALongSResult>(progress, cancel);
                _iceI_opALongS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opALongS_name = "opALongS";

            private void _iceI_opALongS(long[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpALongSResult>(completed);
                outAsync.invoke(
                    _opALongS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ALongSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpALongSResult ret = new MyClass_OpALongSResult();
                        ret.o = ALongSHelper.read(istr);
                        ret.returnValue = ALongSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLLongSResult> opLLongSAsync(global::System.Collections.Generic.List<long> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLLongSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLLongSResult> _iceI_opLLongSAsync(global::System.Collections.Generic.List<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLLongS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLLongSResult>(progress, cancel);
                _iceI_opLLongS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLLongS_name = "opLLongS";

            private void _iceI_opLLongS(global::System.Collections.Generic.List<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLLongSResult>(completed);
                outAsync.invoke(
                    _opLLongS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LLongSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLLongSResult ret = new MyClass_OpLLongSResult();
                        ret.o = LLongSHelper.read(istr);
                        ret.returnValue = LLongSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKLongSResult> opKLongSAsync(global::System.Collections.Generic.LinkedList<long> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKLongSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKLongSResult> _iceI_opKLongSAsync(global::System.Collections.Generic.LinkedList<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKLongS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKLongSResult>(progress, cancel);
                _iceI_opKLongS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKLongS_name = "opKLongS";

            private void _iceI_opKLongS(global::System.Collections.Generic.LinkedList<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKLongSResult>(completed);
                outAsync.invoke(
                    _opKLongS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        KLongSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpKLongSResult ret = new MyClass_OpKLongSResult();
                        ret.o = KLongSHelper.read(istr);
                        ret.returnValue = KLongSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQLongSResult> opQLongSAsync(global::System.Collections.Generic.Queue<long> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQLongSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQLongSResult> _iceI_opQLongSAsync(global::System.Collections.Generic.Queue<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQLongS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQLongSResult>(progress, cancel);
                _iceI_opQLongS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQLongS_name = "opQLongS";

            private void _iceI_opQLongS(global::System.Collections.Generic.Queue<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQLongSResult>(completed);
                outAsync.invoke(
                    _opQLongS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        QLongSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpQLongSResult ret = new MyClass_OpQLongSResult();
                        ret.o = QLongSHelper.read(istr);
                        ret.returnValue = QLongSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSLongSResult> opSLongSAsync(global::System.Collections.Generic.Stack<long> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSLongSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSLongSResult> _iceI_opSLongSAsync(global::System.Collections.Generic.Stack<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSLongS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSLongSResult>(progress, cancel);
                _iceI_opSLongS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSLongS_name = "opSLongS";

            private void _iceI_opSLongS(global::System.Collections.Generic.Stack<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSLongSResult>(completed);
                outAsync.invoke(
                    _opSLongS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SLongSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpSLongSResult ret = new MyClass_OpSLongSResult();
                        ret.o = SLongSHelper.read(istr);
                        ret.returnValue = SLongSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAFloatSResult> opAFloatSAsync(float[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAFloatSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAFloatSResult> _iceI_opAFloatSAsync(float[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAFloatS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAFloatSResult>(progress, cancel);
                _iceI_opAFloatS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAFloatS_name = "opAFloatS";

            private void _iceI_opAFloatS(float[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAFloatSResult>(completed);
                outAsync.invoke(
                    _opAFloatS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        AFloatSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpAFloatSResult ret = new MyClass_OpAFloatSResult();
                        ret.o = AFloatSHelper.read(istr);
                        ret.returnValue = AFloatSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLFloatSResult> opLFloatSAsync(global::System.Collections.Generic.List<float> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLFloatSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLFloatSResult> _iceI_opLFloatSAsync(global::System.Collections.Generic.List<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLFloatS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLFloatSResult>(progress, cancel);
                _iceI_opLFloatS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLFloatS_name = "opLFloatS";

            private void _iceI_opLFloatS(global::System.Collections.Generic.List<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLFloatSResult>(completed);
                outAsync.invoke(
                    _opLFloatS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LFloatSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLFloatSResult ret = new MyClass_OpLFloatSResult();
                        ret.o = LFloatSHelper.read(istr);
                        ret.returnValue = LFloatSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKFloatSResult> opKFloatSAsync(global::System.Collections.Generic.LinkedList<float> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKFloatSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKFloatSResult> _iceI_opKFloatSAsync(global::System.Collections.Generic.LinkedList<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKFloatS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKFloatSResult>(progress, cancel);
                _iceI_opKFloatS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKFloatS_name = "opKFloatS";

            private void _iceI_opKFloatS(global::System.Collections.Generic.LinkedList<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKFloatSResult>(completed);
                outAsync.invoke(
                    _opKFloatS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        KFloatSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpKFloatSResult ret = new MyClass_OpKFloatSResult();
                        ret.o = KFloatSHelper.read(istr);
                        ret.returnValue = KFloatSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQFloatSResult> opQFloatSAsync(global::System.Collections.Generic.Queue<float> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQFloatSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQFloatSResult> _iceI_opQFloatSAsync(global::System.Collections.Generic.Queue<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQFloatS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQFloatSResult>(progress, cancel);
                _iceI_opQFloatS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQFloatS_name = "opQFloatS";

            private void _iceI_opQFloatS(global::System.Collections.Generic.Queue<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQFloatSResult>(completed);
                outAsync.invoke(
                    _opQFloatS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        QFloatSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpQFloatSResult ret = new MyClass_OpQFloatSResult();
                        ret.o = QFloatSHelper.read(istr);
                        ret.returnValue = QFloatSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSFloatSResult> opSFloatSAsync(global::System.Collections.Generic.Stack<float> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSFloatSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSFloatSResult> _iceI_opSFloatSAsync(global::System.Collections.Generic.Stack<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSFloatS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSFloatSResult>(progress, cancel);
                _iceI_opSFloatS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSFloatS_name = "opSFloatS";

            private void _iceI_opSFloatS(global::System.Collections.Generic.Stack<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSFloatSResult>(completed);
                outAsync.invoke(
                    _opSFloatS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SFloatSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpSFloatSResult ret = new MyClass_OpSFloatSResult();
                        ret.o = SFloatSHelper.read(istr);
                        ret.returnValue = SFloatSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpADoubleSResult> opADoubleSAsync(double[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opADoubleSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpADoubleSResult> _iceI_opADoubleSAsync(double[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opADoubleS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpADoubleSResult>(progress, cancel);
                _iceI_opADoubleS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opADoubleS_name = "opADoubleS";

            private void _iceI_opADoubleS(double[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpADoubleSResult>(completed);
                outAsync.invoke(
                    _opADoubleS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ADoubleSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpADoubleSResult ret = new MyClass_OpADoubleSResult();
                        ret.o = ADoubleSHelper.read(istr);
                        ret.returnValue = ADoubleSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLDoubleSResult> opLDoubleSAsync(global::System.Collections.Generic.List<double> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLDoubleSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLDoubleSResult> _iceI_opLDoubleSAsync(global::System.Collections.Generic.List<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLDoubleS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLDoubleSResult>(progress, cancel);
                _iceI_opLDoubleS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLDoubleS_name = "opLDoubleS";

            private void _iceI_opLDoubleS(global::System.Collections.Generic.List<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLDoubleSResult>(completed);
                outAsync.invoke(
                    _opLDoubleS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LDoubleSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLDoubleSResult ret = new MyClass_OpLDoubleSResult();
                        ret.o = LDoubleSHelper.read(istr);
                        ret.returnValue = LDoubleSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKDoubleSResult> opKDoubleSAsync(global::System.Collections.Generic.LinkedList<double> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKDoubleSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKDoubleSResult> _iceI_opKDoubleSAsync(global::System.Collections.Generic.LinkedList<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKDoubleS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKDoubleSResult>(progress, cancel);
                _iceI_opKDoubleS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKDoubleS_name = "opKDoubleS";

            private void _iceI_opKDoubleS(global::System.Collections.Generic.LinkedList<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKDoubleSResult>(completed);
                outAsync.invoke(
                    _opKDoubleS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        KDoubleSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpKDoubleSResult ret = new MyClass_OpKDoubleSResult();
                        ret.o = KDoubleSHelper.read(istr);
                        ret.returnValue = KDoubleSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQDoubleSResult> opQDoubleSAsync(global::System.Collections.Generic.Queue<double> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQDoubleSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQDoubleSResult> _iceI_opQDoubleSAsync(global::System.Collections.Generic.Queue<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQDoubleS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQDoubleSResult>(progress, cancel);
                _iceI_opQDoubleS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQDoubleS_name = "opQDoubleS";

            private void _iceI_opQDoubleS(global::System.Collections.Generic.Queue<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQDoubleSResult>(completed);
                outAsync.invoke(
                    _opQDoubleS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        QDoubleSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpQDoubleSResult ret = new MyClass_OpQDoubleSResult();
                        ret.o = QDoubleSHelper.read(istr);
                        ret.returnValue = QDoubleSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSDoubleSResult> opSDoubleSAsync(global::System.Collections.Generic.Stack<double> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSDoubleSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSDoubleSResult> _iceI_opSDoubleSAsync(global::System.Collections.Generic.Stack<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSDoubleS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSDoubleSResult>(progress, cancel);
                _iceI_opSDoubleS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSDoubleS_name = "opSDoubleS";

            private void _iceI_opSDoubleS(global::System.Collections.Generic.Stack<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSDoubleSResult>(completed);
                outAsync.invoke(
                    _opSDoubleS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SDoubleSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpSDoubleSResult ret = new MyClass_OpSDoubleSResult();
                        ret.o = SDoubleSHelper.read(istr);
                        ret.returnValue = SDoubleSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAStringSResult> opAStringSAsync(string[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAStringSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAStringSResult> _iceI_opAStringSAsync(string[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAStringS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAStringSResult>(progress, cancel);
                _iceI_opAStringS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAStringS_name = "opAStringS";

            private void _iceI_opAStringS(string[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAStringSResult>(completed);
                outAsync.invoke(
                    _opAStringS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        AStringSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpAStringSResult ret = new MyClass_OpAStringSResult();
                        ret.o = AStringSHelper.read(istr);
                        ret.returnValue = AStringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLStringSResult> opLStringSAsync(global::System.Collections.Generic.List<string> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLStringSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLStringSResult> _iceI_opLStringSAsync(global::System.Collections.Generic.List<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLStringS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLStringSResult>(progress, cancel);
                _iceI_opLStringS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLStringS_name = "opLStringS";

            private void _iceI_opLStringS(global::System.Collections.Generic.List<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLStringSResult>(completed);
                outAsync.invoke(
                    _opLStringS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LStringSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLStringSResult ret = new MyClass_OpLStringSResult();
                        ret.o = LStringSHelper.read(istr);
                        ret.returnValue = LStringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKStringSResult> opKStringSAsync(global::System.Collections.Generic.LinkedList<string> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKStringSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKStringSResult> _iceI_opKStringSAsync(global::System.Collections.Generic.LinkedList<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKStringS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKStringSResult>(progress, cancel);
                _iceI_opKStringS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKStringS_name = "opKStringS";

            private void _iceI_opKStringS(global::System.Collections.Generic.LinkedList<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKStringSResult>(completed);
                outAsync.invoke(
                    _opKStringS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        KStringSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpKStringSResult ret = new MyClass_OpKStringSResult();
                        ret.o = KStringSHelper.read(istr);
                        ret.returnValue = KStringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQStringSResult> opQStringSAsync(global::System.Collections.Generic.Queue<string> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQStringSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQStringSResult> _iceI_opQStringSAsync(global::System.Collections.Generic.Queue<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQStringS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQStringSResult>(progress, cancel);
                _iceI_opQStringS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQStringS_name = "opQStringS";

            private void _iceI_opQStringS(global::System.Collections.Generic.Queue<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQStringSResult>(completed);
                outAsync.invoke(
                    _opQStringS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        QStringSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpQStringSResult ret = new MyClass_OpQStringSResult();
                        ret.o = QStringSHelper.read(istr);
                        ret.returnValue = QStringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSStringSResult> opSStringSAsync(global::System.Collections.Generic.Stack<string> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSStringSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSStringSResult> _iceI_opSStringSAsync(global::System.Collections.Generic.Stack<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSStringS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSStringSResult>(progress, cancel);
                _iceI_opSStringS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSStringS_name = "opSStringS";

            private void _iceI_opSStringS(global::System.Collections.Generic.Stack<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSStringSResult>(completed);
                outAsync.invoke(
                    _opSStringS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SStringSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpSStringSResult ret = new MyClass_OpSStringSResult();
                        ret.o = SStringSHelper.read(istr);
                        ret.returnValue = SStringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAObjectSResult> opAObjectSAsync(global::Ice.Value[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAObjectSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAObjectSResult> _iceI_opAObjectSAsync(global::Ice.Value[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAObjectS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAObjectSResult>(progress, cancel);
                _iceI_opAObjectS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAObjectS_name = "opAObjectS";

            private void _iceI_opAObjectS(global::Ice.Value[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAObjectSResult>(completed);
                outAsync.invoke(
                    _opAObjectS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        AObjectSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpAObjectSResult ret = new MyClass_OpAObjectSResult();
                        ret.o = AObjectSHelper.read(istr);
                        ret.returnValue = AObjectSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLObjectSResult> opLObjectSAsync(global::System.Collections.Generic.List<global::Ice.Value> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLObjectSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLObjectSResult> _iceI_opLObjectSAsync(global::System.Collections.Generic.List<global::Ice.Value> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLObjectS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLObjectSResult>(progress, cancel);
                _iceI_opLObjectS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLObjectS_name = "opLObjectS";

            private void _iceI_opLObjectS(global::System.Collections.Generic.List<global::Ice.Value> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLObjectSResult>(completed);
                outAsync.invoke(
                    _opLObjectS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LObjectSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLObjectSResult ret = new MyClass_OpLObjectSResult();
                        ret.o = LObjectSHelper.read(istr);
                        ret.returnValue = LObjectSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAObjectPrxSResult> opAObjectPrxSAsync(global::Ice.ObjectPrx[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAObjectPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAObjectPrxSResult> _iceI_opAObjectPrxSAsync(global::Ice.ObjectPrx[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAObjectPrxS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAObjectPrxSResult>(progress, cancel);
                _iceI_opAObjectPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAObjectPrxS_name = "opAObjectPrxS";

            private void _iceI_opAObjectPrxS(global::Ice.ObjectPrx[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAObjectPrxSResult>(completed);
                outAsync.invoke(
                    _opAObjectPrxS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        AObjectPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpAObjectPrxSResult ret = new MyClass_OpAObjectPrxSResult();
                        ret.o = AObjectPrxSHelper.read(istr);
                        ret.returnValue = AObjectPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLObjectPrxSResult> opLObjectPrxSAsync(global::System.Collections.Generic.List<global::Ice.ObjectPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLObjectPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLObjectPrxSResult> _iceI_opLObjectPrxSAsync(global::System.Collections.Generic.List<global::Ice.ObjectPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLObjectPrxS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLObjectPrxSResult>(progress, cancel);
                _iceI_opLObjectPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLObjectPrxS_name = "opLObjectPrxS";

            private void _iceI_opLObjectPrxS(global::System.Collections.Generic.List<global::Ice.ObjectPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLObjectPrxSResult>(completed);
                outAsync.invoke(
                    _opLObjectPrxS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LObjectPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLObjectPrxSResult ret = new MyClass_OpLObjectPrxSResult();
                        ret.o = LObjectPrxSHelper.read(istr);
                        ret.returnValue = LObjectPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKObjectPrxSResult> opKObjectPrxSAsync(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKObjectPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKObjectPrxSResult> _iceI_opKObjectPrxSAsync(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKObjectPrxS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKObjectPrxSResult>(progress, cancel);
                _iceI_opKObjectPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKObjectPrxS_name = "opKObjectPrxS";

            private void _iceI_opKObjectPrxS(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKObjectPrxSResult>(completed);
                outAsync.invoke(
                    _opKObjectPrxS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        KObjectPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpKObjectPrxSResult ret = new MyClass_OpKObjectPrxSResult();
                        ret.o = KObjectPrxSHelper.read(istr);
                        ret.returnValue = KObjectPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQObjectPrxSResult> opQObjectPrxSAsync(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQObjectPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQObjectPrxSResult> _iceI_opQObjectPrxSAsync(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQObjectPrxS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQObjectPrxSResult>(progress, cancel);
                _iceI_opQObjectPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQObjectPrxS_name = "opQObjectPrxS";

            private void _iceI_opQObjectPrxS(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQObjectPrxSResult>(completed);
                outAsync.invoke(
                    _opQObjectPrxS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        QObjectPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpQObjectPrxSResult ret = new MyClass_OpQObjectPrxSResult();
                        ret.o = QObjectPrxSHelper.read(istr);
                        ret.returnValue = QObjectPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSObjectPrxSResult> opSObjectPrxSAsync(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSObjectPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSObjectPrxSResult> _iceI_opSObjectPrxSAsync(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSObjectPrxS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSObjectPrxSResult>(progress, cancel);
                _iceI_opSObjectPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSObjectPrxS_name = "opSObjectPrxS";

            private void _iceI_opSObjectPrxS(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSObjectPrxSResult>(completed);
                outAsync.invoke(
                    _opSObjectPrxS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SObjectPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpSObjectPrxSResult ret = new MyClass_OpSObjectPrxSResult();
                        ret.o = SObjectPrxSHelper.read(istr);
                        ret.returnValue = SObjectPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAStructSResult> opAStructSAsync(S[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAStructSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAStructSResult> _iceI_opAStructSAsync(S[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAStructS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAStructSResult>(progress, cancel);
                _iceI_opAStructS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAStructS_name = "opAStructS";

            private void _iceI_opAStructS(S[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAStructSResult>(completed);
                outAsync.invoke(
                    _opAStructS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        AStructSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpAStructSResult ret = new MyClass_OpAStructSResult();
                        ret.o = AStructSHelper.read(istr);
                        ret.returnValue = AStructSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLStructSResult> opLStructSAsync(global::System.Collections.Generic.List<S> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLStructSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLStructSResult> _iceI_opLStructSAsync(global::System.Collections.Generic.List<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLStructS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLStructSResult>(progress, cancel);
                _iceI_opLStructS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLStructS_name = "opLStructS";

            private void _iceI_opLStructS(global::System.Collections.Generic.List<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLStructSResult>(completed);
                outAsync.invoke(
                    _opLStructS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LStructSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLStructSResult ret = new MyClass_OpLStructSResult();
                        ret.o = LStructSHelper.read(istr);
                        ret.returnValue = LStructSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKStructSResult> opKStructSAsync(global::System.Collections.Generic.LinkedList<S> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKStructSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKStructSResult> _iceI_opKStructSAsync(global::System.Collections.Generic.LinkedList<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKStructS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKStructSResult>(progress, cancel);
                _iceI_opKStructS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKStructS_name = "opKStructS";

            private void _iceI_opKStructS(global::System.Collections.Generic.LinkedList<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKStructSResult>(completed);
                outAsync.invoke(
                    _opKStructS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        KStructSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpKStructSResult ret = new MyClass_OpKStructSResult();
                        ret.o = KStructSHelper.read(istr);
                        ret.returnValue = KStructSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQStructSResult> opQStructSAsync(global::System.Collections.Generic.Queue<S> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQStructSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQStructSResult> _iceI_opQStructSAsync(global::System.Collections.Generic.Queue<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQStructS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQStructSResult>(progress, cancel);
                _iceI_opQStructS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQStructS_name = "opQStructS";

            private void _iceI_opQStructS(global::System.Collections.Generic.Queue<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQStructSResult>(completed);
                outAsync.invoke(
                    _opQStructS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        QStructSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpQStructSResult ret = new MyClass_OpQStructSResult();
                        ret.o = QStructSHelper.read(istr);
                        ret.returnValue = QStructSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSStructSResult> opSStructSAsync(global::System.Collections.Generic.Stack<S> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSStructSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSStructSResult> _iceI_opSStructSAsync(global::System.Collections.Generic.Stack<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSStructS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSStructSResult>(progress, cancel);
                _iceI_opSStructS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSStructS_name = "opSStructS";

            private void _iceI_opSStructS(global::System.Collections.Generic.Stack<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSStructSResult>(completed);
                outAsync.invoke(
                    _opSStructS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SStructSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpSStructSResult ret = new MyClass_OpSStructSResult();
                        ret.o = SStructSHelper.read(istr);
                        ret.returnValue = SStructSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAStructSDResult> opAStructSDAsync(SD[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAStructSDAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAStructSDResult> _iceI_opAStructSDAsync(SD[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAStructSD_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAStructSDResult>(progress, cancel);
                _iceI_opAStructSD(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAStructSD_name = "opAStructSD";

            private void _iceI_opAStructSD(SD[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAStructSDResult>(completed);
                outAsync.invoke(
                    _opAStructSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        AStructSDHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpAStructSDResult ret = new MyClass_OpAStructSDResult();
                        ret.o = AStructSDHelper.read(istr);
                        ret.returnValue = AStructSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLStructSDResult> opLStructSDAsync(global::System.Collections.Generic.List<SD> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLStructSDAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLStructSDResult> _iceI_opLStructSDAsync(global::System.Collections.Generic.List<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLStructSD_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLStructSDResult>(progress, cancel);
                _iceI_opLStructSD(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLStructSD_name = "opLStructSD";

            private void _iceI_opLStructSD(global::System.Collections.Generic.List<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLStructSDResult>(completed);
                outAsync.invoke(
                    _opLStructSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LStructSDHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLStructSDResult ret = new MyClass_OpLStructSDResult();
                        ret.o = LStructSDHelper.read(istr);
                        ret.returnValue = LStructSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKStructSDResult> opKStructSDAsync(global::System.Collections.Generic.LinkedList<SD> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKStructSDAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKStructSDResult> _iceI_opKStructSDAsync(global::System.Collections.Generic.LinkedList<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKStructSD_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKStructSDResult>(progress, cancel);
                _iceI_opKStructSD(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKStructSD_name = "opKStructSD";

            private void _iceI_opKStructSD(global::System.Collections.Generic.LinkedList<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKStructSDResult>(completed);
                outAsync.invoke(
                    _opKStructSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        KStructSDHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpKStructSDResult ret = new MyClass_OpKStructSDResult();
                        ret.o = KStructSDHelper.read(istr);
                        ret.returnValue = KStructSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQStructSDResult> opQStructSDAsync(global::System.Collections.Generic.Queue<SD> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQStructSDAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQStructSDResult> _iceI_opQStructSDAsync(global::System.Collections.Generic.Queue<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQStructSD_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQStructSDResult>(progress, cancel);
                _iceI_opQStructSD(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQStructSD_name = "opQStructSD";

            private void _iceI_opQStructSD(global::System.Collections.Generic.Queue<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQStructSDResult>(completed);
                outAsync.invoke(
                    _opQStructSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        QStructSDHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpQStructSDResult ret = new MyClass_OpQStructSDResult();
                        ret.o = QStructSDHelper.read(istr);
                        ret.returnValue = QStructSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSStructSDResult> opSStructSDAsync(global::System.Collections.Generic.Stack<SD> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSStructSDAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSStructSDResult> _iceI_opSStructSDAsync(global::System.Collections.Generic.Stack<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSStructSD_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSStructSDResult>(progress, cancel);
                _iceI_opSStructSD(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSStructSD_name = "opSStructSD";

            private void _iceI_opSStructSD(global::System.Collections.Generic.Stack<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSStructSDResult>(completed);
                outAsync.invoke(
                    _opSStructSD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SStructSDHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpSStructSDResult ret = new MyClass_OpSStructSDResult();
                        ret.o = SStructSDHelper.read(istr);
                        ret.returnValue = SStructSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpACVSResult> opACVSAsync(CV[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opACVSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpACVSResult> _iceI_opACVSAsync(CV[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opACVS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpACVSResult>(progress, cancel);
                _iceI_opACVS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opACVS_name = "opACVS";

            private void _iceI_opACVS(CV[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpACVSResult>(completed);
                outAsync.invoke(
                    _opACVS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ACVSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpACVSResult ret = new MyClass_OpACVSResult();
                        ret.o = ACVSHelper.read(istr);
                        ret.returnValue = ACVSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLCVSResult> opLCVSAsync(global::System.Collections.Generic.List<CV> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLCVSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLCVSResult> _iceI_opLCVSAsync(global::System.Collections.Generic.List<CV> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLCVS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLCVSResult>(progress, cancel);
                _iceI_opLCVS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLCVS_name = "opLCVS";

            private void _iceI_opLCVS(global::System.Collections.Generic.List<CV> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLCVSResult>(completed);
                outAsync.invoke(
                    _opLCVS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LCVSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLCVSResult ret = new MyClass_OpLCVSResult();
                        ret.o = LCVSHelper.read(istr);
                        ret.returnValue = LCVSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpACRSResult> opACRSAsync(CR[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opACRSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpACRSResult> _iceI_opACRSAsync(CR[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opACRS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpACRSResult>(progress, cancel);
                _iceI_opACRS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opACRS_name = "opACRS";

            private void _iceI_opACRS(CR[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpACRSResult>(completed);
                outAsync.invoke(
                    _opACRS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ACRSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpACRSResult ret = new MyClass_OpACRSResult();
                        ret.o = ACRSHelper.read(istr);
                        ret.returnValue = ACRSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLCRSResult> opLCRSAsync(global::System.Collections.Generic.List<CR> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLCRSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLCRSResult> _iceI_opLCRSAsync(global::System.Collections.Generic.List<CR> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLCRS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLCRSResult>(progress, cancel);
                _iceI_opLCRS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLCRS_name = "opLCRS";

            private void _iceI_opLCRS(global::System.Collections.Generic.List<CR> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLCRSResult>(completed);
                outAsync.invoke(
                    _opLCRS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LCRSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLCRSResult ret = new MyClass_OpLCRSResult();
                        ret.o = LCRSHelper.read(istr);
                        ret.returnValue = LCRSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAEnSResult> opAEnSAsync(En[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAEnSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAEnSResult> _iceI_opAEnSAsync(En[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAEnS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAEnSResult>(progress, cancel);
                _iceI_opAEnS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAEnS_name = "opAEnS";

            private void _iceI_opAEnS(En[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAEnSResult>(completed);
                outAsync.invoke(
                    _opAEnS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        AEnSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpAEnSResult ret = new MyClass_OpAEnSResult();
                        ret.o = AEnSHelper.read(istr);
                        ret.returnValue = AEnSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLEnSResult> opLEnSAsync(global::System.Collections.Generic.List<En> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLEnSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLEnSResult> _iceI_opLEnSAsync(global::System.Collections.Generic.List<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLEnS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLEnSResult>(progress, cancel);
                _iceI_opLEnS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLEnS_name = "opLEnS";

            private void _iceI_opLEnS(global::System.Collections.Generic.List<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLEnSResult>(completed);
                outAsync.invoke(
                    _opLEnS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LEnSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLEnSResult ret = new MyClass_OpLEnSResult();
                        ret.o = LEnSHelper.read(istr);
                        ret.returnValue = LEnSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKEnSResult> opKEnSAsync(global::System.Collections.Generic.LinkedList<En> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKEnSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKEnSResult> _iceI_opKEnSAsync(global::System.Collections.Generic.LinkedList<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKEnS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKEnSResult>(progress, cancel);
                _iceI_opKEnS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKEnS_name = "opKEnS";

            private void _iceI_opKEnS(global::System.Collections.Generic.LinkedList<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKEnSResult>(completed);
                outAsync.invoke(
                    _opKEnS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        KEnSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpKEnSResult ret = new MyClass_OpKEnSResult();
                        ret.o = KEnSHelper.read(istr);
                        ret.returnValue = KEnSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQEnSResult> opQEnSAsync(global::System.Collections.Generic.Queue<En> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQEnSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQEnSResult> _iceI_opQEnSAsync(global::System.Collections.Generic.Queue<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQEnS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQEnSResult>(progress, cancel);
                _iceI_opQEnS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQEnS_name = "opQEnS";

            private void _iceI_opQEnS(global::System.Collections.Generic.Queue<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQEnSResult>(completed);
                outAsync.invoke(
                    _opQEnS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        QEnSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpQEnSResult ret = new MyClass_OpQEnSResult();
                        ret.o = QEnSHelper.read(istr);
                        ret.returnValue = QEnSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSEnSResult> opSEnSAsync(global::System.Collections.Generic.Stack<En> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSEnSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSEnSResult> _iceI_opSEnSAsync(global::System.Collections.Generic.Stack<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSEnS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSEnSResult>(progress, cancel);
                _iceI_opSEnS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSEnS_name = "opSEnS";

            private void _iceI_opSEnS(global::System.Collections.Generic.Stack<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSEnSResult>(completed);
                outAsync.invoke(
                    _opSEnS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SEnSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpSEnSResult ret = new MyClass_OpSEnSResult();
                        ret.o = SEnSHelper.read(istr);
                        ret.returnValue = SEnSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAIPrxSResult> opAIPrxSAsync(IPrx[] i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAIPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAIPrxSResult> _iceI_opAIPrxSAsync(IPrx[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAIPrxS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAIPrxSResult>(progress, cancel);
                _iceI_opAIPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAIPrxS_name = "opAIPrxS";

            private void _iceI_opAIPrxS(IPrx[] iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAIPrxSResult>(completed);
                outAsync.invoke(
                    _opAIPrxS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        AIPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpAIPrxSResult ret = new MyClass_OpAIPrxSResult();
                        ret.o = AIPrxSHelper.read(istr);
                        ret.returnValue = AIPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLIPrxSResult> opLIPrxSAsync(global::System.Collections.Generic.List<IPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLIPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLIPrxSResult> _iceI_opLIPrxSAsync(global::System.Collections.Generic.List<IPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLIPrxS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLIPrxSResult>(progress, cancel);
                _iceI_opLIPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLIPrxS_name = "opLIPrxS";

            private void _iceI_opLIPrxS(global::System.Collections.Generic.List<IPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLIPrxSResult>(completed);
                outAsync.invoke(
                    _opLIPrxS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LIPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpLIPrxSResult ret = new MyClass_OpLIPrxSResult();
                        ret.o = LIPrxSHelper.read(istr);
                        ret.returnValue = LIPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKIPrxSResult> opKIPrxSAsync(global::System.Collections.Generic.LinkedList<IPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKIPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKIPrxSResult> _iceI_opKIPrxSAsync(global::System.Collections.Generic.LinkedList<IPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKIPrxS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKIPrxSResult>(progress, cancel);
                _iceI_opKIPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKIPrxS_name = "opKIPrxS";

            private void _iceI_opKIPrxS(global::System.Collections.Generic.LinkedList<IPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKIPrxSResult>(completed);
                outAsync.invoke(
                    _opKIPrxS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        KIPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpKIPrxSResult ret = new MyClass_OpKIPrxSResult();
                        ret.o = KIPrxSHelper.read(istr);
                        ret.returnValue = KIPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQIPrxSResult> opQIPrxSAsync(global::System.Collections.Generic.Queue<IPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQIPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQIPrxSResult> _iceI_opQIPrxSAsync(global::System.Collections.Generic.Queue<IPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQIPrxS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQIPrxSResult>(progress, cancel);
                _iceI_opQIPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQIPrxS_name = "opQIPrxS";

            private void _iceI_opQIPrxS(global::System.Collections.Generic.Queue<IPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQIPrxSResult>(completed);
                outAsync.invoke(
                    _opQIPrxS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        QIPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpQIPrxSResult ret = new MyClass_OpQIPrxSResult();
                        ret.o = QIPrxSHelper.read(istr);
                        ret.returnValue = QIPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSIPrxSResult> opSIPrxSAsync(global::System.Collections.Generic.Stack<IPrx> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSIPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSIPrxSResult> _iceI_opSIPrxSAsync(global::System.Collections.Generic.Stack<IPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSIPrxS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSIPrxSResult>(progress, cancel);
                _iceI_opSIPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSIPrxS_name = "opSIPrxS";

            private void _iceI_opSIPrxS(global::System.Collections.Generic.Stack<IPrx> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSIPrxSResult>(completed);
                outAsync.invoke(
                    _opSIPrxS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        SIPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpSIPrxSResult ret = new MyClass_OpSIPrxSResult();
                        ret.o = SIPrxSHelper.read(istr);
                        ret.returnValue = SIPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpCustomIntSResult> opCustomIntSAsync(global::Ice.seqMapping.Custom<int> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCustomIntSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpCustomIntSResult> _iceI_opCustomIntSAsync(global::Ice.seqMapping.Custom<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCustomIntS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpCustomIntSResult>(progress, cancel);
                _iceI_opCustomIntS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCustomIntS_name = "opCustomIntS";

            private void _iceI_opCustomIntS(global::Ice.seqMapping.Custom<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpCustomIntSResult>(completed);
                outAsync.invoke(
                    _opCustomIntS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        CustomIntSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpCustomIntSResult ret = new MyClass_OpCustomIntSResult();
                        ret.o = CustomIntSHelper.read(istr);
                        ret.returnValue = CustomIntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpCustomCVSResult> opCustomCVSAsync(global::Ice.seqMapping.Custom<CV> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCustomCVSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpCustomCVSResult> _iceI_opCustomCVSAsync(global::Ice.seqMapping.Custom<CV> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCustomCVS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpCustomCVSResult>(progress, cancel);
                _iceI_opCustomCVS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCustomCVS_name = "opCustomCVS";

            private void _iceI_opCustomCVS(global::Ice.seqMapping.Custom<CV> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpCustomCVSResult>(completed);
                outAsync.invoke(
                    _opCustomCVS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        CustomCVSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpCustomCVSResult ret = new MyClass_OpCustomCVSResult();
                        ret.o = CustomCVSHelper.read(istr);
                        ret.returnValue = CustomCVSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpCustomIntSSResult> opCustomIntSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCustomIntSSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpCustomIntSSResult> _iceI_opCustomIntSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCustomIntSS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpCustomIntSSResult>(progress, cancel);
                _iceI_opCustomIntSS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCustomIntSS_name = "opCustomIntSS";

            private void _iceI_opCustomIntSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpCustomIntSSResult>(completed);
                outAsync.invoke(
                    _opCustomIntSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        CustomIntSSHelper.write(ostr, iceP_i);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpCustomIntSSResult ret = new MyClass_OpCustomIntSSResult();
                        ret.o = CustomIntSSHelper.read(istr);
                        ret.returnValue = CustomIntSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpCustomCVSSResult> opCustomCVSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> i, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCustomCVSSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpCustomCVSSResult> _iceI_opCustomCVSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCustomCVSS_name);
                var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MyClass_OpCustomCVSSResult>(progress, cancel);
                _iceI_opCustomCVSS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCustomCVSS_name = "opCustomCVSS";

            private void _iceI_opCustomCVSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> iceP_i, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpCustomCVSSResult>(completed);
                outAsync.invoke(
                    _opCustomCVSS_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        CustomCVSSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        MyClass_OpCustomCVSSResult ret = new MyClass_OpCustomCVSSResult();
                        ret.o = CustomCVSSHelper.read(istr);
                        ret.returnValue = CustomCVSSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            #endregion

            #region Checked and unchecked cast operations

            public static MyClassPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
            {
                if (b is not null && b.ice_isA(ice_staticId(), ctx))
                {
                    MyClassPrxHelper prx = new MyClassPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static MyClassPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
            {
                global::Ice.ObjectPrx bb = b?.ice_facet(f);
                try
                {
                    if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                    {
                        MyClassPrxHelper prx = new MyClassPrxHelper();
                        prx.iceCopyFrom(bb);
                        return prx;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static MyClassPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if (b is not null)
                {
                    MyClassPrxHelper prx = new MyClassPrxHelper();
                    prx.iceCopyFrom(b);
                    return prx;
                }
                return null;
            }

            public static MyClassPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if (b is not null)
                {
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    MyClassPrxHelper prx = new MyClassPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
                return null;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MyClass"
            };

            public static string ice_staticId() => "::Test::MyClass";

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, MyClassPrx v)
            {
                ostr.writeProxy(v);
            }

            public static MyClassPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    MyClassPrxHelper result = new MyClassPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ice.seqMapping.AMD
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class IDisp_ : global::Ice.ObjectImpl, I
        {
            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::I"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return ice_staticId();
            }

            public static new string ice_staticId()
            {
                return "::Test::I";
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class MyClassDisp_ : global::Ice.ObjectImpl, MyClass
        {
            #region Slice operations

            public abstract global::System.Threading.Tasks.Task shutdownAsync(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpAByteSResult> opAByteSAsync(byte[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLByteSResult> opLByteSAsync(global::System.Collections.Generic.List<byte> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpKByteSResult> opKByteSAsync(global::System.Collections.Generic.LinkedList<byte> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpQByteSResult> opQByteSAsync(global::System.Collections.Generic.Queue<byte> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpSByteSResult> opSByteSAsync(global::System.Collections.Generic.Stack<byte> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpABoolSResult> opABoolSAsync(bool[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLBoolSResult> opLBoolSAsync(global::System.Collections.Generic.List<bool> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpKBoolSResult> opKBoolSAsync(global::System.Collections.Generic.LinkedList<bool> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpQBoolSResult> opQBoolSAsync(global::System.Collections.Generic.Queue<bool> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpSBoolSResult> opSBoolSAsync(global::System.Collections.Generic.Stack<bool> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpAShortSResult> opAShortSAsync(short[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLShortSResult> opLShortSAsync(global::System.Collections.Generic.List<short> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpKShortSResult> opKShortSAsync(global::System.Collections.Generic.LinkedList<short> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpQShortSResult> opQShortSAsync(global::System.Collections.Generic.Queue<short> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpSShortSResult> opSShortSAsync(global::System.Collections.Generic.Stack<short> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpAIntSResult> opAIntSAsync(int[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLIntSResult> opLIntSAsync(global::System.Collections.Generic.List<int> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpKIntSResult> opKIntSAsync(global::System.Collections.Generic.LinkedList<int> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpQIntSResult> opQIntSAsync(global::System.Collections.Generic.Queue<int> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpSIntSResult> opSIntSAsync(global::System.Collections.Generic.Stack<int> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpALongSResult> opALongSAsync(long[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLLongSResult> opLLongSAsync(global::System.Collections.Generic.List<long> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpKLongSResult> opKLongSAsync(global::System.Collections.Generic.LinkedList<long> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpQLongSResult> opQLongSAsync(global::System.Collections.Generic.Queue<long> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpSLongSResult> opSLongSAsync(global::System.Collections.Generic.Stack<long> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpAFloatSResult> opAFloatSAsync(float[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLFloatSResult> opLFloatSAsync(global::System.Collections.Generic.List<float> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpKFloatSResult> opKFloatSAsync(global::System.Collections.Generic.LinkedList<float> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpQFloatSResult> opQFloatSAsync(global::System.Collections.Generic.Queue<float> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpSFloatSResult> opSFloatSAsync(global::System.Collections.Generic.Stack<float> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpADoubleSResult> opADoubleSAsync(double[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLDoubleSResult> opLDoubleSAsync(global::System.Collections.Generic.List<double> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpKDoubleSResult> opKDoubleSAsync(global::System.Collections.Generic.LinkedList<double> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpQDoubleSResult> opQDoubleSAsync(global::System.Collections.Generic.Queue<double> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpSDoubleSResult> opSDoubleSAsync(global::System.Collections.Generic.Stack<double> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpAStringSResult> opAStringSAsync(string[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLStringSResult> opLStringSAsync(global::System.Collections.Generic.List<string> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpKStringSResult> opKStringSAsync(global::System.Collections.Generic.LinkedList<string> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpQStringSResult> opQStringSAsync(global::System.Collections.Generic.Queue<string> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpSStringSResult> opSStringSAsync(global::System.Collections.Generic.Stack<string> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpAObjectSResult> opAObjectSAsync(global::Ice.Value[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLObjectSResult> opLObjectSAsync(global::System.Collections.Generic.List<global::Ice.Value> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpAObjectPrxSResult> opAObjectPrxSAsync(global::Ice.ObjectPrx[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLObjectPrxSResult> opLObjectPrxSAsync(global::System.Collections.Generic.List<global::Ice.ObjectPrx> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpKObjectPrxSResult> opKObjectPrxSAsync(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpQObjectPrxSResult> opQObjectPrxSAsync(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpSObjectPrxSResult> opSObjectPrxSAsync(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpAStructSResult> opAStructSAsync(S[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLStructSResult> opLStructSAsync(global::System.Collections.Generic.List<S> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpKStructSResult> opKStructSAsync(global::System.Collections.Generic.LinkedList<S> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpQStructSResult> opQStructSAsync(global::System.Collections.Generic.Queue<S> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpSStructSResult> opSStructSAsync(global::System.Collections.Generic.Stack<S> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpAStructSDResult> opAStructSDAsync(SD[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLStructSDResult> opLStructSDAsync(global::System.Collections.Generic.List<SD> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpKStructSDResult> opKStructSDAsync(global::System.Collections.Generic.LinkedList<SD> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpQStructSDResult> opQStructSDAsync(global::System.Collections.Generic.Queue<SD> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpSStructSDResult> opSStructSDAsync(global::System.Collections.Generic.Stack<SD> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpACVSResult> opACVSAsync(CV[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLCVSResult> opLCVSAsync(global::System.Collections.Generic.List<CV> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpACRSResult> opACRSAsync(CR[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLCRSResult> opLCRSAsync(global::System.Collections.Generic.List<CR> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpAEnSResult> opAEnSAsync(En[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLEnSResult> opLEnSAsync(global::System.Collections.Generic.List<En> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpKEnSResult> opKEnSAsync(global::System.Collections.Generic.LinkedList<En> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpQEnSResult> opQEnSAsync(global::System.Collections.Generic.Queue<En> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpSEnSResult> opSEnSAsync(global::System.Collections.Generic.Stack<En> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpAIPrxSResult> opAIPrxSAsync(IPrx[] i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpLIPrxSResult> opLIPrxSAsync(global::System.Collections.Generic.List<IPrx> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpKIPrxSResult> opKIPrxSAsync(global::System.Collections.Generic.LinkedList<IPrx> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpQIPrxSResult> opQIPrxSAsync(global::System.Collections.Generic.Queue<IPrx> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpSIPrxSResult> opSIPrxSAsync(global::System.Collections.Generic.Stack<IPrx> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpCustomIntSResult> opCustomIntSAsync(global::Ice.seqMapping.Custom<int> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpCustomCVSResult> opCustomCVSAsync(global::Ice.seqMapping.Custom<CV> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpCustomIntSSResult> opCustomIntSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> i, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<MyClass_OpCustomCVSSResult> opCustomCVSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> i, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MyClass"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return ice_staticId();
            }

            public static new string ice_staticId()
            {
                return "::Test::MyClass";
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_shutdown(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask(obj.shutdownAsync(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opAByteS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                byte[] iceP_i = default;
                iceP_i = AByteSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpAByteSResult>(obj.opAByteSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        AByteSHelper.write(ostr, ret.o);
                        AByteSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLByteS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<byte> iceP_i = default;
                iceP_i = LByteSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLByteSResult>(obj.opLByteSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LByteSHelper.write(ostr, ret.o);
                        LByteSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opKByteS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.LinkedList<byte> iceP_i = default;
                iceP_i = KByteSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpKByteSResult>(obj.opKByteSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        KByteSHelper.write(ostr, ret.o);
                        KByteSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opQByteS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Queue<byte> iceP_i = default;
                iceP_i = QByteSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpQByteSResult>(obj.opQByteSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        QByteSHelper.write(ostr, ret.o);
                        QByteSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSByteS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Stack<byte> iceP_i = default;
                iceP_i = SByteSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpSByteSResult>(obj.opSByteSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        SByteSHelper.write(ostr, ret.o);
                        SByteSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opABoolS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                bool[] iceP_i = default;
                iceP_i = ABoolSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpABoolSResult>(obj.opABoolSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        ABoolSHelper.write(ostr, ret.o);
                        ABoolSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLBoolS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<bool> iceP_i = default;
                iceP_i = LBoolSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLBoolSResult>(obj.opLBoolSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LBoolSHelper.write(ostr, ret.o);
                        LBoolSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opKBoolS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.LinkedList<bool> iceP_i = default;
                iceP_i = KBoolSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpKBoolSResult>(obj.opKBoolSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        KBoolSHelper.write(ostr, ret.o);
                        KBoolSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opQBoolS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Queue<bool> iceP_i = default;
                iceP_i = QBoolSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpQBoolSResult>(obj.opQBoolSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        QBoolSHelper.write(ostr, ret.o);
                        QBoolSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSBoolS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Stack<bool> iceP_i = default;
                iceP_i = SBoolSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpSBoolSResult>(obj.opSBoolSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        SBoolSHelper.write(ostr, ret.o);
                        SBoolSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opAShortS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                short[] iceP_i = default;
                iceP_i = AShortSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpAShortSResult>(obj.opAShortSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        AShortSHelper.write(ostr, ret.o);
                        AShortSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLShortS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<short> iceP_i = default;
                iceP_i = LShortSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLShortSResult>(obj.opLShortSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LShortSHelper.write(ostr, ret.o);
                        LShortSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opKShortS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.LinkedList<short> iceP_i = default;
                iceP_i = KShortSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpKShortSResult>(obj.opKShortSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        KShortSHelper.write(ostr, ret.o);
                        KShortSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opQShortS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Queue<short> iceP_i = default;
                iceP_i = QShortSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpQShortSResult>(obj.opQShortSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        QShortSHelper.write(ostr, ret.o);
                        QShortSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSShortS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Stack<short> iceP_i = default;
                iceP_i = SShortSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpSShortSResult>(obj.opSShortSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        SShortSHelper.write(ostr, ret.o);
                        SShortSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opAIntS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int[] iceP_i = default;
                iceP_i = AIntSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpAIntSResult>(obj.opAIntSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        AIntSHelper.write(ostr, ret.o);
                        AIntSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLIntS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<int> iceP_i = default;
                iceP_i = LIntSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLIntSResult>(obj.opLIntSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LIntSHelper.write(ostr, ret.o);
                        LIntSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opKIntS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.LinkedList<int> iceP_i = default;
                iceP_i = KIntSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpKIntSResult>(obj.opKIntSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        KIntSHelper.write(ostr, ret.o);
                        KIntSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opQIntS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Queue<int> iceP_i = default;
                iceP_i = QIntSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpQIntSResult>(obj.opQIntSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        QIntSHelper.write(ostr, ret.o);
                        QIntSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSIntS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Stack<int> iceP_i = default;
                iceP_i = SIntSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpSIntSResult>(obj.opSIntSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        SIntSHelper.write(ostr, ret.o);
                        SIntSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opALongS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                long[] iceP_i = default;
                iceP_i = ALongSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpALongSResult>(obj.opALongSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        ALongSHelper.write(ostr, ret.o);
                        ALongSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLLongS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<long> iceP_i = default;
                iceP_i = LLongSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLLongSResult>(obj.opLLongSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LLongSHelper.write(ostr, ret.o);
                        LLongSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opKLongS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.LinkedList<long> iceP_i = default;
                iceP_i = KLongSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpKLongSResult>(obj.opKLongSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        KLongSHelper.write(ostr, ret.o);
                        KLongSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opQLongS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Queue<long> iceP_i = default;
                iceP_i = QLongSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpQLongSResult>(obj.opQLongSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        QLongSHelper.write(ostr, ret.o);
                        QLongSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSLongS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Stack<long> iceP_i = default;
                iceP_i = SLongSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpSLongSResult>(obj.opSLongSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        SLongSHelper.write(ostr, ret.o);
                        SLongSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opAFloatS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                float[] iceP_i = default;
                iceP_i = AFloatSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpAFloatSResult>(obj.opAFloatSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        AFloatSHelper.write(ostr, ret.o);
                        AFloatSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLFloatS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<float> iceP_i = default;
                iceP_i = LFloatSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLFloatSResult>(obj.opLFloatSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LFloatSHelper.write(ostr, ret.o);
                        LFloatSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opKFloatS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.LinkedList<float> iceP_i = default;
                iceP_i = KFloatSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpKFloatSResult>(obj.opKFloatSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        KFloatSHelper.write(ostr, ret.o);
                        KFloatSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opQFloatS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Queue<float> iceP_i = default;
                iceP_i = QFloatSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpQFloatSResult>(obj.opQFloatSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        QFloatSHelper.write(ostr, ret.o);
                        QFloatSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSFloatS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Stack<float> iceP_i = default;
                iceP_i = SFloatSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpSFloatSResult>(obj.opSFloatSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        SFloatSHelper.write(ostr, ret.o);
                        SFloatSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opADoubleS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                double[] iceP_i = default;
                iceP_i = ADoubleSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpADoubleSResult>(obj.opADoubleSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        ADoubleSHelper.write(ostr, ret.o);
                        ADoubleSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLDoubleS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<double> iceP_i = default;
                iceP_i = LDoubleSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLDoubleSResult>(obj.opLDoubleSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LDoubleSHelper.write(ostr, ret.o);
                        LDoubleSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opKDoubleS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.LinkedList<double> iceP_i = default;
                iceP_i = KDoubleSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpKDoubleSResult>(obj.opKDoubleSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        KDoubleSHelper.write(ostr, ret.o);
                        KDoubleSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opQDoubleS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Queue<double> iceP_i = default;
                iceP_i = QDoubleSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpQDoubleSResult>(obj.opQDoubleSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        QDoubleSHelper.write(ostr, ret.o);
                        QDoubleSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSDoubleS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Stack<double> iceP_i = default;
                iceP_i = SDoubleSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpSDoubleSResult>(obj.opSDoubleSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        SDoubleSHelper.write(ostr, ret.o);
                        SDoubleSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opAStringS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string[] iceP_i = default;
                iceP_i = AStringSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpAStringSResult>(obj.opAStringSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        AStringSHelper.write(ostr, ret.o);
                        AStringSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLStringS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<string> iceP_i = default;
                iceP_i = LStringSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLStringSResult>(obj.opLStringSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LStringSHelper.write(ostr, ret.o);
                        LStringSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opKStringS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.LinkedList<string> iceP_i = default;
                iceP_i = KStringSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpKStringSResult>(obj.opKStringSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        KStringSHelper.write(ostr, ret.o);
                        KStringSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opQStringS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Queue<string> iceP_i = default;
                iceP_i = QStringSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpQStringSResult>(obj.opQStringSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        QStringSHelper.write(ostr, ret.o);
                        QStringSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSStringS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Stack<string> iceP_i = default;
                iceP_i = SStringSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpSStringSResult>(obj.opSStringSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        SStringSHelper.write(ostr, ret.o);
                        SStringSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opAObjectS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.Value[] iceP_i = default;
                iceP_i = AObjectSHelper.read(istr);
                istr.readPendingValues();
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpAObjectSResult>(obj.opAObjectSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        AObjectSHelper.write(ostr, ret.o);
                        AObjectSHelper.write(ostr, ret.returnValue);
                        ostr.writePendingValues();
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLObjectS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<global::Ice.Value> iceP_i = default;
                iceP_i = LObjectSHelper.read(istr);
                istr.readPendingValues();
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLObjectSResult>(obj.opLObjectSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LObjectSHelper.write(ostr, ret.o);
                        LObjectSHelper.write(ostr, ret.returnValue);
                        ostr.writePendingValues();
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opAObjectPrxS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.ObjectPrx[] iceP_i = default;
                iceP_i = AObjectPrxSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpAObjectPrxSResult>(obj.opAObjectPrxSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        AObjectPrxSHelper.write(ostr, ret.o);
                        AObjectPrxSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLObjectPrxS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<global::Ice.ObjectPrx> iceP_i = default;
                iceP_i = LObjectPrxSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLObjectPrxSResult>(obj.opLObjectPrxSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LObjectPrxSHelper.write(ostr, ret.o);
                        LObjectPrxSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opKObjectPrxS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx> iceP_i = default;
                iceP_i = KObjectPrxSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpKObjectPrxSResult>(obj.opKObjectPrxSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        KObjectPrxSHelper.write(ostr, ret.o);
                        KObjectPrxSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opQObjectPrxS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Queue<global::Ice.ObjectPrx> iceP_i = default;
                iceP_i = QObjectPrxSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpQObjectPrxSResult>(obj.opQObjectPrxSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        QObjectPrxSHelper.write(ostr, ret.o);
                        QObjectPrxSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSObjectPrxS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Stack<global::Ice.ObjectPrx> iceP_i = default;
                iceP_i = SObjectPrxSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpSObjectPrxSResult>(obj.opSObjectPrxSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        SObjectPrxSHelper.write(ostr, ret.o);
                        SObjectPrxSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opAStructS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                S[] iceP_i = default;
                iceP_i = AStructSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpAStructSResult>(obj.opAStructSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        AStructSHelper.write(ostr, ret.o);
                        AStructSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLStructS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<S> iceP_i = default;
                iceP_i = LStructSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLStructSResult>(obj.opLStructSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LStructSHelper.write(ostr, ret.o);
                        LStructSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opKStructS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.LinkedList<S> iceP_i = default;
                iceP_i = KStructSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpKStructSResult>(obj.opKStructSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        KStructSHelper.write(ostr, ret.o);
                        KStructSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opQStructS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Queue<S> iceP_i = default;
                iceP_i = QStructSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpQStructSResult>(obj.opQStructSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        QStructSHelper.write(ostr, ret.o);
                        QStructSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSStructS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Stack<S> iceP_i = default;
                iceP_i = SStructSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpSStructSResult>(obj.opSStructSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        SStructSHelper.write(ostr, ret.o);
                        SStructSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opAStructSD(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                SD[] iceP_i = default;
                iceP_i = AStructSDHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpAStructSDResult>(obj.opAStructSDAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        AStructSDHelper.write(ostr, ret.o);
                        AStructSDHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLStructSD(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<SD> iceP_i = default;
                iceP_i = LStructSDHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLStructSDResult>(obj.opLStructSDAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LStructSDHelper.write(ostr, ret.o);
                        LStructSDHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opKStructSD(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.LinkedList<SD> iceP_i = default;
                iceP_i = KStructSDHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpKStructSDResult>(obj.opKStructSDAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        KStructSDHelper.write(ostr, ret.o);
                        KStructSDHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opQStructSD(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Queue<SD> iceP_i = default;
                iceP_i = QStructSDHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpQStructSDResult>(obj.opQStructSDAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        QStructSDHelper.write(ostr, ret.o);
                        QStructSDHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSStructSD(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Stack<SD> iceP_i = default;
                iceP_i = SStructSDHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpSStructSDResult>(obj.opSStructSDAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        SStructSDHelper.write(ostr, ret.o);
                        SStructSDHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opACVS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                CV[] iceP_i = default;
                iceP_i = ACVSHelper.read(istr);
                istr.readPendingValues();
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpACVSResult>(obj.opACVSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        ACVSHelper.write(ostr, ret.o);
                        ACVSHelper.write(ostr, ret.returnValue);
                        ostr.writePendingValues();
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLCVS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<CV> iceP_i = default;
                iceP_i = LCVSHelper.read(istr);
                istr.readPendingValues();
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLCVSResult>(obj.opLCVSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LCVSHelper.write(ostr, ret.o);
                        LCVSHelper.write(ostr, ret.returnValue);
                        ostr.writePendingValues();
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opACRS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                CR[] iceP_i = default;
                iceP_i = ACRSHelper.read(istr);
                istr.readPendingValues();
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpACRSResult>(obj.opACRSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        ACRSHelper.write(ostr, ret.o);
                        ACRSHelper.write(ostr, ret.returnValue);
                        ostr.writePendingValues();
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLCRS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<CR> iceP_i = default;
                iceP_i = LCRSHelper.read(istr);
                istr.readPendingValues();
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLCRSResult>(obj.opLCRSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LCRSHelper.write(ostr, ret.o);
                        LCRSHelper.write(ostr, ret.returnValue);
                        ostr.writePendingValues();
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opAEnS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                En[] iceP_i = default;
                iceP_i = AEnSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpAEnSResult>(obj.opAEnSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        AEnSHelper.write(ostr, ret.o);
                        AEnSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLEnS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<En> iceP_i = default;
                iceP_i = LEnSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLEnSResult>(obj.opLEnSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LEnSHelper.write(ostr, ret.o);
                        LEnSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opKEnS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.LinkedList<En> iceP_i = default;
                iceP_i = KEnSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpKEnSResult>(obj.opKEnSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        KEnSHelper.write(ostr, ret.o);
                        KEnSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opQEnS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Queue<En> iceP_i = default;
                iceP_i = QEnSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpQEnSResult>(obj.opQEnSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        QEnSHelper.write(ostr, ret.o);
                        QEnSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSEnS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Stack<En> iceP_i = default;
                iceP_i = SEnSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpSEnSResult>(obj.opSEnSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        SEnSHelper.write(ostr, ret.o);
                        SEnSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opAIPrxS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                IPrx[] iceP_i = default;
                iceP_i = AIPrxSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpAIPrxSResult>(obj.opAIPrxSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        AIPrxSHelper.write(ostr, ret.o);
                        AIPrxSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLIPrxS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.List<IPrx> iceP_i = default;
                iceP_i = LIPrxSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpLIPrxSResult>(obj.opLIPrxSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        LIPrxSHelper.write(ostr, ret.o);
                        LIPrxSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opKIPrxS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.LinkedList<IPrx> iceP_i = default;
                iceP_i = KIPrxSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpKIPrxSResult>(obj.opKIPrxSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        KIPrxSHelper.write(ostr, ret.o);
                        KIPrxSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opQIPrxS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Queue<IPrx> iceP_i = default;
                iceP_i = QIPrxSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpQIPrxSResult>(obj.opQIPrxSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        QIPrxSHelper.write(ostr, ret.o);
                        QIPrxSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opSIPrxS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::System.Collections.Generic.Stack<IPrx> iceP_i = default;
                iceP_i = SIPrxSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpSIPrxSResult>(obj.opSIPrxSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        SIPrxSHelper.write(ostr, ret.o);
                        SIPrxSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opCustomIntS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.seqMapping.Custom<int> iceP_i = default;
                iceP_i = CustomIntSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpCustomIntSResult>(obj.opCustomIntSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        CustomIntSHelper.write(ostr, ret.o);
                        CustomIntSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opCustomCVS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.seqMapping.Custom<CV> iceP_i = default;
                iceP_i = CustomCVSHelper.read(istr);
                istr.readPendingValues();
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpCustomCVSResult>(obj.opCustomCVSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        CustomCVSHelper.write(ostr, ret.o);
                        CustomCVSHelper.write(ostr, ret.returnValue);
                        ostr.writePendingValues();
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opCustomIntSS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> iceP_i = default;
                iceP_i = CustomIntSSHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpCustomIntSSResult>(obj.opCustomIntSSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        CustomIntSSHelper.write(ostr, ret.o);
                        CustomIntSSHelper.write(ostr, ret.returnValue);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opCustomCVSS(MyClass obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV>> iceP_i = default;
                iceP_i = CustomCVSSHelper.read(istr);
                istr.readPendingValues();
                inS.endReadParams();
                return inS.setResultTask<MyClass_OpCustomCVSSResult>(obj.opCustomCVSSAsync(iceP_i, current),
                    (ostr, ret) =>
                    {
                        CustomCVSSHelper.write(ostr, ret.o);
                        CustomCVSSHelper.write(ostr, ret.returnValue);
                        ostr.writePendingValues();
                    });
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "opABoolS",
                "opAByteS",
                "opACRS",
                "opACVS",
                "opADoubleS",
                "opAEnS",
                "opAFloatS",
                "opAIPrxS",
                "opAIntS",
                "opALongS",
                "opAObjectPrxS",
                "opAObjectS",
                "opAShortS",
                "opAStringS",
                "opAStructS",
                "opAStructSD",
                "opCustomCVS",
                "opCustomCVSS",
                "opCustomIntS",
                "opCustomIntSS",
                "opKBoolS",
                "opKByteS",
                "opKDoubleS",
                "opKEnS",
                "opKFloatS",
                "opKIPrxS",
                "opKIntS",
                "opKLongS",
                "opKObjectPrxS",
                "opKShortS",
                "opKStringS",
                "opKStructS",
                "opKStructSD",
                "opLBoolS",
                "opLByteS",
                "opLCRS",
                "opLCVS",
                "opLDoubleS",
                "opLEnS",
                "opLFloatS",
                "opLIPrxS",
                "opLIntS",
                "opLLongS",
                "opLObjectPrxS",
                "opLObjectS",
                "opLShortS",
                "opLStringS",
                "opLStructS",
                "opLStructSD",
                "opQBoolS",
                "opQByteS",
                "opQDoubleS",
                "opQEnS",
                "opQFloatS",
                "opQIPrxS",
                "opQIntS",
                "opQLongS",
                "opQObjectPrxS",
                "opQShortS",
                "opQStringS",
                "opQStructS",
                "opQStructSD",
                "opSBoolS",
                "opSByteS",
                "opSDoubleS",
                "opSEnS",
                "opSFloatS",
                "opSIPrxS",
                "opSIntS",
                "opSLongS",
                "opSObjectPrxS",
                "opSShortS",
                "opSStringS",
                "opSStructS",
                "opSStructSD",
                "shutdown"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_opABoolS(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_opAByteS(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_opACRS(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_opACVS(this, inS, current);
                    }
                    case 8:
                    {
                        return iceD_opADoubleS(this, inS, current);
                    }
                    case 9:
                    {
                        return iceD_opAEnS(this, inS, current);
                    }
                    case 10:
                    {
                        return iceD_opAFloatS(this, inS, current);
                    }
                    case 11:
                    {
                        return iceD_opAIPrxS(this, inS, current);
                    }
                    case 12:
                    {
                        return iceD_opAIntS(this, inS, current);
                    }
                    case 13:
                    {
                        return iceD_opALongS(this, inS, current);
                    }
                    case 14:
                    {
                        return iceD_opAObjectPrxS(this, inS, current);
                    }
                    case 15:
                    {
                        return iceD_opAObjectS(this, inS, current);
                    }
                    case 16:
                    {
                        return iceD_opAShortS(this, inS, current);
                    }
                    case 17:
                    {
                        return iceD_opAStringS(this, inS, current);
                    }
                    case 18:
                    {
                        return iceD_opAStructS(this, inS, current);
                    }
                    case 19:
                    {
                        return iceD_opAStructSD(this, inS, current);
                    }
                    case 20:
                    {
                        return iceD_opCustomCVS(this, inS, current);
                    }
                    case 21:
                    {
                        return iceD_opCustomCVSS(this, inS, current);
                    }
                    case 22:
                    {
                        return iceD_opCustomIntS(this, inS, current);
                    }
                    case 23:
                    {
                        return iceD_opCustomIntSS(this, inS, current);
                    }
                    case 24:
                    {
                        return iceD_opKBoolS(this, inS, current);
                    }
                    case 25:
                    {
                        return iceD_opKByteS(this, inS, current);
                    }
                    case 26:
                    {
                        return iceD_opKDoubleS(this, inS, current);
                    }
                    case 27:
                    {
                        return iceD_opKEnS(this, inS, current);
                    }
                    case 28:
                    {
                        return iceD_opKFloatS(this, inS, current);
                    }
                    case 29:
                    {
                        return iceD_opKIPrxS(this, inS, current);
                    }
                    case 30:
                    {
                        return iceD_opKIntS(this, inS, current);
                    }
                    case 31:
                    {
                        return iceD_opKLongS(this, inS, current);
                    }
                    case 32:
                    {
                        return iceD_opKObjectPrxS(this, inS, current);
                    }
                    case 33:
                    {
                        return iceD_opKShortS(this, inS, current);
                    }
                    case 34:
                    {
                        return iceD_opKStringS(this, inS, current);
                    }
                    case 35:
                    {
                        return iceD_opKStructS(this, inS, current);
                    }
                    case 36:
                    {
                        return iceD_opKStructSD(this, inS, current);
                    }
                    case 37:
                    {
                        return iceD_opLBoolS(this, inS, current);
                    }
                    case 38:
                    {
                        return iceD_opLByteS(this, inS, current);
                    }
                    case 39:
                    {
                        return iceD_opLCRS(this, inS, current);
                    }
                    case 40:
                    {
                        return iceD_opLCVS(this, inS, current);
                    }
                    case 41:
                    {
                        return iceD_opLDoubleS(this, inS, current);
                    }
                    case 42:
                    {
                        return iceD_opLEnS(this, inS, current);
                    }
                    case 43:
                    {
                        return iceD_opLFloatS(this, inS, current);
                    }
                    case 44:
                    {
                        return iceD_opLIPrxS(this, inS, current);
                    }
                    case 45:
                    {
                        return iceD_opLIntS(this, inS, current);
                    }
                    case 46:
                    {
                        return iceD_opLLongS(this, inS, current);
                    }
                    case 47:
                    {
                        return iceD_opLObjectPrxS(this, inS, current);
                    }
                    case 48:
                    {
                        return iceD_opLObjectS(this, inS, current);
                    }
                    case 49:
                    {
                        return iceD_opLShortS(this, inS, current);
                    }
                    case 50:
                    {
                        return iceD_opLStringS(this, inS, current);
                    }
                    case 51:
                    {
                        return iceD_opLStructS(this, inS, current);
                    }
                    case 52:
                    {
                        return iceD_opLStructSD(this, inS, current);
                    }
                    case 53:
                    {
                        return iceD_opQBoolS(this, inS, current);
                    }
                    case 54:
                    {
                        return iceD_opQByteS(this, inS, current);
                    }
                    case 55:
                    {
                        return iceD_opQDoubleS(this, inS, current);
                    }
                    case 56:
                    {
                        return iceD_opQEnS(this, inS, current);
                    }
                    case 57:
                    {
                        return iceD_opQFloatS(this, inS, current);
                    }
                    case 58:
                    {
                        return iceD_opQIPrxS(this, inS, current);
                    }
                    case 59:
                    {
                        return iceD_opQIntS(this, inS, current);
                    }
                    case 60:
                    {
                        return iceD_opQLongS(this, inS, current);
                    }
                    case 61:
                    {
                        return iceD_opQObjectPrxS(this, inS, current);
                    }
                    case 62:
                    {
                        return iceD_opQShortS(this, inS, current);
                    }
                    case 63:
                    {
                        return iceD_opQStringS(this, inS, current);
                    }
                    case 64:
                    {
                        return iceD_opQStructS(this, inS, current);
                    }
                    case 65:
                    {
                        return iceD_opQStructSD(this, inS, current);
                    }
                    case 66:
                    {
                        return iceD_opSBoolS(this, inS, current);
                    }
                    case 67:
                    {
                        return iceD_opSByteS(this, inS, current);
                    }
                    case 68:
                    {
                        return iceD_opSDoubleS(this, inS, current);
                    }
                    case 69:
                    {
                        return iceD_opSEnS(this, inS, current);
                    }
                    case 70:
                    {
                        return iceD_opSFloatS(this, inS, current);
                    }
                    case 71:
                    {
                        return iceD_opSIPrxS(this, inS, current);
                    }
                    case 72:
                    {
                        return iceD_opSIntS(this, inS, current);
                    }
                    case 73:
                    {
                        return iceD_opSLongS(this, inS, current);
                    }
                    case 74:
                    {
                        return iceD_opSObjectPrxS(this, inS, current);
                    }
                    case 75:
                    {
                        return iceD_opSShortS(this, inS, current);
                    }
                    case 76:
                    {
                        return iceD_opSStringS(this, inS, current);
                    }
                    case 77:
                    {
                        return iceD_opSStructS(this, inS, current);
                    }
                    case 78:
                    {
                        return iceD_opSStructSD(this, inS, current);
                    }
                    case 79:
                    {
                        return iceD_shutdown(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
