//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Ice.seqMapping
{
    namespace Test
    {
        public partial record struct S
        {
            public int i;

            partial void ice_initialize();

            public S(int i)
            {
                this.i = i;
                ice_initialize();
            }

            public S(Ice.InputStream istr)
            {
                this.i = istr.readInt();
                ice_initialize();
            }

            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeInt(this.i);
            }

            public static void ice_write(Ice.OutputStream ostr, S v)
            {
                v.ice_writeMembers(ostr);
            }

            public static S ice_read(Ice.InputStream istr) => new(istr);
        }

        public sealed partial record class SD
        {
            public int i = 1;

            partial void ice_initialize();

            public SD()
            {
                ice_initialize();
            }

            public SD(int i)
            {
                this.i = i;
                ice_initialize();
            }

            public SD(Ice.InputStream istr)
            {
                this.i = istr.readInt();
                ice_initialize();
            }

            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeInt(this.i);
            }

            public static void ice_write(Ice.OutputStream ostr, SD v)
            {
                v.ice_writeMembers(ostr);
            }

            public static SD ice_read(Ice.InputStream istr) => new(istr);
        }

        [Ice.SliceTypeId("::Test::CV")]
        public partial class CV : Ice.Value
        {
            public int i;

            partial void ice_initialize();

            public CV(int i)
            {
                this.i = i;
                ice_initialize();
            }

            public CV()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::CV";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(i);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                i = istr_.readInt();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::I")]
        public partial interface I : Ice.Object
        {
        }

        [Ice.SliceTypeId("::Test::CR")]
        public partial class CR : Ice.Value
        {
            public CV? v;

            partial void ice_initialize();

            public CR(CV? v)
            {
                this.v = v;
                ice_initialize();
            }

            public CR()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::CR";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(v);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((CV? v) => { this.v = v; });
                istr_.endSlice();
            }
        }

        public enum En
        {
            A,
            B,
            C
        }

        public sealed class EnHelper
        {
            public static void write(Ice.OutputStream ostr, En v)
            {
                ostr.writeEnum((int)v, 2);
            }

            public static En read(Ice.InputStream istr)
            {
                En v;
                v = (En)istr.readEnum(2);
                return v;
            }
        }

        [Ice.SliceTypeId("::Test::MyClass")]
        public partial interface MyClass : Ice.Object
        {
            void shutdown(Ice.Current current);

            byte[] opAByteS(byte[] i, out byte[] o, Ice.Current current);

            global::System.Collections.Generic.List<byte> opLByteS(global::System.Collections.Generic.List<byte> i, out global::System.Collections.Generic.List<byte> o, Ice.Current current);

            global::System.Collections.Generic.LinkedList<byte> opKByteS(global::System.Collections.Generic.LinkedList<byte> i, out global::System.Collections.Generic.LinkedList<byte> o, Ice.Current current);

            global::System.Collections.Generic.Queue<byte> opQByteS(global::System.Collections.Generic.Queue<byte> i, out global::System.Collections.Generic.Queue<byte> o, Ice.Current current);

            global::System.Collections.Generic.Stack<byte> opSByteS(global::System.Collections.Generic.Stack<byte> i, out global::System.Collections.Generic.Stack<byte> o, Ice.Current current);

            bool[] opABoolS(bool[] i, out bool[] o, Ice.Current current);

            global::System.Collections.Generic.List<bool> opLBoolS(global::System.Collections.Generic.List<bool> i, out global::System.Collections.Generic.List<bool> o, Ice.Current current);

            global::System.Collections.Generic.LinkedList<bool> opKBoolS(global::System.Collections.Generic.LinkedList<bool> i, out global::System.Collections.Generic.LinkedList<bool> o, Ice.Current current);

            global::System.Collections.Generic.Queue<bool> opQBoolS(global::System.Collections.Generic.Queue<bool> i, out global::System.Collections.Generic.Queue<bool> o, Ice.Current current);

            global::System.Collections.Generic.Stack<bool> opSBoolS(global::System.Collections.Generic.Stack<bool> i, out global::System.Collections.Generic.Stack<bool> o, Ice.Current current);

            short[] opAShortS(short[] i, out short[] o, Ice.Current current);

            global::System.Collections.Generic.List<short> opLShortS(global::System.Collections.Generic.List<short> i, out global::System.Collections.Generic.List<short> o, Ice.Current current);

            global::System.Collections.Generic.LinkedList<short> opKShortS(global::System.Collections.Generic.LinkedList<short> i, out global::System.Collections.Generic.LinkedList<short> o, Ice.Current current);

            global::System.Collections.Generic.Queue<short> opQShortS(global::System.Collections.Generic.Queue<short> i, out global::System.Collections.Generic.Queue<short> o, Ice.Current current);

            global::System.Collections.Generic.Stack<short> opSShortS(global::System.Collections.Generic.Stack<short> i, out global::System.Collections.Generic.Stack<short> o, Ice.Current current);

            int[] opAIntS(int[] i, out int[] o, Ice.Current current);

            global::System.Collections.Generic.List<int> opLIntS(global::System.Collections.Generic.List<int> i, out global::System.Collections.Generic.List<int> o, Ice.Current current);

            global::System.Collections.Generic.LinkedList<int> opKIntS(global::System.Collections.Generic.LinkedList<int> i, out global::System.Collections.Generic.LinkedList<int> o, Ice.Current current);

            global::System.Collections.Generic.Queue<int> opQIntS(global::System.Collections.Generic.Queue<int> i, out global::System.Collections.Generic.Queue<int> o, Ice.Current current);

            global::System.Collections.Generic.Stack<int> opSIntS(global::System.Collections.Generic.Stack<int> i, out global::System.Collections.Generic.Stack<int> o, Ice.Current current);

            long[] opALongS(long[] i, out long[] o, Ice.Current current);

            global::System.Collections.Generic.List<long> opLLongS(global::System.Collections.Generic.List<long> i, out global::System.Collections.Generic.List<long> o, Ice.Current current);

            global::System.Collections.Generic.LinkedList<long> opKLongS(global::System.Collections.Generic.LinkedList<long> i, out global::System.Collections.Generic.LinkedList<long> o, Ice.Current current);

            global::System.Collections.Generic.Queue<long> opQLongS(global::System.Collections.Generic.Queue<long> i, out global::System.Collections.Generic.Queue<long> o, Ice.Current current);

            global::System.Collections.Generic.Stack<long> opSLongS(global::System.Collections.Generic.Stack<long> i, out global::System.Collections.Generic.Stack<long> o, Ice.Current current);

            float[] opAFloatS(float[] i, out float[] o, Ice.Current current);

            global::System.Collections.Generic.List<float> opLFloatS(global::System.Collections.Generic.List<float> i, out global::System.Collections.Generic.List<float> o, Ice.Current current);

            global::System.Collections.Generic.LinkedList<float> opKFloatS(global::System.Collections.Generic.LinkedList<float> i, out global::System.Collections.Generic.LinkedList<float> o, Ice.Current current);

            global::System.Collections.Generic.Queue<float> opQFloatS(global::System.Collections.Generic.Queue<float> i, out global::System.Collections.Generic.Queue<float> o, Ice.Current current);

            global::System.Collections.Generic.Stack<float> opSFloatS(global::System.Collections.Generic.Stack<float> i, out global::System.Collections.Generic.Stack<float> o, Ice.Current current);

            double[] opADoubleS(double[] i, out double[] o, Ice.Current current);

            global::System.Collections.Generic.List<double> opLDoubleS(global::System.Collections.Generic.List<double> i, out global::System.Collections.Generic.List<double> o, Ice.Current current);

            global::System.Collections.Generic.LinkedList<double> opKDoubleS(global::System.Collections.Generic.LinkedList<double> i, out global::System.Collections.Generic.LinkedList<double> o, Ice.Current current);

            global::System.Collections.Generic.Queue<double> opQDoubleS(global::System.Collections.Generic.Queue<double> i, out global::System.Collections.Generic.Queue<double> o, Ice.Current current);

            global::System.Collections.Generic.Stack<double> opSDoubleS(global::System.Collections.Generic.Stack<double> i, out global::System.Collections.Generic.Stack<double> o, Ice.Current current);

            string[] opAStringS(string[] i, out string[] o, Ice.Current current);

            global::System.Collections.Generic.List<string> opLStringS(global::System.Collections.Generic.List<string> i, out global::System.Collections.Generic.List<string> o, Ice.Current current);

            global::System.Collections.Generic.LinkedList<string> opKStringS(global::System.Collections.Generic.LinkedList<string> i, out global::System.Collections.Generic.LinkedList<string> o, Ice.Current current);

            global::System.Collections.Generic.Queue<string> opQStringS(global::System.Collections.Generic.Queue<string> i, out global::System.Collections.Generic.Queue<string> o, Ice.Current current);

            global::System.Collections.Generic.Stack<string> opSStringS(global::System.Collections.Generic.Stack<string> i, out global::System.Collections.Generic.Stack<string> o, Ice.Current current);

            global::Ice.Value?[] opAObjectS(global::Ice.Value?[] i, out global::Ice.Value?[] o, Ice.Current current);

            global::System.Collections.Generic.List<global::Ice.Value?> opLObjectS(global::System.Collections.Generic.List<global::Ice.Value?> i, out global::System.Collections.Generic.List<global::Ice.Value?> o, Ice.Current current);

            global::Ice.ObjectPrx?[] opAObjectPrxS(global::Ice.ObjectPrx?[] i, out global::Ice.ObjectPrx?[] o, Ice.Current current);

            global::System.Collections.Generic.List<global::Ice.ObjectPrx?> opLObjectPrxS(global::System.Collections.Generic.List<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.List<global::Ice.ObjectPrx?> o, Ice.Current current);

            global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> opKObjectPrxS(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> o, Ice.Current current);

            global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> opQObjectPrxS(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> o, Ice.Current current);

            global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> opSObjectPrxS(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> o, Ice.Current current);

            S[] opAStructS(S[] i, out S[] o, Ice.Current current);

            global::System.Collections.Generic.List<S> opLStructS(global::System.Collections.Generic.List<S> i, out global::System.Collections.Generic.List<S> o, Ice.Current current);

            global::System.Collections.Generic.LinkedList<S> opKStructS(global::System.Collections.Generic.LinkedList<S> i, out global::System.Collections.Generic.LinkedList<S> o, Ice.Current current);

            global::System.Collections.Generic.Queue<S> opQStructS(global::System.Collections.Generic.Queue<S> i, out global::System.Collections.Generic.Queue<S> o, Ice.Current current);

            global::System.Collections.Generic.Stack<S> opSStructS(global::System.Collections.Generic.Stack<S> i, out global::System.Collections.Generic.Stack<S> o, Ice.Current current);

            SD[] opAStructSD(SD[] i, out SD[] o, Ice.Current current);

            global::System.Collections.Generic.List<SD> opLStructSD(global::System.Collections.Generic.List<SD> i, out global::System.Collections.Generic.List<SD> o, Ice.Current current);

            global::System.Collections.Generic.LinkedList<SD> opKStructSD(global::System.Collections.Generic.LinkedList<SD> i, out global::System.Collections.Generic.LinkedList<SD> o, Ice.Current current);

            global::System.Collections.Generic.Queue<SD> opQStructSD(global::System.Collections.Generic.Queue<SD> i, out global::System.Collections.Generic.Queue<SD> o, Ice.Current current);

            global::System.Collections.Generic.Stack<SD> opSStructSD(global::System.Collections.Generic.Stack<SD> i, out global::System.Collections.Generic.Stack<SD> o, Ice.Current current);

            CV?[] opACVS(CV?[] i, out CV?[] o, Ice.Current current);

            global::System.Collections.Generic.List<CV?> opLCVS(global::System.Collections.Generic.List<CV?> i, out global::System.Collections.Generic.List<CV?> o, Ice.Current current);

            CR?[] opACRS(CR?[] i, out CR?[] o, Ice.Current current);

            global::System.Collections.Generic.List<CR?> opLCRS(global::System.Collections.Generic.List<CR?> i, out global::System.Collections.Generic.List<CR?> o, Ice.Current current);

            En[] opAEnS(En[] i, out En[] o, Ice.Current current);

            global::System.Collections.Generic.List<En> opLEnS(global::System.Collections.Generic.List<En> i, out global::System.Collections.Generic.List<En> o, Ice.Current current);

            global::System.Collections.Generic.LinkedList<En> opKEnS(global::System.Collections.Generic.LinkedList<En> i, out global::System.Collections.Generic.LinkedList<En> o, Ice.Current current);

            global::System.Collections.Generic.Queue<En> opQEnS(global::System.Collections.Generic.Queue<En> i, out global::System.Collections.Generic.Queue<En> o, Ice.Current current);

            global::System.Collections.Generic.Stack<En> opSEnS(global::System.Collections.Generic.Stack<En> i, out global::System.Collections.Generic.Stack<En> o, Ice.Current current);

            IPrx?[] opAIPrxS(IPrx?[] i, out IPrx?[] o, Ice.Current current);

            global::System.Collections.Generic.List<IPrx?> opLIPrxS(global::System.Collections.Generic.List<IPrx?> i, out global::System.Collections.Generic.List<IPrx?> o, Ice.Current current);

            global::System.Collections.Generic.LinkedList<IPrx?> opKIPrxS(global::System.Collections.Generic.LinkedList<IPrx?> i, out global::System.Collections.Generic.LinkedList<IPrx?> o, Ice.Current current);

            global::System.Collections.Generic.Queue<IPrx?> opQIPrxS(global::System.Collections.Generic.Queue<IPrx?> i, out global::System.Collections.Generic.Queue<IPrx?> o, Ice.Current current);

            global::System.Collections.Generic.Stack<IPrx?> opSIPrxS(global::System.Collections.Generic.Stack<IPrx?> i, out global::System.Collections.Generic.Stack<IPrx?> o, Ice.Current current);

            global::Ice.seqMapping.Custom<int> opCustomIntS(global::Ice.seqMapping.Custom<int> i, out global::Ice.seqMapping.Custom<int> o, Ice.Current current);

            global::Ice.seqMapping.Custom<CV?> opCustomCVS(global::Ice.seqMapping.Custom<CV?> i, out global::Ice.seqMapping.Custom<CV?> o, Ice.Current current);

            global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> opCustomIntSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> i, out global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> o, Ice.Current current);

            global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> opCustomCVSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> i, out global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> o, Ice.Current current);
        }
    }
}

namespace Ice.seqMapping
{
    namespace Test
    {
        public record struct MyClass_OpAByteSResult(byte[] returnValue, byte[] o);

        public record struct MyClass_OpLByteSResult(global::System.Collections.Generic.List<byte> returnValue, global::System.Collections.Generic.List<byte> o);

        public record struct MyClass_OpKByteSResult(global::System.Collections.Generic.LinkedList<byte> returnValue, global::System.Collections.Generic.LinkedList<byte> o);

        public record struct MyClass_OpQByteSResult(global::System.Collections.Generic.Queue<byte> returnValue, global::System.Collections.Generic.Queue<byte> o);

        public record struct MyClass_OpSByteSResult(global::System.Collections.Generic.Stack<byte> returnValue, global::System.Collections.Generic.Stack<byte> o);

        public record struct MyClass_OpABoolSResult(bool[] returnValue, bool[] o);

        public record struct MyClass_OpLBoolSResult(global::System.Collections.Generic.List<bool> returnValue, global::System.Collections.Generic.List<bool> o);

        public record struct MyClass_OpKBoolSResult(global::System.Collections.Generic.LinkedList<bool> returnValue, global::System.Collections.Generic.LinkedList<bool> o);

        public record struct MyClass_OpQBoolSResult(global::System.Collections.Generic.Queue<bool> returnValue, global::System.Collections.Generic.Queue<bool> o);

        public record struct MyClass_OpSBoolSResult(global::System.Collections.Generic.Stack<bool> returnValue, global::System.Collections.Generic.Stack<bool> o);

        public record struct MyClass_OpAShortSResult(short[] returnValue, short[] o);

        public record struct MyClass_OpLShortSResult(global::System.Collections.Generic.List<short> returnValue, global::System.Collections.Generic.List<short> o);

        public record struct MyClass_OpKShortSResult(global::System.Collections.Generic.LinkedList<short> returnValue, global::System.Collections.Generic.LinkedList<short> o);

        public record struct MyClass_OpQShortSResult(global::System.Collections.Generic.Queue<short> returnValue, global::System.Collections.Generic.Queue<short> o);

        public record struct MyClass_OpSShortSResult(global::System.Collections.Generic.Stack<short> returnValue, global::System.Collections.Generic.Stack<short> o);

        public record struct MyClass_OpAIntSResult(int[] returnValue, int[] o);

        public record struct MyClass_OpLIntSResult(global::System.Collections.Generic.List<int> returnValue, global::System.Collections.Generic.List<int> o);

        public record struct MyClass_OpKIntSResult(global::System.Collections.Generic.LinkedList<int> returnValue, global::System.Collections.Generic.LinkedList<int> o);

        public record struct MyClass_OpQIntSResult(global::System.Collections.Generic.Queue<int> returnValue, global::System.Collections.Generic.Queue<int> o);

        public record struct MyClass_OpSIntSResult(global::System.Collections.Generic.Stack<int> returnValue, global::System.Collections.Generic.Stack<int> o);

        public record struct MyClass_OpALongSResult(long[] returnValue, long[] o);

        public record struct MyClass_OpLLongSResult(global::System.Collections.Generic.List<long> returnValue, global::System.Collections.Generic.List<long> o);

        public record struct MyClass_OpKLongSResult(global::System.Collections.Generic.LinkedList<long> returnValue, global::System.Collections.Generic.LinkedList<long> o);

        public record struct MyClass_OpQLongSResult(global::System.Collections.Generic.Queue<long> returnValue, global::System.Collections.Generic.Queue<long> o);

        public record struct MyClass_OpSLongSResult(global::System.Collections.Generic.Stack<long> returnValue, global::System.Collections.Generic.Stack<long> o);

        public record struct MyClass_OpAFloatSResult(float[] returnValue, float[] o);

        public record struct MyClass_OpLFloatSResult(global::System.Collections.Generic.List<float> returnValue, global::System.Collections.Generic.List<float> o);

        public record struct MyClass_OpKFloatSResult(global::System.Collections.Generic.LinkedList<float> returnValue, global::System.Collections.Generic.LinkedList<float> o);

        public record struct MyClass_OpQFloatSResult(global::System.Collections.Generic.Queue<float> returnValue, global::System.Collections.Generic.Queue<float> o);

        public record struct MyClass_OpSFloatSResult(global::System.Collections.Generic.Stack<float> returnValue, global::System.Collections.Generic.Stack<float> o);

        public record struct MyClass_OpADoubleSResult(double[] returnValue, double[] o);

        public record struct MyClass_OpLDoubleSResult(global::System.Collections.Generic.List<double> returnValue, global::System.Collections.Generic.List<double> o);

        public record struct MyClass_OpKDoubleSResult(global::System.Collections.Generic.LinkedList<double> returnValue, global::System.Collections.Generic.LinkedList<double> o);

        public record struct MyClass_OpQDoubleSResult(global::System.Collections.Generic.Queue<double> returnValue, global::System.Collections.Generic.Queue<double> o);

        public record struct MyClass_OpSDoubleSResult(global::System.Collections.Generic.Stack<double> returnValue, global::System.Collections.Generic.Stack<double> o);

        public record struct MyClass_OpAStringSResult(string[] returnValue, string[] o);

        public record struct MyClass_OpLStringSResult(global::System.Collections.Generic.List<string> returnValue, global::System.Collections.Generic.List<string> o);

        public record struct MyClass_OpKStringSResult(global::System.Collections.Generic.LinkedList<string> returnValue, global::System.Collections.Generic.LinkedList<string> o);

        public record struct MyClass_OpQStringSResult(global::System.Collections.Generic.Queue<string> returnValue, global::System.Collections.Generic.Queue<string> o);

        public record struct MyClass_OpSStringSResult(global::System.Collections.Generic.Stack<string> returnValue, global::System.Collections.Generic.Stack<string> o);

        public record struct MyClass_OpAObjectSResult(global::Ice.Value?[] returnValue, global::Ice.Value?[] o);

        public record struct MyClass_OpLObjectSResult(global::System.Collections.Generic.List<global::Ice.Value?> returnValue, global::System.Collections.Generic.List<global::Ice.Value?> o);

        public record struct MyClass_OpAObjectPrxSResult(global::Ice.ObjectPrx?[] returnValue, global::Ice.ObjectPrx?[] o);

        public record struct MyClass_OpLObjectPrxSResult(global::System.Collections.Generic.List<global::Ice.ObjectPrx?> returnValue, global::System.Collections.Generic.List<global::Ice.ObjectPrx?> o);

        public record struct MyClass_OpKObjectPrxSResult(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> returnValue, global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> o);

        public record struct MyClass_OpQObjectPrxSResult(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> returnValue, global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> o);

        public record struct MyClass_OpSObjectPrxSResult(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> returnValue, global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> o);

        public record struct MyClass_OpAStructSResult(S[] returnValue, S[] o);

        public record struct MyClass_OpLStructSResult(global::System.Collections.Generic.List<S> returnValue, global::System.Collections.Generic.List<S> o);

        public record struct MyClass_OpKStructSResult(global::System.Collections.Generic.LinkedList<S> returnValue, global::System.Collections.Generic.LinkedList<S> o);

        public record struct MyClass_OpQStructSResult(global::System.Collections.Generic.Queue<S> returnValue, global::System.Collections.Generic.Queue<S> o);

        public record struct MyClass_OpSStructSResult(global::System.Collections.Generic.Stack<S> returnValue, global::System.Collections.Generic.Stack<S> o);

        public record struct MyClass_OpAStructSDResult(SD[] returnValue, SD[] o);

        public record struct MyClass_OpLStructSDResult(global::System.Collections.Generic.List<SD> returnValue, global::System.Collections.Generic.List<SD> o);

        public record struct MyClass_OpKStructSDResult(global::System.Collections.Generic.LinkedList<SD> returnValue, global::System.Collections.Generic.LinkedList<SD> o);

        public record struct MyClass_OpQStructSDResult(global::System.Collections.Generic.Queue<SD> returnValue, global::System.Collections.Generic.Queue<SD> o);

        public record struct MyClass_OpSStructSDResult(global::System.Collections.Generic.Stack<SD> returnValue, global::System.Collections.Generic.Stack<SD> o);

        public record struct MyClass_OpACVSResult(CV?[] returnValue, CV?[] o);

        public record struct MyClass_OpLCVSResult(global::System.Collections.Generic.List<CV?> returnValue, global::System.Collections.Generic.List<CV?> o);

        public record struct MyClass_OpACRSResult(CR?[] returnValue, CR?[] o);

        public record struct MyClass_OpLCRSResult(global::System.Collections.Generic.List<CR?> returnValue, global::System.Collections.Generic.List<CR?> o);

        public record struct MyClass_OpAEnSResult(En[] returnValue, En[] o);

        public record struct MyClass_OpLEnSResult(global::System.Collections.Generic.List<En> returnValue, global::System.Collections.Generic.List<En> o);

        public record struct MyClass_OpKEnSResult(global::System.Collections.Generic.LinkedList<En> returnValue, global::System.Collections.Generic.LinkedList<En> o);

        public record struct MyClass_OpQEnSResult(global::System.Collections.Generic.Queue<En> returnValue, global::System.Collections.Generic.Queue<En> o);

        public record struct MyClass_OpSEnSResult(global::System.Collections.Generic.Stack<En> returnValue, global::System.Collections.Generic.Stack<En> o);

        public record struct MyClass_OpAIPrxSResult(IPrx?[] returnValue, IPrx?[] o);

        public record struct MyClass_OpLIPrxSResult(global::System.Collections.Generic.List<IPrx?> returnValue, global::System.Collections.Generic.List<IPrx?> o);

        public record struct MyClass_OpKIPrxSResult(global::System.Collections.Generic.LinkedList<IPrx?> returnValue, global::System.Collections.Generic.LinkedList<IPrx?> o);

        public record struct MyClass_OpQIPrxSResult(global::System.Collections.Generic.Queue<IPrx?> returnValue, global::System.Collections.Generic.Queue<IPrx?> o);

        public record struct MyClass_OpSIPrxSResult(global::System.Collections.Generic.Stack<IPrx?> returnValue, global::System.Collections.Generic.Stack<IPrx?> o);

        public record struct MyClass_OpCustomIntSResult(global::Ice.seqMapping.Custom<int> returnValue, global::Ice.seqMapping.Custom<int> o);

        public record struct MyClass_OpCustomCVSResult(global::Ice.seqMapping.Custom<CV?> returnValue, global::Ice.seqMapping.Custom<CV?> o);

        public record struct MyClass_OpCustomIntSSResult(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> returnValue, global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> o);

        public record struct MyClass_OpCustomCVSSResult(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> returnValue, global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> o);
    }
}

namespace Ice.seqMapping
{
    namespace Test
    {
        public interface IPrx : Ice.ObjectPrx
        {
        }

        public interface MyClassPrx : Ice.ObjectPrx
        {
            void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            byte[] opAByteS(byte[] i, out byte[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAByteSResult> opAByteSAsync(byte[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<byte> opLByteS(global::System.Collections.Generic.List<byte> i, out global::System.Collections.Generic.List<byte> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLByteSResult> opLByteSAsync(global::System.Collections.Generic.List<byte> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<byte> opKByteS(global::System.Collections.Generic.LinkedList<byte> i, out global::System.Collections.Generic.LinkedList<byte> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKByteSResult> opKByteSAsync(global::System.Collections.Generic.LinkedList<byte> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<byte> opQByteS(global::System.Collections.Generic.Queue<byte> i, out global::System.Collections.Generic.Queue<byte> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQByteSResult> opQByteSAsync(global::System.Collections.Generic.Queue<byte> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<byte> opSByteS(global::System.Collections.Generic.Stack<byte> i, out global::System.Collections.Generic.Stack<byte> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSByteSResult> opSByteSAsync(global::System.Collections.Generic.Stack<byte> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            bool[] opABoolS(bool[] i, out bool[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpABoolSResult> opABoolSAsync(bool[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<bool> opLBoolS(global::System.Collections.Generic.List<bool> i, out global::System.Collections.Generic.List<bool> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLBoolSResult> opLBoolSAsync(global::System.Collections.Generic.List<bool> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<bool> opKBoolS(global::System.Collections.Generic.LinkedList<bool> i, out global::System.Collections.Generic.LinkedList<bool> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKBoolSResult> opKBoolSAsync(global::System.Collections.Generic.LinkedList<bool> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<bool> opQBoolS(global::System.Collections.Generic.Queue<bool> i, out global::System.Collections.Generic.Queue<bool> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQBoolSResult> opQBoolSAsync(global::System.Collections.Generic.Queue<bool> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<bool> opSBoolS(global::System.Collections.Generic.Stack<bool> i, out global::System.Collections.Generic.Stack<bool> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSBoolSResult> opSBoolSAsync(global::System.Collections.Generic.Stack<bool> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            short[] opAShortS(short[] i, out short[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAShortSResult> opAShortSAsync(short[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<short> opLShortS(global::System.Collections.Generic.List<short> i, out global::System.Collections.Generic.List<short> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLShortSResult> opLShortSAsync(global::System.Collections.Generic.List<short> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<short> opKShortS(global::System.Collections.Generic.LinkedList<short> i, out global::System.Collections.Generic.LinkedList<short> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKShortSResult> opKShortSAsync(global::System.Collections.Generic.LinkedList<short> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<short> opQShortS(global::System.Collections.Generic.Queue<short> i, out global::System.Collections.Generic.Queue<short> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQShortSResult> opQShortSAsync(global::System.Collections.Generic.Queue<short> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<short> opSShortS(global::System.Collections.Generic.Stack<short> i, out global::System.Collections.Generic.Stack<short> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSShortSResult> opSShortSAsync(global::System.Collections.Generic.Stack<short> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            int[] opAIntS(int[] i, out int[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAIntSResult> opAIntSAsync(int[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<int> opLIntS(global::System.Collections.Generic.List<int> i, out global::System.Collections.Generic.List<int> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLIntSResult> opLIntSAsync(global::System.Collections.Generic.List<int> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<int> opKIntS(global::System.Collections.Generic.LinkedList<int> i, out global::System.Collections.Generic.LinkedList<int> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKIntSResult> opKIntSAsync(global::System.Collections.Generic.LinkedList<int> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<int> opQIntS(global::System.Collections.Generic.Queue<int> i, out global::System.Collections.Generic.Queue<int> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQIntSResult> opQIntSAsync(global::System.Collections.Generic.Queue<int> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<int> opSIntS(global::System.Collections.Generic.Stack<int> i, out global::System.Collections.Generic.Stack<int> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSIntSResult> opSIntSAsync(global::System.Collections.Generic.Stack<int> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            long[] opALongS(long[] i, out long[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpALongSResult> opALongSAsync(long[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<long> opLLongS(global::System.Collections.Generic.List<long> i, out global::System.Collections.Generic.List<long> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLLongSResult> opLLongSAsync(global::System.Collections.Generic.List<long> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<long> opKLongS(global::System.Collections.Generic.LinkedList<long> i, out global::System.Collections.Generic.LinkedList<long> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKLongSResult> opKLongSAsync(global::System.Collections.Generic.LinkedList<long> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<long> opQLongS(global::System.Collections.Generic.Queue<long> i, out global::System.Collections.Generic.Queue<long> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQLongSResult> opQLongSAsync(global::System.Collections.Generic.Queue<long> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<long> opSLongS(global::System.Collections.Generic.Stack<long> i, out global::System.Collections.Generic.Stack<long> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSLongSResult> opSLongSAsync(global::System.Collections.Generic.Stack<long> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            float[] opAFloatS(float[] i, out float[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAFloatSResult> opAFloatSAsync(float[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<float> opLFloatS(global::System.Collections.Generic.List<float> i, out global::System.Collections.Generic.List<float> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLFloatSResult> opLFloatSAsync(global::System.Collections.Generic.List<float> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<float> opKFloatS(global::System.Collections.Generic.LinkedList<float> i, out global::System.Collections.Generic.LinkedList<float> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKFloatSResult> opKFloatSAsync(global::System.Collections.Generic.LinkedList<float> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<float> opQFloatS(global::System.Collections.Generic.Queue<float> i, out global::System.Collections.Generic.Queue<float> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQFloatSResult> opQFloatSAsync(global::System.Collections.Generic.Queue<float> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<float> opSFloatS(global::System.Collections.Generic.Stack<float> i, out global::System.Collections.Generic.Stack<float> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSFloatSResult> opSFloatSAsync(global::System.Collections.Generic.Stack<float> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            double[] opADoubleS(double[] i, out double[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpADoubleSResult> opADoubleSAsync(double[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<double> opLDoubleS(global::System.Collections.Generic.List<double> i, out global::System.Collections.Generic.List<double> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLDoubleSResult> opLDoubleSAsync(global::System.Collections.Generic.List<double> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<double> opKDoubleS(global::System.Collections.Generic.LinkedList<double> i, out global::System.Collections.Generic.LinkedList<double> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKDoubleSResult> opKDoubleSAsync(global::System.Collections.Generic.LinkedList<double> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<double> opQDoubleS(global::System.Collections.Generic.Queue<double> i, out global::System.Collections.Generic.Queue<double> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQDoubleSResult> opQDoubleSAsync(global::System.Collections.Generic.Queue<double> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<double> opSDoubleS(global::System.Collections.Generic.Stack<double> i, out global::System.Collections.Generic.Stack<double> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSDoubleSResult> opSDoubleSAsync(global::System.Collections.Generic.Stack<double> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            string[] opAStringS(string[] i, out string[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAStringSResult> opAStringSAsync(string[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<string> opLStringS(global::System.Collections.Generic.List<string> i, out global::System.Collections.Generic.List<string> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLStringSResult> opLStringSAsync(global::System.Collections.Generic.List<string> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<string> opKStringS(global::System.Collections.Generic.LinkedList<string> i, out global::System.Collections.Generic.LinkedList<string> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKStringSResult> opKStringSAsync(global::System.Collections.Generic.LinkedList<string> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<string> opQStringS(global::System.Collections.Generic.Queue<string> i, out global::System.Collections.Generic.Queue<string> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQStringSResult> opQStringSAsync(global::System.Collections.Generic.Queue<string> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<string> opSStringS(global::System.Collections.Generic.Stack<string> i, out global::System.Collections.Generic.Stack<string> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSStringSResult> opSStringSAsync(global::System.Collections.Generic.Stack<string> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.Value?[] opAObjectS(global::Ice.Value?[] i, out global::Ice.Value?[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAObjectSResult> opAObjectSAsync(global::Ice.Value?[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<global::Ice.Value?> opLObjectS(global::System.Collections.Generic.List<global::Ice.Value?> i, out global::System.Collections.Generic.List<global::Ice.Value?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLObjectSResult> opLObjectSAsync(global::System.Collections.Generic.List<global::Ice.Value?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.ObjectPrx?[] opAObjectPrxS(global::Ice.ObjectPrx?[] i, out global::Ice.ObjectPrx?[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAObjectPrxSResult> opAObjectPrxSAsync(global::Ice.ObjectPrx?[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<global::Ice.ObjectPrx?> opLObjectPrxS(global::System.Collections.Generic.List<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.List<global::Ice.ObjectPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLObjectPrxSResult> opLObjectPrxSAsync(global::System.Collections.Generic.List<global::Ice.ObjectPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> opKObjectPrxS(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKObjectPrxSResult> opKObjectPrxSAsync(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> opQObjectPrxS(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQObjectPrxSResult> opQObjectPrxSAsync(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> opSObjectPrxS(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSObjectPrxSResult> opSObjectPrxSAsync(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            S[] opAStructS(S[] i, out S[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAStructSResult> opAStructSAsync(S[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<S> opLStructS(global::System.Collections.Generic.List<S> i, out global::System.Collections.Generic.List<S> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLStructSResult> opLStructSAsync(global::System.Collections.Generic.List<S> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<S> opKStructS(global::System.Collections.Generic.LinkedList<S> i, out global::System.Collections.Generic.LinkedList<S> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKStructSResult> opKStructSAsync(global::System.Collections.Generic.LinkedList<S> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<S> opQStructS(global::System.Collections.Generic.Queue<S> i, out global::System.Collections.Generic.Queue<S> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQStructSResult> opQStructSAsync(global::System.Collections.Generic.Queue<S> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<S> opSStructS(global::System.Collections.Generic.Stack<S> i, out global::System.Collections.Generic.Stack<S> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSStructSResult> opSStructSAsync(global::System.Collections.Generic.Stack<S> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            SD[] opAStructSD(SD[] i, out SD[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAStructSDResult> opAStructSDAsync(SD[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<SD> opLStructSD(global::System.Collections.Generic.List<SD> i, out global::System.Collections.Generic.List<SD> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLStructSDResult> opLStructSDAsync(global::System.Collections.Generic.List<SD> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<SD> opKStructSD(global::System.Collections.Generic.LinkedList<SD> i, out global::System.Collections.Generic.LinkedList<SD> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKStructSDResult> opKStructSDAsync(global::System.Collections.Generic.LinkedList<SD> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<SD> opQStructSD(global::System.Collections.Generic.Queue<SD> i, out global::System.Collections.Generic.Queue<SD> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQStructSDResult> opQStructSDAsync(global::System.Collections.Generic.Queue<SD> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<SD> opSStructSD(global::System.Collections.Generic.Stack<SD> i, out global::System.Collections.Generic.Stack<SD> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSStructSDResult> opSStructSDAsync(global::System.Collections.Generic.Stack<SD> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            CV?[] opACVS(CV?[] i, out CV?[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpACVSResult> opACVSAsync(CV?[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<CV?> opLCVS(global::System.Collections.Generic.List<CV?> i, out global::System.Collections.Generic.List<CV?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLCVSResult> opLCVSAsync(global::System.Collections.Generic.List<CV?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            CR?[] opACRS(CR?[] i, out CR?[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpACRSResult> opACRSAsync(CR?[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<CR?> opLCRS(global::System.Collections.Generic.List<CR?> i, out global::System.Collections.Generic.List<CR?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLCRSResult> opLCRSAsync(global::System.Collections.Generic.List<CR?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            En[] opAEnS(En[] i, out En[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAEnSResult> opAEnSAsync(En[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<En> opLEnS(global::System.Collections.Generic.List<En> i, out global::System.Collections.Generic.List<En> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLEnSResult> opLEnSAsync(global::System.Collections.Generic.List<En> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<En> opKEnS(global::System.Collections.Generic.LinkedList<En> i, out global::System.Collections.Generic.LinkedList<En> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKEnSResult> opKEnSAsync(global::System.Collections.Generic.LinkedList<En> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<En> opQEnS(global::System.Collections.Generic.Queue<En> i, out global::System.Collections.Generic.Queue<En> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQEnSResult> opQEnSAsync(global::System.Collections.Generic.Queue<En> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<En> opSEnS(global::System.Collections.Generic.Stack<En> i, out global::System.Collections.Generic.Stack<En> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSEnSResult> opSEnSAsync(global::System.Collections.Generic.Stack<En> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            IPrx?[] opAIPrxS(IPrx?[] i, out IPrx?[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpAIPrxSResult> opAIPrxSAsync(IPrx?[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.List<IPrx?> opLIPrxS(global::System.Collections.Generic.List<IPrx?> i, out global::System.Collections.Generic.List<IPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpLIPrxSResult> opLIPrxSAsync(global::System.Collections.Generic.List<IPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.LinkedList<IPrx?> opKIPrxS(global::System.Collections.Generic.LinkedList<IPrx?> i, out global::System.Collections.Generic.LinkedList<IPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpKIPrxSResult> opKIPrxSAsync(global::System.Collections.Generic.LinkedList<IPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Queue<IPrx?> opQIPrxS(global::System.Collections.Generic.Queue<IPrx?> i, out global::System.Collections.Generic.Queue<IPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpQIPrxSResult> opQIPrxSAsync(global::System.Collections.Generic.Queue<IPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Stack<IPrx?> opSIPrxS(global::System.Collections.Generic.Stack<IPrx?> i, out global::System.Collections.Generic.Stack<IPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpSIPrxSResult> opSIPrxSAsync(global::System.Collections.Generic.Stack<IPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.seqMapping.Custom<int> opCustomIntS(global::Ice.seqMapping.Custom<int> i, out global::Ice.seqMapping.Custom<int> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpCustomIntSResult> opCustomIntSAsync(global::Ice.seqMapping.Custom<int> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.seqMapping.Custom<CV?> opCustomCVS(global::Ice.seqMapping.Custom<CV?> i, out global::Ice.seqMapping.Custom<CV?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpCustomCVSResult> opCustomCVSAsync(global::Ice.seqMapping.Custom<CV?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> opCustomIntSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> i, out global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpCustomIntSSResult> opCustomIntSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> opCustomCVSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> i, out global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpCustomCVSSResult> opCustomCVSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Ice.seqMapping
{
    namespace Test
    {
        public sealed class AByteSHelper
        {
            public static void write(Ice.OutputStream ostr, byte[] v)
            {
                ostr.writeByteSeq(v);
            }

            public static byte[] read(Ice.InputStream istr)
            {
                byte[] v;
                v = istr.readByteSeq();
                return v;
            }
        }

        public sealed class LByteSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<byte> v)
            {
                ostr.writeByteSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.List<byte> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<byte> v;
                istr.readByteSeq(out v);
                return v;
            }
        }

        public sealed class KByteSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<byte> v)
            {
                ostr.writeByteSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.LinkedList<byte> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<byte> v;
                istr.readByteSeq(out v);
                return v;
            }
        }

        public sealed class QByteSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Queue<byte> v)
            {
                ostr.writeByteSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Queue<byte> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<byte> v;
                istr.readByteSeq(out v);
                return v;
            }
        }

        public sealed class SByteSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Stack<byte> v)
            {
                ostr.writeByteSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Stack<byte> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<byte> v;
                istr.readByteSeq(out v);
                return v;
            }
        }

        public sealed class CByteSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<byte> v)
            {
                ostr.writeByteSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::Ice.seqMapping.Custom<byte> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<byte> v;
                {
                    v = new global::Ice.seqMapping.Custom<byte>();
                    int szx = istr.readSize();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(istr.readByte());
                    }
                }
                return v;
            }
        }

        public sealed class ABoolSHelper
        {
            public static void write(Ice.OutputStream ostr, bool[] v)
            {
                ostr.writeBoolSeq(v);
            }

            public static bool[] read(Ice.InputStream istr)
            {
                bool[] v;
                v = istr.readBoolSeq();
                return v;
            }
        }

        public sealed class LBoolSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<bool> v)
            {
                ostr.writeBoolSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.List<bool> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<bool> v;
                istr.readBoolSeq(out v);
                return v;
            }
        }

        public sealed class KBoolSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<bool> v)
            {
                ostr.writeBoolSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.LinkedList<bool> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<bool> v;
                istr.readBoolSeq(out v);
                return v;
            }
        }

        public sealed class QBoolSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Queue<bool> v)
            {
                ostr.writeBoolSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Queue<bool> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<bool> v;
                istr.readBoolSeq(out v);
                return v;
            }
        }

        public sealed class SBoolSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Stack<bool> v)
            {
                ostr.writeBoolSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Stack<bool> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<bool> v;
                istr.readBoolSeq(out v);
                return v;
            }
        }

        public sealed class CBoolSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<bool> v)
            {
                ostr.writeBoolSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::Ice.seqMapping.Custom<bool> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<bool> v;
                {
                    v = new global::Ice.seqMapping.Custom<bool>();
                    int szx = istr.readSize();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(istr.readBool());
                    }
                }
                return v;
            }
        }

        public sealed class AShortSHelper
        {
            public static void write(Ice.OutputStream ostr, short[] v)
            {
                ostr.writeShortSeq(v);
            }

            public static short[] read(Ice.InputStream istr)
            {
                short[] v;
                v = istr.readShortSeq();
                return v;
            }
        }

        public sealed class LShortSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<short> v)
            {
                ostr.writeShortSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.List<short> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<short> v;
                istr.readShortSeq(out v);
                return v;
            }
        }

        public sealed class KShortSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<short> v)
            {
                ostr.writeShortSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.LinkedList<short> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<short> v;
                istr.readShortSeq(out v);
                return v;
            }
        }

        public sealed class QShortSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Queue<short> v)
            {
                ostr.writeShortSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Queue<short> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<short> v;
                istr.readShortSeq(out v);
                return v;
            }
        }

        public sealed class SShortSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Stack<short> v)
            {
                ostr.writeShortSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Stack<short> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<short> v;
                istr.readShortSeq(out v);
                return v;
            }
        }

        public sealed class CShortSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<short> v)
            {
                ostr.writeShortSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::Ice.seqMapping.Custom<short> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<short> v;
                {
                    v = new global::Ice.seqMapping.Custom<short>();
                    int szx = istr.readSize();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(istr.readShort());
                    }
                }
                return v;
            }
        }

        public sealed class AIntSHelper
        {
            public static void write(Ice.OutputStream ostr, int[] v)
            {
                ostr.writeIntSeq(v);
            }

            public static int[] read(Ice.InputStream istr)
            {
                int[] v;
                v = istr.readIntSeq();
                return v;
            }
        }

        public sealed class LIntSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<int> v)
            {
                ostr.writeIntSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.List<int> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<int> v;
                istr.readIntSeq(out v);
                return v;
            }
        }

        public sealed class KIntSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<int> v)
            {
                ostr.writeIntSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.LinkedList<int> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<int> v;
                istr.readIntSeq(out v);
                return v;
            }
        }

        public sealed class QIntSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Queue<int> v)
            {
                ostr.writeIntSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Queue<int> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<int> v;
                istr.readIntSeq(out v);
                return v;
            }
        }

        public sealed class SIntSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Stack<int> v)
            {
                ostr.writeIntSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Stack<int> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<int> v;
                istr.readIntSeq(out v);
                return v;
            }
        }

        public sealed class CIntSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<int> v)
            {
                ostr.writeIntSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::Ice.seqMapping.Custom<int> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<int> v;
                {
                    v = new global::Ice.seqMapping.Custom<int>();
                    int szx = istr.readSize();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(istr.readInt());
                    }
                }
                return v;
            }
        }

        public sealed class ALongSHelper
        {
            public static void write(Ice.OutputStream ostr, long[] v)
            {
                ostr.writeLongSeq(v);
            }

            public static long[] read(Ice.InputStream istr)
            {
                long[] v;
                v = istr.readLongSeq();
                return v;
            }
        }

        public sealed class LLongSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<long> v)
            {
                ostr.writeLongSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.List<long> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<long> v;
                istr.readLongSeq(out v);
                return v;
            }
        }

        public sealed class KLongSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<long> v)
            {
                ostr.writeLongSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.LinkedList<long> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<long> v;
                istr.readLongSeq(out v);
                return v;
            }
        }

        public sealed class QLongSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Queue<long> v)
            {
                ostr.writeLongSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Queue<long> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<long> v;
                istr.readLongSeq(out v);
                return v;
            }
        }

        public sealed class SLongSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Stack<long> v)
            {
                ostr.writeLongSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Stack<long> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<long> v;
                istr.readLongSeq(out v);
                return v;
            }
        }

        public sealed class CLongSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<long> v)
            {
                ostr.writeLongSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::Ice.seqMapping.Custom<long> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<long> v;
                {
                    v = new global::Ice.seqMapping.Custom<long>();
                    int szx = istr.readSize();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(istr.readLong());
                    }
                }
                return v;
            }
        }

        public sealed class AFloatSHelper
        {
            public static void write(Ice.OutputStream ostr, float[] v)
            {
                ostr.writeFloatSeq(v);
            }

            public static float[] read(Ice.InputStream istr)
            {
                float[] v;
                v = istr.readFloatSeq();
                return v;
            }
        }

        public sealed class LFloatSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<float> v)
            {
                ostr.writeFloatSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.List<float> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<float> v;
                istr.readFloatSeq(out v);
                return v;
            }
        }

        public sealed class KFloatSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<float> v)
            {
                ostr.writeFloatSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.LinkedList<float> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<float> v;
                istr.readFloatSeq(out v);
                return v;
            }
        }

        public sealed class QFloatSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Queue<float> v)
            {
                ostr.writeFloatSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Queue<float> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<float> v;
                istr.readFloatSeq(out v);
                return v;
            }
        }

        public sealed class SFloatSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Stack<float> v)
            {
                ostr.writeFloatSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Stack<float> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<float> v;
                istr.readFloatSeq(out v);
                return v;
            }
        }

        public sealed class CFloatSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<float> v)
            {
                ostr.writeFloatSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::Ice.seqMapping.Custom<float> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<float> v;
                {
                    v = new global::Ice.seqMapping.Custom<float>();
                    int szx = istr.readSize();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(istr.readFloat());
                    }
                }
                return v;
            }
        }

        public sealed class ADoubleSHelper
        {
            public static void write(Ice.OutputStream ostr, double[] v)
            {
                ostr.writeDoubleSeq(v);
            }

            public static double[] read(Ice.InputStream istr)
            {
                double[] v;
                v = istr.readDoubleSeq();
                return v;
            }
        }

        public sealed class LDoubleSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<double> v)
            {
                ostr.writeDoubleSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.List<double> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<double> v;
                istr.readDoubleSeq(out v);
                return v;
            }
        }

        public sealed class KDoubleSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<double> v)
            {
                ostr.writeDoubleSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.LinkedList<double> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<double> v;
                istr.readDoubleSeq(out v);
                return v;
            }
        }

        public sealed class QDoubleSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Queue<double> v)
            {
                ostr.writeDoubleSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Queue<double> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<double> v;
                istr.readDoubleSeq(out v);
                return v;
            }
        }

        public sealed class SDoubleSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Stack<double> v)
            {
                ostr.writeDoubleSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Stack<double> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<double> v;
                istr.readDoubleSeq(out v);
                return v;
            }
        }

        public sealed class CDoubleSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<double> v)
            {
                ostr.writeDoubleSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::Ice.seqMapping.Custom<double> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<double> v;
                {
                    v = new global::Ice.seqMapping.Custom<double>();
                    int szx = istr.readSize();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(istr.readDouble());
                    }
                }
                return v;
            }
        }

        public sealed class AStringSHelper
        {
            public static void write(Ice.OutputStream ostr, string[] v)
            {
                ostr.writeStringSeq(v);
            }

            public static string[] read(Ice.InputStream istr)
            {
                string[] v;
                v = istr.readStringSeq();
                return v;
            }
        }

        public sealed class LStringSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<string> v)
            {
                ostr.writeStringSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.List<string> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<string> v;
                istr.readStringSeq(out v);
                return v;
            }
        }

        public sealed class KStringSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<string> v)
            {
                ostr.writeStringSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.LinkedList<string> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<string> v;
                istr.readStringSeq(out v);
                return v;
            }
        }

        public sealed class QStringSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Queue<string> v)
            {
                ostr.writeStringSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Queue<string> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<string> v;
                istr.readStringSeq(out v);
                return v;
            }
        }

        public sealed class SStringSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Stack<string> v)
            {
                ostr.writeStringSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.Stack<string> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<string> v;
                istr.readStringSeq(out v);
                return v;
            }
        }

        public sealed class CStringSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<string> v)
            {
                ostr.writeStringSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::Ice.seqMapping.Custom<string> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<string> v;
                {
                    v = new global::Ice.seqMapping.Custom<string>();
                    int szx = istr.readSize();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(istr.readString());
                    }
                }
                return v;
            }
        }

        public sealed class AObjectSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.Value?[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for (int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static global::Ice.Value?[] read(Ice.InputStream istr)
            {
                global::Ice.Value?[] v;
                int v_lenx = istr.readAndCheckSeqSize(1);
                v = new Ice.Value?[v_lenx];
                for (int ix = 0; ix < v_lenx; ++ix)
                {
                    istr.readValue(Ice.Internal.Patcher.arrayReadValue<Ice.Value>(v, ix));
                }
                return v;
            }
        }

        public sealed class LObjectSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<global::Ice.Value?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for (int ix = 0; ix < v.Count; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.List<global::Ice.Value?> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<global::Ice.Value?> v;
                int v_lenx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.List<Ice.Value?>(v_lenx);
                for (int ix = 0; ix < v_lenx; ++ix)
                {
                    istr.readValue(Ice.Internal.Patcher.listReadValue<Ice.Value>(v, ix));
                }
                return v;
            }
        }

        public sealed class CObjectSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<global::Ice.Value?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<global::Ice.Value?> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        ostr.writeValue(e.Current);
                    }
                }
            }

            public static global::Ice.seqMapping.Custom<global::Ice.Value?> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<global::Ice.Value?> v;
                int v_lenx = istr.readAndCheckSeqSize(1);
                v = new global::Ice.seqMapping.Custom<Ice.Value?>();
                for (int ix = 0; ix < v_lenx; ++ix)
                {
                    istr.readValue(Ice.Internal.Patcher.customSeqReadValue<Ice.Value>(v, ix));
                }
                return v;
            }
        }

        public class CObjectS_Tester
        {
            CObjectS_Tester()
            {
                global::Ice.seqMapping.Custom<global::Ice.Value?> test = new global::Ice.seqMapping.Custom<global::Ice.Value?>();
                test[0] = null;
            }
        }

        public sealed class AObjectPrxSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.ObjectPrx?[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for (int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeProxy(v[ix]);
                    }
                }
            }

            public static global::Ice.ObjectPrx?[] read(Ice.InputStream istr)
            {
                global::Ice.ObjectPrx?[] v;
                int v_lenx = istr.readAndCheckSeqSize(2);
                v = new Ice.ObjectPrx?[v_lenx];
                for (int ix = 0; ix < v_lenx; ++ix)
                {
                    v[ix] = istr.readProxy();
                }
                return v;
            }
        }

        public sealed class LObjectPrxSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<global::Ice.ObjectPrx?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for (int ix = 0; ix < v.Count; ++ix)
                    {
                        ostr.writeProxy(v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.List<global::Ice.ObjectPrx?> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<global::Ice.ObjectPrx?> v;
                int v_lenx = istr.readAndCheckSeqSize(2);
                v = new global::System.Collections.Generic.List<Ice.ObjectPrx?>(v_lenx);
                for (int ix = 0; ix < v_lenx; ++ix)
                {
                    Ice.ObjectPrx? val = istr.readProxy();
                    v.Add(val);
                }
                return v;
            }
        }

        public sealed class KObjectPrxSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<global::Ice.ObjectPrx?> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        ostr.writeProxy(e.Current);
                    }
                }
            }

            public static global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> v;
                int v_lenx = istr.readAndCheckSeqSize(2);
                v = new global::System.Collections.Generic.LinkedList<Ice.ObjectPrx?>();
                for (int ix = 0; ix < v_lenx; ++ix)
                {
                    Ice.ObjectPrx? val = istr.readProxy();
                    v.AddLast(val);
                }
                return v;
            }
        }

        public sealed class QObjectPrxSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<global::Ice.ObjectPrx?> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        ostr.writeProxy(e.Current);
                    }
                }
            }

            public static global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> v;
                int v_lenx = istr.readAndCheckSeqSize(2);
                v = new global::System.Collections.Generic.Queue<Ice.ObjectPrx?>(v_lenx);
                for (int ix = 0; ix < v_lenx; ++ix)
                {
                    Ice.ObjectPrx? val = istr.readProxy();
                    v.Enqueue(val);
                }
                return v;
            }
        }

        public sealed class SObjectPrxSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    Ice.ObjectPrx?[] v_tmp = v.ToArray();
                    for (int ix = 0; ix < v_tmp.Length; ++ix)
                    {
                        ostr.writeProxy(v_tmp[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> v;
                int v_lenx = istr.readAndCheckSeqSize(2);
                Ice.ObjectPrx?[] v_tmp = new Ice.ObjectPrx?[v_lenx];
                for (int ix = 0; ix < v_lenx; ++ix)
                {
                    v_tmp[ix] = istr.readProxy();
                }
                global::System.Array.Reverse(v_tmp);
                v = new global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?>(v_tmp);
                return v;
            }
        }

        public sealed class CObjectPrxSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<global::Ice.ObjectPrx?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<global::Ice.ObjectPrx?> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        ostr.writeProxy(e.Current);
                    }
                }
            }

            public static global::Ice.seqMapping.Custom<global::Ice.ObjectPrx?> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<global::Ice.ObjectPrx?> v;
                int v_lenx = istr.readAndCheckSeqSize(2);
                v = new global::Ice.seqMapping.Custom<Ice.ObjectPrx?>();
                for (int ix = 0; ix < v_lenx; ++ix)
                {
                    Ice.ObjectPrx? val = istr.readProxy();
                    v.Add(val);
                }
                return v;
            }
        }

        public sealed class AStructSHelper
        {
            public static void write(Ice.OutputStream ostr, S[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        v[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static S[] read(Ice.InputStream istr)
            {
                S[] v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new S[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new S(istr);
                    }
                }
                return v;
            }
        }

        public sealed class LStructSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<S> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        v[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.List<S> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<S> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::System.Collections.Generic.List<S>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        S val = new S(istr);
                        v.Add(val);
                    }
                }
                return v;
            }
        }

        public sealed class KStructSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<S> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<S> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        e.Current.ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.LinkedList<S> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<S> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::System.Collections.Generic.LinkedList<S>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        S val = new S(istr);
                        v.AddLast(val);
                    }
                }
                return v;
            }
        }

        public sealed class QStructSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Queue<S> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<S> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        e.Current.ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Queue<S> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<S> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::System.Collections.Generic.Queue<S>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        S val = new S(istr);
                        v.Enqueue(val);
                    }
                }
                return v;
            }
        }

        public sealed class SStructSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Stack<S> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    S[] v_tmp = v.ToArray();
                    for(int ix = 0; ix < v_tmp.Length; ++ix)
                    {
                        v_tmp[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Stack<S> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<S> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    S[] v_tmp = new S[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v_tmp[ix] = new S(istr);
                    }
                    global::System.Array.Reverse(v_tmp);
                    v = new global::System.Collections.Generic.Stack<S>(v_tmp);
                }
                return v;
            }
        }

        public sealed class CStructSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<S> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<S> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        e.Current.ice_writeMembers(ostr);
                    }
                }
            }

            public static global::Ice.seqMapping.Custom<S> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<S> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::Ice.seqMapping.Custom<S>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        S val = new S(istr);
                        v.Add(val);
                    }
                }
                return v;
            }
        }

        public sealed class AStructSDHelper
        {
            public static void write(Ice.OutputStream ostr, SD[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        v[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static SD[] read(Ice.InputStream istr)
            {
                SD[] v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new SD[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new SD(istr);
                    }
                }
                return v;
            }
        }

        public sealed class LStructSDHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<SD> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        v[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.List<SD> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<SD> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::System.Collections.Generic.List<SD>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        SD val = new SD(istr);
                        v.Add(val);
                    }
                }
                return v;
            }
        }

        public sealed class KStructSDHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<SD> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<SD> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        (e.Current == null ? new SD() : e.Current).ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.LinkedList<SD> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<SD> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::System.Collections.Generic.LinkedList<SD>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        SD val = new SD(istr);
                        v.AddLast(val);
                    }
                }
                return v;
            }
        }

        public sealed class QStructSDHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Queue<SD> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<SD> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        (e.Current == null ? new SD() : e.Current).ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Queue<SD> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<SD> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::System.Collections.Generic.Queue<SD>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        SD val = new SD(istr);
                        v.Enqueue(val);
                    }
                }
                return v;
            }
        }

        public sealed class SStructSDHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Stack<SD> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    SD[] v_tmp = v.ToArray();
                    for(int ix = 0; ix < v_tmp.Length; ++ix)
                    {
                        v_tmp[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Stack<SD> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<SD> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    SD[] v_tmp = new SD[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v_tmp[ix] = new SD(istr);
                    }
                    global::System.Array.Reverse(v_tmp);
                    v = new global::System.Collections.Generic.Stack<SD>(v_tmp);
                }
                return v;
            }
        }

        public sealed class CStructSDHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<SD> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<SD> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        (e.Current == null ? new SD() : e.Current).ice_writeMembers(ostr);
                    }
                }
            }

            public static global::Ice.seqMapping.Custom<SD> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<SD> v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::Ice.seqMapping.Custom<SD>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        SD val = new SD(istr);
                        v.Add(val);
                    }
                }
                return v;
            }
        }

        public sealed class ACVSHelper
        {
            public static void write(Ice.OutputStream ostr, CV?[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static CV?[] read(Ice.InputStream istr)
            {
                CV?[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new CV?[szx];
                    for (int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(Ice.Internal.Patcher.arrayReadValue<CV>(v, ix));
                    }
                }
                return v;
            }
        }

        public sealed class LCVSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<CV?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.List<CV?> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<CV?> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.List<CV?>(szx);
                    for (int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(Ice.Internal.Patcher.listReadValue<CV>(v, ix));
                    }
                }
                return v;
            }
        }

        public sealed class IPrxHelper : Ice.ObjectPrxHelperBase, IPrx
        {
            public static IPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new IPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static IPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new IPrxHelper(b) : null;

            public static IPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static IPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new IPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static IPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::I"
            };

            public static string ice_staticId() => "::Test::I";

            public static void write(Ice.OutputStream ostr, IPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static IPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new IPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new IPrxHelper(reference);

            private IPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private IPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        public sealed class AIPrxSHelper
        {
            public static void write(Ice.OutputStream ostr, IPrx?[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        IPrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static IPrx?[] read(Ice.InputStream istr)
            {
                IPrx?[] v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new IPrx?[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = IPrxHelper.read(istr);
                    }
                }
                return v;
            }
        }

        public sealed class LIPrxSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<IPrx?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        IPrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.List<IPrx?> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<IPrx?> v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new global::System.Collections.Generic.List<IPrx?>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(IPrxHelper.read(istr));
                    }
                }
                return v;
            }
        }

        public sealed class KIPrxSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<IPrx?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<IPrx?> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        IPrxHelper.write(ostr, e.Current);
                    }
                }
            }

            public static global::System.Collections.Generic.LinkedList<IPrx?> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<IPrx?> v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new global::System.Collections.Generic.LinkedList<IPrx?>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.AddLast(IPrxHelper.read(istr));
                    }
                }
                return v;
            }
        }

        public sealed class QIPrxSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Queue<IPrx?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<IPrx?> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        IPrxHelper.write(ostr, e.Current);
                    }
                }
            }

            public static global::System.Collections.Generic.Queue<IPrx?> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<IPrx?> v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new global::System.Collections.Generic.Queue<IPrx?>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Enqueue(IPrxHelper.read(istr));
                    }
                }
                return v;
            }
        }

        public sealed class SIPrxSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Stack<IPrx?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    IPrx?[] v_tmp = v.ToArray();
                    for(int ix = 0; ix < v_tmp.Length; ++ix)
                    {
                        IPrxHelper.write(ostr, v_tmp[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.Stack<IPrx?> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<IPrx?> v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    IPrx?[] v_tmp = new IPrx?[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v_tmp[ix] = IPrxHelper.read(istr);
                    }
                    global::System.Array.Reverse(v_tmp);
                    v = new global::System.Collections.Generic.Stack<IPrx?>(v_tmp);
                }
                return v;
            }
        }

        public sealed class CIPrxSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<IPrx?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<IPrx?> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        IPrxHelper.write(ostr, e.Current);
                    }
                }
            }

            public static global::Ice.seqMapping.Custom<IPrx?> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<IPrx?> v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new global::Ice.seqMapping.Custom<IPrx?>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(IPrxHelper.read(istr));
                    }
                }
                return v;
            }
        }

        public sealed class ACRSHelper
        {
            public static void write(Ice.OutputStream ostr, CR?[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static CR?[] read(Ice.InputStream istr)
            {
                CR?[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new CR?[szx];
                    for (int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(Ice.Internal.Patcher.arrayReadValue<CR>(v, ix));
                    }
                }
                return v;
            }
        }

        public sealed class LCRSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<CR?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static global::System.Collections.Generic.List<CR?> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<CR?> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.List<CR?>(szx);
                    for (int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(Ice.Internal.Patcher.listReadValue<CR>(v, ix));
                    }
                }
                return v;
            }
        }

        public sealed class CCRSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<CR?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<CR?> e = v.GetEnumerator();
                    while (e.MoveNext())
                    {
                        ostr.writeValue(e.Current);
                    }
                }
            }

            public static global::Ice.seqMapping.Custom<CR?> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<CR?> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::Ice.seqMapping.Custom<CR?>();
                    for (int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(Ice.Internal.Patcher.customSeqReadValue<CR>(v, ix));
                    }
                }
                return v;
            }
        }

        public class CCRS_Tester
        {
            CCRS_Tester()
            {
                global::Ice.seqMapping.Custom<CR?> test = new global::Ice.seqMapping.Custom<CR?>();
                test[0] = null;
            }
        }

        public sealed class AEnSHelper
        {
            public static void write(Ice.OutputStream ostr, En[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeEnum((int)v[ix], 2);
                    }
                }
            }

            public static En[] read(Ice.InputStream istr)
            {
                En[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new En[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = (En)istr.readEnum(2);
                    }
                }
                return v;
            }
        }

        public sealed class LEnSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<En> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        ostr.writeEnum((int)v[ix], 2);
                    }
                }
            }

            public static global::System.Collections.Generic.List<En> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<En> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.List<En>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add((En)istr.readEnum(2));
                    }
                }
                return v;
            }
        }

        public sealed class KEnSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.LinkedList<En> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<En> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        ostr.writeEnum((int)e.Current, 2);
                    }
                }
            }

            public static global::System.Collections.Generic.LinkedList<En> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.LinkedList<En> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.LinkedList<En>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.AddLast((En)istr.readEnum(2));
                    }
                }
                return v;
            }
        }

        public sealed class QEnSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Queue<En> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<En> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        ostr.writeEnum((int)e.Current, 2);
                    }
                }
            }

            public static global::System.Collections.Generic.Queue<En> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Queue<En> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::System.Collections.Generic.Queue<En>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Enqueue((En)istr.readEnum(2));
                    }
                }
                return v;
            }
        }

        public sealed class SEnSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Stack<En> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    En[] v_tmp = v.ToArray();
                    for(int ix = 0; ix < v_tmp.Length; ++ix)
                    {
                        ostr.writeEnum((int)v_tmp[ix], 2);
                    }
                }
            }

            public static global::System.Collections.Generic.Stack<En> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.Stack<En> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    En[] v_tmp = new En[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v_tmp[ix] = (En)istr.readEnum(2);
                    }
                    global::System.Array.Reverse(v_tmp);
                    v = new global::System.Collections.Generic.Stack<En>(v_tmp);
                }
                return v;
            }
        }

        public sealed class CEnSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<En> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<En> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        ostr.writeEnum((int)e.Current, 2);
                    }
                }
            }

            public static global::Ice.seqMapping.Custom<En> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<En> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::Ice.seqMapping.Custom<En>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add((En)istr.readEnum(2));
                    }
                }
                return v;
            }
        }

        public sealed class CustomIntSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<int> v)
            {
                ostr.writeIntSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::Ice.seqMapping.Custom<int> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<int> v;
                {
                    v = new global::Ice.seqMapping.Custom<int>();
                    int szx = istr.readSize();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(istr.readInt());
                    }
                }
                return v;
            }
        }

        public sealed class CustomCVSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<CV?> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<CV?> e = v.GetEnumerator();
                    while (e.MoveNext())
                    {
                        ostr.writeValue(e.Current);
                    }
                }
            }

            public static global::Ice.seqMapping.Custom<CV?> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<CV?> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::Ice.seqMapping.Custom<CV?>();
                    for (int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(Ice.Internal.Patcher.customSeqReadValue<CV>(v, ix));
                    }
                }
                return v;
            }
        }

        public class CustomCVS_Tester
        {
            CustomCVS_Tester()
            {
                global::Ice.seqMapping.Custom<CV?> test = new global::Ice.seqMapping.Custom<CV?>();
                test[0] = null;
            }
        }

        public sealed class CustomIntSSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<global::Ice.seqMapping.Custom<int>> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        CustomIntSHelper.write(ostr, e.Current);
                    }
                }
            }

            public static global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(CustomIntSHelper.read(istr));
                    }
                }
                return v;
            }
        }

        public sealed class CustomCVSSHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    global::System.Collections.Generic.IEnumerator<global::Ice.seqMapping.Custom<CV?>> e = v.GetEnumerator();
                    while(e.MoveNext())
                    {
                        CustomCVSHelper.write(ostr, e.Current);
                    }
                }
            }

            public static global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> read(Ice.InputStream istr)
            {
                global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>>();
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v.Add(CustomCVSHelper.read(istr));
                    }
                }
                return v;
            }
        }

        public sealed class MyClassPrxHelper : Ice.ObjectPrxHelperBase, MyClassPrx
        {
            public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public byte[] opAByteS(byte[] i, out byte[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opAByteSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<byte> opLByteS(global::System.Collections.Generic.List<byte> i, out global::System.Collections.Generic.List<byte> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLByteSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.LinkedList<byte> opKByteS(global::System.Collections.Generic.LinkedList<byte> i, out global::System.Collections.Generic.LinkedList<byte> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opKByteSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Queue<byte> opQByteS(global::System.Collections.Generic.Queue<byte> i, out global::System.Collections.Generic.Queue<byte> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opQByteSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Stack<byte> opSByteS(global::System.Collections.Generic.Stack<byte> i, out global::System.Collections.Generic.Stack<byte> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSByteSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public bool[] opABoolS(bool[] i, out bool[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opABoolSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<bool> opLBoolS(global::System.Collections.Generic.List<bool> i, out global::System.Collections.Generic.List<bool> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLBoolSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.LinkedList<bool> opKBoolS(global::System.Collections.Generic.LinkedList<bool> i, out global::System.Collections.Generic.LinkedList<bool> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opKBoolSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Queue<bool> opQBoolS(global::System.Collections.Generic.Queue<bool> i, out global::System.Collections.Generic.Queue<bool> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opQBoolSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Stack<bool> opSBoolS(global::System.Collections.Generic.Stack<bool> i, out global::System.Collections.Generic.Stack<bool> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSBoolSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public short[] opAShortS(short[] i, out short[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opAShortSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<short> opLShortS(global::System.Collections.Generic.List<short> i, out global::System.Collections.Generic.List<short> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLShortSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.LinkedList<short> opKShortS(global::System.Collections.Generic.LinkedList<short> i, out global::System.Collections.Generic.LinkedList<short> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opKShortSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Queue<short> opQShortS(global::System.Collections.Generic.Queue<short> i, out global::System.Collections.Generic.Queue<short> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opQShortSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Stack<short> opSShortS(global::System.Collections.Generic.Stack<short> i, out global::System.Collections.Generic.Stack<short> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSShortSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public int[] opAIntS(int[] i, out int[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opAIntSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<int> opLIntS(global::System.Collections.Generic.List<int> i, out global::System.Collections.Generic.List<int> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLIntSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.LinkedList<int> opKIntS(global::System.Collections.Generic.LinkedList<int> i, out global::System.Collections.Generic.LinkedList<int> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opKIntSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Queue<int> opQIntS(global::System.Collections.Generic.Queue<int> i, out global::System.Collections.Generic.Queue<int> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opQIntSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Stack<int> opSIntS(global::System.Collections.Generic.Stack<int> i, out global::System.Collections.Generic.Stack<int> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSIntSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public long[] opALongS(long[] i, out long[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opALongSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<long> opLLongS(global::System.Collections.Generic.List<long> i, out global::System.Collections.Generic.List<long> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLLongSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.LinkedList<long> opKLongS(global::System.Collections.Generic.LinkedList<long> i, out global::System.Collections.Generic.LinkedList<long> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opKLongSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Queue<long> opQLongS(global::System.Collections.Generic.Queue<long> i, out global::System.Collections.Generic.Queue<long> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opQLongSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Stack<long> opSLongS(global::System.Collections.Generic.Stack<long> i, out global::System.Collections.Generic.Stack<long> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSLongSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public float[] opAFloatS(float[] i, out float[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opAFloatSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<float> opLFloatS(global::System.Collections.Generic.List<float> i, out global::System.Collections.Generic.List<float> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLFloatSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.LinkedList<float> opKFloatS(global::System.Collections.Generic.LinkedList<float> i, out global::System.Collections.Generic.LinkedList<float> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opKFloatSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Queue<float> opQFloatS(global::System.Collections.Generic.Queue<float> i, out global::System.Collections.Generic.Queue<float> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opQFloatSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Stack<float> opSFloatS(global::System.Collections.Generic.Stack<float> i, out global::System.Collections.Generic.Stack<float> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSFloatSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public double[] opADoubleS(double[] i, out double[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opADoubleSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<double> opLDoubleS(global::System.Collections.Generic.List<double> i, out global::System.Collections.Generic.List<double> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLDoubleSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.LinkedList<double> opKDoubleS(global::System.Collections.Generic.LinkedList<double> i, out global::System.Collections.Generic.LinkedList<double> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opKDoubleSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Queue<double> opQDoubleS(global::System.Collections.Generic.Queue<double> i, out global::System.Collections.Generic.Queue<double> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opQDoubleSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Stack<double> opSDoubleS(global::System.Collections.Generic.Stack<double> i, out global::System.Collections.Generic.Stack<double> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSDoubleSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public string[] opAStringS(string[] i, out string[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opAStringSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<string> opLStringS(global::System.Collections.Generic.List<string> i, out global::System.Collections.Generic.List<string> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLStringSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.LinkedList<string> opKStringS(global::System.Collections.Generic.LinkedList<string> i, out global::System.Collections.Generic.LinkedList<string> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opKStringSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Queue<string> opQStringS(global::System.Collections.Generic.Queue<string> i, out global::System.Collections.Generic.Queue<string> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opQStringSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Stack<string> opSStringS(global::System.Collections.Generic.Stack<string> i, out global::System.Collections.Generic.Stack<string> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSStringSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.Value?[] opAObjectS(global::Ice.Value?[] i, out global::Ice.Value?[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opAObjectSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<global::Ice.Value?> opLObjectS(global::System.Collections.Generic.List<global::Ice.Value?> i, out global::System.Collections.Generic.List<global::Ice.Value?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLObjectSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.ObjectPrx?[] opAObjectPrxS(global::Ice.ObjectPrx?[] i, out global::Ice.ObjectPrx?[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opAObjectPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<global::Ice.ObjectPrx?> opLObjectPrxS(global::System.Collections.Generic.List<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.List<global::Ice.ObjectPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLObjectPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> opKObjectPrxS(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opKObjectPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> opQObjectPrxS(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opQObjectPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> opSObjectPrxS(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSObjectPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public S[] opAStructS(S[] i, out S[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opAStructSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<S> opLStructS(global::System.Collections.Generic.List<S> i, out global::System.Collections.Generic.List<S> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLStructSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.LinkedList<S> opKStructS(global::System.Collections.Generic.LinkedList<S> i, out global::System.Collections.Generic.LinkedList<S> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opKStructSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Queue<S> opQStructS(global::System.Collections.Generic.Queue<S> i, out global::System.Collections.Generic.Queue<S> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opQStructSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Stack<S> opSStructS(global::System.Collections.Generic.Stack<S> i, out global::System.Collections.Generic.Stack<S> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSStructSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public SD[] opAStructSD(SD[] i, out SD[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opAStructSDAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<SD> opLStructSD(global::System.Collections.Generic.List<SD> i, out global::System.Collections.Generic.List<SD> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLStructSDAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.LinkedList<SD> opKStructSD(global::System.Collections.Generic.LinkedList<SD> i, out global::System.Collections.Generic.LinkedList<SD> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opKStructSDAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Queue<SD> opQStructSD(global::System.Collections.Generic.Queue<SD> i, out global::System.Collections.Generic.Queue<SD> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opQStructSDAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Stack<SD> opSStructSD(global::System.Collections.Generic.Stack<SD> i, out global::System.Collections.Generic.Stack<SD> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSStructSDAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public CV?[] opACVS(CV?[] i, out CV?[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opACVSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<CV?> opLCVS(global::System.Collections.Generic.List<CV?> i, out global::System.Collections.Generic.List<CV?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLCVSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public CR?[] opACRS(CR?[] i, out CR?[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opACRSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<CR?> opLCRS(global::System.Collections.Generic.List<CR?> i, out global::System.Collections.Generic.List<CR?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLCRSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public En[] opAEnS(En[] i, out En[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opAEnSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<En> opLEnS(global::System.Collections.Generic.List<En> i, out global::System.Collections.Generic.List<En> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLEnSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.LinkedList<En> opKEnS(global::System.Collections.Generic.LinkedList<En> i, out global::System.Collections.Generic.LinkedList<En> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opKEnSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Queue<En> opQEnS(global::System.Collections.Generic.Queue<En> i, out global::System.Collections.Generic.Queue<En> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opQEnSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Stack<En> opSEnS(global::System.Collections.Generic.Stack<En> i, out global::System.Collections.Generic.Stack<En> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSEnSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public IPrx?[] opAIPrxS(IPrx?[] i, out IPrx?[] o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opAIPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.List<IPrx?> opLIPrxS(global::System.Collections.Generic.List<IPrx?> i, out global::System.Collections.Generic.List<IPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLIPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.LinkedList<IPrx?> opKIPrxS(global::System.Collections.Generic.LinkedList<IPrx?> i, out global::System.Collections.Generic.LinkedList<IPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opKIPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Queue<IPrx?> opQIPrxS(global::System.Collections.Generic.Queue<IPrx?> i, out global::System.Collections.Generic.Queue<IPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opQIPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Stack<IPrx?> opSIPrxS(global::System.Collections.Generic.Stack<IPrx?> i, out global::System.Collections.Generic.Stack<IPrx?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSIPrxSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.seqMapping.Custom<int> opCustomIntS(global::Ice.seqMapping.Custom<int> i, out global::Ice.seqMapping.Custom<int> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opCustomIntSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.seqMapping.Custom<CV?> opCustomCVS(global::Ice.seqMapping.Custom<CV?> i, out global::Ice.seqMapping.Custom<CV?> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opCustomCVSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> opCustomIntSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> i, out global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opCustomIntSSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> opCustomCVSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> i, out global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opCustomCVSSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAByteSResult> opAByteSAsync(byte[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAByteSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAByteSResult> _iceI_opAByteSAsync(byte[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAByteS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAByteSResult>(progress, cancel);
                _iceI_opAByteS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAByteS_name = "opAByteS";

            private void _iceI_opAByteS(byte[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAByteSResult>(completed);
                outAsync.invoke(
                    _opAByteS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        AByteSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpAByteSResult();
                        ret.o = AByteSHelper.read(istr);
                        ret.returnValue = AByteSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLByteSResult> opLByteSAsync(global::System.Collections.Generic.List<byte> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLByteSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLByteSResult> _iceI_opLByteSAsync(global::System.Collections.Generic.List<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLByteS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLByteSResult>(progress, cancel);
                _iceI_opLByteS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLByteS_name = "opLByteS";

            private void _iceI_opLByteS(global::System.Collections.Generic.List<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLByteSResult>(completed);
                outAsync.invoke(
                    _opLByteS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LByteSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLByteSResult();
                        ret.o = LByteSHelper.read(istr);
                        ret.returnValue = LByteSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKByteSResult> opKByteSAsync(global::System.Collections.Generic.LinkedList<byte> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKByteSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKByteSResult> _iceI_opKByteSAsync(global::System.Collections.Generic.LinkedList<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKByteS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKByteSResult>(progress, cancel);
                _iceI_opKByteS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKByteS_name = "opKByteS";

            private void _iceI_opKByteS(global::System.Collections.Generic.LinkedList<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKByteSResult>(completed);
                outAsync.invoke(
                    _opKByteS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        KByteSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpKByteSResult();
                        ret.o = KByteSHelper.read(istr);
                        ret.returnValue = KByteSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQByteSResult> opQByteSAsync(global::System.Collections.Generic.Queue<byte> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQByteSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQByteSResult> _iceI_opQByteSAsync(global::System.Collections.Generic.Queue<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQByteS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQByteSResult>(progress, cancel);
                _iceI_opQByteS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQByteS_name = "opQByteS";

            private void _iceI_opQByteS(global::System.Collections.Generic.Queue<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQByteSResult>(completed);
                outAsync.invoke(
                    _opQByteS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        QByteSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpQByteSResult();
                        ret.o = QByteSHelper.read(istr);
                        ret.returnValue = QByteSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSByteSResult> opSByteSAsync(global::System.Collections.Generic.Stack<byte> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSByteSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSByteSResult> _iceI_opSByteSAsync(global::System.Collections.Generic.Stack<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSByteS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSByteSResult>(progress, cancel);
                _iceI_opSByteS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSByteS_name = "opSByteS";

            private void _iceI_opSByteS(global::System.Collections.Generic.Stack<byte> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSByteSResult>(completed);
                outAsync.invoke(
                    _opSByteS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        SByteSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpSByteSResult();
                        ret.o = SByteSHelper.read(istr);
                        ret.returnValue = SByteSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpABoolSResult> opABoolSAsync(bool[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opABoolSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpABoolSResult> _iceI_opABoolSAsync(bool[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opABoolS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpABoolSResult>(progress, cancel);
                _iceI_opABoolS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opABoolS_name = "opABoolS";

            private void _iceI_opABoolS(bool[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpABoolSResult>(completed);
                outAsync.invoke(
                    _opABoolS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ABoolSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpABoolSResult();
                        ret.o = ABoolSHelper.read(istr);
                        ret.returnValue = ABoolSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLBoolSResult> opLBoolSAsync(global::System.Collections.Generic.List<bool> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLBoolSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLBoolSResult> _iceI_opLBoolSAsync(global::System.Collections.Generic.List<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLBoolS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLBoolSResult>(progress, cancel);
                _iceI_opLBoolS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLBoolS_name = "opLBoolS";

            private void _iceI_opLBoolS(global::System.Collections.Generic.List<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLBoolSResult>(completed);
                outAsync.invoke(
                    _opLBoolS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LBoolSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLBoolSResult();
                        ret.o = LBoolSHelper.read(istr);
                        ret.returnValue = LBoolSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKBoolSResult> opKBoolSAsync(global::System.Collections.Generic.LinkedList<bool> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKBoolSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKBoolSResult> _iceI_opKBoolSAsync(global::System.Collections.Generic.LinkedList<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKBoolS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKBoolSResult>(progress, cancel);
                _iceI_opKBoolS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKBoolS_name = "opKBoolS";

            private void _iceI_opKBoolS(global::System.Collections.Generic.LinkedList<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKBoolSResult>(completed);
                outAsync.invoke(
                    _opKBoolS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        KBoolSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpKBoolSResult();
                        ret.o = KBoolSHelper.read(istr);
                        ret.returnValue = KBoolSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQBoolSResult> opQBoolSAsync(global::System.Collections.Generic.Queue<bool> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQBoolSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQBoolSResult> _iceI_opQBoolSAsync(global::System.Collections.Generic.Queue<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQBoolS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQBoolSResult>(progress, cancel);
                _iceI_opQBoolS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQBoolS_name = "opQBoolS";

            private void _iceI_opQBoolS(global::System.Collections.Generic.Queue<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQBoolSResult>(completed);
                outAsync.invoke(
                    _opQBoolS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        QBoolSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpQBoolSResult();
                        ret.o = QBoolSHelper.read(istr);
                        ret.returnValue = QBoolSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSBoolSResult> opSBoolSAsync(global::System.Collections.Generic.Stack<bool> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSBoolSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSBoolSResult> _iceI_opSBoolSAsync(global::System.Collections.Generic.Stack<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSBoolS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSBoolSResult>(progress, cancel);
                _iceI_opSBoolS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSBoolS_name = "opSBoolS";

            private void _iceI_opSBoolS(global::System.Collections.Generic.Stack<bool> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSBoolSResult>(completed);
                outAsync.invoke(
                    _opSBoolS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        SBoolSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpSBoolSResult();
                        ret.o = SBoolSHelper.read(istr);
                        ret.returnValue = SBoolSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAShortSResult> opAShortSAsync(short[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAShortSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAShortSResult> _iceI_opAShortSAsync(short[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAShortS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAShortSResult>(progress, cancel);
                _iceI_opAShortS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAShortS_name = "opAShortS";

            private void _iceI_opAShortS(short[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAShortSResult>(completed);
                outAsync.invoke(
                    _opAShortS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        AShortSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpAShortSResult();
                        ret.o = AShortSHelper.read(istr);
                        ret.returnValue = AShortSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLShortSResult> opLShortSAsync(global::System.Collections.Generic.List<short> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLShortSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLShortSResult> _iceI_opLShortSAsync(global::System.Collections.Generic.List<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLShortS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLShortSResult>(progress, cancel);
                _iceI_opLShortS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLShortS_name = "opLShortS";

            private void _iceI_opLShortS(global::System.Collections.Generic.List<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLShortSResult>(completed);
                outAsync.invoke(
                    _opLShortS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LShortSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLShortSResult();
                        ret.o = LShortSHelper.read(istr);
                        ret.returnValue = LShortSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKShortSResult> opKShortSAsync(global::System.Collections.Generic.LinkedList<short> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKShortSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKShortSResult> _iceI_opKShortSAsync(global::System.Collections.Generic.LinkedList<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKShortS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKShortSResult>(progress, cancel);
                _iceI_opKShortS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKShortS_name = "opKShortS";

            private void _iceI_opKShortS(global::System.Collections.Generic.LinkedList<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKShortSResult>(completed);
                outAsync.invoke(
                    _opKShortS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        KShortSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpKShortSResult();
                        ret.o = KShortSHelper.read(istr);
                        ret.returnValue = KShortSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQShortSResult> opQShortSAsync(global::System.Collections.Generic.Queue<short> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQShortSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQShortSResult> _iceI_opQShortSAsync(global::System.Collections.Generic.Queue<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQShortS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQShortSResult>(progress, cancel);
                _iceI_opQShortS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQShortS_name = "opQShortS";

            private void _iceI_opQShortS(global::System.Collections.Generic.Queue<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQShortSResult>(completed);
                outAsync.invoke(
                    _opQShortS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        QShortSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpQShortSResult();
                        ret.o = QShortSHelper.read(istr);
                        ret.returnValue = QShortSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSShortSResult> opSShortSAsync(global::System.Collections.Generic.Stack<short> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSShortSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSShortSResult> _iceI_opSShortSAsync(global::System.Collections.Generic.Stack<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSShortS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSShortSResult>(progress, cancel);
                _iceI_opSShortS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSShortS_name = "opSShortS";

            private void _iceI_opSShortS(global::System.Collections.Generic.Stack<short> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSShortSResult>(completed);
                outAsync.invoke(
                    _opSShortS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        SShortSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpSShortSResult();
                        ret.o = SShortSHelper.read(istr);
                        ret.returnValue = SShortSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAIntSResult> opAIntSAsync(int[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAIntSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAIntSResult> _iceI_opAIntSAsync(int[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAIntS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAIntSResult>(progress, cancel);
                _iceI_opAIntS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAIntS_name = "opAIntS";

            private void _iceI_opAIntS(int[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAIntSResult>(completed);
                outAsync.invoke(
                    _opAIntS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        AIntSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpAIntSResult();
                        ret.o = AIntSHelper.read(istr);
                        ret.returnValue = AIntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLIntSResult> opLIntSAsync(global::System.Collections.Generic.List<int> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLIntSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLIntSResult> _iceI_opLIntSAsync(global::System.Collections.Generic.List<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLIntS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLIntSResult>(progress, cancel);
                _iceI_opLIntS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLIntS_name = "opLIntS";

            private void _iceI_opLIntS(global::System.Collections.Generic.List<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLIntSResult>(completed);
                outAsync.invoke(
                    _opLIntS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LIntSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLIntSResult();
                        ret.o = LIntSHelper.read(istr);
                        ret.returnValue = LIntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKIntSResult> opKIntSAsync(global::System.Collections.Generic.LinkedList<int> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKIntSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKIntSResult> _iceI_opKIntSAsync(global::System.Collections.Generic.LinkedList<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKIntS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKIntSResult>(progress, cancel);
                _iceI_opKIntS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKIntS_name = "opKIntS";

            private void _iceI_opKIntS(global::System.Collections.Generic.LinkedList<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKIntSResult>(completed);
                outAsync.invoke(
                    _opKIntS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        KIntSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpKIntSResult();
                        ret.o = KIntSHelper.read(istr);
                        ret.returnValue = KIntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQIntSResult> opQIntSAsync(global::System.Collections.Generic.Queue<int> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQIntSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQIntSResult> _iceI_opQIntSAsync(global::System.Collections.Generic.Queue<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQIntS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQIntSResult>(progress, cancel);
                _iceI_opQIntS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQIntS_name = "opQIntS";

            private void _iceI_opQIntS(global::System.Collections.Generic.Queue<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQIntSResult>(completed);
                outAsync.invoke(
                    _opQIntS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        QIntSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpQIntSResult();
                        ret.o = QIntSHelper.read(istr);
                        ret.returnValue = QIntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSIntSResult> opSIntSAsync(global::System.Collections.Generic.Stack<int> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSIntSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSIntSResult> _iceI_opSIntSAsync(global::System.Collections.Generic.Stack<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSIntS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSIntSResult>(progress, cancel);
                _iceI_opSIntS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSIntS_name = "opSIntS";

            private void _iceI_opSIntS(global::System.Collections.Generic.Stack<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSIntSResult>(completed);
                outAsync.invoke(
                    _opSIntS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        SIntSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpSIntSResult();
                        ret.o = SIntSHelper.read(istr);
                        ret.returnValue = SIntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpALongSResult> opALongSAsync(long[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opALongSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpALongSResult> _iceI_opALongSAsync(long[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opALongS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpALongSResult>(progress, cancel);
                _iceI_opALongS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opALongS_name = "opALongS";

            private void _iceI_opALongS(long[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpALongSResult>(completed);
                outAsync.invoke(
                    _opALongS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ALongSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpALongSResult();
                        ret.o = ALongSHelper.read(istr);
                        ret.returnValue = ALongSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLLongSResult> opLLongSAsync(global::System.Collections.Generic.List<long> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLLongSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLLongSResult> _iceI_opLLongSAsync(global::System.Collections.Generic.List<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLLongS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLLongSResult>(progress, cancel);
                _iceI_opLLongS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLLongS_name = "opLLongS";

            private void _iceI_opLLongS(global::System.Collections.Generic.List<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLLongSResult>(completed);
                outAsync.invoke(
                    _opLLongS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LLongSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLLongSResult();
                        ret.o = LLongSHelper.read(istr);
                        ret.returnValue = LLongSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKLongSResult> opKLongSAsync(global::System.Collections.Generic.LinkedList<long> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKLongSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKLongSResult> _iceI_opKLongSAsync(global::System.Collections.Generic.LinkedList<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKLongS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKLongSResult>(progress, cancel);
                _iceI_opKLongS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKLongS_name = "opKLongS";

            private void _iceI_opKLongS(global::System.Collections.Generic.LinkedList<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKLongSResult>(completed);
                outAsync.invoke(
                    _opKLongS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        KLongSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpKLongSResult();
                        ret.o = KLongSHelper.read(istr);
                        ret.returnValue = KLongSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQLongSResult> opQLongSAsync(global::System.Collections.Generic.Queue<long> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQLongSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQLongSResult> _iceI_opQLongSAsync(global::System.Collections.Generic.Queue<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQLongS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQLongSResult>(progress, cancel);
                _iceI_opQLongS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQLongS_name = "opQLongS";

            private void _iceI_opQLongS(global::System.Collections.Generic.Queue<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQLongSResult>(completed);
                outAsync.invoke(
                    _opQLongS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        QLongSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpQLongSResult();
                        ret.o = QLongSHelper.read(istr);
                        ret.returnValue = QLongSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSLongSResult> opSLongSAsync(global::System.Collections.Generic.Stack<long> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSLongSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSLongSResult> _iceI_opSLongSAsync(global::System.Collections.Generic.Stack<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSLongS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSLongSResult>(progress, cancel);
                _iceI_opSLongS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSLongS_name = "opSLongS";

            private void _iceI_opSLongS(global::System.Collections.Generic.Stack<long> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSLongSResult>(completed);
                outAsync.invoke(
                    _opSLongS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        SLongSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpSLongSResult();
                        ret.o = SLongSHelper.read(istr);
                        ret.returnValue = SLongSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAFloatSResult> opAFloatSAsync(float[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAFloatSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAFloatSResult> _iceI_opAFloatSAsync(float[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAFloatS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAFloatSResult>(progress, cancel);
                _iceI_opAFloatS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAFloatS_name = "opAFloatS";

            private void _iceI_opAFloatS(float[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAFloatSResult>(completed);
                outAsync.invoke(
                    _opAFloatS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        AFloatSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpAFloatSResult();
                        ret.o = AFloatSHelper.read(istr);
                        ret.returnValue = AFloatSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLFloatSResult> opLFloatSAsync(global::System.Collections.Generic.List<float> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLFloatSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLFloatSResult> _iceI_opLFloatSAsync(global::System.Collections.Generic.List<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLFloatS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLFloatSResult>(progress, cancel);
                _iceI_opLFloatS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLFloatS_name = "opLFloatS";

            private void _iceI_opLFloatS(global::System.Collections.Generic.List<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLFloatSResult>(completed);
                outAsync.invoke(
                    _opLFloatS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LFloatSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLFloatSResult();
                        ret.o = LFloatSHelper.read(istr);
                        ret.returnValue = LFloatSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKFloatSResult> opKFloatSAsync(global::System.Collections.Generic.LinkedList<float> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKFloatSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKFloatSResult> _iceI_opKFloatSAsync(global::System.Collections.Generic.LinkedList<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKFloatS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKFloatSResult>(progress, cancel);
                _iceI_opKFloatS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKFloatS_name = "opKFloatS";

            private void _iceI_opKFloatS(global::System.Collections.Generic.LinkedList<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKFloatSResult>(completed);
                outAsync.invoke(
                    _opKFloatS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        KFloatSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpKFloatSResult();
                        ret.o = KFloatSHelper.read(istr);
                        ret.returnValue = KFloatSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQFloatSResult> opQFloatSAsync(global::System.Collections.Generic.Queue<float> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQFloatSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQFloatSResult> _iceI_opQFloatSAsync(global::System.Collections.Generic.Queue<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQFloatS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQFloatSResult>(progress, cancel);
                _iceI_opQFloatS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQFloatS_name = "opQFloatS";

            private void _iceI_opQFloatS(global::System.Collections.Generic.Queue<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQFloatSResult>(completed);
                outAsync.invoke(
                    _opQFloatS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        QFloatSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpQFloatSResult();
                        ret.o = QFloatSHelper.read(istr);
                        ret.returnValue = QFloatSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSFloatSResult> opSFloatSAsync(global::System.Collections.Generic.Stack<float> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSFloatSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSFloatSResult> _iceI_opSFloatSAsync(global::System.Collections.Generic.Stack<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSFloatS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSFloatSResult>(progress, cancel);
                _iceI_opSFloatS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSFloatS_name = "opSFloatS";

            private void _iceI_opSFloatS(global::System.Collections.Generic.Stack<float> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSFloatSResult>(completed);
                outAsync.invoke(
                    _opSFloatS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        SFloatSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpSFloatSResult();
                        ret.o = SFloatSHelper.read(istr);
                        ret.returnValue = SFloatSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpADoubleSResult> opADoubleSAsync(double[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opADoubleSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpADoubleSResult> _iceI_opADoubleSAsync(double[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opADoubleS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpADoubleSResult>(progress, cancel);
                _iceI_opADoubleS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opADoubleS_name = "opADoubleS";

            private void _iceI_opADoubleS(double[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpADoubleSResult>(completed);
                outAsync.invoke(
                    _opADoubleS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ADoubleSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpADoubleSResult();
                        ret.o = ADoubleSHelper.read(istr);
                        ret.returnValue = ADoubleSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLDoubleSResult> opLDoubleSAsync(global::System.Collections.Generic.List<double> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLDoubleSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLDoubleSResult> _iceI_opLDoubleSAsync(global::System.Collections.Generic.List<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLDoubleS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLDoubleSResult>(progress, cancel);
                _iceI_opLDoubleS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLDoubleS_name = "opLDoubleS";

            private void _iceI_opLDoubleS(global::System.Collections.Generic.List<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLDoubleSResult>(completed);
                outAsync.invoke(
                    _opLDoubleS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LDoubleSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLDoubleSResult();
                        ret.o = LDoubleSHelper.read(istr);
                        ret.returnValue = LDoubleSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKDoubleSResult> opKDoubleSAsync(global::System.Collections.Generic.LinkedList<double> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKDoubleSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKDoubleSResult> _iceI_opKDoubleSAsync(global::System.Collections.Generic.LinkedList<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKDoubleS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKDoubleSResult>(progress, cancel);
                _iceI_opKDoubleS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKDoubleS_name = "opKDoubleS";

            private void _iceI_opKDoubleS(global::System.Collections.Generic.LinkedList<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKDoubleSResult>(completed);
                outAsync.invoke(
                    _opKDoubleS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        KDoubleSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpKDoubleSResult();
                        ret.o = KDoubleSHelper.read(istr);
                        ret.returnValue = KDoubleSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQDoubleSResult> opQDoubleSAsync(global::System.Collections.Generic.Queue<double> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQDoubleSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQDoubleSResult> _iceI_opQDoubleSAsync(global::System.Collections.Generic.Queue<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQDoubleS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQDoubleSResult>(progress, cancel);
                _iceI_opQDoubleS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQDoubleS_name = "opQDoubleS";

            private void _iceI_opQDoubleS(global::System.Collections.Generic.Queue<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQDoubleSResult>(completed);
                outAsync.invoke(
                    _opQDoubleS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        QDoubleSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpQDoubleSResult();
                        ret.o = QDoubleSHelper.read(istr);
                        ret.returnValue = QDoubleSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSDoubleSResult> opSDoubleSAsync(global::System.Collections.Generic.Stack<double> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSDoubleSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSDoubleSResult> _iceI_opSDoubleSAsync(global::System.Collections.Generic.Stack<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSDoubleS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSDoubleSResult>(progress, cancel);
                _iceI_opSDoubleS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSDoubleS_name = "opSDoubleS";

            private void _iceI_opSDoubleS(global::System.Collections.Generic.Stack<double> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSDoubleSResult>(completed);
                outAsync.invoke(
                    _opSDoubleS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        SDoubleSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpSDoubleSResult();
                        ret.o = SDoubleSHelper.read(istr);
                        ret.returnValue = SDoubleSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAStringSResult> opAStringSAsync(string[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAStringSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAStringSResult> _iceI_opAStringSAsync(string[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAStringS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAStringSResult>(progress, cancel);
                _iceI_opAStringS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAStringS_name = "opAStringS";

            private void _iceI_opAStringS(string[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAStringSResult>(completed);
                outAsync.invoke(
                    _opAStringS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        AStringSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpAStringSResult();
                        ret.o = AStringSHelper.read(istr);
                        ret.returnValue = AStringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLStringSResult> opLStringSAsync(global::System.Collections.Generic.List<string> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLStringSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLStringSResult> _iceI_opLStringSAsync(global::System.Collections.Generic.List<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLStringS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLStringSResult>(progress, cancel);
                _iceI_opLStringS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLStringS_name = "opLStringS";

            private void _iceI_opLStringS(global::System.Collections.Generic.List<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLStringSResult>(completed);
                outAsync.invoke(
                    _opLStringS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LStringSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLStringSResult();
                        ret.o = LStringSHelper.read(istr);
                        ret.returnValue = LStringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKStringSResult> opKStringSAsync(global::System.Collections.Generic.LinkedList<string> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKStringSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKStringSResult> _iceI_opKStringSAsync(global::System.Collections.Generic.LinkedList<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKStringS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKStringSResult>(progress, cancel);
                _iceI_opKStringS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKStringS_name = "opKStringS";

            private void _iceI_opKStringS(global::System.Collections.Generic.LinkedList<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKStringSResult>(completed);
                outAsync.invoke(
                    _opKStringS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        KStringSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpKStringSResult();
                        ret.o = KStringSHelper.read(istr);
                        ret.returnValue = KStringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQStringSResult> opQStringSAsync(global::System.Collections.Generic.Queue<string> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQStringSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQStringSResult> _iceI_opQStringSAsync(global::System.Collections.Generic.Queue<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQStringS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQStringSResult>(progress, cancel);
                _iceI_opQStringS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQStringS_name = "opQStringS";

            private void _iceI_opQStringS(global::System.Collections.Generic.Queue<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQStringSResult>(completed);
                outAsync.invoke(
                    _opQStringS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        QStringSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpQStringSResult();
                        ret.o = QStringSHelper.read(istr);
                        ret.returnValue = QStringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSStringSResult> opSStringSAsync(global::System.Collections.Generic.Stack<string> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSStringSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSStringSResult> _iceI_opSStringSAsync(global::System.Collections.Generic.Stack<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSStringS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSStringSResult>(progress, cancel);
                _iceI_opSStringS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSStringS_name = "opSStringS";

            private void _iceI_opSStringS(global::System.Collections.Generic.Stack<string> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSStringSResult>(completed);
                outAsync.invoke(
                    _opSStringS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        SStringSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpSStringSResult();
                        ret.o = SStringSHelper.read(istr);
                        ret.returnValue = SStringSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAObjectSResult> opAObjectSAsync(global::Ice.Value?[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAObjectSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAObjectSResult> _iceI_opAObjectSAsync(global::Ice.Value?[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAObjectS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAObjectSResult>(progress, cancel);
                _iceI_opAObjectS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAObjectS_name = "opAObjectS";

            private void _iceI_opAObjectS(global::Ice.Value?[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAObjectSResult>(completed);
                outAsync.invoke(
                    _opAObjectS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        AObjectSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpAObjectSResult();
                        ret.o = AObjectSHelper.read(istr);
                        ret.returnValue = AObjectSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLObjectSResult> opLObjectSAsync(global::System.Collections.Generic.List<global::Ice.Value?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLObjectSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLObjectSResult> _iceI_opLObjectSAsync(global::System.Collections.Generic.List<global::Ice.Value?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLObjectS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLObjectSResult>(progress, cancel);
                _iceI_opLObjectS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLObjectS_name = "opLObjectS";

            private void _iceI_opLObjectS(global::System.Collections.Generic.List<global::Ice.Value?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLObjectSResult>(completed);
                outAsync.invoke(
                    _opLObjectS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LObjectSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLObjectSResult();
                        ret.o = LObjectSHelper.read(istr);
                        ret.returnValue = LObjectSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAObjectPrxSResult> opAObjectPrxSAsync(global::Ice.ObjectPrx?[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAObjectPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAObjectPrxSResult> _iceI_opAObjectPrxSAsync(global::Ice.ObjectPrx?[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAObjectPrxS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAObjectPrxSResult>(progress, cancel);
                _iceI_opAObjectPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAObjectPrxS_name = "opAObjectPrxS";

            private void _iceI_opAObjectPrxS(global::Ice.ObjectPrx?[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAObjectPrxSResult>(completed);
                outAsync.invoke(
                    _opAObjectPrxS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        AObjectPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpAObjectPrxSResult();
                        ret.o = AObjectPrxSHelper.read(istr);
                        ret.returnValue = AObjectPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLObjectPrxSResult> opLObjectPrxSAsync(global::System.Collections.Generic.List<global::Ice.ObjectPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLObjectPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLObjectPrxSResult> _iceI_opLObjectPrxSAsync(global::System.Collections.Generic.List<global::Ice.ObjectPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLObjectPrxS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLObjectPrxSResult>(progress, cancel);
                _iceI_opLObjectPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLObjectPrxS_name = "opLObjectPrxS";

            private void _iceI_opLObjectPrxS(global::System.Collections.Generic.List<global::Ice.ObjectPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLObjectPrxSResult>(completed);
                outAsync.invoke(
                    _opLObjectPrxS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LObjectPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLObjectPrxSResult();
                        ret.o = LObjectPrxSHelper.read(istr);
                        ret.returnValue = LObjectPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKObjectPrxSResult> opKObjectPrxSAsync(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKObjectPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKObjectPrxSResult> _iceI_opKObjectPrxSAsync(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKObjectPrxS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKObjectPrxSResult>(progress, cancel);
                _iceI_opKObjectPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKObjectPrxS_name = "opKObjectPrxS";

            private void _iceI_opKObjectPrxS(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKObjectPrxSResult>(completed);
                outAsync.invoke(
                    _opKObjectPrxS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        KObjectPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpKObjectPrxSResult();
                        ret.o = KObjectPrxSHelper.read(istr);
                        ret.returnValue = KObjectPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQObjectPrxSResult> opQObjectPrxSAsync(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQObjectPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQObjectPrxSResult> _iceI_opQObjectPrxSAsync(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQObjectPrxS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQObjectPrxSResult>(progress, cancel);
                _iceI_opQObjectPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQObjectPrxS_name = "opQObjectPrxS";

            private void _iceI_opQObjectPrxS(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQObjectPrxSResult>(completed);
                outAsync.invoke(
                    _opQObjectPrxS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        QObjectPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpQObjectPrxSResult();
                        ret.o = QObjectPrxSHelper.read(istr);
                        ret.returnValue = QObjectPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSObjectPrxSResult> opSObjectPrxSAsync(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSObjectPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSObjectPrxSResult> _iceI_opSObjectPrxSAsync(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSObjectPrxS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSObjectPrxSResult>(progress, cancel);
                _iceI_opSObjectPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSObjectPrxS_name = "opSObjectPrxS";

            private void _iceI_opSObjectPrxS(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSObjectPrxSResult>(completed);
                outAsync.invoke(
                    _opSObjectPrxS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        SObjectPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpSObjectPrxSResult();
                        ret.o = SObjectPrxSHelper.read(istr);
                        ret.returnValue = SObjectPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAStructSResult> opAStructSAsync(S[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAStructSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAStructSResult> _iceI_opAStructSAsync(S[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAStructS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAStructSResult>(progress, cancel);
                _iceI_opAStructS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAStructS_name = "opAStructS";

            private void _iceI_opAStructS(S[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAStructSResult>(completed);
                outAsync.invoke(
                    _opAStructS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        AStructSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpAStructSResult();
                        ret.o = AStructSHelper.read(istr);
                        ret.returnValue = AStructSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLStructSResult> opLStructSAsync(global::System.Collections.Generic.List<S> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLStructSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLStructSResult> _iceI_opLStructSAsync(global::System.Collections.Generic.List<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLStructS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLStructSResult>(progress, cancel);
                _iceI_opLStructS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLStructS_name = "opLStructS";

            private void _iceI_opLStructS(global::System.Collections.Generic.List<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLStructSResult>(completed);
                outAsync.invoke(
                    _opLStructS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LStructSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLStructSResult();
                        ret.o = LStructSHelper.read(istr);
                        ret.returnValue = LStructSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKStructSResult> opKStructSAsync(global::System.Collections.Generic.LinkedList<S> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKStructSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKStructSResult> _iceI_opKStructSAsync(global::System.Collections.Generic.LinkedList<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKStructS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKStructSResult>(progress, cancel);
                _iceI_opKStructS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKStructS_name = "opKStructS";

            private void _iceI_opKStructS(global::System.Collections.Generic.LinkedList<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKStructSResult>(completed);
                outAsync.invoke(
                    _opKStructS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        KStructSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpKStructSResult();
                        ret.o = KStructSHelper.read(istr);
                        ret.returnValue = KStructSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQStructSResult> opQStructSAsync(global::System.Collections.Generic.Queue<S> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQStructSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQStructSResult> _iceI_opQStructSAsync(global::System.Collections.Generic.Queue<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQStructS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQStructSResult>(progress, cancel);
                _iceI_opQStructS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQStructS_name = "opQStructS";

            private void _iceI_opQStructS(global::System.Collections.Generic.Queue<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQStructSResult>(completed);
                outAsync.invoke(
                    _opQStructS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        QStructSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpQStructSResult();
                        ret.o = QStructSHelper.read(istr);
                        ret.returnValue = QStructSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSStructSResult> opSStructSAsync(global::System.Collections.Generic.Stack<S> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSStructSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSStructSResult> _iceI_opSStructSAsync(global::System.Collections.Generic.Stack<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSStructS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSStructSResult>(progress, cancel);
                _iceI_opSStructS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSStructS_name = "opSStructS";

            private void _iceI_opSStructS(global::System.Collections.Generic.Stack<S> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSStructSResult>(completed);
                outAsync.invoke(
                    _opSStructS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        SStructSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpSStructSResult();
                        ret.o = SStructSHelper.read(istr);
                        ret.returnValue = SStructSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAStructSDResult> opAStructSDAsync(SD[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAStructSDAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAStructSDResult> _iceI_opAStructSDAsync(SD[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAStructSD_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAStructSDResult>(progress, cancel);
                _iceI_opAStructSD(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAStructSD_name = "opAStructSD";

            private void _iceI_opAStructSD(SD[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAStructSDResult>(completed);
                outAsync.invoke(
                    _opAStructSD_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        AStructSDHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpAStructSDResult();
                        ret.o = AStructSDHelper.read(istr);
                        ret.returnValue = AStructSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLStructSDResult> opLStructSDAsync(global::System.Collections.Generic.List<SD> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLStructSDAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLStructSDResult> _iceI_opLStructSDAsync(global::System.Collections.Generic.List<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLStructSD_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLStructSDResult>(progress, cancel);
                _iceI_opLStructSD(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLStructSD_name = "opLStructSD";

            private void _iceI_opLStructSD(global::System.Collections.Generic.List<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLStructSDResult>(completed);
                outAsync.invoke(
                    _opLStructSD_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LStructSDHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLStructSDResult();
                        ret.o = LStructSDHelper.read(istr);
                        ret.returnValue = LStructSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKStructSDResult> opKStructSDAsync(global::System.Collections.Generic.LinkedList<SD> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKStructSDAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKStructSDResult> _iceI_opKStructSDAsync(global::System.Collections.Generic.LinkedList<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKStructSD_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKStructSDResult>(progress, cancel);
                _iceI_opKStructSD(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKStructSD_name = "opKStructSD";

            private void _iceI_opKStructSD(global::System.Collections.Generic.LinkedList<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKStructSDResult>(completed);
                outAsync.invoke(
                    _opKStructSD_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        KStructSDHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpKStructSDResult();
                        ret.o = KStructSDHelper.read(istr);
                        ret.returnValue = KStructSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQStructSDResult> opQStructSDAsync(global::System.Collections.Generic.Queue<SD> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQStructSDAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQStructSDResult> _iceI_opQStructSDAsync(global::System.Collections.Generic.Queue<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQStructSD_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQStructSDResult>(progress, cancel);
                _iceI_opQStructSD(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQStructSD_name = "opQStructSD";

            private void _iceI_opQStructSD(global::System.Collections.Generic.Queue<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQStructSDResult>(completed);
                outAsync.invoke(
                    _opQStructSD_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        QStructSDHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpQStructSDResult();
                        ret.o = QStructSDHelper.read(istr);
                        ret.returnValue = QStructSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSStructSDResult> opSStructSDAsync(global::System.Collections.Generic.Stack<SD> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSStructSDAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSStructSDResult> _iceI_opSStructSDAsync(global::System.Collections.Generic.Stack<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSStructSD_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSStructSDResult>(progress, cancel);
                _iceI_opSStructSD(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSStructSD_name = "opSStructSD";

            private void _iceI_opSStructSD(global::System.Collections.Generic.Stack<SD> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSStructSDResult>(completed);
                outAsync.invoke(
                    _opSStructSD_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        SStructSDHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpSStructSDResult();
                        ret.o = SStructSDHelper.read(istr);
                        ret.returnValue = SStructSDHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpACVSResult> opACVSAsync(CV?[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opACVSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpACVSResult> _iceI_opACVSAsync(CV?[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opACVS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpACVSResult>(progress, cancel);
                _iceI_opACVS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opACVS_name = "opACVS";

            private void _iceI_opACVS(CV?[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpACVSResult>(completed);
                outAsync.invoke(
                    _opACVS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ACVSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpACVSResult();
                        ret.o = ACVSHelper.read(istr);
                        ret.returnValue = ACVSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLCVSResult> opLCVSAsync(global::System.Collections.Generic.List<CV?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLCVSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLCVSResult> _iceI_opLCVSAsync(global::System.Collections.Generic.List<CV?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLCVS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLCVSResult>(progress, cancel);
                _iceI_opLCVS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLCVS_name = "opLCVS";

            private void _iceI_opLCVS(global::System.Collections.Generic.List<CV?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLCVSResult>(completed);
                outAsync.invoke(
                    _opLCVS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LCVSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLCVSResult();
                        ret.o = LCVSHelper.read(istr);
                        ret.returnValue = LCVSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpACRSResult> opACRSAsync(CR?[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opACRSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpACRSResult> _iceI_opACRSAsync(CR?[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opACRS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpACRSResult>(progress, cancel);
                _iceI_opACRS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opACRS_name = "opACRS";

            private void _iceI_opACRS(CR?[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpACRSResult>(completed);
                outAsync.invoke(
                    _opACRS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ACRSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpACRSResult();
                        ret.o = ACRSHelper.read(istr);
                        ret.returnValue = ACRSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLCRSResult> opLCRSAsync(global::System.Collections.Generic.List<CR?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLCRSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLCRSResult> _iceI_opLCRSAsync(global::System.Collections.Generic.List<CR?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLCRS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLCRSResult>(progress, cancel);
                _iceI_opLCRS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLCRS_name = "opLCRS";

            private void _iceI_opLCRS(global::System.Collections.Generic.List<CR?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLCRSResult>(completed);
                outAsync.invoke(
                    _opLCRS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LCRSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLCRSResult();
                        ret.o = LCRSHelper.read(istr);
                        ret.returnValue = LCRSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAEnSResult> opAEnSAsync(En[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAEnSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAEnSResult> _iceI_opAEnSAsync(En[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAEnS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAEnSResult>(progress, cancel);
                _iceI_opAEnS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAEnS_name = "opAEnS";

            private void _iceI_opAEnS(En[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAEnSResult>(completed);
                outAsync.invoke(
                    _opAEnS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        AEnSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpAEnSResult();
                        ret.o = AEnSHelper.read(istr);
                        ret.returnValue = AEnSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLEnSResult> opLEnSAsync(global::System.Collections.Generic.List<En> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLEnSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLEnSResult> _iceI_opLEnSAsync(global::System.Collections.Generic.List<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLEnS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLEnSResult>(progress, cancel);
                _iceI_opLEnS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLEnS_name = "opLEnS";

            private void _iceI_opLEnS(global::System.Collections.Generic.List<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLEnSResult>(completed);
                outAsync.invoke(
                    _opLEnS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LEnSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLEnSResult();
                        ret.o = LEnSHelper.read(istr);
                        ret.returnValue = LEnSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKEnSResult> opKEnSAsync(global::System.Collections.Generic.LinkedList<En> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKEnSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKEnSResult> _iceI_opKEnSAsync(global::System.Collections.Generic.LinkedList<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKEnS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKEnSResult>(progress, cancel);
                _iceI_opKEnS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKEnS_name = "opKEnS";

            private void _iceI_opKEnS(global::System.Collections.Generic.LinkedList<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKEnSResult>(completed);
                outAsync.invoke(
                    _opKEnS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        KEnSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpKEnSResult();
                        ret.o = KEnSHelper.read(istr);
                        ret.returnValue = KEnSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQEnSResult> opQEnSAsync(global::System.Collections.Generic.Queue<En> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQEnSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQEnSResult> _iceI_opQEnSAsync(global::System.Collections.Generic.Queue<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQEnS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQEnSResult>(progress, cancel);
                _iceI_opQEnS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQEnS_name = "opQEnS";

            private void _iceI_opQEnS(global::System.Collections.Generic.Queue<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQEnSResult>(completed);
                outAsync.invoke(
                    _opQEnS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        QEnSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpQEnSResult();
                        ret.o = QEnSHelper.read(istr);
                        ret.returnValue = QEnSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSEnSResult> opSEnSAsync(global::System.Collections.Generic.Stack<En> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSEnSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSEnSResult> _iceI_opSEnSAsync(global::System.Collections.Generic.Stack<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSEnS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSEnSResult>(progress, cancel);
                _iceI_opSEnS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSEnS_name = "opSEnS";

            private void _iceI_opSEnS(global::System.Collections.Generic.Stack<En> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSEnSResult>(completed);
                outAsync.invoke(
                    _opSEnS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        SEnSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpSEnSResult();
                        ret.o = SEnSHelper.read(istr);
                        ret.returnValue = SEnSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpAIPrxSResult> opAIPrxSAsync(IPrx?[] i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAIPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpAIPrxSResult> _iceI_opAIPrxSAsync(IPrx?[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opAIPrxS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpAIPrxSResult>(progress, cancel);
                _iceI_opAIPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opAIPrxS_name = "opAIPrxS";

            private void _iceI_opAIPrxS(IPrx?[] iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpAIPrxSResult>(completed);
                outAsync.invoke(
                    _opAIPrxS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        AIPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpAIPrxSResult();
                        ret.o = AIPrxSHelper.read(istr);
                        ret.returnValue = AIPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpLIPrxSResult> opLIPrxSAsync(global::System.Collections.Generic.List<IPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLIPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpLIPrxSResult> _iceI_opLIPrxSAsync(global::System.Collections.Generic.List<IPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLIPrxS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLIPrxSResult>(progress, cancel);
                _iceI_opLIPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLIPrxS_name = "opLIPrxS";

            private void _iceI_opLIPrxS(global::System.Collections.Generic.List<IPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpLIPrxSResult>(completed);
                outAsync.invoke(
                    _opLIPrxS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LIPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpLIPrxSResult();
                        ret.o = LIPrxSHelper.read(istr);
                        ret.returnValue = LIPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpKIPrxSResult> opKIPrxSAsync(global::System.Collections.Generic.LinkedList<IPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opKIPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpKIPrxSResult> _iceI_opKIPrxSAsync(global::System.Collections.Generic.LinkedList<IPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opKIPrxS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpKIPrxSResult>(progress, cancel);
                _iceI_opKIPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opKIPrxS_name = "opKIPrxS";

            private void _iceI_opKIPrxS(global::System.Collections.Generic.LinkedList<IPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpKIPrxSResult>(completed);
                outAsync.invoke(
                    _opKIPrxS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        KIPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpKIPrxSResult();
                        ret.o = KIPrxSHelper.read(istr);
                        ret.returnValue = KIPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpQIPrxSResult> opQIPrxSAsync(global::System.Collections.Generic.Queue<IPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opQIPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpQIPrxSResult> _iceI_opQIPrxSAsync(global::System.Collections.Generic.Queue<IPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opQIPrxS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpQIPrxSResult>(progress, cancel);
                _iceI_opQIPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opQIPrxS_name = "opQIPrxS";

            private void _iceI_opQIPrxS(global::System.Collections.Generic.Queue<IPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpQIPrxSResult>(completed);
                outAsync.invoke(
                    _opQIPrxS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        QIPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpQIPrxSResult();
                        ret.o = QIPrxSHelper.read(istr);
                        ret.returnValue = QIPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpSIPrxSResult> opSIPrxSAsync(global::System.Collections.Generic.Stack<IPrx?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSIPrxSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpSIPrxSResult> _iceI_opSIPrxSAsync(global::System.Collections.Generic.Stack<IPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSIPrxS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpSIPrxSResult>(progress, cancel);
                _iceI_opSIPrxS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSIPrxS_name = "opSIPrxS";

            private void _iceI_opSIPrxS(global::System.Collections.Generic.Stack<IPrx?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpSIPrxSResult>(completed);
                outAsync.invoke(
                    _opSIPrxS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        SIPrxSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpSIPrxSResult();
                        ret.o = SIPrxSHelper.read(istr);
                        ret.returnValue = SIPrxSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpCustomIntSResult> opCustomIntSAsync(global::Ice.seqMapping.Custom<int> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCustomIntSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpCustomIntSResult> _iceI_opCustomIntSAsync(global::Ice.seqMapping.Custom<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCustomIntS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpCustomIntSResult>(progress, cancel);
                _iceI_opCustomIntS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCustomIntS_name = "opCustomIntS";

            private void _iceI_opCustomIntS(global::Ice.seqMapping.Custom<int> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpCustomIntSResult>(completed);
                outAsync.invoke(
                    _opCustomIntS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        CustomIntSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpCustomIntSResult();
                        ret.o = CustomIntSHelper.read(istr);
                        ret.returnValue = CustomIntSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpCustomCVSResult> opCustomCVSAsync(global::Ice.seqMapping.Custom<CV?> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCustomCVSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpCustomCVSResult> _iceI_opCustomCVSAsync(global::Ice.seqMapping.Custom<CV?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCustomCVS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpCustomCVSResult>(progress, cancel);
                _iceI_opCustomCVS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCustomCVS_name = "opCustomCVS";

            private void _iceI_opCustomCVS(global::Ice.seqMapping.Custom<CV?> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpCustomCVSResult>(completed);
                outAsync.invoke(
                    _opCustomCVS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        CustomCVSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpCustomCVSResult();
                        ret.o = CustomCVSHelper.read(istr);
                        ret.returnValue = CustomCVSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpCustomIntSSResult> opCustomIntSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCustomIntSSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpCustomIntSSResult> _iceI_opCustomIntSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCustomIntSS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpCustomIntSSResult>(progress, cancel);
                _iceI_opCustomIntSS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCustomIntSS_name = "opCustomIntSS";

            private void _iceI_opCustomIntSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpCustomIntSSResult>(completed);
                outAsync.invoke(
                    _opCustomIntSS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        CustomIntSSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpCustomIntSSResult();
                        ret.o = CustomIntSSHelper.read(istr);
                        ret.returnValue = CustomIntSSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpCustomCVSSResult> opCustomCVSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCustomCVSSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpCustomCVSSResult> _iceI_opCustomCVSSAsync(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCustomCVSS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpCustomCVSSResult>(progress, cancel);
                _iceI_opCustomCVSS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCustomCVSS_name = "opCustomCVSS";

            private void _iceI_opCustomCVSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpCustomCVSSResult>(completed);
                outAsync.invoke(
                    _opCustomCVSS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        CustomCVSSHelper.write(ostr, iceP_i);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpCustomCVSSResult();
                        ret.o = CustomCVSSHelper.read(istr);
                        ret.returnValue = CustomCVSSHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public static MyClassPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new MyClassPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static MyClassPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new MyClassPrxHelper(b) : null;

            public static MyClassPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static MyClassPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new MyClassPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static MyClassPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MyClass"
            };

            public static string ice_staticId() => "::Test::MyClass";

            public static void write(Ice.OutputStream ostr, MyClassPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static MyClassPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new MyClassPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new MyClassPrxHelper(reference);

            private MyClassPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private MyClassPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }
}

namespace Ice.seqMapping
{
    namespace Test
    {
        public abstract class IDisp_ : Ice.ObjectImpl, I
        {
            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::I";
        }

        public abstract class MyClassDisp_ : Ice.ObjectImpl, MyClass
        {
            public abstract void shutdown(Ice.Current current);

            public abstract byte[] opAByteS(byte[] i, out byte[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<byte> opLByteS(global::System.Collections.Generic.List<byte> i, out global::System.Collections.Generic.List<byte> o, Ice.Current current);

            public abstract global::System.Collections.Generic.LinkedList<byte> opKByteS(global::System.Collections.Generic.LinkedList<byte> i, out global::System.Collections.Generic.LinkedList<byte> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Queue<byte> opQByteS(global::System.Collections.Generic.Queue<byte> i, out global::System.Collections.Generic.Queue<byte> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Stack<byte> opSByteS(global::System.Collections.Generic.Stack<byte> i, out global::System.Collections.Generic.Stack<byte> o, Ice.Current current);

            public abstract bool[] opABoolS(bool[] i, out bool[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<bool> opLBoolS(global::System.Collections.Generic.List<bool> i, out global::System.Collections.Generic.List<bool> o, Ice.Current current);

            public abstract global::System.Collections.Generic.LinkedList<bool> opKBoolS(global::System.Collections.Generic.LinkedList<bool> i, out global::System.Collections.Generic.LinkedList<bool> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Queue<bool> opQBoolS(global::System.Collections.Generic.Queue<bool> i, out global::System.Collections.Generic.Queue<bool> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Stack<bool> opSBoolS(global::System.Collections.Generic.Stack<bool> i, out global::System.Collections.Generic.Stack<bool> o, Ice.Current current);

            public abstract short[] opAShortS(short[] i, out short[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<short> opLShortS(global::System.Collections.Generic.List<short> i, out global::System.Collections.Generic.List<short> o, Ice.Current current);

            public abstract global::System.Collections.Generic.LinkedList<short> opKShortS(global::System.Collections.Generic.LinkedList<short> i, out global::System.Collections.Generic.LinkedList<short> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Queue<short> opQShortS(global::System.Collections.Generic.Queue<short> i, out global::System.Collections.Generic.Queue<short> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Stack<short> opSShortS(global::System.Collections.Generic.Stack<short> i, out global::System.Collections.Generic.Stack<short> o, Ice.Current current);

            public abstract int[] opAIntS(int[] i, out int[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<int> opLIntS(global::System.Collections.Generic.List<int> i, out global::System.Collections.Generic.List<int> o, Ice.Current current);

            public abstract global::System.Collections.Generic.LinkedList<int> opKIntS(global::System.Collections.Generic.LinkedList<int> i, out global::System.Collections.Generic.LinkedList<int> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Queue<int> opQIntS(global::System.Collections.Generic.Queue<int> i, out global::System.Collections.Generic.Queue<int> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Stack<int> opSIntS(global::System.Collections.Generic.Stack<int> i, out global::System.Collections.Generic.Stack<int> o, Ice.Current current);

            public abstract long[] opALongS(long[] i, out long[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<long> opLLongS(global::System.Collections.Generic.List<long> i, out global::System.Collections.Generic.List<long> o, Ice.Current current);

            public abstract global::System.Collections.Generic.LinkedList<long> opKLongS(global::System.Collections.Generic.LinkedList<long> i, out global::System.Collections.Generic.LinkedList<long> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Queue<long> opQLongS(global::System.Collections.Generic.Queue<long> i, out global::System.Collections.Generic.Queue<long> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Stack<long> opSLongS(global::System.Collections.Generic.Stack<long> i, out global::System.Collections.Generic.Stack<long> o, Ice.Current current);

            public abstract float[] opAFloatS(float[] i, out float[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<float> opLFloatS(global::System.Collections.Generic.List<float> i, out global::System.Collections.Generic.List<float> o, Ice.Current current);

            public abstract global::System.Collections.Generic.LinkedList<float> opKFloatS(global::System.Collections.Generic.LinkedList<float> i, out global::System.Collections.Generic.LinkedList<float> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Queue<float> opQFloatS(global::System.Collections.Generic.Queue<float> i, out global::System.Collections.Generic.Queue<float> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Stack<float> opSFloatS(global::System.Collections.Generic.Stack<float> i, out global::System.Collections.Generic.Stack<float> o, Ice.Current current);

            public abstract double[] opADoubleS(double[] i, out double[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<double> opLDoubleS(global::System.Collections.Generic.List<double> i, out global::System.Collections.Generic.List<double> o, Ice.Current current);

            public abstract global::System.Collections.Generic.LinkedList<double> opKDoubleS(global::System.Collections.Generic.LinkedList<double> i, out global::System.Collections.Generic.LinkedList<double> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Queue<double> opQDoubleS(global::System.Collections.Generic.Queue<double> i, out global::System.Collections.Generic.Queue<double> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Stack<double> opSDoubleS(global::System.Collections.Generic.Stack<double> i, out global::System.Collections.Generic.Stack<double> o, Ice.Current current);

            public abstract string[] opAStringS(string[] i, out string[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<string> opLStringS(global::System.Collections.Generic.List<string> i, out global::System.Collections.Generic.List<string> o, Ice.Current current);

            public abstract global::System.Collections.Generic.LinkedList<string> opKStringS(global::System.Collections.Generic.LinkedList<string> i, out global::System.Collections.Generic.LinkedList<string> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Queue<string> opQStringS(global::System.Collections.Generic.Queue<string> i, out global::System.Collections.Generic.Queue<string> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Stack<string> opSStringS(global::System.Collections.Generic.Stack<string> i, out global::System.Collections.Generic.Stack<string> o, Ice.Current current);

            public abstract global::Ice.Value?[] opAObjectS(global::Ice.Value?[] i, out global::Ice.Value?[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<global::Ice.Value?> opLObjectS(global::System.Collections.Generic.List<global::Ice.Value?> i, out global::System.Collections.Generic.List<global::Ice.Value?> o, Ice.Current current);

            public abstract global::Ice.ObjectPrx?[] opAObjectPrxS(global::Ice.ObjectPrx?[] i, out global::Ice.ObjectPrx?[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<global::Ice.ObjectPrx?> opLObjectPrxS(global::System.Collections.Generic.List<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.List<global::Ice.ObjectPrx?> o, Ice.Current current);

            public abstract global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> opKObjectPrxS(global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> opQObjectPrxS(global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> opSObjectPrxS(global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> i, out global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> o, Ice.Current current);

            public abstract S[] opAStructS(S[] i, out S[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<S> opLStructS(global::System.Collections.Generic.List<S> i, out global::System.Collections.Generic.List<S> o, Ice.Current current);

            public abstract global::System.Collections.Generic.LinkedList<S> opKStructS(global::System.Collections.Generic.LinkedList<S> i, out global::System.Collections.Generic.LinkedList<S> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Queue<S> opQStructS(global::System.Collections.Generic.Queue<S> i, out global::System.Collections.Generic.Queue<S> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Stack<S> opSStructS(global::System.Collections.Generic.Stack<S> i, out global::System.Collections.Generic.Stack<S> o, Ice.Current current);

            public abstract SD[] opAStructSD(SD[] i, out SD[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<SD> opLStructSD(global::System.Collections.Generic.List<SD> i, out global::System.Collections.Generic.List<SD> o, Ice.Current current);

            public abstract global::System.Collections.Generic.LinkedList<SD> opKStructSD(global::System.Collections.Generic.LinkedList<SD> i, out global::System.Collections.Generic.LinkedList<SD> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Queue<SD> opQStructSD(global::System.Collections.Generic.Queue<SD> i, out global::System.Collections.Generic.Queue<SD> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Stack<SD> opSStructSD(global::System.Collections.Generic.Stack<SD> i, out global::System.Collections.Generic.Stack<SD> o, Ice.Current current);

            public abstract CV?[] opACVS(CV?[] i, out CV?[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<CV?> opLCVS(global::System.Collections.Generic.List<CV?> i, out global::System.Collections.Generic.List<CV?> o, Ice.Current current);

            public abstract CR?[] opACRS(CR?[] i, out CR?[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<CR?> opLCRS(global::System.Collections.Generic.List<CR?> i, out global::System.Collections.Generic.List<CR?> o, Ice.Current current);

            public abstract En[] opAEnS(En[] i, out En[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<En> opLEnS(global::System.Collections.Generic.List<En> i, out global::System.Collections.Generic.List<En> o, Ice.Current current);

            public abstract global::System.Collections.Generic.LinkedList<En> opKEnS(global::System.Collections.Generic.LinkedList<En> i, out global::System.Collections.Generic.LinkedList<En> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Queue<En> opQEnS(global::System.Collections.Generic.Queue<En> i, out global::System.Collections.Generic.Queue<En> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Stack<En> opSEnS(global::System.Collections.Generic.Stack<En> i, out global::System.Collections.Generic.Stack<En> o, Ice.Current current);

            public abstract IPrx?[] opAIPrxS(IPrx?[] i, out IPrx?[] o, Ice.Current current);

            public abstract global::System.Collections.Generic.List<IPrx?> opLIPrxS(global::System.Collections.Generic.List<IPrx?> i, out global::System.Collections.Generic.List<IPrx?> o, Ice.Current current);

            public abstract global::System.Collections.Generic.LinkedList<IPrx?> opKIPrxS(global::System.Collections.Generic.LinkedList<IPrx?> i, out global::System.Collections.Generic.LinkedList<IPrx?> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Queue<IPrx?> opQIPrxS(global::System.Collections.Generic.Queue<IPrx?> i, out global::System.Collections.Generic.Queue<IPrx?> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Stack<IPrx?> opSIPrxS(global::System.Collections.Generic.Stack<IPrx?> i, out global::System.Collections.Generic.Stack<IPrx?> o, Ice.Current current);

            public abstract global::Ice.seqMapping.Custom<int> opCustomIntS(global::Ice.seqMapping.Custom<int> i, out global::Ice.seqMapping.Custom<int> o, Ice.Current current);

            public abstract global::Ice.seqMapping.Custom<CV?> opCustomCVS(global::Ice.seqMapping.Custom<CV?> i, out global::Ice.seqMapping.Custom<CV?> o, Ice.Current current);

            public abstract global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> opCustomIntSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> i, out global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> o, Ice.Current current);

            public abstract global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> opCustomCVSS(global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> i, out global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> o, Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::MyClass";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "shutdown" => MyClass.iceD_shutdownAsync(this, request),
                    "opAByteS" => MyClass.iceD_opAByteSAsync(this, request),
                    "opLByteS" => MyClass.iceD_opLByteSAsync(this, request),
                    "opKByteS" => MyClass.iceD_opKByteSAsync(this, request),
                    "opQByteS" => MyClass.iceD_opQByteSAsync(this, request),
                    "opSByteS" => MyClass.iceD_opSByteSAsync(this, request),
                    "opABoolS" => MyClass.iceD_opABoolSAsync(this, request),
                    "opLBoolS" => MyClass.iceD_opLBoolSAsync(this, request),
                    "opKBoolS" => MyClass.iceD_opKBoolSAsync(this, request),
                    "opQBoolS" => MyClass.iceD_opQBoolSAsync(this, request),
                    "opSBoolS" => MyClass.iceD_opSBoolSAsync(this, request),
                    "opAShortS" => MyClass.iceD_opAShortSAsync(this, request),
                    "opLShortS" => MyClass.iceD_opLShortSAsync(this, request),
                    "opKShortS" => MyClass.iceD_opKShortSAsync(this, request),
                    "opQShortS" => MyClass.iceD_opQShortSAsync(this, request),
                    "opSShortS" => MyClass.iceD_opSShortSAsync(this, request),
                    "opAIntS" => MyClass.iceD_opAIntSAsync(this, request),
                    "opLIntS" => MyClass.iceD_opLIntSAsync(this, request),
                    "opKIntS" => MyClass.iceD_opKIntSAsync(this, request),
                    "opQIntS" => MyClass.iceD_opQIntSAsync(this, request),
                    "opSIntS" => MyClass.iceD_opSIntSAsync(this, request),
                    "opALongS" => MyClass.iceD_opALongSAsync(this, request),
                    "opLLongS" => MyClass.iceD_opLLongSAsync(this, request),
                    "opKLongS" => MyClass.iceD_opKLongSAsync(this, request),
                    "opQLongS" => MyClass.iceD_opQLongSAsync(this, request),
                    "opSLongS" => MyClass.iceD_opSLongSAsync(this, request),
                    "opAFloatS" => MyClass.iceD_opAFloatSAsync(this, request),
                    "opLFloatS" => MyClass.iceD_opLFloatSAsync(this, request),
                    "opKFloatS" => MyClass.iceD_opKFloatSAsync(this, request),
                    "opQFloatS" => MyClass.iceD_opQFloatSAsync(this, request),
                    "opSFloatS" => MyClass.iceD_opSFloatSAsync(this, request),
                    "opADoubleS" => MyClass.iceD_opADoubleSAsync(this, request),
                    "opLDoubleS" => MyClass.iceD_opLDoubleSAsync(this, request),
                    "opKDoubleS" => MyClass.iceD_opKDoubleSAsync(this, request),
                    "opQDoubleS" => MyClass.iceD_opQDoubleSAsync(this, request),
                    "opSDoubleS" => MyClass.iceD_opSDoubleSAsync(this, request),
                    "opAStringS" => MyClass.iceD_opAStringSAsync(this, request),
                    "opLStringS" => MyClass.iceD_opLStringSAsync(this, request),
                    "opKStringS" => MyClass.iceD_opKStringSAsync(this, request),
                    "opQStringS" => MyClass.iceD_opQStringSAsync(this, request),
                    "opSStringS" => MyClass.iceD_opSStringSAsync(this, request),
                    "opAObjectS" => MyClass.iceD_opAObjectSAsync(this, request),
                    "opLObjectS" => MyClass.iceD_opLObjectSAsync(this, request),
                    "opAObjectPrxS" => MyClass.iceD_opAObjectPrxSAsync(this, request),
                    "opLObjectPrxS" => MyClass.iceD_opLObjectPrxSAsync(this, request),
                    "opKObjectPrxS" => MyClass.iceD_opKObjectPrxSAsync(this, request),
                    "opQObjectPrxS" => MyClass.iceD_opQObjectPrxSAsync(this, request),
                    "opSObjectPrxS" => MyClass.iceD_opSObjectPrxSAsync(this, request),
                    "opAStructS" => MyClass.iceD_opAStructSAsync(this, request),
                    "opLStructS" => MyClass.iceD_opLStructSAsync(this, request),
                    "opKStructS" => MyClass.iceD_opKStructSAsync(this, request),
                    "opQStructS" => MyClass.iceD_opQStructSAsync(this, request),
                    "opSStructS" => MyClass.iceD_opSStructSAsync(this, request),
                    "opAStructSD" => MyClass.iceD_opAStructSDAsync(this, request),
                    "opLStructSD" => MyClass.iceD_opLStructSDAsync(this, request),
                    "opKStructSD" => MyClass.iceD_opKStructSDAsync(this, request),
                    "opQStructSD" => MyClass.iceD_opQStructSDAsync(this, request),
                    "opSStructSD" => MyClass.iceD_opSStructSDAsync(this, request),
                    "opACVS" => MyClass.iceD_opACVSAsync(this, request),
                    "opLCVS" => MyClass.iceD_opLCVSAsync(this, request),
                    "opACRS" => MyClass.iceD_opACRSAsync(this, request),
                    "opLCRS" => MyClass.iceD_opLCRSAsync(this, request),
                    "opAEnS" => MyClass.iceD_opAEnSAsync(this, request),
                    "opLEnS" => MyClass.iceD_opLEnSAsync(this, request),
                    "opKEnS" => MyClass.iceD_opKEnSAsync(this, request),
                    "opQEnS" => MyClass.iceD_opQEnSAsync(this, request),
                    "opSEnS" => MyClass.iceD_opSEnSAsync(this, request),
                    "opAIPrxS" => MyClass.iceD_opAIPrxSAsync(this, request),
                    "opLIPrxS" => MyClass.iceD_opLIPrxSAsync(this, request),
                    "opKIPrxS" => MyClass.iceD_opKIPrxSAsync(this, request),
                    "opQIPrxS" => MyClass.iceD_opQIPrxSAsync(this, request),
                    "opSIPrxS" => MyClass.iceD_opSIPrxSAsync(this, request),
                    "opCustomIntS" => MyClass.iceD_opCustomIntSAsync(this, request),
                    "opCustomCVS" => MyClass.iceD_opCustomCVSAsync(this, request),
                    "opCustomIntSS" => MyClass.iceD_opCustomIntSSAsync(this, request),
                    "opCustomCVSS" => MyClass.iceD_opCustomCVSSAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}

namespace Ice.seqMapping
{
    namespace Test
    {
        public partial interface MyClass
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.shutdown(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAByteSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                byte[] iceP_i;
                iceP_i = AByteSHelper.read(istr);
                istr.endEncapsulation();
                byte[] iceP_o;
                var ret = obj.opAByteS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                AByteSHelper.write(ostr, iceP_o);
                AByteSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLByteSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<byte> iceP_i;
                iceP_i = LByteSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.List<byte> iceP_o;
                var ret = obj.opLByteS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LByteSHelper.write(ostr, iceP_o);
                LByteSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opKByteSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.LinkedList<byte> iceP_i;
                iceP_i = KByteSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.LinkedList<byte> iceP_o;
                var ret = obj.opKByteS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                KByteSHelper.write(ostr, iceP_o);
                KByteSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opQByteSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Queue<byte> iceP_i;
                iceP_i = QByteSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Queue<byte> iceP_o;
                var ret = obj.opQByteS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                QByteSHelper.write(ostr, iceP_o);
                QByteSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSByteSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Stack<byte> iceP_i;
                iceP_i = SByteSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Stack<byte> iceP_o;
                var ret = obj.opSByteS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                SByteSHelper.write(ostr, iceP_o);
                SByteSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opABoolSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                bool[] iceP_i;
                iceP_i = ABoolSHelper.read(istr);
                istr.endEncapsulation();
                bool[] iceP_o;
                var ret = obj.opABoolS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ABoolSHelper.write(ostr, iceP_o);
                ABoolSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLBoolSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<bool> iceP_i;
                iceP_i = LBoolSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.List<bool> iceP_o;
                var ret = obj.opLBoolS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LBoolSHelper.write(ostr, iceP_o);
                LBoolSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opKBoolSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.LinkedList<bool> iceP_i;
                iceP_i = KBoolSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.LinkedList<bool> iceP_o;
                var ret = obj.opKBoolS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                KBoolSHelper.write(ostr, iceP_o);
                KBoolSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opQBoolSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Queue<bool> iceP_i;
                iceP_i = QBoolSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Queue<bool> iceP_o;
                var ret = obj.opQBoolS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                QBoolSHelper.write(ostr, iceP_o);
                QBoolSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSBoolSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Stack<bool> iceP_i;
                iceP_i = SBoolSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Stack<bool> iceP_o;
                var ret = obj.opSBoolS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                SBoolSHelper.write(ostr, iceP_o);
                SBoolSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAShortSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                short[] iceP_i;
                iceP_i = AShortSHelper.read(istr);
                istr.endEncapsulation();
                short[] iceP_o;
                var ret = obj.opAShortS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                AShortSHelper.write(ostr, iceP_o);
                AShortSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLShortSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<short> iceP_i;
                iceP_i = LShortSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.List<short> iceP_o;
                var ret = obj.opLShortS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LShortSHelper.write(ostr, iceP_o);
                LShortSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opKShortSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.LinkedList<short> iceP_i;
                iceP_i = KShortSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.LinkedList<short> iceP_o;
                var ret = obj.opKShortS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                KShortSHelper.write(ostr, iceP_o);
                KShortSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opQShortSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Queue<short> iceP_i;
                iceP_i = QShortSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Queue<short> iceP_o;
                var ret = obj.opQShortS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                QShortSHelper.write(ostr, iceP_o);
                QShortSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSShortSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Stack<short> iceP_i;
                iceP_i = SShortSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Stack<short> iceP_o;
                var ret = obj.opSShortS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                SShortSHelper.write(ostr, iceP_o);
                SShortSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAIntSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int[] iceP_i;
                iceP_i = AIntSHelper.read(istr);
                istr.endEncapsulation();
                int[] iceP_o;
                var ret = obj.opAIntS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                AIntSHelper.write(ostr, iceP_o);
                AIntSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLIntSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<int> iceP_i;
                iceP_i = LIntSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.List<int> iceP_o;
                var ret = obj.opLIntS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LIntSHelper.write(ostr, iceP_o);
                LIntSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opKIntSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.LinkedList<int> iceP_i;
                iceP_i = KIntSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.LinkedList<int> iceP_o;
                var ret = obj.opKIntS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                KIntSHelper.write(ostr, iceP_o);
                KIntSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opQIntSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Queue<int> iceP_i;
                iceP_i = QIntSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Queue<int> iceP_o;
                var ret = obj.opQIntS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                QIntSHelper.write(ostr, iceP_o);
                QIntSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSIntSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Stack<int> iceP_i;
                iceP_i = SIntSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Stack<int> iceP_o;
                var ret = obj.opSIntS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                SIntSHelper.write(ostr, iceP_o);
                SIntSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opALongSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                long[] iceP_i;
                iceP_i = ALongSHelper.read(istr);
                istr.endEncapsulation();
                long[] iceP_o;
                var ret = obj.opALongS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ALongSHelper.write(ostr, iceP_o);
                ALongSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLLongSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<long> iceP_i;
                iceP_i = LLongSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.List<long> iceP_o;
                var ret = obj.opLLongS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LLongSHelper.write(ostr, iceP_o);
                LLongSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opKLongSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.LinkedList<long> iceP_i;
                iceP_i = KLongSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.LinkedList<long> iceP_o;
                var ret = obj.opKLongS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                KLongSHelper.write(ostr, iceP_o);
                KLongSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opQLongSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Queue<long> iceP_i;
                iceP_i = QLongSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Queue<long> iceP_o;
                var ret = obj.opQLongS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                QLongSHelper.write(ostr, iceP_o);
                QLongSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSLongSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Stack<long> iceP_i;
                iceP_i = SLongSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Stack<long> iceP_o;
                var ret = obj.opSLongS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                SLongSHelper.write(ostr, iceP_o);
                SLongSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAFloatSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                float[] iceP_i;
                iceP_i = AFloatSHelper.read(istr);
                istr.endEncapsulation();
                float[] iceP_o;
                var ret = obj.opAFloatS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                AFloatSHelper.write(ostr, iceP_o);
                AFloatSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLFloatSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<float> iceP_i;
                iceP_i = LFloatSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.List<float> iceP_o;
                var ret = obj.opLFloatS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LFloatSHelper.write(ostr, iceP_o);
                LFloatSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opKFloatSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.LinkedList<float> iceP_i;
                iceP_i = KFloatSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.LinkedList<float> iceP_o;
                var ret = obj.opKFloatS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                KFloatSHelper.write(ostr, iceP_o);
                KFloatSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opQFloatSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Queue<float> iceP_i;
                iceP_i = QFloatSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Queue<float> iceP_o;
                var ret = obj.opQFloatS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                QFloatSHelper.write(ostr, iceP_o);
                QFloatSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSFloatSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Stack<float> iceP_i;
                iceP_i = SFloatSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Stack<float> iceP_o;
                var ret = obj.opSFloatS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                SFloatSHelper.write(ostr, iceP_o);
                SFloatSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opADoubleSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                double[] iceP_i;
                iceP_i = ADoubleSHelper.read(istr);
                istr.endEncapsulation();
                double[] iceP_o;
                var ret = obj.opADoubleS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ADoubleSHelper.write(ostr, iceP_o);
                ADoubleSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLDoubleSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<double> iceP_i;
                iceP_i = LDoubleSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.List<double> iceP_o;
                var ret = obj.opLDoubleS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LDoubleSHelper.write(ostr, iceP_o);
                LDoubleSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opKDoubleSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.LinkedList<double> iceP_i;
                iceP_i = KDoubleSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.LinkedList<double> iceP_o;
                var ret = obj.opKDoubleS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                KDoubleSHelper.write(ostr, iceP_o);
                KDoubleSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opQDoubleSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Queue<double> iceP_i;
                iceP_i = QDoubleSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Queue<double> iceP_o;
                var ret = obj.opQDoubleS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                QDoubleSHelper.write(ostr, iceP_o);
                QDoubleSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSDoubleSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Stack<double> iceP_i;
                iceP_i = SDoubleSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Stack<double> iceP_o;
                var ret = obj.opSDoubleS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                SDoubleSHelper.write(ostr, iceP_o);
                SDoubleSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAStringSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                string[] iceP_i;
                iceP_i = AStringSHelper.read(istr);
                istr.endEncapsulation();
                string[] iceP_o;
                var ret = obj.opAStringS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                AStringSHelper.write(ostr, iceP_o);
                AStringSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLStringSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<string> iceP_i;
                iceP_i = LStringSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.List<string> iceP_o;
                var ret = obj.opLStringS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LStringSHelper.write(ostr, iceP_o);
                LStringSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opKStringSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.LinkedList<string> iceP_i;
                iceP_i = KStringSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.LinkedList<string> iceP_o;
                var ret = obj.opKStringS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                KStringSHelper.write(ostr, iceP_o);
                KStringSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opQStringSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Queue<string> iceP_i;
                iceP_i = QStringSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Queue<string> iceP_o;
                var ret = obj.opQStringS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                QStringSHelper.write(ostr, iceP_o);
                QStringSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSStringSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Stack<string> iceP_i;
                iceP_i = SStringSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Stack<string> iceP_o;
                var ret = obj.opSStringS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                SStringSHelper.write(ostr, iceP_o);
                SStringSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAObjectSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::Ice.Value?[] iceP_i;
                iceP_i = AObjectSHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                global::Ice.Value?[] iceP_o;
                var ret = obj.opAObjectS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                AObjectSHelper.write(ostr, iceP_o);
                AObjectSHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLObjectSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<global::Ice.Value?> iceP_i;
                iceP_i = LObjectSHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                global::System.Collections.Generic.List<global::Ice.Value?> iceP_o;
                var ret = obj.opLObjectS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LObjectSHelper.write(ostr, iceP_o);
                LObjectSHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAObjectPrxSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::Ice.ObjectPrx?[] iceP_i;
                iceP_i = AObjectPrxSHelper.read(istr);
                istr.endEncapsulation();
                global::Ice.ObjectPrx?[] iceP_o;
                var ret = obj.opAObjectPrxS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                AObjectPrxSHelper.write(ostr, iceP_o);
                AObjectPrxSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLObjectPrxSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<global::Ice.ObjectPrx?> iceP_i;
                iceP_i = LObjectPrxSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.List<global::Ice.ObjectPrx?> iceP_o;
                var ret = obj.opLObjectPrxS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LObjectPrxSHelper.write(ostr, iceP_o);
                LObjectPrxSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opKObjectPrxSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> iceP_i;
                iceP_i = KObjectPrxSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.LinkedList<global::Ice.ObjectPrx?> iceP_o;
                var ret = obj.opKObjectPrxS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                KObjectPrxSHelper.write(ostr, iceP_o);
                KObjectPrxSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opQObjectPrxSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> iceP_i;
                iceP_i = QObjectPrxSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Queue<global::Ice.ObjectPrx?> iceP_o;
                var ret = obj.opQObjectPrxS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                QObjectPrxSHelper.write(ostr, iceP_o);
                QObjectPrxSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSObjectPrxSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> iceP_i;
                iceP_i = SObjectPrxSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Stack<global::Ice.ObjectPrx?> iceP_o;
                var ret = obj.opSObjectPrxS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                SObjectPrxSHelper.write(ostr, iceP_o);
                SObjectPrxSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAStructSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                S[] iceP_i;
                iceP_i = AStructSHelper.read(istr);
                istr.endEncapsulation();
                S[] iceP_o;
                var ret = obj.opAStructS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                AStructSHelper.write(ostr, iceP_o);
                AStructSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLStructSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<S> iceP_i;
                iceP_i = LStructSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.List<S> iceP_o;
                var ret = obj.opLStructS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LStructSHelper.write(ostr, iceP_o);
                LStructSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opKStructSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.LinkedList<S> iceP_i;
                iceP_i = KStructSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.LinkedList<S> iceP_o;
                var ret = obj.opKStructS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                KStructSHelper.write(ostr, iceP_o);
                KStructSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opQStructSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Queue<S> iceP_i;
                iceP_i = QStructSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Queue<S> iceP_o;
                var ret = obj.opQStructS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                QStructSHelper.write(ostr, iceP_o);
                QStructSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSStructSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Stack<S> iceP_i;
                iceP_i = SStructSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Stack<S> iceP_o;
                var ret = obj.opSStructS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                SStructSHelper.write(ostr, iceP_o);
                SStructSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAStructSDAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                SD[] iceP_i;
                iceP_i = AStructSDHelper.read(istr);
                istr.endEncapsulation();
                SD[] iceP_o;
                var ret = obj.opAStructSD(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                AStructSDHelper.write(ostr, iceP_o);
                AStructSDHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLStructSDAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<SD> iceP_i;
                iceP_i = LStructSDHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.List<SD> iceP_o;
                var ret = obj.opLStructSD(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LStructSDHelper.write(ostr, iceP_o);
                LStructSDHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opKStructSDAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.LinkedList<SD> iceP_i;
                iceP_i = KStructSDHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.LinkedList<SD> iceP_o;
                var ret = obj.opKStructSD(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                KStructSDHelper.write(ostr, iceP_o);
                KStructSDHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opQStructSDAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Queue<SD> iceP_i;
                iceP_i = QStructSDHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Queue<SD> iceP_o;
                var ret = obj.opQStructSD(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                QStructSDHelper.write(ostr, iceP_o);
                QStructSDHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSStructSDAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Stack<SD> iceP_i;
                iceP_i = SStructSDHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Stack<SD> iceP_o;
                var ret = obj.opSStructSD(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                SStructSDHelper.write(ostr, iceP_o);
                SStructSDHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opACVSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                CV?[] iceP_i;
                iceP_i = ACVSHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                CV?[] iceP_o;
                var ret = obj.opACVS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ACVSHelper.write(ostr, iceP_o);
                ACVSHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLCVSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<CV?> iceP_i;
                iceP_i = LCVSHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                global::System.Collections.Generic.List<CV?> iceP_o;
                var ret = obj.opLCVS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LCVSHelper.write(ostr, iceP_o);
                LCVSHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opACRSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                CR?[] iceP_i;
                iceP_i = ACRSHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                CR?[] iceP_o;
                var ret = obj.opACRS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ACRSHelper.write(ostr, iceP_o);
                ACRSHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLCRSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<CR?> iceP_i;
                iceP_i = LCRSHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                global::System.Collections.Generic.List<CR?> iceP_o;
                var ret = obj.opLCRS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LCRSHelper.write(ostr, iceP_o);
                LCRSHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAEnSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                En[] iceP_i;
                iceP_i = AEnSHelper.read(istr);
                istr.endEncapsulation();
                En[] iceP_o;
                var ret = obj.opAEnS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                AEnSHelper.write(ostr, iceP_o);
                AEnSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLEnSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<En> iceP_i;
                iceP_i = LEnSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.List<En> iceP_o;
                var ret = obj.opLEnS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LEnSHelper.write(ostr, iceP_o);
                LEnSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opKEnSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.LinkedList<En> iceP_i;
                iceP_i = KEnSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.LinkedList<En> iceP_o;
                var ret = obj.opKEnS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                KEnSHelper.write(ostr, iceP_o);
                KEnSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opQEnSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Queue<En> iceP_i;
                iceP_i = QEnSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Queue<En> iceP_o;
                var ret = obj.opQEnS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                QEnSHelper.write(ostr, iceP_o);
                QEnSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSEnSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Stack<En> iceP_i;
                iceP_i = SEnSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Stack<En> iceP_o;
                var ret = obj.opSEnS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                SEnSHelper.write(ostr, iceP_o);
                SEnSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAIPrxSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                IPrx?[] iceP_i;
                iceP_i = AIPrxSHelper.read(istr);
                istr.endEncapsulation();
                IPrx?[] iceP_o;
                var ret = obj.opAIPrxS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                AIPrxSHelper.write(ostr, iceP_o);
                AIPrxSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLIPrxSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.List<IPrx?> iceP_i;
                iceP_i = LIPrxSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.List<IPrx?> iceP_o;
                var ret = obj.opLIPrxS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LIPrxSHelper.write(ostr, iceP_o);
                LIPrxSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opKIPrxSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.LinkedList<IPrx?> iceP_i;
                iceP_i = KIPrxSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.LinkedList<IPrx?> iceP_o;
                var ret = obj.opKIPrxS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                KIPrxSHelper.write(ostr, iceP_o);
                KIPrxSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opQIPrxSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Queue<IPrx?> iceP_i;
                iceP_i = QIPrxSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Queue<IPrx?> iceP_o;
                var ret = obj.opQIPrxS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                QIPrxSHelper.write(ostr, iceP_o);
                QIPrxSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSIPrxSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Stack<IPrx?> iceP_i;
                iceP_i = SIPrxSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Stack<IPrx?> iceP_o;
                var ret = obj.opSIPrxS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                SIPrxSHelper.write(ostr, iceP_o);
                SIPrxSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCustomIntSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::Ice.seqMapping.Custom<int> iceP_i;
                iceP_i = CustomIntSHelper.read(istr);
                istr.endEncapsulation();
                global::Ice.seqMapping.Custom<int> iceP_o;
                var ret = obj.opCustomIntS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                CustomIntSHelper.write(ostr, iceP_o);
                CustomIntSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCustomCVSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::Ice.seqMapping.Custom<CV?> iceP_i;
                iceP_i = CustomCVSHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                global::Ice.seqMapping.Custom<CV?> iceP_o;
                var ret = obj.opCustomCVS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                CustomCVSHelper.write(ostr, iceP_o);
                CustomCVSHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCustomIntSSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> iceP_i;
                iceP_i = CustomIntSSHelper.read(istr);
                istr.endEncapsulation();
                global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<int>> iceP_o;
                var ret = obj.opCustomIntSS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                CustomIntSSHelper.write(ostr, iceP_o);
                CustomIntSSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCustomCVSSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> iceP_i;
                iceP_i = CustomCVSSHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                global::Ice.seqMapping.Custom<global::Ice.seqMapping.Custom<CV?>> iceP_o;
                var ret = obj.opCustomCVSS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                CustomCVSSHelper.write(ostr, iceP_o);
                CustomCVSSHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }
        }
    }
}
