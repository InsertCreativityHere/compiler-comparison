//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Ice.maxDispatches
{
    namespace Test
    {
        [Ice.SliceTypeId("::Test::TestIntf")]
        public partial interface TestIntf : Ice.Object
        {
            global::System.Threading.Tasks.Task opAsync(Ice.Current current);

            int resetMaxConcurrentDispatches(Ice.Current current);

            void shutdown(Ice.Current current);
        }
    }
}

namespace Ice.maxDispatches
{
    namespace Test
    {
        public interface TestIntfPrx : Ice.ObjectPrx
        {
            void op(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            int resetMaxConcurrentDispatches(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<int> resetMaxConcurrentDispatchesAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Ice.maxDispatches
{
    namespace Test
    {
        public sealed class TestIntfPrxHelper : Ice.ObjectPrxHelperBase, TestIntfPrx
        {
            public void op(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public int resetMaxConcurrentDispatches(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_resetMaxConcurrentDispatchesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_op(context, synchronous, completed);
                return completed.Task;
            }

            private const string _op_name = "op";

            private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _op_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<int> resetMaxConcurrentDispatchesAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_resetMaxConcurrentDispatchesAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_resetMaxConcurrentDispatchesAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_resetMaxConcurrentDispatches_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_resetMaxConcurrentDispatches(context, synchronous, completed);
                return completed.Task;
            }

            private const string _resetMaxConcurrentDispatches_name = "resetMaxConcurrentDispatches";

            private void _iceI_resetMaxConcurrentDispatches(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _resetMaxConcurrentDispatches_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public static TestIntfPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new TestIntfPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static TestIntfPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new TestIntfPrxHelper(b) : null;

            public static TestIntfPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new TestIntfPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::TestIntf"
            };

            public static string ice_staticId() => "::Test::TestIntf";

            public static void write(Ice.OutputStream ostr, TestIntfPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static TestIntfPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new TestIntfPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TestIntfPrxHelper(reference);

            private TestIntfPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private TestIntfPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }
}

namespace Ice.maxDispatches
{
    namespace Test
    {
        public abstract class TestIntfDisp_ : Ice.ObjectImpl, TestIntf
        {
            public abstract global::System.Threading.Tasks.Task opAsync(Ice.Current current);

            public abstract int resetMaxConcurrentDispatches(Ice.Current current);

            public abstract void shutdown(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::TestIntf";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "op" => TestIntf.iceD_opAsync(this, request),
                    "resetMaxConcurrentDispatches" => TestIntf.iceD_resetMaxConcurrentDispatchesAsync(this, request),
                    "shutdown" => TestIntf.iceD_shutdownAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}

namespace Ice.maxDispatches
{
    namespace Test
    {
        public partial interface TestIntf
        {
            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                await obj.opAsync(request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_resetMaxConcurrentDispatchesAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.resetMaxConcurrentDispatches(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeInt(ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
                TestIntf obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.shutdown(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }
    }
}
