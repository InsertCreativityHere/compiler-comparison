//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("TestAMD.ice")]

#pragma warning disable 1591

namespace Ice.exceptions.AMD
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::Empty")]
        public partial interface Empty : Ice.Object
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::A")]
        public partial class A : Ice.UserException
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int aMem;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public A(int aMem)
            {
                this.aMem = aMem;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public A()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id() => "::Test::A";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::A", -1, true);
                ostr_.writeInt(aMem);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                aMem = istr_.readInt();
                istr_.endSlice();
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::B")]
        public partial class B : A
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int bMem;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public B(int aMem, int bMem) : base(aMem)
            {
                this.bMem = bMem;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public B()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id() => "::Test::B";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::B", -1, false);
                ostr_.writeInt(bMem);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                bMem = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::C")]
        public partial class C : B
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int cMem;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C(int aMem, int bMem, int cMem) : base(aMem, bMem)
            {
                this.cMem = cMem;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public C()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id() => "::Test::C";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::C", -1, false);
                ostr_.writeInt(cMem);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                cMem = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::D")]
        public partial class D : Ice.UserException
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int dMem;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public D(int dMem)
            {
                this.dMem = dMem;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public D()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id() => "::Test::D";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::D", -1, true);
                ostr_.writeInt(dMem);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                dMem = istr_.readInt();
                istr_.endSlice();
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::Thrower")]
        public partial interface Thrower : Ice.Object
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task shutdownAsync(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<bool> supportsUndeclaredExceptionsAsync(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<bool> supportsAssertExceptionAsync(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwAasAAsync(int a, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwAorDasAorDAsync(int a, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwBasAAsync(int a, int b, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwCasAAsync(int a, int b, int c, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwBasBAsync(int a, int b, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwCasBAsync(int a, int b, int c, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwCasCAsync(int a, int b, int c, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwUndeclaredAAsync(int a, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwUndeclaredBAsync(int a, int b, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwUndeclaredCAsync(int a, int b, int c, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwLocalExceptionAsync(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwNonIceExceptionAsync(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwAssertExceptionAsync(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task<byte[]> throwMemoryLimitExceptionAsync(byte[] seq, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwLocalExceptionIdempotentAsync(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwAfterResponseAsync(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task throwAfterExceptionAsync(Ice.Current current);
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::WrongOperation")]
        public partial interface WrongOperation : Ice.Object
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Threading.Tasks.Task noSuchOperationAsync(Ice.Current current);
        }
    }
}

namespace Ice.exceptions.AMD
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface EmptyPrx : Ice.ObjectPrx
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface ThrowerPrx : Ice.ObjectPrx
        {
            void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            bool supportsUndeclaredExceptions(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<bool> supportsUndeclaredExceptionsAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            bool supportsAssertException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<bool> supportsAssertExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwAasA(int a, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwAasAAsync(int a, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwAorDasAorD(int a, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwAorDasAorDAsync(int a, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwBasA(int a, int b, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwBasAAsync(int a, int b, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwCasA(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwCasAAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwBasB(int a, int b, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwBasBAsync(int a, int b, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwCasB(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwCasBAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwCasC(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwCasCAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwUndeclaredA(int a, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwUndeclaredAAsync(int a, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwUndeclaredB(int a, int b, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwUndeclaredBAsync(int a, int b, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwUndeclaredC(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwUndeclaredCAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwLocalException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwLocalExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwNonIceException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwNonIceExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwAssertException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwAssertExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            byte[] throwMemoryLimitException(byte[] seq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<byte[]> throwMemoryLimitExceptionAsync(byte[] seq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwLocalExceptionIdempotent(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwLocalExceptionIdempotentAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwAfterResponse(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwAfterResponseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwAfterException(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwAfterExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface WrongOperationPrx : Ice.ObjectPrx
        {
            void noSuchOperation(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task noSuchOperationAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Ice.exceptions.AMD
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class EmptyPrxHelper : Ice.ObjectPrxHelperBase, EmptyPrx
        {
            public static EmptyPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new EmptyPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static EmptyPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new EmptyPrxHelper(b) : null;

            public static EmptyPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static EmptyPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new EmptyPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static EmptyPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Empty"
            };

            public static string ice_staticId() => "::Test::Empty";

            public static void write(Ice.OutputStream ostr, EmptyPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static EmptyPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new EmptyPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new EmptyPrxHelper(reference);

            private EmptyPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private EmptyPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ThrowerPrxHelper : Ice.ObjectPrxHelperBase, ThrowerPrx
        {
            public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public bool supportsUndeclaredExceptions(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_supportsUndeclaredExceptionsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public bool supportsAssertException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_supportsAssertExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwAasA(int a, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwAasAAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwAorDasAorD(int a, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwAorDasAorDAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwBasA(int a, int b, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwBasAAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwCasA(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwCasAAsync(a, b, c, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwBasB(int a, int b, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwBasBAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwCasB(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwCasBAsync(a, b, c, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwCasC(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwCasCAsync(a, b, c, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwUndeclaredA(int a, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwUndeclaredAAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwUndeclaredB(int a, int b, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwUndeclaredBAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwUndeclaredC(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwUndeclaredCAsync(a, b, c, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwLocalException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwLocalExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwNonIceException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwNonIceExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwAssertException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwAssertExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public byte[] throwMemoryLimitException(byte[] seq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_throwMemoryLimitExceptionAsync(seq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwLocalExceptionIdempotent(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwLocalExceptionIdempotentAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwAfterResponse(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwAfterResponseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwAfterException(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwAfterExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<bool> supportsUndeclaredExceptionsAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_supportsUndeclaredExceptionsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_supportsUndeclaredExceptionsAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_supportsUndeclaredExceptions_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_supportsUndeclaredExceptions(context, synchronous, completed);
                return completed.Task;
            }

            private const string _supportsUndeclaredExceptions_name = "supportsUndeclaredExceptions";

            private void _iceI_supportsUndeclaredExceptions(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _supportsUndeclaredExceptions_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<bool> supportsAssertExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_supportsAssertExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_supportsAssertExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_supportsAssertException_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_supportsAssertException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _supportsAssertException_name = "supportsAssertException";

            private void _iceI_supportsAssertException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _supportsAssertException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task throwAasAAsync(int a, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwAasAAsync(a, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwAasAAsync(int iceP_a, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwAasA_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwAasA(iceP_a, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwAasA_name = "throwAasA";

            private void _iceI_throwAasA(int iceP_a, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwAasA_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(A)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwAorDasAorDAsync(int a, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwAorDasAorDAsync(a, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwAorDasAorDAsync(int iceP_a, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwAorDasAorD_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwAorDasAorD(iceP_a, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwAorDasAorD_name = "throwAorDasAorD";

            private void _iceI_throwAorDasAorD(int iceP_a, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwAorDasAorD_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(A)
                        {
                            throw;
                        }
                        catch(D)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwBasAAsync(int a, int b, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwBasAAsync(a, b, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwBasAAsync(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwBasA_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwBasA(iceP_a, iceP_b, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwBasA_name = "throwBasA";

            private void _iceI_throwBasA(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwBasA_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(A)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwCasAAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwCasAAsync(a, b, c, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwCasAAsync(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwCasA_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwCasA(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwCasA_name = "throwCasA";

            private void _iceI_throwCasA(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwCasA_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                        ostr.writeInt(iceP_c);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(A)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwBasBAsync(int a, int b, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwBasBAsync(a, b, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwBasBAsync(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwBasB_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwBasB(iceP_a, iceP_b, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwBasB_name = "throwBasB";

            private void _iceI_throwBasB(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwBasB_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(B)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwCasBAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwCasBAsync(a, b, c, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwCasBAsync(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwCasB_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwCasB(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwCasB_name = "throwCasB";

            private void _iceI_throwCasB(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwCasB_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                        ostr.writeInt(iceP_c);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(B)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwCasCAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwCasCAsync(a, b, c, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwCasCAsync(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwCasC_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwCasC(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwCasC_name = "throwCasC";

            private void _iceI_throwCasC(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwCasC_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                        ostr.writeInt(iceP_c);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(C)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwUndeclaredAAsync(int a, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwUndeclaredAAsync(a, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwUndeclaredAAsync(int iceP_a, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwUndeclaredA(iceP_a, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwUndeclaredA_name = "throwUndeclaredA";

            private void _iceI_throwUndeclaredA(int iceP_a, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwUndeclaredA_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                    });
            }

            public global::System.Threading.Tasks.Task throwUndeclaredBAsync(int a, int b, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwUndeclaredBAsync(a, b, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwUndeclaredBAsync(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwUndeclaredB(iceP_a, iceP_b, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwUndeclaredB_name = "throwUndeclaredB";

            private void _iceI_throwUndeclaredB(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwUndeclaredB_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                    });
            }

            public global::System.Threading.Tasks.Task throwUndeclaredCAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwUndeclaredCAsync(a, b, c, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwUndeclaredCAsync(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwUndeclaredC(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwUndeclaredC_name = "throwUndeclaredC";

            private void _iceI_throwUndeclaredC(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwUndeclaredC_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                        ostr.writeInt(iceP_c);
                    });
            }

            public global::System.Threading.Tasks.Task throwLocalExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwLocalExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwLocalExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwLocalException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwLocalException_name = "throwLocalException";

            private void _iceI_throwLocalException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwLocalException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task throwNonIceExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwNonIceExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwNonIceExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwNonIceException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwNonIceException_name = "throwNonIceException";

            private void _iceI_throwNonIceException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwNonIceException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task throwAssertExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwAssertExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwAssertExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwAssertException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwAssertException_name = "throwAssertException";

            private void _iceI_throwAssertException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwAssertException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<byte[]> throwMemoryLimitExceptionAsync(byte[] seq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwMemoryLimitExceptionAsync(seq, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte[]> _iceI_throwMemoryLimitExceptionAsync(byte[] iceP_seq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwMemoryLimitException_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
                _iceI_throwMemoryLimitException(iceP_seq, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwMemoryLimitException_name = "throwMemoryLimitException";

            private void _iceI_throwMemoryLimitException(byte[] iceP_seq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte[]>(completed);
                outAsync.invoke(
                    _throwMemoryLimitException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        global::Ice.ByteSeqHelper.write(ostr, iceP_seq);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        byte[] ret;
                        ret = global::Ice.ByteSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task throwLocalExceptionIdempotentAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwLocalExceptionIdempotentAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwLocalExceptionIdempotentAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwLocalExceptionIdempotent(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwLocalExceptionIdempotent_name = "throwLocalExceptionIdempotent";

            private void _iceI_throwLocalExceptionIdempotent(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwLocalExceptionIdempotent_name,
                    Ice.OperationMode.Idempotent,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task throwAfterResponseAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwAfterResponseAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwAfterResponseAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwAfterResponse(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwAfterResponse_name = "throwAfterResponse";

            private void _iceI_throwAfterResponse(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwAfterResponse_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task throwAfterExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwAfterExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwAfterExceptionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwAfterException_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwAfterException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwAfterException_name = "throwAfterException";

            private void _iceI_throwAfterException(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwAfterException_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(A)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public static ThrowerPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new ThrowerPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static ThrowerPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new ThrowerPrxHelper(b) : null;

            public static ThrowerPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ThrowerPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new ThrowerPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ThrowerPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Thrower"
            };

            public static string ice_staticId() => "::Test::Thrower";

            public static void write(Ice.OutputStream ostr, ThrowerPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static ThrowerPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new ThrowerPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new ThrowerPrxHelper(reference);

            private ThrowerPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private ThrowerPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class WrongOperationPrxHelper : Ice.ObjectPrxHelperBase, WrongOperationPrx
        {
            public void noSuchOperation(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_noSuchOperationAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task noSuchOperationAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_noSuchOperationAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_noSuchOperationAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_noSuchOperation(context, synchronous, completed);
                return completed.Task;
            }

            private const string _noSuchOperation_name = "noSuchOperation";

            private void _iceI_noSuchOperation(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _noSuchOperation_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public static WrongOperationPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new WrongOperationPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static WrongOperationPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new WrongOperationPrxHelper(b) : null;

            public static WrongOperationPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static WrongOperationPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new WrongOperationPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static WrongOperationPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::WrongOperation"
            };

            public static string ice_staticId() => "::Test::WrongOperation";

            public static void write(Ice.OutputStream ostr, WrongOperationPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static WrongOperationPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new WrongOperationPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new WrongOperationPrxHelper(reference);

            private WrongOperationPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private WrongOperationPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }
}

namespace Ice.exceptions.AMD
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class EmptyDisp_ : Ice.ObjectImpl, Empty
        {
            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Empty";
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class ThrowerDisp_ : Ice.ObjectImpl, Thrower
        {
            public abstract global::System.Threading.Tasks.Task shutdownAsync(Ice.Current current);

            public abstract global::System.Threading.Tasks.Task<bool> supportsUndeclaredExceptionsAsync(Ice.Current current);

            public abstract global::System.Threading.Tasks.Task<bool> supportsAssertExceptionAsync(Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwAasAAsync(int a, Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwAorDasAorDAsync(int a, Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwBasAAsync(int a, int b, Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwCasAAsync(int a, int b, int c, Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwBasBAsync(int a, int b, Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwCasBAsync(int a, int b, int c, Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwCasCAsync(int a, int b, int c, Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwUndeclaredAAsync(int a, Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwUndeclaredBAsync(int a, int b, Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwUndeclaredCAsync(int a, int b, int c, Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwLocalExceptionAsync(Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwNonIceExceptionAsync(Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwAssertExceptionAsync(Ice.Current current);

            public abstract global::System.Threading.Tasks.Task<byte[]> throwMemoryLimitExceptionAsync(byte[] seq, Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwLocalExceptionIdempotentAsync(Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwAfterResponseAsync(Ice.Current current);

            public abstract global::System.Threading.Tasks.Task throwAfterExceptionAsync(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Thrower";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "shutdown" => Thrower.iceD_shutdownAsync(this, request),
                    "supportsUndeclaredExceptions" => Thrower.iceD_supportsUndeclaredExceptionsAsync(this, request),
                    "supportsAssertException" => Thrower.iceD_supportsAssertExceptionAsync(this, request),
                    "throwAasA" => Thrower.iceD_throwAasAAsync(this, request),
                    "throwAorDasAorD" => Thrower.iceD_throwAorDasAorDAsync(this, request),
                    "throwBasA" => Thrower.iceD_throwBasAAsync(this, request),
                    "throwCasA" => Thrower.iceD_throwCasAAsync(this, request),
                    "throwBasB" => Thrower.iceD_throwBasBAsync(this, request),
                    "throwCasB" => Thrower.iceD_throwCasBAsync(this, request),
                    "throwCasC" => Thrower.iceD_throwCasCAsync(this, request),
                    "throwUndeclaredA" => Thrower.iceD_throwUndeclaredAAsync(this, request),
                    "throwUndeclaredB" => Thrower.iceD_throwUndeclaredBAsync(this, request),
                    "throwUndeclaredC" => Thrower.iceD_throwUndeclaredCAsync(this, request),
                    "throwLocalException" => Thrower.iceD_throwLocalExceptionAsync(this, request),
                    "throwNonIceException" => Thrower.iceD_throwNonIceExceptionAsync(this, request),
                    "throwAssertException" => Thrower.iceD_throwAssertExceptionAsync(this, request),
                    "throwMemoryLimitException" => Thrower.iceD_throwMemoryLimitExceptionAsync(this, request),
                    "throwLocalExceptionIdempotent" => Thrower.iceD_throwLocalExceptionIdempotentAsync(this, request),
                    "throwAfterResponse" => Thrower.iceD_throwAfterResponseAsync(this, request),
                    "throwAfterException" => Thrower.iceD_throwAfterExceptionAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class WrongOperationDisp_ : Ice.ObjectImpl, WrongOperation
        {
            public abstract global::System.Threading.Tasks.Task noSuchOperationAsync(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::WrongOperation";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "noSuchOperation" => WrongOperation.iceD_noSuchOperationAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}

namespace Ice.exceptions.AMD
{
    namespace Test
    {
        public partial interface Thrower
        {
            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                await obj.shutdownAsync(request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_supportsUndeclaredExceptionsAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var result = await obj.supportsUndeclaredExceptionsAsync(request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createOutgoingResponse(
                    request.current,
                    result,
                    static (ostr, ret) =>
                    {
                        ostr.writeBool(ret);
                    });
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_supportsAssertExceptionAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var result = await obj.supportsAssertExceptionAsync(request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createOutgoingResponse(
                    request.current,
                    result,
                    static (ostr, ret) =>
                    {
                        ostr.writeBool(ret);
                    });
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwAasAAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_a;
                iceP_a = istr.readInt();
                istr.endEncapsulation();
                await obj.throwAasAAsync(iceP_a, request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwAorDasAorDAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_a;
                iceP_a = istr.readInt();
                istr.endEncapsulation();
                await obj.throwAorDasAorDAsync(iceP_a, request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwBasAAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_a;
                int iceP_b;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                istr.endEncapsulation();
                await obj.throwBasAAsync(iceP_a, iceP_b, request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwCasAAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_a;
                int iceP_b;
                int iceP_c;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                iceP_c = istr.readInt();
                istr.endEncapsulation();
                await obj.throwCasAAsync(iceP_a, iceP_b, iceP_c, request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwBasBAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_a;
                int iceP_b;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                istr.endEncapsulation();
                await obj.throwBasBAsync(iceP_a, iceP_b, request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwCasBAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_a;
                int iceP_b;
                int iceP_c;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                iceP_c = istr.readInt();
                istr.endEncapsulation();
                await obj.throwCasBAsync(iceP_a, iceP_b, iceP_c, request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwCasCAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_a;
                int iceP_b;
                int iceP_c;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                iceP_c = istr.readInt();
                istr.endEncapsulation();
                await obj.throwCasCAsync(iceP_a, iceP_b, iceP_c, request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwUndeclaredAAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_a;
                iceP_a = istr.readInt();
                istr.endEncapsulation();
                await obj.throwUndeclaredAAsync(iceP_a, request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwUndeclaredBAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_a;
                int iceP_b;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                istr.endEncapsulation();
                await obj.throwUndeclaredBAsync(iceP_a, iceP_b, request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwUndeclaredCAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_a;
                int iceP_b;
                int iceP_c;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                iceP_c = istr.readInt();
                istr.endEncapsulation();
                await obj.throwUndeclaredCAsync(iceP_a, iceP_b, iceP_c, request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwLocalExceptionAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                await obj.throwLocalExceptionAsync(request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwNonIceExceptionAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                await obj.throwNonIceExceptionAsync(request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwAssertExceptionAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                await obj.throwAssertExceptionAsync(request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwMemoryLimitExceptionAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                byte[] iceP_seq;
                iceP_seq = global::Ice.ByteSeqHelper.read(istr);
                istr.endEncapsulation();
                var result = await obj.throwMemoryLimitExceptionAsync(iceP_seq, request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createOutgoingResponse(
                    request.current,
                    result,
                    static (ostr, ret) =>
                    {
                        global::Ice.ByteSeqHelper.write(ostr, ret);
                    });
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwLocalExceptionIdempotentAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                await obj.throwLocalExceptionIdempotentAsync(request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwAfterResponseAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                await obj.throwAfterResponseAsync(request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwAfterExceptionAsync(
                Thrower obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                await obj.throwAfterExceptionAsync(request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }
        }

        public partial interface WrongOperation
        {
            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_noSuchOperationAsync(
                WrongOperation obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                await obj.noSuchOperationAsync(request.current).ConfigureAwait(false);
                return Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current);
            }
        }
    }
}
