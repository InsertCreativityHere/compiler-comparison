//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ice.exceptions.AMD
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface Empty : global::Ice.Object, EmptyOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class A : global::Ice.UserException
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public int aMem;

            #endregion

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            private void _initDM()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public A()
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public A(global::System.Exception ex) : base(ex)
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public A(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                this.aMem = info.GetInt32("aMem");
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            private void _initDM(int aMem)
            {
                this.aMem = aMem;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public A(int aMem)
            {
                _initDM(aMem);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public A(int aMem, global::System.Exception ex) : base(ex)
            {
                _initDM(aMem);
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public override string ice_id()
            {
                return "::Test::A";
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::A", -1, true);
                ostr_.writeInt(aMem);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                aMem = istr_.readInt();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class B : A
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public int bMem;

            #endregion

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            private void _initDM()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public B()
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public B(global::System.Exception ex) : base(ex)
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public B(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                this.bMem = info.GetInt32("bMem");
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            private void _initDM(int bMem)
            {
                this.bMem = bMem;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public B(int aMem, int bMem) : base(aMem)
            {
                _initDM(bMem);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public B(int aMem, int bMem, global::System.Exception ex) : base(aMem, ex)
            {
                _initDM(bMem);
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public override string ice_id()
            {
                return "::Test::B";
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::B", -1, false);
                ostr_.writeInt(bMem);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                bMem = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class C : B
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public int cMem;

            #endregion

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            private void _initDM()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public C()
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public C(global::System.Exception ex) : base(ex)
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public C(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                this.cMem = info.GetInt32("cMem");
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            private void _initDM(int cMem)
            {
                this.cMem = cMem;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public C(int aMem, int bMem, int cMem) : base(aMem, bMem)
            {
                _initDM(cMem);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public C(int aMem, int bMem, int cMem, global::System.Exception ex) : base(aMem, bMem, ex)
            {
                _initDM(cMem);
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public override string ice_id()
            {
                return "::Test::C";
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::C", -1, false);
                ostr_.writeInt(cMem);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                cMem = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class D : global::Ice.UserException
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public int dMem;

            #endregion

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            private void _initDM()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public D()
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public D(global::System.Exception ex) : base(ex)
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public D(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                this.dMem = info.GetInt32("dMem");
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            private void _initDM(int dMem)
            {
                this.dMem = dMem;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public D(int dMem)
            {
                _initDM(dMem);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public D(int dMem, global::System.Exception ex) : base(ex)
            {
                _initDM(dMem);
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            public override string ice_id()
            {
                return "::Test::D";
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::D", -1, true);
                ostr_.writeInt(dMem);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                dMem = istr_.readInt();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface Thrower : global::Ice.Object, ThrowerOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface WrongOperation : global::Ice.Object, WrongOperationOperations_
        {
        }
    }
}

namespace Ice.exceptions.AMD.TypeId.Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class A
    {
        public abstract global::Ice.exceptions.AMD.Test.A targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class B
    {
        public abstract global::Ice.exceptions.AMD.Test.B targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class C
    {
        public abstract global::Ice.exceptions.AMD.Test.C targetClass { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class D
    {
        public abstract global::Ice.exceptions.AMD.Test.D targetClass { get; }
    }
}

namespace Ice.exceptions.AMD
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_shutdown();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_supportsUndeclaredExceptions(bool ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_supportsAssertException(bool ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwAasA();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwAorDasAorD();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwBasA();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwCasA();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwBasB();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwCasB();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwCasC();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwUndeclaredA();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwUndeclaredB();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwUndeclaredC();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwLocalException();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwNonIceException();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwAssertException();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwMemoryLimitException(byte[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwLocalExceptionIdempotent();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwAfterResponse();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_Thrower_throwAfterException();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public delegate void Callback_WrongOperation_noSuchOperation();
    }
}

namespace Ice.exceptions.AMD
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public interface EmptyPrx : global::Ice.ObjectPrx
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public interface ThrowerPrx : global::Ice.ObjectPrx
        {
            void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_shutdown(global::Ice.AsyncResult asyncResult);

            bool supportsUndeclaredExceptions(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<bool> supportsUndeclaredExceptionsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_supportsUndeclaredExceptions> begin_supportsUndeclaredExceptions(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_supportsUndeclaredExceptions(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_supportsUndeclaredExceptions(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            bool end_supportsUndeclaredExceptions(global::Ice.AsyncResult asyncResult);

            bool supportsAssertException(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<bool> supportsAssertExceptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_supportsAssertException> begin_supportsAssertException(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_supportsAssertException(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_supportsAssertException(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            bool end_supportsAssertException(global::Ice.AsyncResult asyncResult);

            void throwAasA(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwAasAAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwAasA> begin_throwAasA(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwAasA(int a, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwAasA(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwAasA(global::Ice.AsyncResult asyncResult);

            void throwAorDasAorD(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwAorDasAorDAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwAorDasAorD> begin_throwAorDasAorD(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwAorDasAorD(int a, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwAorDasAorD(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwAorDasAorD(global::Ice.AsyncResult asyncResult);

            void throwBasA(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwBasAAsync(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwBasA> begin_throwBasA(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwBasA(int a, int b, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwBasA(int a, int b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwBasA(global::Ice.AsyncResult asyncResult);

            void throwCasA(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwCasAAsync(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwCasA> begin_throwCasA(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwCasA(int a, int b, int c, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwCasA(int a, int b, int c, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwCasA(global::Ice.AsyncResult asyncResult);

            void throwBasB(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwBasBAsync(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwBasB> begin_throwBasB(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwBasB(int a, int b, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwBasB(int a, int b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwBasB(global::Ice.AsyncResult asyncResult);

            void throwCasB(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwCasBAsync(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwCasB> begin_throwCasB(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwCasB(int a, int b, int c, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwCasB(int a, int b, int c, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwCasB(global::Ice.AsyncResult asyncResult);

            void throwCasC(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwCasCAsync(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwCasC> begin_throwCasC(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwCasC(int a, int b, int c, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwCasC(int a, int b, int c, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwCasC(global::Ice.AsyncResult asyncResult);

            void throwUndeclaredA(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwUndeclaredAAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwUndeclaredA> begin_throwUndeclaredA(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwUndeclaredA(int a, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwUndeclaredA(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwUndeclaredA(global::Ice.AsyncResult asyncResult);

            void throwUndeclaredB(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwUndeclaredBAsync(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwUndeclaredB> begin_throwUndeclaredB(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwUndeclaredB(int a, int b, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwUndeclaredB(int a, int b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwUndeclaredB(global::Ice.AsyncResult asyncResult);

            void throwUndeclaredC(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwUndeclaredCAsync(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwUndeclaredC> begin_throwUndeclaredC(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwUndeclaredC(int a, int b, int c, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwUndeclaredC(int a, int b, int c, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwUndeclaredC(global::Ice.AsyncResult asyncResult);

            void throwLocalException(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwLocalExceptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwLocalException> begin_throwLocalException(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwLocalException(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwLocalException(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwLocalException(global::Ice.AsyncResult asyncResult);

            void throwNonIceException(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwNonIceExceptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwNonIceException> begin_throwNonIceException(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwNonIceException(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwNonIceException(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwNonIceException(global::Ice.AsyncResult asyncResult);

            void throwAssertException(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwAssertExceptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwAssertException> begin_throwAssertException(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwAssertException(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwAssertException(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwAssertException(global::Ice.AsyncResult asyncResult);

            byte[] throwMemoryLimitException(byte[] seq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<byte[]> throwMemoryLimitExceptionAsync(byte[] seq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwMemoryLimitException> begin_throwMemoryLimitException(byte[] seq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwMemoryLimitException(byte[] seq, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwMemoryLimitException(byte[] seq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            byte[] end_throwMemoryLimitException(global::Ice.AsyncResult asyncResult);

            void throwLocalExceptionIdempotent(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwLocalExceptionIdempotentAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwLocalExceptionIdempotent> begin_throwLocalExceptionIdempotent(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwLocalExceptionIdempotent(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwLocalExceptionIdempotent(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwLocalExceptionIdempotent(global::Ice.AsyncResult asyncResult);

            void throwAfterResponse(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwAfterResponseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwAfterResponse> begin_throwAfterResponse(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwAfterResponse(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwAfterResponse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwAfterResponse(global::Ice.AsyncResult asyncResult);

            void throwAfterException(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task throwAfterExceptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Thrower_throwAfterException> begin_throwAfterException(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_throwAfterException(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_throwAfterException(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_throwAfterException(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public interface WrongOperationPrx : global::Ice.ObjectPrx
        {
            void noSuchOperation(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task noSuchOperationAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_WrongOperation_noSuchOperation> begin_noSuchOperation(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_noSuchOperation(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_noSuchOperation(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_noSuchOperation(global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace Ice.exceptions.AMD
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public interface EmptyOperations_
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public interface ThrowerOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task shutdownAsync(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task<bool> supportsUndeclaredExceptionsAsync(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task<bool> supportsAssertExceptionAsync(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwAasAAsync(int a, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwAorDasAorDAsync(int a, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwBasAAsync(int a, int b, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwCasAAsync(int a, int b, int c, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwBasBAsync(int a, int b, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwCasBAsync(int a, int b, int c, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwCasCAsync(int a, int b, int c, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwUndeclaredAAsync(int a, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwUndeclaredBAsync(int a, int b, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwUndeclaredCAsync(int a, int b, int c, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwLocalExceptionAsync(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwNonIceExceptionAsync(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwAssertExceptionAsync(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task<byte[]> throwMemoryLimitExceptionAsync(byte[] seq, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwLocalExceptionIdempotentAsync(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwAfterResponseAsync(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task throwAfterExceptionAsync(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public interface WrongOperationOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
            global::System.Threading.Tasks.Task noSuchOperationAsync(global::Ice.Current current = null);
        }
    }
}

namespace Ice.exceptions.AMD
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        [global::System.Serializable]
        public sealed class EmptyPrxHelper : global::Ice.ObjectPrxHelperBase, EmptyPrx
        {
            public EmptyPrxHelper()
            {
            }

            public EmptyPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Async Task operations

            #endregion

            #region Asynchronous operations

            #endregion

            #region Checked and unchecked cast operations

            public static EmptyPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                EmptyPrx r = b as EmptyPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    EmptyPrxHelper h = new EmptyPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static EmptyPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                EmptyPrx r = b as EmptyPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    EmptyPrxHelper h = new EmptyPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static EmptyPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        EmptyPrxHelper h = new EmptyPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static EmptyPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        EmptyPrxHelper h = new EmptyPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static EmptyPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                EmptyPrx r = b as EmptyPrx;
                if(r == null)
                {
                    EmptyPrxHelper h = new EmptyPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static EmptyPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                EmptyPrxHelper h = new EmptyPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Empty"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, EmptyPrx v)
            {
                ostr.writeProxy(v);
            }

            public static EmptyPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    EmptyPrxHelper result = new EmptyPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        [global::System.Serializable]
        public sealed class ThrowerPrxHelper : global::Ice.ObjectPrxHelperBase, ThrowerPrx
        {
            public ThrowerPrxHelper()
            {
            }

            public ThrowerPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool supportsUndeclaredExceptions(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_supportsUndeclaredExceptionsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool supportsAssertException(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_supportsAssertExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwAasA(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwAasAAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwAorDasAorD(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwAorDasAorDAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwBasA(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwBasAAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwCasA(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwCasAAsync(a, b, c, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwBasB(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwBasBAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwCasB(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwCasBAsync(a, b, c, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwCasC(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwCasCAsync(a, b, c, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwUndeclaredA(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwUndeclaredAAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwUndeclaredB(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwUndeclaredBAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwUndeclaredC(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwUndeclaredCAsync(a, b, c, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwLocalException(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwLocalExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwNonIceException(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwNonIceExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwAssertException(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwAssertExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[] throwMemoryLimitException(byte[] seq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_throwMemoryLimitExceptionAsync(seq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwLocalExceptionIdempotent(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwLocalExceptionIdempotentAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwAfterResponse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwAfterResponseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void throwAfterException(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_throwAfterExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<bool> supportsUndeclaredExceptionsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_supportsUndeclaredExceptionsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_supportsUndeclaredExceptionsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_supportsUndeclaredExceptions_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_supportsUndeclaredExceptions(context, synchronous, completed);
                return completed.Task;
            }

            private const string _supportsUndeclaredExceptions_name = "supportsUndeclaredExceptions";

            private void _iceI_supportsUndeclaredExceptions(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _supportsUndeclaredExceptions_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<bool> supportsAssertExceptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_supportsAssertExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_supportsAssertExceptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_supportsAssertException_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_supportsAssertException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _supportsAssertException_name = "supportsAssertException";

            private void _iceI_supportsAssertException(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _supportsAssertException_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task throwAasAAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwAasAAsync(a, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwAasAAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwAasA_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwAasA(iceP_a, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwAasA_name = "throwAasA";

            private void _iceI_throwAasA(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwAasA_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(A)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwAorDasAorDAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwAorDasAorDAsync(a, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwAorDasAorDAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwAorDasAorD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwAorDasAorD(iceP_a, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwAorDasAorD_name = "throwAorDasAorD";

            private void _iceI_throwAorDasAorD(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwAorDasAorD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(A)
                        {
                            throw;
                        }
                        catch(D)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwBasAAsync(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwBasAAsync(a, b, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwBasAAsync(int iceP_a, int iceP_b, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwBasA_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwBasA(iceP_a, iceP_b, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwBasA_name = "throwBasA";

            private void _iceI_throwBasA(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwBasA_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(A)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwCasAAsync(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwCasAAsync(a, b, c, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwCasAAsync(int iceP_a, int iceP_b, int iceP_c, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwCasA_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwCasA(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwCasA_name = "throwCasA";

            private void _iceI_throwCasA(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwCasA_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                        ostr.writeInt(iceP_c);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(A)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwBasBAsync(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwBasBAsync(a, b, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwBasBAsync(int iceP_a, int iceP_b, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwBasB_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwBasB(iceP_a, iceP_b, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwBasB_name = "throwBasB";

            private void _iceI_throwBasB(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwBasB_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(B)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwCasBAsync(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwCasBAsync(a, b, c, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwCasBAsync(int iceP_a, int iceP_b, int iceP_c, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwCasB_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwCasB(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwCasB_name = "throwCasB";

            private void _iceI_throwCasB(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwCasB_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                        ostr.writeInt(iceP_c);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(B)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwCasCAsync(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwCasCAsync(a, b, c, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwCasCAsync(int iceP_a, int iceP_b, int iceP_c, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwCasC_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwCasC(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwCasC_name = "throwCasC";

            private void _iceI_throwCasC(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwCasC_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                        ostr.writeInt(iceP_c);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(C)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwUndeclaredAAsync(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwUndeclaredAAsync(a, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwUndeclaredAAsync(int iceP_a, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwUndeclaredA(iceP_a, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwUndeclaredA_name = "throwUndeclaredA";

            private void _iceI_throwUndeclaredA(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwUndeclaredA_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                    });
            }

            public global::System.Threading.Tasks.Task throwUndeclaredBAsync(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwUndeclaredBAsync(a, b, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwUndeclaredBAsync(int iceP_a, int iceP_b, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwUndeclaredB(iceP_a, iceP_b, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwUndeclaredB_name = "throwUndeclaredB";

            private void _iceI_throwUndeclaredB(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwUndeclaredB_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                    });
            }

            public global::System.Threading.Tasks.Task throwUndeclaredCAsync(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwUndeclaredCAsync(a, b, c, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwUndeclaredCAsync(int iceP_a, int iceP_b, int iceP_c, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwUndeclaredC(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwUndeclaredC_name = "throwUndeclaredC";

            private void _iceI_throwUndeclaredC(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwUndeclaredC_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_a);
                        ostr.writeInt(iceP_b);
                        ostr.writeInt(iceP_c);
                    });
            }

            public global::System.Threading.Tasks.Task throwLocalExceptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwLocalExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwLocalExceptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwLocalException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwLocalException_name = "throwLocalException";

            private void _iceI_throwLocalException(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwLocalException_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task throwNonIceExceptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwNonIceExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwNonIceExceptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwNonIceException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwNonIceException_name = "throwNonIceException";

            private void _iceI_throwNonIceException(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwNonIceException_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task throwAssertExceptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwAssertExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwAssertExceptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwAssertException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwAssertException_name = "throwAssertException";

            private void _iceI_throwAssertException(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwAssertException_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<byte[]> throwMemoryLimitExceptionAsync(byte[] seq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwMemoryLimitExceptionAsync(seq, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte[]> _iceI_throwMemoryLimitExceptionAsync(byte[] iceP_seq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwMemoryLimitException_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
                _iceI_throwMemoryLimitException(iceP_seq, context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwMemoryLimitException_name = "throwMemoryLimitException";

            private void _iceI_throwMemoryLimitException(byte[] iceP_seq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte[]>(completed);
                outAsync.invoke(
                    _throwMemoryLimitException_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        global::Ice.ByteSeqHelper.write(ostr, iceP_seq);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        byte[] ret;
                        ret = global::Ice.ByteSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task throwLocalExceptionIdempotentAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwLocalExceptionIdempotentAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwLocalExceptionIdempotentAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwLocalExceptionIdempotent(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwLocalExceptionIdempotent_name = "throwLocalExceptionIdempotent";

            private void _iceI_throwLocalExceptionIdempotent(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwLocalExceptionIdempotent_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task throwAfterResponseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwAfterResponseAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwAfterResponseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwAfterResponse(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwAfterResponse_name = "throwAfterResponse";

            private void _iceI_throwAfterResponse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwAfterResponse_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task throwAfterExceptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_throwAfterExceptionAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwAfterExceptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwAfterException_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwAfterException(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwAfterException_name = "throwAfterException";

            private void _iceI_throwAfterException(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwAfterException_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(A)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_Thrower_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_shutdown(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_shutdown(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_shutdown(context, callback, cookie, false);
            }

            public void end_shutdown(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_shutdown> begin_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_shutdown, object>(
                    (Callback_Thrower_shutdown cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _shutdown_name, cookie, completedCallback);
                _iceI_shutdown(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_supportsUndeclaredExceptions> begin_supportsUndeclaredExceptions(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_supportsUndeclaredExceptions(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_supportsUndeclaredExceptions(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_supportsUndeclaredExceptions(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_supportsUndeclaredExceptions(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_supportsUndeclaredExceptions(context, callback, cookie, false);
            }

            public bool end_supportsUndeclaredExceptions(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _supportsUndeclaredExceptions_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_supportsUndeclaredExceptions> begin_supportsUndeclaredExceptions(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_supportsUndeclaredExceptions_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_supportsUndeclaredExceptions, bool>(
                    (Callback_Thrower_supportsUndeclaredExceptions cb, bool ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _supportsUndeclaredExceptions_name, cookie, completedCallback);
                _iceI_supportsUndeclaredExceptions(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_supportsAssertException> begin_supportsAssertException(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_supportsAssertException(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_supportsAssertException(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_supportsAssertException(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_supportsAssertException(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_supportsAssertException(context, callback, cookie, false);
            }

            public bool end_supportsAssertException(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _supportsAssertException_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_supportsAssertException> begin_supportsAssertException(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_supportsAssertException_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_supportsAssertException, bool>(
                    (Callback_Thrower_supportsAssertException cb, bool ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _supportsAssertException_name, cookie, completedCallback);
                _iceI_supportsAssertException(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwAasA> begin_throwAasA(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwAasA(a, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwAasA(int a, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwAasA(a, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwAasA(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwAasA(a, context, callback, cookie, false);
            }

            public void end_throwAasA(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwAasA_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwAasA> begin_throwAasA(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_throwAasA_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwAasA, object>(
                    (Callback_Thrower_throwAasA cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwAasA_name, cookie, completedCallback);
                _iceI_throwAasA(iceP_a, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwAorDasAorD> begin_throwAorDasAorD(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwAorDasAorD(a, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwAorDasAorD(int a, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwAorDasAorD(a, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwAorDasAorD(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwAorDasAorD(a, context, callback, cookie, false);
            }

            public void end_throwAorDasAorD(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwAorDasAorD_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwAorDasAorD> begin_throwAorDasAorD(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_throwAorDasAorD_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwAorDasAorD, object>(
                    (Callback_Thrower_throwAorDasAorD cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwAorDasAorD_name, cookie, completedCallback);
                _iceI_throwAorDasAorD(iceP_a, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwBasA> begin_throwBasA(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwBasA(a, b, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwBasA(int a, int b, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwBasA(a, b, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwBasA(int a, int b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwBasA(a, b, context, callback, cookie, false);
            }

            public void end_throwBasA(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwBasA_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwBasA> begin_throwBasA(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_throwBasA_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwBasA, object>(
                    (Callback_Thrower_throwBasA cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwBasA_name, cookie, completedCallback);
                _iceI_throwBasA(iceP_a, iceP_b, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwCasA> begin_throwCasA(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwCasA(a, b, c, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwCasA(int a, int b, int c, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwCasA(a, b, c, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwCasA(int a, int b, int c, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwCasA(a, b, c, context, callback, cookie, false);
            }

            public void end_throwCasA(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwCasA_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwCasA> begin_throwCasA(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_throwCasA_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwCasA, object>(
                    (Callback_Thrower_throwCasA cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwCasA_name, cookie, completedCallback);
                _iceI_throwCasA(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwBasB> begin_throwBasB(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwBasB(a, b, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwBasB(int a, int b, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwBasB(a, b, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwBasB(int a, int b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwBasB(a, b, context, callback, cookie, false);
            }

            public void end_throwBasB(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwBasB_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwBasB> begin_throwBasB(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_throwBasB_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwBasB, object>(
                    (Callback_Thrower_throwBasB cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwBasB_name, cookie, completedCallback);
                _iceI_throwBasB(iceP_a, iceP_b, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwCasB> begin_throwCasB(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwCasB(a, b, c, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwCasB(int a, int b, int c, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwCasB(a, b, c, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwCasB(int a, int b, int c, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwCasB(a, b, c, context, callback, cookie, false);
            }

            public void end_throwCasB(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwCasB_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwCasB> begin_throwCasB(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_throwCasB_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwCasB, object>(
                    (Callback_Thrower_throwCasB cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwCasB_name, cookie, completedCallback);
                _iceI_throwCasB(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwCasC> begin_throwCasC(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwCasC(a, b, c, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwCasC(int a, int b, int c, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwCasC(a, b, c, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwCasC(int a, int b, int c, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwCasC(a, b, c, context, callback, cookie, false);
            }

            public void end_throwCasC(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwCasC_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwCasC> begin_throwCasC(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_throwCasC_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwCasC, object>(
                    (Callback_Thrower_throwCasC cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwCasC_name, cookie, completedCallback);
                _iceI_throwCasC(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwUndeclaredA> begin_throwUndeclaredA(int a, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwUndeclaredA(a, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwUndeclaredA(int a, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwUndeclaredA(a, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwUndeclaredA(int a, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwUndeclaredA(a, context, callback, cookie, false);
            }

            public void end_throwUndeclaredA(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwUndeclaredA_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwUndeclaredA> begin_throwUndeclaredA(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwUndeclaredA, object>(
                    (Callback_Thrower_throwUndeclaredA cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwUndeclaredA_name, cookie, completedCallback);
                _iceI_throwUndeclaredA(iceP_a, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwUndeclaredB> begin_throwUndeclaredB(int a, int b, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwUndeclaredB(a, b, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwUndeclaredB(int a, int b, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwUndeclaredB(a, b, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwUndeclaredB(int a, int b, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwUndeclaredB(a, b, context, callback, cookie, false);
            }

            public void end_throwUndeclaredB(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwUndeclaredB_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwUndeclaredB> begin_throwUndeclaredB(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwUndeclaredB, object>(
                    (Callback_Thrower_throwUndeclaredB cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwUndeclaredB_name, cookie, completedCallback);
                _iceI_throwUndeclaredB(iceP_a, iceP_b, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwUndeclaredC> begin_throwUndeclaredC(int a, int b, int c, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwUndeclaredC(a, b, c, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwUndeclaredC(int a, int b, int c, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwUndeclaredC(a, b, c, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwUndeclaredC(int a, int b, int c, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwUndeclaredC(a, b, c, context, callback, cookie, false);
            }

            public void end_throwUndeclaredC(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwUndeclaredC_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwUndeclaredC> begin_throwUndeclaredC(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwUndeclaredC, object>(
                    (Callback_Thrower_throwUndeclaredC cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwUndeclaredC_name, cookie, completedCallback);
                _iceI_throwUndeclaredC(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwLocalException> begin_throwLocalException(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwLocalException(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwLocalException(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwLocalException(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwLocalException(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwLocalException(context, callback, cookie, false);
            }

            public void end_throwLocalException(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwLocalException_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwLocalException> begin_throwLocalException(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwLocalException, object>(
                    (Callback_Thrower_throwLocalException cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwLocalException_name, cookie, completedCallback);
                _iceI_throwLocalException(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwNonIceException> begin_throwNonIceException(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwNonIceException(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwNonIceException(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwNonIceException(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwNonIceException(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwNonIceException(context, callback, cookie, false);
            }

            public void end_throwNonIceException(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwNonIceException_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwNonIceException> begin_throwNonIceException(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwNonIceException, object>(
                    (Callback_Thrower_throwNonIceException cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwNonIceException_name, cookie, completedCallback);
                _iceI_throwNonIceException(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwAssertException> begin_throwAssertException(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwAssertException(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwAssertException(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwAssertException(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwAssertException(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwAssertException(context, callback, cookie, false);
            }

            public void end_throwAssertException(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwAssertException_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwAssertException> begin_throwAssertException(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwAssertException, object>(
                    (Callback_Thrower_throwAssertException cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwAssertException_name, cookie, completedCallback);
                _iceI_throwAssertException(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwMemoryLimitException> begin_throwMemoryLimitException(byte[] seq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwMemoryLimitException(seq, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwMemoryLimitException(byte[] seq, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwMemoryLimitException(seq, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwMemoryLimitException(byte[] seq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwMemoryLimitException(seq, context, callback, cookie, false);
            }

            public byte[] end_throwMemoryLimitException(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwMemoryLimitException_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<byte[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwMemoryLimitException> begin_throwMemoryLimitException(byte[] iceP_seq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_throwMemoryLimitException_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwMemoryLimitException, byte[]>(
                    (Callback_Thrower_throwMemoryLimitException cb, byte[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _throwMemoryLimitException_name, cookie, completedCallback);
                _iceI_throwMemoryLimitException(iceP_seq, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwLocalExceptionIdempotent> begin_throwLocalExceptionIdempotent(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwLocalExceptionIdempotent(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwLocalExceptionIdempotent(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwLocalExceptionIdempotent(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwLocalExceptionIdempotent(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwLocalExceptionIdempotent(context, callback, cookie, false);
            }

            public void end_throwLocalExceptionIdempotent(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwLocalExceptionIdempotent_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwLocalExceptionIdempotent> begin_throwLocalExceptionIdempotent(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwLocalExceptionIdempotent, object>(
                    (Callback_Thrower_throwLocalExceptionIdempotent cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwLocalExceptionIdempotent_name, cookie, completedCallback);
                _iceI_throwLocalExceptionIdempotent(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwAfterResponse> begin_throwAfterResponse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwAfterResponse(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwAfterResponse(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwAfterResponse(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwAfterResponse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwAfterResponse(context, callback, cookie, false);
            }

            public void end_throwAfterResponse(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwAfterResponse_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwAfterResponse> begin_throwAfterResponse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwAfterResponse, object>(
                    (Callback_Thrower_throwAfterResponse cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwAfterResponse_name, cookie, completedCallback);
                _iceI_throwAfterResponse(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Thrower_throwAfterException> begin_throwAfterException(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_throwAfterException(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_throwAfterException(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwAfterException(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_throwAfterException(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_throwAfterException(context, callback, cookie, false);
            }

            public void end_throwAfterException(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwAfterException_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Thrower_throwAfterException> begin_throwAfterException(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_throwAfterException_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Thrower_throwAfterException, object>(
                    (Callback_Thrower_throwAfterException cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _throwAfterException_name, cookie, completedCallback);
                _iceI_throwAfterException(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static ThrowerPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ThrowerPrx r = b as ThrowerPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    ThrowerPrxHelper h = new ThrowerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ThrowerPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                ThrowerPrx r = b as ThrowerPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    ThrowerPrxHelper h = new ThrowerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ThrowerPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        ThrowerPrxHelper h = new ThrowerPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ThrowerPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        ThrowerPrxHelper h = new ThrowerPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ThrowerPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ThrowerPrx r = b as ThrowerPrx;
                if(r == null)
                {
                    ThrowerPrxHelper h = new ThrowerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ThrowerPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                ThrowerPrxHelper h = new ThrowerPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Thrower"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, ThrowerPrx v)
            {
                ostr.writeProxy(v);
            }

            public static ThrowerPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    ThrowerPrxHelper result = new ThrowerPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        [global::System.Serializable]
        public sealed class WrongOperationPrxHelper : global::Ice.ObjectPrxHelperBase, WrongOperationPrx
        {
            public WrongOperationPrxHelper()
            {
            }

            public WrongOperationPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void noSuchOperation(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_noSuchOperationAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task noSuchOperationAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_noSuchOperationAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_noSuchOperationAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_noSuchOperation(context, synchronous, completed);
                return completed.Task;
            }

            private const string _noSuchOperation_name = "noSuchOperation";

            private void _iceI_noSuchOperation(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _noSuchOperation_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_WrongOperation_noSuchOperation> begin_noSuchOperation(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_noSuchOperation(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_noSuchOperation(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_noSuchOperation(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_noSuchOperation(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_noSuchOperation(context, callback, cookie, false);
            }

            public void end_noSuchOperation(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _noSuchOperation_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_WrongOperation_noSuchOperation> begin_noSuchOperation(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_WrongOperation_noSuchOperation, object>(
                    (Callback_WrongOperation_noSuchOperation cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _noSuchOperation_name, cookie, completedCallback);
                _iceI_noSuchOperation(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static WrongOperationPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                WrongOperationPrx r = b as WrongOperationPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    WrongOperationPrxHelper h = new WrongOperationPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static WrongOperationPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                WrongOperationPrx r = b as WrongOperationPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    WrongOperationPrxHelper h = new WrongOperationPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static WrongOperationPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        WrongOperationPrxHelper h = new WrongOperationPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static WrongOperationPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        WrongOperationPrxHelper h = new WrongOperationPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static WrongOperationPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                WrongOperationPrx r = b as WrongOperationPrx;
                if(r == null)
                {
                    WrongOperationPrxHelper h = new WrongOperationPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static WrongOperationPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                WrongOperationPrxHelper h = new WrongOperationPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::WrongOperation"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, WrongOperationPrx v)
            {
                ostr.writeProxy(v);
            }

            public static WrongOperationPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    WrongOperationPrxHelper result = new WrongOperationPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ice.exceptions.AMD
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public abstract class EmptyDisp_ : global::Ice.ObjectImpl, Empty
        {
            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Empty"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public abstract class ThrowerDisp_ : global::Ice.ObjectImpl, Thrower
        {
            #region Slice operations

            public abstract global::System.Threading.Tasks.Task shutdownAsync(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<bool> supportsUndeclaredExceptionsAsync(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<bool> supportsAssertExceptionAsync(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwAasAAsync(int a, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwAorDasAorDAsync(int a, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwBasAAsync(int a, int b, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwCasAAsync(int a, int b, int c, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwBasBAsync(int a, int b, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwCasBAsync(int a, int b, int c, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwCasCAsync(int a, int b, int c, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwUndeclaredAAsync(int a, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwUndeclaredBAsync(int a, int b, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwUndeclaredCAsync(int a, int b, int c, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwLocalExceptionAsync(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwNonIceExceptionAsync(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwAssertExceptionAsync(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task<byte[]> throwMemoryLimitExceptionAsync(byte[] seq, global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwLocalExceptionIdempotentAsync(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwAfterResponseAsync(global::Ice.Current current = null);

            public abstract global::System.Threading.Tasks.Task throwAfterExceptionAsync(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Thrower"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_shutdown(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask(obj.shutdownAsync(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_supportsUndeclaredExceptions(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask<bool>(obj.supportsUndeclaredExceptionsAsync(current),
                    (ostr, ret) =>
                    {
                        ostr.writeBool(ret);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_supportsAssertException(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask<bool>(obj.supportsAssertExceptionAsync(current),
                    (ostr, ret) =>
                    {
                        ostr.writeBool(ret);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwAasA(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_a;
                iceP_a = istr.readInt();
                inS.endReadParams();
                return inS.setResultTask(obj.throwAasAAsync(iceP_a, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwAorDasAorD(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_a;
                iceP_a = istr.readInt();
                inS.endReadParams();
                return inS.setResultTask(obj.throwAorDasAorDAsync(iceP_a, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwBasA(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_a;
                int iceP_b;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                inS.endReadParams();
                return inS.setResultTask(obj.throwBasAAsync(iceP_a, iceP_b, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwCasA(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_a;
                int iceP_b;
                int iceP_c;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                iceP_c = istr.readInt();
                inS.endReadParams();
                return inS.setResultTask(obj.throwCasAAsync(iceP_a, iceP_b, iceP_c, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwBasB(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_a;
                int iceP_b;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                inS.endReadParams();
                return inS.setResultTask(obj.throwBasBAsync(iceP_a, iceP_b, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwCasB(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_a;
                int iceP_b;
                int iceP_c;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                iceP_c = istr.readInt();
                inS.endReadParams();
                return inS.setResultTask(obj.throwCasBAsync(iceP_a, iceP_b, iceP_c, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwCasC(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_a;
                int iceP_b;
                int iceP_c;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                iceP_c = istr.readInt();
                inS.endReadParams();
                return inS.setResultTask(obj.throwCasCAsync(iceP_a, iceP_b, iceP_c, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwUndeclaredA(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_a;
                iceP_a = istr.readInt();
                inS.endReadParams();
                return inS.setResultTask(obj.throwUndeclaredAAsync(iceP_a, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwUndeclaredB(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_a;
                int iceP_b;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                inS.endReadParams();
                return inS.setResultTask(obj.throwUndeclaredBAsync(iceP_a, iceP_b, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwUndeclaredC(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_a;
                int iceP_b;
                int iceP_c;
                iceP_a = istr.readInt();
                iceP_b = istr.readInt();
                iceP_c = istr.readInt();
                inS.endReadParams();
                return inS.setResultTask(obj.throwUndeclaredCAsync(iceP_a, iceP_b, iceP_c, current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwLocalException(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask(obj.throwLocalExceptionAsync(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwNonIceException(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask(obj.throwNonIceExceptionAsync(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwAssertException(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask(obj.throwAssertExceptionAsync(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwMemoryLimitException(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                byte[] iceP_seq;
                iceP_seq = global::Ice.ByteSeqHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask<byte[]>(obj.throwMemoryLimitExceptionAsync(iceP_seq, current),
                    (ostr, ret) =>
                    {
                        global::Ice.ByteSeqHelper.write(ostr, ret);
                    });
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwLocalExceptionIdempotent(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask(obj.throwLocalExceptionIdempotentAsync(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwAfterResponse(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask(obj.throwAfterResponseAsync(current));
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_throwAfterException(Thrower obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask(obj.throwAfterExceptionAsync(current));
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "shutdown",
                "supportsAssertException",
                "supportsUndeclaredExceptions",
                "throwAasA",
                "throwAfterException",
                "throwAfterResponse",
                "throwAorDasAorD",
                "throwAssertException",
                "throwBasA",
                "throwBasB",
                "throwCasA",
                "throwCasB",
                "throwCasC",
                "throwLocalException",
                "throwLocalExceptionIdempotent",
                "throwMemoryLimitException",
                "throwNonIceException",
                "throwUndeclaredA",
                "throwUndeclaredB",
                "throwUndeclaredC"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_shutdown(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_supportsAssertException(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_supportsUndeclaredExceptions(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_throwAasA(this, inS, current);
                    }
                    case 8:
                    {
                        return iceD_throwAfterException(this, inS, current);
                    }
                    case 9:
                    {
                        return iceD_throwAfterResponse(this, inS, current);
                    }
                    case 10:
                    {
                        return iceD_throwAorDasAorD(this, inS, current);
                    }
                    case 11:
                    {
                        return iceD_throwAssertException(this, inS, current);
                    }
                    case 12:
                    {
                        return iceD_throwBasA(this, inS, current);
                    }
                    case 13:
                    {
                        return iceD_throwBasB(this, inS, current);
                    }
                    case 14:
                    {
                        return iceD_throwCasA(this, inS, current);
                    }
                    case 15:
                    {
                        return iceD_throwCasB(this, inS, current);
                    }
                    case 16:
                    {
                        return iceD_throwCasC(this, inS, current);
                    }
                    case 17:
                    {
                        return iceD_throwLocalException(this, inS, current);
                    }
                    case 18:
                    {
                        return iceD_throwLocalExceptionIdempotent(this, inS, current);
                    }
                    case 19:
                    {
                        return iceD_throwMemoryLimitException(this, inS, current);
                    }
                    case 20:
                    {
                        return iceD_throwNonIceException(this, inS, current);
                    }
                    case 21:
                    {
                        return iceD_throwUndeclaredA(this, inS, current);
                    }
                    case 22:
                    {
                        return iceD_throwUndeclaredB(this, inS, current);
                    }
                    case 23:
                    {
                        return iceD_throwUndeclaredC(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public abstract class WrongOperationDisp_ : global::Ice.ObjectImpl, WrongOperation
        {
            #region Slice operations

            public abstract global::System.Threading.Tasks.Task noSuchOperationAsync(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::WrongOperation"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_noSuchOperation(WrongOperation obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask(obj.noSuchOperationAsync(current));
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "noSuchOperation"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_noSuchOperation(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
