//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable 1591

namespace Ice.dictMapping
{
    namespace Test
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public sealed partial record class TEstNv
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::System.Collections.Generic.Dictionary<int, int> d;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int[] s;

            partial void ice_initialize();

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public TEstNv(global::System.Collections.Generic.Dictionary<int, int> d, int[] s)
            {
                global::System.ArgumentNullException.ThrowIfNull(d);
                this.d = d;
                global::System.ArgumentNullException.ThrowIfNull(s);
                this.s = s;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public TEstNv(Ice.InputStream istr)
            {
                this.d = NVHelper.read(istr);
                this.s = IntSeqHelper.read(istr);
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                NVHelper.write(ostr, this.d);
                IntSeqHelper.write(ostr, this.s);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static void ice_write(Ice.OutputStream ostr, TEstNv v)
            {
                v.ice_writeMembers(ostr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static TEstNv ice_read(Ice.InputStream istr) => new(istr);
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::MyClass")]
        public partial interface MyClass : Ice.Object
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void shutdown(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<int, int> opNV(global::System.Collections.Generic.Dictionary<int, int> i, out global::System.Collections.Generic.Dictionary<int, int> o, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, string> opNR(global::System.Collections.Generic.Dictionary<string, string> i, out global::System.Collections.Generic.Dictionary<string, string> o, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> opNDV(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> o, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> opNDR(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> o, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, int[]> opNDAIS(global::System.Collections.Generic.Dictionary<string, int[]> i, out global::System.Collections.Generic.Dictionary<string, int[]> o, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> opNDGIS(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> o, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, string[]> opNDASS(global::System.Collections.Generic.Dictionary<string, string[]> i, out global::System.Collections.Generic.Dictionary<string, string[]> o, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> opNDGSS(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> o, Ice.Current current);
        }
    }
}

namespace Ice.dictMapping
{
    namespace Test
    {
        public record struct MyClass_OpNVResult(global::System.Collections.Generic.Dictionary<int, int> returnValue, global::System.Collections.Generic.Dictionary<int, int> o);

        public record struct MyClass_OpNRResult(global::System.Collections.Generic.Dictionary<string, string> returnValue, global::System.Collections.Generic.Dictionary<string, string> o);

        public record struct MyClass_OpNDVResult(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> returnValue, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> o);

        public record struct MyClass_OpNDRResult(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> returnValue, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> o);

        public record struct MyClass_OpNDAISResult(global::System.Collections.Generic.Dictionary<string, int[]> returnValue, global::System.Collections.Generic.Dictionary<string, int[]> o);

        public record struct MyClass_OpNDGISResult(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> returnValue, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> o);

        public record struct MyClass_OpNDASSResult(global::System.Collections.Generic.Dictionary<string, string[]> returnValue, global::System.Collections.Generic.Dictionary<string, string[]> o);

        public record struct MyClass_OpNDGSSResult(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> returnValue, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> o);
    }
}

namespace Ice.dictMapping
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface MyClassPrx : Ice.ObjectPrx
        {
            void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<int, int> opNV(global::System.Collections.Generic.Dictionary<int, int> i, out global::System.Collections.Generic.Dictionary<int, int> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpNVResult> opNVAsync(global::System.Collections.Generic.Dictionary<int, int> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, string> opNR(global::System.Collections.Generic.Dictionary<string, string> i, out global::System.Collections.Generic.Dictionary<string, string> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpNRResult> opNRAsync(global::System.Collections.Generic.Dictionary<string, string> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> opNDV(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpNDVResult> opNDVAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> opNDR(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpNDRResult> opNDRAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, int[]> opNDAIS(global::System.Collections.Generic.Dictionary<string, int[]> i, out global::System.Collections.Generic.Dictionary<string, int[]> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpNDAISResult> opNDAISAsync(global::System.Collections.Generic.Dictionary<string, int[]> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> opNDGIS(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpNDGISResult> opNDGISAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, string[]> opNDASS(global::System.Collections.Generic.Dictionary<string, string[]> i, out global::System.Collections.Generic.Dictionary<string, string[]> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpNDASSResult> opNDASSAsync(global::System.Collections.Generic.Dictionary<string, string[]> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> opNDGSS(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<MyClass_OpNDGSSResult> opNDGSSAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Ice.dictMapping
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class NVHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<int, int> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<int, int> e in v)
                    {
                        ostr.writeInt(e.Key);
                        ostr.writeInt(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<int, int> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<int, int> r = new global::System.Collections.Generic.Dictionary<int, int>();
                for(int i = 0; i < sz; ++i)
                {
                    int k;
                    k = istr.readInt();
                    int v;
                    v = istr.readInt();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class NRHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, string> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, string> e in v)
                    {
                        ostr.writeString(e.Key);
                        ostr.writeString(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, string> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, string> r = new global::System.Collections.Generic.Dictionary<string, string>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    string v;
                    v = istr.readString();
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class NDVHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, global::System.Collections.Generic.Dictionary<int, int>> e in v)
                    {
                        ostr.writeString(e.Key);
                        NVHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> r = new global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    global::System.Collections.Generic.Dictionary<int, int> v;
                    v = NVHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class NDRHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, global::System.Collections.Generic.Dictionary<string, string>> e in v)
                    {
                        ostr.writeString(e.Key);
                        NRHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> r = new global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    global::System.Collections.Generic.Dictionary<string, string> v;
                    v = NRHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntSeqHelper
        {
            public static void write(Ice.OutputStream ostr, int[] v)
            {
                ostr.writeIntSeq(v);
            }

            public static int[] read(Ice.InputStream istr)
            {
                int[] v;
                v = istr.readIntSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class AISHelper
        {
            public static void write(Ice.OutputStream ostr, int[] v)
            {
                ostr.writeIntSeq(v);
            }

            public static int[] read(Ice.InputStream istr)
            {
                int[] v;
                v = istr.readIntSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class GISHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<int> v)
            {
                ostr.writeIntSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.List<int> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<int> v;
                istr.readIntSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ASSHelper
        {
            public static void write(Ice.OutputStream ostr, string[] v)
            {
                ostr.writeStringSeq(v);
            }

            public static string[] read(Ice.InputStream istr)
            {
                string[] v;
                v = istr.readStringSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class GSSHelper
        {
            public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.List<string> v)
            {
                ostr.writeStringSeq(v == null ? 0 : v.Count, v!);
            }

            public static global::System.Collections.Generic.List<string> read(Ice.InputStream istr)
            {
                global::System.Collections.Generic.List<string> v;
                istr.readStringSeq(out v);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class NDAISHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, int[]> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, int[]> e in v)
                    {
                        ostr.writeString(e.Key);
                        AISHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, int[]> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, int[]> r = new global::System.Collections.Generic.Dictionary<string, int[]>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    int[] v;
                    v = AISHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class NDGISHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, global::System.Collections.Generic.List<int>> e in v)
                    {
                        ostr.writeString(e.Key);
                        GISHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> r = new global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    global::System.Collections.Generic.List<int> v;
                    v = GISHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class NDASSHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, string[]> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, string[]> e in v)
                    {
                        ostr.writeString(e.Key);
                        ASSHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, string[]> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, string[]> r = new global::System.Collections.Generic.Dictionary<string, string[]>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    string[] v;
                    v = ASSHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class NDGSSHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, global::System.Collections.Generic.List<string>> e in v)
                    {
                        ostr.writeString(e.Key);
                        GSSHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> r = new global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    global::System.Collections.Generic.List<string> v;
                    v = GSSHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class MyClassPrxHelper : Ice.ObjectPrxHelperBase, MyClassPrx
        {
            public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Dictionary<int, int> opNV(global::System.Collections.Generic.Dictionary<int, int> i, out global::System.Collections.Generic.Dictionary<int, int> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opNVAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string> opNR(global::System.Collections.Generic.Dictionary<string, string> i, out global::System.Collections.Generic.Dictionary<string, string> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opNRAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> opNDV(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opNDVAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> opNDR(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opNDRAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, int[]> opNDAIS(global::System.Collections.Generic.Dictionary<string, int[]> i, out global::System.Collections.Generic.Dictionary<string, int[]> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opNDAISAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> opNDGIS(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opNDGISAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, string[]> opNDASS(global::System.Collections.Generic.Dictionary<string, string[]> i, out global::System.Collections.Generic.Dictionary<string, string[]> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opNDASSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> opNDGSS(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opNDGSSAsync(i, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    o = result_.o;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<MyClass_OpNVResult> opNVAsync(global::System.Collections.Generic.Dictionary<int, int> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opNVAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpNVResult> _iceI_opNVAsync(global::System.Collections.Generic.Dictionary<int, int> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opNV_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpNVResult>(progress, cancel);
                _iceI_opNV(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opNV_name = "opNV";

            private void _iceI_opNV(global::System.Collections.Generic.Dictionary<int, int> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpNVResult>(completed);
                outAsync.invoke(
                    _opNV_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        NVHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpNVResult();
                        ret.o = NVHelper.read(istr);
                        ret.returnValue = NVHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpNRResult> opNRAsync(global::System.Collections.Generic.Dictionary<string, string> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opNRAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpNRResult> _iceI_opNRAsync(global::System.Collections.Generic.Dictionary<string, string> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opNR_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpNRResult>(progress, cancel);
                _iceI_opNR(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opNR_name = "opNR";

            private void _iceI_opNR(global::System.Collections.Generic.Dictionary<string, string> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpNRResult>(completed);
                outAsync.invoke(
                    _opNR_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        NRHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpNRResult();
                        ret.o = NRHelper.read(istr);
                        ret.returnValue = NRHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpNDVResult> opNDVAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opNDVAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpNDVResult> _iceI_opNDVAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opNDV_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpNDVResult>(progress, cancel);
                _iceI_opNDV(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opNDV_name = "opNDV";

            private void _iceI_opNDV(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpNDVResult>(completed);
                outAsync.invoke(
                    _opNDV_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        NDVHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpNDVResult();
                        ret.o = NDVHelper.read(istr);
                        ret.returnValue = NDVHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpNDRResult> opNDRAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opNDRAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpNDRResult> _iceI_opNDRAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opNDR_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpNDRResult>(progress, cancel);
                _iceI_opNDR(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opNDR_name = "opNDR";

            private void _iceI_opNDR(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpNDRResult>(completed);
                outAsync.invoke(
                    _opNDR_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        NDRHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpNDRResult();
                        ret.o = NDRHelper.read(istr);
                        ret.returnValue = NDRHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpNDAISResult> opNDAISAsync(global::System.Collections.Generic.Dictionary<string, int[]> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opNDAISAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpNDAISResult> _iceI_opNDAISAsync(global::System.Collections.Generic.Dictionary<string, int[]> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opNDAIS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpNDAISResult>(progress, cancel);
                _iceI_opNDAIS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opNDAIS_name = "opNDAIS";

            private void _iceI_opNDAIS(global::System.Collections.Generic.Dictionary<string, int[]> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpNDAISResult>(completed);
                outAsync.invoke(
                    _opNDAIS_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        NDAISHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpNDAISResult();
                        ret.o = NDAISHelper.read(istr);
                        ret.returnValue = NDAISHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpNDGISResult> opNDGISAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opNDGISAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpNDGISResult> _iceI_opNDGISAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opNDGIS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpNDGISResult>(progress, cancel);
                _iceI_opNDGIS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opNDGIS_name = "opNDGIS";

            private void _iceI_opNDGIS(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpNDGISResult>(completed);
                outAsync.invoke(
                    _opNDGIS_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        NDGISHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpNDGISResult();
                        ret.o = NDGISHelper.read(istr);
                        ret.returnValue = NDGISHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpNDASSResult> opNDASSAsync(global::System.Collections.Generic.Dictionary<string, string[]> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opNDASSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpNDASSResult> _iceI_opNDASSAsync(global::System.Collections.Generic.Dictionary<string, string[]> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opNDASS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpNDASSResult>(progress, cancel);
                _iceI_opNDASS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opNDASS_name = "opNDASS";

            private void _iceI_opNDASS(global::System.Collections.Generic.Dictionary<string, string[]> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpNDASSResult>(completed);
                outAsync.invoke(
                    _opNDASS_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        NDASSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpNDASSResult();
                        ret.o = NDASSHelper.read(istr);
                        ret.returnValue = NDASSHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<MyClass_OpNDGSSResult> opNDGSSAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> i, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opNDGSSAsync(i, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<MyClass_OpNDGSSResult> _iceI_opNDGSSAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opNDGSS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpNDGSSResult>(progress, cancel);
                _iceI_opNDGSS(iceP_i, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opNDGSS_name = "opNDGSS";

            private void _iceI_opNDGSS(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> iceP_i, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<MyClass_OpNDGSSResult>(completed);
                outAsync.invoke(
                    _opNDGSS_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        NDGSSHelper.write(ostr, iceP_i);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new MyClass_OpNDGSSResult();
                        ret.o = NDGSSHelper.read(istr);
                        ret.returnValue = NDGSSHelper.read(istr);
                        return ret;
                    });
            }

            public static MyClassPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new MyClassPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static MyClassPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new MyClassPrxHelper(b) : null;

            public static MyClassPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
            {
                Ice.ObjectPrx? bb = b?.ice_facet(f);
                try
                {
                    if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                    {
                        return new MyClassPrxHelper(bb);
                    }
                }
                catch (Ice.FacetNotExistException)
                {
                }
                return null;
            }

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static MyClassPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new MyClassPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static MyClassPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                b is not null ? new MyClassPrxHelper(b.ice_facet(f)) : null;

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MyClass"
            };

            public static string ice_staticId() => "::Test::MyClass";

            public static void write(Ice.OutputStream ostr, MyClassPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static MyClassPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new MyClassPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new MyClassPrxHelper(reference);

            private MyClassPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private MyClassPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }
}

namespace Ice.dictMapping
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class MyClassDisp_ : Ice.ObjectImpl, MyClass
        {
            public abstract void shutdown(Ice.Current current);

            public abstract global::System.Collections.Generic.Dictionary<int, int> opNV(global::System.Collections.Generic.Dictionary<int, int> i, out global::System.Collections.Generic.Dictionary<int, int> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Dictionary<string, string> opNR(global::System.Collections.Generic.Dictionary<string, string> i, out global::System.Collections.Generic.Dictionary<string, string> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> opNDV(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> opNDR(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Dictionary<string, int[]> opNDAIS(global::System.Collections.Generic.Dictionary<string, int[]> i, out global::System.Collections.Generic.Dictionary<string, int[]> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> opNDGIS(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Dictionary<string, string[]> opNDASS(global::System.Collections.Generic.Dictionary<string, string[]> i, out global::System.Collections.Generic.Dictionary<string, string[]> o, Ice.Current current);

            public abstract global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> opNDGSS(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> i, out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> o, Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::MyClass";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "shutdown" => MyClass.iceD_shutdownAsync(this, request),
                    "opNV" => MyClass.iceD_opNVAsync(this, request),
                    "opNR" => MyClass.iceD_opNRAsync(this, request),
                    "opNDV" => MyClass.iceD_opNDVAsync(this, request),
                    "opNDR" => MyClass.iceD_opNDRAsync(this, request),
                    "opNDAIS" => MyClass.iceD_opNDAISAsync(this, request),
                    "opNDGIS" => MyClass.iceD_opNDGISAsync(this, request),
                    "opNDASS" => MyClass.iceD_opNDASSAsync(this, request),
                    "opNDGSS" => MyClass.iceD_opNDGSSAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}

namespace Ice.dictMapping
{
    namespace Test
    {
        public partial interface MyClass
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.shutdown(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opNVAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Dictionary<int, int> iceP_i;
                iceP_i = NVHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Dictionary<int, int> iceP_o;
                var ret = obj.opNV(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
                NVHelper.write(ostr, iceP_o);
                NVHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opNRAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Dictionary<string, string> iceP_i;
                iceP_i = NRHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Dictionary<string, string> iceP_o;
                var ret = obj.opNR(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
                NRHelper.write(ostr, iceP_o);
                NRHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opNDVAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> iceP_i;
                iceP_i = NDVHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<int, int>> iceP_o;
                var ret = obj.opNDV(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
                NDVHelper.write(ostr, iceP_o);
                NDVHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opNDRAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> iceP_i;
                iceP_i = NDRHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> iceP_o;
                var ret = obj.opNDR(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
                NDRHelper.write(ostr, iceP_o);
                NDRHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opNDAISAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Dictionary<string, int[]> iceP_i;
                iceP_i = NDAISHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Dictionary<string, int[]> iceP_o;
                var ret = obj.opNDAIS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
                NDAISHelper.write(ostr, iceP_o);
                NDAISHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opNDGISAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> iceP_i;
                iceP_i = NDGISHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<int>> iceP_o;
                var ret = obj.opNDGIS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
                NDGISHelper.write(ostr, iceP_o);
                NDGISHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opNDASSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Dictionary<string, string[]> iceP_i;
                iceP_i = NDASSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Dictionary<string, string[]> iceP_o;
                var ret = obj.opNDASS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
                NDASSHelper.write(ostr, iceP_o);
                NDASSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opNDGSSAsync(
                MyClass obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> iceP_i;
                iceP_i = NDGSSHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> iceP_o;
                var ret = obj.opNDGSS(iceP_i, out iceP_o, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
                NDGSSHelper.write(ostr, iceP_o);
                NDGSSHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }
        }
    }
}
