//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Forward.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Forward.ice")]

#pragma warning disable 1591

namespace Ice.objects
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::F1")]
        public partial class F1 : Ice.Value
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string name = "";

            partial void ice_initialize();

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public F1(string name)
            {
                global::System.ArgumentNullException.ThrowIfNull(name);
                this.name = name;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public F1()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId() => "::Test::F1";
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id() => ice_staticId();

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeString(name);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                name = istr_.readString();
                istr_.endSlice();
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::F2")]
        public partial interface F2 : Ice.Object
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void op(Ice.Current current);
        }
    }
}

namespace Ice.objects
{
    namespace Test
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface F2Prx : Ice.ObjectPrx
        {
            void op(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Ice.objects
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class F2PrxHelper : Ice.ObjectPrxHelperBase, F2Prx
        {
            public void op(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_opAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_op(context, synchronous, completed);
                return completed.Task;
            }

            private const string _op_name = "op";

            private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _op_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public static F2Prx createProxy(Ice.Communicator communicator, string proxyString) =>
                new F2PrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static F2Prx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new F2PrxHelper(b) : null;

            public static F2Prx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static F2Prx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new F2PrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static F2Prx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::F2"
            };

            public static string ice_staticId() => "::Test::F2";

            public static void write(Ice.OutputStream ostr, F2Prx? v)
            {
                ostr.writeProxy(v);
            }

            public static F2Prx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new F2PrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new F2PrxHelper(reference);

            private F2PrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private F2PrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }
}

namespace Ice.objects
{
    namespace Test
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class F2Disp_ : Ice.ObjectImpl, F2
        {
            public abstract void op(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::F2";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "op" => F2.iceD_opAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}

namespace Ice.objects
{
    namespace Test
    {
        public partial interface F2
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAsync(
                F2 obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.op(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }
    }
}
