// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Ice.objects
{
    namespace Test
    {
        public sealed partial record class S
        {
            public string str = "";

            partial void ice_initialize();

            public S()
            {
                ice_initialize();
            }

            public S(string str)
            {
                global::System.ArgumentNullException.ThrowIfNull(str);
                this.str = str;
                ice_initialize();
            }

            public S(Ice.InputStream istr)
            {
                this.str = istr.readString();
                ice_initialize();
            }

            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeString(this.str);
            }

            public static void ice_write(Ice.OutputStream ostr, S v)
            {
                v.ice_writeMembers(ostr);
            }

            public static S ice_read(Ice.InputStream istr) => new(istr);
        }

        [Ice.SliceTypeId("::Test::Base")]
        public partial class Base : Ice.Value
        {
            public S theS;

            public string str = "";

            partial void ice_initialize();

            public Base(S theS, string str)
            {
                global::System.ArgumentNullException.ThrowIfNull(theS);
                this.theS = theS;
                global::System.ArgumentNullException.ThrowIfNull(str);
                this.str = str;
                ice_initialize();
            }

            public Base(S theS)
            {
                global::System.ArgumentNullException.ThrowIfNull(theS);
                this.theS = theS;
                ice_initialize();
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            public Base()
            {
                this.theS = null!;
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::Base";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                S.ice_write(ostr_, theS);
                ostr_.writeString(str);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                theS = new S(istr_);
                str = istr_.readString();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::A")]
        public partial class A : Ice.Value
        {
            public B? theB;

            public C? theC;

            public bool preMarshalInvoked;

            public bool postUnmarshalInvoked;

            partial void ice_initialize();

            public A(B? theB, C? theC, bool preMarshalInvoked, bool postUnmarshalInvoked)
            {
                this.theB = theB;
                this.theC = theC;
                this.preMarshalInvoked = preMarshalInvoked;
                this.postUnmarshalInvoked = postUnmarshalInvoked;
                ice_initialize();
            }

            public A()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::A";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(theB);
                ostr_.writeValue(theC);
                ostr_.writeBool(preMarshalInvoked);
                ostr_.writeBool(postUnmarshalInvoked);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((B? v) => { this.theB = v; });
                istr_.readValue((C? v) => { this.theC = v; });
                preMarshalInvoked = istr_.readBool();
                postUnmarshalInvoked = istr_.readBool();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::B")]
        public partial class B : A
        {
            public A? theA;

            partial void ice_initialize();

            public B(B? theB, C? theC, bool preMarshalInvoked, bool postUnmarshalInvoked, A? theA) : base(theB, theC, preMarshalInvoked, postUnmarshalInvoked)
            {
                this.theA = theA;
                ice_initialize();
            }

            public B()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::B";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeValue(theA);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((A? v) => { this.theA = v; });
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::C")]
        public partial class C : Ice.Value
        {
            public B? theB;

            public bool preMarshalInvoked;

            public bool postUnmarshalInvoked;

            partial void ice_initialize();

            public C(B? theB, bool preMarshalInvoked, bool postUnmarshalInvoked)
            {
                this.theB = theB;
                this.preMarshalInvoked = preMarshalInvoked;
                this.postUnmarshalInvoked = postUnmarshalInvoked;
                ice_initialize();
            }

            public C()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::C";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(theB);
                ostr_.writeBool(preMarshalInvoked);
                ostr_.writeBool(postUnmarshalInvoked);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((B? v) => { this.theB = v; });
                preMarshalInvoked = istr_.readBool();
                postUnmarshalInvoked = istr_.readBool();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::D")]
        public partial class D : Ice.Value
        {
            public A? theA;

            public B? theB;

            public C? theC;

            public bool preMarshalInvoked;

            public bool postUnmarshalInvoked;

            partial void ice_initialize();

            public D(A? theA, B? theB, C? theC, bool preMarshalInvoked, bool postUnmarshalInvoked)
            {
                this.theA = theA;
                this.theB = theB;
                this.theC = theC;
                this.preMarshalInvoked = preMarshalInvoked;
                this.postUnmarshalInvoked = postUnmarshalInvoked;
                ice_initialize();
            }

            public D()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::D";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(theA);
                ostr_.writeValue(theB);
                ostr_.writeValue(theC);
                ostr_.writeBool(preMarshalInvoked);
                ostr_.writeBool(postUnmarshalInvoked);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((A? v) => { this.theA = v; });
                istr_.readValue((B? v) => { this.theB = v; });
                istr_.readValue((C? v) => { this.theC = v; });
                preMarshalInvoked = istr_.readBool();
                postUnmarshalInvoked = istr_.readBool();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::G")]
        public partial class G : Base
        {
            partial void ice_initialize();

            public G(S theS, string str) : base(theS, str)
            {
                ice_initialize();
            }

            public G(S theS) : base(theS)
            {
                ice_initialize();
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            public G()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::G";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::Compact")]
        [Ice.CompactSliceTypeId(1)]
        public partial class Compact : Ice.Value
        {
            partial void ice_initialize();

            public Compact()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::Compact";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), 1, true);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }
        }

        public abstract class CompactExtId
        {
            public const int value = 789;
        }

        [Ice.SliceTypeId("::Test::CompactExt")]
        [Ice.CompactSliceTypeId(789)]
        public partial class CompactExt : Compact
        {
            partial void ice_initialize();

            public CompactExt()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::CompactExt";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), 789, false);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        namespace Inner
        {
            [Ice.SliceTypeId("::Test::Inner::A")]
            public partial class A : Ice.Value
            {
                public global::Ice.objects.Test.A? theA;

                partial void ice_initialize();

                public A(global::Ice.objects.Test.A? theA)
                {
                    this.theA = theA;
                    ice_initialize();
                }

                public A()
                {
                    ice_initialize();
                }

                public static new string ice_staticId() => "::Test::Inner::A";
                public override string ice_id() => ice_staticId();

                protected override void iceWriteImpl(Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, true);
                    ostr_.writeValue(theA);
                    ostr_.endSlice();
                }

                protected override void iceReadImpl(Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    istr_.readValue((global::Ice.objects.Test.A? v) => { this.theA = v; });
                    istr_.endSlice();
                }
            }

            [Ice.SliceTypeId("::Test::Inner::Ex")]
            public partial class Ex : Ice.UserException
            {
                public string reason = "";

                public Ex(string reason)
                {
                    global::System.ArgumentNullException.ThrowIfNull(reason);
                    this.reason = reason;
                }

                public Ex()
                {
                }

                public override string ice_id() => "::Test::Inner::Ex";

                protected override void iceWriteImpl(Ice.OutputStream ostr_)
                {
                    ostr_.startSlice("::Test::Inner::Ex", -1, true);
                    ostr_.writeString(reason);
                    ostr_.endSlice();
                }

                protected override void iceReadImpl(Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    reason = istr_.readString();
                    istr_.endSlice();
                }
            }

            namespace Sub
            {
                [Ice.SliceTypeId("::Test::Inner::Sub::A")]
                public partial class A : Ice.Value
                {
                    public global::Ice.objects.Test.Inner.A? theA;

                    partial void ice_initialize();

                    public A(global::Ice.objects.Test.Inner.A? theA)
                    {
                        this.theA = theA;
                        ice_initialize();
                    }

                    public A()
                    {
                        ice_initialize();
                    }

                    public static new string ice_staticId() => "::Test::Inner::Sub::A";
                    public override string ice_id() => ice_staticId();

                    protected override void iceWriteImpl(Ice.OutputStream ostr_)
                    {
                        ostr_.startSlice(ice_staticId(), -1, true);
                        ostr_.writeValue(theA);
                        ostr_.endSlice();
                    }

                    protected override void iceReadImpl(Ice.InputStream istr_)
                    {
                        istr_.startSlice();
                        istr_.readValue((global::Ice.objects.Test.Inner.A? v) => { this.theA = v; });
                        istr_.endSlice();
                    }
                }

                [Ice.SliceTypeId("::Test::Inner::Sub::Ex")]
                public partial class Ex : Ice.UserException
                {
                    public string reason = "";

                    public Ex(string reason)
                    {
                        global::System.ArgumentNullException.ThrowIfNull(reason);
                        this.reason = reason;
                    }

                    public Ex()
                    {
                    }

                    public override string ice_id() => "::Test::Inner::Sub::Ex";

                    protected override void iceWriteImpl(Ice.OutputStream ostr_)
                    {
                        ostr_.startSlice("::Test::Inner::Sub::Ex", -1, true);
                        ostr_.writeString(reason);
                        ostr_.endSlice();
                    }

                    protected override void iceReadImpl(Ice.InputStream istr_)
                    {
                        istr_.startSlice();
                        reason = istr_.readString();
                        istr_.endSlice();
                    }
                }
            }
        }

        [Ice.SliceTypeId("::Test::A1")]
        public partial class A1 : Ice.Value
        {
            public string name = "";

            partial void ice_initialize();

            public A1(string name)
            {
                global::System.ArgumentNullException.ThrowIfNull(name);
                this.name = name;
                ice_initialize();
            }

            public A1()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::A1";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeString(name);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                name = istr_.readString();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::B1")]
        public partial class B1 : Ice.Value
        {
            public A1? a1;

            public A1? a2;

            partial void ice_initialize();

            public B1(A1? a1, A1? a2)
            {
                this.a1 = a1;
                this.a2 = a2;
                ice_initialize();
            }

            public B1()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::B1";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(a1);
                ostr_.writeValue(a2);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((A1? v) => { this.a1 = v; });
                istr_.readValue((A1? v) => { this.a2 = v; });
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::D1")]
        public partial class D1 : B1
        {
            public A1? a3;

            public A1? a4;

            partial void ice_initialize();

            public D1(A1? a1, A1? a2, A1? a3, A1? a4) : base(a1, a2)
            {
                this.a3 = a3;
                this.a4 = a4;
                ice_initialize();
            }

            public D1()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::D1";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeValue(a3);
                ostr_.writeValue(a4);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((A1? v) => { this.a3 = v; });
                istr_.readValue((A1? v) => { this.a4 = v; });
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::EBase")]
        public partial class EBase : Ice.UserException
        {
            public A1? a1;

            public A1? a2;

            public EBase(A1? a1, A1? a2)
            {
                this.a1 = a1;
                this.a2 = a2;
            }

            public EBase()
            {
            }

            public override string ice_id() => "::Test::EBase";

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::EBase", -1, true);
                ostr_.writeValue(a1);
                ostr_.writeValue(a2);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((A1? v) => { this.a1 = v; });
                istr_.readValue((A1? v) => { this.a2 = v; });
                istr_.endSlice();
            }

            public override bool iceUsesClasses()
            {
                return true;
            }
        }

        [Ice.SliceTypeId("::Test::EDerived")]
        public partial class EDerived : EBase
        {
            public A1? a3;

            public A1? a4;

            public EDerived(A1? a1, A1? a2, A1? a3, A1? a4) : base(a1, a2)
            {
                this.a3 = a3;
                this.a4 = a4;
            }

            public EDerived()
            {
            }

            public override string ice_id() => "::Test::EDerived";

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::EDerived", -1, false);
                ostr_.writeValue(a3);
                ostr_.writeValue(a4);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((A1? v) => { this.a3 = v; });
                istr_.readValue((A1? v) => { this.a4 = v; });
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::Recursive")]
        public partial class Recursive : Ice.Value
        {
            public Recursive? v;

            partial void ice_initialize();

            public Recursive(Recursive? v)
            {
                this.v = v;
                ice_initialize();
            }

            public Recursive()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::Recursive";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(v);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((Recursive? v) => { this.v = v; });
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::K")]
        public partial class K : Ice.Value
        {
            public global::Ice.Value? value;

            partial void ice_initialize();

            public K(global::Ice.Value? value)
            {
                this.value = value;
                ice_initialize();
            }

            public K()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::K";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(value);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((global::Ice.Value? v) => { this.value = v; });
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::L")]
        public partial class L : Ice.Value
        {
            public string data = "";

            partial void ice_initialize();

            public L(string data)
            {
                global::System.ArgumentNullException.ThrowIfNull(data);
                this.data = data;
                ice_initialize();
            }

            public L()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::L";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeString(data);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                data = istr_.readString();
                istr_.endSlice();
            }
        }

        public sealed partial record class StructKey
        {
            public int i;

            public string s = "";

            partial void ice_initialize();

            public StructKey()
            {
                ice_initialize();
            }

            public StructKey(int i, string s)
            {
                this.i = i;
                global::System.ArgumentNullException.ThrowIfNull(s);
                this.s = s;
                ice_initialize();
            }

            public StructKey(Ice.InputStream istr)
            {
                this.i = istr.readInt();
                this.s = istr.readString();
                ice_initialize();
            }

            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeInt(this.i);
                ostr.writeString(this.s);
            }

            public static void ice_write(Ice.OutputStream ostr, StructKey v)
            {
                v.ice_writeMembers(ostr);
            }

            public static StructKey ice_read(Ice.InputStream istr) => new(istr);
        }

        [Ice.SliceTypeId("::Test::M")]
        public partial class M : Ice.Value
        {
            public global::System.Collections.Generic.Dictionary<StructKey, L?> v;

            partial void ice_initialize();

            public M(global::System.Collections.Generic.Dictionary<StructKey, L?> v)
            {
                global::System.ArgumentNullException.ThrowIfNull(v);
                this.v = v;
                ice_initialize();
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            public M()
            {
                this.v = null!;
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::M";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                LMapHelper.write(ostr_, v);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                v = LMapHelper.read(istr_);
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::F3")]
        public partial class F3 : Ice.Value
        {
            public F1? f1;

            public F2Prx? f2;

            partial void ice_initialize();

            public F3(F1? f1, F2Prx? f2)
            {
                this.f1 = f1;
                this.f2 = f2;
                ice_initialize();
            }

            public F3()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::F3";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(f1);
                F2PrxHelper.write(ostr_, f2);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((F1? v) => { this.f1 = v; });
                f2 = F2PrxHelper.read(istr_);
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::Initial")]
        public partial interface Initial : Ice.Object
        {
            void shutdown(Ice.Current current);

            B? getB1(Ice.Current current);

            B? getB2(Ice.Current current);

            C? getC(Ice.Current current);

            D? getD(Ice.Current current);

            void setRecursive(Recursive? p, Ice.Current current);

            void setCycle(Recursive? r, Ice.Current current);

            bool acceptsClassCycles(Ice.Current current);

            Initial_GetMBMarshaledResult getMB(Ice.Current current);

            global::System.Threading.Tasks.Task<Initial_GetAMDMBMarshaledResult> getAMDMBAsync(Ice.Current current);

            void getAll(out B? b1, out B? b2, out C? theC, out D? theD, Ice.Current current);

            K? getK(Ice.Current current);

            global::Ice.Value? opValue(global::Ice.Value? v1, out global::Ice.Value? v2, Ice.Current current);

            global::Ice.Value?[] opValueSeq(global::Ice.Value?[] v1, out global::Ice.Value?[] v2, Ice.Current current);

            global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> v1, out global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> v2, Ice.Current current);

            D1? getD1(D1? d1, Ice.Current current);

            void throwEDerived(Ice.Current current);

            void setG(G? theG, Ice.Current current);

            Base?[] opBaseSeq(Base?[] inSeq, out Base?[] outSeq, Ice.Current current);

            Compact? getCompact(Ice.Current current);

            global::Ice.objects.Test.Inner.A? getInnerA(Ice.Current current);

            global::Ice.objects.Test.Inner.Sub.A? getInnerSubA(Ice.Current current);

            void throwInnerEx(Ice.Current current);

            void throwInnerSubEx(Ice.Current current);

            M? opM(M? v1, out M? v2, Ice.Current current);

            F1? opF1(F1? f11, out F1? f12, Ice.Current current);

            F2Prx? opF2(F2Prx? f21, out F2Prx? f22, Ice.Current current);

            F3? opF3(F3? f31, out F3? f32, Ice.Current current);

            bool hasF3(Ice.Current current);
        }

        [Ice.SliceTypeId("::Test::Empty")]
        public partial class Empty : Ice.Value
        {
            partial void ice_initialize();

            public Empty()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::Empty";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::AlsoEmpty")]
        public partial class AlsoEmpty : Ice.Value
        {
            partial void ice_initialize();

            public AlsoEmpty()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::AlsoEmpty";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::UnexpectedObjectExceptionTest")]
        public partial interface UnexpectedObjectExceptionTest : Ice.Object
        {
            Empty? op(Ice.Current current);
        }

        [Ice.SliceTypeId("::Test::IBase")]
        public partial class IBase : Ice.Value
        {
            public string id = "";

            partial void ice_initialize();

            public IBase(string id)
            {
                global::System.ArgumentNullException.ThrowIfNull(id);
                this.id = id;
                ice_initialize();
            }

            public IBase()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::IBase";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeString(id);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                id = istr_.readString();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::IDerived")]
        public partial class IDerived : IBase
        {
            public string name = "";

            partial void ice_initialize();

            public IDerived(string id, string name) : base(id)
            {
                global::System.ArgumentNullException.ThrowIfNull(name);
                this.name = name;
                ice_initialize();
            }

            public IDerived()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::IDerived";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeString(name);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                name = istr_.readString();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::IDerived2")]
        public partial class IDerived2 : IBase
        {
            partial void ice_initialize();

            public IDerived2(string id) : base(id)
            {
                ice_initialize();
            }

            public IDerived2()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::IDerived2";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::I2")]
        public partial class I2 : Ice.Value
        {
            partial void ice_initialize();

            public I2()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::I2";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }
        }

        public partial record struct S1
        {
            public int id;

            partial void ice_initialize();

            public S1(int id)
            {
                this.id = id;
                ice_initialize();
            }

            public S1(Ice.InputStream istr)
            {
                this.id = istr.readInt();
                ice_initialize();
            }

            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeInt(this.id);
            }

            public static void ice_write(Ice.OutputStream ostr, S1 v)
            {
                v.ice_writeMembers(ostr);
            }

            public static S1 ice_read(Ice.InputStream istr) => new(istr);
        }

        public sealed partial record class SC1
        {
            public string id = "";

            partial void ice_initialize();

            public SC1()
            {
                ice_initialize();
            }

            public SC1(string id)
            {
                global::System.ArgumentNullException.ThrowIfNull(id);
                this.id = id;
                ice_initialize();
            }

            public SC1(Ice.InputStream istr)
            {
                this.id = istr.readString();
                ice_initialize();
            }

            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeString(this.id);
            }

            public static void ice_write(Ice.OutputStream ostr, SC1 v)
            {
                v.ice_writeMembers(ostr);
            }

            public static SC1 ice_read(Ice.InputStream istr) => new(istr);
        }

        [Ice.SliceTypeId("::Test::COneMember")]
        public partial class COneMember : Ice.Value
        {
            public Empty? e;

            partial void ice_initialize();

            public COneMember(Empty? e)
            {
                this.e = e;
                ice_initialize();
            }

            public COneMember()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::COneMember";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(e);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((Empty? v) => { this.e = v; });
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::CTwoMembers")]
        public partial class CTwoMembers : Ice.Value
        {
            public Empty? e1;

            public Empty? e2;

            partial void ice_initialize();

            public CTwoMembers(Empty? e1, Empty? e2)
            {
                this.e1 = e1;
                this.e2 = e2;
                ice_initialize();
            }

            public CTwoMembers()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::CTwoMembers";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(e1);
                ostr_.writeValue(e2);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((Empty? v) => { this.e1 = v; });
                istr_.readValue((Empty? v) => { this.e2 = v; });
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::EOneMember")]
        public partial class EOneMember : Ice.UserException
        {
            public Empty? e;

            public EOneMember(Empty? e)
            {
                this.e = e;
            }

            public EOneMember()
            {
            }

            public override string ice_id() => "::Test::EOneMember";

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::EOneMember", -1, true);
                ostr_.writeValue(e);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((Empty? v) => { this.e = v; });
                istr_.endSlice();
            }

            public override bool iceUsesClasses()
            {
                return true;
            }
        }

        [Ice.SliceTypeId("::Test::ETwoMembers")]
        public partial class ETwoMembers : Ice.UserException
        {
            public Empty? e1;

            public Empty? e2;

            public ETwoMembers(Empty? e1, Empty? e2)
            {
                this.e1 = e1;
                this.e2 = e2;
            }

            public ETwoMembers()
            {
            }

            public override string ice_id() => "::Test::ETwoMembers";

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::ETwoMembers", -1, true);
                ostr_.writeValue(e1);
                ostr_.writeValue(e2);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((Empty? v) => { this.e1 = v; });
                istr_.readValue((Empty? v) => { this.e2 = v; });
                istr_.endSlice();
            }

            public override bool iceUsesClasses()
            {
                return true;
            }
        }

        public sealed partial record class SOneMember
        {
            public Empty? e;

            partial void ice_initialize();

            public SOneMember()
            {
                ice_initialize();
            }

            public SOneMember(Empty? e)
            {
                this.e = e;
                ice_initialize();
            }

            public SOneMember(Ice.InputStream istr)
            {
                istr.readValue((Empty? v) => { this.e = v; });
                ice_initialize();
            }

            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeValue(this.e);
            }

            public static void ice_write(Ice.OutputStream ostr, SOneMember v)
            {
                v.ice_writeMembers(ostr);
            }

            public static SOneMember ice_read(Ice.InputStream istr) => new(istr);
        }

        public sealed partial record class STwoMembers
        {
            public Empty? e1;

            public Empty? e2;

            partial void ice_initialize();

            public STwoMembers()
            {
                ice_initialize();
            }

            public STwoMembers(Empty? e1, Empty? e2)
            {
                this.e1 = e1;
                this.e2 = e2;
                ice_initialize();
            }

            public STwoMembers(Ice.InputStream istr)
            {
                istr.readValue((Empty? v) => { this.e1 = v; });
                istr.readValue((Empty? v) => { this.e2 = v; });
                ice_initialize();
            }

            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeValue(this.e1);
                ostr.writeValue(this.e2);
            }

            public static void ice_write(Ice.OutputStream ostr, STwoMembers v)
            {
                v.ice_writeMembers(ostr);
            }

            public static STwoMembers ice_read(Ice.InputStream istr) => new(istr);
        }
    }
}

namespace Ice.objects
{
    namespace Test
    {
        public readonly record struct Initial_GetMBMarshaledResult : Ice.MarshaledResult
        {
            public Initial_GetMBMarshaledResult(B? ret, Ice.Current current)
            {
                _ostr = Ice.CurrentExtensions.startReplyStream(current);
                _ostr.startEncapsulation(current.encoding, null);
                _ostr.writeValue(ret);
                _ostr.writePendingValues();
                _ostr.endEncapsulation();
            }

            public Ice.OutputStream outputStream => _ostr;

            private readonly Ice.OutputStream _ostr;
        }

        public readonly record struct Initial_GetAMDMBMarshaledResult : Ice.MarshaledResult
        {
            public Initial_GetAMDMBMarshaledResult(B? ret, Ice.Current current)
            {
                _ostr = Ice.CurrentExtensions.startReplyStream(current);
                _ostr.startEncapsulation(current.encoding, null);
                _ostr.writeValue(ret);
                _ostr.writePendingValues();
                _ostr.endEncapsulation();
            }

            public Ice.OutputStream outputStream => _ostr;

            private readonly Ice.OutputStream _ostr;
        }

        public record struct Initial_GetAllResult(B? b1, B? b2, C? theC, D? theD);

        public record struct Initial_OpValueResult(global::Ice.Value? returnValue, global::Ice.Value? v2);

        public record struct Initial_OpValueSeqResult(global::Ice.Value?[] returnValue, global::Ice.Value?[] v2);

        public record struct Initial_OpValueMapResult(global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> returnValue, global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> v2);

        public record struct Initial_OpBaseSeqResult(Base?[] returnValue, Base?[] outSeq);

        public record struct Initial_OpMResult(M? returnValue, M? v2);

        public record struct Initial_OpF1Result(F1? returnValue, F1? f12);

        public record struct Initial_OpF2Result(F2Prx? returnValue, F2Prx? f22);

        public record struct Initial_OpF3Result(F3? returnValue, F3? f32);
    }
}

namespace Ice.objects
{
    namespace Test
    {
        public interface InitialPrx : Ice.ObjectPrx
        {
            void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            B? getB1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<B?> getB1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            B? getB2(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<B?> getB2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            C? getC(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<C?> getCAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            D? getD(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<D?> getDAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void setRecursive(Recursive? p, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task setRecursiveAsync(Recursive? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void setCycle(Recursive? r, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task setCycleAsync(Recursive? r, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            bool acceptsClassCycles(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<bool> acceptsClassCyclesAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            B? getMB(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<B?> getMBAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            B? getAMDMB(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<B?> getAMDMBAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void getAll(out B? b1, out B? b2, out C? theC, out D? theD, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Initial_GetAllResult> getAllAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            K? getK(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<K?> getKAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.Value? opValue(global::Ice.Value? v1, out global::Ice.Value? v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Initial_OpValueResult> opValueAsync(global::Ice.Value? v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.Value?[] opValueSeq(global::Ice.Value?[] v1, out global::Ice.Value?[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Initial_OpValueSeqResult> opValueSeqAsync(global::Ice.Value?[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> v1, out global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Initial_OpValueMapResult> opValueMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            D1? getD1(D1? d1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<D1?> getD1Async(D1? d1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwEDerived(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwEDerivedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void setG(G? theG, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task setGAsync(G? theG, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            Base?[] opBaseSeq(Base?[] inSeq, out Base?[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Initial_OpBaseSeqResult> opBaseSeqAsync(Base?[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            Compact? getCompact(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Compact?> getCompactAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.objects.Test.Inner.A? getInnerA(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<global::Ice.objects.Test.Inner.A?> getInnerAAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Ice.objects.Test.Inner.Sub.A? getInnerSubA(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<global::Ice.objects.Test.Inner.Sub.A?> getInnerSubAAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwInnerEx(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwInnerExAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void throwInnerSubEx(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task throwInnerSubExAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            M? opM(M? v1, out M? v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Initial_OpMResult> opMAsync(M? v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            F1? opF1(F1? f11, out F1? f12, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Initial_OpF1Result> opF1Async(F1? f11, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            F2Prx? opF2(F2Prx? f21, out F2Prx? f22, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Initial_OpF2Result> opF2Async(F2Prx? f21, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            F3? opF3(F3? f31, out F3? f32, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Initial_OpF3Result> opF3Async(F3? f31, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            bool hasF3(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<bool> hasF3Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        public interface UnexpectedObjectExceptionTestPrx : Ice.ObjectPrx
        {
            Empty? op(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Empty?> opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Ice.objects
{
    namespace Test
    {
        public sealed class BaseSeqHelper
        {
            public static void write(Ice.OutputStream ostr, Base?[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static Base?[] read(Ice.InputStream istr)
            {
                Base?[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new Base?[szx];
                    for (int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(Ice.Internal.Patcher.arrayReadValue<Base>(v, ix));
                    }
                }
                return v;
            }
        }

        public sealed class ValueSeqHelper
        {
            public static void write(Ice.OutputStream ostr, global::Ice.Value?[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for (int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static global::Ice.Value?[] read(Ice.InputStream istr)
            {
                global::Ice.Value?[] v;
                int v_lenx = istr.readAndCheckSeqSize(1);
                v = new Ice.Value?[v_lenx];
                for (int ix = 0; ix < v_lenx; ++ix)
                {
                    istr.readValue(Ice.Internal.Patcher.arrayReadValue<Ice.Value>(v, ix));
                }
                return v;
            }
        }

        public sealed class ValueMapHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, global::Ice.Value?> e in v)
                    {
                        ostr.writeString(e.Key);
                        ostr.writeValue(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> r = new global::System.Collections.Generic.Dictionary<string, global::Ice.Value?>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    istr.readValue((global::Ice.Value? v) => { r[k] = v; });
                }
                return r;
            }
        }

        public sealed class LMapHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<StructKey, L?> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<StructKey, L?> e in v)
                    {
                        StructKey.ice_write(ostr, e.Key);
                        ostr.writeValue(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<StructKey, L?> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<StructKey, L?> r = new global::System.Collections.Generic.Dictionary<StructKey, L?>();
                for(int i = 0; i < sz; ++i)
                {
                    StructKey k;
                    k = new StructKey(istr);
                    istr.readValue((L? v) => { r[k] = v; });
                }
                return r;
            }
        }

        public sealed class InitialPrxHelper : Ice.ObjectPrxHelperBase, InitialPrx
        {
            public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public B? getB1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getB1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public B? getB2(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getB2Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public C? getC(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getCAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public D? getD(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getDAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void setRecursive(Recursive? p, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_setRecursiveAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void setCycle(Recursive? r, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_setCycleAsync(r, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public bool acceptsClassCycles(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_acceptsClassCyclesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public B? getMB(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getMBAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public B? getAMDMB(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getAMDMBAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void getAll(out B? b1, out B? b2, out C? theC, out D? theD, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_getAllAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    b1 = result_.b1;
                    b2 = result_.b2;
                    theC = result_.theC;
                    theD = result_.theD;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public K? getK(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getKAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.Value? opValue(global::Ice.Value? v1, out global::Ice.Value? v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opValueAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.Value?[] opValueSeq(global::Ice.Value?[] v1, out global::Ice.Value?[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opValueSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> v1, out global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opValueMapAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public D1? getD1(D1? d1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getD1Async(d1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwEDerived(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwEDerivedAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void setG(G? theG, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_setGAsync(theG, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public Base?[] opBaseSeq(Base?[] inSeq, out Base?[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opBaseSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    outSeq = result_.outSeq;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public Compact? getCompact(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getCompactAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.objects.Test.Inner.A? getInnerA(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getInnerAAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Ice.objects.Test.Inner.Sub.A? getInnerSubA(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getInnerSubAAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwInnerEx(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwInnerExAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void throwInnerSubEx(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_throwInnerSubExAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public M? opM(M? v1, out M? v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opMAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public F1? opF1(F1? f11, out F1? f12, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opF1Async(f11, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    f12 = result_.f12;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public F2Prx? opF2(F2Prx? f21, out F2Prx? f22, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opF2Async(f21, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    f22 = result_.f22;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public F3? opF3(F3? f31, out F3? f32, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opF3Async(f31, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    f32 = result_.f32;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public bool hasF3(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_hasF3Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<B?> getB1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getB1Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<B?> _iceI_getB1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getB1_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<B?>(progress, cancel);
                _iceI_getB1(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getB1_name = "getB1";

            private void _iceI_getB1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<B?>(completed);
                outAsync.invoke(
                    _getB1_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        B? ret = null;
                        istr.readValue((B? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<B?> getB2Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getB2Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<B?> _iceI_getB2Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getB2_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<B?>(progress, cancel);
                _iceI_getB2(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getB2_name = "getB2";

            private void _iceI_getB2(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<B?>(completed);
                outAsync.invoke(
                    _getB2_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        B? ret = null;
                        istr.readValue((B? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<C?> getCAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getCAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<C?> _iceI_getCAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getC_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<C?>(progress, cancel);
                _iceI_getC(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getC_name = "getC";

            private void _iceI_getC(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<C?>(completed);
                outAsync.invoke(
                    _getC_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        C? ret = null;
                        istr.readValue((C? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<D?> getDAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getDAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<D?> _iceI_getDAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getD_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<D?>(progress, cancel);
                _iceI_getD(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getD_name = "getD";

            private void _iceI_getD(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<D?>(completed);
                outAsync.invoke(
                    _getD_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        D? ret = null;
                        istr.readValue((D? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task setRecursiveAsync(Recursive? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_setRecursiveAsync(p, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setRecursiveAsync(Recursive? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setRecursive(iceP_p, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setRecursive_name = "setRecursive";

            private void _iceI_setRecursive(Recursive? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setRecursive_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_p);
                        ostr.writePendingValues();
                    });
            }

            public global::System.Threading.Tasks.Task setCycleAsync(Recursive? r, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_setCycleAsync(r, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setCycleAsync(Recursive? iceP_r, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setCycle(iceP_r, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setCycle_name = "setCycle";

            private void _iceI_setCycle(Recursive? iceP_r, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setCycle_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_r);
                        ostr.writePendingValues();
                    });
            }

            public global::System.Threading.Tasks.Task<bool> acceptsClassCyclesAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_acceptsClassCyclesAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_acceptsClassCyclesAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_acceptsClassCycles_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_acceptsClassCycles(context, synchronous, completed);
                return completed.Task;
            }

            private const string _acceptsClassCycles_name = "acceptsClassCycles";

            private void _iceI_acceptsClassCycles(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _acceptsClassCycles_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<B?> getMBAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getMBAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<B?> _iceI_getMBAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getMB_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<B?>(progress, cancel);
                _iceI_getMB(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getMB_name = "getMB";

            private void _iceI_getMB(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<B?>(completed);
                outAsync.invoke(
                    _getMB_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        B? ret = null;
                        istr.readValue((B? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<B?> getAMDMBAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getAMDMBAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<B?> _iceI_getAMDMBAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getAMDMB_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<B?>(progress, cancel);
                _iceI_getAMDMB(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getAMDMB_name = "getAMDMB";

            private void _iceI_getAMDMB(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<B?>(completed);
                outAsync.invoke(
                    _getAMDMB_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        B? ret = null;
                        istr.readValue((B? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_GetAllResult> getAllAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getAllAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_GetAllResult> _iceI_getAllAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getAll_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Initial_GetAllResult>(progress, cancel);
                _iceI_getAll(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getAll_name = "getAll";

            private void _iceI_getAll(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_GetAllResult>(completed);
                outAsync.invoke(
                    _getAll_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Initial_GetAllResult();
                        istr.readValue((B? v) => { ret.b1 = v; });
                        istr.readValue((B? v) => { ret.b2 = v; });
                        istr.readValue((C? v) => { ret.theC = v; });
                        istr.readValue((D? v) => { ret.theD = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<K?> getKAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getKAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<K?> _iceI_getKAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getK_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<K?>(progress, cancel);
                _iceI_getK(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getK_name = "getK";

            private void _iceI_getK(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<K?>(completed);
                outAsync.invoke(
                    _getK_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        K? ret = null;
                        istr.readValue((K? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpValueResult> opValueAsync(global::Ice.Value? v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opValueAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpValueResult> _iceI_opValueAsync(global::Ice.Value? iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opValue_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Initial_OpValueResult>(progress, cancel);
                _iceI_opValue(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opValue_name = "opValue";

            private void _iceI_opValue(global::Ice.Value? iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpValueResult>(completed);
                outAsync.invoke(
                    _opValue_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_v1);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Initial_OpValueResult();
                        istr.readValue((global::Ice.Value? v) => { ret.v2 = v; });
                        istr.readValue((global::Ice.Value? v) => {ret.returnValue = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpValueSeqResult> opValueSeqAsync(global::Ice.Value?[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opValueSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpValueSeqResult> _iceI_opValueSeqAsync(global::Ice.Value?[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opValueSeq_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Initial_OpValueSeqResult>(progress, cancel);
                _iceI_opValueSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opValueSeq_name = "opValueSeq";

            private void _iceI_opValueSeq(global::Ice.Value?[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpValueSeqResult>(completed);
                outAsync.invoke(
                    _opValueSeq_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ValueSeqHelper.write(ostr, iceP_v1);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Initial_OpValueSeqResult();
                        ret.v2 = ValueSeqHelper.read(istr);
                        ret.returnValue = ValueSeqHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpValueMapResult> opValueMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opValueMapAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpValueMapResult> _iceI_opValueMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opValueMap_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Initial_OpValueMapResult>(progress, cancel);
                _iceI_opValueMap(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opValueMap_name = "opValueMap";

            private void _iceI_opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpValueMapResult>(completed);
                outAsync.invoke(
                    _opValueMap_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ValueMapHelper.write(ostr, iceP_v1);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Initial_OpValueMapResult();
                        ret.v2 = ValueMapHelper.read(istr);
                        ret.returnValue = ValueMapHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<D1?> getD1Async(D1? d1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getD1Async(d1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<D1?> _iceI_getD1Async(D1? iceP_d1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getD1_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<D1?>(progress, cancel);
                _iceI_getD1(iceP_d1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getD1_name = "getD1";

            private void _iceI_getD1(D1? iceP_d1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<D1?>(completed);
                outAsync.invoke(
                    _getD1_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_d1);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        D1? ret = null;
                        istr.readValue((D1? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task throwEDerivedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwEDerivedAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwEDerivedAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwEDerived_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwEDerived(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwEDerived_name = "throwEDerived";

            private void _iceI_throwEDerived(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwEDerived_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(EDerived)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task setGAsync(G? theG, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_setGAsync(theG, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setGAsync(G? iceP_theG, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setG(iceP_theG, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setG_name = "setG";

            private void _iceI_setG(G? iceP_theG, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setG_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_theG);
                        ostr.writePendingValues();
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpBaseSeqResult> opBaseSeqAsync(Base?[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opBaseSeqAsync(inSeq, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpBaseSeqResult> _iceI_opBaseSeqAsync(Base?[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBaseSeq_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Initial_OpBaseSeqResult>(progress, cancel);
                _iceI_opBaseSeq(iceP_inSeq, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBaseSeq_name = "opBaseSeq";

            private void _iceI_opBaseSeq(Base?[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpBaseSeqResult>(completed);
                outAsync.invoke(
                    _opBaseSeq_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        BaseSeqHelper.write(ostr, iceP_inSeq);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Initial_OpBaseSeqResult();
                        ret.outSeq = BaseSeqHelper.read(istr);
                        ret.returnValue = BaseSeqHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Compact?> getCompactAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getCompactAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Compact?> _iceI_getCompactAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getCompact_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Compact?>(progress, cancel);
                _iceI_getCompact(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getCompact_name = "getCompact";

            private void _iceI_getCompact(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Compact?>(completed);
                outAsync.invoke(
                    _getCompact_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        Compact? ret = null;
                        istr.readValue((Compact? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ice.objects.Test.Inner.A?> getInnerAAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getInnerAAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.objects.Test.Inner.A?> _iceI_getInnerAAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getInnerA_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.objects.Test.Inner.A?>(progress, cancel);
                _iceI_getInnerA(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getInnerA_name = "getInnerA";

            private void _iceI_getInnerA(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.objects.Test.Inner.A?>(completed);
                outAsync.invoke(
                    _getInnerA_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        global::Ice.objects.Test.Inner.A? ret = null;
                        istr.readValue((global::Ice.objects.Test.Inner.A? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ice.objects.Test.Inner.Sub.A?> getInnerSubAAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getInnerSubAAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.objects.Test.Inner.Sub.A?> _iceI_getInnerSubAAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getInnerSubA_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.objects.Test.Inner.Sub.A?>(progress, cancel);
                _iceI_getInnerSubA(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getInnerSubA_name = "getInnerSubA";

            private void _iceI_getInnerSubA(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.objects.Test.Inner.Sub.A?>(completed);
                outAsync.invoke(
                    _getInnerSubA_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        global::Ice.objects.Test.Inner.Sub.A? ret = null;
                        istr.readValue((global::Ice.objects.Test.Inner.Sub.A? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task throwInnerExAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwInnerExAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwInnerExAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwInnerEx_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwInnerEx(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwInnerEx_name = "throwInnerEx";

            private void _iceI_throwInnerEx(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwInnerEx_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(global::Ice.objects.Test.Inner.Ex)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task throwInnerSubExAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_throwInnerSubExAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_throwInnerSubExAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_throwInnerSubEx_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_throwInnerSubEx(context, synchronous, completed);
                return completed.Task;
            }

            private const string _throwInnerSubEx_name = "throwInnerSubEx";

            private void _iceI_throwInnerSubEx(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _throwInnerSubEx_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(global::Ice.objects.Test.Inner.Sub.Ex)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpMResult> opMAsync(M? v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opMAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpMResult> _iceI_opMAsync(M? iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opM_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Initial_OpMResult>(progress, cancel);
                _iceI_opM(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opM_name = "opM";

            private void _iceI_opM(M? iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpMResult>(completed);
                outAsync.invoke(
                    _opM_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_v1);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Initial_OpMResult();
                        istr.readValue((M? v) => { ret.v2 = v; });
                        istr.readValue((M? v) => {ret.returnValue = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpF1Result> opF1Async(F1? f11, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opF1Async(f11, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpF1Result> _iceI_opF1Async(F1? iceP_f11, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opF1_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Initial_OpF1Result>(progress, cancel);
                _iceI_opF1(iceP_f11, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opF1_name = "opF1";

            private void _iceI_opF1(F1? iceP_f11, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpF1Result>(completed);
                outAsync.invoke(
                    _opF1_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_f11);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Initial_OpF1Result();
                        istr.readValue((F1? v) => { ret.f12 = v; });
                        istr.readValue((F1? v) => {ret.returnValue = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpF2Result> opF2Async(F2Prx? f21, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opF2Async(f21, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpF2Result> _iceI_opF2Async(F2Prx? iceP_f21, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opF2_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Initial_OpF2Result>(progress, cancel);
                _iceI_opF2(iceP_f21, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opF2_name = "opF2";

            private void _iceI_opF2(F2Prx? iceP_f21, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpF2Result>(completed);
                outAsync.invoke(
                    _opF2_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        F2PrxHelper.write(ostr, iceP_f21);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Initial_OpF2Result();
                        ret.f22 = F2PrxHelper.read(istr);
                        ret.returnValue = F2PrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Initial_OpF3Result> opF3Async(F3? f31, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opF3Async(f31, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Initial_OpF3Result> _iceI_opF3Async(F3? iceP_f31, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opF3_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Initial_OpF3Result>(progress, cancel);
                _iceI_opF3(iceP_f31, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opF3_name = "opF3";

            private void _iceI_opF3(F3? iceP_f31, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Initial_OpF3Result>(completed);
                outAsync.invoke(
                    _opF3_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_f31);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Initial_OpF3Result();
                        istr.readValue((F3? v) => { ret.f32 = v; });
                        istr.readValue((F3? v) => {ret.returnValue = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<bool> hasF3Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_hasF3Async(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_hasF3Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_hasF3_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_hasF3(context, synchronous, completed);
                return completed.Task;
            }

            private const string _hasF3_name = "hasF3";

            private void _iceI_hasF3(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _hasF3_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public static InitialPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new InitialPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static InitialPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new InitialPrxHelper(b) : null;

            public static InitialPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static InitialPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new InitialPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static InitialPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Initial"
            };

            public static string ice_staticId() => "::Test::Initial";

            public static void write(Ice.OutputStream ostr, InitialPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static InitialPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new InitialPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new InitialPrxHelper(reference);

            private InitialPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private InitialPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        public sealed class UnexpectedObjectExceptionTestPrxHelper : Ice.ObjectPrxHelperBase, UnexpectedObjectExceptionTestPrx
        {
            public Empty? op(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task<Empty?> opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Empty?> _iceI_opAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_op_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Empty?>(progress, cancel);
                _iceI_op(context, synchronous, completed);
                return completed.Task;
            }

            private const string _op_name = "op";

            private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Empty?>(completed);
                outAsync.invoke(
                    _op_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        Empty? ret = null;
                        istr.readValue((Empty? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public static UnexpectedObjectExceptionTestPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new UnexpectedObjectExceptionTestPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static UnexpectedObjectExceptionTestPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new UnexpectedObjectExceptionTestPrxHelper(b) : null;

            public static UnexpectedObjectExceptionTestPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static UnexpectedObjectExceptionTestPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new UnexpectedObjectExceptionTestPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static UnexpectedObjectExceptionTestPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::UnexpectedObjectExceptionTest"
            };

            public static string ice_staticId() => "::Test::UnexpectedObjectExceptionTest";

            public static void write(Ice.OutputStream ostr, UnexpectedObjectExceptionTestPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static UnexpectedObjectExceptionTestPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new UnexpectedObjectExceptionTestPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new UnexpectedObjectExceptionTestPrxHelper(reference);

            private UnexpectedObjectExceptionTestPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private UnexpectedObjectExceptionTestPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        public sealed class DOneMemberHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<int, COneMember?> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<int, COneMember?> e in v)
                    {
                        ostr.writeInt(e.Key);
                        ostr.writeValue(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<int, COneMember?> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<int, COneMember?> r = new global::System.Collections.Generic.Dictionary<int, COneMember?>();
                for(int i = 0; i < sz; ++i)
                {
                    int k;
                    k = istr.readInt();
                    istr.readValue((COneMember? v) => { r[k] = v; });
                }
                return r;
            }
        }

        public sealed class DTwoMembersHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<int, CTwoMembers?> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<int, CTwoMembers?> e in v)
                    {
                        ostr.writeInt(e.Key);
                        ostr.writeValue(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<int, CTwoMembers?> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<int, CTwoMembers?> r = new global::System.Collections.Generic.Dictionary<int, CTwoMembers?>();
                for(int i = 0; i < sz; ++i)
                {
                    int k;
                    k = istr.readInt();
                    istr.readValue((CTwoMembers? v) => { r[k] = v; });
                }
                return r;
            }
        }
    }
}

namespace Ice.objects
{
    namespace Test
    {
        public abstract class InitialDisp_ : Ice.ObjectImpl, Initial
        {
            public abstract void shutdown(Ice.Current current);

            public abstract B? getB1(Ice.Current current);

            public abstract B? getB2(Ice.Current current);

            public abstract C? getC(Ice.Current current);

            public abstract D? getD(Ice.Current current);

            public abstract void setRecursive(Recursive? p, Ice.Current current);

            public abstract void setCycle(Recursive? r, Ice.Current current);

            public abstract bool acceptsClassCycles(Ice.Current current);

            public abstract Initial_GetMBMarshaledResult getMB(Ice.Current current);

            public abstract global::System.Threading.Tasks.Task<Initial_GetAMDMBMarshaledResult> getAMDMBAsync(Ice.Current current);

            public abstract void getAll(out B? b1, out B? b2, out C? theC, out D? theD, Ice.Current current);

            public abstract K? getK(Ice.Current current);

            public abstract global::Ice.Value? opValue(global::Ice.Value? v1, out global::Ice.Value? v2, Ice.Current current);

            public abstract global::Ice.Value?[] opValueSeq(global::Ice.Value?[] v1, out global::Ice.Value?[] v2, Ice.Current current);

            public abstract global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> v1, out global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> v2, Ice.Current current);

            public abstract D1? getD1(D1? d1, Ice.Current current);

            public abstract void throwEDerived(Ice.Current current);

            public abstract void setG(G? theG, Ice.Current current);

            public abstract Base?[] opBaseSeq(Base?[] inSeq, out Base?[] outSeq, Ice.Current current);

            public abstract Compact? getCompact(Ice.Current current);

            public abstract global::Ice.objects.Test.Inner.A? getInnerA(Ice.Current current);

            public abstract global::Ice.objects.Test.Inner.Sub.A? getInnerSubA(Ice.Current current);

            public abstract void throwInnerEx(Ice.Current current);

            public abstract void throwInnerSubEx(Ice.Current current);

            public abstract M? opM(M? v1, out M? v2, Ice.Current current);

            public abstract F1? opF1(F1? f11, out F1? f12, Ice.Current current);

            public abstract F2Prx? opF2(F2Prx? f21, out F2Prx? f22, Ice.Current current);

            public abstract F3? opF3(F3? f31, out F3? f32, Ice.Current current);

            public abstract bool hasF3(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Initial";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "shutdown" => Initial.iceD_shutdownAsync(this, request),
                    "getB1" => Initial.iceD_getB1Async(this, request),
                    "getB2" => Initial.iceD_getB2Async(this, request),
                    "getC" => Initial.iceD_getCAsync(this, request),
                    "getD" => Initial.iceD_getDAsync(this, request),
                    "setRecursive" => Initial.iceD_setRecursiveAsync(this, request),
                    "setCycle" => Initial.iceD_setCycleAsync(this, request),
                    "acceptsClassCycles" => Initial.iceD_acceptsClassCyclesAsync(this, request),
                    "getMB" => Initial.iceD_getMBAsync(this, request),
                    "getAMDMB" => Initial.iceD_getAMDMBAsync(this, request),
                    "getAll" => Initial.iceD_getAllAsync(this, request),
                    "getK" => Initial.iceD_getKAsync(this, request),
                    "opValue" => Initial.iceD_opValueAsync(this, request),
                    "opValueSeq" => Initial.iceD_opValueSeqAsync(this, request),
                    "opValueMap" => Initial.iceD_opValueMapAsync(this, request),
                    "getD1" => Initial.iceD_getD1Async(this, request),
                    "throwEDerived" => Initial.iceD_throwEDerivedAsync(this, request),
                    "setG" => Initial.iceD_setGAsync(this, request),
                    "opBaseSeq" => Initial.iceD_opBaseSeqAsync(this, request),
                    "getCompact" => Initial.iceD_getCompactAsync(this, request),
                    "getInnerA" => Initial.iceD_getInnerAAsync(this, request),
                    "getInnerSubA" => Initial.iceD_getInnerSubAAsync(this, request),
                    "throwInnerEx" => Initial.iceD_throwInnerExAsync(this, request),
                    "throwInnerSubEx" => Initial.iceD_throwInnerSubExAsync(this, request),
                    "opM" => Initial.iceD_opMAsync(this, request),
                    "opF1" => Initial.iceD_opF1Async(this, request),
                    "opF2" => Initial.iceD_opF2Async(this, request),
                    "opF3" => Initial.iceD_opF3Async(this, request),
                    "hasF3" => Initial.iceD_hasF3Async(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }

        public abstract class UnexpectedObjectExceptionTestDisp_ : Ice.ObjectImpl, UnexpectedObjectExceptionTest
        {
            public abstract Empty? op(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::UnexpectedObjectExceptionTest";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "op" => UnexpectedObjectExceptionTest.iceD_opAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}

namespace Ice.objects
{
    namespace Test
    {
        public partial interface Initial
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.shutdown(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getB1Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getB1(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getB2Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getB2(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getCAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getC(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getDAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getD(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_setRecursiveAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                Recursive? iceP_p = null;
                istr.readValue((Recursive? v) => { iceP_p = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                obj.setRecursive(iceP_p, request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_setCycleAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                Recursive? iceP_r = null;
                istr.readValue((Recursive? v) => { iceP_r = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                obj.setCycle(iceP_r, request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_acceptsClassCyclesAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.acceptsClassCycles(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeBool(ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getMBAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var result = obj.getMB(request.current);
                return new (new Ice.OutgoingResponse(result.outputStream));
            }

            protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getAMDMBAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var result = await obj.getAMDMBAsync(request.current).ConfigureAwait(false);
                return new Ice.OutgoingResponse(result.outputStream);
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getAllAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                B? iceP_b1;
                B? iceP_b2;
                C? iceP_theC;
                D? iceP_theD;
                obj.getAll(out iceP_b1, out iceP_b2, out iceP_theC, out iceP_theD, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(iceP_b1);
                ostr.writeValue(iceP_b2);
                ostr.writeValue(iceP_theC);
                ostr.writeValue(iceP_theD);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getKAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getK(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opValueAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::Ice.Value? iceP_v1 = null;
                istr.readValue((global::Ice.Value? v) => { iceP_v1 = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                global::Ice.Value? iceP_v2;
                var ret = obj.opValue(iceP_v1, out iceP_v2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(iceP_v2);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opValueSeqAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::Ice.Value?[] iceP_v1;
                iceP_v1 = ValueSeqHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                global::Ice.Value?[] iceP_v2;
                var ret = obj.opValueSeq(iceP_v1, out iceP_v2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ValueSeqHelper.write(ostr, iceP_v2);
                ValueSeqHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opValueMapAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> iceP_v1;
                iceP_v1 = ValueMapHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::Ice.Value?> iceP_v2;
                var ret = obj.opValueMap(iceP_v1, out iceP_v2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ValueMapHelper.write(ostr, iceP_v2);
                ValueMapHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getD1Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                D1? iceP_d1 = null;
                istr.readValue((D1? v) => { iceP_d1 = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                var ret = obj.getD1(iceP_d1, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwEDerivedAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.throwEDerived(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_setGAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                G? iceP_theG = null;
                istr.readValue((G? v) => { iceP_theG = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                obj.setG(iceP_theG, request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBaseSeqAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                Base?[] iceP_inSeq;
                iceP_inSeq = BaseSeqHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                Base?[] iceP_outSeq;
                var ret = obj.opBaseSeq(iceP_inSeq, out iceP_outSeq, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                BaseSeqHelper.write(ostr, iceP_outSeq);
                BaseSeqHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getCompactAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getCompact(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getInnerAAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getInnerA(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getInnerSubAAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getInnerSubA(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwInnerExAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.throwInnerEx(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_throwInnerSubExAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.throwInnerSubEx(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMAsync(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                M? iceP_v1 = null;
                istr.readValue((M? v) => { iceP_v1 = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                M? iceP_v2;
                var ret = obj.opM(iceP_v1, out iceP_v2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(iceP_v2);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opF1Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                F1? iceP_f11 = null;
                istr.readValue((F1? v) => { iceP_f11 = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                F1? iceP_f12;
                var ret = obj.opF1(iceP_f11, out iceP_f12, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(iceP_f12);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opF2Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                F2Prx? iceP_f21;
                iceP_f21 = F2PrxHelper.read(istr);
                istr.endEncapsulation();
                F2Prx? iceP_f22;
                var ret = obj.opF2(iceP_f21, out iceP_f22, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                F2PrxHelper.write(ostr, iceP_f22);
                F2PrxHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opF3Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                F3? iceP_f31 = null;
                istr.readValue((F3? v) => { iceP_f31 = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                F3? iceP_f32;
                var ret = obj.opF3(iceP_f31, out iceP_f32, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(iceP_f32);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_hasF3Async(
                Initial obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.hasF3(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeBool(ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }
        }

        public partial interface UnexpectedObjectExceptionTest
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAsync(
                UnexpectedObjectExceptionTest obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.op(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }
        }
    }
}
