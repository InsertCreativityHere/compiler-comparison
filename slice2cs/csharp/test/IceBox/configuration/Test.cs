//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable 1591

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::TestIntf")]
    public partial interface TestIntf : global::Ice.Object
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string getProperty(string name, global::Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[] getArgs(global::Ice.Current current);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestIntfPrx : global::Ice.ObjectPrx
    {
        string getProperty(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<string> getPropertyAsync(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] getArgs(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<string[]> getArgsAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TestIntfPrxHelper : global::Ice.ObjectPrxHelperBase, TestIntfPrx
    {
        public TestIntfPrxHelper()
        {
        }

        #region Synchronous operations

        public string getProperty(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getPropertyAsync(name, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] getArgs(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getArgsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> getPropertyAsync(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getPropertyAsync(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getPropertyAsync(string iceP_name, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getProperty_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getProperty(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getProperty_name = "getProperty";

        private void _iceI_getProperty(string iceP_name, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getProperty_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> getArgsAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getArgsAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_getArgsAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getArgs_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_getArgs(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getArgs_name = "getArgs";

        private void _iceI_getArgs(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _getArgs_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = global::Ice.StringSeqHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Factory operations

        public static TestIntfPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static TestIntfPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                TestIntfPrxHelper prx = new TestIntfPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static TestIntfPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            global::Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    TestIntfPrxHelper prx = new TestIntfPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestIntfPrx? uncheckedCast(global::Ice.ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new TestIntfPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestIntfPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx? bb = b.ice_facet(f);
                var prx = new TestIntfPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public static string ice_staticId() => "::Test::TestIntf";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TestIntfPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static TestIntfPrx? read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new TestIntfPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class TestIntfDisp_ : global::Ice.ObjectImpl, TestIntf
    {
        #region Slice operations

        public abstract string getProperty(string name, global::Ice.Current current);

        public abstract string[] getArgs(global::Ice.Current current);

        #endregion

        #region Slice type-related members

        public override string ice_id(global::Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::TestIntf";

        #endregion

        #region Operation dispatch

        public override global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> dispatchAsync(global::Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "getProperty" => TestIntf.iceD_getPropertyAsync(this, request),
                "getArgs" => TestIntf.iceD_getArgsAsync(this, request),
                "ice_id" => global::Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => global::Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => global::Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => global::Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new global::Ice.OperationNotExistException()
            };

        #endregion
    }
}

namespace Test
{
    public partial interface TestIntf
    {
        protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_getPropertyAsync(
            TestIntf obj,
            global::Ice.IncomingRequest request)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_name;
            iceP_name = istr.readString();
            istr.endEncapsulation();
            var ret = obj.getProperty(iceP_name, request.current);
            var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
            ostr.writeString(ret);
            ostr.endEncapsulation();
            return new(new global::Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<global::Ice.OutgoingResponse> iceD_getArgsAsync(
            TestIntf obj,
            global::Ice.IncomingRequest request)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getArgs(request.current);
            var ostr = global::Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, global::Ice.FormatType.DefaultFormat);
            global::Ice.StringSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new global::Ice.OutgoingResponse(ostr));
        }
    }
}
