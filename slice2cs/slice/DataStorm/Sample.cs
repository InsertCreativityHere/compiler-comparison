//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Sample.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Sample.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace DataStorm
{
    /// <summary>
    /// The sample event matches the operation used by the DataWriter to update the data element.
    /// It also provides
    ///  information on what to expect from the sample. A sample with the Add or Update event always provide a value
    ///  while a sample with the Remove type doesn't.
    /// </summary>

    public enum SampleEvent
    {
        /// <summary>
        /// The element has been added.
        /// </summary>

        Add,
        /// <summary>
        /// The element has been updated.
        /// </summary>

        Update,
        /// <summary>
        /// The element has been partially updated.
        /// </summary>

        PartialUpdate,
        /// <summary>
        /// The element has been removed.
        /// </summary>

        Remove
    }

    public sealed class SampleEventHelper
    {
        public static void write(Ice.OutputStream ostr, SampleEvent v)
        {
            ostr.writeEnum((int)v, 3);
        }

        public static SampleEvent read(Ice.InputStream istr)
        {
            SampleEvent v;
            v = (SampleEvent)istr.readEnum(3);
            return v;
        }
    }
}

namespace DataStorm
{
    public sealed class SampleEventSeqHelper
    {
        public static void write(Ice.OutputStream ostr, SampleEvent[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 3);
                }
            }
        }

        public static SampleEvent[] read(Ice.InputStream istr)
        {
            SampleEvent[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new SampleEvent[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (SampleEvent)istr.readEnum(3);
                }
            }
            return v;
        }
    }
}
