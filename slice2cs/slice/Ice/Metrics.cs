//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceMX
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Metrics : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string id = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long total = 0L;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int current = 0;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long totalLifetime = 0L;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int failures = 0;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Metrics()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Metrics(string id, long total, int current, long totalLifetime, int failures)
        {
            this.id = id;
            this.total = total;
            this.current = current;
            this.totalLifetime = totalLifetime;
            this.failures = failures;
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceMX::Metrics";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(id);
            ostr_.writeLong(total);
            ostr_.writeInt(current);
            ostr_.writeLong(totalLifetime);
            ostr_.writeInt(failures);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            id = istr_.readString();
            total = istr_.readLong();
            current = istr_.readInt();
            totalLifetime = istr_.readLong();
            failures = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class MetricsFailures : global::System.ICloneable, global::System.IEquatable<MetricsFailures>
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string id = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<string, int> failures;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MetricsFailures()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MetricsFailures(string id, global::System.Collections.Generic.Dictionary<string, int> failures)
        {
            this.id = id;
            this.failures = failures;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone() => MemberwiseClone();

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            var hash = new global::System.HashCode();
            hash.Add(this.id);
            Ice.UtilInternal.Collections.HashCodeAdd(ref hash, this.failures);
            return hash.ToHashCode();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other) => Equals(other as MetricsFailures);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(MetricsFailures other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return other is not null && 
                this.id == other.id && 
                Ice.UtilInternal.Collections.DictionaryEquals(this.failures, other.failures);
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator ==(MetricsFailures lhs, MetricsFailures rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator !=(MetricsFailures lhs, MetricsFailures rhs) => !(lhs == rhs);

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.id);
            StringIntDictHelper.write(ostr, this.failures);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.id = istr.readString();
            this.failures = StringIntDictHelper.read(istr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, MetricsFailures v)
        {
            if (v is null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static MetricsFailures ice_read(global::Ice.InputStream istr)
        {
            var v = new MetricsFailures();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly MetricsFailures _nullMarshalValue = new MetricsFailures();

        #endregion
    }

    /// <summary>
    /// Raised if a metrics view cannot be found.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class UnknownMetricsView : global::Ice.UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public UnknownMetricsView()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public UnknownMetricsView(global::System.Exception ex) : base(ex)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceMX::UnknownMetricsView";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceMX::UnknownMetricsView", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface MetricsAdmin : global::Ice.Object, MetricsAdminOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ThreadMetrics : Metrics
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int inUseForIO = 0;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int inUseForUser = 0;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int inUseForOther = 0;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ThreadMetrics() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ThreadMetrics(string id, long total, int current, long totalLifetime, int failures, int inUseForIO, int inUseForUser, int inUseForOther) : base(id, total, current, totalLifetime, failures)
        {
            this.inUseForIO = inUseForIO;
            this.inUseForUser = inUseForUser;
            this.inUseForOther = inUseForOther;
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceMX::ThreadMetrics";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeInt(inUseForIO);
            ostr_.writeInt(inUseForUser);
            ostr_.writeInt(inUseForOther);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            inUseForIO = istr_.readInt();
            inUseForUser = istr_.readInt();
            inUseForOther = istr_.readInt();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class DispatchMetrics : Metrics
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int userException = 0;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long size = 0L;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long replySize = 0L;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public DispatchMetrics() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public DispatchMetrics(string id, long total, int current, long totalLifetime, int failures, int userException, long size, long replySize) : base(id, total, current, totalLifetime, failures)
        {
            this.userException = userException;
            this.size = size;
            this.replySize = replySize;
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceMX::DispatchMetrics";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeInt(userException);
            ostr_.writeLong(size);
            ostr_.writeLong(replySize);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            userException = istr_.readInt();
            size = istr_.readLong();
            replySize = istr_.readLong();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ChildInvocationMetrics : Metrics
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long size = 0L;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long replySize = 0L;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ChildInvocationMetrics() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ChildInvocationMetrics(string id, long total, int current, long totalLifetime, int failures, long size, long replySize) : base(id, total, current, totalLifetime, failures)
        {
            this.size = size;
            this.replySize = replySize;
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceMX::ChildInvocationMetrics";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeLong(size);
            ostr_.writeLong(replySize);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            size = istr_.readLong();
            replySize = istr_.readLong();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class CollocatedMetrics : ChildInvocationMetrics
    {
        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public CollocatedMetrics() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public CollocatedMetrics(string id, long total, int current, long totalLifetime, int failures, long size, long replySize) : base(id, total, current, totalLifetime, failures, size, replySize)
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceMX::CollocatedMetrics";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class RemoteMetrics : ChildInvocationMetrics
    {
        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public RemoteMetrics() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public RemoteMetrics(string id, long total, int current, long totalLifetime, int failures, long size, long replySize) : base(id, total, current, totalLifetime, failures, size, replySize)
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceMX::RemoteMetrics";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InvocationMetrics : Metrics
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int retry = 0;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int userException = 0;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Metrics[] remotes;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Metrics[] collocated;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InvocationMetrics() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InvocationMetrics(string id, long total, int current, long totalLifetime, int failures, int retry, int userException, Metrics[] remotes, Metrics[] collocated) : base(id, total, current, totalLifetime, failures)
        {
            this.retry = retry;
            this.userException = userException;
            this.remotes = remotes;
            this.collocated = collocated;
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceMX::InvocationMetrics";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeInt(retry);
            ostr_.writeInt(userException);
            MetricsMapHelper.write(ostr_, remotes);
            MetricsMapHelper.write(ostr_, collocated);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            retry = istr_.readInt();
            userException = istr_.readInt();
            remotes = MetricsMapHelper.read(istr_);
            collocated = MetricsMapHelper.read(istr_);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ConnectionMetrics : Metrics
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long receivedBytes = 0L;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long sentBytes = 0L;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ConnectionMetrics() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ConnectionMetrics(string id, long total, int current, long totalLifetime, int failures, long receivedBytes, long sentBytes) : base(id, total, current, totalLifetime, failures)
        {
            this.receivedBytes = receivedBytes;
            this.sentBytes = sentBytes;
            ice_initialize();
        }

        #endregion

        private const string _id = "::IceMX::ConnectionMetrics";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeLong(receivedBytes);
            ostr_.writeLong(sentBytes);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            receivedBytes = istr_.readLong();
            sentBytes = istr_.readLong();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }
}

namespace IceMX
{
    public struct MetricsAdmin_GetMetricsViewNamesResult
    {
        public MetricsAdmin_GetMetricsViewNamesResult(string[] returnValue, string[] disabledViews)
        {
            this.returnValue = returnValue;
            this.disabledViews = disabledViews;
        }

        public string[] returnValue;
        public string[] disabledViews;
    }

    public struct MetricsAdmin_GetMetricsViewResult
    {
        public MetricsAdmin_GetMetricsViewResult(global::System.Collections.Generic.Dictionary<string, Metrics[]> returnValue, long timestamp)
        {
            this.returnValue = returnValue;
            this.timestamp = timestamp;
        }

        public global::System.Collections.Generic.Dictionary<string, Metrics[]> returnValue;
        public long timestamp;
    }
}

namespace IceMX
{
    /// <summary>
    /// The metrics administrative facet interface.
    /// This interface allows remote administrative clients to access
    ///  metrics of an application that enabled the Ice administrative facility and configured some metrics views.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface MetricsAdminPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Get the names of enabled and disabled metrics.
        /// </summary>
        /// <param name="disabledViews">The names of the disabled views.
        ///  </param>
        /// <returns>The name of the enabled views.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        string[] getMetricsViewNames(out string[] disabledViews, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Get the names of enabled and disabled metrics.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<MetricsAdmin_GetMetricsViewNamesResult> getMetricsViewNamesAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Enables a metrics view.
        /// </summary>
        /// <param name="name">The metrics view name.
        ///  </param>
        /// <exception name="UnknownMetricsView">Raised if the metrics view cannot be found.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void enableMetricsView(string name, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Enables a metrics view.
        /// </summary>
        /// <param name="name">The metrics view name.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task enableMetricsViewAsync(string name, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Disable a metrics view.
        /// </summary>
        /// <param name="name">The metrics view name.
        ///  </param>
        /// <exception name="UnknownMetricsView">Raised if the metrics view cannot be found.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void disableMetricsView(string name, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Disable a metrics view.
        /// </summary>
        /// <param name="name">The metrics view name.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task disableMetricsViewAsync(string name, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get the metrics objects for the given metrics view.
        /// This returns a dictionary of metric maps for each
        ///  metrics class configured with the view. The timestamp allows the client to compute averages which are not
        ///  dependent of the invocation latency for this operation.
        /// </summary>
        ///  <param name="view">The name of the metrics view.
        ///  </param>
        /// <param name="timestamp">The local time of the process when the metrics object were retrieved.
        ///  </param>
        /// <returns>The metrics view data.
        ///  </returns>
        /// <exception name="UnknownMetricsView">Raised if the metrics view cannot be found.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::System.Collections.Generic.Dictionary<string, Metrics[]> getMetricsView(string view, out long timestamp, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Get the metrics objects for the given metrics view.
        /// This returns a dictionary of metric maps for each
        /// </summary>
        ///  <param name="view">The name of the metrics view.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<MetricsAdmin_GetMetricsViewResult> getMetricsViewAsync(string view, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get the metrics failures associated with the given view and map.
        /// </summary>
        /// <param name="view">The name of the metrics view.
        ///  </param>
        /// <param name="map">The name of the metrics map.
        ///  </param>
        /// <returns>The metrics failures associated with the map.
        ///  </returns>
        /// <exception name="UnknownMetricsView">Raised if the metrics view cannot be found.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        MetricsFailures[] getMapMetricsFailures(string view, string map, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Get the metrics failures associated with the given view and map.
        /// </summary>
        /// <param name="view">The name of the metrics view.
        ///  </param>
        /// <param name="map">The name of the metrics map.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<MetricsFailures[]> getMapMetricsFailuresAsync(string view, string map, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get the metrics failure associated for the given metrics.
        /// </summary>
        /// <param name="view">The name of the metrics view.
        ///  </param>
        /// <param name="map">The name of the metrics map.
        ///  </param>
        /// <param name="id">The ID of the metrics.
        ///  </param>
        /// <returns>The metrics failures associated with the metrics.
        ///  </returns>
        /// <exception name="UnknownMetricsView">Raised if the metrics view cannot be found.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        MetricsFailures getMetricsFailures(string view, string map, string id, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Get the metrics failure associated for the given metrics.
        /// </summary>
        /// <param name="view">The name of the metrics view.
        ///  </param>
        /// <param name="map">The name of the metrics map.
        ///  </param>
        /// <param name="id">The ID of the metrics.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<MetricsFailures> getMetricsFailuresAsync(string view, string map, string id, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace IceMX
{
    /// <summary>
    /// The metrics administrative facet interface.
    /// This interface allows remote administrative clients to access
    ///  metrics of an application that enabled the Ice administrative facility and configured some metrics views.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface MetricsAdminOperations_
    {
        /// <summary>
        /// Get the names of enabled and disabled metrics.
        /// </summary>
        /// <param name="disabledViews">The names of the disabled views.
        ///  </param>
        /// <returns>The name of the enabled views.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[] getMetricsViewNames(out string[] disabledViews, global::Ice.Current current = null);

        /// <summary>
        /// Enables a metrics view.
        /// </summary>
        /// <param name="name">The metrics view name.
        ///  </param>
        /// <exception name="UnknownMetricsView">Raised if the metrics view cannot be found.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void enableMetricsView(string name, global::Ice.Current current = null);

        /// <summary>
        /// Disable a metrics view.
        /// </summary>
        /// <param name="name">The metrics view name.
        ///  </param>
        /// <exception name="UnknownMetricsView">Raised if the metrics view cannot be found.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void disableMetricsView(string name, global::Ice.Current current = null);

        /// <summary>
        /// Get the metrics objects for the given metrics view.
        /// This returns a dictionary of metric maps for each
        ///  metrics class configured with the view. The timestamp allows the client to compute averages which are not
        ///  dependent of the invocation latency for this operation.
        /// </summary>
        ///  <param name="view">The name of the metrics view.
        ///  </param>
        /// <param name="timestamp">The local time of the process when the metrics object were retrieved.
        ///  </param>
        /// <returns>The metrics view data.
        ///  </returns>
        /// <exception name="UnknownMetricsView">Raised if the metrics view cannot be found.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, Metrics[]> getMetricsView(string view, out long timestamp, global::Ice.Current current = null);

        /// <summary>
        /// Get the metrics failures associated with the given view and map.
        /// </summary>
        /// <param name="view">The name of the metrics view.
        ///  </param>
        /// <param name="map">The name of the metrics map.
        ///  </param>
        /// <returns>The metrics failures associated with the map.
        ///  </returns>
        /// <exception name="UnknownMetricsView">Raised if the metrics view cannot be found.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MetricsFailures[] getMapMetricsFailures(string view, string map, global::Ice.Current current = null);

        /// <summary>
        /// Get the metrics failure associated for the given metrics.
        /// </summary>
        /// <param name="view">The name of the metrics view.
        ///  </param>
        /// <param name="map">The name of the metrics map.
        ///  </param>
        /// <param name="id">The ID of the metrics.
        ///  </param>
        /// <returns>The metrics failures associated with the metrics.
        ///  </returns>
        /// <exception name="UnknownMetricsView">Raised if the metrics view cannot be found.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MetricsFailures getMetricsFailures(string view, string map, string id, global::Ice.Current current = null);
    }
}

namespace IceMX
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringIntDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, int> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, int> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeInt(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, int> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, int> r = new global::System.Collections.Generic.Dictionary<string, int>();
            for(int i = 0; i < sz; ++i)
            {
                string k = default;
                k = istr.readString();
                int v = default;
                v = istr.readInt();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MetricsFailuresSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, MetricsFailures[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new MetricsFailures() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static MetricsFailures[] read(global::Ice.InputStream istr)
        {
            MetricsFailures[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new MetricsFailures[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new MetricsFailures();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MetricsMapHelper
    {
        public static void write(global::Ice.OutputStream ostr, Metrics[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static Metrics[] read(global::Ice.InputStream istr)
        {
            Metrics[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new Metrics[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::Ice.Internal.Patcher.arrayReadValue<Metrics>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MetricsViewHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, Metrics[]> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, Metrics[]> e in v)
                {
                    ostr.writeString(e.Key);
                    MetricsMapHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, Metrics[]> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, Metrics[]> r = new global::System.Collections.Generic.Dictionary<string, Metrics[]>();
            for(int i = 0; i < sz; ++i)
            {
                string k = default;
                k = istr.readString();
                Metrics[] v = default;
                v = MetricsMapHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MetricsAdminPrxHelper : global::Ice.ObjectPrxHelperBase, MetricsAdminPrx
    {
        public MetricsAdminPrxHelper()
        {
        }

        #region Synchronous operations

        public string[] getMetricsViewNames(out string[] disabledViews, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_getMetricsViewNamesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                disabledViews = result_.disabledViews;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void enableMetricsView(string name, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_enableMetricsViewAsync(name, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void disableMetricsView(string name, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_disableMetricsViewAsync(name, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, Metrics[]> getMetricsView(string view, out long timestamp, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_getMetricsViewAsync(view, context, null, global::System.Threading.CancellationToken.None, true).Result;
                timestamp = result_.timestamp;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public MetricsFailures[] getMapMetricsFailures(string view, string map, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_getMapMetricsFailuresAsync(view, map, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public MetricsFailures getMetricsFailures(string view, string map, string id, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_getMetricsFailuresAsync(view, map, id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<MetricsAdmin_GetMetricsViewNamesResult> getMetricsViewNamesAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getMetricsViewNamesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MetricsAdmin_GetMetricsViewNamesResult> _iceI_getMetricsViewNamesAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getMetricsViewNames_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MetricsAdmin_GetMetricsViewNamesResult>(progress, cancel);
            _iceI_getMetricsViewNames(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getMetricsViewNames_name = "getMetricsViewNames";

        private void _iceI_getMetricsViewNames(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MetricsAdmin_GetMetricsViewNamesResult>(completed);
            outAsync.invoke(
                _getMetricsViewNames_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    MetricsAdmin_GetMetricsViewNamesResult ret = new MetricsAdmin_GetMetricsViewNamesResult();
                    ret.disabledViews = global::Ice.StringSeqHelper.read(istr);
                    ret.returnValue = global::Ice.StringSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task enableMetricsViewAsync(string name, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_enableMetricsViewAsync(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_enableMetricsViewAsync(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_enableMetricsView_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_enableMetricsView(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _enableMetricsView_name = "enableMetricsView";

        private void _iceI_enableMetricsView(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _enableMetricsView_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(UnknownMetricsView)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task disableMetricsViewAsync(string name, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_disableMetricsViewAsync(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_disableMetricsViewAsync(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_disableMetricsView_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_disableMetricsView(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _disableMetricsView_name = "disableMetricsView";

        private void _iceI_disableMetricsView(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _disableMetricsView_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(UnknownMetricsView)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<MetricsAdmin_GetMetricsViewResult> getMetricsViewAsync(string view, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getMetricsViewAsync(view, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MetricsAdmin_GetMetricsViewResult> _iceI_getMetricsViewAsync(string iceP_view, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getMetricsView_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MetricsAdmin_GetMetricsViewResult>(progress, cancel);
            _iceI_getMetricsView(iceP_view, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getMetricsView_name = "getMetricsView";

        private void _iceI_getMetricsView(string iceP_view, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MetricsAdmin_GetMetricsViewResult>(completed);
            outAsync.invoke(
                _getMetricsView_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_view);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(UnknownMetricsView)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    MetricsAdmin_GetMetricsViewResult ret = new MetricsAdmin_GetMetricsViewResult();
                    ret.timestamp = istr.readLong();
                    ret.returnValue = MetricsViewHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MetricsFailures[]> getMapMetricsFailuresAsync(string view, string map, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getMapMetricsFailuresAsync(view, map, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MetricsFailures[]> _iceI_getMapMetricsFailuresAsync(string iceP_view, string iceP_map, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getMapMetricsFailures_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MetricsFailures[]>(progress, cancel);
            _iceI_getMapMetricsFailures(iceP_view, iceP_map, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getMapMetricsFailures_name = "getMapMetricsFailures";

        private void _iceI_getMapMetricsFailures(string iceP_view, string iceP_map, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MetricsFailures[]>(completed);
            outAsync.invoke(
                _getMapMetricsFailures_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_view);
                    ostr.writeString(iceP_map);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(UnknownMetricsView)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    MetricsFailures[] ret = default;
                    ret = MetricsFailuresSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MetricsFailures> getMetricsFailuresAsync(string view, string map, string id, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getMetricsFailuresAsync(view, map, id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MetricsFailures> _iceI_getMetricsFailuresAsync(string iceP_view, string iceP_map, string iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getMetricsFailures_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<MetricsFailures>(progress, cancel);
            _iceI_getMetricsFailures(iceP_view, iceP_map, iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getMetricsFailures_name = "getMetricsFailures";

        private void _iceI_getMetricsFailures(string iceP_view, string iceP_map, string iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MetricsFailures>(completed);
            outAsync.invoke(
                _getMetricsFailures_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_view);
                    ostr.writeString(iceP_map);
                    ostr.writeString(iceP_id);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(UnknownMetricsView)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    MetricsFailures ret = default;
                    ret = MetricsFailures.ice_read(istr);
                    return ret;
                });
        }

        #endregion

        #region Factory operations

        public static MetricsAdminPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static MetricsAdminPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                MetricsAdminPrxHelper prx = new MetricsAdminPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static MetricsAdminPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    MetricsAdminPrxHelper prx = new MetricsAdminPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static MetricsAdminPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                MetricsAdminPrxHelper prx = new MetricsAdminPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static MetricsAdminPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                MetricsAdminPrxHelper prx = new MetricsAdminPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceMX::MetricsAdmin"
        };

        public static string ice_staticId() => "::IceMX::MetricsAdmin";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, MetricsAdminPrx v)
        {
            ostr.writeProxy(v);
        }

        public static MetricsAdminPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                MetricsAdminPrxHelper result = new MetricsAdminPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace IceMX
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class MetricsAdminDisp_ : global::Ice.ObjectImpl, MetricsAdmin
    {
        #region Slice operations

        public abstract string[] getMetricsViewNames(out string[] disabledViews, global::Ice.Current current = null);

        public abstract void enableMetricsView(string name, global::Ice.Current current = null);

        public abstract void disableMetricsView(string name, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, Metrics[]> getMetricsView(string view, out long timestamp, global::Ice.Current current = null);

        public abstract MetricsFailures[] getMapMetricsFailures(string view, string map, global::Ice.Current current = null);

        public abstract MetricsFailures getMetricsFailures(string view, string map, string id, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceMX::MetricsAdmin"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceMX::MetricsAdmin";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getMetricsViewNames(MetricsAdmin obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            string[] iceP_disabledViews;
            var ret = obj.getMetricsViewNames(out iceP_disabledViews, current);
            var ostr = inS.startWriteParams();
            global::Ice.StringSeqHelper.write(ostr, iceP_disabledViews);
            global::Ice.StringSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_enableMetricsView(MetricsAdmin obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_name = default;
            iceP_name = istr.readString();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            obj.enableMetricsView(iceP_name, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_disableMetricsView(MetricsAdmin obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_name = default;
            iceP_name = istr.readString();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            obj.disableMetricsView(iceP_name, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getMetricsView(MetricsAdmin obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_view = default;
            iceP_view = istr.readString();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            long iceP_timestamp;
            var ret = obj.getMetricsView(iceP_view, out iceP_timestamp, current);
            var ostr = inS.startWriteParams();
            ostr.writeLong(iceP_timestamp);
            MetricsViewHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getMapMetricsFailures(MetricsAdmin obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_view = default;
            string iceP_map = default;
            iceP_view = istr.readString();
            iceP_map = istr.readString();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.getMapMetricsFailures(iceP_view, iceP_map, current);
            var ostr = inS.startWriteParams();
            MetricsFailuresSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getMetricsFailures(MetricsAdmin obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_view = default;
            string iceP_map = default;
            string iceP_id = default;
            iceP_view = istr.readString();
            iceP_map = istr.readString();
            iceP_id = istr.readString();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.getMetricsFailures(iceP_view, iceP_map, iceP_id, current);
            var ostr = inS.startWriteParams();
            MetricsFailures.ice_write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "disableMetricsView",
            "enableMetricsView",
            "getMapMetricsFailures",
            "getMetricsFailures",
            "getMetricsView",
            "getMetricsViewNames",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_disableMetricsView(this, inS, current);
                }
                case 1:
                {
                    return iceD_enableMetricsView(this, inS, current);
                }
                case 2:
                {
                    return iceD_getMapMetricsFailures(this, inS, current);
                }
                case 3:
                {
                    return iceD_getMetricsFailures(this, inS, current);
                }
                case 4:
                {
                    return iceD_getMetricsView(this, inS, current);
                }
                case 5:
                {
                    return iceD_getMetricsViewNames(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
