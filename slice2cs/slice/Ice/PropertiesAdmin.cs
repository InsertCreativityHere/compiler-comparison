// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'PropertiesAdmin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("PropertiesAdmin.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Ice
{
    /// <summary>
    /// The PropertiesAdmin interface provides remote access to the properties of a communicator.
    /// </summary>
    public interface PropertiesAdminPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// Get a property by key. If the property is not set, an empty string is returned.
        /// </summary>
        /// <param name="key">
        /// The property key.
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// The property value.
        /// </returns>
        string getProperty(string key, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get a property by key. If the property is not set, an empty string is returned.
        /// </summary>
        /// <param name="key">
        /// The property key.
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<string> getPropertyAsync(string key, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get all properties whose keys begin with prefix. If prefix is an empty string then all
        /// properties are returned.
        /// </summary>
        /// <param name="prefix">
        /// The prefix to search for (empty string if none).
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// The matching property set.
        /// </returns>
        global::System.Collections.Generic.Dictionary<string, string> getPropertiesForPrefix(string prefix, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get all properties whose keys begin with prefix. If prefix is an empty string then all
        /// properties are returned.
        /// </summary>
        /// <param name="prefix">
        /// The prefix to search for (empty string if none).
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getPropertiesForPrefixAsync(string prefix, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Update the communicator's properties with the given property set. If an entry in newProperties
        /// matches the name of an existing property, that property's value is replaced with the new value. If the new
        /// value is an empty string, the property is removed. Any existing properties that are not modified or removed
        /// by the entries in newProperties are retained with their original values.
        /// </summary>
        /// <param name="newProperties">
        /// Properties to be added, changed, or removed.
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        void setProperties(global::System.Collections.Generic.Dictionary<string, string> newProperties, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Update the communicator's properties with the given property set. If an entry in newProperties
        /// matches the name of an existing property, that property's value is replaced with the new value. If the new
        /// value is an empty string, the property is removed. Any existing properties that are not modified or removed
        /// by the entries in newProperties are retained with their original values.
        /// </summary>
        /// <param name="newProperties">
        /// Properties to be added, changed, or removed.
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setPropertiesAsync(global::System.Collections.Generic.Dictionary<string, string> newProperties, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    public sealed class PropertiesAdminPrxHelper : Ice.ObjectPrxHelperBase, PropertiesAdminPrx
    {
        public string getProperty(string key, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getPropertyAsync(key, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> getPropertiesForPrefix(string prefix, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getPropertiesForPrefixAsync(prefix, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void setProperties(global::System.Collections.Generic.Dictionary<string, string> newProperties, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_setPropertiesAsync(newProperties, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<string> getPropertyAsync(string key, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getPropertyAsync(key, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getPropertyAsync(string iceP_key, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getProperty_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getProperty(iceP_key, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getProperty_name = "getProperty";

        private void _iceI_getProperty(string iceP_key, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getProperty_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_key);
                },
                read: (Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getPropertiesForPrefixAsync(string prefix, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getPropertiesForPrefixAsync(prefix, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_getPropertiesForPrefixAsync(string iceP_prefix, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getPropertiesForPrefix_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
            _iceI_getPropertiesForPrefix(iceP_prefix, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getPropertiesForPrefix_name = "getPropertiesForPrefix";

        private void _iceI_getPropertiesForPrefix(string iceP_prefix, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
            outAsync.invoke(
                _getPropertiesForPrefix_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_prefix);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, string> ret;
                    ret = PropertyDictHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task setPropertiesAsync(global::System.Collections.Generic.Dictionary<string, string> newProperties, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_setPropertiesAsync(newProperties, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setPropertiesAsync(global::System.Collections.Generic.Dictionary<string, string> iceP_newProperties, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setProperties(iceP_newProperties, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setProperties_name = "setProperties";

        private void _iceI_setProperties(global::System.Collections.Generic.Dictionary<string, string> iceP_newProperties, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setProperties_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    PropertyDictHelper.write(ostr, iceP_newProperties);
                });
        }

        public static PropertiesAdminPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new PropertiesAdminPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static PropertiesAdminPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new PropertiesAdminPrxHelper(b) : null;

        public static PropertiesAdminPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static PropertiesAdminPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new PropertiesAdminPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static PropertiesAdminPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Ice::PropertiesAdmin"
        };

        public static string ice_staticId() => "::Ice::PropertiesAdmin";

        public static void write(Ice.OutputStream ostr, PropertiesAdminPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static PropertiesAdminPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new PropertiesAdminPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new PropertiesAdminPrxHelper(reference);

        private PropertiesAdminPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private PropertiesAdminPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Ice
{
    [Ice.SliceTypeId("::Ice::PropertiesAdmin")]
    public partial interface PropertiesAdmin : Ice.Object
    {
        /// <summary>
        /// Get a property by key. If the property is not set, an empty string is returned.
        /// </summary>
        /// <param name="key">
        /// The property key.
        /// </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// The property value.
        /// </returns>
        string getProperty(string key, Ice.Current current);

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getPropertyAsync(
            PropertiesAdmin obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_key;
            iceP_key = istr.readString();
            istr.endEncapsulation();
            var ret = obj.getProperty(iceP_key, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeString(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        /// <summary>
        /// Get all properties whose keys begin with prefix. If prefix is an empty string then all
        /// properties are returned.
        /// </summary>
        /// <param name="prefix">
        /// The prefix to search for (empty string if none).
        /// </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// The matching property set.
        /// </returns>
        global::System.Collections.Generic.Dictionary<string, string> getPropertiesForPrefix(string prefix, Ice.Current current);

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getPropertiesForPrefixAsync(
            PropertiesAdmin obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_prefix;
            iceP_prefix = istr.readString();
            istr.endEncapsulation();
            var ret = obj.getPropertiesForPrefix(iceP_prefix, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            PropertyDictHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        /// <summary>
        /// Update the communicator's properties with the given property set. If an entry in newProperties
        /// matches the name of an existing property, that property's value is replaced with the new value. If the new
        /// value is an empty string, the property is removed. Any existing properties that are not modified or removed
        /// by the entries in newProperties are retained with their original values.
        /// </summary>
        /// <param name="newProperties">
        /// Properties to be added, changed, or removed.
        /// </param>
        /// <param name="current">The Current object for the dispatch.</param>
        void setProperties(global::System.Collections.Generic.Dictionary<string, string> newProperties, Ice.Current current);

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_setPropertiesAsync(
            PropertiesAdmin obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, string> iceP_newProperties;
            iceP_newProperties = PropertyDictHelper.read(istr);
            istr.endEncapsulation();
            obj.setProperties(iceP_newProperties, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }

    public abstract class PropertiesAdminDisp_ : Ice.ObjectImpl, PropertiesAdmin
    {
        public abstract string getProperty(string key, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, string> getPropertiesForPrefix(string prefix, Ice.Current current);

        public abstract void setProperties(global::System.Collections.Generic.Dictionary<string, string> newProperties, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Ice::PropertiesAdmin";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "getProperty" => PropertiesAdmin.iceD_getPropertyAsync(this, request),
                "getPropertiesForPrefix" => PropertiesAdmin.iceD_getPropertiesForPrefixAsync(this, request),
                "setProperties" => PropertiesAdmin.iceD_setPropertiesAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}
