//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `PropertiesAdmin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

using _System = global::System;

[assembly:Ice.Slice("PropertiesAdmin.ice")]

#pragma warning disable 1591

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface PropertiesAdmin : Object, PropertiesAdminOperations_
    {
    }
}

namespace Ice
{
    /// <summary>
    /// The PropertiesAdmin interface provides remote access to the properties of a communicator.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface PropertiesAdminPrx : ObjectPrx
    {
        /// <summary>
        /// Get a property by key.
        /// If the property is not set, an empty string is returned.
        /// </summary>
        ///  <param name="key">The property key.
        ///  </param>
        /// <returns>The property value.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        string getProperty(string key, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Get a property by key.
        /// If the property is not set, an empty string is returned.
        /// </summary>
        ///  <param name="key">The property key.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<string> getPropertyAsync(string key, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get all properties whose keys begin with prefix.
        /// If prefix is an empty string then all
        ///  properties are returned.
        /// </summary>
        ///  <param name="prefix">The prefix to search for (empty string if none).
        ///  </param>
        /// <returns>The matching property set.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::System.Collections.Generic.Dictionary<string, string> getPropertiesForPrefix(string prefix, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Get all properties whose keys begin with prefix.
        /// If prefix is an empty string then all
        /// </summary>
        ///  <param name="prefix">The prefix to search for (empty string if none).
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getPropertiesForPrefixAsync(string prefix, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Update the communicator's properties with the given property set.
        /// If an entry in newProperties
        ///  matches the name of an existing property, that property's value is replaced with the new value. If the new
        ///  value is an empty string, the property is removed. Any existing properties that are not modified or removed
        ///  by the entries in newProperties are retained with their original values.
        /// </summary>
        ///  <param name="newProperties">Properties to be added, changed, or removed.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setProperties(global::System.Collections.Generic.Dictionary<string, string> newProperties, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Update the communicator's properties with the given property set.
        /// If an entry in newProperties
        /// </summary>
        ///  <param name="newProperties">Properties to be added, changed, or removed.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setPropertiesAsync(global::System.Collections.Generic.Dictionary<string, string> newProperties, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Ice
{
    /// <summary>
    /// The PropertiesAdmin interface provides remote access to the properties of a communicator.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface PropertiesAdminOperations_
    {
        /// <summary>
        /// Get a property by key.
        /// If the property is not set, an empty string is returned.
        /// </summary>
        ///  <param name="key">The property key.
        ///  </param>
        /// <returns>The property value.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string getProperty(string key, Current current = null);

        /// <summary>
        /// Get all properties whose keys begin with prefix.
        /// If prefix is an empty string then all
        ///  properties are returned.
        /// </summary>
        ///  <param name="prefix">The prefix to search for (empty string if none).
        ///  </param>
        /// <returns>The matching property set.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, string> getPropertiesForPrefix(string prefix, Current current = null);

        /// <summary>
        /// Update the communicator's properties with the given property set.
        /// If an entry in newProperties
        ///  matches the name of an existing property, that property's value is replaced with the new value. If the new
        ///  value is an empty string, the property is removed. Any existing properties that are not modified or removed
        ///  by the entries in newProperties are retained with their original values.
        /// </summary>
        ///  <param name="newProperties">Properties to be added, changed, or removed.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void setProperties(global::System.Collections.Generic.Dictionary<string, string> newProperties, Current current = null);
    }
}

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class PropertiesAdminPrxHelper : ObjectPrxHelperBase, PropertiesAdminPrx
    {
        public PropertiesAdminPrxHelper()
        {
        }

        #region Synchronous operations

        public string getProperty(string key, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_getPropertyAsync(key, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> getPropertiesForPrefix(string prefix, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_getPropertiesForPrefixAsync(prefix, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setProperties(global::System.Collections.Generic.Dictionary<string, string> newProperties, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_setPropertiesAsync(newProperties, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> getPropertyAsync(string key, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getPropertyAsync(key, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getPropertyAsync(string iceP_key, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getProperty_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getProperty(iceP_key, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getProperty_name = "getProperty";

        private void _iceI_getProperty(string iceP_key, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getProperty_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    ostr.writeString(iceP_key);
                },
                read: (InputStream istr) =>
                {
                    string ret = default;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> getPropertiesForPrefixAsync(string prefix, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getPropertiesForPrefixAsync(prefix, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_getPropertiesForPrefixAsync(string iceP_prefix, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getPropertiesForPrefix_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
            _iceI_getPropertiesForPrefix(iceP_prefix, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getPropertiesForPrefix_name = "getPropertiesForPrefix";

        private void _iceI_getPropertiesForPrefix(string iceP_prefix, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
            outAsync.invoke(
                _getPropertiesForPrefix_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    ostr.writeString(iceP_prefix);
                },
                read: (InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, string> ret = default;
                    ret = PropertyDictHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task setPropertiesAsync(global::System.Collections.Generic.Dictionary<string, string> newProperties, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_setPropertiesAsync(newProperties, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setPropertiesAsync(global::System.Collections.Generic.Dictionary<string, string> iceP_newProperties, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setProperties(iceP_newProperties, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setProperties_name = "setProperties";

        private void _iceI_setProperties(global::System.Collections.Generic.Dictionary<string, string> iceP_newProperties, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setProperties_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    PropertyDictHelper.write(ostr, iceP_newProperties);
                });
        }

        #endregion

        #region Factory operations

        public static PropertiesAdminPrx createProxy(Communicator communicator, string proxyString) =>
            uncheckedCast(ObjectPrxHelper.createProxy(communicator, proxyString));

        public static PropertiesAdminPrx checkedCast(ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                PropertiesAdminPrxHelper prx = new PropertiesAdminPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static PropertiesAdminPrx checkedCast(ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    PropertiesAdminPrxHelper prx = new PropertiesAdminPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (FacetNotExistException)
            {
            }
            return null;
        }

        public static PropertiesAdminPrx uncheckedCast(ObjectPrx b)
        {
            if (b is not null)
            {
                PropertiesAdminPrxHelper prx = new PropertiesAdminPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static PropertiesAdminPrx uncheckedCast(ObjectPrx b, string f)
        {
            if (b is not null)
            {
                ObjectPrx bb = b.ice_facet(f);
                PropertiesAdminPrxHelper prx = new PropertiesAdminPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Ice::PropertiesAdmin"
        };

        public static string ice_staticId() => "::Ice::PropertiesAdmin";

        #endregion

        #region Marshaling support

        public static void write(OutputStream ostr, PropertiesAdminPrx v)
        {
            ostr.writeProxy(v);
        }

        public static PropertiesAdminPrx read(InputStream istr)
        {
            ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                PropertiesAdminPrxHelper result = new PropertiesAdminPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class PropertiesAdminDisp_ : ObjectImpl, PropertiesAdmin
    {
        #region Slice operations

        public abstract string getProperty(string key, Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, string> getPropertiesForPrefix(string prefix, Current current = null);

        public abstract void setProperties(global::System.Collections.Generic.Dictionary<string, string> newProperties, Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Ice::PropertiesAdmin"
        };

        public override bool ice_isA(string s, Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Ice::PropertiesAdmin";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_getProperty(PropertiesAdmin obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_key = default;
            iceP_key = istr.readString();
            inS.endReadParams();
            var ret = obj.getProperty(iceP_key, current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_getPropertiesForPrefix(PropertiesAdmin obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_prefix = default;
            iceP_prefix = istr.readString();
            inS.endReadParams();
            var ret = obj.getPropertiesForPrefix(iceP_prefix, current);
            var ostr = inS.startWriteParams();
            PropertyDictHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_setProperties(PropertiesAdmin obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<string, string> iceP_newProperties = default;
            iceP_newProperties = PropertyDictHelper.read(istr);
            inS.endReadParams();
            obj.setProperties(iceP_newProperties, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "getPropertiesForPrefix",
            "getProperty",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "setProperties"
        };

        public override global::System.Threading.Tasks.Task<OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getPropertiesForPrefix(this, inS, current);
                }
                case 1:
                {
                    return iceD_getProperty(this, inS, current);
                }
                case 2:
                {
                    return ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_setProperties(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
