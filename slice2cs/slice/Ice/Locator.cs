//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ice
{
    /// <summary>
    /// This exception is raised if an adapter cannot be found.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class AdapterNotFoundException : UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public AdapterNotFoundException()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public AdapterNotFoundException(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public AdapterNotFoundException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::Ice::AdapterNotFoundException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(OutputStream ostr_)
        {
            ostr_.startSlice("::Ice::AdapterNotFoundException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception is raised if the replica group provided by the
    /// server is invalid.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InvalidReplicaGroupIdException : UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public InvalidReplicaGroupIdException()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public InvalidReplicaGroupIdException(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public InvalidReplicaGroupIdException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::Ice::InvalidReplicaGroupIdException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(OutputStream ostr_)
        {
            ostr_.startSlice("::Ice::InvalidReplicaGroupIdException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception is raised if a server tries to set endpoints for
    /// an adapter that is already active.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class AdapterAlreadyActiveException : UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public AdapterAlreadyActiveException()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public AdapterAlreadyActiveException(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public AdapterAlreadyActiveException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::Ice::AdapterAlreadyActiveException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(OutputStream ostr_)
        {
            ostr_.startSlice("::Ice::AdapterAlreadyActiveException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception is raised if an object cannot be found.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ObjectNotFoundException : UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public ObjectNotFoundException()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public ObjectNotFoundException(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public ObjectNotFoundException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::Ice::ObjectNotFoundException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(OutputStream ostr_)
        {
            ostr_.startSlice("::Ice::ObjectNotFoundException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception is raised if a server cannot be found.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ServerNotFoundException : UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public ServerNotFoundException()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public ServerNotFoundException(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public ServerNotFoundException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::Ice::ServerNotFoundException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(OutputStream ostr_)
        {
            ostr_.startSlice("::Ice::ServerNotFoundException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Locator : Object, LocatorOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface LocatorRegistry : Object, LocatorRegistryOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface LocatorFinder : Object, LocatorFinderOperations_
    {
    }
}

namespace Ice
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Locator_findObjectById(ObjectPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Locator_findAdapterById(ObjectPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Locator_getRegistry(LocatorRegistryPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_LocatorRegistry_setAdapterDirectProxy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_LocatorRegistry_setReplicatedAdapterDirectProxy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_LocatorRegistry_setServerProcessProxy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_LocatorFinder_getLocator(LocatorPrx ret);
}

namespace Ice
{
    /// <summary>
    /// The Ice locator interface.
    /// This interface is used by clients to
    /// lookup adapters and objects. It is also used by servers to get the
    /// locator registry proxy.
    ///
    /// &lt;p class="Note"&gt;The Locator interface is intended to be used by
    /// Ice internals and by locator implementations. Regular user code
    /// should not attempt to use any functionality of this interface
    /// directly.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface LocatorPrx : ObjectPrx
    {
        /// <summary>
        /// Find an object by identity and return a proxy that contains
        /// the adapter ID or endpoints which can be used to access the
        /// object.
        /// </summary>
        /// <param name="id">The identity.
        ///
        /// </param>
        /// <returns>The proxy, or null if the object is not active.
        ///
        /// </returns>
        /// <exception name="ObjectNotFoundException">Raised if the object cannot
        /// be found.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        ObjectPrx findObjectById(Identity id, OptionalContext context = new OptionalContext());

        /// <summary>
        /// Find an object by identity and return a proxy that contains
        /// the adapter ID or endpoints which can be used to access the
        /// object.
        /// </summary>
        /// <param name="id">The identity.
        ///
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<ObjectPrx> findObjectByIdAsync(Identity id, OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Find an object by identity and return a proxy that contains
        /// the adapter ID or endpoints which can be used to access the
        /// object.
        /// </summary>
        /// <param name="id">The identity.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult<Callback_Locator_findObjectById> begin_findObjectById(Identity id, OptionalContext context = new OptionalContext());

        /// <summary>
        /// Find an object by identity and return a proxy that contains
        /// the adapter ID or endpoints which can be used to access the
        /// object.
        /// </summary>
        /// <param name="id">The identity.
        ///
        /// </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_findObjectById(Identity id, AsyncCallback callback, object cookie);

        /// <summary>
        /// Find an object by identity and return a proxy that contains
        /// the adapter ID or endpoints which can be used to access the
        /// object.
        /// </summary>
        /// <param name="id">The identity.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_findObjectById(Identity id, OptionalContext context, AsyncCallback callback, object cookie);

        /// <summary>
        /// Find an object by identity and return a proxy that contains
        /// the adapter ID or endpoints which can be used to access the
        /// object.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The proxy, or null if the object is not active.
        ///
        /// </returns>
        ObjectPrx end_findObjectById(AsyncResult asyncResult);

        /// <summary>
        /// Find an adapter by id and return a proxy that contains
        /// its endpoints.
        /// </summary>
        /// <param name="id">The adapter id.
        ///
        /// </param>
        /// <returns>The adapter proxy, or null if the adapter is not active.
        ///
        /// </returns>
        /// <exception name="AdapterNotFoundException">Raised if the adapter cannot be
        /// found.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        ObjectPrx findAdapterById(string id, OptionalContext context = new OptionalContext());

        /// <summary>
        /// Find an adapter by id and return a proxy that contains
        /// its endpoints.
        /// </summary>
        /// <param name="id">The adapter id.
        ///
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<ObjectPrx> findAdapterByIdAsync(string id, OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Find an adapter by id and return a proxy that contains
        /// its endpoints.
        /// </summary>
        /// <param name="id">The adapter id.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult<Callback_Locator_findAdapterById> begin_findAdapterById(string id, OptionalContext context = new OptionalContext());

        /// <summary>
        /// Find an adapter by id and return a proxy that contains
        /// its endpoints.
        /// </summary>
        /// <param name="id">The adapter id.
        ///
        /// </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_findAdapterById(string id, AsyncCallback callback, object cookie);

        /// <summary>
        /// Find an adapter by id and return a proxy that contains
        /// its endpoints.
        /// </summary>
        /// <param name="id">The adapter id.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_findAdapterById(string id, OptionalContext context, AsyncCallback callback, object cookie);

        /// <summary>
        /// Find an adapter by id and return a proxy that contains
        /// its endpoints.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The adapter proxy, or null if the adapter is not active.
        ///
        /// </returns>
        ObjectPrx end_findAdapterById(AsyncResult asyncResult);

        /// <summary>
        /// Get the locator registry.
        /// </summary>
        /// <returns>The locator registry.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        LocatorRegistryPrx getRegistry(OptionalContext context = new OptionalContext());

        /// <summary>
        /// Get the locator registry.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<LocatorRegistryPrx> getRegistryAsync(OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the locator registry.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult<Callback_Locator_getRegistry> begin_getRegistry(OptionalContext context = new OptionalContext());

        /// <summary>
        /// Get the locator registry.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_getRegistry(AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the locator registry.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_getRegistry(OptionalContext context, AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the locator registry.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The locator registry.</returns>
        LocatorRegistryPrx end_getRegistry(AsyncResult asyncResult);
    }

    /// <summary>
    /// The Ice locator registry interface.
    /// This interface is used by
    /// servers to register adapter endpoints with the locator.
    ///
    /// &lt;p class="Note"&gt; The LocatorRegistry interface is intended to be used
    /// by Ice internals and by locator implementations. Regular user
    /// code should not attempt to use any functionality of this interface
    /// directly.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface LocatorRegistryPrx : ObjectPrx
    {
        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="id">The adapter id.
        ///
        /// </param>
        /// <param name="proxy">The adapter proxy (a dummy direct proxy created
        /// by the adapter). The direct proxy contains the adapter
        /// endpoints.
        ///
        /// </param>
        /// <exception name="AdapterNotFoundException">Raised if the adapter cannot
        /// be found, or if the locator only allows
        /// registered adapters to set their active proxy and the
        /// adapter is not registered with the locator.
        ///
        /// </exception>
        /// <exception name="AdapterAlreadyActiveException">Raised if an adapter with the same
        /// id is already active.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setAdapterDirectProxy(string id, ObjectPrx proxy, OptionalContext context = new OptionalContext());

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="id">The adapter id.
        ///
        /// </param>
        /// <param name="proxy">The adapter proxy (a dummy direct proxy created
        /// by the adapter). The direct proxy contains the adapter
        /// endpoints.
        ///
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setAdapterDirectProxyAsync(string id, ObjectPrx proxy, OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="id">The adapter id.
        ///
        /// </param>
        /// <param name="proxy">The adapter proxy (a dummy direct proxy created
        /// by the adapter). The direct proxy contains the adapter
        /// endpoints.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult<Callback_LocatorRegistry_setAdapterDirectProxy> begin_setAdapterDirectProxy(string id, ObjectPrx proxy, OptionalContext context = new OptionalContext());

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="id">The adapter id.
        ///
        /// </param>
        /// <param name="proxy">The adapter proxy (a dummy direct proxy created
        /// by the adapter). The direct proxy contains the adapter
        /// endpoints.
        ///
        /// </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_setAdapterDirectProxy(string id, ObjectPrx proxy, AsyncCallback callback, object cookie);

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="id">The adapter id.
        ///
        /// </param>
        /// <param name="proxy">The adapter proxy (a dummy direct proxy created
        /// by the adapter). The direct proxy contains the adapter
        /// endpoints.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_setAdapterDirectProxy(string id, ObjectPrx proxy, OptionalContext context, AsyncCallback callback, object cookie);

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_setAdapterDirectProxy(AsyncResult asyncResult);

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="adapterId">The adapter id.
        ///
        /// </param>
        /// <param name="replicaGroupId">The replica group id.
        ///
        /// </param>
        /// <param name="p">The adapter proxy (a dummy direct proxy created
        /// by the adapter). The direct proxy contains the adapter
        /// endpoints.
        ///
        /// </param>
        /// <exception name="AdapterNotFoundException">Raised if the adapter cannot
        /// be found, or if the locator only allows registered adapters to
        /// set their active proxy and the adapter is not registered with
        /// the locator.
        ///
        /// </exception>
        /// <exception name="AdapterAlreadyActiveException">Raised if an adapter with the same
        /// id is already active.
        ///
        /// </exception>
        /// <exception name="InvalidReplicaGroupIdException">Raised if the given
        /// replica group doesn't match the one registered with the
        /// locator registry for this object adapter.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setReplicatedAdapterDirectProxy(string adapterId, string replicaGroupId, ObjectPrx p, OptionalContext context = new OptionalContext());

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="adapterId">The adapter id.
        ///
        /// </param>
        /// <param name="replicaGroupId">The replica group id.
        ///
        /// </param>
        /// <param name="p">The adapter proxy (a dummy direct proxy created
        /// by the adapter). The direct proxy contains the adapter
        /// endpoints.
        ///
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setReplicatedAdapterDirectProxyAsync(string adapterId, string replicaGroupId, ObjectPrx p, OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="adapterId">The adapter id.
        ///
        /// </param>
        /// <param name="replicaGroupId">The replica group id.
        ///
        /// </param>
        /// <param name="p">The adapter proxy (a dummy direct proxy created
        /// by the adapter). The direct proxy contains the adapter
        /// endpoints.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult<Callback_LocatorRegistry_setReplicatedAdapterDirectProxy> begin_setReplicatedAdapterDirectProxy(string adapterId, string replicaGroupId, ObjectPrx p, OptionalContext context = new OptionalContext());

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="adapterId">The adapter id.
        ///
        /// </param>
        /// <param name="replicaGroupId">The replica group id.
        ///
        /// </param>
        /// <param name="p">The adapter proxy (a dummy direct proxy created
        /// by the adapter). The direct proxy contains the adapter
        /// endpoints.
        ///
        /// </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_setReplicatedAdapterDirectProxy(string adapterId, string replicaGroupId, ObjectPrx p, AsyncCallback callback, object cookie);

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="adapterId">The adapter id.
        ///
        /// </param>
        /// <param name="replicaGroupId">The replica group id.
        ///
        /// </param>
        /// <param name="p">The adapter proxy (a dummy direct proxy created
        /// by the adapter). The direct proxy contains the adapter
        /// endpoints.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_setReplicatedAdapterDirectProxy(string adapterId, string replicaGroupId, ObjectPrx p, OptionalContext context, AsyncCallback callback, object cookie);

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_setReplicatedAdapterDirectProxy(AsyncResult asyncResult);

        /// <summary>
        /// Set the process proxy for a server.
        /// </summary>
        /// <param name="id">The server id.
        ///
        /// </param>
        /// <param name="proxy">The process proxy.
        ///
        /// </param>
        /// <exception name="ServerNotFoundException">Raised if the server cannot
        /// be found.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setServerProcessProxy(string id, ProcessPrx proxy, OptionalContext context = new OptionalContext());

        /// <summary>
        /// Set the process proxy for a server.
        /// </summary>
        /// <param name="id">The server id.
        ///
        /// </param>
        /// <param name="proxy">The process proxy.
        ///
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setServerProcessProxyAsync(string id, ProcessPrx proxy, OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Set the process proxy for a server.
        /// </summary>
        /// <param name="id">The server id.
        ///
        /// </param>
        /// <param name="proxy">The process proxy.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult<Callback_LocatorRegistry_setServerProcessProxy> begin_setServerProcessProxy(string id, ProcessPrx proxy, OptionalContext context = new OptionalContext());

        /// <summary>
        /// Set the process proxy for a server.
        /// </summary>
        /// <param name="id">The server id.
        ///
        /// </param>
        /// <param name="proxy">The process proxy.
        ///
        /// </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_setServerProcessProxy(string id, ProcessPrx proxy, AsyncCallback callback, object cookie);

        /// <summary>
        /// Set the process proxy for a server.
        /// </summary>
        /// <param name="id">The server id.
        ///
        /// </param>
        /// <param name="proxy">The process proxy.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_setServerProcessProxy(string id, ProcessPrx proxy, OptionalContext context, AsyncCallback callback, object cookie);

        /// <summary>
        /// Set the process proxy for a server.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_setServerProcessProxy(AsyncResult asyncResult);
    }

    /// <summary>
    /// This interface should be implemented by services implementing the
    /// Ice::Locator interface.
    /// It should be advertised through an Ice
    /// object with the identity `Ice/LocatorFinder'. This allows clients
    /// to retrieve the locator proxy with just the endpoint information of
    /// the service.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface LocatorFinderPrx : ObjectPrx
    {
        /// <summary>
        /// Get the locator proxy implemented by the process hosting this
        /// finder object.
        /// The proxy might point to several replicas.
        ///
        /// </summary>
        /// <returns>The locator proxy.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        LocatorPrx getLocator(OptionalContext context = new OptionalContext());

        /// <summary>
        /// Get the locator proxy implemented by the process hosting this
        /// finder object.
        /// The proxy might point to several replicas.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<LocatorPrx> getLocatorAsync(OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the locator proxy implemented by the process hosting this
        /// finder object.
        /// The proxy might point to several replicas.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult<Callback_LocatorFinder_getLocator> begin_getLocator(OptionalContext context = new OptionalContext());

        /// <summary>
        /// Get the locator proxy implemented by the process hosting this
        /// finder object.
        /// The proxy might point to several replicas.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_getLocator(AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the locator proxy implemented by the process hosting this
        /// finder object.
        /// The proxy might point to several replicas.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_getLocator(OptionalContext context, AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the locator proxy implemented by the process hosting this
        /// finder object.
        /// The proxy might point to several replicas.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The locator proxy.</returns>
        LocatorPrx end_getLocator(AsyncResult asyncResult);
    }
}

namespace Ice
{
    /// <summary>
    /// The Ice locator interface.
    /// This interface is used by clients to
    /// lookup adapters and objects. It is also used by servers to get the
    /// locator registry proxy.
    ///
    /// &lt;p class="Note"&gt;The Locator interface is intended to be used by
    /// Ice internals and by locator implementations. Regular user code
    /// should not attempt to use any functionality of this interface
    /// directly.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface LocatorOperations_
    {
        /// <summary>
        /// Find an object by identity and return a proxy that contains
        /// the adapter ID or endpoints which can be used to access the
        /// object.
        /// </summary>
        /// <param name="id">The identity.
        ///
        /// </param>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::System.Threading.Tasks.Task<ObjectPrx> findObjectByIdAsync(Identity id, Current current = null);

        /// <summary>
        /// Find an adapter by id and return a proxy that contains
        /// its endpoints.
        /// </summary>
        /// <param name="id">The adapter id.
        ///
        /// </param>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::System.Threading.Tasks.Task<ObjectPrx> findAdapterByIdAsync(string id, Current current = null);

        /// <summary>
        /// Get the locator registry.
        /// </summary>
        /// <returns>The locator registry.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        LocatorRegistryPrx getRegistry(Current current = null);
    }

    /// <summary>
    /// The Ice locator registry interface.
    /// This interface is used by
    /// servers to register adapter endpoints with the locator.
    ///
    /// &lt;p class="Note"&gt; The LocatorRegistry interface is intended to be used
    /// by Ice internals and by locator implementations. Regular user
    /// code should not attempt to use any functionality of this interface
    /// directly.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface LocatorRegistryOperations_
    {
        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="id">The adapter id.
        ///
        /// </param>
        /// <param name="proxy">The adapter proxy (a dummy direct proxy created
        /// by the adapter). The direct proxy contains the adapter
        /// endpoints.
        ///
        /// </param>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::System.Threading.Tasks.Task setAdapterDirectProxyAsync(string id, ObjectPrx proxy, Current current = null);

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="adapterId">The adapter id.
        ///
        /// </param>
        /// <param name="replicaGroupId">The replica group id.
        ///
        /// </param>
        /// <param name="p">The adapter proxy (a dummy direct proxy created
        /// by the adapter). The direct proxy contains the adapter
        /// endpoints.
        ///
        /// </param>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::System.Threading.Tasks.Task setReplicatedAdapterDirectProxyAsync(string adapterId, string replicaGroupId, ObjectPrx p, Current current = null);

        /// <summary>
        /// Set the process proxy for a server.
        /// </summary>
        /// <param name="id">The server id.
        ///
        /// </param>
        /// <param name="proxy">The process proxy.
        ///
        /// </param>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::System.Threading.Tasks.Task setServerProcessProxyAsync(string id, ProcessPrx proxy, Current current = null);
    }

    /// <summary>
    /// This interface should be implemented by services implementing the
    /// Ice::Locator interface.
    /// It should be advertised through an Ice
    /// object with the identity `Ice/LocatorFinder'. This allows clients
    /// to retrieve the locator proxy with just the endpoint information of
    /// the service.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface LocatorFinderOperations_
    {
        /// <summary>
        /// Get the locator proxy implemented by the process hosting this
        /// finder object.
        /// The proxy might point to several replicas.
        ///
        /// </summary>
        /// <returns>The locator proxy.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        LocatorPrx getLocator(Current current = null);
    }
}

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class LocatorPrxHelper : ObjectPrxHelperBase, LocatorPrx
    {
        public LocatorPrxHelper()
        {
        }

        public LocatorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public ObjectPrx findObjectById(Identity id, OptionalContext context = new OptionalContext())
        {
            try
            {
                return _iceI_findObjectByIdAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ObjectPrx findAdapterById(string id, OptionalContext context = new OptionalContext())
        {
            try
            {
                return _iceI_findAdapterByIdAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public LocatorRegistryPrx getRegistry(OptionalContext context = new OptionalContext())
        {
            try
            {
                return _iceI_getRegistryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<ObjectPrx> findObjectByIdAsync(Identity id, OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_findObjectByIdAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<ObjectPrx> _iceI_findObjectByIdAsync(Identity iceP_id, OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findObjectById_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<ObjectPrx>(progress, cancel);
            _iceI_findObjectById(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findObjectById_name = "findObjectById";

        private void _iceI_findObjectById(Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<ObjectPrx>(completed);
            outAsync.invoke(
                _findObjectById_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    Identity.ice_write(ostr, iceP_id);
                },
                userException: (UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObjectNotFoundException)
                    {
                        throw;
                    }
                    catch(UserException)
                    {
                    }
                },
                read: (InputStream istr) =>
                {
                    ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<ObjectPrx> findAdapterByIdAsync(string id, OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_findAdapterByIdAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<ObjectPrx> _iceI_findAdapterByIdAsync(string iceP_id, OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findAdapterById_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<ObjectPrx>(progress, cancel);
            _iceI_findAdapterById(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findAdapterById_name = "findAdapterById";

        private void _iceI_findAdapterById(string iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<ObjectPrx>(completed);
            outAsync.invoke(
                _findAdapterById_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    ostr.writeString(iceP_id);
                },
                userException: (UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AdapterNotFoundException)
                    {
                        throw;
                    }
                    catch(UserException)
                    {
                    }
                },
                read: (InputStream istr) =>
                {
                    ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<LocatorRegistryPrx> getRegistryAsync(OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getRegistryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<LocatorRegistryPrx> _iceI_getRegistryAsync(OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getRegistry_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<LocatorRegistryPrx>(progress, cancel);
            _iceI_getRegistry(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getRegistry_name = "getRegistry";

        private void _iceI_getRegistry(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<LocatorRegistryPrx>(completed);
            outAsync.invoke(
                _getRegistry_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (InputStream istr) =>
                {
                    LocatorRegistryPrx ret;
                    ret = LocatorRegistryPrxHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public AsyncResult<Callback_Locator_findObjectById> begin_findObjectById(Identity id, OptionalContext context = new OptionalContext())
        {
            return begin_findObjectById(id, context, null, null, false);
        }

        public AsyncResult begin_findObjectById(Identity id, AsyncCallback callback, object cookie)
        {
            return begin_findObjectById(id, new OptionalContext(), callback, cookie, false);
        }

        public AsyncResult begin_findObjectById(Identity id, OptionalContext context, AsyncCallback callback, object cookie)
        {
            return begin_findObjectById(id, context, callback, cookie, false);
        }

        public ObjectPrx end_findObjectById(AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findObjectById_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<ObjectPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private AsyncResult<Callback_Locator_findObjectById> begin_findObjectById(Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_findObjectById_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Locator_findObjectById, ObjectPrx>(
                (Callback_Locator_findObjectById cb, ObjectPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _findObjectById_name, cookie, completedCallback);
            _iceI_findObjectById(iceP_id, context, synchronous, completed);
            return completed;
        }

        public AsyncResult<Callback_Locator_findAdapterById> begin_findAdapterById(string id, OptionalContext context = new OptionalContext())
        {
            return begin_findAdapterById(id, context, null, null, false);
        }

        public AsyncResult begin_findAdapterById(string id, AsyncCallback callback, object cookie)
        {
            return begin_findAdapterById(id, new OptionalContext(), callback, cookie, false);
        }

        public AsyncResult begin_findAdapterById(string id, OptionalContext context, AsyncCallback callback, object cookie)
        {
            return begin_findAdapterById(id, context, callback, cookie, false);
        }

        public ObjectPrx end_findAdapterById(AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findAdapterById_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<ObjectPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private AsyncResult<Callback_Locator_findAdapterById> begin_findAdapterById(string iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_findAdapterById_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Locator_findAdapterById, ObjectPrx>(
                (Callback_Locator_findAdapterById cb, ObjectPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _findAdapterById_name, cookie, completedCallback);
            _iceI_findAdapterById(iceP_id, context, synchronous, completed);
            return completed;
        }

        public AsyncResult<Callback_Locator_getRegistry> begin_getRegistry(OptionalContext context = new OptionalContext())
        {
            return begin_getRegistry(context, null, null, false);
        }

        public AsyncResult begin_getRegistry(AsyncCallback callback, object cookie)
        {
            return begin_getRegistry(new OptionalContext(), callback, cookie, false);
        }

        public AsyncResult begin_getRegistry(OptionalContext context, AsyncCallback callback, object cookie)
        {
            return begin_getRegistry(context, callback, cookie, false);
        }

        public LocatorRegistryPrx end_getRegistry(AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getRegistry_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<LocatorRegistryPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private AsyncResult<Callback_Locator_getRegistry> begin_getRegistry(global::System.Collections.Generic.Dictionary<string, string> context, AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getRegistry_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Locator_getRegistry, LocatorRegistryPrx>(
                (Callback_Locator_getRegistry cb, LocatorRegistryPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getRegistry_name, cookie, completedCallback);
            _iceI_getRegistry(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static LocatorPrx checkedCast(ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LocatorPrx r = b as LocatorPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                LocatorPrxHelper h = new LocatorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LocatorPrx checkedCast(ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            LocatorPrx r = b as LocatorPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                LocatorPrxHelper h = new LocatorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LocatorPrx checkedCast(ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    LocatorPrxHelper h = new LocatorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(FacetNotExistException)
            {
            }
            return null;
        }

        public static LocatorPrx checkedCast(ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    LocatorPrxHelper h = new LocatorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(FacetNotExistException)
            {
            }
            return null;
        }

        public static LocatorPrx uncheckedCast(ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LocatorPrx r = b as LocatorPrx;
            if(r == null)
            {
                LocatorPrxHelper h = new LocatorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LocatorPrx uncheckedCast(ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            LocatorPrxHelper h = new LocatorPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Locator",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(OutputStream ostr, LocatorPrx v)
        {
            ostr.writeProxy(v);
        }

        public static LocatorPrx read(InputStream istr)
        {
            ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                LocatorPrxHelper result = new LocatorPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class LocatorRegistryPrxHelper : ObjectPrxHelperBase, LocatorRegistryPrx
    {
        public LocatorRegistryPrxHelper()
        {
        }

        public LocatorRegistryPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void setAdapterDirectProxy(string id, ObjectPrx proxy, OptionalContext context = new OptionalContext())
        {
            try
            {
                _iceI_setAdapterDirectProxyAsync(id, proxy, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setReplicatedAdapterDirectProxy(string adapterId, string replicaGroupId, ObjectPrx p, OptionalContext context = new OptionalContext())
        {
            try
            {
                _iceI_setReplicatedAdapterDirectProxyAsync(adapterId, replicaGroupId, p, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setServerProcessProxy(string id, ProcessPrx proxy, OptionalContext context = new OptionalContext())
        {
            try
            {
                _iceI_setServerProcessProxyAsync(id, proxy, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task setAdapterDirectProxyAsync(string id, ObjectPrx proxy, OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setAdapterDirectProxyAsync(id, proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setAdapterDirectProxyAsync(string iceP_id, ObjectPrx iceP_proxy, OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setAdapterDirectProxy_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setAdapterDirectProxy(iceP_id, iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setAdapterDirectProxy_name = "setAdapterDirectProxy";

        private void _iceI_setAdapterDirectProxy(string iceP_id, ObjectPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setAdapterDirectProxy_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    ostr.writeString(iceP_id);
                    ostr.writeProxy(iceP_proxy);
                },
                userException: (UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AdapterAlreadyActiveException)
                    {
                        throw;
                    }
                    catch(AdapterNotFoundException)
                    {
                        throw;
                    }
                    catch(UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task setReplicatedAdapterDirectProxyAsync(string adapterId, string replicaGroupId, ObjectPrx p, OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setReplicatedAdapterDirectProxyAsync(adapterId, replicaGroupId, p, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setReplicatedAdapterDirectProxyAsync(string iceP_adapterId, string iceP_replicaGroupId, ObjectPrx iceP_p, OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setReplicatedAdapterDirectProxy_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setReplicatedAdapterDirectProxy(iceP_adapterId, iceP_replicaGroupId, iceP_p, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setReplicatedAdapterDirectProxy_name = "setReplicatedAdapterDirectProxy";

        private void _iceI_setReplicatedAdapterDirectProxy(string iceP_adapterId, string iceP_replicaGroupId, ObjectPrx iceP_p, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setReplicatedAdapterDirectProxy_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    ostr.writeString(iceP_adapterId);
                    ostr.writeString(iceP_replicaGroupId);
                    ostr.writeProxy(iceP_p);
                },
                userException: (UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AdapterAlreadyActiveException)
                    {
                        throw;
                    }
                    catch(AdapterNotFoundException)
                    {
                        throw;
                    }
                    catch(InvalidReplicaGroupIdException)
                    {
                        throw;
                    }
                    catch(UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task setServerProcessProxyAsync(string id, ProcessPrx proxy, OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setServerProcessProxyAsync(id, proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setServerProcessProxyAsync(string iceP_id, ProcessPrx iceP_proxy, OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setServerProcessProxy_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setServerProcessProxy(iceP_id, iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setServerProcessProxy_name = "setServerProcessProxy";

        private void _iceI_setServerProcessProxy(string iceP_id, ProcessPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setServerProcessProxy_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    ostr.writeString(iceP_id);
                    ProcessPrxHelper.write(ostr, iceP_proxy);
                },
                userException: (UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ServerNotFoundException)
                    {
                        throw;
                    }
                    catch(UserException)
                    {
                    }
                });
        }

        #endregion

        #region Asynchronous operations

        public AsyncResult<Callback_LocatorRegistry_setAdapterDirectProxy> begin_setAdapterDirectProxy(string id, ObjectPrx proxy, OptionalContext context = new OptionalContext())
        {
            return begin_setAdapterDirectProxy(id, proxy, context, null, null, false);
        }

        public AsyncResult begin_setAdapterDirectProxy(string id, ObjectPrx proxy, AsyncCallback callback, object cookie)
        {
            return begin_setAdapterDirectProxy(id, proxy, new OptionalContext(), callback, cookie, false);
        }

        public AsyncResult begin_setAdapterDirectProxy(string id, ObjectPrx proxy, OptionalContext context, AsyncCallback callback, object cookie)
        {
            return begin_setAdapterDirectProxy(id, proxy, context, callback, cookie, false);
        }

        public void end_setAdapterDirectProxy(AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setAdapterDirectProxy_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private AsyncResult<Callback_LocatorRegistry_setAdapterDirectProxy> begin_setAdapterDirectProxy(string iceP_id, ObjectPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setAdapterDirectProxy_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_LocatorRegistry_setAdapterDirectProxy, object>(
                (Callback_LocatorRegistry_setAdapterDirectProxy cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _setAdapterDirectProxy_name, cookie, completedCallback);
            _iceI_setAdapterDirectProxy(iceP_id, iceP_proxy, context, synchronous, completed);
            return completed;
        }

        public AsyncResult<Callback_LocatorRegistry_setReplicatedAdapterDirectProxy> begin_setReplicatedAdapterDirectProxy(string adapterId, string replicaGroupId, ObjectPrx p, OptionalContext context = new OptionalContext())
        {
            return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, context, null, null, false);
        }

        public AsyncResult begin_setReplicatedAdapterDirectProxy(string adapterId, string replicaGroupId, ObjectPrx p, AsyncCallback callback, object cookie)
        {
            return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, new OptionalContext(), callback, cookie, false);
        }

        public AsyncResult begin_setReplicatedAdapterDirectProxy(string adapterId, string replicaGroupId, ObjectPrx p, OptionalContext context, AsyncCallback callback, object cookie)
        {
            return begin_setReplicatedAdapterDirectProxy(adapterId, replicaGroupId, p, context, callback, cookie, false);
        }

        public void end_setReplicatedAdapterDirectProxy(AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setReplicatedAdapterDirectProxy_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private AsyncResult<Callback_LocatorRegistry_setReplicatedAdapterDirectProxy> begin_setReplicatedAdapterDirectProxy(string iceP_adapterId, string iceP_replicaGroupId, ObjectPrx iceP_p, global::System.Collections.Generic.Dictionary<string, string> context, AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setReplicatedAdapterDirectProxy_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_LocatorRegistry_setReplicatedAdapterDirectProxy, object>(
                (Callback_LocatorRegistry_setReplicatedAdapterDirectProxy cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _setReplicatedAdapterDirectProxy_name, cookie, completedCallback);
            _iceI_setReplicatedAdapterDirectProxy(iceP_adapterId, iceP_replicaGroupId, iceP_p, context, synchronous, completed);
            return completed;
        }

        public AsyncResult<Callback_LocatorRegistry_setServerProcessProxy> begin_setServerProcessProxy(string id, ProcessPrx proxy, OptionalContext context = new OptionalContext())
        {
            return begin_setServerProcessProxy(id, proxy, context, null, null, false);
        }

        public AsyncResult begin_setServerProcessProxy(string id, ProcessPrx proxy, AsyncCallback callback, object cookie)
        {
            return begin_setServerProcessProxy(id, proxy, new OptionalContext(), callback, cookie, false);
        }

        public AsyncResult begin_setServerProcessProxy(string id, ProcessPrx proxy, OptionalContext context, AsyncCallback callback, object cookie)
        {
            return begin_setServerProcessProxy(id, proxy, context, callback, cookie, false);
        }

        public void end_setServerProcessProxy(AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setServerProcessProxy_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private AsyncResult<Callback_LocatorRegistry_setServerProcessProxy> begin_setServerProcessProxy(string iceP_id, ProcessPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setServerProcessProxy_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_LocatorRegistry_setServerProcessProxy, object>(
                (Callback_LocatorRegistry_setServerProcessProxy cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _setServerProcessProxy_name, cookie, completedCallback);
            _iceI_setServerProcessProxy(iceP_id, iceP_proxy, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static LocatorRegistryPrx checkedCast(ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LocatorRegistryPrx r = b as LocatorRegistryPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                LocatorRegistryPrxHelper h = new LocatorRegistryPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LocatorRegistryPrx checkedCast(ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            LocatorRegistryPrx r = b as LocatorRegistryPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                LocatorRegistryPrxHelper h = new LocatorRegistryPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LocatorRegistryPrx checkedCast(ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    LocatorRegistryPrxHelper h = new LocatorRegistryPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(FacetNotExistException)
            {
            }
            return null;
        }

        public static LocatorRegistryPrx checkedCast(ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    LocatorRegistryPrxHelper h = new LocatorRegistryPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(FacetNotExistException)
            {
            }
            return null;
        }

        public static LocatorRegistryPrx uncheckedCast(ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LocatorRegistryPrx r = b as LocatorRegistryPrx;
            if(r == null)
            {
                LocatorRegistryPrxHelper h = new LocatorRegistryPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LocatorRegistryPrx uncheckedCast(ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            LocatorRegistryPrxHelper h = new LocatorRegistryPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::LocatorRegistry",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(OutputStream ostr, LocatorRegistryPrx v)
        {
            ostr.writeProxy(v);
        }

        public static LocatorRegistryPrx read(InputStream istr)
        {
            ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                LocatorRegistryPrxHelper result = new LocatorRegistryPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class LocatorFinderPrxHelper : ObjectPrxHelperBase, LocatorFinderPrx
    {
        public LocatorFinderPrxHelper()
        {
        }

        public LocatorFinderPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public LocatorPrx getLocator(OptionalContext context = new OptionalContext())
        {
            try
            {
                return _iceI_getLocatorAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<LocatorPrx> getLocatorAsync(OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getLocatorAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<LocatorPrx> _iceI_getLocatorAsync(OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getLocator_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<LocatorPrx>(progress, cancel);
            _iceI_getLocator(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getLocator_name = "getLocator";

        private void _iceI_getLocator(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<LocatorPrx>(completed);
            outAsync.invoke(
                _getLocator_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (InputStream istr) =>
                {
                    LocatorPrx ret;
                    ret = LocatorPrxHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public AsyncResult<Callback_LocatorFinder_getLocator> begin_getLocator(OptionalContext context = new OptionalContext())
        {
            return begin_getLocator(context, null, null, false);
        }

        public AsyncResult begin_getLocator(AsyncCallback callback, object cookie)
        {
            return begin_getLocator(new OptionalContext(), callback, cookie, false);
        }

        public AsyncResult begin_getLocator(OptionalContext context, AsyncCallback callback, object cookie)
        {
            return begin_getLocator(context, callback, cookie, false);
        }

        public LocatorPrx end_getLocator(AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLocator_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<LocatorPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private AsyncResult<Callback_LocatorFinder_getLocator> begin_getLocator(global::System.Collections.Generic.Dictionary<string, string> context, AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getLocator_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_LocatorFinder_getLocator, LocatorPrx>(
                (Callback_LocatorFinder_getLocator cb, LocatorPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getLocator_name, cookie, completedCallback);
            _iceI_getLocator(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static LocatorFinderPrx checkedCast(ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LocatorFinderPrx r = b as LocatorFinderPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                LocatorFinderPrxHelper h = new LocatorFinderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LocatorFinderPrx checkedCast(ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            LocatorFinderPrx r = b as LocatorFinderPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                LocatorFinderPrxHelper h = new LocatorFinderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LocatorFinderPrx checkedCast(ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    LocatorFinderPrxHelper h = new LocatorFinderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(FacetNotExistException)
            {
            }
            return null;
        }

        public static LocatorFinderPrx checkedCast(ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    LocatorFinderPrxHelper h = new LocatorFinderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(FacetNotExistException)
            {
            }
            return null;
        }

        public static LocatorFinderPrx uncheckedCast(ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LocatorFinderPrx r = b as LocatorFinderPrx;
            if(r == null)
            {
                LocatorFinderPrxHelper h = new LocatorFinderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LocatorFinderPrx uncheckedCast(ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            LocatorFinderPrxHelper h = new LocatorFinderPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::LocatorFinder",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(OutputStream ostr, LocatorFinderPrx v)
        {
            ostr.writeProxy(v);
        }

        public static LocatorFinderPrx read(InputStream istr)
        {
            ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                LocatorFinderPrxHelper result = new LocatorFinderPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class LocatorDisp_ : ObjectImpl, Locator
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task<ObjectPrx> findObjectByIdAsync(Identity id, Current current = null);

        public abstract global::System.Threading.Tasks.Task<ObjectPrx> findAdapterByIdAsync(string id, Current current = null);

        public abstract LocatorRegistryPrx getRegistry(Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Locator",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_findObjectById(Locator obj, global::IceInternal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            Identity iceP_id;
            iceP_id = null;
            iceP_id = Identity.ice_read(istr);
            inS.endReadParams();
            return inS.setResultTask<ObjectPrx>(obj.findObjectByIdAsync(iceP_id, current),
                (ostr, ret) =>
                {
                    ostr.writeProxy(ret);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_findAdapterById(Locator obj, global::IceInternal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_id;
            iceP_id = istr.readString();
            inS.endReadParams();
            return inS.setResultTask<ObjectPrx>(obj.findAdapterByIdAsync(iceP_id, current),
                (ostr, ret) =>
                {
                    ostr.writeProxy(ret);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_getRegistry(Locator obj, global::IceInternal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getRegistry(current);
            var ostr = inS.startWriteParams();
            LocatorRegistryPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "findAdapterById",
            "findObjectById",
            "getRegistry",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_findAdapterById(this, inS, current);
                }
                case 1:
                {
                    return iceD_findObjectById(this, inS, current);
                }
                case 2:
                {
                    return iceD_getRegistry(this, inS, current);
                }
                case 3:
                {
                    return ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class LocatorRegistryDisp_ : ObjectImpl, LocatorRegistry
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task setAdapterDirectProxyAsync(string id, ObjectPrx proxy, Current current = null);

        public abstract global::System.Threading.Tasks.Task setReplicatedAdapterDirectProxyAsync(string adapterId, string replicaGroupId, ObjectPrx p, Current current = null);

        public abstract global::System.Threading.Tasks.Task setServerProcessProxyAsync(string id, ProcessPrx proxy, Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::LocatorRegistry",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_setAdapterDirectProxy(LocatorRegistry obj, global::IceInternal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_id;
            ObjectPrx iceP_proxy;
            iceP_id = istr.readString();
            iceP_proxy = istr.readProxy();
            inS.endReadParams();
            return inS.setResultTask(obj.setAdapterDirectProxyAsync(iceP_id, iceP_proxy, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_setReplicatedAdapterDirectProxy(LocatorRegistry obj, global::IceInternal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_adapterId;
            string iceP_replicaGroupId;
            ObjectPrx iceP_p;
            iceP_adapterId = istr.readString();
            iceP_replicaGroupId = istr.readString();
            iceP_p = istr.readProxy();
            inS.endReadParams();
            return inS.setResultTask(obj.setReplicatedAdapterDirectProxyAsync(iceP_adapterId, iceP_replicaGroupId, iceP_p, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_setServerProcessProxy(LocatorRegistry obj, global::IceInternal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_id;
            ProcessPrx iceP_proxy;
            iceP_id = istr.readString();
            iceP_proxy = ProcessPrxHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask(obj.setServerProcessProxyAsync(iceP_id, iceP_proxy, current));
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "setAdapterDirectProxy",
            "setReplicatedAdapterDirectProxy",
            "setServerProcessProxy"
        };

        public override global::System.Threading.Tasks.Task<OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_setAdapterDirectProxy(this, inS, current);
                }
                case 5:
                {
                    return iceD_setReplicatedAdapterDirectProxy(this, inS, current);
                }
                case 6:
                {
                    return iceD_setServerProcessProxy(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class LocatorFinderDisp_ : ObjectImpl, LocatorFinder
    {
        #region Slice operations

        public abstract LocatorPrx getLocator(Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::LocatorFinder",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_getLocator(LocatorFinder obj, global::IceInternal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getLocator(current);
            var ostr = inS.startWriteParams();
            LocatorPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getLocator",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getLocator(this, inS, current);
                }
                case 1:
                {
                    return ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
