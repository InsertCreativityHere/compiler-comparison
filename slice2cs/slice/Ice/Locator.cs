//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Locator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Locator.ice")]

#pragma warning disable 1591

namespace Ice
{
    /// <summary>
    /// This exception is raised if an adapter cannot be found.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Ice::AdapterNotFoundException")]
    public partial class AdapterNotFoundException : UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterNotFoundException(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterNotFoundException()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Ice::AdapterNotFoundException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(OutputStream ostr_)
        {
            ostr_.startSlice("::Ice::AdapterNotFoundException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception is raised if the replica group provided by the server is invalid.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Ice::InvalidReplicaGroupIdException")]
    public partial class InvalidReplicaGroupIdException : UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InvalidReplicaGroupIdException(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InvalidReplicaGroupIdException()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Ice::InvalidReplicaGroupIdException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(OutputStream ostr_)
        {
            ostr_.startSlice("::Ice::InvalidReplicaGroupIdException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception is raised if a server tries to set endpoints for an adapter that is already active.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Ice::AdapterAlreadyActiveException")]
    public partial class AdapterAlreadyActiveException : UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterAlreadyActiveException(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AdapterAlreadyActiveException()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Ice::AdapterAlreadyActiveException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(OutputStream ostr_)
        {
            ostr_.startSlice("::Ice::AdapterAlreadyActiveException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception is raised if an object cannot be found.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Ice::ObjectNotFoundException")]
    public partial class ObjectNotFoundException : UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ObjectNotFoundException(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ObjectNotFoundException()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Ice::ObjectNotFoundException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(OutputStream ostr_)
        {
            ostr_.startSlice("::Ice::ObjectNotFoundException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception is raised if a server cannot be found.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Ice::ServerNotFoundException")]
    public partial class ServerNotFoundException : UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ServerNotFoundException(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ServerNotFoundException()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Ice::ServerNotFoundException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(OutputStream ostr_)
        {
            ostr_.startSlice("::Ice::ServerNotFoundException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Locator : Object, LocatorOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface LocatorRegistry : Object, LocatorRegistryOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface LocatorFinder : Object, LocatorFinderOperations_
    {
    }
}

namespace Ice
{
    /// <summary>
    /// The Ice locator interface.
    /// This interface is used by clients to lookup adapters and objects. It is also used by
    ///  servers to get the locator registry proxy. &lt;p class="Note"&gt;The Locator interface is intended to be used
    ///  by Ice internals and by locator implementations. Regular user code should not attempt to use any functionality
    ///  of this interface directly.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LocatorPrx : ObjectPrx
    {
        /// <summary>
        /// Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
        ///  access the object.
        /// </summary>
        /// <param name="id">The identity.
        ///  </param>
        /// <returns>The proxy, or null if the object is not active.
        ///  </returns>
        /// <exception name="ObjectNotFoundException">Raised if the object cannot be found.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        ObjectPrx? findObjectById(Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
        ///  access the object.
        /// </summary>
        /// <param name="id">The identity.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<ObjectPrx?> findObjectByIdAsync(Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Find an adapter by id and return a proxy that contains its endpoints.
        /// </summary>
        /// <param name="id">The adapter id.
        ///  </param>
        /// <returns>The adapter proxy, or null if the adapter is not active.
        ///  </returns>
        /// <exception name="AdapterNotFoundException">Raised if the adapter cannot be found.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        ObjectPrx? findAdapterById(string id, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Find an adapter by id and return a proxy that contains its endpoints.
        /// </summary>
        /// <param name="id">The adapter id.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<ObjectPrx?> findAdapterByIdAsync(string id, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get the locator registry.
        /// </summary>
        /// <returns>The locator registry.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        LocatorRegistryPrx? getRegistry(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get the locator registry.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<LocatorRegistryPrx?> getRegistryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// The Ice locator registry interface.
    /// This interface is used by servers to register adapter endpoints with the
    ///  locator. &lt;p class="Note"&gt; The LocatorRegistry interface is intended to be used by Ice internals and by
    ///  locator implementations. Regular user code should not attempt to use any functionality of this interface
    ///  directly.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LocatorRegistryPrx : ObjectPrx
    {
        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="id">The adapter id.
        ///  </param>
        /// <param name="proxy">The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
        ///  adapter endpoints. The proxy can be null, typically during adapter deactivation.
        ///  </param>
        /// <exception name="AdapterNotFoundException">Raised if the adapter cannot be found, or if the locator only allows
        ///  registered adapters to set their active proxy and the adapter is not registered with the locator.
        ///  </exception>
        /// <exception name="AdapterAlreadyActiveException">Raised if an adapter with the same id is already active.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setAdapterDirectProxy(string id, ObjectPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="id">The adapter id.
        ///  </param>
        /// <param name="proxy">The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
        ///  adapter endpoints. The proxy can be null, typically during adapter deactivation.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setAdapterDirectProxyAsync(string id, ObjectPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="adapterId">The adapter id.
        ///  </param>
        /// <param name="replicaGroupId">The replica group id.
        ///  </param>
        /// <param name="proxy">The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
        ///  adapter endpoints. The proxy can be null, typically during adapter deactivation.
        ///  </param>
        /// <exception name="AdapterNotFoundException">Raised if the adapter cannot be found, or if the locator only allows
        ///  registered adapters to set their active proxy and the adapter is not registered with the locator.
        ///  </exception>
        /// <exception name="AdapterAlreadyActiveException">Raised if an adapter with the same id is already active.
        ///  </exception>
        /// <exception name="InvalidReplicaGroupIdException">Raised if the given replica group doesn't match the one registered
        ///  with the locator registry for this object adapter.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setReplicatedAdapterDirectProxy(string adapterId, string replicaGroupId, ObjectPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="adapterId">The adapter id.
        ///  </param>
        /// <param name="replicaGroupId">The replica group id.
        ///  </param>
        /// <param name="proxy">The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
        ///  adapter endpoints. The proxy can be null, typically during adapter deactivation.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setReplicatedAdapterDirectProxyAsync(string adapterId, string replicaGroupId, ObjectPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Set the process proxy for a server.
        /// </summary>
        /// <param name="id">The server id.
        ///  </param>
        /// <param name="proxy">The process proxy. The proxy is never null.
        ///  </param>
        /// <exception name="ServerNotFoundException">Raised if the server cannot be found.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setServerProcessProxy(string id, ProcessPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Set the process proxy for a server.
        /// </summary>
        /// <param name="id">The server id.
        ///  </param>
        /// <param name="proxy">The process proxy. The proxy is never null.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setServerProcessProxyAsync(string id, ProcessPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// This interface should be implemented by services implementing the Ice::Locator interface.
    /// It should
    ///  be advertised through an Ice object with the identity `Ice/LocatorFinder'. This allows clients to
    ///  retrieve the locator proxy with just the endpoint information of the service.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LocatorFinderPrx : ObjectPrx
    {
        /// <summary>
        /// Get the locator proxy implemented by the process hosting this finder object.
        /// The proxy might point to
        ///  several replicas. This proxy is never null.
        /// </summary>
        ///  <returns>The locator proxy.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        LocatorPrx? getLocator(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get the locator proxy implemented by the process hosting this finder object.
        /// The proxy might point to
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<LocatorPrx?> getLocatorAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Ice
{
    /// <summary>
    /// The Ice locator interface.
    /// This interface is used by clients to lookup adapters and objects. It is also used by
    ///  servers to get the locator registry proxy. &lt;p class="Note"&gt;The Locator interface is intended to be used
    ///  by Ice internals and by locator implementations. Regular user code should not attempt to use any functionality
    ///  of this interface directly.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LocatorOperations_
    {
        /// <summary>
        /// Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
        ///  access the object.
        /// </summary>
        /// <param name="id">The identity.
        ///  </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<ObjectPrx?> findObjectByIdAsync(Identity id, Current current);

        /// <summary>
        /// Find an adapter by id and return a proxy that contains its endpoints.
        /// </summary>
        /// <param name="id">The adapter id.
        ///  </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<ObjectPrx?> findAdapterByIdAsync(string id, Current current);

        /// <summary>
        /// Get the locator registry.
        /// </summary>
        /// <returns>The locator registry.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        LocatorRegistryPrx? getRegistry(Current current);
    }

    /// <summary>
    /// The Ice locator registry interface.
    /// This interface is used by servers to register adapter endpoints with the
    ///  locator. &lt;p class="Note"&gt; The LocatorRegistry interface is intended to be used by Ice internals and by
    ///  locator implementations. Regular user code should not attempt to use any functionality of this interface
    ///  directly.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LocatorRegistryOperations_
    {
        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="id">The adapter id.
        ///  </param>
        /// <param name="proxy">The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
        ///  adapter endpoints. The proxy can be null, typically during adapter deactivation.
        ///  </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task setAdapterDirectProxyAsync(string id, ObjectPrx? proxy, Current current);

        /// <summary>
        /// Set the adapter endpoints with the locator registry.
        /// </summary>
        /// <param name="adapterId">The adapter id.
        ///  </param>
        /// <param name="replicaGroupId">The replica group id.
        ///  </param>
        /// <param name="proxy">The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
        ///  adapter endpoints. The proxy can be null, typically during adapter deactivation.
        ///  </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task setReplicatedAdapterDirectProxyAsync(string adapterId, string replicaGroupId, ObjectPrx? proxy, Current current);

        /// <summary>
        /// Set the process proxy for a server.
        /// </summary>
        /// <param name="id">The server id.
        ///  </param>
        /// <param name="proxy">The process proxy. The proxy is never null.
        ///  </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task setServerProcessProxyAsync(string id, ProcessPrx? proxy, Current current);
    }

    /// <summary>
    /// This interface should be implemented by services implementing the Ice::Locator interface.
    /// It should
    ///  be advertised through an Ice object with the identity `Ice/LocatorFinder'. This allows clients to
    ///  retrieve the locator proxy with just the endpoint information of the service.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LocatorFinderOperations_
    {
        /// <summary>
        /// Get the locator proxy implemented by the process hosting this finder object.
        /// The proxy might point to
        ///  several replicas. This proxy is never null.
        /// </summary>
        ///  <returns>The locator proxy.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        LocatorPrx? getLocator(Current current);
    }
}

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LocatorPrxHelper : ObjectPrxHelperBase, LocatorPrx
    {
        public LocatorPrxHelper()
        {
        }

        #region Synchronous operations

        public ObjectPrx? findObjectById(Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_findObjectByIdAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public ObjectPrx? findAdapterById(string id, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_findAdapterByIdAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public LocatorRegistryPrx? getRegistry(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getRegistryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<ObjectPrx?> findObjectByIdAsync(Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_findObjectByIdAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<ObjectPrx?> _iceI_findObjectByIdAsync(Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findObjectById_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<ObjectPrx?>(progress, cancel);
            _iceI_findObjectById(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findObjectById_name = "findObjectById";

        private void _iceI_findObjectById(Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<ObjectPrx?>(completed);
            outAsync.invoke(
                _findObjectById_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    Identity.ice_write(ostr, iceP_id);
                },
                userException: (UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObjectNotFoundException)
                    {
                        throw;
                    }
                    catch(UserException)
                    {
                    }
                },
                read: (InputStream istr) =>
                {
                    ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<ObjectPrx?> findAdapterByIdAsync(string id, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_findAdapterByIdAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<ObjectPrx?> _iceI_findAdapterByIdAsync(string iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findAdapterById_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<ObjectPrx?>(progress, cancel);
            _iceI_findAdapterById(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findAdapterById_name = "findAdapterById";

        private void _iceI_findAdapterById(string iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<ObjectPrx?>(completed);
            outAsync.invoke(
                _findAdapterById_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    ostr.writeString(iceP_id);
                },
                userException: (UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AdapterNotFoundException)
                    {
                        throw;
                    }
                    catch(UserException)
                    {
                    }
                },
                read: (InputStream istr) =>
                {
                    ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<LocatorRegistryPrx?> getRegistryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getRegistryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<LocatorRegistryPrx?> _iceI_getRegistryAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getRegistry_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<LocatorRegistryPrx?>(progress, cancel);
            _iceI_getRegistry(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getRegistry_name = "getRegistry";

        private void _iceI_getRegistry(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<LocatorRegistryPrx?>(completed);
            outAsync.invoke(
                _getRegistry_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (InputStream istr) =>
                {
                    LocatorRegistryPrx? ret;
                    ret = LocatorRegistryPrxHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Factory operations

        public static LocatorPrx createProxy(Communicator communicator, string proxyString) =>
            uncheckedCast(ObjectPrxHelper.createProxy(communicator, proxyString));

        public static LocatorPrx? checkedCast(ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                LocatorPrxHelper prx = new LocatorPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static LocatorPrx? checkedCast(ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    LocatorPrxHelper prx = new LocatorPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LocatorPrx? uncheckedCast(ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new LocatorPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LocatorPrx? uncheckedCast(ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                ObjectPrx? bb = b.ice_facet(f);
                var prx = new LocatorPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Locator",
            "::Ice::Object"
        };

        public static string ice_staticId() => "::Ice::Locator";

        #endregion

        #region Marshaling support

        public static void write(OutputStream ostr, LocatorPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static LocatorPrx? read(InputStream istr)
        {
            ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new LocatorPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LocatorRegistryPrxHelper : ObjectPrxHelperBase, LocatorRegistryPrx
    {
        public LocatorRegistryPrxHelper()
        {
        }

        #region Synchronous operations

        public void setAdapterDirectProxy(string id, ObjectPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_setAdapterDirectProxyAsync(id, proxy, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void setReplicatedAdapterDirectProxy(string adapterId, string replicaGroupId, ObjectPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_setReplicatedAdapterDirectProxyAsync(adapterId, replicaGroupId, proxy, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void setServerProcessProxy(string id, ProcessPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_setServerProcessProxyAsync(id, proxy, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task setAdapterDirectProxyAsync(string id, ObjectPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_setAdapterDirectProxyAsync(id, proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setAdapterDirectProxyAsync(string iceP_id, ObjectPrx? iceP_proxy, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setAdapterDirectProxy_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setAdapterDirectProxy(iceP_id, iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setAdapterDirectProxy_name = "setAdapterDirectProxy";

        private void _iceI_setAdapterDirectProxy(string iceP_id, ObjectPrx? iceP_proxy, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setAdapterDirectProxy_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    ostr.writeString(iceP_id);
                    ostr.writeProxy(iceP_proxy);
                },
                userException: (UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AdapterNotFoundException)
                    {
                        throw;
                    }
                    catch(AdapterAlreadyActiveException)
                    {
                        throw;
                    }
                    catch(UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task setReplicatedAdapterDirectProxyAsync(string adapterId, string replicaGroupId, ObjectPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_setReplicatedAdapterDirectProxyAsync(adapterId, replicaGroupId, proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setReplicatedAdapterDirectProxyAsync(string iceP_adapterId, string iceP_replicaGroupId, ObjectPrx? iceP_proxy, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setReplicatedAdapterDirectProxy_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setReplicatedAdapterDirectProxy(iceP_adapterId, iceP_replicaGroupId, iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setReplicatedAdapterDirectProxy_name = "setReplicatedAdapterDirectProxy";

        private void _iceI_setReplicatedAdapterDirectProxy(string iceP_adapterId, string iceP_replicaGroupId, ObjectPrx? iceP_proxy, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setReplicatedAdapterDirectProxy_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    ostr.writeString(iceP_adapterId);
                    ostr.writeString(iceP_replicaGroupId);
                    ostr.writeProxy(iceP_proxy);
                },
                userException: (UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AdapterNotFoundException)
                    {
                        throw;
                    }
                    catch(InvalidReplicaGroupIdException)
                    {
                        throw;
                    }
                    catch(AdapterAlreadyActiveException)
                    {
                        throw;
                    }
                    catch(UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task setServerProcessProxyAsync(string id, ProcessPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_setServerProcessProxyAsync(id, proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setServerProcessProxyAsync(string iceP_id, ProcessPrx? iceP_proxy, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setServerProcessProxy_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setServerProcessProxy(iceP_id, iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setServerProcessProxy_name = "setServerProcessProxy";

        private void _iceI_setServerProcessProxy(string iceP_id, ProcessPrx? iceP_proxy, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setServerProcessProxy_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    ostr.writeString(iceP_id);
                    ProcessPrxHelper.write(ostr, iceP_proxy);
                },
                userException: (UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ServerNotFoundException)
                    {
                        throw;
                    }
                    catch(UserException)
                    {
                    }
                });
        }

        #endregion

        #region Factory operations

        public static LocatorRegistryPrx createProxy(Communicator communicator, string proxyString) =>
            uncheckedCast(ObjectPrxHelper.createProxy(communicator, proxyString));

        public static LocatorRegistryPrx? checkedCast(ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                LocatorRegistryPrxHelper prx = new LocatorRegistryPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static LocatorRegistryPrx? checkedCast(ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    LocatorRegistryPrxHelper prx = new LocatorRegistryPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LocatorRegistryPrx? uncheckedCast(ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new LocatorRegistryPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LocatorRegistryPrx? uncheckedCast(ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                ObjectPrx? bb = b.ice_facet(f);
                var prx = new LocatorRegistryPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::LocatorRegistry",
            "::Ice::Object"
        };

        public static string ice_staticId() => "::Ice::LocatorRegistry";

        #endregion

        #region Marshaling support

        public static void write(OutputStream ostr, LocatorRegistryPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static LocatorRegistryPrx? read(InputStream istr)
        {
            ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new LocatorRegistryPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LocatorFinderPrxHelper : ObjectPrxHelperBase, LocatorFinderPrx
    {
        public LocatorFinderPrxHelper()
        {
        }

        #region Synchronous operations

        public LocatorPrx? getLocator(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getLocatorAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<LocatorPrx?> getLocatorAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getLocatorAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<LocatorPrx?> _iceI_getLocatorAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getLocator_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<LocatorPrx?>(progress, cancel);
            _iceI_getLocator(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getLocator_name = "getLocator";

        private void _iceI_getLocator(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<LocatorPrx?>(completed);
            outAsync.invoke(
                _getLocator_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (InputStream istr) =>
                {
                    LocatorPrx? ret;
                    ret = LocatorPrxHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Factory operations

        public static LocatorFinderPrx createProxy(Communicator communicator, string proxyString) =>
            uncheckedCast(ObjectPrxHelper.createProxy(communicator, proxyString));

        public static LocatorFinderPrx? checkedCast(ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                LocatorFinderPrxHelper prx = new LocatorFinderPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static LocatorFinderPrx? checkedCast(ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    LocatorFinderPrxHelper prx = new LocatorFinderPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LocatorFinderPrx? uncheckedCast(ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new LocatorFinderPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LocatorFinderPrx? uncheckedCast(ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                ObjectPrx? bb = b.ice_facet(f);
                var prx = new LocatorFinderPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::LocatorFinder",
            "::Ice::Object"
        };

        public static string ice_staticId() => "::Ice::LocatorFinder";

        #endregion

        #region Marshaling support

        public static void write(OutputStream ostr, LocatorFinderPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static LocatorFinderPrx? read(InputStream istr)
        {
            ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new LocatorFinderPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class LocatorDisp_ : ObjectImpl, Locator
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task<ObjectPrx?> findObjectByIdAsync(Identity id, Current current);

        public abstract global::System.Threading.Tasks.Task<ObjectPrx?> findAdapterByIdAsync(string id, Current current);

        public abstract LocatorRegistryPrx? getRegistry(Current current);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Locator",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Current current)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Current current)
        {
            return _ids;
        }

        public override string ice_id(Current current)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Ice::Locator";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_findObjectById(Locator obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            Identity iceP_id;
            iceP_id = new Identity(istr);
            inS.endReadParams();
            return inS.setResultTask<ObjectPrx?>(obj.findObjectByIdAsync(iceP_id, current),
                (ostr, ret) =>
                {
                    ostr.writeProxy(ret);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_findAdapterById(Locator obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_id;
            iceP_id = istr.readString();
            inS.endReadParams();
            return inS.setResultTask<ObjectPrx?>(obj.findAdapterByIdAsync(iceP_id, current),
                (ostr, ret) =>
                {
                    ostr.writeProxy(ret);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_getRegistry(Locator obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getRegistry(current);
            var ostr = inS.startWriteParams();
            LocatorRegistryPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "findAdapterById",
            "findObjectById",
            "getRegistry",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<OutputStream>?
        iceDispatch(global::Ice.Internal.Incoming inS, Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_findAdapterById(this, inS, current);
                }
                case 1:
                {
                    return iceD_findObjectById(this, inS, current);
                }
                case 2:
                {
                    return iceD_getRegistry(this, inS, current);
                }
                case 3:
                {
                    return ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class LocatorRegistryDisp_ : ObjectImpl, LocatorRegistry
    {
        #region Slice operations

        public abstract global::System.Threading.Tasks.Task setAdapterDirectProxyAsync(string id, ObjectPrx? proxy, Current current);

        public abstract global::System.Threading.Tasks.Task setReplicatedAdapterDirectProxyAsync(string adapterId, string replicaGroupId, ObjectPrx? proxy, Current current);

        public abstract global::System.Threading.Tasks.Task setServerProcessProxyAsync(string id, ProcessPrx? proxy, Current current);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::LocatorRegistry",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Current current)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Current current)
        {
            return _ids;
        }

        public override string ice_id(Current current)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Ice::LocatorRegistry";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_setAdapterDirectProxy(LocatorRegistry obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_id;
            ObjectPrx? iceP_proxy;
            iceP_id = istr.readString();
            iceP_proxy = istr.readProxy();
            inS.endReadParams();
            return inS.setResultTask(obj.setAdapterDirectProxyAsync(iceP_id, iceP_proxy, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_setReplicatedAdapterDirectProxy(LocatorRegistry obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_adapterId;
            string iceP_replicaGroupId;
            ObjectPrx? iceP_proxy;
            iceP_adapterId = istr.readString();
            iceP_replicaGroupId = istr.readString();
            iceP_proxy = istr.readProxy();
            inS.endReadParams();
            return inS.setResultTask(obj.setReplicatedAdapterDirectProxyAsync(iceP_adapterId, iceP_replicaGroupId, iceP_proxy, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_setServerProcessProxy(LocatorRegistry obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_id;
            ProcessPrx? iceP_proxy;
            iceP_id = istr.readString();
            iceP_proxy = ProcessPrxHelper.read(istr);
            inS.endReadParams();
            return inS.setResultTask(obj.setServerProcessProxyAsync(iceP_id, iceP_proxy, current));
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "setAdapterDirectProxy",
            "setReplicatedAdapterDirectProxy",
            "setServerProcessProxy"
        };

        public override global::System.Threading.Tasks.Task<OutputStream>?
        iceDispatch(global::Ice.Internal.Incoming inS, Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_setAdapterDirectProxy(this, inS, current);
                }
                case 5:
                {
                    return iceD_setReplicatedAdapterDirectProxy(this, inS, current);
                }
                case 6:
                {
                    return iceD_setServerProcessProxy(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class LocatorFinderDisp_ : ObjectImpl, LocatorFinder
    {
        #region Slice operations

        public abstract LocatorPrx? getLocator(Current current);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::LocatorFinder",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Current current)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Current current)
        {
            return _ids;
        }

        public override string ice_id(Current current)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Ice::LocatorFinder";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_getLocator(LocatorFinder obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getLocator(current);
            var ostr = inS.startWriteParams();
            LocatorPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getLocator",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<OutputStream>?
        iceDispatch(global::Ice.Internal.Incoming inS, Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getLocator(this, inS, current);
                }
                case 1:
                {
                    return ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
