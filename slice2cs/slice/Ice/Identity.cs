// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Identity.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("Identity.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Ice
{
    public sealed partial record class Identity
    {
        public string name = "";

        public string category = "";

        partial void ice_initialize();

        public Identity()
        {
            ice_initialize();
        }

        public Identity(string name, string category)
        {
            global::System.ArgumentNullException.ThrowIfNull(name);
            this.name = name;
            global::System.ArgumentNullException.ThrowIfNull(category);
            this.category = category;
            ice_initialize();
        }

        public Identity(Ice.InputStream istr)
        {
            this.name = istr.readString();
            this.category = istr.readString();
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeString(this.name);
            ostr.writeString(this.category);
        }

        public static void ice_write(Ice.OutputStream ostr, Identity v)
        {
            v.ice_writeMembers(ostr);
        }

        public static Identity ice_read(Ice.InputStream istr) => new(istr);
    }
}

namespace Ice
{
    public sealed class IdentitySeqHelper
    {
        public static void write(Ice.OutputStream ostr, Identity[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static Identity[] read(Ice.InputStream istr)
        {
            Identity[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new Identity[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new Identity(istr);
                }
            }
            return v;
        }
    }
}
