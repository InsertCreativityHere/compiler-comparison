// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'BuiltinSequences.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("BuiltinSequences.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Ice
{
}

namespace Ice
{
    public sealed class BoolSeqHelper
    {
        public static void write(Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    public sealed class ByteSeqHelper
    {
        public static void write(Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    public sealed class ShortSeqHelper
    {
        public static void write(Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    public sealed class IntSeqHelper
    {
        public static void write(Ice.OutputStream ostr, int[] v)
        {
            ostr.writeIntSeq(v);
        }

        public static int[] read(Ice.InputStream istr)
        {
            int[] v;
            v = istr.readIntSeq();
            return v;
        }
    }

    public sealed class LongSeqHelper
    {
        public static void write(Ice.OutputStream ostr, long[] v)
        {
            ostr.writeLongSeq(v);
        }

        public static long[] read(Ice.InputStream istr)
        {
            long[] v;
            v = istr.readLongSeq();
            return v;
        }
    }

    public sealed class FloatSeqHelper
    {
        public static void write(Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    public sealed class DoubleSeqHelper
    {
        public static void write(Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    public sealed class StringSeqHelper
    {
        public static void write(Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    public sealed class ObjectSeqHelper
    {
        public static void write(Ice.OutputStream ostr, Ice.Value?[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for (int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static Ice.Value?[] read(Ice.InputStream istr)
        {
            Ice.Value?[] v;
            int v_lenx = istr.readAndCheckSeqSize(1);
            v = new Ice.Value?[v_lenx];
            for (int ix = 0; ix < v_lenx; ++ix)
            {
                istr.readValue(Ice.Internal.Patcher.arrayReadValue<Ice.Value>(v, ix));
            }
            return v;
        }
    }

    public sealed class ObjectProxySeqHelper
    {
        public static void write(Ice.OutputStream ostr, Ice.ObjectPrx?[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for (int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeProxy(v[ix]);
                }
            }
        }

        public static Ice.ObjectPrx?[] read(Ice.InputStream istr)
        {
            Ice.ObjectPrx?[] v;
            int v_lenx = istr.readAndCheckSeqSize(2);
            v = new Ice.ObjectPrx?[v_lenx];
            for (int ix = 0; ix < v_lenx; ++ix)
            {
                v[ix] = istr.readProxy();
            }
            return v;
        }
    }
}
