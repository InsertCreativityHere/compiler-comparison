//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Router : Object, RouterOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface RouterFinder : Object, RouterFinderOperations_
    {
    }
}

namespace Ice
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Router_getClientProxy(ObjectPrx ret, Optional<bool> hasRoutingTable);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Router_getServerProxy(ObjectPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Router_addProxies(ObjectPrx[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_RouterFinder_getRouter(RouterPrx ret);
}

namespace Ice
{
    public struct Router_GetClientProxyResult
    {
        public Router_GetClientProxyResult(ObjectPrx returnValue, Optional<bool> hasRoutingTable)
        {
            this.returnValue = returnValue;
            this.hasRoutingTable = hasRoutingTable;
        }

        public ObjectPrx returnValue;
        public Optional<bool> hasRoutingTable;
    }
}

namespace Ice
{
    /// <summary>
    /// The Ice router interface.
    /// Routers can be set either globally with Communicator.setDefaultRouter, or with
    ///  ice_router on specific proxies.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface RouterPrx : ObjectPrx
    {
        /// <summary>
        /// Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
        /// If a null proxy is returned, the client will forward requests to the router's endpoints.
        /// </summary>
        ///  <param name="hasRoutingTable">Indicates whether or not the router supports a routing table. If it is supported, the
        ///  Ice runtime will call addProxies to populate the routing table. This out parameter is only supported starting
        ///  with Ice 3.7.
        ///  The Ice runtime assumes the router has a routing table if the hasRoutingTable is not set.
        ///  </param>
        /// <returns>The router's client proxy.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        ObjectPrx getClientProxy(out Optional<bool> hasRoutingTable, OptionalContext context = new OptionalContext());

        /// <summary>
        /// Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
        /// If a null proxy is returned, the client will forward requests to the router's endpoints.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<Router_GetClientProxyResult> getClientProxyAsync(OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
        /// If a null proxy is returned, the client will forward requests to the router's endpoints.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult<Callback_Router_getClientProxy> begin_getClientProxy(OptionalContext context = new OptionalContext());

        /// <summary>
        /// Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
        /// If a null proxy is returned, the client will forward requests to the router's endpoints.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_getClientProxy(AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
        /// If a null proxy is returned, the client will forward requests to the router's endpoints.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_getClientProxy(OptionalContext context, AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
        /// If a null proxy is returned, the client will forward requests to the router's endpoints.
        /// </summary>
        ///  <param name="hasRoutingTable">Indicates whether or not the router supports a routing table. If it is supported, the
        ///  Ice runtime will call addProxies to populate the routing table. This out parameter is only supported starting
        ///  with Ice 3.7.
        ///  The Ice runtime assumes the router has a routing table if the hasRoutingTable is not set.
        ///  </param>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The router's client proxy.</returns>
        ObjectPrx end_getClientProxy(out Optional<bool> hasRoutingTable, AsyncResult asyncResult);

        /// <summary>
        /// Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
        /// </summary>
        /// <returns>The router's server proxy.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        ObjectPrx getServerProxy(OptionalContext context = new OptionalContext());

        /// <summary>
        /// Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<ObjectPrx> getServerProxyAsync(OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult<Callback_Router_getServerProxy> begin_getServerProxy(OptionalContext context = new OptionalContext());

        /// <summary>
        /// Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_getServerProxy(AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_getServerProxy(OptionalContext context, AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The router's server proxy.</returns>
        ObjectPrx end_getServerProxy(AsyncResult asyncResult);

        /// <summary>
        /// Add new proxy information to the router's routing table.
        /// </summary>
        /// <param name="proxies">The proxies to add.
        ///  </param>
        /// <returns>Proxies discarded by the router.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        ObjectPrx[] addProxies(ObjectPrx[] proxies, OptionalContext context = new OptionalContext());

        /// <summary>
        /// Add new proxy information to the router's routing table.
        /// </summary>
        /// <param name="proxies">The proxies to add.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<ObjectPrx[]> addProxiesAsync(ObjectPrx[] proxies, OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Add new proxy information to the router's routing table.
        /// </summary>
        /// <param name="proxies">The proxies to add.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult<Callback_Router_addProxies> begin_addProxies(ObjectPrx[] proxies, OptionalContext context = new OptionalContext());

        /// <summary>
        /// Add new proxy information to the router's routing table.
        /// </summary>
        /// <param name="proxies">The proxies to add.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_addProxies(ObjectPrx[] proxies, AsyncCallback callback, object cookie);

        /// <summary>
        /// Add new proxy information to the router's routing table.
        /// </summary>
        /// <param name="proxies">The proxies to add.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_addProxies(ObjectPrx[] proxies, OptionalContext context, AsyncCallback callback, object cookie);

        /// <summary>
        /// Add new proxy information to the router's routing table.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>Proxies discarded by the router.</returns>
        ObjectPrx[] end_addProxies(AsyncResult asyncResult);
    }

    /// <summary>
    /// This interface should be implemented by services implementing the Ice::Router interface.
    /// It should be advertised
    ///  through an Ice object with the identity `Ice/RouterFinder'. This allows clients to retrieve the router proxy with
    ///  just the endpoint information of the service.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface RouterFinderPrx : ObjectPrx
    {
        /// <summary>
        /// Get the router proxy implemented by the process hosting this finder object.
        /// The proxy might point to several
        ///  replicas.
        /// </summary>
        ///  <returns>The router proxy.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        RouterPrx getRouter(OptionalContext context = new OptionalContext());

        /// <summary>
        /// Get the router proxy implemented by the process hosting this finder object.
        /// The proxy might point to several
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<RouterPrx> getRouterAsync(OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the router proxy implemented by the process hosting this finder object.
        /// The proxy might point to several
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult<Callback_RouterFinder_getRouter> begin_getRouter(OptionalContext context = new OptionalContext());

        /// <summary>
        /// Get the router proxy implemented by the process hosting this finder object.
        /// The proxy might point to several
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_getRouter(AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the router proxy implemented by the process hosting this finder object.
        /// The proxy might point to several
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        AsyncResult begin_getRouter(OptionalContext context, AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the router proxy implemented by the process hosting this finder object.
        /// The proxy might point to several
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The router proxy.</returns>
        RouterPrx end_getRouter(AsyncResult asyncResult);
    }
}

namespace Ice
{
    /// <summary>
    /// The Ice router interface.
    /// Routers can be set either globally with Communicator.setDefaultRouter, or with
    ///  ice_router on specific proxies.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface RouterOperations_
    {
        /// <summary>
        /// Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
        /// If a null proxy is returned, the client will forward requests to the router's endpoints.
        /// </summary>
        ///  <param name="hasRoutingTable">Indicates whether or not the router supports a routing table. If it is supported, the
        ///  Ice runtime will call addProxies to populate the routing table. This out parameter is only supported starting
        ///  with Ice 3.7.
        ///  The Ice runtime assumes the router has a routing table if the hasRoutingTable is not set.
        ///  </param>
        /// <returns>The router's client proxy.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        ObjectPrx getClientProxy(out Optional<bool> hasRoutingTable, Current current = null);

        /// <summary>
        /// Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
        /// </summary>
        /// <returns>The router's server proxy.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        ObjectPrx getServerProxy(Current current = null);

        /// <summary>
        /// Add new proxy information to the router's routing table.
        /// </summary>
        /// <param name="proxies">The proxies to add.
        ///  </param>
        /// <returns>Proxies discarded by the router.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        ObjectPrx[] addProxies(ObjectPrx[] proxies, Current current = null);
    }

    /// <summary>
    /// This interface should be implemented by services implementing the Ice::Router interface.
    /// It should be advertised
    ///  through an Ice object with the identity `Ice/RouterFinder'. This allows clients to retrieve the router proxy with
    ///  just the endpoint information of the service.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface RouterFinderOperations_
    {
        /// <summary>
        /// Get the router proxy implemented by the process hosting this finder object.
        /// The proxy might point to several
        ///  replicas.
        /// </summary>
        ///  <returns>The router proxy.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        RouterPrx getRouter(Current current = null);
    }
}

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class RouterPrxHelper : ObjectPrxHelperBase, RouterPrx
    {
        public RouterPrxHelper()
        {
        }

        #region Synchronous operations

        public ObjectPrx getClientProxy(out Optional<bool> hasRoutingTable, OptionalContext context = new OptionalContext())
        {
            try
            {
                var result_ = _iceI_getClientProxyAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                hasRoutingTable = result_.hasRoutingTable;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ObjectPrx getServerProxy(OptionalContext context = new OptionalContext())
        {
            try
            {
                return _iceI_getServerProxyAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ObjectPrx[] addProxies(ObjectPrx[] proxies, OptionalContext context = new OptionalContext())
        {
            try
            {
                return _iceI_addProxiesAsync(proxies, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<Router_GetClientProxyResult> getClientProxyAsync(OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getClientProxyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Router_GetClientProxyResult> _iceI_getClientProxyAsync(OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getClientProxy_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Router_GetClientProxyResult>(progress, cancel);
            _iceI_getClientProxy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getClientProxy_name = "getClientProxy";

        private void _iceI_getClientProxy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Router_GetClientProxyResult>(completed);
            outAsync.invoke(
                _getClientProxy_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (InputStream istr) =>
                {
                    Router_GetClientProxyResult ret = new Router_GetClientProxyResult();
                    ret.returnValue = istr.readProxy();
                    {
                        var tmp = istr.readBool(1);
                        ret.hasRoutingTable = tmp;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<ObjectPrx> getServerProxyAsync(OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getServerProxyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<ObjectPrx> _iceI_getServerProxyAsync(OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getServerProxy_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<ObjectPrx>(progress, cancel);
            _iceI_getServerProxy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getServerProxy_name = "getServerProxy";

        private void _iceI_getServerProxy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<ObjectPrx>(completed);
            outAsync.invoke(
                _getServerProxy_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (InputStream istr) =>
                {
                    ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<ObjectPrx[]> addProxiesAsync(ObjectPrx[] proxies, OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_addProxiesAsync(proxies, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<ObjectPrx[]> _iceI_addProxiesAsync(ObjectPrx[] iceP_proxies, OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_addProxies_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<ObjectPrx[]>(progress, cancel);
            _iceI_addProxies(iceP_proxies, context, synchronous, completed);
            return completed.Task;
        }

        private const string _addProxies_name = "addProxies";

        private void _iceI_addProxies(ObjectPrx[] iceP_proxies, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<ObjectPrx[]>(completed);
            outAsync.invoke(
                _addProxies_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    ObjectProxySeqHelper.write(ostr, iceP_proxies);
                },
                read: (InputStream istr) =>
                {
                    ObjectPrx[] ret;
                    ret = ObjectProxySeqHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public AsyncResult<Callback_Router_getClientProxy> begin_getClientProxy(OptionalContext context = new OptionalContext())
        {
            return begin_getClientProxy(context, null, null, false);
        }

        public AsyncResult begin_getClientProxy(AsyncCallback callback, object cookie)
        {
            return begin_getClientProxy(new OptionalContext(), callback, cookie, false);
        }

        public AsyncResult begin_getClientProxy(OptionalContext context, AsyncCallback callback, object cookie)
        {
            return begin_getClientProxy(context, callback, cookie, false);
        }

        public ObjectPrx end_getClientProxy(out Optional<bool> hasRoutingTable, AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getClientProxy_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Router_GetClientProxyResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            hasRoutingTable = result_.hasRoutingTable;
            return result_.returnValue;
        }

        private AsyncResult<Callback_Router_getClientProxy> begin_getClientProxy(global::System.Collections.Generic.Dictionary<string, string> context, AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getClientProxy_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Router_getClientProxy, Router_GetClientProxyResult>(
                (Callback_Router_getClientProxy cb, Router_GetClientProxyResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.hasRoutingTable);
                    }
                },
                this, _getClientProxy_name, cookie, completedCallback);
            _iceI_getClientProxy(context, synchronous, completed);
            return completed;
        }

        public AsyncResult<Callback_Router_getServerProxy> begin_getServerProxy(OptionalContext context = new OptionalContext())
        {
            return begin_getServerProxy(context, null, null, false);
        }

        public AsyncResult begin_getServerProxy(AsyncCallback callback, object cookie)
        {
            return begin_getServerProxy(new OptionalContext(), callback, cookie, false);
        }

        public AsyncResult begin_getServerProxy(OptionalContext context, AsyncCallback callback, object cookie)
        {
            return begin_getServerProxy(context, callback, cookie, false);
        }

        public ObjectPrx end_getServerProxy(AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getServerProxy_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<ObjectPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private AsyncResult<Callback_Router_getServerProxy> begin_getServerProxy(global::System.Collections.Generic.Dictionary<string, string> context, AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getServerProxy_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Router_getServerProxy, ObjectPrx>(
                (Callback_Router_getServerProxy cb, ObjectPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getServerProxy_name, cookie, completedCallback);
            _iceI_getServerProxy(context, synchronous, completed);
            return completed;
        }

        public AsyncResult<Callback_Router_addProxies> begin_addProxies(ObjectPrx[] proxies, OptionalContext context = new OptionalContext())
        {
            return begin_addProxies(proxies, context, null, null, false);
        }

        public AsyncResult begin_addProxies(ObjectPrx[] proxies, AsyncCallback callback, object cookie)
        {
            return begin_addProxies(proxies, new OptionalContext(), callback, cookie, false);
        }

        public AsyncResult begin_addProxies(ObjectPrx[] proxies, OptionalContext context, AsyncCallback callback, object cookie)
        {
            return begin_addProxies(proxies, context, callback, cookie, false);
        }

        public ObjectPrx[] end_addProxies(AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _addProxies_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<ObjectPrx[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private AsyncResult<Callback_Router_addProxies> begin_addProxies(ObjectPrx[] iceP_proxies, global::System.Collections.Generic.Dictionary<string, string> context, AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_addProxies_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Router_addProxies, ObjectPrx[]>(
                (Callback_Router_addProxies cb, ObjectPrx[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _addProxies_name, cookie, completedCallback);
            _iceI_addProxies(iceP_proxies, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static RouterPrx checkedCast(ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RouterPrx r = b as RouterPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                RouterPrxHelper h = new RouterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static RouterPrx checkedCast(ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            RouterPrx r = b as RouterPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                RouterPrxHelper h = new RouterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static RouterPrx checkedCast(ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    RouterPrxHelper h = new RouterPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(FacetNotExistException)
            {
            }
            return null;
        }

        public static RouterPrx checkedCast(ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    RouterPrxHelper h = new RouterPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(FacetNotExistException)
            {
            }
            return null;
        }

        public static RouterPrx uncheckedCast(ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RouterPrx r = b as RouterPrx;
            if(r == null)
            {
                RouterPrxHelper h = new RouterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static RouterPrx uncheckedCast(ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            RouterPrxHelper h = new RouterPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Ice::Router"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(OutputStream ostr, RouterPrx v)
        {
            ostr.writeProxy(v);
        }

        public static RouterPrx read(InputStream istr)
        {
            ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                RouterPrxHelper result = new RouterPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class RouterFinderPrxHelper : ObjectPrxHelperBase, RouterFinderPrx
    {
        public RouterFinderPrxHelper()
        {
        }

        #region Synchronous operations

        public RouterPrx getRouter(OptionalContext context = new OptionalContext())
        {
            try
            {
                return _iceI_getRouterAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<RouterPrx> getRouterAsync(OptionalContext context = new OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getRouterAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<RouterPrx> _iceI_getRouterAsync(OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getRouter_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<RouterPrx>(progress, cancel);
            _iceI_getRouter(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getRouter_name = "getRouter";

        private void _iceI_getRouter(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<RouterPrx>(completed);
            outAsync.invoke(
                _getRouter_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (InputStream istr) =>
                {
                    RouterPrx ret;
                    ret = RouterPrxHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public AsyncResult<Callback_RouterFinder_getRouter> begin_getRouter(OptionalContext context = new OptionalContext())
        {
            return begin_getRouter(context, null, null, false);
        }

        public AsyncResult begin_getRouter(AsyncCallback callback, object cookie)
        {
            return begin_getRouter(new OptionalContext(), callback, cookie, false);
        }

        public AsyncResult begin_getRouter(OptionalContext context, AsyncCallback callback, object cookie)
        {
            return begin_getRouter(context, callback, cookie, false);
        }

        public RouterPrx end_getRouter(AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getRouter_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<RouterPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private AsyncResult<Callback_RouterFinder_getRouter> begin_getRouter(global::System.Collections.Generic.Dictionary<string, string> context, AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getRouter_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RouterFinder_getRouter, RouterPrx>(
                (Callback_RouterFinder_getRouter cb, RouterPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getRouter_name, cookie, completedCallback);
            _iceI_getRouter(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static RouterFinderPrx checkedCast(ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RouterFinderPrx r = b as RouterFinderPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                RouterFinderPrxHelper h = new RouterFinderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static RouterFinderPrx checkedCast(ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            RouterFinderPrx r = b as RouterFinderPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                RouterFinderPrxHelper h = new RouterFinderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static RouterFinderPrx checkedCast(ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    RouterFinderPrxHelper h = new RouterFinderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(FacetNotExistException)
            {
            }
            return null;
        }

        public static RouterFinderPrx checkedCast(ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    RouterFinderPrxHelper h = new RouterFinderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(FacetNotExistException)
            {
            }
            return null;
        }

        public static RouterFinderPrx uncheckedCast(ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RouterFinderPrx r = b as RouterFinderPrx;
            if(r == null)
            {
                RouterFinderPrxHelper h = new RouterFinderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static RouterFinderPrx uncheckedCast(ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            ObjectPrx bb = b.ice_facet(f);
            RouterFinderPrxHelper h = new RouterFinderPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Ice::RouterFinder"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(OutputStream ostr, RouterFinderPrx v)
        {
            ostr.writeProxy(v);
        }

        public static RouterFinderPrx read(InputStream istr)
        {
            ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                RouterFinderPrxHelper result = new RouterFinderPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class RouterDisp_ : ObjectImpl, Router
    {
        #region Slice operations

        public abstract ObjectPrx getClientProxy(out Optional<bool> hasRoutingTable, Current current = null);

        public abstract ObjectPrx getServerProxy(Current current = null);

        public abstract ObjectPrx[] addProxies(ObjectPrx[] proxies, Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Ice::Router"
        };

        public override bool ice_isA(string s, Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_getClientProxy(Router obj, global::IceInternal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            Optional<bool> iceP_hasRoutingTable;
            var ret = obj.getClientProxy(out iceP_hasRoutingTable, current);
            var ostr = inS.startWriteParams();
            ostr.writeProxy(ret);
            ostr.writeBool(1, iceP_hasRoutingTable);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_getServerProxy(Router obj, global::IceInternal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getServerProxy(current);
            var ostr = inS.startWriteParams();
            ostr.writeProxy(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_addProxies(Router obj, global::IceInternal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            ObjectPrx[] iceP_proxies;
            iceP_proxies = ObjectProxySeqHelper.read(istr);
            inS.endReadParams();
            var ret = obj.addProxies(iceP_proxies, current);
            var ostr = inS.startWriteParams();
            ObjectProxySeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "addProxies",
            "getClientProxy",
            "getServerProxy",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_addProxies(this, inS, current);
                }
                case 1:
                {
                    return iceD_getClientProxy(this, inS, current);
                }
                case 2:
                {
                    return iceD_getServerProxy(this, inS, current);
                }
                case 3:
                {
                    return ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class RouterFinderDisp_ : ObjectImpl, RouterFinder
    {
        #region Slice operations

        public abstract RouterPrx getRouter(Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Ice::RouterFinder"
        };

        public override bool ice_isA(string s, Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_getRouter(RouterFinder obj, global::IceInternal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getRouter(current);
            var ostr = inS.startWriteParams();
            RouterPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getRouter",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getRouter(this, inS, current);
                }
                case 1:
                {
                    return ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
