//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Router.ice")]

#pragma warning disable 1591

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Ice::Router")]
    public partial interface Router : Ice.Object
    {
        /// <summary>
        /// Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
        /// If a null proxy is returned, the client will forward requests to the router's endpoints.
        /// </summary>
        ///  <param name="hasRoutingTable">Indicates whether or not the router supports a routing table. If it is supported, the
        ///  Ice runtime will call addProxies to populate the routing table. This out parameter is only supported
        ///  starting with Ice 3.7.
        ///  The Ice runtime assumes the router has a routing table if the hasRoutingTable is not set.
        ///  </param>
        /// <returns>The router's client proxy.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        ObjectPrx? getClientProxy(out bool? hasRoutingTable, Ice.Current current);

        /// <summary>
        /// Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
        /// </summary>
        /// <returns>The router's server proxy.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        ObjectPrx? getServerProxy(Ice.Current current);

        /// <summary>
        /// Add new proxy information to the router's routing table.
        /// </summary>
        /// <param name="proxies">The proxies to add. Adding a null proxy is an error.
        ///  </param>
        /// <returns>Proxies discarded by the router. These proxies are all non-null.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        ObjectPrx?[] addProxies(ObjectPrx?[] proxies, Ice.Current current);
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Ice::RouterFinder")]
    public partial interface RouterFinder : Ice.Object
    {
        /// <summary>
        /// Get the router proxy implemented by the process hosting this finder object.
        /// The proxy might point to several
        ///  replicas. This proxy is never null.
        /// </summary>
        ///  <returns>The router proxy.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        RouterPrx? getRouter(Ice.Current current);
    }
}

namespace Ice
{
    public record struct Router_GetClientProxyResult(ObjectPrx? returnValue, bool? hasRoutingTable);
}

namespace Ice
{
    /// <summary>
    /// The Ice router interface.
    /// Routers can be set either globally though the Communicator, or with
    ///  ice_router on specific proxies.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface RouterPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
        /// If a null proxy is returned, the client will forward requests to the router's endpoints.
        /// </summary>
        ///  <param name="hasRoutingTable">Indicates whether or not the router supports a routing table. If it is supported, the
        ///  Ice runtime will call addProxies to populate the routing table. This out parameter is only supported
        ///  starting with Ice 3.7.
        ///  The Ice runtime assumes the router has a routing table if the hasRoutingTable is not set.
        ///  </param>
        /// <returns>The router's client proxy.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        ObjectPrx? getClientProxy(out bool? hasRoutingTable, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
        /// If a null proxy is returned, the client will forward requests to the router's endpoints.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<Router_GetClientProxyResult> getClientProxyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
        /// </summary>
        /// <returns>The router's server proxy.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        ObjectPrx? getServerProxy(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<ObjectPrx?> getServerProxyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Add new proxy information to the router's routing table.
        /// </summary>
        /// <param name="proxies">The proxies to add. Adding a null proxy is an error.
        ///  </param>
        /// <returns>Proxies discarded by the router. These proxies are all non-null.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        ObjectPrx?[] addProxies(ObjectPrx?[] proxies, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Add new proxy information to the router's routing table.
        /// </summary>
        /// <param name="proxies">The proxies to add. Adding a null proxy is an error.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<ObjectPrx?[]> addProxiesAsync(ObjectPrx?[] proxies, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// This interface should be implemented by services implementing the Ice::Router interface.
    /// It should be advertised
    ///  through an Ice object with the identity `Ice/RouterFinder'. This allows clients to retrieve the router proxy
    ///  with just the endpoint information of the service.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface RouterFinderPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// Get the router proxy implemented by the process hosting this finder object.
        /// The proxy might point to several
        ///  replicas. This proxy is never null.
        /// </summary>
        ///  <returns>The router proxy.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        RouterPrx? getRouter(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get the router proxy implemented by the process hosting this finder object.
        /// The proxy might point to several
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<RouterPrx?> getRouterAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class RouterPrxHelper : Ice.ObjectPrxHelperBase, RouterPrx
    {
        public ObjectPrx? getClientProxy(out bool? hasRoutingTable, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_getClientProxyAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                hasRoutingTable = result_.hasRoutingTable;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public ObjectPrx? getServerProxy(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getServerProxyAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public ObjectPrx?[] addProxies(ObjectPrx?[] proxies, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_addProxiesAsync(proxies, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<Router_GetClientProxyResult> getClientProxyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getClientProxyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Router_GetClientProxyResult> _iceI_getClientProxyAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getClientProxy_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Router_GetClientProxyResult>(progress, cancel);
            _iceI_getClientProxy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getClientProxy_name = "getClientProxy";

        private void _iceI_getClientProxy(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Router_GetClientProxyResult>(completed);
            outAsync.invoke(
                _getClientProxy_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Router_GetClientProxyResult();
                    ret.returnValue = istr.readProxy();
                    {
                        var tmp = istr.readBool(1);
                        ret.hasRoutingTable = tmp;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<ObjectPrx?> getServerProxyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getServerProxyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<ObjectPrx?> _iceI_getServerProxyAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getServerProxy_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<ObjectPrx?>(progress, cancel);
            _iceI_getServerProxy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getServerProxy_name = "getServerProxy";

        private void _iceI_getServerProxy(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<ObjectPrx?>(completed);
            outAsync.invoke(
                _getServerProxy_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<ObjectPrx?[]> addProxiesAsync(ObjectPrx?[] proxies, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_addProxiesAsync(proxies, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<ObjectPrx?[]> _iceI_addProxiesAsync(ObjectPrx?[] iceP_proxies, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_addProxies_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<ObjectPrx?[]>(progress, cancel);
            _iceI_addProxies(iceP_proxies, context, synchronous, completed);
            return completed.Task;
        }

        private const string _addProxies_name = "addProxies";

        private void _iceI_addProxies(ObjectPrx?[] iceP_proxies, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<ObjectPrx?[]>(completed);
            outAsync.invoke(
                _addProxies_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ObjectProxySeqHelper.write(ostr, iceP_proxies);
                },
                read: (Ice.InputStream istr) =>
                {
                    ObjectPrx?[] ret;
                    ret = ObjectProxySeqHelper.read(istr);
                    return ret;
                });
        }

        public static RouterPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new RouterPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static RouterPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new RouterPrxHelper(b) : null;

        public static RouterPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static RouterPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new RouterPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static RouterPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Ice::Router"
        };

        public static string ice_staticId() => "::Ice::Router";

        public static void write(Ice.OutputStream ostr, RouterPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static RouterPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new RouterPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new RouterPrxHelper(reference);

        private RouterPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private RouterPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class RouterFinderPrxHelper : Ice.ObjectPrxHelperBase, RouterFinderPrx
    {
        public RouterPrx? getRouter(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getRouterAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<RouterPrx?> getRouterAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getRouterAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<RouterPrx?> _iceI_getRouterAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getRouter_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<RouterPrx?>(progress, cancel);
            _iceI_getRouter(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getRouter_name = "getRouter";

        private void _iceI_getRouter(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<RouterPrx?>(completed);
            outAsync.invoke(
                _getRouter_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    RouterPrx? ret;
                    ret = RouterPrxHelper.read(istr);
                    return ret;
                });
        }

        public static RouterFinderPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new RouterFinderPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static RouterFinderPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new RouterFinderPrxHelper(b) : null;

        public static RouterFinderPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static RouterFinderPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new RouterFinderPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static RouterFinderPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Ice::RouterFinder"
        };

        public static string ice_staticId() => "::Ice::RouterFinder";

        public static void write(Ice.OutputStream ostr, RouterFinderPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static RouterFinderPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new RouterFinderPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new RouterFinderPrxHelper(reference);

        private RouterFinderPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private RouterFinderPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class RouterDisp_ : Ice.ObjectImpl, Router
    {
        public abstract ObjectPrx? getClientProxy(out bool? hasRoutingTable, Ice.Current current);

        public abstract ObjectPrx? getServerProxy(Ice.Current current);

        public abstract ObjectPrx?[] addProxies(ObjectPrx?[] proxies, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Ice::Router";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "getClientProxy" => Router.iceD_getClientProxyAsync(this, request),
                "getServerProxy" => Router.iceD_getServerProxyAsync(this, request),
                "addProxies" => Router.iceD_addProxiesAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class RouterFinderDisp_ : Ice.ObjectImpl, RouterFinder
    {
        public abstract RouterPrx? getRouter(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Ice::RouterFinder";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "getRouter" => RouterFinder.iceD_getRouterAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Ice
{
    public partial interface Router
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getClientProxyAsync(
            Router obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            bool? iceP_hasRoutingTable;
            var ret = obj.getClientProxy(out iceP_hasRoutingTable, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeProxy(ret);
            ostr.writeBool(1, iceP_hasRoutingTable);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getServerProxyAsync(
            Router obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getServerProxy(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeProxy(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_addProxiesAsync(
            Router obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            ObjectPrx?[] iceP_proxies;
            iceP_proxies = ObjectProxySeqHelper.read(istr);
            istr.endEncapsulation();
            var ret = obj.addProxies(iceP_proxies, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ObjectProxySeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }

    public partial interface RouterFinder
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getRouterAsync(
            RouterFinder obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getRouter(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            RouterPrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }
}
