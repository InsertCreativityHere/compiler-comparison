//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Process.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Process.ice")]

#pragma warning disable 1591

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Ice::Process")]
    public partial interface Process : Object
    {
        /// <summary>
        /// Initiate a graceful shut-down.
        /// </summary>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void shutdown(Current current);

        /// <summary>
        /// Write a message on the process' stdout or stderr.
        /// </summary>
        /// <param name="message">The message.
        ///  </param>
        /// <param name="fd">1 for stdout, 2 for stderr.</param>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void writeMessage(string message, int fd, Current current);
    }
}

namespace Ice
{
    /// <summary>
    /// An administrative interface for process management.
    /// Managed servers must implement this interface.
    ///  &lt;p class="Note"&gt;A servant implementing this interface is a potential target for denial-of-service attacks,
    ///  therefore proper security precautions should be taken. For example, the servant can use a UUID to make its
    ///  identity harder to guess, and be registered in an object adapter with a secured endpoint.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface ProcessPrx : ObjectPrx
    {
        /// <summary>
        /// Initiate a graceful shut-down.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Initiate a graceful shut-down.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Write a message on the process' stdout or stderr.
        /// </summary>
        /// <param name="message">The message.
        ///  </param>
        /// <param name="fd">1 for stdout, 2 for stderr.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void writeMessage(string message, int fd, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Write a message on the process' stdout or stderr.
        /// </summary>
        /// <param name="message">The message.
        ///  </param>
        /// <param name="fd">1 for stdout, 2 for stderr.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task writeMessageAsync(string message, int fd, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ProcessPrxHelper : ObjectPrxHelperBase, ProcessPrx
    {
        public ProcessPrxHelper()
        {
        }

        #region Synchronous operations

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void writeMessage(string message, int fd, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_writeMessageAsync(message, fd, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task writeMessageAsync(string message, int fd, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_writeMessageAsync(message, fd, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_writeMessageAsync(string iceP_message, int iceP_fd, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_writeMessage(iceP_message, iceP_fd, context, synchronous, completed);
            return completed.Task;
        }

        private const string _writeMessage_name = "writeMessage";

        private void _iceI_writeMessage(string iceP_message, int iceP_fd, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _writeMessage_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    ostr.writeString(iceP_message);
                    ostr.writeInt(iceP_fd);
                });
        }

        #endregion

        #region Factory operations

        public static ProcessPrx createProxy(Communicator communicator, string proxyString) =>
            uncheckedCast(ObjectPrxHelper.createProxy(communicator, proxyString));

        public static ProcessPrx? checkedCast(ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                ProcessPrxHelper prx = new ProcessPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static ProcessPrx? checkedCast(ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    ProcessPrxHelper prx = new ProcessPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static ProcessPrx? uncheckedCast(ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new ProcessPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static ProcessPrx? uncheckedCast(ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                ObjectPrx? bb = b.ice_facet(f);
                var prx = new ProcessPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Ice::Process"
        };

        public static string ice_staticId() => "::Ice::Process";

        #endregion

        #region Marshaling support

        public static void write(OutputStream ostr, ProcessPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static ProcessPrx? read(InputStream istr)
        {
            ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new ProcessPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class ProcessDisp_ : ObjectImpl, Process
    {
        #region Slice operations

        public abstract void shutdown(Current current);

        public abstract void writeMessage(string message, int fd, Current current);

        #endregion

        #region Slice type-related members

        public override string ice_id(Current current) => ice_staticId();

        public static new string ice_staticId() => "::Ice::Process";

        #endregion

        #region Operation dispatch

        public override global::System.Threading.Tasks.ValueTask<OutgoingResponse> dispatchAsync(IncomingRequest request) =>
            request.current.operation switch
            {
                "shutdown" => Process.iceD_shutdownAsync(this, request),
                "writeMessage" => Process.iceD_writeMessageAsync(this, request),
                "ice_id" => Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Object.iceD_ice_pingAsync(this, request),
                _ => throw new OperationNotExistException()
            };

        #endregion
    }
}

namespace Ice
{
    public partial interface Process
    {
        protected static global::System.Threading.Tasks.ValueTask<OutgoingResponse> iceD_shutdownAsync(
            Process obj,
            IncomingRequest request)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.shutdown(request.current);
            return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<OutgoingResponse> iceD_writeMessageAsync(
            Process obj,
            IncomingRequest request)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_message;
            int iceP_fd;
            iceP_message = istr.readString();
            iceP_fd = istr.readInt();
            istr.endEncapsulation();
            obj.writeMessage(iceP_message, iceP_fd, request.current);
            return new(global::Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }
}
