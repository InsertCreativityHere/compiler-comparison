//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `OperationMode.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("OperationMode.ice")]

#pragma warning disable 1591

namespace Ice
{
    /// <summary>
    /// Determines the retry behavior an invocation in case of a (potentially) recoverable error.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public enum OperationMode
    {
        /// <summary>
        /// Ordinary operations have Normal mode.
        /// These operations modify object state; invoking such an
        ///  operation twice in a row has different semantics than invoking it once. The Ice run time guarantees that it
        ///  will not violate at-most-once semantics for Normal operations.
        /// </summary>

        Normal,
        /// <summary>
        /// Operations that are nonmutating must not modify object state.
        /// The Ice run-time no longer makes a distinction between nonmutating operations and idempotent operations.
        ///  &lt;p class="Deprecated"&gt;Nonmutating is deprecated; Use the idempotent keyword
        ///  instead.
        /// </summary>

        Nonmutating,
        /// <summary>
        /// Operations that use the Slice idempotent keyword can modify object state, but invoking an
        ///  operation twice in a row must result in the same object state as invoking it once.
        /// For example,
        ///  x = 1 is an idempotent statement, whereas x += 1 is not. In addition, the Ice
        ///  run time will attempt to transparently recover from certain run-time errors by re-issuing a failed request
        ///  and propagate the failure to the application only if the second attempt fails.
        /// </summary>

        Idempotent
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class OperationModeHelper
    {
        public static void write(Ice.OutputStream ostr, OperationMode v)
        {
            ostr.writeEnum((int)v, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static OperationMode read(Ice.InputStream istr)
        {
            OperationMode v;
            v = (OperationMode)istr.readEnum(2);
            return v;
        }
    }
}
