//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `RemoteLogger.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ice
{
    /// <summary>
    /// An enumeration representing the different types of log messages.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public enum LogMessageType
    {
        /// <summary>
        /// The RemoteLogger received a print message.
        /// </summary>

        PrintMessage,
        /// <summary>
        /// The RemoteLogger received a trace message.
        /// </summary>

        TraceMessage,
        /// <summary>
        /// The RemoteLogger received a warning message.
        /// </summary>

        WarningMessage,
        /// <summary>
        /// The RemoteLogger received an error message.
        /// </summary>

        ErrorMessage
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LogMessageTypeHelper
    {
        public static void write(OutputStream ostr, LogMessageType v)
        {
            ostr.writeEnum((int)v, 3);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static LogMessageType read(InputStream istr)
        {
            LogMessageType v;
            v = (LogMessageType)istr.readEnum(3);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class LogMessage : global::System.ICloneable, global::System.IEquatable<LogMessage>
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public LogMessageType type;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long timestamp;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string traceCategory = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string message = "";

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public LogMessage()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public LogMessage(LogMessageType type, long timestamp, string traceCategory, string message)
        {
            this.type = type;
            this.timestamp = timestamp;
            this.traceCategory = traceCategory;
            this.message = message;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone() => MemberwiseClone();

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::Ice.Internal.HashUtil.hashAdd(ref h_, "::Ice::LogMessage");
            global::Ice.Internal.HashUtil.hashAdd(ref h_, type);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, timestamp);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, traceCategory);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, message);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other) => Equals(other as LogMessage);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(LogMessage other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return other is not null && 
                this.type == other.type && 
                this.timestamp == other.timestamp && 
                this.traceCategory == other.traceCategory && 
                this.message == other.message;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator ==(LogMessage lhs, LogMessage rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator !=(LogMessage lhs, LogMessage rhs) => !(lhs == rhs);

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(OutputStream ostr)
        {
            ostr.writeEnum((int)this.type, 3);
            ostr.writeLong(this.timestamp);
            ostr.writeString(this.traceCategory);
            ostr.writeString(this.message);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(InputStream istr)
        {
            this.type = (LogMessageType)istr.readEnum(3);
            this.timestamp = istr.readLong();
            this.traceCategory = istr.readString();
            this.message = istr.readString();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(OutputStream ostr, LogMessage v)
        {
            if (v is null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static LogMessage ice_read(InputStream istr)
        {
            var v = new LogMessage();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly LogMessage _nullMarshalValue = new LogMessage();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface RemoteLogger : Object, RemoteLoggerOperations_
    {
    }

    /// <summary>
    /// Thrown when the provided RemoteLogger was previously attached to a LoggerAdmin.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class RemoteLoggerAlreadyAttachedException : UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public RemoteLoggerAlreadyAttachedException()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public RemoteLoggerAlreadyAttachedException(global::System.Exception ex) : base(ex)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Ice::RemoteLoggerAlreadyAttachedException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(OutputStream ostr_)
        {
            ostr_.startSlice("::Ice::RemoteLoggerAlreadyAttachedException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface LoggerAdmin : Object, LoggerAdminOperations_
    {
    }
}

namespace Ice
{
    public struct LoggerAdmin_GetLogResult
    {
        public LoggerAdmin_GetLogResult(LogMessage[] returnValue, string prefix)
        {
            this.returnValue = returnValue;
            this.prefix = prefix;
        }

        public LogMessage[] returnValue;
        public string prefix;
    }
}

namespace Ice
{
    /// <summary>
    /// The Ice remote logger interface.
    /// An application can implement a RemoteLogger to receive the log messages sent
    ///  to the local RemoteLogger of another Ice application.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface RemoteLoggerPrx : ObjectPrx
    {
        /// <summary>
        /// init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
        /// </summary>
        /// <param name="prefix">The prefix of the associated local Logger.
        ///  </param>
        /// <param name="logMessages">Old log messages generated before "now".</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void init(string prefix, LogMessage[] logMessages, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
        /// </summary>
        /// <param name="prefix">The prefix of the associated local Logger.
        ///  </param>
        /// <param name="logMessages">Old log messages generated before "now".</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task initAsync(string prefix, LogMessage[] logMessages, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Log a LogMessage.
        /// Note that log may be called by LoggerAdmin before init.
        /// </summary>
        ///  <param name="message">The message to log.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void log(LogMessage message, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Log a LogMessage.
        /// Note that log may be called by LoggerAdmin before init.
        /// </summary>
        ///  <param name="message">The message to log.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task logAsync(LogMessage message, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// The interface of the admin object that allows an Ice application the attach its
    ///  RemoteLogger to the RemoteLogger of this admin object's Ice communicator.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LoggerAdminPrx : ObjectPrx
    {
        /// <summary>
        /// Attaches a RemoteLogger object to the local logger.
        /// attachRemoteLogger calls init on the provided
        ///  RemoteLogger proxy.
        /// </summary>
        ///  <param name="prx">A proxy to the remote logger.
        ///  </param>
        /// <param name="messageTypes">The list of message types that the remote logger wishes to receive. An empty list means
        ///  no filtering (send all message types).
        ///  </param>
        /// <param name="traceCategories">The categories of traces that the remote logger wishes to receive. This parameter is
        ///  ignored if messageTypes is not empty and does not include trace. An empty list means no filtering (send all
        ///  trace categories).
        ///  </param>
        /// <param name="messageMax">The maximum number of log messages (of all types) to be provided to init. A negative
        ///  value requests all messages available.
        ///  </param>
        /// <exception name="RemoteLoggerAlreadyAttachedException">Raised if this remote logger is already attached to this admin
        ///  object.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, string[] traceCategories, int messageMax, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Attaches a RemoteLogger object to the local logger.
        /// attachRemoteLogger calls init on the provided
        /// </summary>
        ///  <param name="prx">A proxy to the remote logger.
        ///  </param>
        /// <param name="messageTypes">The list of message types that the remote logger wishes to receive. An empty list means
        ///  no filtering (send all message types).
        ///  </param>
        /// <param name="traceCategories">The categories of traces that the remote logger wishes to receive. This parameter is
        ///  ignored if messageTypes is not empty and does not include trace. An empty list means no filtering (send all
        ///  trace categories).
        ///  </param>
        /// <param name="messageMax">The maximum number of log messages (of all types) to be provided to init. A negative
        ///  value requests all messages available.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task attachRemoteLoggerAsync(RemoteLoggerPrx prx, LogMessageType[] messageTypes, string[] traceCategories, int messageMax, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Detaches a RemoteLogger object from the local logger.
        /// </summary>
        /// <param name="prx">A proxy to the remote logger.
        ///  </param>
        /// <returns>True if the provided remote logger proxy was detached, and false otherwise.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        bool detachRemoteLogger(RemoteLoggerPrx prx, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Detaches a RemoteLogger object from the local logger.
        /// </summary>
        /// <param name="prx">A proxy to the remote logger.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<bool> detachRemoteLoggerAsync(RemoteLoggerPrx prx, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Retrieves log messages recently logged.
        /// </summary>
        /// <param name="messageTypes">The list of message types that the caller wishes to receive. An empty list means no
        ///  filtering (send all message types).
        ///  </param>
        /// <param name="traceCategories">The categories of traces that caller wish to receive. This parameter is ignored if
        ///  messageTypes is not empty and does not include trace. An empty list means no filtering (send all trace
        ///  categories).
        ///  </param>
        /// <param name="messageMax">The maximum number of log messages (of all types) to be returned. A negative value
        ///  requests all messages available.
        ///  </param>
        /// <param name="prefix">The prefix of the associated local logger.
        ///  </param>
        /// <returns>The Log messages.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        LogMessage[] getLog(LogMessageType[] messageTypes, string[] traceCategories, int messageMax, out string prefix, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Retrieves log messages recently logged.
        /// </summary>
        /// <param name="messageTypes">The list of message types that the caller wishes to receive. An empty list means no
        ///  filtering (send all message types).
        ///  </param>
        /// <param name="traceCategories">The categories of traces that caller wish to receive. This parameter is ignored if
        ///  messageTypes is not empty and does not include trace. An empty list means no filtering (send all trace
        ///  categories).
        ///  </param>
        /// <param name="messageMax">The maximum number of log messages (of all types) to be returned. A negative value
        ///  requests all messages available.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<LoggerAdmin_GetLogResult> getLogAsync(LogMessageType[] messageTypes, string[] traceCategories, int messageMax, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Ice
{
    /// <summary>
    /// The Ice remote logger interface.
    /// An application can implement a RemoteLogger to receive the log messages sent
    ///  to the local RemoteLogger of another Ice application.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface RemoteLoggerOperations_
    {
        /// <summary>
        /// init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
        /// </summary>
        /// <param name="prefix">The prefix of the associated local Logger.
        ///  </param>
        /// <param name="logMessages">Old log messages generated before "now".</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void init(string prefix, LogMessage[] logMessages, Current current = null);

        /// <summary>
        /// Log a LogMessage.
        /// Note that log may be called by LoggerAdmin before init.
        /// </summary>
        ///  <param name="message">The message to log.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void log(LogMessage message, Current current = null);
    }

    /// <summary>
    /// The interface of the admin object that allows an Ice application the attach its
    ///  RemoteLogger to the RemoteLogger of this admin object's Ice communicator.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LoggerAdminOperations_
    {
        /// <summary>
        /// Attaches a RemoteLogger object to the local logger.
        /// attachRemoteLogger calls init on the provided
        ///  RemoteLogger proxy.
        /// </summary>
        ///  <param name="prx">A proxy to the remote logger.
        ///  </param>
        /// <param name="messageTypes">The list of message types that the remote logger wishes to receive. An empty list means
        ///  no filtering (send all message types).
        ///  </param>
        /// <param name="traceCategories">The categories of traces that the remote logger wishes to receive. This parameter is
        ///  ignored if messageTypes is not empty and does not include trace. An empty list means no filtering (send all
        ///  trace categories).
        ///  </param>
        /// <param name="messageMax">The maximum number of log messages (of all types) to be provided to init. A negative
        ///  value requests all messages available.
        ///  </param>
        /// <exception name="RemoteLoggerAlreadyAttachedException">Raised if this remote logger is already attached to this admin
        ///  object.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, string[] traceCategories, int messageMax, Current current = null);

        /// <summary>
        /// Detaches a RemoteLogger object from the local logger.
        /// </summary>
        /// <param name="prx">A proxy to the remote logger.
        ///  </param>
        /// <returns>True if the provided remote logger proxy was detached, and false otherwise.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool detachRemoteLogger(RemoteLoggerPrx prx, Current current = null);

        /// <summary>
        /// Retrieves log messages recently logged.
        /// </summary>
        /// <param name="messageTypes">The list of message types that the caller wishes to receive. An empty list means no
        ///  filtering (send all message types).
        ///  </param>
        /// <param name="traceCategories">The categories of traces that caller wish to receive. This parameter is ignored if
        ///  messageTypes is not empty and does not include trace. An empty list means no filtering (send all trace
        ///  categories).
        ///  </param>
        /// <param name="messageMax">The maximum number of log messages (of all types) to be returned. A negative value
        ///  requests all messages available.
        ///  </param>
        /// <param name="prefix">The prefix of the associated local logger.
        ///  </param>
        /// <returns>The Log messages.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        LogMessage[] getLog(LogMessageType[] messageTypes, string[] traceCategories, int messageMax, out string prefix, Current current = null);
    }
}

namespace Ice
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LogMessageTypeSeqHelper
    {
        public static void write(OutputStream ostr, LogMessageType[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 3);
                }
            }
        }

        public static LogMessageType[] read(InputStream istr)
        {
            LogMessageType[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new LogMessageType[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (LogMessageType)istr.readEnum(3);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LogMessageSeqHelper
    {
        public static void write(OutputStream ostr, LogMessage[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new LogMessage() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static LogMessage[] read(InputStream istr)
        {
            LogMessage[] v;
            {
                int szx = istr.readAndCheckSeqSize(11);
                v = new LogMessage[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new LogMessage();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class RemoteLoggerPrxHelper : ObjectPrxHelperBase, RemoteLoggerPrx
    {
        public RemoteLoggerPrxHelper()
        {
        }

        #region Synchronous operations

        public void init(string prefix, LogMessage[] logMessages, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_initAsync(prefix, logMessages, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void log(LogMessage message, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_logAsync(message, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task initAsync(string prefix, LogMessage[] logMessages, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_initAsync(prefix, logMessages, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_initAsync(string iceP_prefix, LogMessage[] iceP_logMessages, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_init(iceP_prefix, iceP_logMessages, context, synchronous, completed);
            return completed.Task;
        }

        private const string _init_name = "init";

        private void _iceI_init(string iceP_prefix, LogMessage[] iceP_logMessages, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _init_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    ostr.writeString(iceP_prefix);
                    LogMessageSeqHelper.write(ostr, iceP_logMessages);
                });
        }

        public global::System.Threading.Tasks.Task logAsync(LogMessage message, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_logAsync(message, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_logAsync(LogMessage iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_log(iceP_message, context, synchronous, completed);
            return completed.Task;
        }

        private const string _log_name = "log";

        private void _iceI_log(LogMessage iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _log_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    LogMessage.ice_write(ostr, iceP_message);
                });
        }

        #endregion

        #region Checked and unchecked cast operations

        public static RemoteLoggerPrx checkedCast(ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                RemoteLoggerPrxHelper prx = new RemoteLoggerPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static RemoteLoggerPrx checkedCast(ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    RemoteLoggerPrxHelper prx = new RemoteLoggerPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (FacetNotExistException)
            {
            }
            return null;
        }

        public static RemoteLoggerPrx uncheckedCast(ObjectPrx b)
        {
            if (b is not null)
            {
                RemoteLoggerPrxHelper prx = new RemoteLoggerPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static RemoteLoggerPrx uncheckedCast(ObjectPrx b, string f)
        {
            if (b is not null)
            {
                ObjectPrx bb = b.ice_facet(f);
                RemoteLoggerPrxHelper prx = new RemoteLoggerPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Ice::RemoteLogger"
        };

        public static string ice_staticId() => "::Ice::RemoteLogger";

        #endregion

        #region Marshaling support

        public static void write(OutputStream ostr, RemoteLoggerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static RemoteLoggerPrx read(InputStream istr)
        {
            ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                RemoteLoggerPrxHelper result = new RemoteLoggerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LoggerAdminPrxHelper : ObjectPrxHelperBase, LoggerAdminPrx
    {
        public LoggerAdminPrxHelper()
        {
        }

        #region Synchronous operations

        public void attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, string[] traceCategories, int messageMax, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_attachRemoteLoggerAsync(prx, messageTypes, traceCategories, messageMax, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool detachRemoteLogger(RemoteLoggerPrx prx, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_detachRemoteLoggerAsync(prx, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public LogMessage[] getLog(LogMessageType[] messageTypes, string[] traceCategories, int messageMax, out string prefix, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_getLogAsync(messageTypes, traceCategories, messageMax, context, null, global::System.Threading.CancellationToken.None, true).Result;
                prefix = result_.prefix;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task attachRemoteLoggerAsync(RemoteLoggerPrx prx, LogMessageType[] messageTypes, string[] traceCategories, int messageMax, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_attachRemoteLoggerAsync(prx, messageTypes, traceCategories, messageMax, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_attachRemoteLoggerAsync(RemoteLoggerPrx iceP_prx, LogMessageType[] iceP_messageTypes, string[] iceP_traceCategories, int iceP_messageMax, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_attachRemoteLogger_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_attachRemoteLogger(iceP_prx, iceP_messageTypes, iceP_traceCategories, iceP_messageMax, context, synchronous, completed);
            return completed.Task;
        }

        private const string _attachRemoteLogger_name = "attachRemoteLogger";

        private void _iceI_attachRemoteLogger(RemoteLoggerPrx iceP_prx, LogMessageType[] iceP_messageTypes, string[] iceP_traceCategories, int iceP_messageMax, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _attachRemoteLogger_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    RemoteLoggerPrxHelper.write(ostr, iceP_prx);
                    LogMessageTypeSeqHelper.write(ostr, iceP_messageTypes);
                    StringSeqHelper.write(ostr, iceP_traceCategories);
                    ostr.writeInt(iceP_messageMax);
                },
                userException: (UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(RemoteLoggerAlreadyAttachedException)
                    {
                        throw;
                    }
                    catch(UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<bool> detachRemoteLoggerAsync(RemoteLoggerPrx prx, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_detachRemoteLoggerAsync(prx, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_detachRemoteLoggerAsync(RemoteLoggerPrx iceP_prx, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_detachRemoteLogger_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_detachRemoteLogger(iceP_prx, context, synchronous, completed);
            return completed.Task;
        }

        private const string _detachRemoteLogger_name = "detachRemoteLogger";

        private void _iceI_detachRemoteLogger(RemoteLoggerPrx iceP_prx, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _detachRemoteLogger_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    RemoteLoggerPrxHelper.write(ostr, iceP_prx);
                },
                read: (InputStream istr) =>
                {
                    bool ret = default;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<LoggerAdmin_GetLogResult> getLogAsync(LogMessageType[] messageTypes, string[] traceCategories, int messageMax, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getLogAsync(messageTypes, traceCategories, messageMax, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<LoggerAdmin_GetLogResult> _iceI_getLogAsync(LogMessageType[] iceP_messageTypes, string[] iceP_traceCategories, int iceP_messageMax, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getLog_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<LoggerAdmin_GetLogResult>(progress, cancel);
            _iceI_getLog(iceP_messageTypes, iceP_traceCategories, iceP_messageMax, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getLog_name = "getLog";

        private void _iceI_getLog(LogMessageType[] iceP_messageTypes, string[] iceP_traceCategories, int iceP_messageMax, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<LoggerAdmin_GetLogResult>(completed);
            outAsync.invoke(
                _getLog_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (OutputStream ostr) =>
                {
                    LogMessageTypeSeqHelper.write(ostr, iceP_messageTypes);
                    StringSeqHelper.write(ostr, iceP_traceCategories);
                    ostr.writeInt(iceP_messageMax);
                },
                read: (InputStream istr) =>
                {
                    LoggerAdmin_GetLogResult ret = new LoggerAdmin_GetLogResult();
                    ret.prefix = istr.readString();
                    ret.returnValue = LogMessageSeqHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Checked and unchecked cast operations

        public static LoggerAdminPrx checkedCast(ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                LoggerAdminPrxHelper prx = new LoggerAdminPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static LoggerAdminPrx checkedCast(ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    LoggerAdminPrxHelper prx = new LoggerAdminPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (FacetNotExistException)
            {
            }
            return null;
        }

        public static LoggerAdminPrx uncheckedCast(ObjectPrx b)
        {
            if (b is not null)
            {
                LoggerAdminPrxHelper prx = new LoggerAdminPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static LoggerAdminPrx uncheckedCast(ObjectPrx b, string f)
        {
            if (b is not null)
            {
                ObjectPrx bb = b.ice_facet(f);
                LoggerAdminPrxHelper prx = new LoggerAdminPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::LoggerAdmin",
            "::Ice::Object"
        };

        public static string ice_staticId() => "::Ice::LoggerAdmin";

        #endregion

        #region Marshaling support

        public static void write(OutputStream ostr, LoggerAdminPrx v)
        {
            ostr.writeProxy(v);
        }

        public static LoggerAdminPrx read(InputStream istr)
        {
            ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                LoggerAdminPrxHelper result = new LoggerAdminPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Ice
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class RemoteLoggerDisp_ : ObjectImpl, RemoteLogger
    {
        #region Slice operations

        public abstract void init(string prefix, LogMessage[] logMessages, Current current = null);

        public abstract void log(LogMessage message, Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Ice::RemoteLogger"
        };

        public override bool ice_isA(string s, Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Ice::RemoteLogger";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_init(RemoteLogger obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_prefix = default;
            LogMessage[] iceP_logMessages = default;
            iceP_prefix = istr.readString();
            iceP_logMessages = LogMessageSeqHelper.read(istr);
            inS.endReadParams();
            obj.init(iceP_prefix, iceP_logMessages, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_log(RemoteLogger obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LogMessage iceP_message = default;
            iceP_message = LogMessage.ice_read(istr);
            inS.endReadParams();
            obj.log(iceP_message, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "init",
            "log"
        };

        public override global::System.Threading.Tasks.Task<OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_init(this, inS, current);
                }
                case 5:
                {
                    return iceD_log(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class LoggerAdminDisp_ : ObjectImpl, LoggerAdmin
    {
        #region Slice operations

        public abstract void attachRemoteLogger(RemoteLoggerPrx prx, LogMessageType[] messageTypes, string[] traceCategories, int messageMax, Current current = null);

        public abstract bool detachRemoteLogger(RemoteLoggerPrx prx, Current current = null);

        public abstract LogMessage[] getLog(LogMessageType[] messageTypes, string[] traceCategories, int messageMax, out string prefix, Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::LoggerAdmin",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Ice::LoggerAdmin";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_attachRemoteLogger(LoggerAdmin obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            RemoteLoggerPrx iceP_prx = default;
            LogMessageType[] iceP_messageTypes = default;
            string[] iceP_traceCategories = default;
            int iceP_messageMax = default;
            iceP_prx = RemoteLoggerPrxHelper.read(istr);
            iceP_messageTypes = LogMessageTypeSeqHelper.read(istr);
            iceP_traceCategories = StringSeqHelper.read(istr);
            iceP_messageMax = istr.readInt();
            inS.endReadParams();
            obj.attachRemoteLogger(iceP_prx, iceP_messageTypes, iceP_traceCategories, iceP_messageMax, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_detachRemoteLogger(LoggerAdmin obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            RemoteLoggerPrx iceP_prx = default;
            iceP_prx = RemoteLoggerPrxHelper.read(istr);
            inS.endReadParams();
            var ret = obj.detachRemoteLogger(iceP_prx, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<OutputStream>
        iceD_getLog(LoggerAdmin obj, global::Ice.Internal.Incoming inS, Current current)
        {
            ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            LogMessageType[] iceP_messageTypes = default;
            string[] iceP_traceCategories = default;
            int iceP_messageMax = default;
            iceP_messageTypes = LogMessageTypeSeqHelper.read(istr);
            iceP_traceCategories = StringSeqHelper.read(istr);
            iceP_messageMax = istr.readInt();
            inS.endReadParams();
            string iceP_prefix;
            var ret = obj.getLog(iceP_messageTypes, iceP_traceCategories, iceP_messageMax, out iceP_prefix, current);
            var ostr = inS.startWriteParams();
            ostr.writeString(iceP_prefix);
            LogMessageSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "attachRemoteLogger",
            "detachRemoteLogger",
            "getLog",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_attachRemoteLogger(this, inS, current);
                }
                case 1:
                {
                    return iceD_detachRemoteLogger(this, inS, current);
                }
                case 2:
                {
                    return iceD_getLog(this, inS, current);
                }
                case 3:
                {
                    return ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
