//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'RemoteLogger.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("RemoteLogger.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Ice
{
    /// <summary>
    /// An enumeration representing the different types of log messages.
    /// </summary>

    public enum LogMessageType
    {
        /// <summary>
        /// The RemoteLogger received a print message.
        /// </summary>

        PrintMessage,
        /// <summary>
        /// The RemoteLogger received a trace message.
        /// </summary>

        TraceMessage,
        /// <summary>
        /// The RemoteLogger received a warning message.
        /// </summary>

        WarningMessage,
        /// <summary>
        /// The RemoteLogger received an error message.
        /// </summary>

        ErrorMessage
    }

    public sealed class LogMessageTypeHelper
    {
        public static void write(Ice.OutputStream ostr, LogMessageType v)
        {
            ostr.writeEnum((int)v, 3);
        }

        public static LogMessageType read(Ice.InputStream istr)
        {
            LogMessageType v;
            v = (LogMessageType)istr.readEnum(3);
            return v;
        }
    }

    public sealed partial record class LogMessage
    {
        public LogMessageType type;

        public long timestamp;

        public string traceCategory = "";

        public string message = "";

        partial void ice_initialize();

        public LogMessage()
        {
            ice_initialize();
        }

        public LogMessage(LogMessageType type, long timestamp, string traceCategory, string message)
        {
            this.type = type;
            this.timestamp = timestamp;
            global::System.ArgumentNullException.ThrowIfNull(traceCategory);
            this.traceCategory = traceCategory;
            global::System.ArgumentNullException.ThrowIfNull(message);
            this.message = message;
            ice_initialize();
        }

        public LogMessage(Ice.InputStream istr)
        {
            this.type = (LogMessageType)istr.readEnum(3);
            this.timestamp = istr.readLong();
            this.traceCategory = istr.readString();
            this.message = istr.readString();
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeEnum((int)this.type, 3);
            ostr.writeLong(this.timestamp);
            ostr.writeString(this.traceCategory);
            ostr.writeString(this.message);
        }

        public static void ice_write(Ice.OutputStream ostr, LogMessage v)
        {
            v.ice_writeMembers(ostr);
        }

        public static LogMessage ice_read(Ice.InputStream istr) => new(istr);
    }

    [Ice.SliceTypeId("::Ice::RemoteLogger")]
    public partial interface RemoteLogger : Ice.Object
    {
        /// <summary>
        /// init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
        /// </summary>
        /// <param name="prefix">The prefix of the associated local Logger.
        ///  </param>
        /// <param name="logMessages">Old log messages generated before "now".</param>
        /// <param name="current">The Current object for the dispatch.</param>

        void init(string prefix, LogMessage[] logMessages, Ice.Current current);

        /// <summary>
        /// Log a LogMessage.
        /// Note that log may be called by LoggerAdmin before init.
        /// </summary>
        ///  <param name="message">The message to log.</param>
        /// <param name="current">The Current object for the dispatch.</param>

        void log(LogMessage message, Ice.Current current);
    }

    /// <summary>
    /// Thrown when the provided RemoteLogger was previously attached to a LoggerAdmin.
    /// </summary>

    [Ice.SliceTypeId("::Ice::RemoteLoggerAlreadyAttachedException")]
    public partial class RemoteLoggerAlreadyAttachedException : Ice.UserException
    {
        public override string ice_id() => "::Ice::RemoteLoggerAlreadyAttachedException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Ice::RemoteLoggerAlreadyAttachedException", -1, true);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Ice::LoggerAdmin")]
    public partial interface LoggerAdmin : Ice.Object
    {
        /// <summary>
        /// Attaches a RemoteLogger object to the local logger.
        /// attachRemoteLogger calls init on the provided
        ///  RemoteLogger proxy.
        /// </summary>
        ///  <param name="prx">A proxy to the remote logger.
        ///  </param>
        /// <param name="messageTypes">The list of message types that the remote logger wishes to receive. An empty list means
        ///  no filtering (send all message types).
        ///  </param>
        /// <param name="traceCategories">The categories of traces that the remote logger wishes to receive. This parameter is
        ///  ignored if messageTypes is not empty and does not include trace. An empty list means no filtering (send all
        ///  trace categories).
        ///  </param>
        /// <param name="messageMax">The maximum number of log messages (of all types) to be provided to init. A negative
        ///  value requests all messages available.
        ///  </param>
        /// <exception name="RemoteLoggerAlreadyAttachedException">Raised if this remote logger is already attached to this admin
        ///  object.</exception>
        /// <param name="current">The Current object for the dispatch.</param>

        void attachRemoteLogger(RemoteLoggerPrx? prx, LogMessageType[] messageTypes, string[] traceCategories, int messageMax, Ice.Current current);

        /// <summary>
        /// Detaches a RemoteLogger object from the local logger.
        /// </summary>
        /// <param name="prx">A proxy to the remote logger.
        ///  </param>
        /// <returns>True if the provided remote logger proxy was detached, and false otherwise.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        bool detachRemoteLogger(RemoteLoggerPrx? prx, Ice.Current current);

        /// <summary>
        /// Retrieves log messages recently logged.
        /// </summary>
        /// <param name="messageTypes">The list of message types that the caller wishes to receive. An empty list means no
        ///  filtering (send all message types).
        ///  </param>
        /// <param name="traceCategories">The categories of traces that caller wish to receive. This parameter is ignored if
        ///  messageTypes is not empty and does not include trace. An empty list means no filtering (send all trace
        ///  categories).
        ///  </param>
        /// <param name="messageMax">The maximum number of log messages (of all types) to be returned. A negative value
        ///  requests all messages available.
        ///  </param>
        /// <param name="prefix">The prefix of the associated local logger.
        ///  </param>
        /// <returns>The Log messages.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        LogMessage[] getLog(LogMessageType[] messageTypes, string[] traceCategories, int messageMax, out string prefix, Ice.Current current);
    }
}

namespace Ice
{
    public record struct LoggerAdmin_GetLogResult(LogMessage[] returnValue, string prefix);
}

namespace Ice
{
    /// <summary>
    /// The Ice remote logger interface.
    /// An application can implement a RemoteLogger to receive the log messages sent
    ///  to the local RemoteLogger of another Ice application.
    /// </summary>

    public interface RemoteLoggerPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
        /// </summary>
        /// <param name="prefix">The prefix of the associated local Logger.
        ///  </param>
        /// <param name="logMessages">Old log messages generated before "now".</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void init(string prefix, LogMessage[] logMessages, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
        /// </summary>
        /// <param name="prefix">The prefix of the associated local Logger.
        ///  </param>
        /// <param name="logMessages">Old log messages generated before "now".</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task initAsync(string prefix, LogMessage[] logMessages, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Log a LogMessage.
        /// Note that log may be called by LoggerAdmin before init.
        /// </summary>
        ///  <param name="message">The message to log.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void log(LogMessage message, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Log a LogMessage.
        /// Note that log may be called by LoggerAdmin before init.
        /// </summary>
        ///  <param name="message">The message to log.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task logAsync(LogMessage message, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// The interface of the admin object that allows an Ice application the attach its
    ///  RemoteLogger to the RemoteLogger of this admin object's Ice communicator.
    /// </summary>

    public interface LoggerAdminPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// Attaches a RemoteLogger object to the local logger.
        /// attachRemoteLogger calls init on the provided
        ///  RemoteLogger proxy.
        /// </summary>
        ///  <param name="prx">A proxy to the remote logger.
        ///  </param>
        /// <param name="messageTypes">The list of message types that the remote logger wishes to receive. An empty list means
        ///  no filtering (send all message types).
        ///  </param>
        /// <param name="traceCategories">The categories of traces that the remote logger wishes to receive. This parameter is
        ///  ignored if messageTypes is not empty and does not include trace. An empty list means no filtering (send all
        ///  trace categories).
        ///  </param>
        /// <param name="messageMax">The maximum number of log messages (of all types) to be provided to init. A negative
        ///  value requests all messages available.
        ///  </param>
        /// <exception name="RemoteLoggerAlreadyAttachedException">Raised if this remote logger is already attached to this admin
        ///  object.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void attachRemoteLogger(RemoteLoggerPrx? prx, LogMessageType[] messageTypes, string[] traceCategories, int messageMax, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Attaches a RemoteLogger object to the local logger.
        /// attachRemoteLogger calls init on the provided
        /// </summary>
        ///  <param name="prx">A proxy to the remote logger.
        ///  </param>
        /// <param name="messageTypes">The list of message types that the remote logger wishes to receive. An empty list means
        ///  no filtering (send all message types).
        ///  </param>
        /// <param name="traceCategories">The categories of traces that the remote logger wishes to receive. This parameter is
        ///  ignored if messageTypes is not empty and does not include trace. An empty list means no filtering (send all
        ///  trace categories).
        ///  </param>
        /// <param name="messageMax">The maximum number of log messages (of all types) to be provided to init. A negative
        ///  value requests all messages available.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task attachRemoteLoggerAsync(RemoteLoggerPrx? prx, LogMessageType[] messageTypes, string[] traceCategories, int messageMax, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Detaches a RemoteLogger object from the local logger.
        /// </summary>
        /// <param name="prx">A proxy to the remote logger.
        ///  </param>
        /// <returns>True if the provided remote logger proxy was detached, and false otherwise.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        bool detachRemoteLogger(RemoteLoggerPrx? prx, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Detaches a RemoteLogger object from the local logger.
        /// </summary>
        /// <param name="prx">A proxy to the remote logger.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<bool> detachRemoteLoggerAsync(RemoteLoggerPrx? prx, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Retrieves log messages recently logged.
        /// </summary>
        /// <param name="messageTypes">The list of message types that the caller wishes to receive. An empty list means no
        ///  filtering (send all message types).
        ///  </param>
        /// <param name="traceCategories">The categories of traces that caller wish to receive. This parameter is ignored if
        ///  messageTypes is not empty and does not include trace. An empty list means no filtering (send all trace
        ///  categories).
        ///  </param>
        /// <param name="messageMax">The maximum number of log messages (of all types) to be returned. A negative value
        ///  requests all messages available.
        ///  </param>
        /// <param name="prefix">The prefix of the associated local logger.
        ///  </param>
        /// <returns>The Log messages.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        LogMessage[] getLog(LogMessageType[] messageTypes, string[] traceCategories, int messageMax, out string prefix, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Retrieves log messages recently logged.
        /// </summary>
        /// <param name="messageTypes">The list of message types that the caller wishes to receive. An empty list means no
        ///  filtering (send all message types).
        ///  </param>
        /// <param name="traceCategories">The categories of traces that caller wish to receive. This parameter is ignored if
        ///  messageTypes is not empty and does not include trace. An empty list means no filtering (send all trace
        ///  categories).
        ///  </param>
        /// <param name="messageMax">The maximum number of log messages (of all types) to be returned. A negative value
        ///  requests all messages available.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<LoggerAdmin_GetLogResult> getLogAsync(LogMessageType[] messageTypes, string[] traceCategories, int messageMax, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Ice
{
    public sealed class LogMessageTypeSeqHelper
    {
        public static void write(Ice.OutputStream ostr, LogMessageType[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 3);
                }
            }
        }

        public static LogMessageType[] read(Ice.InputStream istr)
        {
            LogMessageType[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new LogMessageType[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (LogMessageType)istr.readEnum(3);
                }
            }
            return v;
        }
    }

    public sealed class LogMessageSeqHelper
    {
        public static void write(Ice.OutputStream ostr, LogMessage[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static LogMessage[] read(Ice.InputStream istr)
        {
            LogMessage[] v;
            {
                int szx = istr.readAndCheckSeqSize(11);
                v = new LogMessage[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new LogMessage(istr);
                }
            }
            return v;
        }
    }

    public sealed class RemoteLoggerPrxHelper : Ice.ObjectPrxHelperBase, RemoteLoggerPrx
    {
        public void init(string prefix, LogMessage[] logMessages, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_initAsync(prefix, logMessages, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void log(LogMessage message, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_logAsync(message, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task initAsync(string prefix, LogMessage[] logMessages, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_initAsync(prefix, logMessages, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_initAsync(string iceP_prefix, LogMessage[] iceP_logMessages, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_init(iceP_prefix, iceP_logMessages, context, synchronous, completed);
            return completed.Task;
        }

        private const string _init_name = "init";

        private void _iceI_init(string iceP_prefix, LogMessage[] iceP_logMessages, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _init_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_prefix);
                    LogMessageSeqHelper.write(ostr, iceP_logMessages);
                });
        }

        public global::System.Threading.Tasks.Task logAsync(LogMessage message, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_logAsync(message, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_logAsync(LogMessage iceP_message, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_log(iceP_message, context, synchronous, completed);
            return completed.Task;
        }

        private const string _log_name = "log";

        private void _iceI_log(LogMessage iceP_message, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _log_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    LogMessage.ice_write(ostr, iceP_message);
                });
        }

        public static RemoteLoggerPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new RemoteLoggerPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static RemoteLoggerPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new RemoteLoggerPrxHelper(b) : null;

        public static RemoteLoggerPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static RemoteLoggerPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new RemoteLoggerPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static RemoteLoggerPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Ice::RemoteLogger"
        };

        public static string ice_staticId() => "::Ice::RemoteLogger";

        public static void write(Ice.OutputStream ostr, RemoteLoggerPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static RemoteLoggerPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new RemoteLoggerPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new RemoteLoggerPrxHelper(reference);

        private RemoteLoggerPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private RemoteLoggerPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    public sealed class LoggerAdminPrxHelper : Ice.ObjectPrxHelperBase, LoggerAdminPrx
    {
        public void attachRemoteLogger(RemoteLoggerPrx? prx, LogMessageType[] messageTypes, string[] traceCategories, int messageMax, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_attachRemoteLoggerAsync(prx, messageTypes, traceCategories, messageMax, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool detachRemoteLogger(RemoteLoggerPrx? prx, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_detachRemoteLoggerAsync(prx, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public LogMessage[] getLog(LogMessageType[] messageTypes, string[] traceCategories, int messageMax, out string prefix, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_getLogAsync(messageTypes, traceCategories, messageMax, context, null, global::System.Threading.CancellationToken.None, true).Result;
                prefix = result_.prefix;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task attachRemoteLoggerAsync(RemoteLoggerPrx? prx, LogMessageType[] messageTypes, string[] traceCategories, int messageMax, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_attachRemoteLoggerAsync(prx, messageTypes, traceCategories, messageMax, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_attachRemoteLoggerAsync(RemoteLoggerPrx? iceP_prx, LogMessageType[] iceP_messageTypes, string[] iceP_traceCategories, int iceP_messageMax, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_attachRemoteLogger_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_attachRemoteLogger(iceP_prx, iceP_messageTypes, iceP_traceCategories, iceP_messageMax, context, synchronous, completed);
            return completed.Task;
        }

        private const string _attachRemoteLogger_name = "attachRemoteLogger";

        private void _iceI_attachRemoteLogger(RemoteLoggerPrx? iceP_prx, LogMessageType[] iceP_messageTypes, string[] iceP_traceCategories, int iceP_messageMax, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _attachRemoteLogger_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    RemoteLoggerPrxHelper.write(ostr, iceP_prx);
                    LogMessageTypeSeqHelper.write(ostr, iceP_messageTypes);
                    StringSeqHelper.write(ostr, iceP_traceCategories);
                    ostr.writeInt(iceP_messageMax);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(RemoteLoggerAlreadyAttachedException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<bool> detachRemoteLoggerAsync(RemoteLoggerPrx? prx, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_detachRemoteLoggerAsync(prx, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_detachRemoteLoggerAsync(RemoteLoggerPrx? iceP_prx, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_detachRemoteLogger_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_detachRemoteLogger(iceP_prx, context, synchronous, completed);
            return completed.Task;
        }

        private const string _detachRemoteLogger_name = "detachRemoteLogger";

        private void _iceI_detachRemoteLogger(RemoteLoggerPrx? iceP_prx, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _detachRemoteLogger_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    RemoteLoggerPrxHelper.write(ostr, iceP_prx);
                },
                read: (Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<LoggerAdmin_GetLogResult> getLogAsync(LogMessageType[] messageTypes, string[] traceCategories, int messageMax, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getLogAsync(messageTypes, traceCategories, messageMax, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<LoggerAdmin_GetLogResult> _iceI_getLogAsync(LogMessageType[] iceP_messageTypes, string[] iceP_traceCategories, int iceP_messageMax, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getLog_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<LoggerAdmin_GetLogResult>(progress, cancel);
            _iceI_getLog(iceP_messageTypes, iceP_traceCategories, iceP_messageMax, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getLog_name = "getLog";

        private void _iceI_getLog(LogMessageType[] iceP_messageTypes, string[] iceP_traceCategories, int iceP_messageMax, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<LoggerAdmin_GetLogResult>(completed);
            outAsync.invoke(
                _getLog_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    LogMessageTypeSeqHelper.write(ostr, iceP_messageTypes);
                    StringSeqHelper.write(ostr, iceP_traceCategories);
                    ostr.writeInt(iceP_messageMax);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new LoggerAdmin_GetLogResult();
                    ret.prefix = istr.readString();
                    ret.returnValue = LogMessageSeqHelper.read(istr);
                    return ret;
                });
        }

        public static LoggerAdminPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new LoggerAdminPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static LoggerAdminPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new LoggerAdminPrxHelper(b) : null;

        public static LoggerAdminPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LoggerAdminPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new LoggerAdminPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LoggerAdminPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::LoggerAdmin",
            "::Ice::Object"
        };

        public static string ice_staticId() => "::Ice::LoggerAdmin";

        public static void write(Ice.OutputStream ostr, LoggerAdminPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static LoggerAdminPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new LoggerAdminPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new LoggerAdminPrxHelper(reference);

        private LoggerAdminPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private LoggerAdminPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Ice
{
    public abstract class RemoteLoggerDisp_ : Ice.ObjectImpl, RemoteLogger
    {
        public abstract void init(string prefix, LogMessage[] logMessages, Ice.Current current);

        public abstract void log(LogMessage message, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Ice::RemoteLogger";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "init" => RemoteLogger.iceD_initAsync(this, request),
                "log" => RemoteLogger.iceD_logAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    public abstract class LoggerAdminDisp_ : Ice.ObjectImpl, LoggerAdmin
    {
        public abstract void attachRemoteLogger(RemoteLoggerPrx? prx, LogMessageType[] messageTypes, string[] traceCategories, int messageMax, Ice.Current current);

        public abstract bool detachRemoteLogger(RemoteLoggerPrx? prx, Ice.Current current);

        public abstract LogMessage[] getLog(LogMessageType[] messageTypes, string[] traceCategories, int messageMax, out string prefix, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Ice::LoggerAdmin";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "attachRemoteLogger" => LoggerAdmin.iceD_attachRemoteLoggerAsync(this, request),
                "detachRemoteLogger" => LoggerAdmin.iceD_detachRemoteLoggerAsync(this, request),
                "getLog" => LoggerAdmin.iceD_getLogAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Ice
{
    public partial interface RemoteLogger
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_initAsync(
            RemoteLogger obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_prefix;
            LogMessage[] iceP_logMessages;
            iceP_prefix = istr.readString();
            iceP_logMessages = LogMessageSeqHelper.read(istr);
            istr.endEncapsulation();
            obj.init(iceP_prefix, iceP_logMessages, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_logAsync(
            RemoteLogger obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            LogMessage iceP_message;
            iceP_message = new LogMessage(istr);
            istr.endEncapsulation();
            obj.log(iceP_message, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }

    public partial interface LoggerAdmin
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_attachRemoteLoggerAsync(
            LoggerAdmin obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            RemoteLoggerPrx? iceP_prx;
            LogMessageType[] iceP_messageTypes;
            string[] iceP_traceCategories;
            int iceP_messageMax;
            iceP_prx = RemoteLoggerPrxHelper.read(istr);
            iceP_messageTypes = LogMessageTypeSeqHelper.read(istr);
            iceP_traceCategories = StringSeqHelper.read(istr);
            iceP_messageMax = istr.readInt();
            istr.endEncapsulation();
            obj.attachRemoteLogger(iceP_prx, iceP_messageTypes, iceP_traceCategories, iceP_messageMax, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_detachRemoteLoggerAsync(
            LoggerAdmin obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            RemoteLoggerPrx? iceP_prx;
            iceP_prx = RemoteLoggerPrxHelper.read(istr);
            istr.endEncapsulation();
            var ret = obj.detachRemoteLogger(iceP_prx, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeBool(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getLogAsync(
            LoggerAdmin obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            LogMessageType[] iceP_messageTypes;
            string[] iceP_traceCategories;
            int iceP_messageMax;
            iceP_messageTypes = LogMessageTypeSeqHelper.read(istr);
            iceP_traceCategories = StringSeqHelper.read(istr);
            iceP_messageMax = istr.readInt();
            istr.endEncapsulation();
            string iceP_prefix;
            var ret = obj.getLog(iceP_messageTypes, iceP_traceCategories, iceP_messageMax, out iceP_prefix, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeString(iceP_prefix);
            LogMessageSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }
}
