//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `IceStorm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceStorm
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class LinkInfo : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public TopicPrx theTopic;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string name;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int cost;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public LinkInfo()
        {
            this.name = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public LinkInfo(TopicPrx theTopic, string name, int cost)
        {
            this.theTopic = theTopic;
            this.name = name;
            this.cost = cost;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::IceStorm::LinkInfo");
            global::IceInternal.HashUtil.hashAdd(ref h_, theTopic);
            global::IceInternal.HashUtil.hashAdd(ref h_, name);
            global::IceInternal.HashUtil.hashAdd(ref h_, cost);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            LinkInfo o = (LinkInfo)other;
            if(this.theTopic == null)
            {
                if(o.theTopic != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.theTopic.Equals(o.theTopic))
                {
                    return false;
                }
            }
            if(this.name == null)
            {
                if(o.name != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.name.Equals(o.name))
                {
                    return false;
                }
            }
            if(!this.cost.Equals(o.cost))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(LinkInfo lhs, LinkInfo rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(LinkInfo lhs, LinkInfo rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            TopicPrxHelper.write(ostr, this.theTopic);
            ostr.writeString(this.name);
            ostr.writeInt(this.cost);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.theTopic = TopicPrxHelper.read(istr);
            this.name = istr.readString();
            this.cost = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static void ice_write(global::Ice.OutputStream ostr, LinkInfo v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static LinkInfo ice_read(global::Ice.InputStream istr)
        {
            var v = new LinkInfo();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly LinkInfo _nullMarshalValue = new LinkInfo();

        #endregion
    }

    /// <summary>
    /// This exception indicates that an attempt was made to create a link that already exists.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class LinkExists : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string name;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
            this.name = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public LinkExists()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public LinkExists(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(string name)
        {
            this.name = name;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public LinkExists(string name)
        {
            _initDM(name);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public LinkExists(string name, global::System.Exception ex) : base(ex)
        {
            _initDM(name);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::IceStorm::LinkExists";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::LinkExists", -1, true);
            ostr_.writeString(name);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception indicates that an attempt was made to remove a link that does not exist.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class NoSuchLink : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string name;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
            this.name = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public NoSuchLink()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public NoSuchLink(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(string name)
        {
            this.name = name;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public NoSuchLink(string name)
        {
            _initDM(name);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public NoSuchLink(string name, global::System.Exception ex) : base(ex)
        {
            _initDM(name);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::IceStorm::NoSuchLink";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::NoSuchLink", -1, true);
            ostr_.writeString(name);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception indicates that an attempt was made to subscribe a proxy for which a subscription already exists.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class AlreadySubscribed : global::Ice.UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public AlreadySubscribed()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public AlreadySubscribed(global::System.Exception ex) : base(ex)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::IceStorm::AlreadySubscribed";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::AlreadySubscribed", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception indicates that an attempt was made to subscribe a proxy that is null.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InvalidSubscriber : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string reason;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
            this.reason = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public InvalidSubscriber()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public InvalidSubscriber(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(string reason)
        {
            this.reason = reason;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public InvalidSubscriber(string reason)
        {
            _initDM(reason);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public InvalidSubscriber(string reason, global::System.Exception ex) : base(ex)
        {
            _initDM(reason);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::IceStorm::InvalidSubscriber";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::InvalidSubscriber", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception indicates that a subscription failed due to an invalid QoS.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class BadQoS : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string reason;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
            this.reason = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public BadQoS()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public BadQoS(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(string reason)
        {
            this.reason = reason;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public BadQoS(string reason)
        {
            _initDM(reason);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public BadQoS(string reason, global::System.Exception ex) : base(ex)
        {
            _initDM(reason);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::IceStorm::BadQoS";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::BadQoS", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Topic : global::Ice.Object, TopicOperations_
    {
    }

    /// <summary>
    /// This exception indicates that an attempt was made to create a topic that already exists.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class TopicExists : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string name;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
            this.name = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public TopicExists()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public TopicExists(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(string name)
        {
            this.name = name;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public TopicExists(string name)
        {
            _initDM(name);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public TopicExists(string name, global::System.Exception ex) : base(ex)
        {
            _initDM(name);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::IceStorm::TopicExists";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::TopicExists", -1, true);
            ostr_.writeString(name);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    /// <summary>
    /// This exception indicates that an attempt was made to retrieve a topic that does not exist.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class NoSuchTopic : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string name;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
            this.name = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public NoSuchTopic()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public NoSuchTopic(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(string name)
        {
            this.name = name;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public NoSuchTopic(string name)
        {
            _initDM(name);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public NoSuchTopic(string name, global::System.Exception ex) : base(ex)
        {
            _initDM(name);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::IceStorm::NoSuchTopic";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::NoSuchTopic", -1, true);
            ostr_.writeString(name);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface TopicManager : global::Ice.Object, TopicManagerOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Finder : global::Ice.Object, FinderOperations_
    {
    }
}

namespace IceStorm
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Topic_getName(string ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Topic_getPublisher(global::Ice.ObjectPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Topic_getNonReplicatedPublisher(global::Ice.ObjectPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Topic_subscribeAndGetPublisher(global::Ice.ObjectPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Topic_unsubscribe();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Topic_link();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Topic_unlink();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Topic_getLinkInfoSeq(LinkInfo[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Topic_getSubscribers(global::Ice.Identity[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Topic_destroy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TopicManager_create(TopicPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TopicManager_retrieve(TopicPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TopicManager_retrieveAll(global::System.Collections.Generic.Dictionary<string, TopicPrx> ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Finder_getTopicManager(TopicManagerPrx ret);
}

namespace IceStorm
{
    /// <summary>
    /// Publishers publish information on a particular topic.
    /// A topic logically represents a type. A
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface TopicPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Get the name of this topic.
        /// </summary>
        /// <returns>The name of the topic.
        ///  </returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        string getName(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the name of this topic.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<string> getNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the name of this topic.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Topic_getName> begin_getName(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the name of this topic.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getName(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the name of this topic.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the name of this topic.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The name of the topic.
        ///  </returns>
        string end_getName(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Get a proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher calls getPublisher
        ///  and then casts to the topic type. An unchecked cast must be used on this proxy. If a replicated IceStorm
        ///  deployment is used this call may return a replicated proxy.
        /// </summary>
        ///  <returns>A proxy to publish data on this topic.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx getPublisher(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get a proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher calls getPublisher
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> getPublisherAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get a proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher calls getPublisher
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Topic_getPublisher> begin_getPublisher(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get a proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher calls getPublisher
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getPublisher(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get a proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher calls getPublisher
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getPublisher(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get a proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher calls getPublisher
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A proxy to publish data on this topic.</returns>
        global::Ice.ObjectPrx end_getPublisher(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Get a non-replicated proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher
        ///  calls getPublisher and then casts to the topic type. An unchecked cast must be used on this proxy.
        /// </summary>
        ///  <returns>A proxy to publish data on this topic.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx getNonReplicatedPublisher(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get a non-replicated proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> getNonReplicatedPublisherAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get a non-replicated proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Topic_getNonReplicatedPublisher> begin_getNonReplicatedPublisher(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get a non-replicated proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getNonReplicatedPublisher(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get a non-replicated proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getNonReplicatedPublisher(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get a non-replicated proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A proxy to publish data on this topic.</returns>
        global::Ice.ObjectPrx end_getNonReplicatedPublisher(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Subscribe with the given qos to this topic.
        /// A per-subscriber publisher object is returned.
        /// </summary>
        ///  <param name="theQoS">The quality of service parameters for this subscription.
        ///  </param>
        /// <param name="subscriber">The subscriber's proxy.
        ///  </param>
        /// <returns>The per-subscriber publisher object.
        ///  </returns>
        /// <exception name="AlreadySubscribed">Raised if the subscriber object is already subscribed.
        ///  </exception>
        /// <exception name="InvalidSubscriber">Raised if the subscriber object is null.
        ///  </exception>
        /// <exception name="BadQoS">Raised if the requested quality of service is unavailable or invalid.
        ///  </exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Subscribe with the given qos to this topic.
        /// A per-subscriber publisher object is returned.
        /// </summary>
        ///  <param name="theQoS">The quality of service parameters for this subscription.
        ///  </param>
        /// <param name="subscriber">The subscriber's proxy.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> subscribeAndGetPublisherAsync(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Subscribe with the given qos to this topic.
        /// A per-subscriber publisher object is returned.
        /// </summary>
        ///  <param name="theQoS">The quality of service parameters for this subscription.
        ///  </param>
        /// <param name="subscriber">The subscriber's proxy.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Topic_subscribeAndGetPublisher> begin_subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Subscribe with the given qos to this topic.
        /// A per-subscriber publisher object is returned.
        /// </summary>
        ///  <param name="theQoS">The quality of service parameters for this subscription.
        ///  </param>
        /// <param name="subscriber">The subscriber's proxy.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx subscriber, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Subscribe with the given qos to this topic.
        /// A per-subscriber publisher object is returned.
        /// </summary>
        ///  <param name="theQoS">The quality of service parameters for this subscription.
        ///  </param>
        /// <param name="subscriber">The subscriber's proxy.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Subscribe with the given qos to this topic.
        /// A per-subscriber publisher object is returned.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The per-subscriber publisher object.
        ///  </returns>
        global::Ice.ObjectPrx end_subscribeAndGetPublisher(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Unsubscribe the given subscriber.
        /// </summary>
        /// <param name="subscriber">The proxy of an existing subscriber.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void unsubscribe(global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Unsubscribe the given subscriber.
        /// </summary>
        /// <param name="subscriber">The proxy of an existing subscriber.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task unsubscribeAsync(global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Unsubscribe the given subscriber.
        /// </summary>
        /// <param name="subscriber">The proxy of an existing subscriber.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Topic_unsubscribe> begin_unsubscribe(global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Unsubscribe the given subscriber.
        /// </summary>
        /// <param name="subscriber">The proxy of an existing subscriber.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_unsubscribe(global::Ice.ObjectPrx subscriber, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Unsubscribe the given subscriber.
        /// </summary>
        /// <param name="subscriber">The proxy of an existing subscriber.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_unsubscribe(global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Unsubscribe the given subscriber.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_unsubscribe(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Create a link to the given topic.
        /// All events originating on this topic will also be sent to
        ///  linkTo.
        /// </summary>
        ///  <param name="linkTo">The topic to link to.
        ///  </param>
        /// <param name="cost">The cost to the linked topic.
        ///  </param>
        /// <exception name="LinkExists">Raised if a link to the same topic already exists.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void link(TopicPrx linkTo, int cost, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create a link to the given topic.
        /// All events originating on this topic will also be sent to
        /// </summary>
        ///  <param name="linkTo">The topic to link to.
        ///  </param>
        /// <param name="cost">The cost to the linked topic.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task linkAsync(TopicPrx linkTo, int cost, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Create a link to the given topic.
        /// All events originating on this topic will also be sent to
        /// </summary>
        ///  <param name="linkTo">The topic to link to.
        ///  </param>
        /// <param name="cost">The cost to the linked topic.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Topic_link> begin_link(TopicPrx linkTo, int cost, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create a link to the given topic.
        /// All events originating on this topic will also be sent to
        /// </summary>
        ///  <param name="linkTo">The topic to link to.
        ///  </param>
        /// <param name="cost">The cost to the linked topic.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_link(TopicPrx linkTo, int cost, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create a link to the given topic.
        /// All events originating on this topic will also be sent to
        /// </summary>
        ///  <param name="linkTo">The topic to link to.
        ///  </param>
        /// <param name="cost">The cost to the linked topic.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_link(TopicPrx linkTo, int cost, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create a link to the given topic.
        /// All events originating on this topic will also be sent to
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_link(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Destroy the link from this topic to the given topic linkTo.
        /// </summary>
        /// <param name="linkTo">The topic to destroy the link to.
        ///  </param>
        /// <exception name="NoSuchLink">Raised if a link to the topic does not exist.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void unlink(TopicPrx linkTo, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the link from this topic to the given topic linkTo.
        /// </summary>
        /// <param name="linkTo">The topic to destroy the link to.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task unlinkAsync(TopicPrx linkTo, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Destroy the link from this topic to the given topic linkTo.
        /// </summary>
        /// <param name="linkTo">The topic to destroy the link to.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Topic_unlink> begin_unlink(TopicPrx linkTo, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the link from this topic to the given topic linkTo.
        /// </summary>
        /// <param name="linkTo">The topic to destroy the link to.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_unlink(TopicPrx linkTo, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Destroy the link from this topic to the given topic linkTo.
        /// </summary>
        /// <param name="linkTo">The topic to destroy the link to.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_unlink(TopicPrx linkTo, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Destroy the link from this topic to the given topic linkTo.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_unlink(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Retrieve information on the current links.
        /// </summary>
        /// <returns>A sequence of LinkInfo objects.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        LinkInfo[] getLinkInfoSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Retrieve information on the current links.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<LinkInfo[]> getLinkInfoSeqAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Retrieve information on the current links.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Topic_getLinkInfoSeq> begin_getLinkInfoSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Retrieve information on the current links.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getLinkInfoSeq(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Retrieve information on the current links.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getLinkInfoSeq(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Retrieve information on the current links.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A sequence of LinkInfo objects.</returns>
        LinkInfo[] end_getLinkInfoSeq(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Retrieve the list of subscribers for this topic.
        /// </summary>
        /// <returns>The sequence of Ice identities for the subscriber objects.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.Identity[] getSubscribers(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Retrieve the list of subscribers for this topic.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.Identity[]> getSubscribersAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Retrieve the list of subscribers for this topic.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Topic_getSubscribers> begin_getSubscribers(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Retrieve the list of subscribers for this topic.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getSubscribers(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Retrieve the list of subscribers for this topic.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getSubscribers(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Retrieve the list of subscribers for this topic.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The sequence of Ice identities for the subscriber objects.</returns>
        global::Ice.Identity[] end_getSubscribers(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Destroy the topic.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the topic.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Destroy the topic.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Topic_destroy> begin_destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the topic.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_destroy(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Destroy the topic.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_destroy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Destroy the topic.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_destroy(global::Ice.AsyncResult asyncResult);
    }

    /// <summary>
    /// A topic manager manages topics, and subscribers to topics.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface TopicManagerPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Create a new topic.
        /// The topic name must be unique.
        /// </summary>
        ///  <param name="name">The name of the topic.
        ///  </param>
        /// <returns>A proxy to the topic instance.
        ///  </returns>
        /// <exception name="TopicExists">Raised if a topic with the same name already exists.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        TopicPrx create(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create a new topic.
        /// The topic name must be unique.
        /// </summary>
        ///  <param name="name">The name of the topic.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<TopicPrx> createAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Create a new topic.
        /// The topic name must be unique.
        /// </summary>
        ///  <param name="name">The name of the topic.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_TopicManager_create> begin_create(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create a new topic.
        /// The topic name must be unique.
        /// </summary>
        ///  <param name="name">The name of the topic.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_create(string name, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create a new topic.
        /// The topic name must be unique.
        /// </summary>
        ///  <param name="name">The name of the topic.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_create(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create a new topic.
        /// The topic name must be unique.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A proxy to the topic instance.
        ///  </returns>
        TopicPrx end_create(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Retrieve a topic by name.
        /// </summary>
        /// <param name="name">The name of the topic.
        ///  </param>
        /// <returns>A proxy to the topic instance.
        ///  </returns>
        /// <exception name="NoSuchTopic">Raised if the topic does not exist.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        TopicPrx retrieve(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Retrieve a topic by name.
        /// </summary>
        /// <param name="name">The name of the topic.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<TopicPrx> retrieveAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Retrieve a topic by name.
        /// </summary>
        /// <param name="name">The name of the topic.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_TopicManager_retrieve> begin_retrieve(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Retrieve a topic by name.
        /// </summary>
        /// <param name="name">The name of the topic.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_retrieve(string name, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Retrieve a topic by name.
        /// </summary>
        /// <param name="name">The name of the topic.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_retrieve(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Retrieve a topic by name.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A proxy to the topic instance.
        ///  </returns>
        TopicPrx end_retrieve(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Retrieve all topics managed by this topic manager.
        /// </summary>
        /// <returns>A dictionary of string, topic proxy pairs.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::System.Collections.Generic.Dictionary<string, TopicPrx> retrieveAll(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Retrieve all topics managed by this topic manager.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, TopicPrx>> retrieveAllAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Retrieve all topics managed by this topic manager.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_TopicManager_retrieveAll> begin_retrieveAll(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Retrieve all topics managed by this topic manager.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_retrieveAll(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Retrieve all topics managed by this topic manager.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_retrieveAll(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Retrieve all topics managed by this topic manager.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A dictionary of string, topic proxy pairs.</returns>
        global::System.Collections.Generic.Dictionary<string, TopicPrx> end_retrieveAll(global::Ice.AsyncResult asyncResult);
    }

    /// <summary>
    /// This interface is advertised by the IceStorm service through the Ice object with the identity `IceStorm/Finder'.
    /// This allows clients to retrieve the topic manager with just the endpoint information of the IceStorm service.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface FinderPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Get the topic manager proxy.
        /// The proxy might point to several replicas.
        /// </summary>
        ///  <returns>The topic manager proxy.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        TopicManagerPrx getTopicManager(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the topic manager proxy.
        /// The proxy might point to several replicas.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<TopicManagerPrx> getTopicManagerAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the topic manager proxy.
        /// The proxy might point to several replicas.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Finder_getTopicManager> begin_getTopicManager(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the topic manager proxy.
        /// The proxy might point to several replicas.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getTopicManager(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the topic manager proxy.
        /// The proxy might point to several replicas.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getTopicManager(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the topic manager proxy.
        /// The proxy might point to several replicas.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The topic manager proxy.</returns>
        TopicManagerPrx end_getTopicManager(global::Ice.AsyncResult asyncResult);
    }
}

namespace IceStorm
{
    /// <summary>
    /// Publishers publish information on a particular topic.
    /// A topic logically represents a type. A
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface TopicOperations_
    {
        /// <summary>
        /// Get the name of this topic.
        /// </summary>
        /// <returns>The name of the topic.
        ///  </returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        string getName(global::Ice.Current current = null);

        /// <summary>
        /// Get a proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher calls getPublisher
        ///  and then casts to the topic type. An unchecked cast must be used on this proxy. If a replicated IceStorm
        ///  deployment is used this call may return a replicated proxy.
        /// </summary>
        ///  <returns>A proxy to publish data on this topic.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::Ice.ObjectPrx getPublisher(global::Ice.Current current = null);

        /// <summary>
        /// Get a non-replicated proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher
        ///  calls getPublisher and then casts to the topic type. An unchecked cast must be used on this proxy.
        /// </summary>
        ///  <returns>A proxy to publish data on this topic.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::Ice.ObjectPrx getNonReplicatedPublisher(global::Ice.Current current = null);

        /// <summary>
        /// Subscribe with the given qos to this topic.
        /// A per-subscriber publisher object is returned.
        /// </summary>
        ///  <param name="theQoS">The quality of service parameters for this subscription.
        ///  </param>
        /// <param name="subscriber">The subscriber's proxy.
        ///  </param>
        /// <returns>The per-subscriber publisher object.
        ///  </returns>
        /// <exception name="AlreadySubscribed">Raised if the subscriber object is already subscribed.
        ///  </exception>
        /// <exception name="InvalidSubscriber">Raised if the subscriber object is null.
        ///  </exception>
        /// <exception name="BadQoS">Raised if the requested quality of service is unavailable or invalid.
        ///  </exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::Ice.ObjectPrx subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx subscriber, global::Ice.Current current = null);

        /// <summary>
        /// Unsubscribe the given subscriber.
        /// </summary>
        /// <param name="subscriber">The proxy of an existing subscriber.
        ///  </param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void unsubscribe(global::Ice.ObjectPrx subscriber, global::Ice.Current current = null);

        /// <summary>
        /// Create a link to the given topic.
        /// All events originating on this topic will also be sent to
        ///  linkTo.
        /// </summary>
        ///  <param name="linkTo">The topic to link to.
        ///  </param>
        /// <param name="cost">The cost to the linked topic.
        ///  </param>
        /// <exception name="LinkExists">Raised if a link to the same topic already exists.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void link(TopicPrx linkTo, int cost, global::Ice.Current current = null);

        /// <summary>
        /// Destroy the link from this topic to the given topic linkTo.
        /// </summary>
        /// <param name="linkTo">The topic to destroy the link to.
        ///  </param>
        /// <exception name="NoSuchLink">Raised if a link to the topic does not exist.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void unlink(TopicPrx linkTo, global::Ice.Current current = null);

        /// <summary>
        /// Retrieve information on the current links.
        /// </summary>
        /// <returns>A sequence of LinkInfo objects.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        LinkInfo[] getLinkInfoSeq(global::Ice.Current current = null);

        /// <summary>
        /// Retrieve the list of subscribers for this topic.
        /// </summary>
        /// <returns>The sequence of Ice identities for the subscriber objects.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::Ice.Identity[] getSubscribers(global::Ice.Current current = null);

        /// <summary>
        /// Destroy the topic.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void destroy(global::Ice.Current current = null);
    }

    /// <summary>
    /// A topic manager manages topics, and subscribers to topics.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface TopicManagerOperations_
    {
        /// <summary>
        /// Create a new topic.
        /// The topic name must be unique.
        /// </summary>
        ///  <param name="name">The name of the topic.
        ///  </param>
        /// <returns>A proxy to the topic instance.
        ///  </returns>
        /// <exception name="TopicExists">Raised if a topic with the same name already exists.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        TopicPrx create(string name, global::Ice.Current current = null);

        /// <summary>
        /// Retrieve a topic by name.
        /// </summary>
        /// <param name="name">The name of the topic.
        ///  </param>
        /// <returns>A proxy to the topic instance.
        ///  </returns>
        /// <exception name="NoSuchTopic">Raised if the topic does not exist.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        TopicPrx retrieve(string name, global::Ice.Current current = null);

        /// <summary>
        /// Retrieve all topics managed by this topic manager.
        /// </summary>
        /// <returns>A dictionary of string, topic proxy pairs.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::System.Collections.Generic.Dictionary<string, TopicPrx> retrieveAll(global::Ice.Current current = null);
    }

    /// <summary>
    /// This interface is advertised by the IceStorm service through the Ice object with the identity `IceStorm/Finder'.
    /// This allows clients to retrieve the topic manager with just the endpoint information of the IceStorm service.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface FinderOperations_
    {
        /// <summary>
        /// Get the topic manager proxy.
        /// The proxy might point to several replicas.
        /// </summary>
        ///  <returns>The topic manager proxy.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        TopicManagerPrx getTopicManager(global::Ice.Current current = null);
    }
}

namespace IceStorm
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class LinkInfoSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, LinkInfo[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new LinkInfo() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static LinkInfo[] read(global::Ice.InputStream istr)
        {
            LinkInfo[] v;
            {
                int szx = istr.readAndCheckSeqSize(7);
                v = new LinkInfo[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new LinkInfo();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class QoSHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, string> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, string> r = new global::System.Collections.Generic.Dictionary<string, string>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class TopicPrxHelper : global::Ice.ObjectPrxHelperBase, TopicPrx
    {
        public TopicPrxHelper()
        {
        }

        #region Synchronous operations

        public string getName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.ObjectPrx getPublisher(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getPublisherAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.ObjectPrx getNonReplicatedPublisher(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getNonReplicatedPublisherAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.ObjectPrx subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_subscribeAndGetPublisherAsync(theQoS, subscriber, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void unsubscribe(global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_unsubscribeAsync(subscriber, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void link(TopicPrx linkTo, int cost, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_linkAsync(linkTo, cost, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void unlink(TopicPrx linkTo, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_unlinkAsync(linkTo, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public LinkInfo[] getLinkInfoSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getLinkInfoSeqAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.Identity[] getSubscribers(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getSubscribersAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_destroyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> getNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getName_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getName_name = "getName";

        private void _iceI_getName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getName_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> getPublisherAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getPublisherAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_getPublisherAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getPublisher_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_getPublisher(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getPublisher_name = "getPublisher";

        private void _iceI_getPublisher(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _getPublisher_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> getNonReplicatedPublisherAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getNonReplicatedPublisherAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_getNonReplicatedPublisherAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getNonReplicatedPublisher_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_getNonReplicatedPublisher(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getNonReplicatedPublisher_name = "getNonReplicatedPublisher";

        private void _iceI_getNonReplicatedPublisher(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _getNonReplicatedPublisher_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> subscribeAndGetPublisherAsync(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_subscribeAndGetPublisherAsync(theQoS, subscriber, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_subscribeAndGetPublisherAsync(global::System.Collections.Generic.Dictionary<string, string> iceP_theQoS, global::Ice.ObjectPrx iceP_subscriber, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_subscribeAndGetPublisher_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_subscribeAndGetPublisher(iceP_theQoS, iceP_subscriber, context, synchronous, completed);
            return completed.Task;
        }

        private const string _subscribeAndGetPublisher_name = "subscribeAndGetPublisher";

        private void _iceI_subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> iceP_theQoS, global::Ice.ObjectPrx iceP_subscriber, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _subscribeAndGetPublisher_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    QoSHelper.write(ostr, iceP_theQoS);
                    ostr.writeProxy(iceP_subscriber);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AlreadySubscribed)
                    {
                        throw;
                    }
                    catch(BadQoS)
                    {
                        throw;
                    }
                    catch(InvalidSubscriber)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task unsubscribeAsync(global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_unsubscribeAsync(subscriber, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unsubscribeAsync(global::Ice.ObjectPrx iceP_subscriber, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unsubscribe(iceP_subscriber, context, synchronous, completed);
            return completed.Task;
        }

        private const string _unsubscribe_name = "unsubscribe";

        private void _iceI_unsubscribe(global::Ice.ObjectPrx iceP_subscriber, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unsubscribe_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeProxy(iceP_subscriber);
                });
        }

        public global::System.Threading.Tasks.Task linkAsync(TopicPrx linkTo, int cost, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_linkAsync(linkTo, cost, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_linkAsync(TopicPrx iceP_linkTo, int iceP_cost, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_link_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_link(iceP_linkTo, iceP_cost, context, synchronous, completed);
            return completed.Task;
        }

        private const string _link_name = "link";

        private void _iceI_link(TopicPrx iceP_linkTo, int iceP_cost, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _link_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    TopicPrxHelper.write(ostr, iceP_linkTo);
                    ostr.writeInt(iceP_cost);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(LinkExists)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task unlinkAsync(TopicPrx linkTo, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_unlinkAsync(linkTo, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unlinkAsync(TopicPrx iceP_linkTo, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_unlink_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unlink(iceP_linkTo, context, synchronous, completed);
            return completed.Task;
        }

        private const string _unlink_name = "unlink";

        private void _iceI_unlink(TopicPrx iceP_linkTo, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unlink_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    TopicPrxHelper.write(ostr, iceP_linkTo);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(NoSuchLink)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<LinkInfo[]> getLinkInfoSeqAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getLinkInfoSeqAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<LinkInfo[]> _iceI_getLinkInfoSeqAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getLinkInfoSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<LinkInfo[]>(progress, cancel);
            _iceI_getLinkInfoSeq(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getLinkInfoSeq_name = "getLinkInfoSeq";

        private void _iceI_getLinkInfoSeq(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<LinkInfo[]>(completed);
            outAsync.invoke(
                _getLinkInfoSeq_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    LinkInfo[] ret;
                    ret = LinkInfoSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.Identity[]> getSubscribersAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getSubscribersAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.Identity[]> _iceI_getSubscribersAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getSubscribers_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.Identity[]>(progress, cancel);
            _iceI_getSubscribers(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getSubscribers_name = "getSubscribers";

        private void _iceI_getSubscribers(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.Identity[]>(completed);
            outAsync.invoke(
                _getSubscribers_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.Identity[] ret;
                    ret = global::Ice.IdentitySeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_destroyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroyAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroy_name = "destroy";

        private void _iceI_destroy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Topic_getName> begin_getName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getName(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getName(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getName(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getName(context, callback, cookie, false);
        }

        public string end_getName(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getName_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Topic_getName> begin_getName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getName_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Topic_getName, string>(
                (Callback_Topic_getName cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getName_name, cookie, completedCallback);
            _iceI_getName(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Topic_getPublisher> begin_getPublisher(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getPublisher(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getPublisher(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getPublisher(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getPublisher(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getPublisher(context, callback, cookie, false);
        }

        public global::Ice.ObjectPrx end_getPublisher(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getPublisher_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Topic_getPublisher> begin_getPublisher(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getPublisher_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Topic_getPublisher, global::Ice.ObjectPrx>(
                (Callback_Topic_getPublisher cb, global::Ice.ObjectPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getPublisher_name, cookie, completedCallback);
            _iceI_getPublisher(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Topic_getNonReplicatedPublisher> begin_getNonReplicatedPublisher(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getNonReplicatedPublisher(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getNonReplicatedPublisher(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getNonReplicatedPublisher(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getNonReplicatedPublisher(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getNonReplicatedPublisher(context, callback, cookie, false);
        }

        public global::Ice.ObjectPrx end_getNonReplicatedPublisher(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getNonReplicatedPublisher_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Topic_getNonReplicatedPublisher> begin_getNonReplicatedPublisher(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getNonReplicatedPublisher_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Topic_getNonReplicatedPublisher, global::Ice.ObjectPrx>(
                (Callback_Topic_getNonReplicatedPublisher cb, global::Ice.ObjectPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getNonReplicatedPublisher_name, cookie, completedCallback);
            _iceI_getNonReplicatedPublisher(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Topic_subscribeAndGetPublisher> begin_subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_subscribeAndGetPublisher(theQoS, subscriber, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx subscriber, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_subscribeAndGetPublisher(theQoS, subscriber, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_subscribeAndGetPublisher(theQoS, subscriber, context, callback, cookie, false);
        }

        public global::Ice.ObjectPrx end_subscribeAndGetPublisher(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _subscribeAndGetPublisher_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Topic_subscribeAndGetPublisher> begin_subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> iceP_theQoS, global::Ice.ObjectPrx iceP_subscriber, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_subscribeAndGetPublisher_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Topic_subscribeAndGetPublisher, global::Ice.ObjectPrx>(
                (Callback_Topic_subscribeAndGetPublisher cb, global::Ice.ObjectPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _subscribeAndGetPublisher_name, cookie, completedCallback);
            _iceI_subscribeAndGetPublisher(iceP_theQoS, iceP_subscriber, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Topic_unsubscribe> begin_unsubscribe(global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_unsubscribe(subscriber, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_unsubscribe(global::Ice.ObjectPrx subscriber, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_unsubscribe(subscriber, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_unsubscribe(global::Ice.ObjectPrx subscriber, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_unsubscribe(subscriber, context, callback, cookie, false);
        }

        public void end_unsubscribe(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _unsubscribe_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Topic_unsubscribe> begin_unsubscribe(global::Ice.ObjectPrx iceP_subscriber, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Topic_unsubscribe, object>(
                (Callback_Topic_unsubscribe cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _unsubscribe_name, cookie, completedCallback);
            _iceI_unsubscribe(iceP_subscriber, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Topic_link> begin_link(TopicPrx linkTo, int cost, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_link(linkTo, cost, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_link(TopicPrx linkTo, int cost, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_link(linkTo, cost, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_link(TopicPrx linkTo, int cost, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_link(linkTo, cost, context, callback, cookie, false);
        }

        public void end_link(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _link_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Topic_link> begin_link(TopicPrx iceP_linkTo, int iceP_cost, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_link_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Topic_link, object>(
                (Callback_Topic_link cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _link_name, cookie, completedCallback);
            _iceI_link(iceP_linkTo, iceP_cost, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Topic_unlink> begin_unlink(TopicPrx linkTo, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_unlink(linkTo, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_unlink(TopicPrx linkTo, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_unlink(linkTo, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_unlink(TopicPrx linkTo, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_unlink(linkTo, context, callback, cookie, false);
        }

        public void end_unlink(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _unlink_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Topic_unlink> begin_unlink(TopicPrx iceP_linkTo, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_unlink_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Topic_unlink, object>(
                (Callback_Topic_unlink cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _unlink_name, cookie, completedCallback);
            _iceI_unlink(iceP_linkTo, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Topic_getLinkInfoSeq> begin_getLinkInfoSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getLinkInfoSeq(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getLinkInfoSeq(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getLinkInfoSeq(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getLinkInfoSeq(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getLinkInfoSeq(context, callback, cookie, false);
        }

        public LinkInfo[] end_getLinkInfoSeq(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLinkInfoSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<LinkInfo[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Topic_getLinkInfoSeq> begin_getLinkInfoSeq(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getLinkInfoSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Topic_getLinkInfoSeq, LinkInfo[]>(
                (Callback_Topic_getLinkInfoSeq cb, LinkInfo[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getLinkInfoSeq_name, cookie, completedCallback);
            _iceI_getLinkInfoSeq(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Topic_getSubscribers> begin_getSubscribers(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getSubscribers(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getSubscribers(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSubscribers(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getSubscribers(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSubscribers(context, callback, cookie, false);
        }

        public global::Ice.Identity[] end_getSubscribers(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getSubscribers_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.Identity[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Topic_getSubscribers> begin_getSubscribers(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getSubscribers_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Topic_getSubscribers, global::Ice.Identity[]>(
                (Callback_Topic_getSubscribers cb, global::Ice.Identity[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getSubscribers_name, cookie, completedCallback);
            _iceI_getSubscribers(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Topic_destroy> begin_destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_destroy(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_destroy(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_destroy(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_destroy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_destroy(context, callback, cookie, false);
        }

        public void end_destroy(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _destroy_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Topic_destroy> begin_destroy(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Topic_destroy, object>(
                (Callback_Topic_destroy cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _destroy_name, cookie, completedCallback);
            _iceI_destroy(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static TopicPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TopicPrx r = b as TopicPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                TopicPrxHelper h = new TopicPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TopicPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            TopicPrx r = b as TopicPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                TopicPrxHelper h = new TopicPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TopicPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    TopicPrxHelper h = new TopicPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TopicPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    TopicPrxHelper h = new TopicPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TopicPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TopicPrx r = b as TopicPrx;
            if(r == null)
            {
                TopicPrxHelper h = new TopicPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TopicPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            TopicPrxHelper h = new TopicPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStorm::Topic"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TopicPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TopicPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TopicPrxHelper result = new TopicPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class TopicDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, TopicPrx> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, TopicPrx> e in v)
                {
                    ostr.writeString(e.Key);
                    TopicPrxHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, TopicPrx> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, TopicPrx> r = new global::System.Collections.Generic.Dictionary<string, TopicPrx>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                TopicPrx v;
                v = TopicPrxHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class TopicManagerPrxHelper : global::Ice.ObjectPrxHelperBase, TopicManagerPrx
    {
        public TopicManagerPrxHelper()
        {
        }

        #region Synchronous operations

        public TopicPrx create(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_createAsync(name, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public TopicPrx retrieve(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_retrieveAsync(name, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, TopicPrx> retrieveAll(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_retrieveAllAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<TopicPrx> createAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_createAsync(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TopicPrx> _iceI_createAsync(string iceP_name, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_create_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TopicPrx>(progress, cancel);
            _iceI_create(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _create_name = "create";

        private void _iceI_create(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TopicPrx>(completed);
            outAsync.invoke(
                _create_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(TopicExists)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TopicPrx ret;
                    ret = TopicPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TopicPrx> retrieveAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_retrieveAsync(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TopicPrx> _iceI_retrieveAsync(string iceP_name, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_retrieve_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TopicPrx>(progress, cancel);
            _iceI_retrieve(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _retrieve_name = "retrieve";

        private void _iceI_retrieve(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TopicPrx>(completed);
            outAsync.invoke(
                _retrieve_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(NoSuchTopic)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TopicPrx ret;
                    ret = TopicPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, TopicPrx>> retrieveAllAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_retrieveAllAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, TopicPrx>> _iceI_retrieveAllAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_retrieveAll_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, TopicPrx>>(progress, cancel);
            _iceI_retrieveAll(context, synchronous, completed);
            return completed.Task;
        }

        private const string _retrieveAll_name = "retrieveAll";

        private void _iceI_retrieveAll(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, TopicPrx>>(completed);
            outAsync.invoke(
                _retrieveAll_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, TopicPrx> ret;
                    ret = TopicDictHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_TopicManager_create> begin_create(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_create(name, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_create(string name, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_create(name, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_create(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_create(name, context, callback, cookie, false);
        }

        public TopicPrx end_create(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _create_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TopicPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TopicManager_create> begin_create(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_create_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TopicManager_create, TopicPrx>(
                (Callback_TopicManager_create cb, TopicPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _create_name, cookie, completedCallback);
            _iceI_create(iceP_name, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TopicManager_retrieve> begin_retrieve(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_retrieve(name, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_retrieve(string name, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_retrieve(name, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_retrieve(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_retrieve(name, context, callback, cookie, false);
        }

        public TopicPrx end_retrieve(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _retrieve_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TopicPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TopicManager_retrieve> begin_retrieve(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_retrieve_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TopicManager_retrieve, TopicPrx>(
                (Callback_TopicManager_retrieve cb, TopicPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _retrieve_name, cookie, completedCallback);
            _iceI_retrieve(iceP_name, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TopicManager_retrieveAll> begin_retrieveAll(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_retrieveAll(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_retrieveAll(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_retrieveAll(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_retrieveAll(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_retrieveAll(context, callback, cookie, false);
        }

        public global::System.Collections.Generic.Dictionary<string, TopicPrx> end_retrieveAll(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _retrieveAll_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::System.Collections.Generic.Dictionary<string, TopicPrx>>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TopicManager_retrieveAll> begin_retrieveAll(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_retrieveAll_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TopicManager_retrieveAll, global::System.Collections.Generic.Dictionary<string, TopicPrx>>(
                (Callback_TopicManager_retrieveAll cb, global::System.Collections.Generic.Dictionary<string, TopicPrx> ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _retrieveAll_name, cookie, completedCallback);
            _iceI_retrieveAll(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static TopicManagerPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TopicManagerPrx r = b as TopicManagerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                TopicManagerPrxHelper h = new TopicManagerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TopicManagerPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            TopicManagerPrx r = b as TopicManagerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                TopicManagerPrxHelper h = new TopicManagerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TopicManagerPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    TopicManagerPrxHelper h = new TopicManagerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TopicManagerPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    TopicManagerPrxHelper h = new TopicManagerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TopicManagerPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TopicManagerPrx r = b as TopicManagerPrx;
            if(r == null)
            {
                TopicManagerPrxHelper h = new TopicManagerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TopicManagerPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            TopicManagerPrxHelper h = new TopicManagerPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStorm::TopicManager"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TopicManagerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TopicManagerPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TopicManagerPrxHelper result = new TopicManagerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class FinderPrxHelper : global::Ice.ObjectPrxHelperBase, FinderPrx
    {
        public FinderPrxHelper()
        {
        }

        #region Synchronous operations

        public TopicManagerPrx getTopicManager(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getTopicManagerAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<TopicManagerPrx> getTopicManagerAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getTopicManagerAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TopicManagerPrx> _iceI_getTopicManagerAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTopicManager_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TopicManagerPrx>(progress, cancel);
            _iceI_getTopicManager(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTopicManager_name = "getTopicManager";

        private void _iceI_getTopicManager(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TopicManagerPrx>(completed);
            outAsync.invoke(
                _getTopicManager_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    TopicManagerPrx ret;
                    ret = TopicManagerPrxHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Finder_getTopicManager> begin_getTopicManager(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getTopicManager(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getTopicManager(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTopicManager(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getTopicManager(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTopicManager(context, callback, cookie, false);
        }

        public TopicManagerPrx end_getTopicManager(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getTopicManager_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TopicManagerPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Finder_getTopicManager> begin_getTopicManager(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getTopicManager_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Finder_getTopicManager, TopicManagerPrx>(
                (Callback_Finder_getTopicManager cb, TopicManagerPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getTopicManager_name, cookie, completedCallback);
            _iceI_getTopicManager(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static FinderPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FinderPrx r = b as FinderPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                FinderPrxHelper h = new FinderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FinderPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            FinderPrx r = b as FinderPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                FinderPrxHelper h = new FinderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FinderPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    FinderPrxHelper h = new FinderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FinderPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    FinderPrxHelper h = new FinderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FinderPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FinderPrx r = b as FinderPrx;
            if(r == null)
            {
                FinderPrxHelper h = new FinderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FinderPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            FinderPrxHelper h = new FinderPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStorm::Finder"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, FinderPrx v)
        {
            ostr.writeProxy(v);
        }

        public static FinderPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                FinderPrxHelper result = new FinderPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace IceStorm
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class TopicDisp_ : global::Ice.ObjectImpl, Topic
    {
        #region Slice operations

        public abstract string getName(global::Ice.Current current = null);

        public abstract global::Ice.ObjectPrx getPublisher(global::Ice.Current current = null);

        public abstract global::Ice.ObjectPrx getNonReplicatedPublisher(global::Ice.Current current = null);

        public abstract global::Ice.ObjectPrx subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx subscriber, global::Ice.Current current = null);

        public abstract void unsubscribe(global::Ice.ObjectPrx subscriber, global::Ice.Current current = null);

        public abstract void link(TopicPrx linkTo, int cost, global::Ice.Current current = null);

        public abstract void unlink(TopicPrx linkTo, global::Ice.Current current = null);

        public abstract LinkInfo[] getLinkInfoSeq(global::Ice.Current current = null);

        public abstract global::Ice.Identity[] getSubscribers(global::Ice.Current current = null);

        public abstract void destroy(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStorm::Topic"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getName(Topic obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getName(current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getPublisher(Topic obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getPublisher(current);
            var ostr = inS.startWriteParams();
            ostr.writeProxy(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getNonReplicatedPublisher(Topic obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getNonReplicatedPublisher(current);
            var ostr = inS.startWriteParams();
            ostr.writeProxy(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_subscribeAndGetPublisher(Topic obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<string, string> iceP_theQoS;
            global::Ice.ObjectPrx iceP_subscriber;
            iceP_theQoS = QoSHelper.read(istr);
            iceP_subscriber = istr.readProxy();
            inS.endReadParams();
            var ret = obj.subscribeAndGetPublisher(iceP_theQoS, iceP_subscriber, current);
            var ostr = inS.startWriteParams();
            ostr.writeProxy(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_unsubscribe(Topic obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            global::Ice.ObjectPrx iceP_subscriber;
            iceP_subscriber = istr.readProxy();
            inS.endReadParams();
            obj.unsubscribe(iceP_subscriber, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_link(Topic obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            TopicPrx iceP_linkTo;
            int iceP_cost;
            iceP_linkTo = TopicPrxHelper.read(istr);
            iceP_cost = istr.readInt();
            inS.endReadParams();
            obj.link(iceP_linkTo, iceP_cost, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_unlink(Topic obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            TopicPrx iceP_linkTo;
            iceP_linkTo = TopicPrxHelper.read(istr);
            inS.endReadParams();
            obj.unlink(iceP_linkTo, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getLinkInfoSeq(Topic obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getLinkInfoSeq(current);
            var ostr = inS.startWriteParams();
            LinkInfoSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getSubscribers(Topic obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getSubscribers(current);
            var ostr = inS.startWriteParams();
            global::Ice.IdentitySeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_destroy(Topic obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.destroy(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "destroy",
            "getLinkInfoSeq",
            "getName",
            "getNonReplicatedPublisher",
            "getPublisher",
            "getSubscribers",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "link",
            "subscribeAndGetPublisher",
            "unlink",
            "unsubscribe"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_destroy(this, inS, current);
                }
                case 1:
                {
                    return iceD_getLinkInfoSeq(this, inS, current);
                }
                case 2:
                {
                    return iceD_getName(this, inS, current);
                }
                case 3:
                {
                    return iceD_getNonReplicatedPublisher(this, inS, current);
                }
                case 4:
                {
                    return iceD_getPublisher(this, inS, current);
                }
                case 5:
                {
                    return iceD_getSubscribers(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 10:
                {
                    return iceD_link(this, inS, current);
                }
                case 11:
                {
                    return iceD_subscribeAndGetPublisher(this, inS, current);
                }
                case 12:
                {
                    return iceD_unlink(this, inS, current);
                }
                case 13:
                {
                    return iceD_unsubscribe(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class TopicManagerDisp_ : global::Ice.ObjectImpl, TopicManager
    {
        #region Slice operations

        public abstract TopicPrx create(string name, global::Ice.Current current = null);

        public abstract TopicPrx retrieve(string name, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, TopicPrx> retrieveAll(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStorm::TopicManager"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_create(TopicManager obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            iceP_name = istr.readString();
            inS.endReadParams();
            var ret = obj.create(iceP_name, current);
            var ostr = inS.startWriteParams();
            TopicPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_retrieve(TopicManager obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            iceP_name = istr.readString();
            inS.endReadParams();
            var ret = obj.retrieve(iceP_name, current);
            var ostr = inS.startWriteParams();
            TopicPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_retrieveAll(TopicManager obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.retrieveAll(current);
            var ostr = inS.startWriteParams();
            TopicDictHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "create",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "retrieve",
            "retrieveAll"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_create(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 5:
                {
                    return iceD_retrieve(this, inS, current);
                }
                case 6:
                {
                    return iceD_retrieveAll(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class FinderDisp_ : global::Ice.ObjectImpl, Finder
    {
        #region Slice operations

        public abstract TopicManagerPrx getTopicManager(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStorm::Finder"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getTopicManager(Finder obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getTopicManager(current);
            var ostr = inS.startWriteParams();
            TopicManagerPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getTopicManager",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getTopicManager(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
