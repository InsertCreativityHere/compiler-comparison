//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceStorm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("IceStorm.ice")]

#pragma warning disable 1591

namespace IceStorm
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class LinkInfo : global::System.IEquatable<LinkInfo>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public TopicPrx? theTopic;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string name = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int cost;

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public LinkInfo()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public LinkInfo(TopicPrx? theTopic, string name, int cost)
        {
            this.theTopic = theTopic;
            global::System.ArgumentNullException.ThrowIfNull(name);
            this.name = name;
            this.cost = cost;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public LinkInfo(Ice.InputStream istr)
        {
            this.theTopic = TopicPrxHelper.read(istr);
            this.name = istr.readString();
            this.cost = istr.readInt();
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public LinkInfo Clone() => (LinkInfo)MemberwiseClone();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            var hash = new global::System.HashCode();
            hash.Add(this.theTopic);
            hash.Add(this.name);
            hash.Add(this.cost);
            return hash.ToHashCode();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object? other) => Equals(other as LinkInfo);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(LinkInfo? other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return other is not null && 
                (Ice.ObjectPrxHelperBase?)this.theTopic == (Ice.ObjectPrxHelperBase?)other.theTopic && 
                this.name == other.name && 
                this.cost == other.cost;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator ==(LinkInfo? lhs, LinkInfo? rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator !=(LinkInfo? lhs, LinkInfo? rhs) => !(lhs == rhs);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            TopicPrxHelper.write(ostr, this.theTopic);
            ostr.writeString(this.name);
            ostr.writeInt(this.cost);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(Ice.OutputStream ostr, LinkInfo v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static LinkInfo ice_read(Ice.InputStream istr) => new(istr);
    }

    /// <summary>
    /// This exception indicates that an attempt was made to create a link that already exists.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::IceStorm::LinkExists")]
    public partial class LinkExists : Ice.UserException
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string name = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public LinkExists(string name, global::System.Exception? innerException = null) : base(innerException)
        {
            global::System.ArgumentNullException.ThrowIfNull(name);
            this.name = name;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public LinkExists(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public LinkExists()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceStorm::LinkExists";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::LinkExists", -1, true);
            ostr_.writeString(name);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception indicates that an attempt was made to remove a link that does not exist.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::IceStorm::NoSuchLink")]
    public partial class NoSuchLink : Ice.UserException
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string name = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public NoSuchLink(string name, global::System.Exception? innerException = null) : base(innerException)
        {
            global::System.ArgumentNullException.ThrowIfNull(name);
            this.name = name;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public NoSuchLink(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public NoSuchLink()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceStorm::NoSuchLink";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::NoSuchLink", -1, true);
            ostr_.writeString(name);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception indicates that an attempt was made to subscribe a proxy for which a subscription already exists.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::IceStorm::AlreadySubscribed")]
    public partial class AlreadySubscribed : Ice.UserException
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AlreadySubscribed(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AlreadySubscribed()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceStorm::AlreadySubscribed";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::AlreadySubscribed", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception indicates that an attempt was made to subscribe a proxy that is null.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::IceStorm::InvalidSubscriber")]
    public partial class InvalidSubscriber : Ice.UserException
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string reason = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InvalidSubscriber(string reason, global::System.Exception? innerException = null) : base(innerException)
        {
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InvalidSubscriber(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public InvalidSubscriber()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceStorm::InvalidSubscriber";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::InvalidSubscriber", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception indicates that a subscription failed due to an invalid QoS.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::IceStorm::BadQoS")]
    public partial class BadQoS : Ice.UserException
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string reason = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BadQoS(string reason, global::System.Exception? innerException = null) : base(innerException)
        {
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BadQoS(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BadQoS()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceStorm::BadQoS";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::BadQoS", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::IceStorm::Topic")]
    public partial interface Topic : Ice.Object
    {
        /// <summary>
        /// Get the name of this topic.
        /// </summary>
        /// <returns>The name of the topic.
        ///  </returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string getName(Ice.Current current);

        /// <summary>
        /// Get a proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher calls getPublisher
        ///  and then creates a proxy with the publisher type from this proxy. If a replicated IceStorm
        ///  deployment is used this call may return a replicated proxy. The returned proxy is never null.
        /// </summary>
        ///  <returns>A proxy to publish data on this topic.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Ice.ObjectPrx? getPublisher(Ice.Current current);

        /// <summary>
        /// Get a non-replicated proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher
        ///  calls getPublisher and then creates a proxy with the publisher type from this proxy. The returned proxy is
        ///  never null.
        /// </summary>
        ///  <returns>A proxy to publish data on this topic.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Ice.ObjectPrx? getNonReplicatedPublisher(Ice.Current current);

        /// <summary>
        /// Subscribe with the given qos to this topic.
        /// A per-subscriber publisher object is returned.
        /// </summary>
        ///  <param name="theQoS">The quality of service parameters for this subscription.
        ///  </param>
        /// <param name="subscriber">The subscriber's proxy. This proxy is never null.
        ///  </param>
        /// <returns>The per-subscriber publisher object. The returned object is never null.
        ///  </returns>
        /// <exception name="AlreadySubscribed">Raised if the subscriber object is already subscribed.
        ///  </exception>
        /// <exception name="InvalidSubscriber">Raised if the subscriber object is null.
        ///  </exception>
        /// <exception name="BadQoS">Raised if the requested quality of service is unavailable or invalid.
        ///  </exception>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Ice.ObjectPrx? subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx? subscriber, Ice.Current current);

        /// <summary>
        /// Unsubscribe the given subscriber.
        /// </summary>
        /// <param name="subscriber">The proxy of an existing subscriber. This proxy is never null.
        ///  </param>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void unsubscribe(global::Ice.ObjectPrx? subscriber, Ice.Current current);

        /// <summary>
        /// Create a link to the given topic.
        /// All events originating on this topic will also be sent to
        ///  linkTo.
        /// </summary>
        ///  <param name="linkTo">The topic to link to. This proxy is never null.
        ///  </param>
        /// <param name="cost">The cost to the linked topic.
        ///  </param>
        /// <exception name="LinkExists">Raised if a link to the same topic already exists.</exception>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void link(TopicPrx? linkTo, int cost, Ice.Current current);

        /// <summary>
        /// Destroy the link from this topic to the given topic linkTo.
        /// </summary>
        /// <param name="linkTo">The topic to destroy the link to. This proxy is never null.
        ///  </param>
        /// <exception name="NoSuchLink">Raised if a link to the topic does not exist.</exception>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void unlink(TopicPrx? linkTo, Ice.Current current);

        /// <summary>
        /// Retrieve information on the current links.
        /// </summary>
        /// <returns>A sequence of LinkInfo objects.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        LinkInfo[] getLinkInfoSeq(Ice.Current current);

        /// <summary>
        /// Retrieve the list of subscribers for this topic.
        /// </summary>
        /// <returns>The sequence of Ice identities for the subscriber objects.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Ice.Identity[] getSubscribers(Ice.Current current);

        /// <summary>
        /// Destroy the topic.
        /// </summary>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void destroy(Ice.Current current);
    }

    /// <summary>
    /// This exception indicates that an attempt was made to create a topic that already exists.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::IceStorm::TopicExists")]
    public partial class TopicExists : Ice.UserException
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string name = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public TopicExists(string name, global::System.Exception? innerException = null) : base(innerException)
        {
            global::System.ArgumentNullException.ThrowIfNull(name);
            this.name = name;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public TopicExists(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public TopicExists()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceStorm::TopicExists";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::TopicExists", -1, true);
            ostr_.writeString(name);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception indicates that an attempt was made to retrieve a topic that does not exist.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::IceStorm::NoSuchTopic")]
    public partial class NoSuchTopic : Ice.UserException
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string name = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public NoSuchTopic(string name, global::System.Exception? innerException = null) : base(innerException)
        {
            global::System.ArgumentNullException.ThrowIfNull(name);
            this.name = name;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public NoSuchTopic(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public NoSuchTopic()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::IceStorm::NoSuchTopic";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceStorm::NoSuchTopic", -1, true);
            ostr_.writeString(name);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            istr_.endSlice();
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::IceStorm::TopicManager")]
    public partial interface TopicManager : Ice.Object
    {
        /// <summary>
        /// Create a new topic.
        /// The topic name must be unique.
        /// </summary>
        ///  <param name="name">The name of the topic.
        ///  </param>
        /// <returns>A proxy to the topic instance. The returned proxy is never null.
        ///  </returns>
        /// <exception name="TopicExists">Raised if a topic with the same name already exists.</exception>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        TopicPrx? create(string name, Ice.Current current);

        /// <summary>
        /// Retrieve a topic by name.
        /// </summary>
        /// <param name="name">The name of the topic.
        ///  </param>
        /// <returns>A proxy to the topic instance. The returned proxy is never null.
        ///  </returns>
        /// <exception name="NoSuchTopic">Raised if the topic does not exist.</exception>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        TopicPrx? retrieve(string name, Ice.Current current);

        /// <summary>
        /// Retrieve all topics managed by this topic manager.
        /// </summary>
        /// <returns>A dictionary of string, topic proxy pairs.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, TopicPrx?> retrieveAll(Ice.Current current);
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::IceStorm::Finder")]
    public partial interface Finder : Ice.Object
    {
        /// <summary>
        /// Get the topic manager proxy.
        /// The proxy might point to several replicas.
        /// </summary>
        ///  <returns>The topic manager proxy. The returned proxy is never null.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        TopicManagerPrx? getTopicManager(Ice.Current current);
    }
}

namespace IceStorm
{
    /// <summary>
    /// Publishers publish information on a particular topic.
    /// A topic logically represents a type. A
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TopicPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// Get the name of this topic.
        /// </summary>
        /// <returns>The name of the topic.
        ///  </returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        string getName(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get the name of this topic.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<string> getNameAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get a proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher calls getPublisher
        ///  and then creates a proxy with the publisher type from this proxy. If a replicated IceStorm
        ///  deployment is used this call may return a replicated proxy. The returned proxy is never null.
        /// </summary>
        ///  <returns>A proxy to publish data on this topic.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx? getPublisher(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get a proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher calls getPublisher
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> getPublisherAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get a non-replicated proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher
        ///  calls getPublisher and then creates a proxy with the publisher type from this proxy. The returned proxy is
        ///  never null.
        /// </summary>
        ///  <returns>A proxy to publish data on this topic.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx? getNonReplicatedPublisher(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get a non-replicated proxy to a publisher object for this topic.
        /// To publish data to a topic, the publisher
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> getNonReplicatedPublisherAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Subscribe with the given qos to this topic.
        /// A per-subscriber publisher object is returned.
        /// </summary>
        ///  <param name="theQoS">The quality of service parameters for this subscription.
        ///  </param>
        /// <param name="subscriber">The subscriber's proxy. This proxy is never null.
        ///  </param>
        /// <returns>The per-subscriber publisher object. The returned object is never null.
        ///  </returns>
        /// <exception name="AlreadySubscribed">Raised if the subscriber object is already subscribed.
        ///  </exception>
        /// <exception name="InvalidSubscriber">Raised if the subscriber object is null.
        ///  </exception>
        /// <exception name="BadQoS">Raised if the requested quality of service is unavailable or invalid.
        ///  </exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx? subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx? subscriber, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Subscribe with the given qos to this topic.
        /// A per-subscriber publisher object is returned.
        /// </summary>
        ///  <param name="theQoS">The quality of service parameters for this subscription.
        ///  </param>
        /// <param name="subscriber">The subscriber's proxy. This proxy is never null.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> subscribeAndGetPublisherAsync(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx? subscriber, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Unsubscribe the given subscriber.
        /// </summary>
        /// <param name="subscriber">The proxy of an existing subscriber. This proxy is never null.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void unsubscribe(global::Ice.ObjectPrx? subscriber, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Unsubscribe the given subscriber.
        /// </summary>
        /// <param name="subscriber">The proxy of an existing subscriber. This proxy is never null.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task unsubscribeAsync(global::Ice.ObjectPrx? subscriber, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Create a link to the given topic.
        /// All events originating on this topic will also be sent to
        ///  linkTo.
        /// </summary>
        ///  <param name="linkTo">The topic to link to. This proxy is never null.
        ///  </param>
        /// <param name="cost">The cost to the linked topic.
        ///  </param>
        /// <exception name="LinkExists">Raised if a link to the same topic already exists.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void link(TopicPrx? linkTo, int cost, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Create a link to the given topic.
        /// All events originating on this topic will also be sent to
        /// </summary>
        ///  <param name="linkTo">The topic to link to. This proxy is never null.
        ///  </param>
        /// <param name="cost">The cost to the linked topic.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task linkAsync(TopicPrx? linkTo, int cost, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Destroy the link from this topic to the given topic linkTo.
        /// </summary>
        /// <param name="linkTo">The topic to destroy the link to. This proxy is never null.
        ///  </param>
        /// <exception name="NoSuchLink">Raised if a link to the topic does not exist.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void unlink(TopicPrx? linkTo, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Destroy the link from this topic to the given topic linkTo.
        /// </summary>
        /// <param name="linkTo">The topic to destroy the link to. This proxy is never null.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task unlinkAsync(TopicPrx? linkTo, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Retrieve information on the current links.
        /// </summary>
        /// <returns>A sequence of LinkInfo objects.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        LinkInfo[] getLinkInfoSeq(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Retrieve information on the current links.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<LinkInfo[]> getLinkInfoSeqAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Retrieve the list of subscribers for this topic.
        /// </summary>
        /// <returns>The sequence of Ice identities for the subscriber objects.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.Identity[] getSubscribers(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Retrieve the list of subscribers for this topic.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.Identity[]> getSubscribersAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Destroy the topic.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void destroy(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Destroy the topic.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task destroyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// A topic manager manages topics, and subscribers to topics.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TopicManagerPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// Create a new topic.
        /// The topic name must be unique.
        /// </summary>
        ///  <param name="name">The name of the topic.
        ///  </param>
        /// <returns>A proxy to the topic instance. The returned proxy is never null.
        ///  </returns>
        /// <exception name="TopicExists">Raised if a topic with the same name already exists.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        TopicPrx? create(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Create a new topic.
        /// The topic name must be unique.
        /// </summary>
        ///  <param name="name">The name of the topic.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<TopicPrx?> createAsync(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Retrieve a topic by name.
        /// </summary>
        /// <param name="name">The name of the topic.
        ///  </param>
        /// <returns>A proxy to the topic instance. The returned proxy is never null.
        ///  </returns>
        /// <exception name="NoSuchTopic">Raised if the topic does not exist.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        TopicPrx? retrieve(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Retrieve a topic by name.
        /// </summary>
        /// <param name="name">The name of the topic.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<TopicPrx?> retrieveAsync(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Retrieve all topics managed by this topic manager.
        /// </summary>
        /// <returns>A dictionary of string, topic proxy pairs.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::System.Collections.Generic.Dictionary<string, TopicPrx?> retrieveAll(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Retrieve all topics managed by this topic manager.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, TopicPrx?>> retrieveAllAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// This interface is advertised by the IceStorm service through the Ice object with the identity `IceStorm/Finder'.
    /// This allows clients to retrieve the topic manager with just the endpoint information of the IceStorm service.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface FinderPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// Get the topic manager proxy.
        /// The proxy might point to several replicas.
        /// </summary>
        ///  <returns>The topic manager proxy. The returned proxy is never null.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        TopicManagerPrx? getTopicManager(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get the topic manager proxy.
        /// The proxy might point to several replicas.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<TopicManagerPrx?> getTopicManagerAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace IceStorm
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LinkInfoSeqHelper
    {
        public static void write(Ice.OutputStream ostr, LinkInfo[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static LinkInfo[] read(Ice.InputStream istr)
        {
            LinkInfo[] v;
            {
                int szx = istr.readAndCheckSeqSize(7);
                v = new LinkInfo[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new LinkInfo(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class QoSHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, string> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, string> r = new global::System.Collections.Generic.Dictionary<string, string>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TopicPrxHelper : Ice.ObjectPrxHelperBase, TopicPrx
    {
        public string getName(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.ObjectPrx? getPublisher(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getPublisherAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.ObjectPrx? getNonReplicatedPublisher(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getNonReplicatedPublisherAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.ObjectPrx? subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx? subscriber, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_subscribeAndGetPublisherAsync(theQoS, subscriber, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void unsubscribe(global::Ice.ObjectPrx? subscriber, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_unsubscribeAsync(subscriber, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void link(TopicPrx? linkTo, int cost, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_linkAsync(linkTo, cost, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void unlink(TopicPrx? linkTo, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_unlinkAsync(linkTo, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public LinkInfo[] getLinkInfoSeq(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getLinkInfoSeqAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.Identity[] getSubscribers(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getSubscribersAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void destroy(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_destroyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<string> getNameAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getNameAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getName_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getName_name = "getName";

        private void _iceI_getName(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getName_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> getPublisherAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getPublisherAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> _iceI_getPublisherAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getPublisher_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?>(progress, cancel);
            _iceI_getPublisher(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getPublisher_name = "getPublisher";

        private void _iceI_getPublisher(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?>(completed);
            outAsync.invoke(
                _getPublisher_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> getNonReplicatedPublisherAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getNonReplicatedPublisherAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> _iceI_getNonReplicatedPublisherAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getNonReplicatedPublisher_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?>(progress, cancel);
            _iceI_getNonReplicatedPublisher(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getNonReplicatedPublisher_name = "getNonReplicatedPublisher";

        private void _iceI_getNonReplicatedPublisher(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?>(completed);
            outAsync.invoke(
                _getNonReplicatedPublisher_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> subscribeAndGetPublisherAsync(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx? subscriber, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_subscribeAndGetPublisherAsync(theQoS, subscriber, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> _iceI_subscribeAndGetPublisherAsync(global::System.Collections.Generic.Dictionary<string, string> iceP_theQoS, global::Ice.ObjectPrx? iceP_subscriber, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_subscribeAndGetPublisher_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?>(progress, cancel);
            _iceI_subscribeAndGetPublisher(iceP_theQoS, iceP_subscriber, context, synchronous, completed);
            return completed.Task;
        }

        private const string _subscribeAndGetPublisher_name = "subscribeAndGetPublisher";

        private void _iceI_subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> iceP_theQoS, global::Ice.ObjectPrx? iceP_subscriber, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?>(completed);
            outAsync.invoke(
                _subscribeAndGetPublisher_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    QoSHelper.write(ostr, iceP_theQoS);
                    ostr.writeProxy(iceP_subscriber);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AlreadySubscribed)
                    {
                        throw;
                    }
                    catch(InvalidSubscriber)
                    {
                        throw;
                    }
                    catch(BadQoS)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task unsubscribeAsync(global::Ice.ObjectPrx? subscriber, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_unsubscribeAsync(subscriber, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unsubscribeAsync(global::Ice.ObjectPrx? iceP_subscriber, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unsubscribe(iceP_subscriber, context, synchronous, completed);
            return completed.Task;
        }

        private const string _unsubscribe_name = "unsubscribe";

        private void _iceI_unsubscribe(global::Ice.ObjectPrx? iceP_subscriber, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unsubscribe_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeProxy(iceP_subscriber);
                });
        }

        public global::System.Threading.Tasks.Task linkAsync(TopicPrx? linkTo, int cost, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_linkAsync(linkTo, cost, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_linkAsync(TopicPrx? iceP_linkTo, int iceP_cost, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_link_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_link(iceP_linkTo, iceP_cost, context, synchronous, completed);
            return completed.Task;
        }

        private const string _link_name = "link";

        private void _iceI_link(TopicPrx? iceP_linkTo, int iceP_cost, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _link_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    TopicPrxHelper.write(ostr, iceP_linkTo);
                    ostr.writeInt(iceP_cost);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(LinkExists)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task unlinkAsync(TopicPrx? linkTo, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_unlinkAsync(linkTo, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_unlinkAsync(TopicPrx? iceP_linkTo, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_unlink_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_unlink(iceP_linkTo, context, synchronous, completed);
            return completed.Task;
        }

        private const string _unlink_name = "unlink";

        private void _iceI_unlink(TopicPrx? iceP_linkTo, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _unlink_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    TopicPrxHelper.write(ostr, iceP_linkTo);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(NoSuchLink)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<LinkInfo[]> getLinkInfoSeqAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getLinkInfoSeqAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<LinkInfo[]> _iceI_getLinkInfoSeqAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getLinkInfoSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<LinkInfo[]>(progress, cancel);
            _iceI_getLinkInfoSeq(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getLinkInfoSeq_name = "getLinkInfoSeq";

        private void _iceI_getLinkInfoSeq(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<LinkInfo[]>(completed);
            outAsync.invoke(
                _getLinkInfoSeq_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    LinkInfo[] ret;
                    ret = LinkInfoSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.Identity[]> getSubscribersAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getSubscribersAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.Identity[]> _iceI_getSubscribersAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getSubscribers_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.Identity[]>(progress, cancel);
            _iceI_getSubscribers(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getSubscribers_name = "getSubscribers";

        private void _iceI_getSubscribers(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.Identity[]>(completed);
            outAsync.invoke(
                _getSubscribers_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.Identity[] ret;
                    ret = global::Ice.IdentitySeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task destroyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_destroyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroyAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroy_name = "destroy";

        private void _iceI_destroy(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroy_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public static TopicPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new TopicPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static TopicPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new TopicPrxHelper(b) : null;

        public static TopicPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new TopicPrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TopicPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new TopicPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TopicPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new TopicPrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStorm::Topic"
        };

        public static string ice_staticId() => "::IceStorm::Topic";

        public static void write(Ice.OutputStream ostr, TopicPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static TopicPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new TopicPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TopicPrxHelper(reference);

        private TopicPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private TopicPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TopicDictHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, TopicPrx?> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, TopicPrx?> e in v)
                {
                    ostr.writeString(e.Key);
                    TopicPrxHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, TopicPrx?> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, TopicPrx?> r = new global::System.Collections.Generic.Dictionary<string, TopicPrx?>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                TopicPrx? v;
                v = TopicPrxHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TopicManagerPrxHelper : Ice.ObjectPrxHelperBase, TopicManagerPrx
    {
        public TopicPrx? create(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_createAsync(name, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public TopicPrx? retrieve(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_retrieveAsync(name, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, TopicPrx?> retrieveAll(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_retrieveAllAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<TopicPrx?> createAsync(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_createAsync(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TopicPrx?> _iceI_createAsync(string iceP_name, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_create_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TopicPrx?>(progress, cancel);
            _iceI_create(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _create_name = "create";

        private void _iceI_create(string iceP_name, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TopicPrx?>(completed);
            outAsync.invoke(
                _create_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(TopicExists)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    TopicPrx? ret;
                    ret = TopicPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TopicPrx?> retrieveAsync(string name, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_retrieveAsync(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TopicPrx?> _iceI_retrieveAsync(string iceP_name, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_retrieve_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TopicPrx?>(progress, cancel);
            _iceI_retrieve(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _retrieve_name = "retrieve";

        private void _iceI_retrieve(string iceP_name, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TopicPrx?>(completed);
            outAsync.invoke(
                _retrieve_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(NoSuchTopic)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    TopicPrx? ret;
                    ret = TopicPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, TopicPrx?>> retrieveAllAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_retrieveAllAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, TopicPrx?>> _iceI_retrieveAllAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_retrieveAll_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, TopicPrx?>>(progress, cancel);
            _iceI_retrieveAll(context, synchronous, completed);
            return completed.Task;
        }

        private const string _retrieveAll_name = "retrieveAll";

        private void _iceI_retrieveAll(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, TopicPrx?>>(completed);
            outAsync.invoke(
                _retrieveAll_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, TopicPrx?> ret;
                    ret = TopicDictHelper.read(istr);
                    return ret;
                });
        }

        public static TopicManagerPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new TopicManagerPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static TopicManagerPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new TopicManagerPrxHelper(b) : null;

        public static TopicManagerPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new TopicManagerPrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TopicManagerPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new TopicManagerPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TopicManagerPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new TopicManagerPrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStorm::TopicManager"
        };

        public static string ice_staticId() => "::IceStorm::TopicManager";

        public static void write(Ice.OutputStream ostr, TopicManagerPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static TopicManagerPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new TopicManagerPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TopicManagerPrxHelper(reference);

        private TopicManagerPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private TopicManagerPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FinderPrxHelper : Ice.ObjectPrxHelperBase, FinderPrx
    {
        public TopicManagerPrx? getTopicManager(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getTopicManagerAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<TopicManagerPrx?> getTopicManagerAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getTopicManagerAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TopicManagerPrx?> _iceI_getTopicManagerAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTopicManager_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TopicManagerPrx?>(progress, cancel);
            _iceI_getTopicManager(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTopicManager_name = "getTopicManager";

        private void _iceI_getTopicManager(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TopicManagerPrx?>(completed);
            outAsync.invoke(
                _getTopicManager_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    TopicManagerPrx? ret;
                    ret = TopicManagerPrxHelper.read(istr);
                    return ret;
                });
        }

        public static FinderPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new FinderPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static FinderPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new FinderPrxHelper(b) : null;

        public static FinderPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new FinderPrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static FinderPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new FinderPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static FinderPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new FinderPrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceStorm::Finder"
        };

        public static string ice_staticId() => "::IceStorm::Finder";

        public static void write(Ice.OutputStream ostr, FinderPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static FinderPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new FinderPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new FinderPrxHelper(reference);

        private FinderPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private FinderPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace IceStorm
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class TopicDisp_ : Ice.ObjectImpl, Topic
    {
        public abstract string getName(Ice.Current current);

        public abstract global::Ice.ObjectPrx? getPublisher(Ice.Current current);

        public abstract global::Ice.ObjectPrx? getNonReplicatedPublisher(Ice.Current current);

        public abstract global::Ice.ObjectPrx? subscribeAndGetPublisher(global::System.Collections.Generic.Dictionary<string, string> theQoS, global::Ice.ObjectPrx? subscriber, Ice.Current current);

        public abstract void unsubscribe(global::Ice.ObjectPrx? subscriber, Ice.Current current);

        public abstract void link(TopicPrx? linkTo, int cost, Ice.Current current);

        public abstract void unlink(TopicPrx? linkTo, Ice.Current current);

        public abstract LinkInfo[] getLinkInfoSeq(Ice.Current current);

        public abstract global::Ice.Identity[] getSubscribers(Ice.Current current);

        public abstract void destroy(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::IceStorm::Topic";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "getName" => Topic.iceD_getNameAsync(this, request),
                "getPublisher" => Topic.iceD_getPublisherAsync(this, request),
                "getNonReplicatedPublisher" => Topic.iceD_getNonReplicatedPublisherAsync(this, request),
                "subscribeAndGetPublisher" => Topic.iceD_subscribeAndGetPublisherAsync(this, request),
                "unsubscribe" => Topic.iceD_unsubscribeAsync(this, request),
                "link" => Topic.iceD_linkAsync(this, request),
                "unlink" => Topic.iceD_unlinkAsync(this, request),
                "getLinkInfoSeq" => Topic.iceD_getLinkInfoSeqAsync(this, request),
                "getSubscribers" => Topic.iceD_getSubscribersAsync(this, request),
                "destroy" => Topic.iceD_destroyAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class TopicManagerDisp_ : Ice.ObjectImpl, TopicManager
    {
        public abstract TopicPrx? create(string name, Ice.Current current);

        public abstract TopicPrx? retrieve(string name, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, TopicPrx?> retrieveAll(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::IceStorm::TopicManager";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "create" => TopicManager.iceD_createAsync(this, request),
                "retrieve" => TopicManager.iceD_retrieveAsync(this, request),
                "retrieveAll" => TopicManager.iceD_retrieveAllAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class FinderDisp_ : Ice.ObjectImpl, Finder
    {
        public abstract TopicManagerPrx? getTopicManager(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::IceStorm::Finder";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "getTopicManager" => Finder.iceD_getTopicManagerAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace IceStorm
{
    public partial interface Topic
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getNameAsync(
            Topic obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getName(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeString(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getPublisherAsync(
            Topic obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getPublisher(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeProxy(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getNonReplicatedPublisherAsync(
            Topic obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getNonReplicatedPublisher(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeProxy(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_subscribeAndGetPublisherAsync(
            Topic obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, string> iceP_theQoS;
            global::Ice.ObjectPrx? iceP_subscriber;
            iceP_theQoS = QoSHelper.read(istr);
            iceP_subscriber = istr.readProxy();
            istr.endEncapsulation();
            var ret = obj.subscribeAndGetPublisher(iceP_theQoS, iceP_subscriber, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeProxy(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unsubscribeAsync(
            Topic obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::Ice.ObjectPrx? iceP_subscriber;
            iceP_subscriber = istr.readProxy();
            istr.endEncapsulation();
            obj.unsubscribe(iceP_subscriber, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_linkAsync(
            Topic obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            TopicPrx? iceP_linkTo;
            int iceP_cost;
            iceP_linkTo = TopicPrxHelper.read(istr);
            iceP_cost = istr.readInt();
            istr.endEncapsulation();
            obj.link(iceP_linkTo, iceP_cost, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_unlinkAsync(
            Topic obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            TopicPrx? iceP_linkTo;
            iceP_linkTo = TopicPrxHelper.read(istr);
            istr.endEncapsulation();
            obj.unlink(iceP_linkTo, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getLinkInfoSeqAsync(
            Topic obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getLinkInfoSeq(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            LinkInfoSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getSubscribersAsync(
            Topic obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getSubscribers(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            global::Ice.IdentitySeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_destroyAsync(
            Topic obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.destroy(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }

    public partial interface TopicManager
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_createAsync(
            TopicManager obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_name;
            iceP_name = istr.readString();
            istr.endEncapsulation();
            var ret = obj.create(iceP_name, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            TopicPrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_retrieveAsync(
            TopicManager obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_name;
            iceP_name = istr.readString();
            istr.endEncapsulation();
            var ret = obj.retrieve(iceP_name, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            TopicPrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_retrieveAllAsync(
            TopicManager obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.retrieveAll(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            TopicDictHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }

    public partial interface Finder
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getTopicManagerAsync(
            Finder obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getTopicManager(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            TopicManagerPrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }
}
