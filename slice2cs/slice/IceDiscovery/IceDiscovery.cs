//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceDiscovery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceDiscovery
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface LookupReply : global::Ice.Object, LookupReplyOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Lookup : global::Ice.Object, LookupOperations_
    {
    }
}

namespace IceDiscovery
{
    /// <summary>
    /// The LookupReply interface is used by IceDiscovery clients to answer requests received on the Lookup interface.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LookupReplyPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Reply to the findObjectById request.
        /// </summary>
        /// <param name="id">The identity of the object.
        ///  </param>
        /// <param name="prx">The proxy of the object. This proxy is never null.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void foundObjectById(global::Ice.Identity id, global::Ice.ObjectPrx prx, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Reply to the findObjectById request.
        /// </summary>
        /// <param name="id">The identity of the object.
        ///  </param>
        /// <param name="prx">The proxy of the object. This proxy is never null.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task foundObjectByIdAsync(global::Ice.Identity id, global::Ice.ObjectPrx prx, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Reply to the findAdpaterById request.
        /// </summary>
        /// <param name="id">The adapter ID.
        ///  </param>
        /// <param name="prx">The adapter proxy (a dummy proxy created by the adapter). The proxy provides the adapter
        ///  endpoints. This proxy is never null.
        ///  </param>
        /// <param name="isReplicaGroup">True if the adapter is also a member of a replica group.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void foundAdapterById(string id, global::Ice.ObjectPrx prx, bool isReplicaGroup, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Reply to the findAdpaterById request.
        /// </summary>
        /// <param name="id">The adapter ID.
        ///  </param>
        /// <param name="prx">The adapter proxy (a dummy proxy created by the adapter). The proxy provides the adapter
        ///  endpoints. This proxy is never null.
        ///  </param>
        /// <param name="isReplicaGroup">True if the adapter is also a member of a replica group.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task foundAdapterByIdAsync(string id, global::Ice.ObjectPrx prx, bool isReplicaGroup, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// The Lookup interface is used by IceDiscovery clients to look for objects and adapters using UDP multicast.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LookupPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Request to find an Ice object
        /// </summary>
        /// <param name="domainId">The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
        ///  matching domain identifier.
        ///  </param>
        /// <param name="id">The object identity.
        ///  </param>
        /// <param name="reply">The proxy of the LookupReply interface that should be used to send the reply if a matching
        ///  object is found. The reply proxy is never null.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void findObjectById(string domainId, global::Ice.Identity id, LookupReplyPrx reply, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Request to find an Ice object
        /// </summary>
        /// <param name="domainId">The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
        ///  matching domain identifier.
        ///  </param>
        /// <param name="id">The object identity.
        ///  </param>
        /// <param name="reply">The proxy of the LookupReply interface that should be used to send the reply if a matching
        ///  object is found. The reply proxy is never null.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task findObjectByIdAsync(string domainId, global::Ice.Identity id, LookupReplyPrx reply, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Request to find an object adapter
        /// </summary>
        /// <param name="domainId">The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
        ///  matching domain identifier.
        ///  </param>
        /// <param name="id">The adapter ID.
        ///  </param>
        /// <param name="reply">The proxy of the LookupReply interface that should be used to send the reply if a matching
        ///  adapter is found. The reply proxy is never null.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void findAdapterById(string domainId, string id, LookupReplyPrx reply, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Request to find an object adapter
        /// </summary>
        /// <param name="domainId">The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
        ///  matching domain identifier.
        ///  </param>
        /// <param name="id">The adapter ID.
        ///  </param>
        /// <param name="reply">The proxy of the LookupReply interface that should be used to send the reply if a matching
        ///  adapter is found. The reply proxy is never null.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task findAdapterByIdAsync(string domainId, string id, LookupReplyPrx reply, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace IceDiscovery
{
    /// <summary>
    /// The LookupReply interface is used by IceDiscovery clients to answer requests received on the Lookup interface.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LookupReplyOperations_
    {
        /// <summary>
        /// Reply to the findObjectById request.
        /// </summary>
        /// <param name="id">The identity of the object.
        ///  </param>
        /// <param name="prx">The proxy of the object. This proxy is never null.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void foundObjectById(global::Ice.Identity id, global::Ice.ObjectPrx prx, global::Ice.Current current = null);

        /// <summary>
        /// Reply to the findAdpaterById request.
        /// </summary>
        /// <param name="id">The adapter ID.
        ///  </param>
        /// <param name="prx">The adapter proxy (a dummy proxy created by the adapter). The proxy provides the adapter
        ///  endpoints. This proxy is never null.
        ///  </param>
        /// <param name="isReplicaGroup">True if the adapter is also a member of a replica group.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void foundAdapterById(string id, global::Ice.ObjectPrx prx, bool isReplicaGroup, global::Ice.Current current = null);
    }

    /// <summary>
    /// The Lookup interface is used by IceDiscovery clients to look for objects and adapters using UDP multicast.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LookupOperations_
    {
        /// <summary>
        /// Request to find an Ice object
        /// </summary>
        /// <param name="domainId">The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
        ///  matching domain identifier.
        ///  </param>
        /// <param name="id">The object identity.
        ///  </param>
        /// <param name="reply">The proxy of the LookupReply interface that should be used to send the reply if a matching
        ///  object is found. The reply proxy is never null.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void findObjectById(string domainId, global::Ice.Identity id, LookupReplyPrx reply, global::Ice.Current current = null);

        /// <summary>
        /// Request to find an object adapter
        /// </summary>
        /// <param name="domainId">The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a
        ///  matching domain identifier.
        ///  </param>
        /// <param name="id">The adapter ID.
        ///  </param>
        /// <param name="reply">The proxy of the LookupReply interface that should be used to send the reply if a matching
        ///  adapter is found. The reply proxy is never null.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void findAdapterById(string domainId, string id, LookupReplyPrx reply, global::Ice.Current current = null);
    }
}

namespace IceDiscovery
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LookupReplyPrxHelper : global::Ice.ObjectPrxHelperBase, LookupReplyPrx
    {
        public LookupReplyPrxHelper()
        {
        }

        #region Synchronous operations

        public void foundObjectById(global::Ice.Identity id, global::Ice.ObjectPrx prx, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_foundObjectByIdAsync(id, prx, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void foundAdapterById(string id, global::Ice.ObjectPrx prx, bool isReplicaGroup, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_foundAdapterByIdAsync(id, prx, isReplicaGroup, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task foundObjectByIdAsync(global::Ice.Identity id, global::Ice.ObjectPrx prx, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_foundObjectByIdAsync(id, prx, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_foundObjectByIdAsync(global::Ice.Identity iceP_id, global::Ice.ObjectPrx iceP_prx, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_foundObjectById(iceP_id, iceP_prx, context, synchronous, completed);
            return completed.Task;
        }

        private const string _foundObjectById_name = "foundObjectById";

        private void _iceI_foundObjectById(global::Ice.Identity iceP_id, global::Ice.ObjectPrx iceP_prx, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _foundObjectById_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.Identity.ice_write(ostr, iceP_id);
                    ostr.writeProxy(iceP_prx);
                });
        }

        public global::System.Threading.Tasks.Task foundAdapterByIdAsync(string id, global::Ice.ObjectPrx prx, bool isReplicaGroup, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_foundAdapterByIdAsync(id, prx, isReplicaGroup, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_foundAdapterByIdAsync(string iceP_id, global::Ice.ObjectPrx iceP_prx, bool iceP_isReplicaGroup, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_foundAdapterById(iceP_id, iceP_prx, iceP_isReplicaGroup, context, synchronous, completed);
            return completed.Task;
        }

        private const string _foundAdapterById_name = "foundAdapterById";

        private void _iceI_foundAdapterById(string iceP_id, global::Ice.ObjectPrx iceP_prx, bool iceP_isReplicaGroup, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _foundAdapterById_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_id);
                    ostr.writeProxy(iceP_prx);
                    ostr.writeBool(iceP_isReplicaGroup);
                });
        }

        #endregion

        #region Factory operations

        public static LookupReplyPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static LookupReplyPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                LookupReplyPrxHelper prx = new LookupReplyPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static LookupReplyPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    LookupReplyPrxHelper prx = new LookupReplyPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static LookupReplyPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                LookupReplyPrxHelper prx = new LookupReplyPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static LookupReplyPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                LookupReplyPrxHelper prx = new LookupReplyPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceDiscovery::LookupReply"
        };

        public static string ice_staticId() => "::IceDiscovery::LookupReply";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, LookupReplyPrx v)
        {
            ostr.writeProxy(v);
        }

        public static LookupReplyPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                LookupReplyPrxHelper result = new LookupReplyPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LookupPrxHelper : global::Ice.ObjectPrxHelperBase, LookupPrx
    {
        public LookupPrxHelper()
        {
        }

        #region Synchronous operations

        public void findObjectById(string domainId, global::Ice.Identity id, LookupReplyPrx reply, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_findObjectByIdAsync(domainId, id, reply, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void findAdapterById(string domainId, string id, LookupReplyPrx reply, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_findAdapterByIdAsync(domainId, id, reply, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task findObjectByIdAsync(string domainId, global::Ice.Identity id, LookupReplyPrx reply, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_findObjectByIdAsync(domainId, id, reply, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_findObjectByIdAsync(string iceP_domainId, global::Ice.Identity iceP_id, LookupReplyPrx iceP_reply, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_findObjectById(iceP_domainId, iceP_id, iceP_reply, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findObjectById_name = "findObjectById";

        private void _iceI_findObjectById(string iceP_domainId, global::Ice.Identity iceP_id, LookupReplyPrx iceP_reply, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _findObjectById_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_domainId);
                    global::Ice.Identity.ice_write(ostr, iceP_id);
                    LookupReplyPrxHelper.write(ostr, iceP_reply);
                });
        }

        public global::System.Threading.Tasks.Task findAdapterByIdAsync(string domainId, string id, LookupReplyPrx reply, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_findAdapterByIdAsync(domainId, id, reply, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_findAdapterByIdAsync(string iceP_domainId, string iceP_id, LookupReplyPrx iceP_reply, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_findAdapterById(iceP_domainId, iceP_id, iceP_reply, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findAdapterById_name = "findAdapterById";

        private void _iceI_findAdapterById(string iceP_domainId, string iceP_id, LookupReplyPrx iceP_reply, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _findAdapterById_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_domainId);
                    ostr.writeString(iceP_id);
                    LookupReplyPrxHelper.write(ostr, iceP_reply);
                });
        }

        #endregion

        #region Factory operations

        public static LookupPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static LookupPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                LookupPrxHelper prx = new LookupPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static LookupPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    LookupPrxHelper prx = new LookupPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static LookupPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                LookupPrxHelper prx = new LookupPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static LookupPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                LookupPrxHelper prx = new LookupPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceDiscovery::Lookup"
        };

        public static string ice_staticId() => "::IceDiscovery::Lookup";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, LookupPrx v)
        {
            ostr.writeProxy(v);
        }

        public static LookupPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                LookupPrxHelper result = new LookupPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace IceDiscovery
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class LookupReplyDisp_ : global::Ice.ObjectImpl, LookupReply
    {
        #region Slice operations

        public abstract void foundObjectById(global::Ice.Identity id, global::Ice.ObjectPrx prx, global::Ice.Current current = null);

        public abstract void foundAdapterById(string id, global::Ice.ObjectPrx prx, bool isReplicaGroup, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceDiscovery::LookupReply"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceDiscovery::LookupReply";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_foundObjectById(LookupReply obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Identity iceP_id = default;
            global::Ice.ObjectPrx iceP_prx = default;
            iceP_id = global::Ice.Identity.ice_read(istr);
            iceP_prx = istr.readProxy();
            inS.endReadParams();
            obj.foundObjectById(iceP_id, iceP_prx, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_foundAdapterById(LookupReply obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_id = default;
            global::Ice.ObjectPrx iceP_prx = default;
            bool iceP_isReplicaGroup = default;
            iceP_id = istr.readString();
            iceP_prx = istr.readProxy();
            iceP_isReplicaGroup = istr.readBool();
            inS.endReadParams();
            obj.foundAdapterById(iceP_id, iceP_prx, iceP_isReplicaGroup, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "foundAdapterById",
            "foundObjectById",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_foundAdapterById(this, inS, current);
                }
                case 1:
                {
                    return iceD_foundObjectById(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class LookupDisp_ : global::Ice.ObjectImpl, Lookup
    {
        #region Slice operations

        public abstract void findObjectById(string domainId, global::Ice.Identity id, LookupReplyPrx reply, global::Ice.Current current = null);

        public abstract void findAdapterById(string domainId, string id, LookupReplyPrx reply, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceDiscovery::Lookup"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceDiscovery::Lookup";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_findObjectById(Lookup obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_domainId = default;
            global::Ice.Identity iceP_id = default;
            LookupReplyPrx iceP_reply = default;
            iceP_domainId = istr.readString();
            iceP_id = global::Ice.Identity.ice_read(istr);
            iceP_reply = LookupReplyPrxHelper.read(istr);
            inS.endReadParams();
            obj.findObjectById(iceP_domainId, iceP_id, iceP_reply, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_findAdapterById(Lookup obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_domainId = default;
            string iceP_id = default;
            LookupReplyPrx iceP_reply = default;
            iceP_domainId = istr.readString();
            iceP_id = istr.readString();
            iceP_reply = LookupReplyPrxHelper.read(istr);
            inS.endReadParams();
            obj.findAdapterById(iceP_domainId, iceP_id, iceP_reply, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "findAdapterById",
            "findObjectById",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_findAdapterById(this, inS, current);
                }
                case 1:
                {
                    return iceD_findObjectById(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
