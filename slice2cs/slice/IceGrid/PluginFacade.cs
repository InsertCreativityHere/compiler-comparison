//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `PluginFacade.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceGrid
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ReplicaGroupFilter
    {
        #region Slice operations


        /// <summary>
        /// Filter the given set of adapters.
        /// </summary>
        /// <param name="replicaGroupId">The replica group ID.
        ///  </param>
        /// <param name="adapterIds">The adpater IDs to filter.
        ///  </param>
        /// <param name="con">The connection from the Ice client which is resolving the replica group endpoints.
        ///  </param>
        /// <param name="ctx">The context from the Ice client which is resolving the replica group endpoints.
        ///  </param>
        /// <returns>The filtered adapter IDs.</returns>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        string[] filter(string replicaGroupId, string[] adapterIds, global::Ice.Connection con, global::System.Collections.Generic.Dictionary<string, string> ctx);

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface TypeFilter
    {
        #region Slice operations


        /// <summary>
        /// Filter the given set of proxies.
        /// </summary>
        /// <param name="type">The type.
        ///  </param>
        /// <param name="proxies">The proxies to filter.
        ///  </param>
        /// <param name="con">The connection from the Ice client which is looking up well-known objects by type.
        ///  </param>
        /// <param name="ctx">The context from the Ice client which is looking up well-known objects by type.
        ///  </param>
        /// <returns>The filtered proxies.</returns>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::Ice.ObjectPrx[] filter(string type, global::Ice.ObjectPrx[] proxies, global::Ice.Connection con, global::System.Collections.Generic.Dictionary<string, string> ctx);

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface RegistryPluginFacade
    {
        #region Slice operations


        /// <summary>
        /// Get an application descriptor.
        /// </summary>
        /// <param name="name">The application name.
        ///  </param>
        /// <returns>The application descriptor.
        ///  </returns>
        /// <exception name="ApplicationNotExistException">Raised if the application doesn't exist.</exception>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        ApplicationInfo getApplicationInfo(string name);


        /// <summary>
        /// Get the server information for the server with the given id.
        /// </summary>
        /// <param name="id">The server id.
        ///  </param>
        /// <exception name="ServerNotExistException">Raised if the server doesn't exist.
        ///  </exception>
        /// <returns>The server information.</returns>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        ServerInfo getServerInfo(string id);


        /// <summary>
        /// Get the ID of the server to which the given adapter belongs.
        /// </summary>
        /// <param name="adapterId">The adapter ID.
        ///  </param>
        /// <returns>The server ID or the empty string if the given identifier is not associated to an object adapter
        ///  defined with an application descriptor.
        ///  </returns>
        /// <exception name="AdapterNotExistException">Raised if the adapter doesn't exist.</exception>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        string getAdapterServer(string adapterId);


        /// <summary>
        /// Get the name of the application to which the given adapter belongs.
        /// </summary>
        /// <param name="adapterId">The adapter ID.
        ///  </param>
        /// <returns>The application name or the empty string if the given identifier is not associated to a replica group
        ///  or object adapter defined with an application descriptor.
        ///  </returns>
        /// <exception name="AdapterNotExistException">Raised if the adapter doesn't exist.</exception>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        string getAdapterApplication(string adapterId);


        /// <summary>
        /// Get the name of the node to which the given adapter belongs.
        /// </summary>
        /// <param name="adapterId">The adapter ID.
        ///  </param>
        /// <returns>The node name or the empty string if the given identifier is not associated to an object adapter
        ///  defined with an application descriptor.
        ///  </returns>
        /// <exception name="AdapterNotExistException">Raised if the adapter doesn't exist.</exception>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        string getAdapterNode(string adapterId);


        /// <summary>
        /// Get the adapter information for the replica group or adapter with the given id.
        /// </summary>
        /// <param name="id">The adapter id.
        ///  </param>
        /// <returns>A sequence of adapter information structures. If the given id refers to an adapter, this sequence will
        ///  contain only one element. If the given id refers to a replica group, the sequence will contain the adapter
        ///  information of each member of the replica group.
        ///  </returns>
        /// <exception name="AdapterNotExistException">Raised if the adapter or replica group doesn't exist.</exception>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        AdapterInfo[] getAdapterInfo(string id);


        /// <summary>
        /// Get the object info for the object with the given identity.
        /// </summary>
        /// <param name="id">The identity of the object.
        ///  </param>
        /// <returns>The object info.
        ///  </returns>
        /// <exception name="ObjectNotRegisteredException">Raised if the object isn't registered with the registry.</exception>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        ObjectInfo getObjectInfo(global::Ice.Identity id);


        /// <summary>
        /// Get the node information for the node with the given name.
        /// </summary>
        /// <param name="name">The node name.
        ///  </param>
        /// <returns>The node information.
        ///  </returns>
        /// <exception name="NodeNotExistException">Raised if the node doesn't exist.
        ///  </exception>
        /// <exception name="NodeUnreachableException">Raised if the node could not be reached.</exception>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        NodeInfo getNodeInfo(string name);


        /// <summary>
        /// Get the load averages of the node.
        /// </summary>
        /// <param name="name">The node name.
        ///  </param>
        /// <returns>The node load information.
        ///  </returns>
        /// <exception name="NodeNotExistException">Raised if the node doesn't exist.
        ///  </exception>
        /// <exception name="NodeUnreachableException">Raised if the node could not be reached.</exception>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        LoadInfo getNodeLoad(string name);


        /// <summary>
        /// Get the property value for the given property and adapter.
        /// The property is looked up in the server or service
        ///  descriptor where the adapter is defined.
        /// </summary>
        ///  <param name="adapterId">The adapter ID
        ///  </param>
        /// <param name="name">The name of the property.
        ///  </param>
        /// <returns>The property value.
        ///  </returns>
        /// <exception name="AdapterNotExistException">Raised if the adapter doesn't exist.</exception>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        string getPropertyForAdapter(string adapterId, string name);


        /// <summary>
        /// Add a replica group filter.
        /// </summary>
        /// <param name="id">The identifier of the filter. This identifier must match the value of the "filter" attribute
        ///  specified in the replica group descriptor. To filter dynamically registered replica groups, you should use the
        ///  empty filter id.
        ///  </param>
        /// <param name="filter">The filter implementation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void addReplicaGroupFilter(string id, ReplicaGroupFilter filter);


        /// <summary>
        /// Remove a replica group filter.
        /// </summary>
        /// <param name="id">The identifier of the filter.
        ///  </param>
        /// <param name="filter">The filter implementation.
        ///  </param>
        /// <returns>True of the filter was removed, false otherwise.</returns>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool removeReplicaGroupFilter(string id, ReplicaGroupFilter filter);


        /// <summary>
        /// Add a type filter.
        /// </summary>
        /// <param name="type">The type to register this filter with.
        ///  </param>
        /// <param name="filter">The filter implementation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void addTypeFilter(string type, TypeFilter filter);


        /// <summary>
        /// Remove a type filter.
        /// </summary>
        /// <param name="type">The type to register this filter with.
        ///  </param>
        /// <param name="filter">The filter implementation.
        ///  </param>
        /// <returns>True of the filter was removed, false otherwise.</returns>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool removeTypeFilter(string type, TypeFilter filter);

        #endregion
    }
}

namespace IceGrid
{
}
