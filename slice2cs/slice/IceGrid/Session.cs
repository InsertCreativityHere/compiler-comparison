//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceGrid
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Session : global::Ice.Object, SessionOperations_, global::Glacier2.Session
    {
    }
}

namespace IceGrid
{
    /// <summary>
    /// A session object is used by IceGrid clients to allocate and release objects.
    /// Client sessions are created either
    ///  via the Registry object or via the registry client SessionManager object.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface SessionPrx : global::Glacier2.SessionPrx
    {
        /// <summary>
        /// Keep the session alive.
        /// This operation is provided for backwards compatibility. As of Ice 3.8, there is no
        ///  need to call this operation and its implementation does nothing.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void keepAlive(global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Keep the session alive.
        /// This operation is provided for backwards compatibility. As of Ice 3.8, there is no
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task keepAliveAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Allocate an object.
        /// Depending on the allocation timeout, this operation might hang until the object is
        ///  available or until the timeout is reached.
        /// </summary>
        ///  <param name="id">The identity of the object to allocate.
        ///  </param>
        /// <returns>The proxy of the allocated object. The returned proxy is never null.
        ///  </returns>
        /// <exception name="ObjectNotRegisteredException">Raised if the object with the given identity is not registered with
        ///  the registry.
        ///  </exception>
        /// <exception name="AllocationException">Raised if the object can't be allocated.
        ///  </exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx allocateObjectById(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Allocate an object.
        /// Depending on the allocation timeout, this operation might hang until the object is
        /// </summary>
        ///  <param name="id">The identity of the object to allocate.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> allocateObjectByIdAsync(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Allocate an object with the given type.
        /// Depending on the allocation timeout, this operation can block until
        ///  an object becomes available or until the timeout is reached.
        /// </summary>
        ///  <param name="type">The type of the object.
        ///  </param>
        /// <returns>The proxy of the allocated object. The returned proxy is never null.
        ///  </returns>
        /// <exception name="AllocationException">Raised if the object could not be allocated.
        ///  </exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx allocateObjectByType(string type, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Allocate an object with the given type.
        /// Depending on the allocation timeout, this operation can block until
        /// </summary>
        ///  <param name="type">The type of the object.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> allocateObjectByTypeAsync(string type, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Release an object that was allocated using allocateObjectById or
        ///  allocateObjectByType.
        /// </summary>
        /// <param name="id">The identity of the object to release.
        ///  </param>
        /// <exception name="ObjectNotRegisteredException">Raised if the object with the given identity is not registered with
        ///  the registry.
        ///  </exception>
        /// <exception name="AllocationException">Raised if the given object can't be released. This might happen if the object
        ///  isn't allocatable or isn't allocated by the session.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void releaseObject(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Release an object that was allocated using allocateObjectById or
        ///  allocateObjectByType.
        /// </summary>
        /// <param name="id">The identity of the object to release.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task releaseObjectAsync(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Set the allocation timeout.
        /// If no objects are available for an allocation request, a call to
        ///  allocateObjectById or allocateObjectByType will block for the duration of this
        ///  timeout.
        /// </summary>
        ///  <param name="timeout">The timeout in milliseconds.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setAllocationTimeout(int timeout, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Set the allocation timeout.
        /// If no objects are available for an allocation request, a call to
        /// </summary>
        ///  <param name="timeout">The timeout in milliseconds.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setAllocationTimeoutAsync(int timeout, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace IceGrid
{
    /// <summary>
    /// A session object is used by IceGrid clients to allocate and release objects.
    /// Client sessions are created either
    ///  via the Registry object or via the registry client SessionManager object.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface SessionOperations_ : global::Glacier2.SessionOperations_
    {
        /// <summary>
        /// Keep the session alive.
        /// This operation is provided for backwards compatibility. As of Ice 3.8, there is no
        ///  need to call this operation and its implementation does nothing.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void keepAlive(global::Ice.Current current = null);

        /// <summary>
        /// Allocate an object.
        /// Depending on the allocation timeout, this operation might hang until the object is
        /// </summary>
        ///  <param name="id">The identity of the object to allocate.
        ///  </param>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> allocateObjectByIdAsync(global::Ice.Identity id, global::Ice.Current current = null);

        /// <summary>
        /// Allocate an object with the given type.
        /// Depending on the allocation timeout, this operation can block until
        /// </summary>
        ///  <param name="type">The type of the object.
        ///  </param>
        /// <param name="current">The Current object for the invocation.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> allocateObjectByTypeAsync(string type, global::Ice.Current current = null);

        /// <summary>
        /// Release an object that was allocated using allocateObjectById or
        ///  allocateObjectByType.
        /// </summary>
        /// <param name="id">The identity of the object to release.
        ///  </param>
        /// <exception name="ObjectNotRegisteredException">Raised if the object with the given identity is not registered with
        ///  the registry.
        ///  </exception>
        /// <exception name="AllocationException">Raised if the given object can't be released. This might happen if the object
        ///  isn't allocatable or isn't allocated by the session.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void releaseObject(global::Ice.Identity id, global::Ice.Current current = null);

        /// <summary>
        /// Set the allocation timeout.
        /// If no objects are available for an allocation request, a call to
        ///  allocateObjectById or allocateObjectByType will block for the duration of this
        ///  timeout.
        /// </summary>
        ///  <param name="timeout">The timeout in milliseconds.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void setAllocationTimeout(int timeout, global::Ice.Current current = null);
    }
}

namespace IceGrid
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class SessionPrxHelper : global::Ice.ObjectPrxHelperBase, SessionPrx
    {
        public SessionPrxHelper()
        {
        }

        #region Synchronous operations

        public void destroy(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_destroyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void keepAlive(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_keepAliveAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.ObjectPrx allocateObjectById(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_allocateObjectByIdAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.ObjectPrx allocateObjectByType(string type, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_allocateObjectByTypeAsync(type, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void releaseObject(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_releaseObjectAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setAllocationTimeout(int timeout, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_setAllocationTimeoutAsync(timeout, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task destroyAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_destroyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroyAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroy_name = "destroy";

        private void _iceI_destroy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task keepAliveAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_keepAliveAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_keepAliveAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_keepAlive(context, synchronous, completed);
            return completed.Task;
        }

        private const string _keepAlive_name = "keepAlive";

        private void _iceI_keepAlive(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _keepAlive_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> allocateObjectByIdAsync(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_allocateObjectByIdAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_allocateObjectByIdAsync(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_allocateObjectById_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_allocateObjectById(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _allocateObjectById_name = "allocateObjectById";

        private void _iceI_allocateObjectById(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _allocateObjectById_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.Identity.ice_write(ostr, iceP_id);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObjectNotRegisteredException)
                    {
                        throw;
                    }
                    catch(AllocationException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret = default;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> allocateObjectByTypeAsync(string type, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_allocateObjectByTypeAsync(type, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_allocateObjectByTypeAsync(string iceP_type, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_allocateObjectByType_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_allocateObjectByType(iceP_type, context, synchronous, completed);
            return completed.Task;
        }

        private const string _allocateObjectByType_name = "allocateObjectByType";

        private void _iceI_allocateObjectByType(string iceP_type, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _allocateObjectByType_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_type);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AllocationException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret = default;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task releaseObjectAsync(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_releaseObjectAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_releaseObjectAsync(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_releaseObject_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_releaseObject(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _releaseObject_name = "releaseObject";

        private void _iceI_releaseObject(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _releaseObject_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.Identity.ice_write(ostr, iceP_id);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ObjectNotRegisteredException)
                    {
                        throw;
                    }
                    catch(AllocationException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task setAllocationTimeoutAsync(int timeout, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_setAllocationTimeoutAsync(timeout, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setAllocationTimeoutAsync(int iceP_timeout, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setAllocationTimeout(iceP_timeout, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setAllocationTimeout_name = "setAllocationTimeout";

        private void _iceI_setAllocationTimeout(int iceP_timeout, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setAllocationTimeout_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_timeout);
                });
        }

        #endregion

        #region Factory operations

        public static SessionPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static SessionPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                SessionPrxHelper prx = new SessionPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static SessionPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    SessionPrxHelper prx = new SessionPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SessionPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                SessionPrxHelper prx = new SessionPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static SessionPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                SessionPrxHelper prx = new SessionPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Glacier2::Session",
            "::Ice::Object",
            "::IceGrid::Session"
        };

        public static string ice_staticId() => "::IceGrid::Session";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SessionPrx v)
        {
            ostr.writeProxy(v);
        }

        public static SessionPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SessionPrxHelper result = new SessionPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace IceGrid
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class SessionDisp_ : global::Ice.ObjectImpl, Session
    {
        #region Slice operations

        public abstract void keepAlive(global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> allocateObjectByIdAsync(global::Ice.Identity id, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> allocateObjectByTypeAsync(string type, global::Ice.Current current = null);

        public abstract void releaseObject(global::Ice.Identity id, global::Ice.Current current = null);

        public abstract void setAllocationTimeout(int timeout, global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract void destroy(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Glacier2::Session",
            "::Ice::Object",
            "::IceGrid::Session"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceGrid::Session";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_keepAlive(Session obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            obj.keepAlive(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_allocateObjectById(Session obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Identity iceP_id = default;
            iceP_id = global::Ice.Identity.ice_read(istr);
            inS.endReadParams();
            return inS.setResultTask<global::Ice.ObjectPrx>(obj.allocateObjectByIdAsync(iceP_id, current),
                (ostr, ret) =>
                {
                    ostr.writeProxy(ret);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_allocateObjectByType(Session obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_type = default;
            iceP_type = istr.readString();
            inS.endReadParams();
            return inS.setResultTask<global::Ice.ObjectPrx>(obj.allocateObjectByTypeAsync(iceP_type, current),
                (ostr, ret) =>
                {
                    ostr.writeProxy(ret);
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_releaseObject(Session obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Identity iceP_id = default;
            iceP_id = global::Ice.Identity.ice_read(istr);
            inS.endReadParams();
            obj.releaseObject(iceP_id, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setAllocationTimeout(Session obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            int iceP_timeout = default;
            iceP_timeout = istr.readInt();
            inS.endReadParams();
            obj.setAllocationTimeout(iceP_timeout, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "allocateObjectById",
            "allocateObjectByType",
            "destroy",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "keepAlive",
            "releaseObject",
            "setAllocationTimeout"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_allocateObjectById(this, inS, current);
                }
                case 1:
                {
                    return iceD_allocateObjectByType(this, inS, current);
                }
                case 2:
                {
                    return global::Glacier2.SessionDisp_.iceD_destroy(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 7:
                {
                    return iceD_keepAlive(this, inS, current);
                }
                case 8:
                {
                    return iceD_releaseObject(this, inS, current);
                }
                case 9:
                {
                    return iceD_setAllocationTimeout(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
