//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Session.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace IceGrid
{
    [Ice.SliceTypeId("::IceGrid::Session")]
    public partial interface Session : global::Glacier2.Session
    {
        /// <summary>
        /// Keep the session alive.
        /// As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.
        /// </summary>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.Obsolete("")]
        void keepAlive(Ice.Current current);

        /// <summary>
        /// Allocate an object.
        /// Depending on the allocation timeout, this operation might hang until the object is
        /// </summary>
        ///  <param name="id">The identity of the object to allocate.
        ///  </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> allocateObjectByIdAsync(global::Ice.Identity id, Ice.Current current);

        /// <summary>
        /// Allocate an object with the given type.
        /// Depending on the allocation timeout, this operation can block until
        /// </summary>
        ///  <param name="type">The type of the object.
        ///  </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> allocateObjectByTypeAsync(string type, Ice.Current current);

        /// <summary>
        /// Release an object that was allocated using allocateObjectById or
        ///  allocateObjectByType.
        /// </summary>
        /// <param name="id">The identity of the object to release.
        ///  </param>
        /// <exception name="ObjectNotRegisteredException">Raised if the object with the given identity is not registered with
        ///  the registry.
        ///  </exception>
        /// <exception name="AllocationException">Raised if the given object can't be released. This might happen if the object
        ///  isn't allocatable or isn't allocated by the session.</exception>
        /// <param name="current">The Current object for the dispatch.</param>

        void releaseObject(global::Ice.Identity id, Ice.Current current);

        /// <summary>
        /// Set the allocation timeout.
        /// If no objects are available for an allocation request, a call to
        ///  allocateObjectById or allocateObjectByType will block for the duration of this
        ///  timeout.
        /// </summary>
        ///  <param name="timeout">The timeout in milliseconds.</param>
        /// <param name="current">The Current object for the dispatch.</param>

        void setAllocationTimeout(int timeout, Ice.Current current);
    }
}

namespace IceGrid
{
    /// <summary>
    /// A session object is used by IceGrid clients to allocate and release objects.
    /// Client sessions are created either
    ///  via the Registry object or via the registry client SessionManager object.
    /// </summary>

    public interface SessionPrx : global::Glacier2.SessionPrx
    {
        /// <summary>
        /// Keep the session alive.
        /// As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        [global::System.Obsolete("")]
        void keepAlive(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Keep the session alive.
        /// As of Ice 3.8, there is no need to call this operation, and its implementation does nothing.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.Obsolete("")]
        global::System.Threading.Tasks.Task keepAliveAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Allocate an object.
        /// Depending on the allocation timeout, this operation might hang until the object is
        ///  available or until the timeout is reached.
        /// </summary>
        ///  <param name="id">The identity of the object to allocate.
        ///  </param>
        /// <returns>The proxy of the allocated object. The returned proxy is never null.
        ///  </returns>
        /// <exception name="ObjectNotRegisteredException">Raised if the object with the given identity is not registered with
        ///  the registry.
        ///  </exception>
        /// <exception name="AllocationException">Raised if the object can't be allocated.
        ///  </exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx? allocateObjectById(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Allocate an object.
        /// Depending on the allocation timeout, this operation might hang until the object is
        /// </summary>
        ///  <param name="id">The identity of the object to allocate.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> allocateObjectByIdAsync(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Allocate an object with the given type.
        /// Depending on the allocation timeout, this operation can block until
        ///  an object becomes available or until the timeout is reached.
        /// </summary>
        ///  <param name="type">The type of the object.
        ///  </param>
        /// <returns>The proxy of the allocated object. The returned proxy is never null.
        ///  </returns>
        /// <exception name="AllocationException">Raised if the object could not be allocated.
        ///  </exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx? allocateObjectByType(string type, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Allocate an object with the given type.
        /// Depending on the allocation timeout, this operation can block until
        /// </summary>
        ///  <param name="type">The type of the object.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> allocateObjectByTypeAsync(string type, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Release an object that was allocated using allocateObjectById or
        ///  allocateObjectByType.
        /// </summary>
        /// <param name="id">The identity of the object to release.
        ///  </param>
        /// <exception name="ObjectNotRegisteredException">Raised if the object with the given identity is not registered with
        ///  the registry.
        ///  </exception>
        /// <exception name="AllocationException">Raised if the given object can't be released. This might happen if the object
        ///  isn't allocatable or isn't allocated by the session.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void releaseObject(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Release an object that was allocated using allocateObjectById or
        ///  allocateObjectByType.
        /// </summary>
        /// <param name="id">The identity of the object to release.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task releaseObjectAsync(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Set the allocation timeout.
        /// If no objects are available for an allocation request, a call to
        ///  allocateObjectById or allocateObjectByType will block for the duration of this
        ///  timeout.
        /// </summary>
        ///  <param name="timeout">The timeout in milliseconds.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void setAllocationTimeout(int timeout, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Set the allocation timeout.
        /// If no objects are available for an allocation request, a call to
        /// </summary>
        ///  <param name="timeout">The timeout in milliseconds.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task setAllocationTimeoutAsync(int timeout, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace IceGrid
{
    public sealed class SessionPrxHelper : Ice.ObjectPrxHelperBase, SessionPrx
    {
        public void destroy(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_destroyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void keepAlive(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_keepAliveAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.ObjectPrx? allocateObjectById(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_allocateObjectByIdAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.ObjectPrx? allocateObjectByType(string type, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_allocateObjectByTypeAsync(type, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void releaseObject(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_releaseObjectAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void setAllocationTimeout(int timeout, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_setAllocationTimeoutAsync(timeout, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task destroyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_destroyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroyAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroy_name = "destroy";

        private void _iceI_destroy(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroy_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task keepAliveAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_keepAliveAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_keepAliveAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_keepAlive(context, synchronous, completed);
            return completed.Task;
        }

        private const string _keepAlive_name = "keepAlive";

        private void _iceI_keepAlive(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _keepAlive_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> allocateObjectByIdAsync(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_allocateObjectByIdAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> _iceI_allocateObjectByIdAsync(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_allocateObjectById_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?>(progress, cancel);
            _iceI_allocateObjectById(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _allocateObjectById_name = "allocateObjectById";

        private void _iceI_allocateObjectById(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?>(completed);
            outAsync.invoke(
                _allocateObjectById_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Ice.Identity.ice_write(ostr, iceP_id);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AllocationException)
                    {
                        throw;
                    }
                    catch(ObjectNotRegisteredException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> allocateObjectByTypeAsync(string type, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_allocateObjectByTypeAsync(type, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> _iceI_allocateObjectByTypeAsync(string iceP_type, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_allocateObjectByType_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?>(progress, cancel);
            _iceI_allocateObjectByType(iceP_type, context, synchronous, completed);
            return completed.Task;
        }

        private const string _allocateObjectByType_name = "allocateObjectByType";

        private void _iceI_allocateObjectByType(string iceP_type, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?>(completed);
            outAsync.invoke(
                _allocateObjectByType_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_type);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AllocationException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task releaseObjectAsync(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_releaseObjectAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_releaseObjectAsync(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_releaseObject_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_releaseObject(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _releaseObject_name = "releaseObject";

        private void _iceI_releaseObject(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _releaseObject_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Ice.Identity.ice_write(ostr, iceP_id);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(AllocationException)
                    {
                        throw;
                    }
                    catch(ObjectNotRegisteredException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task setAllocationTimeoutAsync(int timeout, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_setAllocationTimeoutAsync(timeout, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setAllocationTimeoutAsync(int iceP_timeout, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setAllocationTimeout(iceP_timeout, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setAllocationTimeout_name = "setAllocationTimeout";

        private void _iceI_setAllocationTimeout(int iceP_timeout, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setAllocationTimeout_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_timeout);
                });
        }

        public static SessionPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new SessionPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static SessionPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new SessionPrxHelper(b) : null;

        public static SessionPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static SessionPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new SessionPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static SessionPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Glacier2::Session",
            "::Ice::Object",
            "::IceGrid::Session"
        };

        public static string ice_staticId() => "::IceGrid::Session";

        public static void write(Ice.OutputStream ostr, SessionPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static SessionPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new SessionPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new SessionPrxHelper(reference);

        private SessionPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private SessionPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace IceGrid
{
    public abstract class SessionDisp_ : Ice.ObjectImpl, Session
    {
        public abstract void keepAlive(Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> allocateObjectByIdAsync(global::Ice.Identity id, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> allocateObjectByTypeAsync(string type, Ice.Current current);

        public abstract void releaseObject(global::Ice.Identity id, Ice.Current current);

        public abstract void setAllocationTimeout(int timeout, Ice.Current current);

        public abstract void destroy(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::IceGrid::Session";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "destroy" => global::Glacier2.Session.iceD_destroyAsync(this, request),
                "keepAlive" => Session.iceD_keepAliveAsync(this, request),
                "allocateObjectById" => Session.iceD_allocateObjectByIdAsync(this, request),
                "allocateObjectByType" => Session.iceD_allocateObjectByTypeAsync(this, request),
                "releaseObject" => Session.iceD_releaseObjectAsync(this, request),
                "setAllocationTimeout" => Session.iceD_setAllocationTimeoutAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace IceGrid
{
    public partial interface Session
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_keepAliveAsync(
            Session obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.keepAlive(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_allocateObjectByIdAsync(
            Session obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::Ice.Identity iceP_id;
            iceP_id = new global::Ice.Identity(istr);
            istr.endEncapsulation();
            var result = await obj.allocateObjectByIdAsync(iceP_id, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ostr.writeProxy(ret);
                });
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_allocateObjectByTypeAsync(
            Session obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_type;
            iceP_type = istr.readString();
            istr.endEncapsulation();
            var result = await obj.allocateObjectByTypeAsync(iceP_type, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    ostr.writeProxy(ret);
                });
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_releaseObjectAsync(
            Session obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::Ice.Identity iceP_id;
            iceP_id = new global::Ice.Identity(istr);
            istr.endEncapsulation();
            obj.releaseObject(iceP_id, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_setAllocationTimeoutAsync(
            Session obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            int iceP_timeout;
            iceP_timeout = istr.readInt();
            istr.endEncapsulation();
            obj.setAllocationTimeout(iceP_timeout, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }
}
