//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Exception.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Exception.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace IceGrid
{
    /// <summary>
    /// This exception is raised if an application does not exist.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::ApplicationNotExistException")]
    public partial class ApplicationNotExistException : Ice.UserException
    {
        public string name = "";

        public ApplicationNotExistException(string name)
        {
            global::System.ArgumentNullException.ThrowIfNull(name);
            this.name = name;
        }

        public ApplicationNotExistException()
        {
        }

        public override string ice_id() => "::IceGrid::ApplicationNotExistException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::ApplicationNotExistException", -1, true);
            ostr_.writeString(name);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if a server does not exist.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::ServerNotExistException")]
    public partial class ServerNotExistException : Ice.UserException
    {
        public string id = "";

        public ServerNotExistException(string id)
        {
            global::System.ArgumentNullException.ThrowIfNull(id);
            this.id = id;
        }

        public ServerNotExistException()
        {
        }

        public override string ice_id() => "::IceGrid::ServerNotExistException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::ServerNotExistException", -1, true);
            ostr_.writeString(id);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            id = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if a server failed to start.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::ServerStartException")]
    public partial class ServerStartException : Ice.UserException
    {
        public string id = "";

        public string reason = "";

        public ServerStartException(string id, string reason)
        {
            global::System.ArgumentNullException.ThrowIfNull(id);
            this.id = id;
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        public ServerStartException()
        {
        }

        public override string ice_id() => "::IceGrid::ServerStartException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::ServerStartException", -1, true);
            ostr_.writeString(id);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            id = istr_.readString();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if a server failed to stop.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::ServerStopException")]
    public partial class ServerStopException : Ice.UserException
    {
        public string id = "";

        public string reason = "";

        public ServerStopException(string id, string reason)
        {
            global::System.ArgumentNullException.ThrowIfNull(id);
            this.id = id;
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        public ServerStopException()
        {
        }

        public override string ice_id() => "::IceGrid::ServerStopException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::ServerStopException", -1, true);
            ostr_.writeString(id);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            id = istr_.readString();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if an adapter does not exist.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::AdapterNotExistException")]
    public partial class AdapterNotExistException : Ice.UserException
    {
        public string id = "";

        public AdapterNotExistException(string id)
        {
            global::System.ArgumentNullException.ThrowIfNull(id);
            this.id = id;
        }

        public AdapterNotExistException()
        {
        }

        public override string ice_id() => "::IceGrid::AdapterNotExistException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::AdapterNotExistException", -1, true);
            ostr_.writeString(id);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            id = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if an object already exists.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::ObjectExistsException")]
    public partial class ObjectExistsException : Ice.UserException
    {
        public global::Ice.Identity id;

        public ObjectExistsException(global::Ice.Identity id)
        {
            global::System.ArgumentNullException.ThrowIfNull(id);
            this.id = id;
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public ObjectExistsException()
        {
            this.id = null!;
        }

        public override string ice_id() => "::IceGrid::ObjectExistsException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::ObjectExistsException", -1, true);
            global::Ice.Identity.ice_write(ostr_, id);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            id = new global::Ice.Identity(istr_);
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if an object is not registered.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::ObjectNotRegisteredException")]
    public partial class ObjectNotRegisteredException : Ice.UserException
    {
        public global::Ice.Identity id;

        public ObjectNotRegisteredException(global::Ice.Identity id)
        {
            global::System.ArgumentNullException.ThrowIfNull(id);
            this.id = id;
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public ObjectNotRegisteredException()
        {
            this.id = null!;
        }

        public override string ice_id() => "::IceGrid::ObjectNotRegisteredException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::ObjectNotRegisteredException", -1, true);
            global::Ice.Identity.ice_write(ostr_, id);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            id = new global::Ice.Identity(istr_);
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if a node does not exist.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::NodeNotExistException")]
    public partial class NodeNotExistException : Ice.UserException
    {
        public string name = "";

        public NodeNotExistException(string name)
        {
            global::System.ArgumentNullException.ThrowIfNull(name);
            this.name = name;
        }

        public NodeNotExistException()
        {
        }

        public override string ice_id() => "::IceGrid::NodeNotExistException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::NodeNotExistException", -1, true);
            ostr_.writeString(name);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if a registry does not exist.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::RegistryNotExistException")]
    public partial class RegistryNotExistException : Ice.UserException
    {
        public string name = "";

        public RegistryNotExistException(string name)
        {
            global::System.ArgumentNullException.ThrowIfNull(name);
            this.name = name;
        }

        public RegistryNotExistException()
        {
        }

        public override string ice_id() => "::IceGrid::RegistryNotExistException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::RegistryNotExistException", -1, true);
            ostr_.writeString(name);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// An exception for deployment errors.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::DeploymentException")]
    public partial class DeploymentException : Ice.UserException
    {
        public string reason = "";

        public DeploymentException(string reason)
        {
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        public DeploymentException()
        {
        }

        public override string ice_id() => "::IceGrid::DeploymentException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::DeploymentException", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if a node could not be reached.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::NodeUnreachableException")]
    public partial class NodeUnreachableException : Ice.UserException
    {
        public string name = "";

        public string reason = "";

        public NodeUnreachableException(string name, string reason)
        {
            global::System.ArgumentNullException.ThrowIfNull(name);
            this.name = name;
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        public NodeUnreachableException()
        {
        }

        public override string ice_id() => "::IceGrid::NodeUnreachableException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::NodeUnreachableException", -1, true);
            ostr_.writeString(name);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if a server could not be reached.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::ServerUnreachableException")]
    public partial class ServerUnreachableException : Ice.UserException
    {
        public string name = "";

        public string reason = "";

        public ServerUnreachableException(string name, string reason)
        {
            global::System.ArgumentNullException.ThrowIfNull(name);
            this.name = name;
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        public ServerUnreachableException()
        {
        }

        public override string ice_id() => "::IceGrid::ServerUnreachableException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::ServerUnreachableException", -1, true);
            ostr_.writeString(name);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if a registry could not be reached.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::RegistryUnreachableException")]
    public partial class RegistryUnreachableException : Ice.UserException
    {
        public string name = "";

        public string reason = "";

        public RegistryUnreachableException(string name, string reason)
        {
            global::System.ArgumentNullException.ThrowIfNull(name);
            this.name = name;
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        public RegistryUnreachableException()
        {
        }

        public override string ice_id() => "::IceGrid::RegistryUnreachableException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::RegistryUnreachableException", -1, true);
            ostr_.writeString(name);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if an unknown signal was sent to to a server.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::BadSignalException")]
    public partial class BadSignalException : Ice.UserException
    {
        public string reason = "";

        public BadSignalException(string reason)
        {
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        public BadSignalException()
        {
        }

        public override string ice_id() => "::IceGrid::BadSignalException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::BadSignalException", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// his exception is raised if a registry lock wasn't acquired or is already held by a session.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::AccessDeniedException")]
    public partial class AccessDeniedException : Ice.UserException
    {
        public string lockUserId = "";

        public AccessDeniedException(string lockUserId)
        {
            global::System.ArgumentNullException.ThrowIfNull(lockUserId);
            this.lockUserId = lockUserId;
        }

        public AccessDeniedException()
        {
        }

        public override string ice_id() => "::IceGrid::AccessDeniedException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::AccessDeniedException", -1, true);
            ostr_.writeString(lockUserId);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            lockUserId = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if the allocation of an object failed.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::AllocationException")]
    public partial class AllocationException : Ice.UserException
    {
        public string reason = "";

        public AllocationException(string reason)
        {
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        public AllocationException()
        {
        }

        public override string ice_id() => "::IceGrid::AllocationException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::AllocationException", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if the request to allocate an object times out.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::AllocationTimeoutException")]
    public partial class AllocationTimeoutException : AllocationException
    {
        public AllocationTimeoutException(string reason) : base(reason)
        {
        }

        public AllocationTimeoutException()
        {
        }

        public override string ice_id() => "::IceGrid::AllocationTimeoutException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::AllocationTimeoutException", -1, false);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    /// <summary>
    /// This exception is raised if a client is denied the ability to create a session with IceGrid.
    /// </summary>
    [Ice.SliceTypeId("::IceGrid::PermissionDeniedException")]
    public partial class PermissionDeniedException : Ice.UserException
    {
        public string reason = "";

        public PermissionDeniedException(string reason)
        {
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        public PermissionDeniedException()
        {
        }

        public override string ice_id() => "::IceGrid::PermissionDeniedException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::PermissionDeniedException", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if an observer is already registered with the registry.
    /// </summary>
    /// <seealso cref="AdminSession.setObservers" />
    /// <seealso cref="AdminSession.setObserversByIdentity" />
    [Ice.SliceTypeId("::IceGrid::ObserverAlreadyRegisteredException")]
    public partial class ObserverAlreadyRegisteredException : Ice.UserException
    {
        public global::Ice.Identity id;

        public ObserverAlreadyRegisteredException(global::Ice.Identity id)
        {
            global::System.ArgumentNullException.ThrowIfNull(id);
            this.id = id;
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public ObserverAlreadyRegisteredException()
        {
            this.id = null!;
        }

        public override string ice_id() => "::IceGrid::ObserverAlreadyRegisteredException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::ObserverAlreadyRegisteredException", -1, true);
            global::Ice.Identity.ice_write(ostr_, id);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            id = new global::Ice.Identity(istr_);
            istr_.endSlice();
        }
    }

    /// <summary>
    /// This exception is raised if a file is not available.
    /// </summary>
    /// <seealso cref="AdminSession.openServerStdOut" />
    /// <seealso cref="AdminSession.openServerStdErr" />
    /// <seealso cref="AdminSession.openNodeStdOut" />
    /// <seealso cref="AdminSession.openNodeStdErr" />
    /// <seealso cref="AdminSession.openRegistryStdOut" />
    /// <seealso cref="AdminSession.openRegistryStdErr" />
    [Ice.SliceTypeId("::IceGrid::FileNotAvailableException")]
    public partial class FileNotAvailableException : Ice.UserException
    {
        public string reason = "";

        public FileNotAvailableException(string reason)
        {
            global::System.ArgumentNullException.ThrowIfNull(reason);
            this.reason = reason;
        }

        public FileNotAvailableException()
        {
        }

        public override string ice_id() => "::IceGrid::FileNotAvailableException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::FileNotAvailableException", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }
    }
}
