//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `UserAccountMapper.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("UserAccountMapper.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace IceGrid
{
    /// <summary>
    /// This exception is raised if a user account for a given session identifier can't be found.
    /// </summary>

    [Ice.SliceTypeId("::IceGrid::UserAccountNotFoundException")]
    public partial class UserAccountNotFoundException : Ice.UserException
    {
        public override string ice_id() => "::IceGrid::UserAccountNotFoundException";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::IceGrid::UserAccountNotFoundException", -1, true);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::IceGrid::UserAccountMapper")]
    public partial interface UserAccountMapper : Ice.Object
    {
        /// <summary>
        /// Get the name of the user account for the given user.
        /// This is used by IceGrid nodes to figure out the user
        ///  account to use to run servers.
        /// </summary>
        ///  <param name="user">The value of the server descriptor's user attribute. If this attribute is not
        ///  defined, and the server's activation mode is session, the default value of user
        ///  is the session identifier.
        ///  </param>
        /// <returns>The user account name.
        ///  </returns>
        /// <exception name="UserAccountNotFoundException">Raised if no user account is found for the given user.</exception>
        /// <param name="current">The Current object for the dispatch.</param>

        string getUserAccount(string user, Ice.Current current);
    }
}

namespace IceGrid
{
    /// <summary>
    /// A user account mapper object is used by IceGrid nodes to map session identifiers to user accounts.
    /// </summary>

    public interface UserAccountMapperPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// Get the name of the user account for the given user.
        /// This is used by IceGrid nodes to figure out the user
        ///  account to use to run servers.
        /// </summary>
        ///  <param name="user">The value of the server descriptor's user attribute. If this attribute is not
        ///  defined, and the server's activation mode is session, the default value of user
        ///  is the session identifier.
        ///  </param>
        /// <returns>The user account name.
        ///  </returns>
        /// <exception name="UserAccountNotFoundException">Raised if no user account is found for the given user.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        string getUserAccount(string user, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get the name of the user account for the given user.
        /// This is used by IceGrid nodes to figure out the user
        /// </summary>
        ///  <param name="user">The value of the server descriptor's user attribute. If this attribute is not
        ///  defined, and the server's activation mode is session, the default value of user
        ///  is the session identifier.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<string> getUserAccountAsync(string user, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace IceGrid
{
    public sealed class UserAccountMapperPrxHelper : Ice.ObjectPrxHelperBase, UserAccountMapperPrx
    {
        public string getUserAccount(string user, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getUserAccountAsync(user, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<string> getUserAccountAsync(string user, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getUserAccountAsync(user, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getUserAccountAsync(string iceP_user, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getUserAccount_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getUserAccount(iceP_user, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getUserAccount_name = "getUserAccount";

        private void _iceI_getUserAccount(string iceP_user, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getUserAccount_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_user);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(UserAccountNotFoundException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public static UserAccountMapperPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new UserAccountMapperPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static UserAccountMapperPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new UserAccountMapperPrxHelper(b) : null;

        public static UserAccountMapperPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static UserAccountMapperPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new UserAccountMapperPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static UserAccountMapperPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::UserAccountMapper"
        };

        public static string ice_staticId() => "::IceGrid::UserAccountMapper";

        public static void write(Ice.OutputStream ostr, UserAccountMapperPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static UserAccountMapperPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new UserAccountMapperPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new UserAccountMapperPrxHelper(reference);

        private UserAccountMapperPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private UserAccountMapperPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace IceGrid
{
    public abstract class UserAccountMapperDisp_ : Ice.ObjectImpl, UserAccountMapper
    {
        public abstract string getUserAccount(string user, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::IceGrid::UserAccountMapper";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "getUserAccount" => UserAccountMapper.iceD_getUserAccountAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace IceGrid
{
    public partial interface UserAccountMapper
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getUserAccountAsync(
            UserAccountMapper obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_user;
            iceP_user = istr.readString();
            istr.endEncapsulation();
            var ret = obj.getUserAccount(iceP_user, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeString(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }
}
