//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Registry.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceGrid
{
    /// <summary>
    /// Determines which load sampling interval to use.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public enum LoadSample
    {
        /// <summary>
        /// Sample every minute.
        /// </summary>

        LoadSample1,
        /// <summary>
        /// Sample every five minutes.
        /// </summary>

        LoadSample5,
        /// <summary>
        /// Sample every fifteen minutes.
        /// </summary>

        LoadSample15
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class LoadSampleHelper
    {
        public static void write(global::Ice.OutputStream ostr, LoadSample v)
        {
            ostr.writeEnum((int)v, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static LoadSample read(global::Ice.InputStream istr)
        {
            LoadSample v;
            v = (LoadSample)istr.readEnum(2);
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Query : global::Ice.Object, QueryOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Registry : global::Ice.Object, RegistryOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Locator : global::Ice.Object, LocatorOperations_, global::Ice.Locator
    {
    }
}

namespace IceGrid
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Query_findObjectById(global::Ice.ObjectPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Query_findObjectByType(global::Ice.ObjectPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Query_findObjectByTypeOnLeastLoadedNode(global::Ice.ObjectPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Query_findAllObjectsByType(global::Ice.ObjectPrx[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Query_findAllReplicas(global::Ice.ObjectPrx[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Registry_createSession(SessionPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Registry_createAdminSession(AdminSessionPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Registry_createSessionFromSecureConnection(SessionPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Registry_createAdminSessionFromSecureConnection(AdminSessionPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Registry_getSessionTimeout(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Registry_getACMTimeout(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Locator_getLocalRegistry(RegistryPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Locator_getLocalQuery(QueryPrx ret);
}

namespace IceGrid
{
    /// <summary>
    /// The IceGrid query interface.
    /// This interface is accessible to Ice clients who wish to look up well-known
    ///  objects.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface QueryPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Find a well-known object by identity.
        /// </summary>
        /// <param name="id">The identity.
        ///  </param>
        /// <returns>The proxy or null if no such object has been found.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx findObjectById(global::Ice.Identity id, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Find a well-known object by identity.
        /// </summary>
        /// <param name="id">The identity.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> findObjectByIdAsync(global::Ice.Identity id, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Find a well-known object by identity.
        /// </summary>
        /// <param name="id">The identity.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Query_findObjectById> begin_findObjectById(global::Ice.Identity id, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Find a well-known object by identity.
        /// </summary>
        /// <param name="id">The identity.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_findObjectById(global::Ice.Identity id, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Find a well-known object by identity.
        /// </summary>
        /// <param name="id">The identity.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_findObjectById(global::Ice.Identity id, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Find a well-known object by identity.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The proxy or null if no such object has been found.</returns>
        global::Ice.ObjectPrx end_findObjectById(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Find a well-known object by type.
        /// If there are several objects registered for the given type, the object is
        ///  randomly selected.
        /// </summary>
        ///  <param name="type">The object type.
        ///  </param>
        /// <returns>The proxy or null, if no such object has been found.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx findObjectByType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Find a well-known object by type.
        /// If there are several objects registered for the given type, the object is
        /// </summary>
        ///  <param name="type">The object type.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> findObjectByTypeAsync(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Find a well-known object by type.
        /// If there are several objects registered for the given type, the object is
        /// </summary>
        ///  <param name="type">The object type.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Query_findObjectByType> begin_findObjectByType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Find a well-known object by type.
        /// If there are several objects registered for the given type, the object is
        /// </summary>
        ///  <param name="type">The object type.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_findObjectByType(string type, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Find a well-known object by type.
        /// If there are several objects registered for the given type, the object is
        /// </summary>
        ///  <param name="type">The object type.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_findObjectByType(string type, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Find a well-known object by type.
        /// If there are several objects registered for the given type, the object is
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The proxy or null, if no such object has been found.</returns>
        global::Ice.ObjectPrx end_findObjectByType(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Find a well-known object by type on the least-loaded node.
        /// If the registry does not know which node hosts
        ///  the object (for example, because the object was registered with a direct proxy), the registry assumes the
        ///  object is hosted on a node that has a load average of 1.0.
        /// </summary>
        ///  <param name="type">The object type.
        ///  </param>
        /// <param name="sample">The sampling interval.
        ///  </param>
        /// <returns>The proxy or null, if no such object has been found.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Find a well-known object by type on the least-loaded node.
        /// If the registry does not know which node hosts
        /// </summary>
        ///  <param name="type">The object type.
        ///  </param>
        /// <param name="sample">The sampling interval.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> findObjectByTypeOnLeastLoadedNodeAsync(string type, LoadSample sample, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Find a well-known object by type on the least-loaded node.
        /// If the registry does not know which node hosts
        /// </summary>
        ///  <param name="type">The object type.
        ///  </param>
        /// <param name="sample">The sampling interval.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Query_findObjectByTypeOnLeastLoadedNode> begin_findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Find a well-known object by type on the least-loaded node.
        /// If the registry does not know which node hosts
        /// </summary>
        ///  <param name="type">The object type.
        ///  </param>
        /// <param name="sample">The sampling interval.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Find a well-known object by type on the least-loaded node.
        /// If the registry does not know which node hosts
        /// </summary>
        ///  <param name="type">The object type.
        ///  </param>
        /// <param name="sample">The sampling interval.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Find a well-known object by type on the least-loaded node.
        /// If the registry does not know which node hosts
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The proxy or null, if no such object has been found.</returns>
        global::Ice.ObjectPrx end_findObjectByTypeOnLeastLoadedNode(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Find all the well-known objects with the given type.
        /// </summary>
        /// <param name="type">The object type.
        ///  </param>
        /// <returns>The proxies or an empty sequence, if no such objects have been found.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx[] findAllObjectsByType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Find all the well-known objects with the given type.
        /// </summary>
        /// <param name="type">The object type.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx[]> findAllObjectsByTypeAsync(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Find all the well-known objects with the given type.
        /// </summary>
        /// <param name="type">The object type.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Query_findAllObjectsByType> begin_findAllObjectsByType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Find all the well-known objects with the given type.
        /// </summary>
        /// <param name="type">The object type.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_findAllObjectsByType(string type, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Find all the well-known objects with the given type.
        /// </summary>
        /// <param name="type">The object type.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_findAllObjectsByType(string type, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Find all the well-known objects with the given type.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The proxies or an empty sequence, if no such objects have been found.</returns>
        global::Ice.ObjectPrx[] end_findAllObjectsByType(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Find all the object replicas associated with the given proxy.
        /// If the given proxy is not an indirect proxy
        ///  from a replica group, an empty sequence is returned.
        /// </summary>
        ///  <param name="proxy">The object proxy.
        ///  </param>
        /// <returns>The proxies of each object replica or an empty sequence, if the given proxy is not from a replica
        ///  group.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.ObjectPrx[] findAllReplicas(global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Find all the object replicas associated with the given proxy.
        /// If the given proxy is not an indirect proxy
        /// </summary>
        ///  <param name="proxy">The object proxy.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx[]> findAllReplicasAsync(global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Find all the object replicas associated with the given proxy.
        /// If the given proxy is not an indirect proxy
        /// </summary>
        ///  <param name="proxy">The object proxy.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Query_findAllReplicas> begin_findAllReplicas(global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Find all the object replicas associated with the given proxy.
        /// If the given proxy is not an indirect proxy
        /// </summary>
        ///  <param name="proxy">The object proxy.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_findAllReplicas(global::Ice.ObjectPrx proxy, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Find all the object replicas associated with the given proxy.
        /// If the given proxy is not an indirect proxy
        /// </summary>
        ///  <param name="proxy">The object proxy.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_findAllReplicas(global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Find all the object replicas associated with the given proxy.
        /// If the given proxy is not an indirect proxy
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The proxies of each object replica or an empty sequence, if the given proxy is not from a replica
        ///  group.</returns>
        global::Ice.ObjectPrx[] end_findAllReplicas(global::Ice.AsyncResult asyncResult);
    }

    /// <summary>
    /// The IceGrid registry allows clients create sessions directly with the registry.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface RegistryPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Create a client session.
        /// </summary>
        /// <param name="userId">The user id.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <returns>A proxy for the newly created session.
        ///  </returns>
        /// <exception name="PermissionDeniedException">Raised if the password for the given user id is not correct, or if the
        ///  user is not allowed access.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        SessionPrx createSession(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create a client session.
        /// </summary>
        /// <param name="userId">The user id.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<SessionPrx> createSessionAsync(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Create a client session.
        /// </summary>
        /// <param name="userId">The user id.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Registry_createSession> begin_createSession(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create a client session.
        /// </summary>
        /// <param name="userId">The user id.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_createSession(string userId, string password, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create a client session.
        /// </summary>
        /// <param name="userId">The user id.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_createSession(string userId, string password, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create a client session.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A proxy for the newly created session.
        ///  </returns>
        SessionPrx end_createSession(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Create an administrative session.
        /// </summary>
        /// <returns>A proxy for the newly created session.
        ///  </returns>
        /// <param name="userId">The user id.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <exception name="PermissionDeniedException">Raised if the password for the given user id is not correct, or if the
        ///  user is not allowed access.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        AdminSessionPrx createAdminSession(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create an administrative session.
        /// </summary>
        /// <param name="userId">The user id.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<AdminSessionPrx> createAdminSessionAsync(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Create an administrative session.
        /// </summary>
        /// <param name="userId">The user id.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Registry_createAdminSession> begin_createAdminSession(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create an administrative session.
        /// </summary>
        /// <param name="userId">The user id.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_createAdminSession(string userId, string password, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create an administrative session.
        /// </summary>
        /// <param name="userId">The user id.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_createAdminSession(string userId, string password, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create an administrative session.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A proxy for the newly created session.
        ///  </returns>
        AdminSessionPrx end_createAdminSession(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Create a client session from a secure connection.
        /// </summary>
        /// <returns>A proxy for the newly created session.
        ///  </returns>
        /// <exception name="PermissionDeniedException">Raised if the password for the given user id is not correct, or if the
        ///  user is not allowed access.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        SessionPrx createSessionFromSecureConnection(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create a client session from a secure connection.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<SessionPrx> createSessionFromSecureConnectionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Create a client session from a secure connection.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Registry_createSessionFromSecureConnection> begin_createSessionFromSecureConnection(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create a client session from a secure connection.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_createSessionFromSecureConnection(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create a client session from a secure connection.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_createSessionFromSecureConnection(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create a client session from a secure connection.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A proxy for the newly created session.
        ///  </returns>
        SessionPrx end_createSessionFromSecureConnection(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Create an administrative session from a secure connection.
        /// </summary>
        /// <returns>A proxy for the newly created session.
        ///  </returns>
        /// <exception name="PermissionDeniedException">Raised if the password for the given user id is not correct, or if the
        ///  user is not allowed access.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        AdminSessionPrx createAdminSessionFromSecureConnection(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create an administrative session from a secure connection.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<AdminSessionPrx> createAdminSessionFromSecureConnectionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Create an administrative session from a secure connection.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Registry_createAdminSessionFromSecureConnection> begin_createAdminSessionFromSecureConnection(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create an administrative session from a secure connection.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_createAdminSessionFromSecureConnection(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create an administrative session from a secure connection.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_createAdminSessionFromSecureConnection(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create an administrative session from a secure connection.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A proxy for the newly created session.
        ///  </returns>
        AdminSessionPrx end_createAdminSessionFromSecureConnection(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Get the session timeout.
        /// If a client or administrative client doesn't call the session keepAlive method in
        ///  the time interval defined by this timeout, IceGrid might reap the session.
        /// </summary>
        ///  <returns>The timeout (in seconds).</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        int getSessionTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the session timeout.
        /// If a client or administrative client doesn't call the session keepAlive method in
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<int> getSessionTimeoutAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the session timeout.
        /// If a client or administrative client doesn't call the session keepAlive method in
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Registry_getSessionTimeout> begin_getSessionTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the session timeout.
        /// If a client or administrative client doesn't call the session keepAlive method in
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getSessionTimeout(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the session timeout.
        /// If a client or administrative client doesn't call the session keepAlive method in
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getSessionTimeout(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the session timeout.
        /// If a client or administrative client doesn't call the session keepAlive method in
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The timeout (in seconds).</returns>
        int end_getSessionTimeout(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Get the value of the ACM timeout.
        /// Clients supporting ACM connection heartbeats can enable them instead of
        ///  explicitly sending keep alives requests. This method is only available since Ice 3.6.
        /// </summary>
        ///  <returns>The timeout (in seconds).</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        int getACMTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the value of the ACM timeout.
        /// Clients supporting ACM connection heartbeats can enable them instead of
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<int> getACMTimeoutAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the value of the ACM timeout.
        /// Clients supporting ACM connection heartbeats can enable them instead of
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Registry_getACMTimeout> begin_getACMTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the value of the ACM timeout.
        /// Clients supporting ACM connection heartbeats can enable them instead of
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getACMTimeout(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the value of the ACM timeout.
        /// Clients supporting ACM connection heartbeats can enable them instead of
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getACMTimeout(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the value of the ACM timeout.
        /// Clients supporting ACM connection heartbeats can enable them instead of
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The timeout (in seconds).</returns>
        int end_getACMTimeout(global::Ice.AsyncResult asyncResult);
    }

    /// <summary>
    /// The IceGrid locator interface provides access to the Query and Registry object of the IceGrid
    ///  registry.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface LocatorPrx : global::Ice.LocatorPrx
    {
        /// <summary>
        /// Get the proxy of the registry object hosted by this IceGrid registry.
        /// </summary>
        /// <returns>The proxy of the registry object.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        RegistryPrx getLocalRegistry(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the proxy of the registry object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<RegistryPrx> getLocalRegistryAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the proxy of the registry object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Locator_getLocalRegistry> begin_getLocalRegistry(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the proxy of the registry object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getLocalRegistry(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the proxy of the registry object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getLocalRegistry(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the proxy of the registry object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The proxy of the registry object.</returns>
        RegistryPrx end_getLocalRegistry(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Get the proxy of the query object hosted by this IceGrid registry.
        /// </summary>
        /// <returns>The proxy of the query object.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        QueryPrx getLocalQuery(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the proxy of the query object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<QueryPrx> getLocalQueryAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the proxy of the query object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Locator_getLocalQuery> begin_getLocalQuery(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the proxy of the query object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getLocalQuery(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the proxy of the query object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getLocalQuery(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the proxy of the query object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The proxy of the query object.</returns>
        QueryPrx end_getLocalQuery(global::Ice.AsyncResult asyncResult);
    }
}

namespace IceGrid
{
    /// <summary>
    /// The IceGrid query interface.
    /// This interface is accessible to Ice clients who wish to look up well-known
    ///  objects.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface QueryOperations_
    {
        /// <summary>
        /// Find a well-known object by identity.
        /// </summary>
        /// <param name="id">The identity.
        ///  </param>
        /// <returns>The proxy or null if no such object has been found.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::Ice.ObjectPrx findObjectById(global::Ice.Identity id, global::Ice.Current current = null);

        /// <summary>
        /// Find a well-known object by type.
        /// If there are several objects registered for the given type, the object is
        ///  randomly selected.
        /// </summary>
        ///  <param name="type">The object type.
        ///  </param>
        /// <returns>The proxy or null, if no such object has been found.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::Ice.ObjectPrx findObjectByType(string type, global::Ice.Current current = null);

        /// <summary>
        /// Find a well-known object by type on the least-loaded node.
        /// If the registry does not know which node hosts
        ///  the object (for example, because the object was registered with a direct proxy), the registry assumes the
        ///  object is hosted on a node that has a load average of 1.0.
        /// </summary>
        ///  <param name="type">The object type.
        ///  </param>
        /// <param name="sample">The sampling interval.
        ///  </param>
        /// <returns>The proxy or null, if no such object has been found.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::Ice.ObjectPrx findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, global::Ice.Current current = null);

        /// <summary>
        /// Find all the well-known objects with the given type.
        /// </summary>
        /// <param name="type">The object type.
        ///  </param>
        /// <returns>The proxies or an empty sequence, if no such objects have been found.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::Ice.ObjectPrx[] findAllObjectsByType(string type, global::Ice.Current current = null);

        /// <summary>
        /// Find all the object replicas associated with the given proxy.
        /// If the given proxy is not an indirect proxy
        ///  from a replica group, an empty sequence is returned.
        /// </summary>
        ///  <param name="proxy">The object proxy.
        ///  </param>
        /// <returns>The proxies of each object replica or an empty sequence, if the given proxy is not from a replica
        ///  group.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::Ice.ObjectPrx[] findAllReplicas(global::Ice.ObjectPrx proxy, global::Ice.Current current = null);
    }

    /// <summary>
    /// The IceGrid registry allows clients create sessions directly with the registry.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface RegistryOperations_
    {
        /// <summary>
        /// Create a client session.
        /// </summary>
        /// <param name="userId">The user id.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <returns>A proxy for the newly created session.
        ///  </returns>
        /// <exception name="PermissionDeniedException">Raised if the password for the given user id is not correct, or if the
        ///  user is not allowed access.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        SessionPrx createSession(string userId, string password, global::Ice.Current current = null);

        /// <summary>
        /// Create an administrative session.
        /// </summary>
        /// <returns>A proxy for the newly created session.
        ///  </returns>
        /// <param name="userId">The user id.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <exception name="PermissionDeniedException">Raised if the password for the given user id is not correct, or if the
        ///  user is not allowed access.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        AdminSessionPrx createAdminSession(string userId, string password, global::Ice.Current current = null);

        /// <summary>
        /// Create a client session from a secure connection.
        /// </summary>
        /// <returns>A proxy for the newly created session.
        ///  </returns>
        /// <exception name="PermissionDeniedException">Raised if the password for the given user id is not correct, or if the
        ///  user is not allowed access.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        SessionPrx createSessionFromSecureConnection(global::Ice.Current current = null);

        /// <summary>
        /// Create an administrative session from a secure connection.
        /// </summary>
        /// <returns>A proxy for the newly created session.
        ///  </returns>
        /// <exception name="PermissionDeniedException">Raised if the password for the given user id is not correct, or if the
        ///  user is not allowed access.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        AdminSessionPrx createAdminSessionFromSecureConnection(global::Ice.Current current = null);

        /// <summary>
        /// Get the session timeout.
        /// If a client or administrative client doesn't call the session keepAlive method in
        ///  the time interval defined by this timeout, IceGrid might reap the session.
        /// </summary>
        ///  <returns>The timeout (in seconds).</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        int getSessionTimeout(global::Ice.Current current = null);

        /// <summary>
        /// Get the value of the ACM timeout.
        /// Clients supporting ACM connection heartbeats can enable them instead of
        ///  explicitly sending keep alives requests. This method is only available since Ice 3.6.
        /// </summary>
        ///  <returns>The timeout (in seconds).</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        int getACMTimeout(global::Ice.Current current = null);
    }

    /// <summary>
    /// The IceGrid locator interface provides access to the Query and Registry object of the IceGrid
    ///  registry.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface LocatorOperations_ : global::Ice.LocatorOperations_
    {
        /// <summary>
        /// Get the proxy of the registry object hosted by this IceGrid registry.
        /// </summary>
        /// <returns>The proxy of the registry object.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        RegistryPrx getLocalRegistry(global::Ice.Current current = null);

        /// <summary>
        /// Get the proxy of the query object hosted by this IceGrid registry.
        /// </summary>
        /// <returns>The proxy of the query object.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        QueryPrx getLocalQuery(global::Ice.Current current = null);
    }
}

namespace IceGrid
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class QueryPrxHelper : global::Ice.ObjectPrxHelperBase, QueryPrx
    {
        public QueryPrxHelper()
        {
        }

        #region Synchronous operations

        public global::Ice.ObjectPrx findObjectById(global::Ice.Identity id, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_findObjectByIdAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.ObjectPrx findObjectByType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_findObjectByTypeAsync(type, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.ObjectPrx findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_findObjectByTypeOnLeastLoadedNodeAsync(type, sample, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.ObjectPrx[] findAllObjectsByType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_findAllObjectsByTypeAsync(type, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.ObjectPrx[] findAllReplicas(global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_findAllReplicasAsync(proxy, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> findObjectByIdAsync(global::Ice.Identity id, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_findObjectByIdAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_findObjectByIdAsync(global::Ice.Identity iceP_id, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findObjectById_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_findObjectById(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findObjectById_name = "findObjectById";

        private void _iceI_findObjectById(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _findObjectById_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.Identity.ice_write(ostr, iceP_id);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> findObjectByTypeAsync(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_findObjectByTypeAsync(type, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_findObjectByTypeAsync(string iceP_type, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findObjectByType_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_findObjectByType(iceP_type, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findObjectByType_name = "findObjectByType";

        private void _iceI_findObjectByType(string iceP_type, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _findObjectByType_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_type);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> findObjectByTypeOnLeastLoadedNodeAsync(string type, LoadSample sample, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_findObjectByTypeOnLeastLoadedNodeAsync(type, sample, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_findObjectByTypeOnLeastLoadedNodeAsync(string iceP_type, LoadSample iceP_sample, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findObjectByTypeOnLeastLoadedNode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_findObjectByTypeOnLeastLoadedNode(iceP_type, iceP_sample, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findObjectByTypeOnLeastLoadedNode_name = "findObjectByTypeOnLeastLoadedNode";

        private void _iceI_findObjectByTypeOnLeastLoadedNode(string iceP_type, LoadSample iceP_sample, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _findObjectByTypeOnLeastLoadedNode_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_type);
                    ostr.writeEnum((int)iceP_sample, 2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx[]> findAllObjectsByTypeAsync(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_findAllObjectsByTypeAsync(type, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx[]> _iceI_findAllObjectsByTypeAsync(string iceP_type, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findAllObjectsByType_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx[]>(progress, cancel);
            _iceI_findAllObjectsByType(iceP_type, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findAllObjectsByType_name = "findAllObjectsByType";

        private void _iceI_findAllObjectsByType(string iceP_type, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx[]>(completed);
            outAsync.invoke(
                _findAllObjectsByType_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_type);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx[] ret;
                    ret = global::Ice.ObjectProxySeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx[]> findAllReplicasAsync(global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_findAllReplicasAsync(proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx[]> _iceI_findAllReplicasAsync(global::Ice.ObjectPrx iceP_proxy, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findAllReplicas_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx[]>(progress, cancel);
            _iceI_findAllReplicas(iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findAllReplicas_name = "findAllReplicas";

        private void _iceI_findAllReplicas(global::Ice.ObjectPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx[]>(completed);
            outAsync.invoke(
                _findAllReplicas_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeProxy(iceP_proxy);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx[] ret;
                    ret = global::Ice.ObjectProxySeqHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Query_findObjectById> begin_findObjectById(global::Ice.Identity id, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_findObjectById(id, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_findObjectById(global::Ice.Identity id, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findObjectById(id, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_findObjectById(global::Ice.Identity id, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findObjectById(id, context, callback, cookie, false);
        }

        public global::Ice.ObjectPrx end_findObjectById(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findObjectById_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Query_findObjectById> begin_findObjectById(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_findObjectById_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Query_findObjectById, global::Ice.ObjectPrx>(
                (Callback_Query_findObjectById cb, global::Ice.ObjectPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _findObjectById_name, cookie, completedCallback);
            _iceI_findObjectById(iceP_id, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Query_findObjectByType> begin_findObjectByType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_findObjectByType(type, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_findObjectByType(string type, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findObjectByType(type, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_findObjectByType(string type, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findObjectByType(type, context, callback, cookie, false);
        }

        public global::Ice.ObjectPrx end_findObjectByType(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findObjectByType_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Query_findObjectByType> begin_findObjectByType(string iceP_type, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_findObjectByType_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Query_findObjectByType, global::Ice.ObjectPrx>(
                (Callback_Query_findObjectByType cb, global::Ice.ObjectPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _findObjectByType_name, cookie, completedCallback);
            _iceI_findObjectByType(iceP_type, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Query_findObjectByTypeOnLeastLoadedNode> begin_findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_findObjectByTypeOnLeastLoadedNode(type, sample, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findObjectByTypeOnLeastLoadedNode(type, sample, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findObjectByTypeOnLeastLoadedNode(type, sample, context, callback, cookie, false);
        }

        public global::Ice.ObjectPrx end_findObjectByTypeOnLeastLoadedNode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findObjectByTypeOnLeastLoadedNode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Query_findObjectByTypeOnLeastLoadedNode> begin_findObjectByTypeOnLeastLoadedNode(string iceP_type, LoadSample iceP_sample, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_findObjectByTypeOnLeastLoadedNode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Query_findObjectByTypeOnLeastLoadedNode, global::Ice.ObjectPrx>(
                (Callback_Query_findObjectByTypeOnLeastLoadedNode cb, global::Ice.ObjectPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _findObjectByTypeOnLeastLoadedNode_name, cookie, completedCallback);
            _iceI_findObjectByTypeOnLeastLoadedNode(iceP_type, iceP_sample, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Query_findAllObjectsByType> begin_findAllObjectsByType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_findAllObjectsByType(type, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_findAllObjectsByType(string type, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findAllObjectsByType(type, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_findAllObjectsByType(string type, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findAllObjectsByType(type, context, callback, cookie, false);
        }

        public global::Ice.ObjectPrx[] end_findAllObjectsByType(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findAllObjectsByType_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Query_findAllObjectsByType> begin_findAllObjectsByType(string iceP_type, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_findAllObjectsByType_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Query_findAllObjectsByType, global::Ice.ObjectPrx[]>(
                (Callback_Query_findAllObjectsByType cb, global::Ice.ObjectPrx[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _findAllObjectsByType_name, cookie, completedCallback);
            _iceI_findAllObjectsByType(iceP_type, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Query_findAllReplicas> begin_findAllReplicas(global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_findAllReplicas(proxy, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_findAllReplicas(global::Ice.ObjectPrx proxy, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findAllReplicas(proxy, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_findAllReplicas(global::Ice.ObjectPrx proxy, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findAllReplicas(proxy, context, callback, cookie, false);
        }

        public global::Ice.ObjectPrx[] end_findAllReplicas(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findAllReplicas_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Query_findAllReplicas> begin_findAllReplicas(global::Ice.ObjectPrx iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_findAllReplicas_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Query_findAllReplicas, global::Ice.ObjectPrx[]>(
                (Callback_Query_findAllReplicas cb, global::Ice.ObjectPrx[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _findAllReplicas_name, cookie, completedCallback);
            _iceI_findAllReplicas(iceP_proxy, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static QueryPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            QueryPrx r = b as QueryPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                QueryPrxHelper h = new QueryPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static QueryPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            QueryPrx r = b as QueryPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                QueryPrxHelper h = new QueryPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static QueryPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    QueryPrxHelper h = new QueryPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static QueryPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    QueryPrxHelper h = new QueryPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static QueryPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            QueryPrx r = b as QueryPrx;
            if(r == null)
            {
                QueryPrxHelper h = new QueryPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static QueryPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            QueryPrxHelper h = new QueryPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::Query"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, QueryPrx v)
        {
            ostr.writeProxy(v);
        }

        public static QueryPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                QueryPrxHelper result = new QueryPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class RegistryPrxHelper : global::Ice.ObjectPrxHelperBase, RegistryPrx
    {
        public RegistryPrxHelper()
        {
        }

        #region Synchronous operations

        public SessionPrx createSession(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_createSessionAsync(userId, password, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public AdminSessionPrx createAdminSession(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_createAdminSessionAsync(userId, password, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SessionPrx createSessionFromSecureConnection(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_createSessionFromSecureConnectionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public AdminSessionPrx createAdminSessionFromSecureConnection(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_createAdminSessionFromSecureConnectionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int getSessionTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getSessionTimeoutAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int getACMTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getACMTimeoutAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<SessionPrx> createSessionAsync(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_createSessionAsync(userId, password, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SessionPrx> _iceI_createSessionAsync(string iceP_userId, string iceP_password, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createSession_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SessionPrx>(progress, cancel);
            _iceI_createSession(iceP_userId, iceP_password, context, synchronous, completed);
            return completed.Task;
        }

        private const string _createSession_name = "createSession";

        private void _iceI_createSession(string iceP_userId, string iceP_password, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SessionPrx>(completed);
            outAsync.invoke(
                _createSession_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_userId);
                    ostr.writeString(iceP_password);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    SessionPrx ret;
                    ret = SessionPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<AdminSessionPrx> createAdminSessionAsync(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_createAdminSessionAsync(userId, password, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<AdminSessionPrx> _iceI_createAdminSessionAsync(string iceP_userId, string iceP_password, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createAdminSession_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<AdminSessionPrx>(progress, cancel);
            _iceI_createAdminSession(iceP_userId, iceP_password, context, synchronous, completed);
            return completed.Task;
        }

        private const string _createAdminSession_name = "createAdminSession";

        private void _iceI_createAdminSession(string iceP_userId, string iceP_password, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<AdminSessionPrx>(completed);
            outAsync.invoke(
                _createAdminSession_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_userId);
                    ostr.writeString(iceP_password);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    AdminSessionPrx ret;
                    ret = AdminSessionPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SessionPrx> createSessionFromSecureConnectionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_createSessionFromSecureConnectionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SessionPrx> _iceI_createSessionFromSecureConnectionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createSessionFromSecureConnection_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SessionPrx>(progress, cancel);
            _iceI_createSessionFromSecureConnection(context, synchronous, completed);
            return completed.Task;
        }

        private const string _createSessionFromSecureConnection_name = "createSessionFromSecureConnection";

        private void _iceI_createSessionFromSecureConnection(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SessionPrx>(completed);
            outAsync.invoke(
                _createSessionFromSecureConnection_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    SessionPrx ret;
                    ret = SessionPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<AdminSessionPrx> createAdminSessionFromSecureConnectionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_createAdminSessionFromSecureConnectionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<AdminSessionPrx> _iceI_createAdminSessionFromSecureConnectionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createAdminSessionFromSecureConnection_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<AdminSessionPrx>(progress, cancel);
            _iceI_createAdminSessionFromSecureConnection(context, synchronous, completed);
            return completed.Task;
        }

        private const string _createAdminSessionFromSecureConnection_name = "createAdminSessionFromSecureConnection";

        private void _iceI_createAdminSessionFromSecureConnection(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<AdminSessionPrx>(completed);
            outAsync.invoke(
                _createAdminSessionFromSecureConnection_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    AdminSessionPrx ret;
                    ret = AdminSessionPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> getSessionTimeoutAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getSessionTimeoutAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getSessionTimeoutAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getSessionTimeout_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getSessionTimeout(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getSessionTimeout_name = "getSessionTimeout";

        private void _iceI_getSessionTimeout(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getSessionTimeout_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> getACMTimeoutAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getACMTimeoutAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getACMTimeoutAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getACMTimeout_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getACMTimeout(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getACMTimeout_name = "getACMTimeout";

        private void _iceI_getACMTimeout(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getACMTimeout_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Registry_createSession> begin_createSession(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_createSession(userId, password, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_createSession(string userId, string password, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_createSession(userId, password, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_createSession(string userId, string password, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_createSession(userId, password, context, callback, cookie, false);
        }

        public SessionPrx end_createSession(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _createSession_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<SessionPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Registry_createSession> begin_createSession(string iceP_userId, string iceP_password, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_createSession_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Registry_createSession, SessionPrx>(
                (Callback_Registry_createSession cb, SessionPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _createSession_name, cookie, completedCallback);
            _iceI_createSession(iceP_userId, iceP_password, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Registry_createAdminSession> begin_createAdminSession(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_createAdminSession(userId, password, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_createAdminSession(string userId, string password, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_createAdminSession(userId, password, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_createAdminSession(string userId, string password, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_createAdminSession(userId, password, context, callback, cookie, false);
        }

        public AdminSessionPrx end_createAdminSession(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _createAdminSession_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<AdminSessionPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Registry_createAdminSession> begin_createAdminSession(string iceP_userId, string iceP_password, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_createAdminSession_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Registry_createAdminSession, AdminSessionPrx>(
                (Callback_Registry_createAdminSession cb, AdminSessionPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _createAdminSession_name, cookie, completedCallback);
            _iceI_createAdminSession(iceP_userId, iceP_password, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Registry_createSessionFromSecureConnection> begin_createSessionFromSecureConnection(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_createSessionFromSecureConnection(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_createSessionFromSecureConnection(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_createSessionFromSecureConnection(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_createSessionFromSecureConnection(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_createSessionFromSecureConnection(context, callback, cookie, false);
        }

        public SessionPrx end_createSessionFromSecureConnection(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _createSessionFromSecureConnection_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<SessionPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Registry_createSessionFromSecureConnection> begin_createSessionFromSecureConnection(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_createSessionFromSecureConnection_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Registry_createSessionFromSecureConnection, SessionPrx>(
                (Callback_Registry_createSessionFromSecureConnection cb, SessionPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _createSessionFromSecureConnection_name, cookie, completedCallback);
            _iceI_createSessionFromSecureConnection(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Registry_createAdminSessionFromSecureConnection> begin_createAdminSessionFromSecureConnection(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_createAdminSessionFromSecureConnection(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_createAdminSessionFromSecureConnection(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_createAdminSessionFromSecureConnection(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_createAdminSessionFromSecureConnection(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_createAdminSessionFromSecureConnection(context, callback, cookie, false);
        }

        public AdminSessionPrx end_createAdminSessionFromSecureConnection(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _createAdminSessionFromSecureConnection_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<AdminSessionPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Registry_createAdminSessionFromSecureConnection> begin_createAdminSessionFromSecureConnection(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_createAdminSessionFromSecureConnection_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Registry_createAdminSessionFromSecureConnection, AdminSessionPrx>(
                (Callback_Registry_createAdminSessionFromSecureConnection cb, AdminSessionPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _createAdminSessionFromSecureConnection_name, cookie, completedCallback);
            _iceI_createAdminSessionFromSecureConnection(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Registry_getSessionTimeout> begin_getSessionTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getSessionTimeout(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getSessionTimeout(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSessionTimeout(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getSessionTimeout(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSessionTimeout(context, callback, cookie, false);
        }

        public int end_getSessionTimeout(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getSessionTimeout_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Registry_getSessionTimeout> begin_getSessionTimeout(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getSessionTimeout_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Registry_getSessionTimeout, int>(
                (Callback_Registry_getSessionTimeout cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getSessionTimeout_name, cookie, completedCallback);
            _iceI_getSessionTimeout(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Registry_getACMTimeout> begin_getACMTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getACMTimeout(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getACMTimeout(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getACMTimeout(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getACMTimeout(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getACMTimeout(context, callback, cookie, false);
        }

        public int end_getACMTimeout(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getACMTimeout_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Registry_getACMTimeout> begin_getACMTimeout(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getACMTimeout_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Registry_getACMTimeout, int>(
                (Callback_Registry_getACMTimeout cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getACMTimeout_name, cookie, completedCallback);
            _iceI_getACMTimeout(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static RegistryPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RegistryPrx r = b as RegistryPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                RegistryPrxHelper h = new RegistryPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static RegistryPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            RegistryPrx r = b as RegistryPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                RegistryPrxHelper h = new RegistryPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static RegistryPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    RegistryPrxHelper h = new RegistryPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static RegistryPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    RegistryPrxHelper h = new RegistryPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static RegistryPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RegistryPrx r = b as RegistryPrx;
            if(r == null)
            {
                RegistryPrxHelper h = new RegistryPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static RegistryPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            RegistryPrxHelper h = new RegistryPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::Registry"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, RegistryPrx v)
        {
            ostr.writeProxy(v);
        }

        public static RegistryPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                RegistryPrxHelper result = new RegistryPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class LocatorPrxHelper : global::Ice.ObjectPrxHelperBase, LocatorPrx
    {
        public LocatorPrxHelper()
        {
        }

        #region Synchronous operations

        public global::Ice.ObjectPrx findObjectById(global::Ice.Identity id, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_findObjectByIdAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.ObjectPrx findAdapterById(string id, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_findAdapterByIdAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.LocatorRegistryPrx getRegistry(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getRegistryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public RegistryPrx getLocalRegistry(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getLocalRegistryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public QueryPrx getLocalQuery(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getLocalQueryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> findObjectByIdAsync(global::Ice.Identity id, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_findObjectByIdAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_findObjectByIdAsync(global::Ice.Identity iceP_id, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findObjectById_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_findObjectById(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findObjectById_name = "findObjectById";

        private void _iceI_findObjectById(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _findObjectById_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.Identity.ice_write(ostr, iceP_id);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Ice.ObjectNotFoundException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> findAdapterByIdAsync(string id, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_findAdapterByIdAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_findAdapterByIdAsync(string iceP_id, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findAdapterById_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
            _iceI_findAdapterById(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findAdapterById_name = "findAdapterById";

        private void _iceI_findAdapterById(string iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
            outAsync.invoke(
                _findAdapterById_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_id);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Ice.AdapterNotFoundException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.LocatorRegistryPrx> getRegistryAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getRegistryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.LocatorRegistryPrx> _iceI_getRegistryAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getRegistry_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.LocatorRegistryPrx>(progress, cancel);
            _iceI_getRegistry(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getRegistry_name = "getRegistry";

        private void _iceI_getRegistry(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.LocatorRegistryPrx>(completed);
            outAsync.invoke(
                _getRegistry_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.LocatorRegistryPrx ret;
                    ret = global::Ice.LocatorRegistryPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<RegistryPrx> getLocalRegistryAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getLocalRegistryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<RegistryPrx> _iceI_getLocalRegistryAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getLocalRegistry_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<RegistryPrx>(progress, cancel);
            _iceI_getLocalRegistry(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getLocalRegistry_name = "getLocalRegistry";

        private void _iceI_getLocalRegistry(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<RegistryPrx>(completed);
            outAsync.invoke(
                _getLocalRegistry_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    RegistryPrx ret;
                    ret = RegistryPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<QueryPrx> getLocalQueryAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getLocalQueryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<QueryPrx> _iceI_getLocalQueryAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getLocalQuery_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<QueryPrx>(progress, cancel);
            _iceI_getLocalQuery(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getLocalQuery_name = "getLocalQuery";

        private void _iceI_getLocalQuery(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<QueryPrx>(completed);
            outAsync.invoke(
                _getLocalQuery_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    QueryPrx ret;
                    ret = QueryPrxHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<global::Ice.Callback_Locator_findObjectById> begin_findObjectById(global::Ice.Identity id, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_findObjectById(id, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_findObjectById(global::Ice.Identity id, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findObjectById(id, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_findObjectById(global::Ice.Identity id, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findObjectById(id, context, callback, cookie, false);
        }

        public global::Ice.ObjectPrx end_findObjectById(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findObjectById_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<global::Ice.Callback_Locator_findObjectById> begin_findObjectById(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_findObjectById_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<global::Ice.Callback_Locator_findObjectById, global::Ice.ObjectPrx>(
                (global::Ice.Callback_Locator_findObjectById cb, global::Ice.ObjectPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _findObjectById_name, cookie, completedCallback);
            _iceI_findObjectById(iceP_id, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<global::Ice.Callback_Locator_findAdapterById> begin_findAdapterById(string id, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_findAdapterById(id, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_findAdapterById(string id, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findAdapterById(id, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_findAdapterById(string id, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_findAdapterById(id, context, callback, cookie, false);
        }

        public global::Ice.ObjectPrx end_findAdapterById(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findAdapterById_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<global::Ice.Callback_Locator_findAdapterById> begin_findAdapterById(string iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_findAdapterById_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<global::Ice.Callback_Locator_findAdapterById, global::Ice.ObjectPrx>(
                (global::Ice.Callback_Locator_findAdapterById cb, global::Ice.ObjectPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _findAdapterById_name, cookie, completedCallback);
            _iceI_findAdapterById(iceP_id, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<global::Ice.Callback_Locator_getRegistry> begin_getRegistry(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getRegistry(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getRegistry(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getRegistry(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getRegistry(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getRegistry(context, callback, cookie, false);
        }

        public global::Ice.LocatorRegistryPrx end_getRegistry(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getRegistry_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.LocatorRegistryPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<global::Ice.Callback_Locator_getRegistry> begin_getRegistry(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getRegistry_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<global::Ice.Callback_Locator_getRegistry, global::Ice.LocatorRegistryPrx>(
                (global::Ice.Callback_Locator_getRegistry cb, global::Ice.LocatorRegistryPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getRegistry_name, cookie, completedCallback);
            _iceI_getRegistry(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Locator_getLocalRegistry> begin_getLocalRegistry(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getLocalRegistry(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getLocalRegistry(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getLocalRegistry(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getLocalRegistry(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getLocalRegistry(context, callback, cookie, false);
        }

        public RegistryPrx end_getLocalRegistry(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLocalRegistry_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<RegistryPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Locator_getLocalRegistry> begin_getLocalRegistry(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getLocalRegistry_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Locator_getLocalRegistry, RegistryPrx>(
                (Callback_Locator_getLocalRegistry cb, RegistryPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getLocalRegistry_name, cookie, completedCallback);
            _iceI_getLocalRegistry(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Locator_getLocalQuery> begin_getLocalQuery(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getLocalQuery(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getLocalQuery(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getLocalQuery(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getLocalQuery(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getLocalQuery(context, callback, cookie, false);
        }

        public QueryPrx end_getLocalQuery(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLocalQuery_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<QueryPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Locator_getLocalQuery> begin_getLocalQuery(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getLocalQuery_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Locator_getLocalQuery, QueryPrx>(
                (Callback_Locator_getLocalQuery cb, QueryPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getLocalQuery_name, cookie, completedCallback);
            _iceI_getLocalQuery(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static LocatorPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LocatorPrx r = b as LocatorPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                LocatorPrxHelper h = new LocatorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LocatorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            LocatorPrx r = b as LocatorPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                LocatorPrxHelper h = new LocatorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LocatorPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    LocatorPrxHelper h = new LocatorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static LocatorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    LocatorPrxHelper h = new LocatorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static LocatorPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LocatorPrx r = b as LocatorPrx;
            if(r == null)
            {
                LocatorPrxHelper h = new LocatorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LocatorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            LocatorPrxHelper h = new LocatorPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Locator",
            "::Ice::Object",
            "::IceGrid::Locator"
        };

        public static string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, LocatorPrx v)
        {
            ostr.writeProxy(v);
        }

        public static LocatorPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                LocatorPrxHelper result = new LocatorPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace IceGrid
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class QueryDisp_ : global::Ice.ObjectImpl, Query
    {
        #region Slice operations

        public abstract global::Ice.ObjectPrx findObjectById(global::Ice.Identity id, global::Ice.Current current = null);

        public abstract global::Ice.ObjectPrx findObjectByType(string type, global::Ice.Current current = null);

        public abstract global::Ice.ObjectPrx findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, global::Ice.Current current = null);

        public abstract global::Ice.ObjectPrx[] findAllObjectsByType(string type, global::Ice.Current current = null);

        public abstract global::Ice.ObjectPrx[] findAllReplicas(global::Ice.ObjectPrx proxy, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::Query"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_findObjectById(Query obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Identity iceP_id;
            iceP_id = null;
            iceP_id = global::Ice.Identity.ice_read(istr);
            inS.endReadParams();
            var ret = obj.findObjectById(iceP_id, current);
            var ostr = inS.startWriteParams();
            ostr.writeProxy(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_findObjectByType(Query obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_type;
            iceP_type = istr.readString();
            inS.endReadParams();
            var ret = obj.findObjectByType(iceP_type, current);
            var ostr = inS.startWriteParams();
            ostr.writeProxy(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_findObjectByTypeOnLeastLoadedNode(Query obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_type;
            LoadSample iceP_sample;
            iceP_type = istr.readString();
            iceP_sample = (LoadSample)istr.readEnum(2);
            inS.endReadParams();
            var ret = obj.findObjectByTypeOnLeastLoadedNode(iceP_type, iceP_sample, current);
            var ostr = inS.startWriteParams();
            ostr.writeProxy(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_findAllObjectsByType(Query obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_type;
            iceP_type = istr.readString();
            inS.endReadParams();
            var ret = obj.findAllObjectsByType(iceP_type, current);
            var ostr = inS.startWriteParams();
            global::Ice.ObjectProxySeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_findAllReplicas(Query obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            global::Ice.ObjectPrx iceP_proxy;
            iceP_proxy = istr.readProxy();
            inS.endReadParams();
            var ret = obj.findAllReplicas(iceP_proxy, current);
            var ostr = inS.startWriteParams();
            global::Ice.ObjectProxySeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "findAllObjectsByType",
            "findAllReplicas",
            "findObjectById",
            "findObjectByType",
            "findObjectByTypeOnLeastLoadedNode",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_findAllObjectsByType(this, inS, current);
                }
                case 1:
                {
                    return iceD_findAllReplicas(this, inS, current);
                }
                case 2:
                {
                    return iceD_findObjectById(this, inS, current);
                }
                case 3:
                {
                    return iceD_findObjectByType(this, inS, current);
                }
                case 4:
                {
                    return iceD_findObjectByTypeOnLeastLoadedNode(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class RegistryDisp_ : global::Ice.ObjectImpl, Registry
    {
        #region Slice operations

        public abstract SessionPrx createSession(string userId, string password, global::Ice.Current current = null);

        public abstract AdminSessionPrx createAdminSession(string userId, string password, global::Ice.Current current = null);

        public abstract SessionPrx createSessionFromSecureConnection(global::Ice.Current current = null);

        public abstract AdminSessionPrx createAdminSessionFromSecureConnection(global::Ice.Current current = null);

        public abstract int getSessionTimeout(global::Ice.Current current = null);

        public abstract int getACMTimeout(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::Registry"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_createSession(Registry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_userId;
            string iceP_password;
            iceP_userId = istr.readString();
            iceP_password = istr.readString();
            inS.endReadParams();
            var ret = obj.createSession(iceP_userId, iceP_password, current);
            var ostr = inS.startWriteParams();
            SessionPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_createAdminSession(Registry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_userId;
            string iceP_password;
            iceP_userId = istr.readString();
            iceP_password = istr.readString();
            inS.endReadParams();
            var ret = obj.createAdminSession(iceP_userId, iceP_password, current);
            var ostr = inS.startWriteParams();
            AdminSessionPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_createSessionFromSecureConnection(Registry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.createSessionFromSecureConnection(current);
            var ostr = inS.startWriteParams();
            SessionPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_createAdminSessionFromSecureConnection(Registry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.createAdminSessionFromSecureConnection(current);
            var ostr = inS.startWriteParams();
            AdminSessionPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getSessionTimeout(Registry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getSessionTimeout(current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getACMTimeout(Registry obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getACMTimeout(current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "createAdminSession",
            "createAdminSessionFromSecureConnection",
            "createSession",
            "createSessionFromSecureConnection",
            "getACMTimeout",
            "getSessionTimeout",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_createAdminSession(this, inS, current);
                }
                case 1:
                {
                    return iceD_createAdminSessionFromSecureConnection(this, inS, current);
                }
                case 2:
                {
                    return iceD_createSession(this, inS, current);
                }
                case 3:
                {
                    return iceD_createSessionFromSecureConnection(this, inS, current);
                }
                case 4:
                {
                    return iceD_getACMTimeout(this, inS, current);
                }
                case 5:
                {
                    return iceD_getSessionTimeout(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class LocatorDisp_ : global::Ice.ObjectImpl, Locator
    {
        #region Slice operations

        public abstract RegistryPrx getLocalRegistry(global::Ice.Current current = null);

        public abstract QueryPrx getLocalQuery(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> findAdapterByIdAsync(string id, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> findObjectByIdAsync(global::Ice.Identity id, global::Ice.Current current = null);

        public abstract global::Ice.LocatorRegistryPrx getRegistry(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Locator",
            "::Ice::Object",
            "::IceGrid::Locator"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[2];
        }

        public static new string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getLocalRegistry(Locator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getLocalRegistry(current);
            var ostr = inS.startWriteParams();
            RegistryPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getLocalQuery(Locator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getLocalQuery(current);
            var ostr = inS.startWriteParams();
            QueryPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "findAdapterById",
            "findObjectById",
            "getLocalQuery",
            "getLocalRegistry",
            "getRegistry",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.LocatorDisp_.iceD_findAdapterById(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.LocatorDisp_.iceD_findObjectById(this, inS, current);
                }
                case 2:
                {
                    return iceD_getLocalQuery(this, inS, current);
                }
                case 3:
                {
                    return iceD_getLocalRegistry(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.LocatorDisp_.iceD_getRegistry(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
