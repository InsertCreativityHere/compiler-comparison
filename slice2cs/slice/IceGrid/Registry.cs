// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Registry.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("Registry.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace IceGrid
{
    /// <summary>
    /// Determines which load sampling interval to use.
    /// </summary>
    public enum LoadSample
    {
        /// <summary>
        /// Sample every minute.
        /// </summary>
        LoadSample1,
        /// <summary>
        /// Sample every five minutes.
        /// </summary>
        LoadSample5,
        /// <summary>
        /// Sample every fifteen minutes.
        /// </summary>
        LoadSample15
    }

    public sealed class LoadSampleHelper
    {
        public static void write(Ice.OutputStream ostr, LoadSample v)
        {
            ostr.writeEnum((int)v, 2);
        }

        public static LoadSample read(Ice.InputStream istr)
        {
            LoadSample v;
            v = (LoadSample)istr.readEnum(2);
            return v;
        }
    }

    [Ice.SliceTypeId("::IceGrid::Query")]
    public partial interface Query : Ice.Object
    {
        /// <summary>
        /// Find a well-known object by identity.
        /// </summary>
        /// <param name="id">
        /// The identity.
        /// </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// The proxy or null if no such object has been found.
        /// </returns>
        global::Ice.ObjectPrx? findObjectById(global::Ice.Identity id, Ice.Current current);

        /// <summary>
        /// Find a well-known object by type. If there are several objects registered for the given type, the object is
        /// randomly selected.
        /// </summary>
        /// <param name="type">
        /// The object type.
        /// </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// The proxy or null, if no such object has been found.
        /// </returns>
        global::Ice.ObjectPrx? findObjectByType(string type, Ice.Current current);

        /// <summary>
        /// Find a well-known object by type on the least-loaded node. If the registry does not know which node hosts
        /// the object (for example, because the object was registered with a direct proxy), the registry assumes the
        /// object is hosted on a node that has a load average of 1.0.
        /// </summary>
        /// <param name="type">
        /// The object type.
        /// </param>
        /// <param name="sample">
        /// The sampling interval.
        /// </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// The proxy or null, if no such object has been found.
        /// </returns>
        global::Ice.ObjectPrx? findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, Ice.Current current);

        /// <summary>
        /// Find all the well-known objects with the given type.
        /// </summary>
        /// <param name="type">
        /// The object type.
        /// </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// The proxies or an empty sequence, if no such objects have been found.
        /// </returns>
        global::Ice.ObjectPrx?[] findAllObjectsByType(string type, Ice.Current current);

        /// <summary>
        /// Find all the object replicas associated with the given proxy. If the given proxy is not an indirect proxy
        /// from a replica group, an empty sequence is returned.
        /// </summary>
        /// <param name="proxy">
        /// The object proxy.
        /// </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// The proxies of each object replica or an empty sequence, if the given proxy is not from a replica
        /// group.
        /// </returns>
        global::Ice.ObjectPrx?[] findAllReplicas(global::Ice.ObjectPrx? proxy, Ice.Current current);
    }

    [Ice.SliceTypeId("::IceGrid::Registry")]
    public partial interface Registry : Ice.Object
    {
        /// <summary>
        /// Create a client session.
        /// </summary>
        /// <param name="userId">
        /// The user id.
        /// </param>
        /// <param name="password">
        /// The password for the given user id.
        /// </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// A proxy for the newly created session. The returned proxy is never null.
        /// </returns>
        /// <exception cref="IceGrid.PermissionDeniedException">
        /// Raised if the password for the given user id is not correct, or if the
        /// user is not allowed access.
        /// </exception>
        SessionPrx? createSession(string userId, string password, Ice.Current current);

        /// <summary>
        /// Create an administrative session.
        /// </summary>
        /// <param name="userId">
        /// The user id.
        /// </param>
        /// <param name="password">
        /// The password for the given user id.
        /// </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// A proxy for the newly created session. The returned proxy is never null.
        /// </returns>
        /// <exception cref="IceGrid.PermissionDeniedException">
        /// Raised if the password for the given user id is not correct, or if the
        /// user is not allowed access.
        /// </exception>
        AdminSessionPrx? createAdminSession(string userId, string password, Ice.Current current);

        /// <summary>
        /// Create a client session from a secure connection.
        /// </summary>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// A proxy for the newly created session. The returned proxy is never null.
        /// </returns>
        /// <exception cref="IceGrid.PermissionDeniedException">
        /// Raised if the password for the given user id is not correct, or if the
        /// user is not allowed access.
        /// </exception>
        SessionPrx? createSessionFromSecureConnection(Ice.Current current);

        /// <summary>
        /// Create an administrative session from a secure connection.
        /// </summary>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// A proxy for the newly created session. The returned proxy is never null.
        /// </returns>
        /// <exception cref="IceGrid.PermissionDeniedException">
        /// Raised if the password for the given user id is not correct, or if the
        /// user is not allowed access.
        /// </exception>
        AdminSessionPrx? createAdminSessionFromSecureConnection(Ice.Current current);

        /// <summary>
        /// Gets the session timeout. An Ice 3.7 or earlier client can use this value to determine how often it needs to
        /// send heartbeats (using ACM) or call <see cref="Session.keepAlive" /> (resp. <see cref="AdminSession.keepAlive" />) to keep
        /// a session alive in the IceGrid registry.
        /// </summary>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// The session timeout (in seconds).
        /// </returns>
        [global::System.Obsolete]
        int getSessionTimeout(Ice.Current current);
    }

    [Ice.SliceTypeId("::IceGrid::Locator")]
    public partial interface Locator : global::Ice.Locator
    {
        /// <summary>
        /// Get the proxy of the registry object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// The proxy of the registry object. The returned proxy is never null.
        /// </returns>
        RegistryPrx? getLocalRegistry(Ice.Current current);

        /// <summary>
        /// Get the proxy of the query object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>
        /// The proxy of the query object. The returned proxy is never null.
        /// </returns>
        QueryPrx? getLocalQuery(Ice.Current current);
    }
}

namespace IceGrid
{
    /// <summary>
    /// The IceGrid query interface. This interface is accessible to Ice clients who wish to look up well-known
    /// objects.
    /// </summary>
    public interface QueryPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// Find a well-known object by identity.
        /// </summary>
        /// <param name="id">
        /// The identity.
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// The proxy or null if no such object has been found.
        /// </returns>
        global::Ice.ObjectPrx? findObjectById(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Find a well-known object by identity.
        /// </summary>
        /// <param name="id">
        /// The identity.
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> findObjectByIdAsync(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Find a well-known object by type. If there are several objects registered for the given type, the object is
        /// randomly selected.
        /// </summary>
        /// <param name="type">
        /// The object type.
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// The proxy or null, if no such object has been found.
        /// </returns>
        global::Ice.ObjectPrx? findObjectByType(string type, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Find a well-known object by type. If there are several objects registered for the given type, the object is
        /// randomly selected.
        /// </summary>
        /// <param name="type">
        /// The object type.
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> findObjectByTypeAsync(string type, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Find a well-known object by type on the least-loaded node. If the registry does not know which node hosts
        /// the object (for example, because the object was registered with a direct proxy), the registry assumes the
        /// object is hosted on a node that has a load average of 1.0.
        /// </summary>
        /// <param name="type">
        /// The object type.
        /// </param>
        /// <param name="sample">
        /// The sampling interval.
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// The proxy or null, if no such object has been found.
        /// </returns>
        global::Ice.ObjectPrx? findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Find a well-known object by type on the least-loaded node. If the registry does not know which node hosts
        /// the object (for example, because the object was registered with a direct proxy), the registry assumes the
        /// object is hosted on a node that has a load average of 1.0.
        /// </summary>
        /// <param name="type">
        /// The object type.
        /// </param>
        /// <param name="sample">
        /// The sampling interval.
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> findObjectByTypeOnLeastLoadedNodeAsync(string type, LoadSample sample, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Find all the well-known objects with the given type.
        /// </summary>
        /// <param name="type">
        /// The object type.
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// The proxies or an empty sequence, if no such objects have been found.
        /// </returns>
        global::Ice.ObjectPrx?[] findAllObjectsByType(string type, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Find all the well-known objects with the given type.
        /// </summary>
        /// <param name="type">
        /// The object type.
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?[]> findAllObjectsByTypeAsync(string type, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Find all the object replicas associated with the given proxy. If the given proxy is not an indirect proxy
        /// from a replica group, an empty sequence is returned.
        /// </summary>
        /// <param name="proxy">
        /// The object proxy.
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// The proxies of each object replica or an empty sequence, if the given proxy is not from a replica
        /// group.
        /// </returns>
        global::Ice.ObjectPrx?[] findAllReplicas(global::Ice.ObjectPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Find all the object replicas associated with the given proxy. If the given proxy is not an indirect proxy
        /// from a replica group, an empty sequence is returned.
        /// </summary>
        /// <param name="proxy">
        /// The object proxy.
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?[]> findAllReplicasAsync(global::Ice.ObjectPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// The IceGrid registry allows clients create sessions directly with the registry.
    /// </summary>
    /// <seealso cref="Session" />
    /// <seealso cref="AdminSession" />
    public interface RegistryPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// Create a client session.
        /// </summary>
        /// <param name="userId">
        /// The user id.
        /// </param>
        /// <param name="password">
        /// The password for the given user id.
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// A proxy for the newly created session. The returned proxy is never null.
        /// </returns>
        /// <exception cref="IceGrid.PermissionDeniedException">
        /// Raised if the password for the given user id is not correct, or if the
        /// user is not allowed access.
        /// </exception>
        SessionPrx? createSession(string userId, string password, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Create a client session.
        /// </summary>
        /// <param name="userId">
        /// The user id.
        /// </param>
        /// <param name="password">
        /// The password for the given user id.
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        /// <exception cref="IceGrid.PermissionDeniedException">
        /// Raised if the password for the given user id is not correct, or if the
        /// user is not allowed access.
        /// </exception>
        global::System.Threading.Tasks.Task<SessionPrx?> createSessionAsync(string userId, string password, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Create an administrative session.
        /// </summary>
        /// <param name="userId">
        /// The user id.
        /// </param>
        /// <param name="password">
        /// The password for the given user id.
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// A proxy for the newly created session. The returned proxy is never null.
        /// </returns>
        /// <exception cref="IceGrid.PermissionDeniedException">
        /// Raised if the password for the given user id is not correct, or if the
        /// user is not allowed access.
        /// </exception>
        AdminSessionPrx? createAdminSession(string userId, string password, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Create an administrative session.
        /// </summary>
        /// <param name="userId">
        /// The user id.
        /// </param>
        /// <param name="password">
        /// The password for the given user id.
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        /// <exception cref="IceGrid.PermissionDeniedException">
        /// Raised if the password for the given user id is not correct, or if the
        /// user is not allowed access.
        /// </exception>
        global::System.Threading.Tasks.Task<AdminSessionPrx?> createAdminSessionAsync(string userId, string password, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Create a client session from a secure connection.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// A proxy for the newly created session. The returned proxy is never null.
        /// </returns>
        /// <exception cref="IceGrid.PermissionDeniedException">
        /// Raised if the password for the given user id is not correct, or if the
        /// user is not allowed access.
        /// </exception>
        SessionPrx? createSessionFromSecureConnection(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Create a client session from a secure connection.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        /// <exception cref="IceGrid.PermissionDeniedException">
        /// Raised if the password for the given user id is not correct, or if the
        /// user is not allowed access.
        /// </exception>
        global::System.Threading.Tasks.Task<SessionPrx?> createSessionFromSecureConnectionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Create an administrative session from a secure connection.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// A proxy for the newly created session. The returned proxy is never null.
        /// </returns>
        /// <exception cref="IceGrid.PermissionDeniedException">
        /// Raised if the password for the given user id is not correct, or if the
        /// user is not allowed access.
        /// </exception>
        AdminSessionPrx? createAdminSessionFromSecureConnection(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Create an administrative session from a secure connection.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        /// <exception cref="IceGrid.PermissionDeniedException">
        /// Raised if the password for the given user id is not correct, or if the
        /// user is not allowed access.
        /// </exception>
        global::System.Threading.Tasks.Task<AdminSessionPrx?> createAdminSessionFromSecureConnectionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Gets the session timeout. An Ice 3.7 or earlier client can use this value to determine how often it needs to
        /// send heartbeats (using ACM) or call <see cref="Session.keepAlive" /> (resp. <see cref="AdminSession.keepAlive" />) to keep
        /// a session alive in the IceGrid registry.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// The session timeout (in seconds).
        /// </returns>
        [global::System.Obsolete]
        int getSessionTimeout(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Gets the session timeout. An Ice 3.7 or earlier client can use this value to determine how often it needs to
        /// send heartbeats (using ACM) or call <see cref="Session.keepAlive" /> (resp. <see cref="AdminSession.keepAlive" />) to keep
        /// a session alive in the IceGrid registry.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        [global::System.Obsolete]
        global::System.Threading.Tasks.Task<int> getSessionTimeoutAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// The IceGrid locator interface provides access to the <see cref="Query" /> and <see cref="Registry" /> object of the IceGrid
    /// registry.
    /// </summary>
    /// <seealso cref="Query" />
    /// <seealso cref="Registry" />
    public interface LocatorPrx : global::Ice.LocatorPrx
    {
        /// <summary>
        /// Get the proxy of the registry object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// The proxy of the registry object. The returned proxy is never null.
        /// </returns>
        RegistryPrx? getLocalRegistry(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get the proxy of the registry object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<RegistryPrx?> getLocalRegistryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get the proxy of the query object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>
        /// The proxy of the query object. The returned proxy is never null.
        /// </returns>
        QueryPrx? getLocalQuery(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get the proxy of the query object hosted by this IceGrid registry.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<QueryPrx?> getLocalQueryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace IceGrid
{
    public sealed class QueryPrxHelper : Ice.ObjectPrxHelperBase, QueryPrx
    {
        public global::Ice.ObjectPrx? findObjectById(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_findObjectByIdAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.ObjectPrx? findObjectByType(string type, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_findObjectByTypeAsync(type, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.ObjectPrx? findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_findObjectByTypeOnLeastLoadedNodeAsync(type, sample, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.ObjectPrx?[] findAllObjectsByType(string type, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_findAllObjectsByTypeAsync(type, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.ObjectPrx?[] findAllReplicas(global::Ice.ObjectPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_findAllReplicasAsync(proxy, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> findObjectByIdAsync(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_findObjectByIdAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> _iceI_findObjectByIdAsync(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findObjectById_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?>(progress, cancel);
            _iceI_findObjectById(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findObjectById_name = "findObjectById";

        private void _iceI_findObjectById(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?>(completed);
            outAsync.invoke(
                _findObjectById_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Ice.Identity.ice_write(ostr, iceP_id);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> findObjectByTypeAsync(string type, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_findObjectByTypeAsync(type, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> _iceI_findObjectByTypeAsync(string iceP_type, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findObjectByType_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?>(progress, cancel);
            _iceI_findObjectByType(iceP_type, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findObjectByType_name = "findObjectByType";

        private void _iceI_findObjectByType(string iceP_type, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?>(completed);
            outAsync.invoke(
                _findObjectByType_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_type);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> findObjectByTypeOnLeastLoadedNodeAsync(string type, LoadSample sample, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_findObjectByTypeOnLeastLoadedNodeAsync(type, sample, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> _iceI_findObjectByTypeOnLeastLoadedNodeAsync(string iceP_type, LoadSample iceP_sample, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findObjectByTypeOnLeastLoadedNode_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?>(progress, cancel);
            _iceI_findObjectByTypeOnLeastLoadedNode(iceP_type, iceP_sample, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findObjectByTypeOnLeastLoadedNode_name = "findObjectByTypeOnLeastLoadedNode";

        private void _iceI_findObjectByTypeOnLeastLoadedNode(string iceP_type, LoadSample iceP_sample, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?>(completed);
            outAsync.invoke(
                _findObjectByTypeOnLeastLoadedNode_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_type);
                    ostr.writeEnum((int)iceP_sample, 2);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?[]> findAllObjectsByTypeAsync(string type, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_findAllObjectsByTypeAsync(type, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?[]> _iceI_findAllObjectsByTypeAsync(string iceP_type, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findAllObjectsByType_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?[]>(progress, cancel);
            _iceI_findAllObjectsByType(iceP_type, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findAllObjectsByType_name = "findAllObjectsByType";

        private void _iceI_findAllObjectsByType(string iceP_type, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?[]>(completed);
            outAsync.invoke(
                _findAllObjectsByType_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_type);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx?[] ret;
                    ret = global::Ice.ObjectProxySeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?[]> findAllReplicasAsync(global::Ice.ObjectPrx? proxy, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_findAllReplicasAsync(proxy, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?[]> _iceI_findAllReplicasAsync(global::Ice.ObjectPrx? iceP_proxy, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findAllReplicas_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?[]>(progress, cancel);
            _iceI_findAllReplicas(iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findAllReplicas_name = "findAllReplicas";

        private void _iceI_findAllReplicas(global::Ice.ObjectPrx? iceP_proxy, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?[]>(completed);
            outAsync.invoke(
                _findAllReplicas_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeProxy(iceP_proxy);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx?[] ret;
                    ret = global::Ice.ObjectProxySeqHelper.read(istr);
                    return ret;
                });
        }

        public static QueryPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new QueryPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static QueryPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new QueryPrxHelper(b) : null;

        public static QueryPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static QueryPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new QueryPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static QueryPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::Query"
        };

        public static string ice_staticId() => "::IceGrid::Query";

        public static void write(Ice.OutputStream ostr, QueryPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static QueryPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new QueryPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new QueryPrxHelper(reference);

        private QueryPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private QueryPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    public sealed class RegistryPrxHelper : Ice.ObjectPrxHelperBase, RegistryPrx
    {
        public SessionPrx? createSession(string userId, string password, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_createSessionAsync(userId, password, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public AdminSessionPrx? createAdminSession(string userId, string password, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_createAdminSessionAsync(userId, password, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public SessionPrx? createSessionFromSecureConnection(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_createSessionFromSecureConnectionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public AdminSessionPrx? createAdminSessionFromSecureConnection(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_createAdminSessionFromSecureConnectionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int getSessionTimeout(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getSessionTimeoutAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<SessionPrx?> createSessionAsync(string userId, string password, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_createSessionAsync(userId, password, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SessionPrx?> _iceI_createSessionAsync(string iceP_userId, string iceP_password, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createSession_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<SessionPrx?>(progress, cancel);
            _iceI_createSession(iceP_userId, iceP_password, context, synchronous, completed);
            return completed.Task;
        }

        private const string _createSession_name = "createSession";

        private void _iceI_createSession(string iceP_userId, string iceP_password, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SessionPrx?>(completed);
            outAsync.invoke(
                _createSession_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_userId);
                    ostr.writeString(iceP_password);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    SessionPrx? ret;
                    ret = SessionPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<AdminSessionPrx?> createAdminSessionAsync(string userId, string password, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_createAdminSessionAsync(userId, password, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<AdminSessionPrx?> _iceI_createAdminSessionAsync(string iceP_userId, string iceP_password, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createAdminSession_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<AdminSessionPrx?>(progress, cancel);
            _iceI_createAdminSession(iceP_userId, iceP_password, context, synchronous, completed);
            return completed.Task;
        }

        private const string _createAdminSession_name = "createAdminSession";

        private void _iceI_createAdminSession(string iceP_userId, string iceP_password, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<AdminSessionPrx?>(completed);
            outAsync.invoke(
                _createAdminSession_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_userId);
                    ostr.writeString(iceP_password);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    AdminSessionPrx? ret;
                    ret = AdminSessionPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SessionPrx?> createSessionFromSecureConnectionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_createSessionFromSecureConnectionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SessionPrx?> _iceI_createSessionFromSecureConnectionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createSessionFromSecureConnection_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<SessionPrx?>(progress, cancel);
            _iceI_createSessionFromSecureConnection(context, synchronous, completed);
            return completed.Task;
        }

        private const string _createSessionFromSecureConnection_name = "createSessionFromSecureConnection";

        private void _iceI_createSessionFromSecureConnection(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SessionPrx?>(completed);
            outAsync.invoke(
                _createSessionFromSecureConnection_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    SessionPrx? ret;
                    ret = SessionPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<AdminSessionPrx?> createAdminSessionFromSecureConnectionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_createAdminSessionFromSecureConnectionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<AdminSessionPrx?> _iceI_createAdminSessionFromSecureConnectionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createAdminSessionFromSecureConnection_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<AdminSessionPrx?>(progress, cancel);
            _iceI_createAdminSessionFromSecureConnection(context, synchronous, completed);
            return completed.Task;
        }

        private const string _createAdminSessionFromSecureConnection_name = "createAdminSessionFromSecureConnection";

        private void _iceI_createAdminSessionFromSecureConnection(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<AdminSessionPrx?>(completed);
            outAsync.invoke(
                _createAdminSessionFromSecureConnection_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    AdminSessionPrx? ret;
                    ret = AdminSessionPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> getSessionTimeoutAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getSessionTimeoutAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getSessionTimeoutAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getSessionTimeout_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getSessionTimeout(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getSessionTimeout_name = "getSessionTimeout";

        private void _iceI_getSessionTimeout(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getSessionTimeout_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public static RegistryPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new RegistryPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static RegistryPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new RegistryPrxHelper(b) : null;

        public static RegistryPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static RegistryPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new RegistryPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static RegistryPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceGrid::Registry"
        };

        public static string ice_staticId() => "::IceGrid::Registry";

        public static void write(Ice.OutputStream ostr, RegistryPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static RegistryPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new RegistryPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new RegistryPrxHelper(reference);

        private RegistryPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private RegistryPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    public sealed class LocatorPrxHelper : Ice.ObjectPrxHelperBase, LocatorPrx
    {
        public global::Ice.ObjectPrx? findObjectById(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_findObjectByIdAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.ObjectPrx? findAdapterById(string id, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_findAdapterByIdAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.LocatorRegistryPrx? getRegistry(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getRegistryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public RegistryPrx? getLocalRegistry(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getLocalRegistryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public QueryPrx? getLocalQuery(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getLocalQueryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> findObjectByIdAsync(global::Ice.Identity id, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_findObjectByIdAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> _iceI_findObjectByIdAsync(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findObjectById_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?>(progress, cancel);
            _iceI_findObjectById(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findObjectById_name = "findObjectById";

        private void _iceI_findObjectById(global::Ice.Identity iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?>(completed);
            outAsync.invoke(
                _findObjectById_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Ice.Identity.ice_write(ostr, iceP_id);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Ice.ObjectNotFoundException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> findAdapterByIdAsync(string id, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_findAdapterByIdAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> _iceI_findAdapterByIdAsync(string iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_findAdapterById_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?>(progress, cancel);
            _iceI_findAdapterById(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findAdapterById_name = "findAdapterById";

        private void _iceI_findAdapterById(string iceP_id, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?>(completed);
            outAsync.invoke(
                _findAdapterById_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_id);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Ice.AdapterNotFoundException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.LocatorRegistryPrx?> getRegistryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getRegistryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.LocatorRegistryPrx?> _iceI_getRegistryAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getRegistry_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.LocatorRegistryPrx?>(progress, cancel);
            _iceI_getRegistry(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getRegistry_name = "getRegistry";

        private void _iceI_getRegistry(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.LocatorRegistryPrx?>(completed);
            outAsync.invoke(
                _getRegistry_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.LocatorRegistryPrx? ret;
                    ret = global::Ice.LocatorRegistryPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<RegistryPrx?> getLocalRegistryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getLocalRegistryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<RegistryPrx?> _iceI_getLocalRegistryAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getLocalRegistry_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<RegistryPrx?>(progress, cancel);
            _iceI_getLocalRegistry(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getLocalRegistry_name = "getLocalRegistry";

        private void _iceI_getLocalRegistry(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<RegistryPrx?>(completed);
            outAsync.invoke(
                _getLocalRegistry_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    RegistryPrx? ret;
                    ret = RegistryPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<QueryPrx?> getLocalQueryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getLocalQueryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<QueryPrx?> _iceI_getLocalQueryAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getLocalQuery_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<QueryPrx?>(progress, cancel);
            _iceI_getLocalQuery(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getLocalQuery_name = "getLocalQuery";

        private void _iceI_getLocalQuery(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<QueryPrx?>(completed);
            outAsync.invoke(
                _getLocalQuery_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    QueryPrx? ret;
                    ret = QueryPrxHelper.read(istr);
                    return ret;
                });
        }

        public static LocatorPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new LocatorPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static LocatorPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new LocatorPrxHelper(b) : null;

        public static LocatorPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LocatorPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new LocatorPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LocatorPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Locator",
            "::Ice::Object",
            "::IceGrid::Locator"
        };

        public static string ice_staticId() => "::IceGrid::Locator";

        public static void write(Ice.OutputStream ostr, LocatorPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static LocatorPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new LocatorPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new LocatorPrxHelper(reference);

        private LocatorPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private LocatorPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace IceGrid
{
    public abstract class QueryDisp_ : Ice.ObjectImpl, Query
    {
        public abstract global::Ice.ObjectPrx? findObjectById(global::Ice.Identity id, Ice.Current current);

        public abstract global::Ice.ObjectPrx? findObjectByType(string type, Ice.Current current);

        public abstract global::Ice.ObjectPrx? findObjectByTypeOnLeastLoadedNode(string type, LoadSample sample, Ice.Current current);

        public abstract global::Ice.ObjectPrx?[] findAllObjectsByType(string type, Ice.Current current);

        public abstract global::Ice.ObjectPrx?[] findAllReplicas(global::Ice.ObjectPrx? proxy, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::IceGrid::Query";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "findObjectById" => Query.iceD_findObjectByIdAsync(this, request),
                "findObjectByType" => Query.iceD_findObjectByTypeAsync(this, request),
                "findObjectByTypeOnLeastLoadedNode" => Query.iceD_findObjectByTypeOnLeastLoadedNodeAsync(this, request),
                "findAllObjectsByType" => Query.iceD_findAllObjectsByTypeAsync(this, request),
                "findAllReplicas" => Query.iceD_findAllReplicasAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    public abstract class RegistryDisp_ : Ice.ObjectImpl, Registry
    {
        public abstract SessionPrx? createSession(string userId, string password, Ice.Current current);

        public abstract AdminSessionPrx? createAdminSession(string userId, string password, Ice.Current current);

        public abstract SessionPrx? createSessionFromSecureConnection(Ice.Current current);

        public abstract AdminSessionPrx? createAdminSessionFromSecureConnection(Ice.Current current);

        public abstract int getSessionTimeout(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::IceGrid::Registry";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "createSession" => Registry.iceD_createSessionAsync(this, request),
                "createAdminSession" => Registry.iceD_createAdminSessionAsync(this, request),
                "createSessionFromSecureConnection" => Registry.iceD_createSessionFromSecureConnectionAsync(this, request),
                "createAdminSessionFromSecureConnection" => Registry.iceD_createAdminSessionFromSecureConnectionAsync(this, request),
                "getSessionTimeout" => Registry.iceD_getSessionTimeoutAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    public abstract class LocatorDisp_ : Ice.ObjectImpl, Locator
    {
        public abstract global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> findObjectByIdAsync(global::Ice.Identity id, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> findAdapterByIdAsync(string id, Ice.Current current);

        public abstract global::Ice.LocatorRegistryPrx? getRegistry(Ice.Current current);

        public abstract RegistryPrx? getLocalRegistry(Ice.Current current);

        public abstract QueryPrx? getLocalQuery(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::IceGrid::Locator";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "findObjectById" => global::Ice.Locator.iceD_findObjectByIdAsync(this, request),
                "findAdapterById" => global::Ice.Locator.iceD_findAdapterByIdAsync(this, request),
                "getRegistry" => global::Ice.Locator.iceD_getRegistryAsync(this, request),
                "getLocalRegistry" => Locator.iceD_getLocalRegistryAsync(this, request),
                "getLocalQuery" => Locator.iceD_getLocalQueryAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace IceGrid
{
    public partial interface Query
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_findObjectByIdAsync(
            Query obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::Ice.Identity iceP_id;
            iceP_id = new global::Ice.Identity(istr);
            istr.endEncapsulation();
            var ret = obj.findObjectById(iceP_id, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeProxy(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_findObjectByTypeAsync(
            Query obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_type;
            iceP_type = istr.readString();
            istr.endEncapsulation();
            var ret = obj.findObjectByType(iceP_type, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeProxy(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_findObjectByTypeOnLeastLoadedNodeAsync(
            Query obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_type;
            LoadSample iceP_sample;
            iceP_type = istr.readString();
            iceP_sample = (LoadSample)istr.readEnum(2);
            istr.endEncapsulation();
            var ret = obj.findObjectByTypeOnLeastLoadedNode(iceP_type, iceP_sample, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeProxy(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_findAllObjectsByTypeAsync(
            Query obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_type;
            iceP_type = istr.readString();
            istr.endEncapsulation();
            var ret = obj.findAllObjectsByType(iceP_type, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            global::Ice.ObjectProxySeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_findAllReplicasAsync(
            Query obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::Ice.ObjectPrx? iceP_proxy;
            iceP_proxy = istr.readProxy();
            istr.endEncapsulation();
            var ret = obj.findAllReplicas(iceP_proxy, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            global::Ice.ObjectProxySeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }

    public partial interface Registry
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_createSessionAsync(
            Registry obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_userId;
            string iceP_password;
            iceP_userId = istr.readString();
            iceP_password = istr.readString();
            istr.endEncapsulation();
            var ret = obj.createSession(iceP_userId, iceP_password, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            SessionPrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_createAdminSessionAsync(
            Registry obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_userId;
            string iceP_password;
            iceP_userId = istr.readString();
            iceP_password = istr.readString();
            istr.endEncapsulation();
            var ret = obj.createAdminSession(iceP_userId, iceP_password, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            AdminSessionPrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_createSessionFromSecureConnectionAsync(
            Registry obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.createSessionFromSecureConnection(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            SessionPrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_createAdminSessionFromSecureConnectionAsync(
            Registry obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.createAdminSessionFromSecureConnection(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            AdminSessionPrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getSessionTimeoutAsync(
            Registry obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getSessionTimeout(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeInt(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }

    public partial interface Locator
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getLocalRegistryAsync(
            Locator obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getLocalRegistry(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            RegistryPrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getLocalQueryAsync(
            Locator obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getLocalQuery(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            QueryPrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }
}
