//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Glacier2
{
    /// <summary>
    /// This exception is raised if an attempt to create a new session failed.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class CannotCreateSessionException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string reason;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
            this.reason = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public CannotCreateSessionException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public CannotCreateSessionException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(string reason)
        {
            this.reason = reason;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public CannotCreateSessionException(string reason)
        {
            _initDM(reason);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public CannotCreateSessionException(string reason, global::System.Exception ex) : base(ex)
        {
            _initDM(reason);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::Glacier2::CannotCreateSessionException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override global::Ice.SlicedData ice_getSlicedData()
        {
            return slicedData_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override void iceWrite(global::Ice.OutputStream ostr_)
        {
            ostr_.startException(slicedData_);
            iceWriteImpl(ostr_);
            ostr_.endException();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override void iceRead(global::Ice.InputStream istr_)
        {
            istr_.startException();
            iceReadImpl(istr_);
            slicedData_ = istr_.endException(true);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Glacier2::CannotCreateSessionException", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }

        protected global::Ice.SlicedData slicedData_;

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Session : global::Ice.Object, SessionOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface StringSet : global::Ice.Object, StringSetOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface IdentitySet : global::Ice.Object, IdentitySetOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface SessionControl : global::Ice.Object, SessionControlOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface SessionManager : global::Ice.Object, SessionManagerOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface SSLSessionManager : global::Ice.Object, SSLSessionManagerOperations_
    {
    }
}

namespace Glacier2
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Session_destroy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_StringSet_add();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_StringSet_remove();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_StringSet_get(string[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_IdentitySet_add();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_IdentitySet_remove();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_IdentitySet_get(global::Ice.Identity[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_SessionControl_categories(StringSetPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_SessionControl_adapterIds(StringSetPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_SessionControl_identities(IdentitySetPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_SessionControl_getSessionTimeout(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_SessionControl_destroy();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_SessionManager_create(SessionPrx ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_SSLSessionManager_create(SessionPrx ret);
}

namespace Glacier2
{
    /// <summary>
    /// A client-visible session object, which is tied to the lifecycle of a Router.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SessionPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Destroy the session.
        /// This is called automatically when the router is destroyed.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the session.
        /// This is called automatically when the router is destroyed.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Destroy the session.
        /// This is called automatically when the router is destroyed.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_Session_destroy> begin_destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the session.
        /// This is called automatically when the router is destroyed.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_destroy(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Destroy the session.
        /// This is called automatically when the router is destroyed.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_destroy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Destroy the session.
        /// This is called automatically when the router is destroyed.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_destroy(global::Ice.AsyncResult asyncResult);
    }

    /// <summary>
    /// An object for managing the set of identity constraints for specific parts of object identity on a
    ///  Session.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface StringSetPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Add a sequence of strings to this set of constraints.
        /// Order is not preserved and duplicates are implicitly
        ///  removed.
        /// </summary>
        ///  <param name="additions">The sequence of strings to be added.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void add(string[] additions, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Add a sequence of strings to this set of constraints.
        /// Order is not preserved and duplicates are implicitly
        /// </summary>
        ///  <param name="additions">The sequence of strings to be added.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task addAsync(string[] additions, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Add a sequence of strings to this set of constraints.
        /// Order is not preserved and duplicates are implicitly
        /// </summary>
        ///  <param name="additions">The sequence of strings to be added.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_StringSet_add> begin_add(string[] additions, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Add a sequence of strings to this set of constraints.
        /// Order is not preserved and duplicates are implicitly
        /// </summary>
        ///  <param name="additions">The sequence of strings to be added.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_add(string[] additions, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Add a sequence of strings to this set of constraints.
        /// Order is not preserved and duplicates are implicitly
        /// </summary>
        ///  <param name="additions">The sequence of strings to be added.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_add(string[] additions, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Add a sequence of strings to this set of constraints.
        /// Order is not preserved and duplicates are implicitly
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_add(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Remove a sequence of strings from this set of constraints.
        /// No errors are returned if an entry is not found.
        /// </summary>
        ///  <param name="deletions">The sequence of strings to be removed.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void remove(string[] deletions, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Remove a sequence of strings from this set of constraints.
        /// No errors are returned if an entry is not found.
        /// </summary>
        ///  <param name="deletions">The sequence of strings to be removed.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task removeAsync(string[] deletions, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Remove a sequence of strings from this set of constraints.
        /// No errors are returned if an entry is not found.
        /// </summary>
        ///  <param name="deletions">The sequence of strings to be removed.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_StringSet_remove> begin_remove(string[] deletions, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Remove a sequence of strings from this set of constraints.
        /// No errors are returned if an entry is not found.
        /// </summary>
        ///  <param name="deletions">The sequence of strings to be removed.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_remove(string[] deletions, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Remove a sequence of strings from this set of constraints.
        /// No errors are returned if an entry is not found.
        /// </summary>
        ///  <param name="deletions">The sequence of strings to be removed.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_remove(string[] deletions, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Remove a sequence of strings from this set of constraints.
        /// No errors are returned if an entry is not found.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_remove(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Returns a sequence of strings describing the constraints in this set.
        /// </summary>
        /// <returns>The sequence of strings for this set.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        string[] get(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Returns a sequence of strings describing the constraints in this set.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<string[]> getAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Returns a sequence of strings describing the constraints in this set.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_StringSet_get> begin_get(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Returns a sequence of strings describing the constraints in this set.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_get(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Returns a sequence of strings describing the constraints in this set.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_get(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Returns a sequence of strings describing the constraints in this set.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The sequence of strings for this set.</returns>
        string[] end_get(global::Ice.AsyncResult asyncResult);
    }

    /// <summary>
    /// An object for managing the set of object identity constraints on a Session.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface IdentitySetPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Add a sequence of Ice identities to this set of constraints.
        /// Order is not preserved and duplicates are
        ///  implicitly removed.
        /// </summary>
        ///  <param name="additions">The sequence of Ice identities to be added.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void add(global::Ice.Identity[] additions, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Add a sequence of Ice identities to this set of constraints.
        /// Order is not preserved and duplicates are
        /// </summary>
        ///  <param name="additions">The sequence of Ice identities to be added.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task addAsync(global::Ice.Identity[] additions, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Add a sequence of Ice identities to this set of constraints.
        /// Order is not preserved and duplicates are
        /// </summary>
        ///  <param name="additions">The sequence of Ice identities to be added.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_IdentitySet_add> begin_add(global::Ice.Identity[] additions, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Add a sequence of Ice identities to this set of constraints.
        /// Order is not preserved and duplicates are
        /// </summary>
        ///  <param name="additions">The sequence of Ice identities to be added.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_add(global::Ice.Identity[] additions, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Add a sequence of Ice identities to this set of constraints.
        /// Order is not preserved and duplicates are
        /// </summary>
        ///  <param name="additions">The sequence of Ice identities to be added.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_add(global::Ice.Identity[] additions, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Add a sequence of Ice identities to this set of constraints.
        /// Order is not preserved and duplicates are
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_add(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Remove a sequence of identities from this set of constraints.
        /// No errors are returned if an entry is not
        ///  found.
        /// </summary>
        ///  <param name="deletions">The sequence of Ice identities to be removed.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void remove(global::Ice.Identity[] deletions, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Remove a sequence of identities from this set of constraints.
        /// No errors are returned if an entry is not
        /// </summary>
        ///  <param name="deletions">The sequence of Ice identities to be removed.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task removeAsync(global::Ice.Identity[] deletions, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Remove a sequence of identities from this set of constraints.
        /// No errors are returned if an entry is not
        /// </summary>
        ///  <param name="deletions">The sequence of Ice identities to be removed.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_IdentitySet_remove> begin_remove(global::Ice.Identity[] deletions, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Remove a sequence of identities from this set of constraints.
        /// No errors are returned if an entry is not
        /// </summary>
        ///  <param name="deletions">The sequence of Ice identities to be removed.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_remove(global::Ice.Identity[] deletions, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Remove a sequence of identities from this set of constraints.
        /// No errors are returned if an entry is not
        /// </summary>
        ///  <param name="deletions">The sequence of Ice identities to be removed.</param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_remove(global::Ice.Identity[] deletions, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Remove a sequence of identities from this set of constraints.
        /// No errors are returned if an entry is not
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_remove(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Returns a sequence of identities describing the constraints in this set.
        /// </summary>
        /// <returns>The sequence of Ice identities for this set.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        global::Ice.Identity[] get(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Returns a sequence of identities describing the constraints in this set.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<global::Ice.Identity[]> getAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Returns a sequence of identities describing the constraints in this set.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_IdentitySet_get> begin_get(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Returns a sequence of identities describing the constraints in this set.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_get(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Returns a sequence of identities describing the constraints in this set.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_get(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Returns a sequence of identities describing the constraints in this set.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The sequence of Ice identities for this set.</returns>
        global::Ice.Identity[] end_get(global::Ice.AsyncResult asyncResult);
    }

    /// <summary>
    /// An administrative session control object, which is tied to the lifecycle of a Session.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SessionControlPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Access the object that manages the allowable categories for object identities for this session.
        /// </summary>
        /// <returns>A StringSet object.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        StringSetPrx categories(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Access the object that manages the allowable categories for object identities for this session.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<StringSetPrx> categoriesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Access the object that manages the allowable categories for object identities for this session.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_SessionControl_categories> begin_categories(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Access the object that manages the allowable categories for object identities for this session.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_categories(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Access the object that manages the allowable categories for object identities for this session.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_categories(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Access the object that manages the allowable categories for object identities for this session.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A StringSet object.</returns>
        StringSetPrx end_categories(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Access the object that manages the allowable adapter identities for objects for this session.
        /// </summary>
        /// <returns>A StringSet object.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        StringSetPrx adapterIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Access the object that manages the allowable adapter identities for objects for this session.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<StringSetPrx> adapterIdsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Access the object that manages the allowable adapter identities for objects for this session.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_SessionControl_adapterIds> begin_adapterIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Access the object that manages the allowable adapter identities for objects for this session.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_adapterIds(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Access the object that manages the allowable adapter identities for objects for this session.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_adapterIds(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Access the object that manages the allowable adapter identities for objects for this session.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A StringSet object.</returns>
        StringSetPrx end_adapterIds(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Access the object that manages the allowable object identities for this session.
        /// </summary>
        /// <returns>An IdentitySet object.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        IdentitySetPrx identities(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Access the object that manages the allowable object identities for this session.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<IdentitySetPrx> identitiesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Access the object that manages the allowable object identities for this session.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_SessionControl_identities> begin_identities(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Access the object that manages the allowable object identities for this session.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_identities(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Access the object that manages the allowable object identities for this session.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_identities(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Access the object that manages the allowable object identities for this session.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>An IdentitySet object.</returns>
        IdentitySetPrx end_identities(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Get the session timeout.
        /// </summary>
        /// <returns>The timeout.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        int getSessionTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the session timeout.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<int> getSessionTimeoutAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Get the session timeout.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_SessionControl_getSessionTimeout> begin_getSessionTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Get the session timeout.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getSessionTimeout(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the session timeout.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_getSessionTimeout(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Get the session timeout.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>The timeout.</returns>
        int end_getSessionTimeout(global::Ice.AsyncResult asyncResult);

        /// <summary>
        /// Destroy the associated session.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the associated session.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Destroy the associated session.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_SessionControl_destroy> begin_destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Destroy the associated session.
        /// </summary>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_destroy(global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Destroy the associated session.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_destroy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Destroy the associated session.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        void end_destroy(global::Ice.AsyncResult asyncResult);
    }

    /// <summary>
    /// The session manager for username/password authenticated users that is responsible for managing Session
    ///  objects.
    /// New session objects are created by the Router object calling on an application-provided
    ///  session manager. If no session manager is provided by the application, no client-visible sessions are passed to
    ///  the client.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SessionManagerPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="userId">The user id for the session.
        ///  </param>
        /// <param name="control">A proxy to the session control object.
        ///  </param>
        /// <returns>A proxy to the newly created session.
        ///  </returns>
        /// <exception name="CannotCreateSessionException">Raised if the session cannot be created.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        SessionPrx create(string userId, SessionControlPrx control, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="userId">The user id for the session.
        ///  </param>
        /// <param name="control">A proxy to the session control object.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<SessionPrx> createAsync(string userId, SessionControlPrx control, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="userId">The user id for the session.
        ///  </param>
        /// <param name="control">A proxy to the session control object.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_SessionManager_create> begin_create(string userId, SessionControlPrx control, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="userId">The user id for the session.
        ///  </param>
        /// <param name="control">A proxy to the session control object.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_create(string userId, SessionControlPrx control, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="userId">The user id for the session.
        ///  </param>
        /// <param name="control">A proxy to the session control object.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_create(string userId, SessionControlPrx control, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A proxy to the newly created session.
        ///  </returns>
        SessionPrx end_create(global::Ice.AsyncResult asyncResult);
    }

    /// <summary>
    /// The session manager for SSL authenticated users that is responsible for managing Session objects.
    /// New
    ///  session objects are created by the Router object calling on an application-provided session manager. If
    ///  no session manager is provided by the application, no client-visible sessions are passed to the client.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SSLSessionManagerPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="info">The SSL info.
        ///  </param>
        /// <param name="control">A proxy to the session control object.
        ///  </param>
        /// <returns>A proxy to the newly created session.
        ///  </returns>
        /// <exception name="CannotCreateSessionException">Raised if the session cannot be created.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        SessionPrx create(SSLInfo info, SessionControlPrx control, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="info">The SSL info.
        ///  </param>
        /// <param name="control">A proxy to the session control object.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<SessionPrx> createAsync(SSLInfo info, SessionControlPrx control, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="info">The SSL info.
        ///  </param>
        /// <param name="control">A proxy to the session control object.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_SSLSessionManager_create> begin_create(SSLInfo info, SessionControlPrx control, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="info">The SSL info.
        ///  </param>
        /// <param name="control">A proxy to the session control object.
        ///  </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_create(SSLInfo info, SessionControlPrx control, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="info">The SSL info.
        ///  </param>
        /// <param name="control">A proxy to the session control object.
        ///  </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_create(SSLInfo info, SessionControlPrx control, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>A proxy to the newly created session.
        ///  </returns>
        SessionPrx end_create(global::Ice.AsyncResult asyncResult);
    }
}

namespace Glacier2
{
    /// <summary>
    /// A client-visible session object, which is tied to the lifecycle of a Router.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SessionOperations_
    {
        /// <summary>
        /// Destroy the session.
        /// This is called automatically when the router is destroyed.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void destroy(global::Ice.Current current = null);
    }

    /// <summary>
    /// An object for managing the set of identity constraints for specific parts of object identity on a
    ///  Session.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface StringSetOperations_
    {
        /// <summary>
        /// Add a sequence of strings to this set of constraints.
        /// Order is not preserved and duplicates are implicitly
        ///  removed.
        /// </summary>
        ///  <param name="additions">The sequence of strings to be added.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void add(string[] additions, global::Ice.Current current = null);

        /// <summary>
        /// Remove a sequence of strings from this set of constraints.
        /// No errors are returned if an entry is not found.
        /// </summary>
        ///  <param name="deletions">The sequence of strings to be removed.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void remove(string[] deletions, global::Ice.Current current = null);

        /// <summary>
        /// Returns a sequence of strings describing the constraints in this set.
        /// </summary>
        /// <returns>The sequence of strings for this set.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        string[] get(global::Ice.Current current = null);
    }

    /// <summary>
    /// An object for managing the set of object identity constraints on a Session.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface IdentitySetOperations_
    {
        /// <summary>
        /// Add a sequence of Ice identities to this set of constraints.
        /// Order is not preserved and duplicates are
        ///  implicitly removed.
        /// </summary>
        ///  <param name="additions">The sequence of Ice identities to be added.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void add(global::Ice.Identity[] additions, global::Ice.Current current = null);

        /// <summary>
        /// Remove a sequence of identities from this set of constraints.
        /// No errors are returned if an entry is not
        ///  found.
        /// </summary>
        ///  <param name="deletions">The sequence of Ice identities to be removed.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void remove(global::Ice.Identity[] deletions, global::Ice.Current current = null);

        /// <summary>
        /// Returns a sequence of identities describing the constraints in this set.
        /// </summary>
        /// <returns>The sequence of Ice identities for this set.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        global::Ice.Identity[] get(global::Ice.Current current = null);
    }

    /// <summary>
    /// An administrative session control object, which is tied to the lifecycle of a Session.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SessionControlOperations_
    {
        /// <summary>
        /// Access the object that manages the allowable categories for object identities for this session.
        /// </summary>
        /// <returns>A StringSet object.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        StringSetPrx categories(global::Ice.Current current = null);

        /// <summary>
        /// Access the object that manages the allowable adapter identities for objects for this session.
        /// </summary>
        /// <returns>A StringSet object.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        StringSetPrx adapterIds(global::Ice.Current current = null);

        /// <summary>
        /// Access the object that manages the allowable object identities for this session.
        /// </summary>
        /// <returns>An IdentitySet object.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        IdentitySetPrx identities(global::Ice.Current current = null);

        /// <summary>
        /// Get the session timeout.
        /// </summary>
        /// <returns>The timeout.</returns>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        int getSessionTimeout(global::Ice.Current current = null);

        /// <summary>
        /// Destroy the associated session.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void destroy(global::Ice.Current current = null);
    }

    /// <summary>
    /// The session manager for username/password authenticated users that is responsible for managing Session
    ///  objects.
    /// New session objects are created by the Router object calling on an application-provided
    ///  session manager. If no session manager is provided by the application, no client-visible sessions are passed to
    ///  the client.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SessionManagerOperations_
    {
        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="userId">The user id for the session.
        ///  </param>
        /// <param name="control">A proxy to the session control object.
        ///  </param>
        /// <returns>A proxy to the newly created session.
        ///  </returns>
        /// <exception name="CannotCreateSessionException">Raised if the session cannot be created.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        SessionPrx create(string userId, SessionControlPrx control, global::Ice.Current current = null);
    }

    /// <summary>
    /// The session manager for SSL authenticated users that is responsible for managing Session objects.
    /// New
    ///  session objects are created by the Router object calling on an application-provided session manager. If
    ///  no session manager is provided by the application, no client-visible sessions are passed to the client.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SSLSessionManagerOperations_
    {
        /// <summary>
        /// Create a new session.
        /// </summary>
        /// <param name="info">The SSL info.
        ///  </param>
        /// <param name="control">A proxy to the session control object.
        ///  </param>
        /// <returns>A proxy to the newly created session.
        ///  </returns>
        /// <exception name="CannotCreateSessionException">Raised if the session cannot be created.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        SessionPrx create(SSLInfo info, SessionControlPrx control, global::Ice.Current current = null);
    }
}

namespace Glacier2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class SessionPrxHelper : global::Ice.ObjectPrxHelperBase, SessionPrx
    {
        public SessionPrxHelper()
        {
        }

        #region Synchronous operations

        public void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_destroyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_destroyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroyAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroy_name = "destroy";

        private void _iceI_destroy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Session_destroy> begin_destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_destroy(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_destroy(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_destroy(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_destroy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_destroy(context, callback, cookie, false);
        }

        public void end_destroy(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _destroy_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Session_destroy> begin_destroy(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Session_destroy, object>(
                (Callback_Session_destroy cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _destroy_name, cookie, completedCallback);
            _iceI_destroy(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SessionPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SessionPrx r = b as SessionPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SessionPrxHelper h = new SessionPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SessionPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SessionPrx r = b as SessionPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SessionPrxHelper h = new SessionPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SessionPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SessionPrxHelper h = new SessionPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SessionPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SessionPrxHelper h = new SessionPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SessionPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SessionPrx r = b as SessionPrx;
            if(r == null)
            {
                SessionPrxHelper h = new SessionPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SessionPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SessionPrxHelper h = new SessionPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Glacier2::Session",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SessionPrx v)
        {
            ostr.writeProxy(v);
        }

        public static SessionPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SessionPrxHelper result = new SessionPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class StringSetPrxHelper : global::Ice.ObjectPrxHelperBase, StringSetPrx
    {
        public StringSetPrxHelper()
        {
        }

        #region Synchronous operations

        public void add(string[] additions, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_addAsync(additions, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void remove(string[] deletions, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_removeAsync(deletions, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] get(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task addAsync(string[] additions, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_addAsync(additions, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_addAsync(string[] iceP_additions, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_add(iceP_additions, context, synchronous, completed);
            return completed.Task;
        }

        private const string _add_name = "add";

        private void _iceI_add(string[] iceP_additions, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _add_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.StringSeqHelper.write(ostr, iceP_additions);
                });
        }

        public global::System.Threading.Tasks.Task removeAsync(string[] deletions, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_removeAsync(deletions, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_removeAsync(string[] iceP_deletions, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_remove(iceP_deletions, context, synchronous, completed);
            return completed.Task;
        }

        private const string _remove_name = "remove";

        private void _iceI_remove(string[] iceP_deletions, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _remove_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.StringSeqHelper.write(ostr, iceP_deletions);
                });
        }

        public global::System.Threading.Tasks.Task<string[]> getAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_getAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_get_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_get(context, synchronous, completed);
            return completed.Task;
        }

        private const string _get_name = "get";

        private void _iceI_get(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _get_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = global::Ice.StringSeqHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_StringSet_add> begin_add(string[] additions, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_add(additions, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_add(string[] additions, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_add(additions, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_add(string[] additions, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_add(additions, context, callback, cookie, false);
        }

        public void end_add(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _add_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_StringSet_add> begin_add(string[] iceP_additions, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringSet_add, object>(
                (Callback_StringSet_add cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _add_name, cookie, completedCallback);
            _iceI_add(iceP_additions, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_StringSet_remove> begin_remove(string[] deletions, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_remove(deletions, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_remove(string[] deletions, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_remove(deletions, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_remove(string[] deletions, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_remove(deletions, context, callback, cookie, false);
        }

        public void end_remove(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _remove_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_StringSet_remove> begin_remove(string[] iceP_deletions, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringSet_remove, object>(
                (Callback_StringSet_remove cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _remove_name, cookie, completedCallback);
            _iceI_remove(iceP_deletions, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_StringSet_get> begin_get(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_get(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_get(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_get(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_get(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_get(context, callback, cookie, false);
        }

        public string[] end_get(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _get_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_StringSet_get> begin_get(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_get_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringSet_get, string[]>(
                (Callback_StringSet_get cb, string[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _get_name, cookie, completedCallback);
            _iceI_get(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static StringSetPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            StringSetPrx r = b as StringSetPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                StringSetPrxHelper h = new StringSetPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static StringSetPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            StringSetPrx r = b as StringSetPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                StringSetPrxHelper h = new StringSetPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static StringSetPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    StringSetPrxHelper h = new StringSetPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static StringSetPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    StringSetPrxHelper h = new StringSetPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static StringSetPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            StringSetPrx r = b as StringSetPrx;
            if(r == null)
            {
                StringSetPrxHelper h = new StringSetPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static StringSetPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            StringSetPrxHelper h = new StringSetPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Glacier2::StringSet",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, StringSetPrx v)
        {
            ostr.writeProxy(v);
        }

        public static StringSetPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                StringSetPrxHelper result = new StringSetPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class IdentitySetPrxHelper : global::Ice.ObjectPrxHelperBase, IdentitySetPrx
    {
        public IdentitySetPrxHelper()
        {
        }

        #region Synchronous operations

        public void add(global::Ice.Identity[] additions, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_addAsync(additions, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void remove(global::Ice.Identity[] deletions, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_removeAsync(deletions, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.Identity[] get(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task addAsync(global::Ice.Identity[] additions, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_addAsync(additions, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_addAsync(global::Ice.Identity[] iceP_additions, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_add(iceP_additions, context, synchronous, completed);
            return completed.Task;
        }

        private const string _add_name = "add";

        private void _iceI_add(global::Ice.Identity[] iceP_additions, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _add_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.IdentitySeqHelper.write(ostr, iceP_additions);
                });
        }

        public global::System.Threading.Tasks.Task removeAsync(global::Ice.Identity[] deletions, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_removeAsync(deletions, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_removeAsync(global::Ice.Identity[] iceP_deletions, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_remove(iceP_deletions, context, synchronous, completed);
            return completed.Task;
        }

        private const string _remove_name = "remove";

        private void _iceI_remove(global::Ice.Identity[] iceP_deletions, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _remove_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.IdentitySeqHelper.write(ostr, iceP_deletions);
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.Identity[]> getAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.Identity[]> _iceI_getAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_get_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.Identity[]>(progress, cancel);
            _iceI_get(context, synchronous, completed);
            return completed.Task;
        }

        private const string _get_name = "get";

        private void _iceI_get(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.Identity[]>(completed);
            outAsync.invoke(
                _get_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.Identity[] ret;
                    ret = global::Ice.IdentitySeqHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_IdentitySet_add> begin_add(global::Ice.Identity[] additions, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_add(additions, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_add(global::Ice.Identity[] additions, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_add(additions, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_add(global::Ice.Identity[] additions, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_add(additions, context, callback, cookie, false);
        }

        public void end_add(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _add_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_IdentitySet_add> begin_add(global::Ice.Identity[] iceP_additions, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_IdentitySet_add, object>(
                (Callback_IdentitySet_add cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _add_name, cookie, completedCallback);
            _iceI_add(iceP_additions, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_IdentitySet_remove> begin_remove(global::Ice.Identity[] deletions, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_remove(deletions, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_remove(global::Ice.Identity[] deletions, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_remove(deletions, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_remove(global::Ice.Identity[] deletions, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_remove(deletions, context, callback, cookie, false);
        }

        public void end_remove(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _remove_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_IdentitySet_remove> begin_remove(global::Ice.Identity[] iceP_deletions, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_IdentitySet_remove, object>(
                (Callback_IdentitySet_remove cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _remove_name, cookie, completedCallback);
            _iceI_remove(iceP_deletions, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_IdentitySet_get> begin_get(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_get(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_get(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_get(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_get(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_get(context, callback, cookie, false);
        }

        public global::Ice.Identity[] end_get(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _get_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.Identity[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_IdentitySet_get> begin_get(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_get_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_IdentitySet_get, global::Ice.Identity[]>(
                (Callback_IdentitySet_get cb, global::Ice.Identity[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _get_name, cookie, completedCallback);
            _iceI_get(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static IdentitySetPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            IdentitySetPrx r = b as IdentitySetPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                IdentitySetPrxHelper h = new IdentitySetPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static IdentitySetPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            IdentitySetPrx r = b as IdentitySetPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                IdentitySetPrxHelper h = new IdentitySetPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static IdentitySetPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    IdentitySetPrxHelper h = new IdentitySetPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static IdentitySetPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    IdentitySetPrxHelper h = new IdentitySetPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static IdentitySetPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            IdentitySetPrx r = b as IdentitySetPrx;
            if(r == null)
            {
                IdentitySetPrxHelper h = new IdentitySetPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static IdentitySetPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            IdentitySetPrxHelper h = new IdentitySetPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Glacier2::IdentitySet",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, IdentitySetPrx v)
        {
            ostr.writeProxy(v);
        }

        public static IdentitySetPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                IdentitySetPrxHelper result = new IdentitySetPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class SessionControlPrxHelper : global::Ice.ObjectPrxHelperBase, SessionControlPrx
    {
        public SessionControlPrxHelper()
        {
        }

        #region Synchronous operations

        public StringSetPrx categories(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_categoriesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public StringSetPrx adapterIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_adapterIdsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public IdentitySetPrx identities(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_identitiesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int getSessionTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getSessionTimeoutAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_destroyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<StringSetPrx> categoriesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_categoriesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<StringSetPrx> _iceI_categoriesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_categories_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<StringSetPrx>(progress, cancel);
            _iceI_categories(context, synchronous, completed);
            return completed.Task;
        }

        private const string _categories_name = "categories";

        private void _iceI_categories(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<StringSetPrx>(completed);
            outAsync.invoke(
                _categories_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    StringSetPrx ret;
                    ret = StringSetPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<StringSetPrx> adapterIdsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_adapterIdsAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<StringSetPrx> _iceI_adapterIdsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_adapterIds_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<StringSetPrx>(progress, cancel);
            _iceI_adapterIds(context, synchronous, completed);
            return completed.Task;
        }

        private const string _adapterIds_name = "adapterIds";

        private void _iceI_adapterIds(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<StringSetPrx>(completed);
            outAsync.invoke(
                _adapterIds_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    StringSetPrx ret;
                    ret = StringSetPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<IdentitySetPrx> identitiesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_identitiesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<IdentitySetPrx> _iceI_identitiesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_identities_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<IdentitySetPrx>(progress, cancel);
            _iceI_identities(context, synchronous, completed);
            return completed.Task;
        }

        private const string _identities_name = "identities";

        private void _iceI_identities(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<IdentitySetPrx>(completed);
            outAsync.invoke(
                _identities_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    IdentitySetPrx ret;
                    ret = IdentitySetPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> getSessionTimeoutAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getSessionTimeoutAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getSessionTimeoutAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getSessionTimeout_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getSessionTimeout(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getSessionTimeout_name = "getSessionTimeout";

        private void _iceI_getSessionTimeout(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getSessionTimeout_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_destroyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroyAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroy_name = "destroy";

        private void _iceI_destroy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SessionControl_categories> begin_categories(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_categories(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_categories(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_categories(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_categories(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_categories(context, callback, cookie, false);
        }

        public StringSetPrx end_categories(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _categories_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<StringSetPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SessionControl_categories> begin_categories(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_categories_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SessionControl_categories, StringSetPrx>(
                (Callback_SessionControl_categories cb, StringSetPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _categories_name, cookie, completedCallback);
            _iceI_categories(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SessionControl_adapterIds> begin_adapterIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_adapterIds(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_adapterIds(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_adapterIds(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_adapterIds(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_adapterIds(context, callback, cookie, false);
        }

        public StringSetPrx end_adapterIds(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _adapterIds_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<StringSetPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SessionControl_adapterIds> begin_adapterIds(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_adapterIds_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SessionControl_adapterIds, StringSetPrx>(
                (Callback_SessionControl_adapterIds cb, StringSetPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _adapterIds_name, cookie, completedCallback);
            _iceI_adapterIds(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SessionControl_identities> begin_identities(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_identities(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_identities(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_identities(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_identities(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_identities(context, callback, cookie, false);
        }

        public IdentitySetPrx end_identities(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _identities_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<IdentitySetPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SessionControl_identities> begin_identities(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_identities_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SessionControl_identities, IdentitySetPrx>(
                (Callback_SessionControl_identities cb, IdentitySetPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _identities_name, cookie, completedCallback);
            _iceI_identities(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SessionControl_getSessionTimeout> begin_getSessionTimeout(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getSessionTimeout(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getSessionTimeout(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSessionTimeout(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getSessionTimeout(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSessionTimeout(context, callback, cookie, false);
        }

        public int end_getSessionTimeout(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getSessionTimeout_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SessionControl_getSessionTimeout> begin_getSessionTimeout(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getSessionTimeout_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SessionControl_getSessionTimeout, int>(
                (Callback_SessionControl_getSessionTimeout cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getSessionTimeout_name, cookie, completedCallback);
            _iceI_getSessionTimeout(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SessionControl_destroy> begin_destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_destroy(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_destroy(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_destroy(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_destroy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_destroy(context, callback, cookie, false);
        }

        public void end_destroy(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _destroy_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SessionControl_destroy> begin_destroy(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SessionControl_destroy, object>(
                (Callback_SessionControl_destroy cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _destroy_name, cookie, completedCallback);
            _iceI_destroy(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SessionControlPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SessionControlPrx r = b as SessionControlPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SessionControlPrxHelper h = new SessionControlPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SessionControlPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SessionControlPrx r = b as SessionControlPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SessionControlPrxHelper h = new SessionControlPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SessionControlPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SessionControlPrxHelper h = new SessionControlPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SessionControlPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SessionControlPrxHelper h = new SessionControlPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SessionControlPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SessionControlPrx r = b as SessionControlPrx;
            if(r == null)
            {
                SessionControlPrxHelper h = new SessionControlPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SessionControlPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SessionControlPrxHelper h = new SessionControlPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Glacier2::SessionControl",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SessionControlPrx v)
        {
            ostr.writeProxy(v);
        }

        public static SessionControlPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SessionControlPrxHelper result = new SessionControlPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class SessionManagerPrxHelper : global::Ice.ObjectPrxHelperBase, SessionManagerPrx
    {
        public SessionManagerPrxHelper()
        {
        }

        #region Synchronous operations

        public SessionPrx create(string userId, SessionControlPrx control, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_createAsync(userId, control, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<SessionPrx> createAsync(string userId, SessionControlPrx control, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_createAsync(userId, control, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SessionPrx> _iceI_createAsync(string iceP_userId, SessionControlPrx iceP_control, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_create_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SessionPrx>(progress, cancel);
            _iceI_create(iceP_userId, iceP_control, context, synchronous, completed);
            return completed.Task;
        }

        private const string _create_name = "create";

        private void _iceI_create(string iceP_userId, SessionControlPrx iceP_control, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SessionPrx>(completed);
            outAsync.invoke(
                _create_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_userId);
                    SessionControlPrxHelper.write(ostr, iceP_control);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(CannotCreateSessionException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    SessionPrx ret;
                    ret = SessionPrxHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SessionManager_create> begin_create(string userId, SessionControlPrx control, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_create(userId, control, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_create(string userId, SessionControlPrx control, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_create(userId, control, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_create(string userId, SessionControlPrx control, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_create(userId, control, context, callback, cookie, false);
        }

        public SessionPrx end_create(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _create_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<SessionPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SessionManager_create> begin_create(string iceP_userId, SessionControlPrx iceP_control, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_create_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SessionManager_create, SessionPrx>(
                (Callback_SessionManager_create cb, SessionPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _create_name, cookie, completedCallback);
            _iceI_create(iceP_userId, iceP_control, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SessionManagerPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SessionManagerPrx r = b as SessionManagerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SessionManagerPrxHelper h = new SessionManagerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SessionManagerPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SessionManagerPrx r = b as SessionManagerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SessionManagerPrxHelper h = new SessionManagerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SessionManagerPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SessionManagerPrxHelper h = new SessionManagerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SessionManagerPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SessionManagerPrxHelper h = new SessionManagerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SessionManagerPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SessionManagerPrx r = b as SessionManagerPrx;
            if(r == null)
            {
                SessionManagerPrxHelper h = new SessionManagerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SessionManagerPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SessionManagerPrxHelper h = new SessionManagerPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Glacier2::SessionManager",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SessionManagerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static SessionManagerPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SessionManagerPrxHelper result = new SessionManagerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class SSLSessionManagerPrxHelper : global::Ice.ObjectPrxHelperBase, SSLSessionManagerPrx
    {
        public SSLSessionManagerPrxHelper()
        {
        }

        #region Synchronous operations

        public SessionPrx create(SSLInfo info, SessionControlPrx control, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_createAsync(info, control, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<SessionPrx> createAsync(SSLInfo info, SessionControlPrx control, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_createAsync(info, control, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SessionPrx> _iceI_createAsync(SSLInfo iceP_info, SessionControlPrx iceP_control, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_create_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SessionPrx>(progress, cancel);
            _iceI_create(iceP_info, iceP_control, context, synchronous, completed);
            return completed.Task;
        }

        private const string _create_name = "create";

        private void _iceI_create(SSLInfo iceP_info, SessionControlPrx iceP_control, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SessionPrx>(completed);
            outAsync.invoke(
                _create_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    SSLInfo.ice_write(ostr, iceP_info);
                    SessionControlPrxHelper.write(ostr, iceP_control);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(CannotCreateSessionException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    SessionPrx ret;
                    ret = SessionPrxHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SSLSessionManager_create> begin_create(SSLInfo info, SessionControlPrx control, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_create(info, control, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_create(SSLInfo info, SessionControlPrx control, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_create(info, control, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_create(SSLInfo info, SessionControlPrx control, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_create(info, control, context, callback, cookie, false);
        }

        public SessionPrx end_create(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _create_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<SessionPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SSLSessionManager_create> begin_create(SSLInfo iceP_info, SessionControlPrx iceP_control, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_create_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SSLSessionManager_create, SessionPrx>(
                (Callback_SSLSessionManager_create cb, SessionPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _create_name, cookie, completedCallback);
            _iceI_create(iceP_info, iceP_control, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SSLSessionManagerPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SSLSessionManagerPrx r = b as SSLSessionManagerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SSLSessionManagerPrxHelper h = new SSLSessionManagerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SSLSessionManagerPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SSLSessionManagerPrx r = b as SSLSessionManagerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SSLSessionManagerPrxHelper h = new SSLSessionManagerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SSLSessionManagerPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SSLSessionManagerPrxHelper h = new SSLSessionManagerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SSLSessionManagerPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SSLSessionManagerPrxHelper h = new SSLSessionManagerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SSLSessionManagerPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SSLSessionManagerPrx r = b as SSLSessionManagerPrx;
            if(r == null)
            {
                SSLSessionManagerPrxHelper h = new SSLSessionManagerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SSLSessionManagerPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SSLSessionManagerPrxHelper h = new SSLSessionManagerPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Glacier2::SSLSessionManager",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SSLSessionManagerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static SSLSessionManagerPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SSLSessionManagerPrxHelper result = new SSLSessionManagerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Glacier2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class SessionDisp_ : global::Ice.ObjectImpl, Session
    {
        #region Slice operations

        public abstract void destroy(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Glacier2::Session",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_destroy(Session obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.destroy(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "destroy",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_destroy(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class StringSetDisp_ : global::Ice.ObjectImpl, StringSet
    {
        #region Slice operations

        public abstract void add(string[] additions, global::Ice.Current current = null);

        public abstract void remove(string[] deletions, global::Ice.Current current = null);

        public abstract string[] get(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Glacier2::StringSet",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_add(StringSet obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string[] iceP_additions;
            iceP_additions = global::Ice.StringSeqHelper.read(istr);
            inS.endReadParams();
            obj.add(iceP_additions, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_remove(StringSet obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string[] iceP_deletions;
            iceP_deletions = global::Ice.StringSeqHelper.read(istr);
            inS.endReadParams();
            obj.remove(iceP_deletions, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_get(StringSet obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.get(current);
            var ostr = inS.startWriteParams();
            global::Ice.StringSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "add",
            "get",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "remove"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_add(this, inS, current);
                }
                case 1:
                {
                    return iceD_get(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_remove(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class IdentitySetDisp_ : global::Ice.ObjectImpl, IdentitySet
    {
        #region Slice operations

        public abstract void add(global::Ice.Identity[] additions, global::Ice.Current current = null);

        public abstract void remove(global::Ice.Identity[] deletions, global::Ice.Current current = null);

        public abstract global::Ice.Identity[] get(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Glacier2::IdentitySet",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_add(IdentitySet obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Identity[] iceP_additions;
            iceP_additions = global::Ice.IdentitySeqHelper.read(istr);
            inS.endReadParams();
            obj.add(iceP_additions, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_remove(IdentitySet obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Identity[] iceP_deletions;
            iceP_deletions = global::Ice.IdentitySeqHelper.read(istr);
            inS.endReadParams();
            obj.remove(iceP_deletions, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_get(IdentitySet obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.get(current);
            var ostr = inS.startWriteParams();
            global::Ice.IdentitySeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "add",
            "get",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "remove"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_add(this, inS, current);
                }
                case 1:
                {
                    return iceD_get(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_remove(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class SessionControlDisp_ : global::Ice.ObjectImpl, SessionControl
    {
        #region Slice operations

        public abstract StringSetPrx categories(global::Ice.Current current = null);

        public abstract StringSetPrx adapterIds(global::Ice.Current current = null);

        public abstract IdentitySetPrx identities(global::Ice.Current current = null);

        public abstract int getSessionTimeout(global::Ice.Current current = null);

        public abstract void destroy(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Glacier2::SessionControl",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_categories(SessionControl obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.categories(current);
            var ostr = inS.startWriteParams();
            StringSetPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_adapterIds(SessionControl obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.adapterIds(current);
            var ostr = inS.startWriteParams();
            StringSetPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_identities(SessionControl obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.identities(current);
            var ostr = inS.startWriteParams();
            IdentitySetPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getSessionTimeout(SessionControl obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getSessionTimeout(current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_destroy(SessionControl obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.destroy(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "adapterIds",
            "categories",
            "destroy",
            "getSessionTimeout",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "identities"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_adapterIds(this, inS, current);
                }
                case 1:
                {
                    return iceD_categories(this, inS, current);
                }
                case 2:
                {
                    return iceD_destroy(this, inS, current);
                }
                case 3:
                {
                    return iceD_getSessionTimeout(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 8:
                {
                    return iceD_identities(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class SessionManagerDisp_ : global::Ice.ObjectImpl, SessionManager
    {
        #region Slice operations

        public abstract SessionPrx create(string userId, SessionControlPrx control, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Glacier2::SessionManager",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_create(SessionManager obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_userId;
            SessionControlPrx iceP_control;
            iceP_userId = istr.readString();
            iceP_control = SessionControlPrxHelper.read(istr);
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.create(iceP_userId, iceP_control, current);
            var ostr = inS.startWriteParams();
            SessionPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "create",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_create(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class SSLSessionManagerDisp_ : global::Ice.ObjectImpl, SSLSessionManager
    {
        #region Slice operations

        public abstract SessionPrx create(SSLInfo info, SessionControlPrx control, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Glacier2::SSLSessionManager",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_create(SSLSessionManager obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SSLInfo iceP_info;
            iceP_info = null;
            SessionControlPrx iceP_control;
            iceP_info = SSLInfo.ice_read(istr);
            iceP_control = SessionControlPrxHelper.read(istr);
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.create(iceP_info, iceP_control, current);
            var ostr = inS.startWriteParams();
            SessionPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "create",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_create(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
