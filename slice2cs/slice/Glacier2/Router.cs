//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Router.ice")]

#pragma warning disable 1591

namespace Glacier2
{
    /// <summary>
    /// This exception is raised if a client tries to destroy a session with a router, but no session exists for the
    ///  client.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Glacier2::SessionNotExistException")]
    public partial class SessionNotExistException : Ice.UserException
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SessionNotExistException(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SessionNotExistException()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Glacier2::SessionNotExistException";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Glacier2::SessionNotExistException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Glacier2::Router")]
    public partial interface Router : global::Ice.Router
    {
        /// <summary>
        /// This category must be used in the identities of all of the client's callback objects.
        /// This is necessary in
        ///  order for the router to forward callback requests to the intended client. If the Glacier2 server endpoints
        ///  are not set, the returned category is an empty string.
        /// </summary>
        ///  <returns>The category.</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string getCategoryForClient(Ice.Current current);

        /// <summary>
        /// Create a per-client session with the router.
        /// If a SessionManager has been installed, a proxy to a
        /// </summary>
        ///  <param name="userId">The user id for which to check the password.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<SessionPrx?> createSessionAsync(string userId, string password, Ice.Current current);

        /// <summary>
        /// Create a per-client session with the router.
        /// The user is authenticated through the SSL certificates that
        /// </summary>
        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<SessionPrx?> createSessionFromSecureConnectionAsync(Ice.Current current);

        /// <summary>
        /// Keep the session with this router alive.
        /// This operation is provided for backward compatibility with Ice 3.7
        ///  and earlier and does nothing in newer versions of Glacier2.
        /// </summary>
        ///  <exception name="SessionNotExistException">Raised if no session exists for the caller (client).</exception>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void refreshSession(Ice.Current current);

        /// <summary>
        /// Destroy the calling client's session with this router.
        /// </summary>
        /// <exception name="SessionNotExistException">Raised if no session exists for the calling client.</exception>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void destroySession(Ice.Current current);

        /// <summary>
        /// Get the idle timeout used by the server-side of the connection.
        /// </summary>
        /// <returns>The idle timeout (in seconds).</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        long getSessionTimeout(Ice.Current current);

        /// <summary>
        /// Get the idle timeout used by the server-side of the connection.
        /// </summary>
        /// <returns>The idle timeout (in seconds).</returns>
        /// <param name="current">The Current object for the dispatch.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        int getACMTimeout(Ice.Current current);
    }
}

namespace Glacier2
{
    /// <summary>
    /// The Glacier2 specialization of the Ice::Router interface.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface RouterPrx : global::Ice.RouterPrx
    {
        /// <summary>
        /// This category must be used in the identities of all of the client's callback objects.
        /// This is necessary in
        ///  order for the router to forward callback requests to the intended client. If the Glacier2 server endpoints
        ///  are not set, the returned category is an empty string.
        /// </summary>
        ///  <returns>The category.</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        string getCategoryForClient(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// This category must be used in the identities of all of the client's callback objects.
        /// This is necessary in
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<string> getCategoryForClientAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Create a per-client session with the router.
        /// If a SessionManager has been installed, a proxy to a
        ///  Session object is returned to the client. Otherwise, null is returned and only an internal session
        ///  (i.e., not visible to the client) is created.
        ///  If a session proxy is returned, it must be configured to route through the router that created it. This will
        ///  happen automatically if the router is configured as the client's default router at the time the session
        ///  proxy is created in the client process, otherwise the client must configure the session proxy explicitly.
        /// </summary>
        ///  <param name="userId">The user id for which to check the password.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <returns>A proxy for the newly created session, or null if no SessionManager has been installed.
        ///  </returns>
        /// <exception name="PermissionDeniedException">Raised if the password for the given user id is not correct, or if the
        ///  user is not allowed access.
        ///  </exception>
        /// <exception name="CannotCreateSessionException">Raised if the session cannot be created.
        ///  </exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        SessionPrx? createSession(string userId, string password, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Create a per-client session with the router.
        /// If a SessionManager has been installed, a proxy to a
        /// </summary>
        ///  <param name="userId">The user id for which to check the password.
        ///  </param>
        /// <param name="password">The password for the given user id.
        ///  </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<SessionPrx?> createSessionAsync(string userId, string password, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Create a per-client session with the router.
        /// The user is authenticated through the SSL certificates that
        ///  have been associated with the connection. If a SessionManager has been installed, a proxy to a
        ///  Session object is returned to the client. Otherwise, null is returned and only an internal session
        ///  (i.e., not visible to the client) is created.
        ///  If a session proxy is returned, it must be configured to route through the router that created it. This will
        ///  happen automatically if the router is configured as the client's default router at the time the session
        ///  proxy is created in the client process, otherwise the client must configure the session proxy explicitly.
        /// </summary>
        ///  <returns>A proxy for the newly created session, or null if no SessionManager has been installed.
        ///  </returns>
        /// <exception name="PermissionDeniedException">Raised if the user cannot be authenticated or if the user is not allowed
        ///  access.
        ///  </exception>
        /// <exception name="CannotCreateSessionException">Raised if the session cannot be created.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        SessionPrx? createSessionFromSecureConnection(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Create a per-client session with the router.
        /// The user is authenticated through the SSL certificates that
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<SessionPrx?> createSessionFromSecureConnectionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Keep the session with this router alive.
        /// This operation is provided for backward compatibility with Ice 3.7
        ///  and earlier and does nothing in newer versions of Glacier2.
        /// </summary>
        ///  <exception name="SessionNotExistException">Raised if no session exists for the caller (client).</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void refreshSession(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Keep the session with this router alive.
        /// This operation is provided for backward compatibility with Ice 3.7
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task refreshSessionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Destroy the calling client's session with this router.
        /// </summary>
        /// <exception name="SessionNotExistException">Raised if no session exists for the calling client.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        void destroySession(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Destroy the calling client's session with this router.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task destroySessionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get the idle timeout used by the server-side of the connection.
        /// </summary>
        /// <returns>The idle timeout (in seconds).</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        long getSessionTimeout(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get the idle timeout used by the server-side of the connection.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<long> getSessionTimeoutAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        /// <summary>
        /// Get the idle timeout used by the server-side of the connection.
        /// </summary>
        /// <returns>The idle timeout (in seconds).</returns>
        /// <param name="context">The Context map to send with the invocation.</param>

        int getACMTimeout(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Get the idle timeout used by the server-side of the connection.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<int> getACMTimeoutAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Glacier2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class RouterPrxHelper : Ice.ObjectPrxHelperBase, RouterPrx
    {
        public RouterPrxHelper()
        {
        }

        public global::Ice.ObjectPrx? getClientProxy(out bool? hasRoutingTable, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_getClientProxyAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                hasRoutingTable = result_.hasRoutingTable;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.ObjectPrx? getServerProxy(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getServerProxyAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.ObjectPrx?[] addProxies(global::Ice.ObjectPrx?[] proxies, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_addProxiesAsync(proxies, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string getCategoryForClient(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getCategoryForClientAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public SessionPrx? createSession(string userId, string password, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_createSessionAsync(userId, password, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public SessionPrx? createSessionFromSecureConnection(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_createSessionFromSecureConnectionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void refreshSession(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_refreshSessionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void destroySession(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_destroySessionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long getSessionTimeout(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getSessionTimeoutAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int getACMTimeout(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_getACMTimeoutAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<global::Ice.Router_GetClientProxyResult> getClientProxyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getClientProxyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.Router_GetClientProxyResult> _iceI_getClientProxyAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getClientProxy_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.Router_GetClientProxyResult>(progress, cancel);
            _iceI_getClientProxy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getClientProxy_name = "getClientProxy";

        private void _iceI_getClientProxy(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.Router_GetClientProxyResult>(completed);
            outAsync.invoke(
                _getClientProxy_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Ice.Router_GetClientProxyResult();
                    ret.returnValue = istr.readProxy();
                    {
                        var tmp = istr.readBool(1);
                        ret.hasRoutingTable = tmp;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> getServerProxyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getServerProxyAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?> _iceI_getServerProxyAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getServerProxy_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?>(progress, cancel);
            _iceI_getServerProxy(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getServerProxy_name = "getServerProxy";

        private void _iceI_getServerProxy(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?>(completed);
            outAsync.invoke(
                _getServerProxy_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx? ret;
                    ret = istr.readProxy();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?[]> addProxiesAsync(global::Ice.ObjectPrx?[] proxies, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_addProxiesAsync(proxies, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx?[]> _iceI_addProxiesAsync(global::Ice.ObjectPrx?[] iceP_proxies, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_addProxies_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Ice.ObjectPrx?[]>(progress, cancel);
            _iceI_addProxies(iceP_proxies, context, synchronous, completed);
            return completed.Task;
        }

        private const string _addProxies_name = "addProxies";

        private void _iceI_addProxies(global::Ice.ObjectPrx?[] iceP_proxies, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.ObjectPrx?[]>(completed);
            outAsync.invoke(
                _addProxies_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Ice.ObjectProxySeqHelper.write(ostr, iceP_proxies);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::Ice.ObjectPrx?[] ret;
                    ret = global::Ice.ObjectProxySeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string> getCategoryForClientAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getCategoryForClientAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_getCategoryForClientAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getCategoryForClient_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_getCategoryForClient(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getCategoryForClient_name = "getCategoryForClient";

        private void _iceI_getCategoryForClient(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _getCategoryForClient_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SessionPrx?> createSessionAsync(string userId, string password, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_createSessionAsync(userId, password, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SessionPrx?> _iceI_createSessionAsync(string iceP_userId, string iceP_password, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createSession_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<SessionPrx?>(progress, cancel);
            _iceI_createSession(iceP_userId, iceP_password, context, synchronous, completed);
            return completed.Task;
        }

        private const string _createSession_name = "createSession";

        private void _iceI_createSession(string iceP_userId, string iceP_password, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SessionPrx?>(completed);
            outAsync.invoke(
                _createSession_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_userId);
                    ostr.writeString(iceP_password);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(CannotCreateSessionException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    SessionPrx? ret;
                    ret = SessionPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SessionPrx?> createSessionFromSecureConnectionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_createSessionFromSecureConnectionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SessionPrx?> _iceI_createSessionFromSecureConnectionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_createSessionFromSecureConnection_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<SessionPrx?>(progress, cancel);
            _iceI_createSessionFromSecureConnection(context, synchronous, completed);
            return completed.Task;
        }

        private const string _createSessionFromSecureConnection_name = "createSessionFromSecureConnection";

        private void _iceI_createSessionFromSecureConnection(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SessionPrx?>(completed);
            outAsync.invoke(
                _createSessionFromSecureConnection_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(CannotCreateSessionException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    SessionPrx? ret;
                    ret = SessionPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task refreshSessionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_refreshSessionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_refreshSessionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_refreshSession_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_refreshSession(context, synchronous, completed);
            return completed.Task;
        }

        private const string _refreshSession_name = "refreshSession";

        private void _iceI_refreshSession(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _refreshSession_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(SessionNotExistException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task destroySessionAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_destroySessionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_destroySessionAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_destroySession_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_destroySession(context, synchronous, completed);
            return completed.Task;
        }

        private const string _destroySession_name = "destroySession";

        private void _iceI_destroySession(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _destroySession_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(SessionNotExistException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<long> getSessionTimeoutAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getSessionTimeoutAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_getSessionTimeoutAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getSessionTimeout_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_getSessionTimeout(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getSessionTimeout_name = "getSessionTimeout";

        private void _iceI_getSessionTimeout(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _getSessionTimeout_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> getACMTimeoutAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_getACMTimeoutAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getACMTimeoutAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getACMTimeout_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getACMTimeout(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getACMTimeout_name = "getACMTimeout";

        private void _iceI_getACMTimeout(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getACMTimeout_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public static RouterPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static RouterPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                RouterPrxHelper prx = new RouterPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static RouterPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    RouterPrxHelper prx = new RouterPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static RouterPrx? uncheckedCast(Ice.ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new RouterPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static RouterPrx? uncheckedCast(Ice.ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                Ice.ObjectPrx? bb = b.ice_facet(f);
                var prx = new RouterPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Glacier2::Router",
            "::Ice::Object",
            "::Ice::Router"
        };

        public static string ice_staticId() => "::Glacier2::Router";

        public static void write(Ice.OutputStream ostr, RouterPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static RouterPrx? read(Ice.InputStream istr)
        {
            Ice.ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new RouterPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }
    }
}

namespace Glacier2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class RouterDisp_ : Ice.ObjectImpl, Router
    {
        public abstract string getCategoryForClient(Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<SessionPrx?> createSessionAsync(string userId, string password, Ice.Current current);

        public abstract global::System.Threading.Tasks.Task<SessionPrx?> createSessionFromSecureConnectionAsync(Ice.Current current);

        public abstract void refreshSession(Ice.Current current);

        public abstract void destroySession(Ice.Current current);

        public abstract long getSessionTimeout(Ice.Current current);

        public abstract int getACMTimeout(Ice.Current current);

        public abstract global::Ice.ObjectPrx? getClientProxy(out bool? hasRoutingTable, Ice.Current current);

        public abstract global::Ice.ObjectPrx? getServerProxy(Ice.Current current);

        public abstract global::Ice.ObjectPrx?[] addProxies(global::Ice.ObjectPrx?[] proxies, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Glacier2::Router";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "getClientProxy" => global::Ice.Router.iceD_getClientProxyAsync(this, request),
                "getServerProxy" => global::Ice.Router.iceD_getServerProxyAsync(this, request),
                "addProxies" => global::Ice.Router.iceD_addProxiesAsync(this, request),
                "getCategoryForClient" => Router.iceD_getCategoryForClientAsync(this, request),
                "createSession" => Router.iceD_createSessionAsync(this, request),
                "createSessionFromSecureConnection" => Router.iceD_createSessionFromSecureConnectionAsync(this, request),
                "refreshSession" => Router.iceD_refreshSessionAsync(this, request),
                "destroySession" => Router.iceD_destroySessionAsync(this, request),
                "getSessionTimeout" => Router.iceD_getSessionTimeoutAsync(this, request),
                "getACMTimeout" => Router.iceD_getACMTimeoutAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Glacier2
{
    public partial interface Router
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getCategoryForClientAsync(
            Router obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getCategoryForClient(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeString(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_createSessionAsync(
            Router obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_userId;
            string iceP_password;
            iceP_userId = istr.readString();
            iceP_password = istr.readString();
            istr.endEncapsulation();
            var result = await obj.createSessionAsync(iceP_userId, iceP_password, request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    SessionPrxHelper.write(ostr, ret);
                },
                Ice.FormatType.SlicedFormat);
        }

        protected static async global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_createSessionFromSecureConnectionAsync(
            Router obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var result = await obj.createSessionFromSecureConnectionAsync(request.current).ConfigureAwait(false);
            return Ice.CurrentExtensions.createOutgoingResponse(
                request.current,
                result,
                static (ostr, ret) =>
                {
                    SessionPrxHelper.write(ostr, ret);
                },
                Ice.FormatType.SlicedFormat);
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_refreshSessionAsync(
            Router obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.refreshSession(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_destroySessionAsync(
            Router obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.destroySession(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getSessionTimeoutAsync(
            Router obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getSessionTimeout(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeLong(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getACMTimeoutAsync(
            Router obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.getACMTimeout(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeInt(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }
}
