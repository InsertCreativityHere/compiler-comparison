//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `PermissionsVerifier.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Glacier2
{
    /// <summary>
    /// This exception is raised if a client is denied the ability to create
    /// a session with the router.
    /// </summary>

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class PermissionDeniedException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string reason;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM()
        {
            this.reason = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public PermissionDeniedException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public PermissionDeniedException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public PermissionDeniedException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            this.reason = info.GetString("reason");
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        private void _initDM(string reason)
        {
            this.reason = reason;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public PermissionDeniedException(string reason)
        {
            _initDM(reason);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public PermissionDeniedException(string reason, global::System.Exception ex) : base(ex)
        {
            _initDM(reason);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return "::Glacier2::PermissionDeniedException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override global::Ice.SlicedData ice_getSlicedData()
        {
            return slicedData_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override void iceWrite(global::Ice.OutputStream ostr_)
        {
            ostr_.startException(slicedData_);
            iceWriteImpl(ostr_);
            ostr_.endException();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override void iceRead(global::Ice.InputStream istr_)
        {
            istr_.startException();
            iceReadImpl(istr_);
            slicedData_ = istr_.endException(true);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Glacier2::PermissionDeniedException", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }

        protected global::Ice.SlicedData slicedData_;

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface PermissionsVerifier : global::Ice.Object, PermissionsVerifierOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface SSLPermissionsVerifier : global::Ice.Object, SSLPermissionsVerifierOperations_
    {
    }
}

namespace Glacier2
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_PermissionsVerifier_checkPermissions(bool ret, string reason);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_SSLPermissionsVerifier_authorize(bool ret, string reason);
}

namespace Glacier2
{
    public struct PermissionsVerifier_CheckPermissionsResult
    {
        public PermissionsVerifier_CheckPermissionsResult(bool returnValue, string reason)
        {
            this.returnValue = returnValue;
            this.reason = reason;
        }

        public bool returnValue;
        public string reason;
    }

    public struct SSLPermissionsVerifier_AuthorizeResult
    {
        public SSLPermissionsVerifier_AuthorizeResult(bool returnValue, string reason)
        {
            this.returnValue = returnValue;
            this.reason = reason;
        }

        public bool returnValue;
        public string reason;
    }
}

namespace Glacier2
{
    /// <summary>
    /// The Glacier2 permissions verifier.
    /// This is called through the
    /// process of establishing a session.
    ///
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface PermissionsVerifierPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="userId">The user id for which to check permission.
        ///
        /// </param>
        /// <param name="password">The user's password.
        ///
        /// </param>
        /// <param name="reason">The reason why access was denied.
        ///
        /// </param>
        /// <returns>True if access is granted, or false otherwise.
        ///
        /// </returns>
        /// <exception name="PermissionDeniedException">Raised if the user access is
        /// denied. This can be raised in place of returning false with a
        /// reason set in the reason out parameter.</exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        bool checkPermissions(string userId, string password, out string reason, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="userId">The user id for which to check permission.
        ///
        /// </param>
        /// <param name="password">The user's password.
        ///
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<PermissionsVerifier_CheckPermissionsResult> checkPermissionsAsync(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="userId">The user id for which to check permission.
        ///
        /// </param>
        /// <param name="password">The user's password.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_PermissionsVerifier_checkPermissions> begin_checkPermissions(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="userId">The user id for which to check permission.
        ///
        /// </param>
        /// <param name="password">The user's password.
        ///
        /// </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_checkPermissions(string userId, string password, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="userId">The user id for which to check permission.
        ///
        /// </param>
        /// <param name="password">The user's password.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_checkPermissions(string userId, string password, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="reason">The reason why access was denied.
        ///
        /// </param>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>True if access is granted, or false otherwise.
        ///
        /// </returns>
        bool end_checkPermissions(out string reason, global::Ice.AsyncResult asyncResult);
    }

    /// <summary>
    /// The SSL Glacier2 permissions verifier.
    /// This is called through the
    /// process of establishing a session.
    ///
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SSLPermissionsVerifierPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="info">The SSL information.
        ///
        /// </param>
        /// <param name="reason">The reason why access was denied.
        ///
        /// </param>
        /// <returns>True if access is granted, or false otherwise.
        ///
        /// </returns>
        /// <exception name="PermissionDeniedException">Raised if the user access is
        /// denied. This can be raised in place of returning false with a
        /// reason set in the reason out parameter.
        ///
        /// </exception>
        /// <param name="context">The Context map to send with the invocation.</param>

        bool authorize(SSLInfo info, out string reason, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="info">The SSL information.
        ///
        /// </param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<SSLPermissionsVerifier_AuthorizeResult> authorizeAsync(SSLInfo info, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="info">The SSL information.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult<Callback_SSLPermissionsVerifier_authorize> begin_authorize(SSLInfo info, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="info">The SSL information.
        ///
        /// </param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_authorize(SSLInfo info, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="info">The SSL information.
        ///
        /// </param>
        /// <param name="context">The Context map to send with the invocation.</param>
        /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
        /// <param name="cookie">Application data to store in the asynchronous result object.</param>
        /// <returns>An asynchronous result object.</returns>
        global::Ice.AsyncResult begin_authorize(SSLInfo info, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="reason">The reason why access was denied.
        ///
        /// </param>
        /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
        /// <returns>True if access is granted, or false otherwise.
        ///
        /// </returns>
        bool end_authorize(out string reason, global::Ice.AsyncResult asyncResult);
    }
}

namespace Glacier2
{
    /// <summary>
    /// The Glacier2 permissions verifier.
    /// This is called through the
    /// process of establishing a session.
    ///
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface PermissionsVerifierOperations_
    {
        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="userId">The user id for which to check permission.
        ///
        /// </param>
        /// <param name="password">The user's password.
        ///
        /// </param>
        /// <param name="reason">The reason why access was denied.
        ///
        /// </param>
        /// <returns>True if access is granted, or false otherwise.
        ///
        /// </returns>
        /// <exception name="PermissionDeniedException">Raised if the user access is
        /// denied. This can be raised in place of returning false with a
        /// reason set in the reason out parameter.</exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool checkPermissions(string userId, string password, out string reason, global::Ice.Current current = null);
    }

    /// <summary>
    /// The SSL Glacier2 permissions verifier.
    /// This is called through the
    /// process of establishing a session.
    ///
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SSLPermissionsVerifierOperations_
    {
        /// <summary>
        /// Check whether a user has permission to access the router.
        /// </summary>
        /// <param name="info">The SSL information.
        ///
        /// </param>
        /// <param name="reason">The reason why access was denied.
        ///
        /// </param>
        /// <returns>True if access is granted, or false otherwise.
        ///
        /// </returns>
        /// <exception name="PermissionDeniedException">Raised if the user access is
        /// denied. This can be raised in place of returning false with a
        /// reason set in the reason out parameter.
        ///
        /// </exception>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool authorize(SSLInfo info, out string reason, global::Ice.Current current = null);
    }
}

namespace Glacier2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class PermissionsVerifierPrxHelper : global::Ice.ObjectPrxHelperBase, PermissionsVerifierPrx
    {
        public PermissionsVerifierPrxHelper()
        {
        }

        public PermissionsVerifierPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public bool checkPermissions(string userId, string password, out string reason, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_checkPermissionsAsync(userId, password, context, null, global::System.Threading.CancellationToken.None, true).Result;
                reason = result_.reason;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<PermissionsVerifier_CheckPermissionsResult> checkPermissionsAsync(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_checkPermissionsAsync(userId, password, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<PermissionsVerifier_CheckPermissionsResult> _iceI_checkPermissionsAsync(string iceP_userId, string iceP_password, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_checkPermissions_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<PermissionsVerifier_CheckPermissionsResult>(progress, cancel);
            _iceI_checkPermissions(iceP_userId, iceP_password, context, synchronous, completed);
            return completed.Task;
        }

        private const string _checkPermissions_name = "checkPermissions";

        private void _iceI_checkPermissions(string iceP_userId, string iceP_password, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<PermissionsVerifier_CheckPermissionsResult>(completed);
            outAsync.invoke(
                _checkPermissions_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_userId);
                    ostr.writeString(iceP_password);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    PermissionsVerifier_CheckPermissionsResult ret = new PermissionsVerifier_CheckPermissionsResult();
                    ret.reason = istr.readString();
                    ret.returnValue = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_PermissionsVerifier_checkPermissions> begin_checkPermissions(string userId, string password, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_checkPermissions(userId, password, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_checkPermissions(string userId, string password, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_checkPermissions(userId, password, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_checkPermissions(string userId, string password, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_checkPermissions(userId, password, context, callback, cookie, false);
        }

        public bool end_checkPermissions(out string reason, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _checkPermissions_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<PermissionsVerifier_CheckPermissionsResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            reason = result_.reason;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_PermissionsVerifier_checkPermissions> begin_checkPermissions(string iceP_userId, string iceP_password, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_checkPermissions_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_PermissionsVerifier_checkPermissions, PermissionsVerifier_CheckPermissionsResult>(
                (Callback_PermissionsVerifier_checkPermissions cb, PermissionsVerifier_CheckPermissionsResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.reason);
                    }
                },
                this, _checkPermissions_name, cookie, completedCallback);
            _iceI_checkPermissions(iceP_userId, iceP_password, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static PermissionsVerifierPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PermissionsVerifierPrx r = b as PermissionsVerifierPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                PermissionsVerifierPrxHelper h = new PermissionsVerifierPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PermissionsVerifierPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            PermissionsVerifierPrx r = b as PermissionsVerifierPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                PermissionsVerifierPrxHelper h = new PermissionsVerifierPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PermissionsVerifierPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    PermissionsVerifierPrxHelper h = new PermissionsVerifierPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PermissionsVerifierPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    PermissionsVerifierPrxHelper h = new PermissionsVerifierPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PermissionsVerifierPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PermissionsVerifierPrx r = b as PermissionsVerifierPrx;
            if(r == null)
            {
                PermissionsVerifierPrxHelper h = new PermissionsVerifierPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PermissionsVerifierPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            PermissionsVerifierPrxHelper h = new PermissionsVerifierPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Glacier2::PermissionsVerifier",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, PermissionsVerifierPrx v)
        {
            ostr.writeProxy(v);
        }

        public static PermissionsVerifierPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                PermissionsVerifierPrxHelper result = new PermissionsVerifierPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class SSLPermissionsVerifierPrxHelper : global::Ice.ObjectPrxHelperBase, SSLPermissionsVerifierPrx
    {
        public SSLPermissionsVerifierPrxHelper()
        {
        }

        public SSLPermissionsVerifierPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public bool authorize(SSLInfo info, out string reason, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_authorizeAsync(info, context, null, global::System.Threading.CancellationToken.None, true).Result;
                reason = result_.reason;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<SSLPermissionsVerifier_AuthorizeResult> authorizeAsync(SSLInfo info, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_authorizeAsync(info, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SSLPermissionsVerifier_AuthorizeResult> _iceI_authorizeAsync(SSLInfo iceP_info, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_authorize_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SSLPermissionsVerifier_AuthorizeResult>(progress, cancel);
            _iceI_authorize(iceP_info, context, synchronous, completed);
            return completed.Task;
        }

        private const string _authorize_name = "authorize";

        private void _iceI_authorize(SSLInfo iceP_info, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SSLPermissionsVerifier_AuthorizeResult>(completed);
            outAsync.invoke(
                _authorize_name,
                global::Ice.OperationMode.Nonmutating,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    SSLInfo.ice_write(ostr, iceP_info);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PermissionDeniedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    SSLPermissionsVerifier_AuthorizeResult ret = new SSLPermissionsVerifier_AuthorizeResult();
                    ret.reason = istr.readString();
                    ret.returnValue = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SSLPermissionsVerifier_authorize> begin_authorize(SSLInfo info, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_authorize(info, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_authorize(SSLInfo info, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_authorize(info, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_authorize(SSLInfo info, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_authorize(info, context, callback, cookie, false);
        }

        public bool end_authorize(out string reason, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _authorize_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<SSLPermissionsVerifier_AuthorizeResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            reason = result_.reason;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_SSLPermissionsVerifier_authorize> begin_authorize(SSLInfo iceP_info, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_authorize_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SSLPermissionsVerifier_authorize, SSLPermissionsVerifier_AuthorizeResult>(
                (Callback_SSLPermissionsVerifier_authorize cb, SSLPermissionsVerifier_AuthorizeResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.reason);
                    }
                },
                this, _authorize_name, cookie, completedCallback);
            _iceI_authorize(iceP_info, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SSLPermissionsVerifierPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SSLPermissionsVerifierPrx r = b as SSLPermissionsVerifierPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SSLPermissionsVerifierPrxHelper h = new SSLPermissionsVerifierPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SSLPermissionsVerifierPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SSLPermissionsVerifierPrx r = b as SSLPermissionsVerifierPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SSLPermissionsVerifierPrxHelper h = new SSLPermissionsVerifierPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SSLPermissionsVerifierPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SSLPermissionsVerifierPrxHelper h = new SSLPermissionsVerifierPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SSLPermissionsVerifierPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SSLPermissionsVerifierPrxHelper h = new SSLPermissionsVerifierPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SSLPermissionsVerifierPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SSLPermissionsVerifierPrx r = b as SSLPermissionsVerifierPrx;
            if(r == null)
            {
                SSLPermissionsVerifierPrxHelper h = new SSLPermissionsVerifierPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SSLPermissionsVerifierPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SSLPermissionsVerifierPrxHelper h = new SSLPermissionsVerifierPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Glacier2::SSLPermissionsVerifier",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SSLPermissionsVerifierPrx v)
        {
            ostr.writeProxy(v);
        }

        public static SSLPermissionsVerifierPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SSLPermissionsVerifierPrxHelper result = new SSLPermissionsVerifierPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Glacier2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class PermissionsVerifierDisp_ : global::Ice.ObjectImpl, PermissionsVerifier
    {
        #region Slice operations

        public abstract bool checkPermissions(string userId, string password, out string reason, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Glacier2::PermissionsVerifier",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_checkPermissions(PermissionsVerifier obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_userId;
            string iceP_password;
            iceP_userId = istr.readString();
            iceP_password = istr.readString();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            string iceP_reason;
            var ret = obj.checkPermissions(iceP_userId, iceP_password, out iceP_reason, current);
            var ostr = inS.startWriteParams();
            ostr.writeString(iceP_reason);
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "checkPermissions",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_checkPermissions(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class SSLPermissionsVerifierDisp_ : global::Ice.ObjectImpl, SSLPermissionsVerifier
    {
        #region Slice operations

        public abstract bool authorize(SSLInfo info, out string reason, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Glacier2::SSLPermissionsVerifier",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_authorize(SSLPermissionsVerifier obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            SSLInfo iceP_info;
            iceP_info = null;
            iceP_info = SSLInfo.ice_read(istr);
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            string iceP_reason;
            var ret = obj.authorize(iceP_info, out iceP_reason, current);
            var ostr = inS.startWriteParams();
            ostr.writeString(iceP_reason);
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "authorize",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_authorize(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
