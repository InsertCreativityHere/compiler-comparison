//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `SSLInfo.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Glacier2
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class SSLInfo : global::System.ICloneable, global::System.IEquatable<SSLInfo>
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string remoteHost = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int remotePort;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string localHost = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int localPort;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string cipher = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] certs;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SSLInfo()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SSLInfo(string remoteHost, int remotePort, string localHost, int localPort, string cipher, string[] certs)
        {
            this.remoteHost = remoteHost;
            this.remotePort = remotePort;
            this.localHost = localHost;
            this.localPort = localPort;
            this.cipher = cipher;
            this.certs = certs;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone() => MemberwiseClone();

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::Ice.Internal.HashUtil.hashAdd(ref h_, "::Glacier2::SSLInfo");
            global::Ice.Internal.HashUtil.hashAdd(ref h_, remoteHost);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, remotePort);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, localHost);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, localPort);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, cipher);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, certs);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other) => Equals(other as SSLInfo);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(SSLInfo other)
        {
            if (object.ReferenceEquals(this, other))
            {
                return true;
            }
            if (other is null)
            {
                return false;
            }
            if (this.remoteHost is null)
            {
                if (other.remoteHost is not null)
                {
                    return false;
                }
            }
            else
            {
                if (!this.remoteHost.Equals(other.remoteHost))
                {
                    return false;
                }
            }
            if (!this.remotePort.Equals(other.remotePort))
            {
                return false;
            }
            if (this.localHost is null)
            {
                if (other.localHost is not null)
                {
                    return false;
                }
            }
            else
            {
                if (!this.localHost.Equals(other.localHost))
                {
                    return false;
                }
            }
            if (!this.localPort.Equals(other.localPort))
            {
                return false;
            }
            if (this.cipher is null)
            {
                if (other.cipher is not null)
                {
                    return false;
                }
            }
            else
            {
                if (!this.cipher.Equals(other.cipher))
                {
                    return false;
                }
            }
            if (this.certs is null)
            {
                if (other.certs is not null)
                {
                    return false;
                }
            }
            else
            {
                if (!Ice.UtilInternal.Arrays.Equals(this.certs, other.certs))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator==(SSLInfo lhs, SSLInfo rhs)
        {
            return (object)lhs == rhs || (lhs is not null && lhs.Equals(rhs));
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator!=(SSLInfo lhs, SSLInfo rhs)
        {
            return !(lhs == rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.remoteHost);
            ostr.writeInt(this.remotePort);
            ostr.writeString(this.localHost);
            ostr.writeInt(this.localPort);
            ostr.writeString(this.cipher);
            global::Ice.StringSeqHelper.write(ostr, this.certs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.remoteHost = istr.readString();
            this.remotePort = istr.readInt();
            this.localHost = istr.readString();
            this.localPort = istr.readInt();
            this.cipher = istr.readString();
            this.certs = global::Ice.StringSeqHelper.read(istr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, SSLInfo v)
        {
            if (v is null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static SSLInfo ice_read(global::Ice.InputStream istr)
        {
            var v = new SSLInfo();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly SSLInfo _nullMarshalValue = new SSLInfo();

        #endregion
    }
}
