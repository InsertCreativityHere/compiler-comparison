//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceLocatorDiscovery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("IceLocatorDiscovery.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace IceLocatorDiscovery
{
    [Ice.SliceTypeId("::IceLocatorDiscovery::LookupReply")]
    public partial interface LookupReply : Ice.Object
    {
        /// <summary>
        /// This method is called by the implementation of the Lookup interface to reply to a findLocator request.
        /// </summary>
        /// <param name="prx">The proxy of the locator.</param>
        /// <param name="current">The Current object for the dispatch.</param>

        void foundLocator(global::Ice.LocatorPrx? prx, Ice.Current current);
    }

    [Ice.SliceTypeId("::IceLocatorDiscovery::Lookup")]
    public partial interface Lookup : Ice.Object
    {
        /// <summary>
        /// Find a locator proxy with the given instance name.
        /// </summary>
        /// <param name="instanceName">Restrict the search to Ice registries configured with the given instance name. If
        ///  empty, all the available registries will reply.
        ///  </param>
        /// <param name="reply">The reply object to use to send the reply.</param>
        /// <param name="current">The Current object for the dispatch.</param>

        void findLocator(string instanceName, LookupReplyPrx? reply, Ice.Current current);
    }
}

namespace IceLocatorDiscovery
{
    /// <summary>
    /// The Ice lookup reply interface must be implemented by clients which are searching for Ice locators.
    /// Ice locator
    ///  implementations invoke on this interface to provide their locator proxy.
    /// </summary>

    public interface LookupReplyPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// This method is called by the implementation of the Lookup interface to reply to a findLocator request.
        /// </summary>
        /// <param name="prx">The proxy of the locator.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void foundLocator(global::Ice.LocatorPrx? prx, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// This method is called by the implementation of the Lookup interface to reply to a findLocator request.
        /// </summary>
        /// <param name="prx">The proxy of the locator.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task foundLocatorAsync(global::Ice.LocatorPrx? prx, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// The Ice lookup interface is implemented by Ice locator implementations and can be used by clients to find
    ///  available Ice locators on the network.
    /// Ice locator implementations provide a well-known `Ice/LocatorLookup' object accessible through UDP multicast.
    ///  Clients typically make a multicast findLocator request to find the locator proxy.
    /// </summary>

    public interface LookupPrx : Ice.ObjectPrx
    {
        /// <summary>
        /// Find a locator proxy with the given instance name.
        /// </summary>
        /// <param name="instanceName">Restrict the search to Ice registries configured with the given instance name. If
        ///  empty, all the available registries will reply.
        ///  </param>
        /// <param name="reply">The reply object to use to send the reply.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void findLocator(string instanceName, LookupReplyPrx? reply, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        /// <summary>
        /// Find a locator proxy with the given instance name.
        /// </summary>
        /// <param name="instanceName">Restrict the search to Ice registries configured with the given instance name. If
        ///  empty, all the available registries will reply.
        ///  </param>
        /// <param name="reply">The reply object to use to send the reply.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task findLocatorAsync(string instanceName, LookupReplyPrx? reply, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace IceLocatorDiscovery
{
    public sealed class LookupReplyPrxHelper : Ice.ObjectPrxHelperBase, LookupReplyPrx
    {
        public void foundLocator(global::Ice.LocatorPrx? prx, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_foundLocatorAsync(prx, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task foundLocatorAsync(global::Ice.LocatorPrx? prx, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_foundLocatorAsync(prx, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_foundLocatorAsync(global::Ice.LocatorPrx? iceP_prx, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_foundLocator(iceP_prx, context, synchronous, completed);
            return completed.Task;
        }

        private const string _foundLocator_name = "foundLocator";

        private void _iceI_foundLocator(global::Ice.LocatorPrx? iceP_prx, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _foundLocator_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Ice.LocatorPrxHelper.write(ostr, iceP_prx);
                });
        }

        public static LookupReplyPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new LookupReplyPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static LookupReplyPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new LookupReplyPrxHelper(b) : null;

        public static LookupReplyPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LookupReplyPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new LookupReplyPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LookupReplyPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceLocatorDiscovery::LookupReply"
        };

        public static string ice_staticId() => "::IceLocatorDiscovery::LookupReply";

        public static void write(Ice.OutputStream ostr, LookupReplyPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static LookupReplyPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new LookupReplyPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new LookupReplyPrxHelper(reference);

        private LookupReplyPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private LookupReplyPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    public sealed class LookupPrxHelper : Ice.ObjectPrxHelperBase, LookupPrx
    {
        public void findLocator(string instanceName, LookupReplyPrx? reply, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_findLocatorAsync(instanceName, reply, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task findLocatorAsync(string instanceName, LookupReplyPrx? reply, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_findLocatorAsync(instanceName, reply, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_findLocatorAsync(string iceP_instanceName, LookupReplyPrx? iceP_reply, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_findLocator(iceP_instanceName, iceP_reply, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findLocator_name = "findLocator";

        private void _iceI_findLocator(string iceP_instanceName, LookupReplyPrx? iceP_reply, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _findLocator_name,
                Ice.OperationMode.Idempotent,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_instanceName);
                    LookupReplyPrxHelper.write(ostr, iceP_reply);
                });
        }

        public static LookupPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new LookupPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static LookupPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new LookupPrxHelper(b) : null;

        public static LookupPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LookupPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new LookupPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static LookupPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceLocatorDiscovery::Lookup"
        };

        public static string ice_staticId() => "::IceLocatorDiscovery::Lookup";

        public static void write(Ice.OutputStream ostr, LookupPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static LookupPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new LookupPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new LookupPrxHelper(reference);

        private LookupPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private LookupPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace IceLocatorDiscovery
{
    public abstract class LookupReplyDisp_ : Ice.ObjectImpl, LookupReply
    {
        public abstract void foundLocator(global::Ice.LocatorPrx? prx, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::IceLocatorDiscovery::LookupReply";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "foundLocator" => LookupReply.iceD_foundLocatorAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    public abstract class LookupDisp_ : Ice.ObjectImpl, Lookup
    {
        public abstract void findLocator(string instanceName, LookupReplyPrx? reply, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::IceLocatorDiscovery::Lookup";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "findLocator" => Lookup.iceD_findLocatorAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace IceLocatorDiscovery
{
    public partial interface LookupReply
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_foundLocatorAsync(
            LookupReply obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::Ice.LocatorPrx? iceP_prx;
            iceP_prx = global::Ice.LocatorPrxHelper.read(istr);
            istr.endEncapsulation();
            obj.foundLocator(iceP_prx, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }

    public partial interface Lookup
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_findLocatorAsync(
            Lookup obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_instanceName;
            LookupReplyPrx? iceP_reply;
            iceP_instanceName = istr.readString();
            iceP_reply = LookupReplyPrxHelper.read(istr);
            istr.endEncapsulation();
            obj.findLocator(iceP_instanceName, iceP_reply, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }
}
