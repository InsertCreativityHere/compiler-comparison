//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceLocatorDiscovery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceLocatorDiscovery
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface LookupReply : global::Ice.Object, LookupReplyOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Lookup : global::Ice.Object, LookupOperations_
    {
    }
}

namespace IceLocatorDiscovery
{
    /// <summary>
    /// The Ice lookup reply interface must be implemented by clients which are searching for Ice locators.
    /// Ice locator
    ///  implementations invoke on this interface to provide their locator proxy.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LookupReplyPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// This method is called by the implementation of the Lookup interface to reply to a findLocator request.
        /// </summary>
        /// <param name="prx">The proxy of the locator.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void foundLocator(global::Ice.LocatorPrx prx, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// This method is called by the implementation of the Lookup interface to reply to a findLocator request.
        /// </summary>
        /// <param name="prx">The proxy of the locator.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task foundLocatorAsync(global::Ice.LocatorPrx prx, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    /// <summary>
    /// The Ice lookup interface is implemented by Ice locator implementations and can be used by clients to find
    ///  available Ice locators on the network.
    /// Ice locator implementations provide a well-known `Ice/LocatorLookup' object accessible through UDP multicast.
    ///  Clients typically make a multicast findLocator request to find the locator proxy.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LookupPrx : global::Ice.ObjectPrx
    {
        /// <summary>
        /// Find a locator proxy with the given instance name.
        /// </summary>
        /// <param name="instanceName">Restrict the search to Ice registries configured with the given instance name. If
        ///  empty, all the available registries will reply.
        ///  </param>
        /// <param name="reply">The reply object to use to send the reply.</param>
        /// <param name="context">The Context map to send with the invocation.</param>

        void findLocator(string instanceName, LookupReplyPrx reply, global::System.Collections.Generic.Dictionary<string, string> context = null);

        /// <summary>
        /// Find a locator proxy with the given instance name.
        /// </summary>
        /// <param name="instanceName">Restrict the search to Ice registries configured with the given instance name. If
        ///  empty, all the available registries will reply.
        ///  </param>
        /// <param name="reply">The reply object to use to send the reply.</param>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task findLocatorAsync(string instanceName, LookupReplyPrx reply, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace IceLocatorDiscovery
{
    /// <summary>
    /// The Ice lookup reply interface must be implemented by clients which are searching for Ice locators.
    /// Ice locator
    ///  implementations invoke on this interface to provide their locator proxy.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LookupReplyOperations_
    {
        /// <summary>
        /// This method is called by the implementation of the Lookup interface to reply to a findLocator request.
        /// </summary>
        /// <param name="prx">The proxy of the locator.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void foundLocator(global::Ice.LocatorPrx prx, global::Ice.Current current = null);
    }

    /// <summary>
    /// The Ice lookup interface is implemented by Ice locator implementations and can be used by clients to find
    ///  available Ice locators on the network.
    /// Ice locator implementations provide a well-known `Ice/LocatorLookup' object accessible through UDP multicast.
    ///  Clients typically make a multicast findLocator request to find the locator proxy.
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface LookupOperations_
    {
        /// <summary>
        /// Find a locator proxy with the given instance name.
        /// </summary>
        /// <param name="instanceName">Restrict the search to Ice registries configured with the given instance name. If
        ///  empty, all the available registries will reply.
        ///  </param>
        /// <param name="reply">The reply object to use to send the reply.</param>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void findLocator(string instanceName, LookupReplyPrx reply, global::Ice.Current current = null);
    }
}

namespace IceLocatorDiscovery
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LookupReplyPrxHelper : global::Ice.ObjectPrxHelperBase, LookupReplyPrx
    {
        public LookupReplyPrxHelper()
        {
        }

        #region Synchronous operations

        public void foundLocator(global::Ice.LocatorPrx prx, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_foundLocatorAsync(prx, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task foundLocatorAsync(global::Ice.LocatorPrx prx, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_foundLocatorAsync(prx, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_foundLocatorAsync(global::Ice.LocatorPrx iceP_prx, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_foundLocator(iceP_prx, context, synchronous, completed);
            return completed.Task;
        }

        private const string _foundLocator_name = "foundLocator";

        private void _iceI_foundLocator(global::Ice.LocatorPrx iceP_prx, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _foundLocator_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.LocatorPrxHelper.write(ostr, iceP_prx);
                });
        }

        #endregion

        #region Factory operations

        public static LookupReplyPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static LookupReplyPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                LookupReplyPrxHelper prx = new LookupReplyPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static LookupReplyPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    LookupReplyPrxHelper prx = new LookupReplyPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static LookupReplyPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                LookupReplyPrxHelper prx = new LookupReplyPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static LookupReplyPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                LookupReplyPrxHelper prx = new LookupReplyPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceLocatorDiscovery::LookupReply"
        };

        public static string ice_staticId() => "::IceLocatorDiscovery::LookupReply";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, LookupReplyPrx v)
        {
            ostr.writeProxy(v);
        }

        public static LookupReplyPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                LookupReplyPrxHelper result = new LookupReplyPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LookupPrxHelper : global::Ice.ObjectPrxHelperBase, LookupPrx
    {
        public LookupPrxHelper()
        {
        }

        #region Synchronous operations

        public void findLocator(string instanceName, LookupReplyPrx reply, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_findLocatorAsync(instanceName, reply, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task findLocatorAsync(string instanceName, LookupReplyPrx reply, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_findLocatorAsync(instanceName, reply, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_findLocatorAsync(string iceP_instanceName, LookupReplyPrx iceP_reply, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_findLocator(iceP_instanceName, iceP_reply, context, synchronous, completed);
            return completed.Task;
        }

        private const string _findLocator_name = "findLocator";

        private void _iceI_findLocator(string iceP_instanceName, LookupReplyPrx iceP_reply, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _findLocator_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_instanceName);
                    LookupReplyPrxHelper.write(ostr, iceP_reply);
                });
        }

        #endregion

        #region Factory operations

        public static LookupPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static LookupPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                LookupPrxHelper prx = new LookupPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static LookupPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    LookupPrxHelper prx = new LookupPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static LookupPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                LookupPrxHelper prx = new LookupPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static LookupPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                LookupPrxHelper prx = new LookupPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceLocatorDiscovery::Lookup"
        };

        public static string ice_staticId() => "::IceLocatorDiscovery::Lookup";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, LookupPrx v)
        {
            ostr.writeProxy(v);
        }

        public static LookupPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                LookupPrxHelper result = new LookupPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace IceLocatorDiscovery
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class LookupReplyDisp_ : global::Ice.ObjectImpl, LookupReply
    {
        #region Slice operations

        public abstract void foundLocator(global::Ice.LocatorPrx prx, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceLocatorDiscovery::LookupReply"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceLocatorDiscovery::LookupReply";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_foundLocator(LookupReply obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.LocatorPrx iceP_prx = default;
            iceP_prx = global::Ice.LocatorPrxHelper.read(istr);
            inS.endReadParams();
            obj.foundLocator(iceP_prx, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "foundLocator",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_foundLocator(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class LookupDisp_ : global::Ice.ObjectImpl, Lookup
    {
        #region Slice operations

        public abstract void findLocator(string instanceName, LookupReplyPrx reply, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::IceLocatorDiscovery::Lookup"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::IceLocatorDiscovery::Lookup";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_findLocator(Lookup obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_instanceName = default;
            LookupReplyPrx iceP_reply = default;
            iceP_instanceName = istr.readString();
            iceP_reply = LookupReplyPrxHelper.read(istr);
            inS.endReadParams();
            obj.findLocator(iceP_instanceName, iceP_reply, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "findLocator",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_findLocator(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
