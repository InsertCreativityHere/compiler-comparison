//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Key.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace BEGIN
{
    public enum END
    {
        alias
    }

    public sealed class ENDHelper
    {
        public static void write(Ice.OutputStream ostr, END v)
        {
            ostr.writeEnum((int)v, 0);
        }

        public static END read(Ice.InputStream istr)
        {
            END v;
            v = (END)istr.readEnum(0);
            return v;
        }
    }

    public partial record struct and
    {
        public int begin;

        partial void ice_initialize();

        public and(int begin)
        {
            this.begin = begin;
            ice_initialize();
        }

        public and(Ice.InputStream istr)
        {
            this.begin = istr.readInt();
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeInt(this.begin);
        }

        public static void ice_write(Ice.OutputStream ostr, and v)
        {
            v.ice_writeMembers(ostr);
        }

        public static and ice_read(Ice.InputStream istr) => new(istr);
    }

    [Ice.SliceTypeId("::BEGIN::break")]
    public partial interface @break : Ice.Object
    {
        void @case(int clone, int def, Ice.Current current);

        void to_a(Ice.Current current);

        void instance_variable_set(Ice.Current current);

        void instance_variables(Ice.Current current);
    }

    [Ice.SliceTypeId("::BEGIN::display")]
    public partial class display : Ice.Value
    {
        public int when;

        public int @do;

        public breakPrx? dup;

        public int @else;

        partial void ice_initialize();

        public display(int when, int @do, breakPrx? dup, int @else)
        {
            this.when = when;
            this.@do = @do;
            this.dup = dup;
            this.@else = @else;
            ice_initialize();
        }

        public display()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::BEGIN::display";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(when);
            ostr_.writeInt(@do);
            breakPrxHelper.write(ostr_, dup);
            ostr_.writeInt(@else);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            when = istr_.readInt();
            @do = istr_.readInt();
            dup = breakPrxHelper.read(istr_);
            @else = istr_.readInt();
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::BEGIN::elsif")]
    public partial interface elsif : @break
    {
    }

    [Ice.SliceTypeId("::BEGIN::next")]
    public partial class next : Ice.UserException
    {
        public int @new;

        public next(int @new)
        {
            this.@new = @new;
        }

        public next()
        {
        }

        public override string ice_id() => "::BEGIN::next";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::BEGIN::next", -1, true);
            ostr_.writeInt(@new);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            @new = istr_.readInt();
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::BEGIN::nil")]
    public partial class nil : next
    {
        public int not;

        public int or;

        public nil(int @new, int not, int or) : base(@new)
        {
            this.not = not;
            this.or = or;
        }

        public nil()
        {
        }

        public override string ice_id() => "::BEGIN::nil";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::BEGIN::nil", -1, false);
            ostr_.writeInt(not);
            ostr_.writeInt(or);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            not = istr_.readInt();
            or = istr_.readInt();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [Ice.SliceTypeId("::BEGIN::extend")]
    public partial interface extend : Ice.Object
    {
        END @for(display? freeze, elsifPrx? hash, breakPrx? @if, display? inspect, elsifPrx? method, int methods, Ice.Current current);
    }

    public abstract class redo
    {
        public const int value = 1;
    }
}

namespace BEGIN
{
    public interface breakPrx : Ice.ObjectPrx
    {
        void @case(int clone, int def, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task caseAsync(int clone, int def, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void to_a(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task to_aAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void instance_variable_set(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task instance_variable_setAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void instance_variables(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task instance_variablesAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    public interface elsifPrx : breakPrx
    {
    }

    public interface extendPrx : Ice.ObjectPrx
    {
        END @for(display? freeze, elsifPrx? hash, breakPrx? @if, display? inspect, elsifPrx? method, int methods, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<END> forAsync(display? freeze, elsifPrx? hash, breakPrx? @if, display? inspect, elsifPrx? method, int methods, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace BEGIN
{
    public sealed class breakPrxHelper : Ice.ObjectPrxHelperBase, breakPrx
    {
        public void @case(int clone, int def, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_caseAsync(clone, def, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void to_a(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_to_aAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void instance_variable_set(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_instance_variable_setAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void instance_variables(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_instance_variablesAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task caseAsync(int clone, int def, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_caseAsync(clone, def, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_caseAsync(int iceP_clone, int iceP_def, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_case(iceP_clone, iceP_def, context, synchronous, completed);
            return completed.Task;
        }

        private const string _case_name = "case";

        private void _iceI_case(int iceP_clone, int iceP_def, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _case_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_clone);
                    ostr.writeInt(iceP_def);
                });
        }

        public global::System.Threading.Tasks.Task to_aAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_to_aAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_to_aAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_to_a(context, synchronous, completed);
            return completed.Task;
        }

        private const string _to_a_name = "to_a";

        private void _iceI_to_a(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _to_a_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task instance_variable_setAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_instance_variable_setAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_instance_variable_setAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_instance_variable_set(context, synchronous, completed);
            return completed.Task;
        }

        private const string _instance_variable_set_name = "instance_variable_set";

        private void _iceI_instance_variable_set(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _instance_variable_set_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task instance_variablesAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_instance_variablesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_instance_variablesAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_instance_variables(context, synchronous, completed);
            return completed.Task;
        }

        private const string _instance_variables_name = "instance_variables";

        private void _iceI_instance_variables(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _instance_variables_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public static breakPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new breakPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static breakPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new breakPrxHelper(b) : null;

        public static breakPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static breakPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new breakPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static breakPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::BEGIN::break",
            "::Ice::Object"
        };

        public static string ice_staticId() => "::BEGIN::break";

        public static void write(Ice.OutputStream ostr, breakPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static breakPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new breakPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new breakPrxHelper(reference);

        private breakPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private breakPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    public sealed class elsifPrxHelper : Ice.ObjectPrxHelperBase, elsifPrx
    {
        public void @case(int clone, int def, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_caseAsync(clone, def, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void to_a(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_to_aAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void instance_variable_set(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_instance_variable_setAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void instance_variables(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_instance_variablesAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task caseAsync(int clone, int def, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_caseAsync(clone, def, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_caseAsync(int iceP_clone, int iceP_def, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_case(iceP_clone, iceP_def, context, synchronous, completed);
            return completed.Task;
        }

        private const string _case_name = "case";

        private void _iceI_case(int iceP_clone, int iceP_def, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _case_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_clone);
                    ostr.writeInt(iceP_def);
                });
        }

        public global::System.Threading.Tasks.Task to_aAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_to_aAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_to_aAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_to_a(context, synchronous, completed);
            return completed.Task;
        }

        private const string _to_a_name = "to_a";

        private void _iceI_to_a(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _to_a_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task instance_variable_setAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_instance_variable_setAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_instance_variable_setAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_instance_variable_set(context, synchronous, completed);
            return completed.Task;
        }

        private const string _instance_variable_set_name = "instance_variable_set";

        private void _iceI_instance_variable_set(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _instance_variable_set_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task instance_variablesAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_instance_variablesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_instance_variablesAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_instance_variables(context, synchronous, completed);
            return completed.Task;
        }

        private const string _instance_variables_name = "instance_variables";

        private void _iceI_instance_variables(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _instance_variables_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public static elsifPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new elsifPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static elsifPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new elsifPrxHelper(b) : null;

        public static elsifPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static elsifPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new elsifPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static elsifPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::BEGIN::break",
            "::BEGIN::elsif",
            "::Ice::Object"
        };

        public static string ice_staticId() => "::BEGIN::elsif";

        public static void write(Ice.OutputStream ostr, elsifPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static elsifPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new elsifPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new elsifPrxHelper(reference);

        private elsifPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private elsifPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    public sealed class rescueHelper
    {
        public static void write(Ice.OutputStream ostr, END[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 0);
                }
            }
        }

        public static END[] read(Ice.InputStream istr)
        {
            END[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new END[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (END)istr.readEnum(0);
                }
            }
            return v;
        }
    }

    public sealed class ensureHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, END> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, END> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeEnum((int)e.Value, 0);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, END> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, END> r = new global::System.Collections.Generic.Dictionary<string, END>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                END v;
                v = (END)istr.readEnum(0);
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class extendPrxHelper : Ice.ObjectPrxHelperBase, extendPrx
    {
        public END @for(display? freeze, elsifPrx? hash, breakPrx? @if, display? inspect, elsifPrx? method, int methods, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_forAsync(freeze, hash, @if, inspect, method, methods, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<END> forAsync(display? freeze, elsifPrx? hash, breakPrx? @if, display? inspect, elsifPrx? method, int methods, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_forAsync(freeze, hash, @if, inspect, method, methods, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<END> _iceI_forAsync(display? iceP_freeze, elsifPrx? iceP_hash, breakPrx? iceP_if, display? iceP_inspect, elsifPrx? iceP_method, int iceP_methods, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_for_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<END>(progress, cancel);
            _iceI_for(iceP_freeze, iceP_hash, iceP_if, iceP_inspect, iceP_method, iceP_methods, context, synchronous, completed);
            return completed.Task;
        }

        private const string _for_name = "for";

        private void _iceI_for(display? iceP_freeze, elsifPrx? iceP_hash, breakPrx? iceP_if, display? iceP_inspect, elsifPrx? iceP_method, int iceP_methods, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<END>(completed);
            outAsync.invoke(
                _for_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_freeze);
                    elsifPrxHelper.write(ostr, iceP_hash);
                    breakPrxHelper.write(ostr, iceP_if);
                    ostr.writeValue(iceP_inspect);
                    elsifPrxHelper.write(ostr, iceP_method);
                    ostr.writeInt(iceP_methods);
                    ostr.writePendingValues();
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(nil)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    END ret;
                    ret = (END)istr.readEnum(0);
                    return ret;
                });
        }

        public static extendPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new extendPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static extendPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new extendPrxHelper(b) : null;

        public static extendPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static extendPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new extendPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static extendPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::BEGIN::extend",
            "::Ice::Object"
        };

        public static string ice_staticId() => "::BEGIN::extend";

        public static void write(Ice.OutputStream ostr, extendPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static extendPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new extendPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new extendPrxHelper(reference);

        private extendPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private extendPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace BEGIN
{
    public abstract class breakDisp_ : Ice.ObjectImpl, @break
    {
        public abstract void @case(int clone, int def, Ice.Current current);

        public abstract void to_a(Ice.Current current);

        public abstract void instance_variable_set(Ice.Current current);

        public abstract void instance_variables(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::BEGIN::break";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "case" => @break.iceD_caseAsync(this, request),
                "to_a" => @break.iceD_to_aAsync(this, request),
                "instance_variable_set" => @break.iceD_instance_variable_setAsync(this, request),
                "instance_variables" => @break.iceD_instance_variablesAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    public abstract class elsifDisp_ : Ice.ObjectImpl, elsif
    {
        public abstract void instance_variables(Ice.Current current);

        public abstract void @case(int clone, int def, Ice.Current current);

        public abstract void to_a(Ice.Current current);

        public abstract void instance_variable_set(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::BEGIN::elsif";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "case" => @break.iceD_caseAsync(this, request),
                "to_a" => @break.iceD_to_aAsync(this, request),
                "instance_variable_set" => @break.iceD_instance_variable_setAsync(this, request),
                "instance_variables" => @break.iceD_instance_variablesAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    public abstract class extendDisp_ : Ice.ObjectImpl, extend
    {
        public abstract END @for(display? freeze, elsifPrx? hash, breakPrx? @if, display? inspect, elsifPrx? method, int methods, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::BEGIN::extend";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "for" => extend.iceD_forAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace BEGIN
{
    public partial interface @break
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_caseAsync(
            @break obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            int iceP_clone;
            int iceP_def;
            iceP_clone = istr.readInt();
            iceP_def = istr.readInt();
            istr.endEncapsulation();
            obj.@case(iceP_clone, iceP_def, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_to_aAsync(
            @break obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.to_a(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_instance_variable_setAsync(
            @break obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.instance_variable_set(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_instance_variablesAsync(
            @break obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.instance_variables(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }

    public partial interface elsif
    {
    }

    public partial interface extend
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_forAsync(
            extend obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            display? iceP_freeze = null;
            elsifPrx? iceP_hash;
            breakPrx? iceP_if;
            display? iceP_inspect = null;
            elsifPrx? iceP_method;
            int iceP_methods;
            istr.readValue((display? v) => { iceP_freeze = v; });
            iceP_hash = elsifPrxHelper.read(istr);
            iceP_if = breakPrxHelper.read(istr);
            istr.readValue((display? v) => { iceP_inspect = v; });
            iceP_method = elsifPrxHelper.read(istr);
            iceP_methods = istr.readInt();
            istr.readPendingValues();
            istr.endEncapsulation();
            var ret = obj.@for(iceP_freeze, iceP_hash, iceP_if, iceP_inspect, iceP_method, iceP_methods, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeEnum((int)ret, 0);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }
}
