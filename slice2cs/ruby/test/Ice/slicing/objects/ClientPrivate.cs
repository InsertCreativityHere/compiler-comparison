// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("ClientPrivate.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test
{
    [Ice.SliceTypeId("::Test::D3")]
    public partial class D3 : B
    {
        public string sd3 = "";

        public B? pd3;

        partial void ice_initialize();

        public D3(string sb, B? pb, string sd3, B? pd3) : base(sb, pb)
        {
            global::System.ArgumentNullException.ThrowIfNull(sd3);
            this.sd3 = sd3;
            this.pd3 = pd3;
            ice_initialize();
        }

        public D3()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::D3";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(sd3);
            ostr_.writeValue(pd3);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            sd3 = istr_.readString();
            istr_.readValue((B? v) => { this.pd3 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [Ice.SliceTypeId("::Test::PCUnknown")]
    public partial class PCUnknown : PBase
    {
        public string pu = "";

        partial void ice_initialize();

        public PCUnknown(int pi, string pu) : base(pi)
        {
            global::System.ArgumentNullException.ThrowIfNull(pu);
            this.pu = pu;
            ice_initialize();
        }

        public PCUnknown()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::PCUnknown";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(pu);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            pu = istr_.readString();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [Ice.SliceTypeId("::Test::PCDerived")]
    public partial class PCDerived : PDerived
    {
        public PBase?[] pbs;

        partial void ice_initialize();

        public PCDerived(int pi, string ps, PBase? pb, PBase?[] pbs) : base(pi, ps, pb)
        {
            global::System.ArgumentNullException.ThrowIfNull(pbs);
            this.pbs = pbs;
            ice_initialize();
        }

        public PCDerived(PBase?[] pbs)
        {
            global::System.ArgumentNullException.ThrowIfNull(pbs);
            this.pbs = pbs;
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public PCDerived()
        {
            this.pbs = null!;
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::PCDerived";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            PBaseSeqHelper.write(ostr_, pbs);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            pbs = PBaseSeqHelper.read(istr_);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [Ice.SliceTypeId("::Test::PCDerived2")]
    public partial class PCDerived2 : PCDerived
    {
        public int pcd2;

        partial void ice_initialize();

        public PCDerived2(int pi, string ps, PBase? pb, PBase?[] pbs, int pcd2) : base(pi, ps, pb, pbs)
        {
            this.pcd2 = pcd2;
            ice_initialize();
        }

        public PCDerived2(PBase?[] pbs) : base(pbs)
        {
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public PCDerived2()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::PCDerived2";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeInt(pcd2);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            pcd2 = istr_.readInt();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [Ice.SliceTypeId("::Test::PCDerived3")]
    public partial class PCDerived3 : PCDerived2
    {
        public Ice.Value? pcd3;

        partial void ice_initialize();

        public PCDerived3(int pi, string ps, PBase? pb, PBase?[] pbs, int pcd2, Ice.Value? pcd3) : base(pi, ps, pb, pbs, pcd2)
        {
            this.pcd3 = pcd3;
            ice_initialize();
        }

        public PCDerived3(PBase?[] pbs) : base(pbs)
        {
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public PCDerived3()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::PCDerived3";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeValue(pcd3);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((Ice.Value? v) => { this.pcd3 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [Ice.SliceTypeId("::Test::CompactPCDerived")]
    [Ice.CompactSliceTypeId(57)]
    public partial class CompactPCDerived : CompactPDerived
    {
        public PBase?[] pbs;

        partial void ice_initialize();

        public CompactPCDerived(int pi, string ps, PBase? pb, PBase?[] pbs) : base(pi, ps, pb)
        {
            global::System.ArgumentNullException.ThrowIfNull(pbs);
            this.pbs = pbs;
            ice_initialize();
        }

        public CompactPCDerived(PBase?[] pbs)
        {
            global::System.ArgumentNullException.ThrowIfNull(pbs);
            this.pbs = pbs;
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public CompactPCDerived()
        {
            this.pbs = null!;
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::CompactPCDerived";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), 57, false);
            PBaseSeqHelper.write(ostr_, pbs);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            pbs = PBaseSeqHelper.read(istr_);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }
}
