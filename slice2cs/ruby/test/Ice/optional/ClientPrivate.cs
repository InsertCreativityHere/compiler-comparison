// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("ClientPrivate.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test
{
    [Ice.SliceTypeId("::Test::Initial2")]
    public partial interface Initial2 : Ice.Object
    {
        void opClassAndUnknownOptional(A? p, VarStruct? ovs, Ice.Current current);

        void opVoid(int? a, string? v, Ice.Current current);
    }
}

namespace Test
{
    public interface Initial2Prx : Ice.ObjectPrx
    {
        void opClassAndUnknownOptional(A? p, VarStruct? ovs, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task opClassAndUnknownOptionalAsync(A? p, VarStruct? ovs, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void opVoid(int? a, string? v, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task opVoidAsync(int? a, string? v, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    public sealed class Initial2PrxHelper : Ice.ObjectPrxHelperBase, Initial2Prx
    {
        public void opClassAndUnknownOptional(A? p, VarStruct? ovs, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opClassAndUnknownOptionalAsync(p, ovs, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opVoid(int? a, string? v, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opVoidAsync(a, v, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task opClassAndUnknownOptionalAsync(A? p, VarStruct? ovs, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opClassAndUnknownOptionalAsync(p, ovs, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opClassAndUnknownOptionalAsync(A? iceP_p, VarStruct? iceP_ovs, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opClassAndUnknownOptional(iceP_p, iceP_ovs, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opClassAndUnknownOptional_name = "opClassAndUnknownOptional";

        private void _iceI_opClassAndUnknownOptional(A? iceP_p, VarStruct? iceP_ovs, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opClassAndUnknownOptional_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_p);
                    if (iceP_ovs is not null && ostr.writeOptional(1, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        VarStruct.ice_write(ostr, iceP_ovs);
                        ostr.endSize(pos);
                    }
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task opVoidAsync(int? a, string? v, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opVoidAsync(a, v, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opVoidAsync(int? iceP_a, string? iceP_v, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opVoid(iceP_a, iceP_v, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVoid_name = "opVoid";

        private void _iceI_opVoid(int? iceP_a, string? iceP_v, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opVoid_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(1, iceP_a);
                    ostr.writeString(2, iceP_v);
                });
        }

        public static Initial2Prx createProxy(Ice.Communicator communicator, string proxyString) =>
            new Initial2PrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static Initial2Prx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new Initial2PrxHelper(b) : null;

        public static Initial2Prx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static Initial2Prx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new Initial2PrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static Initial2Prx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Initial2"
        };

        public static string ice_staticId() => "::Test::Initial2";

        public static void write(Ice.OutputStream ostr, Initial2Prx? v)
        {
            ostr.writeProxy(v);
        }

        public static Initial2Prx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new Initial2PrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new Initial2PrxHelper(reference);

        private Initial2PrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private Initial2PrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test
{
    public abstract class Initial2Disp_ : Ice.ObjectImpl, Initial2
    {
        public abstract void opClassAndUnknownOptional(A? p, VarStruct? ovs, Ice.Current current);

        public abstract void opVoid(int? a, string? v, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::Initial2";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "opClassAndUnknownOptional" => Initial2.iceD_opClassAndUnknownOptionalAsync(this, request),
                "opVoid" => Initial2.iceD_opVoidAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test
{
    public partial interface Initial2
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opClassAndUnknownOptionalAsync(
            Initial2 obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            A? iceP_p = null;
            VarStruct? iceP_ovs;
            istr.readValue((A? v) => { iceP_p = v; });
            if (istr.readOptional(1, Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                VarStruct tmpVal;
                tmpVal = new VarStruct(istr);
                iceP_ovs = tmpVal;
            }
            else
            {
                iceP_ovs = null;
            }
            istr.readPendingValues();
            istr.endEncapsulation();
            obj.opClassAndUnknownOptional(iceP_p, iceP_ovs, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opVoidAsync(
            Initial2 obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            int? iceP_a;
            string? iceP_v;
            iceP_a = istr.readInt(1);
            iceP_v = istr.readString(2);
            istr.endEncapsulation();
            obj.opVoid(iceP_a, iceP_v, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }
}
