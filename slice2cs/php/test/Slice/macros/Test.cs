// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test
{
    [Ice.SliceTypeId("::Test::Default")]
    public partial class Default : Ice.Value
    {
        public int x;

        public int y;

        partial void ice_initialize();

        public Default(int x, int y)
        {
            this.x = x;
            this.y = y;
            ice_initialize();
        }

        public Default()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::Default";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(x);
            ostr_.writeInt(y);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            x = istr_.readInt();
            y = istr_.readInt();
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test::NoDefault")]
    public partial class NoDefault : Ice.Value
    {
        public int x = 10;

        public int y = 10;

        partial void ice_initialize();

        public NoDefault(int x, int y)
        {
            this.x = x;
            this.y = y;
            ice_initialize();
        }

        public NoDefault()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::NoDefault";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(x);
            ostr_.writeInt(y);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            x = istr_.readInt();
            y = istr_.readInt();
            istr_.endSlice();
        }
    }
}
