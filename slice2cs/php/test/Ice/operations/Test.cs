//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable 1591

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public enum MyEnum
    {
        enum1,
        enum2,
        enum3
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyEnumHelper
    {
        public static void write(Ice.OutputStream ostr, MyEnum v)
        {
            ostr.writeEnum((int)v, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static MyEnum read(Ice.InputStream istr)
        {
            MyEnum v;
            v = (MyEnum)istr.readEnum(2);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial record class AnotherStruct
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string s = "";

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AnotherStruct()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AnotherStruct(string s)
        {
            global::System.ArgumentNullException.ThrowIfNull(s);
            this.s = s;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AnotherStruct(Ice.InputStream istr)
        {
            this.s = istr.readString();
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeString(this.s);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(Ice.OutputStream ostr, AnotherStruct v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static AnotherStruct ice_read(Ice.InputStream istr) => new(istr);
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial record class Structure
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyClassPrx? p;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyEnum e;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AnotherStruct s;

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Structure(AnotherStruct s)
        {
            global::System.ArgumentNullException.ThrowIfNull(s);
            this.s = s;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Structure(MyClassPrx? p, MyEnum e, AnotherStruct s)
        {
            this.p = p;
            this.e = e;
            global::System.ArgumentNullException.ThrowIfNull(s);
            this.s = s;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Structure(Ice.InputStream istr)
        {
            this.p = MyClassPrxHelper.read(istr);
            this.e = (MyEnum)istr.readEnum(2);
            this.s = new AnotherStruct(istr);
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            MyClassPrxHelper.write(ostr, this.p);
            ostr.writeEnum((int)this.e, 2);
            AnotherStruct.ice_write(ostr, this.s);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(Ice.OutputStream ostr, Structure v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static Structure ice_read(Ice.InputStream istr) => new(istr);
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::MyClass")]
    public partial interface MyClass : Ice.Object
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void shutdown(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool supportsCompress(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void opVoid(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte opByte(byte p1, byte p2, out byte p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool opBool(bool p1, bool p2, out bool p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        double opFloatDouble(float p1, double p2, out float p3, out double p4, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string opString(string p1, string p2, out string p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyEnum opMyEnum(MyEnum p1, out MyEnum p2, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyClassPrx? opMyClass(MyClassPrx? p1, out MyClassPrx? p2, out MyClassPrx? p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        Structure opStruct(Structure p1, Structure p2, out Structure p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[] opStringS(string[] p1, string[] p2, out string[] p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, MyEnum> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<MyEnum, string> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        int[] opIntS(int[] s, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, string> opContext(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void opIdempotent(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte opByte1(byte opByte1, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        short opShort1(short opShort1, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        int opInt1(int opInt1, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        long opLong1(long opLong1, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        float opFloat1(float opFloat1, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        double opDouble1(double opDouble1, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string opString1(string opString1, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[] opStringS1(string[] opStringS1, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[] opStringS2(string[] stringS, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[] opStringLiterals(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyClass_OpMStruct1MarshaledResult opMStruct1(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyClass_OpMStruct2MarshaledResult opMStruct2(Structure p1, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyClass_OpMSeq1MarshaledResult opMSeq1(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyClass_OpMSeq2MarshaledResult opMSeq2(string[] p1, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyClass_OpMDict1MarshaledResult opMDict1(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyClass_OpMDict2MarshaledResult opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, Ice.Current current);
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial record class MyStruct1
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string tesT = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyClassPrx? myClass;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string myStruct1 = "";

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyStruct1()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyStruct1(string tesT, MyClassPrx? myClass, string myStruct1)
        {
            global::System.ArgumentNullException.ThrowIfNull(tesT);
            this.tesT = tesT;
            this.myClass = myClass;
            global::System.ArgumentNullException.ThrowIfNull(myStruct1);
            this.myStruct1 = myStruct1;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyStruct1(Ice.InputStream istr)
        {
            this.tesT = istr.readString();
            this.myClass = MyClassPrxHelper.read(istr);
            this.myStruct1 = istr.readString();
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeString(this.tesT);
            MyClassPrxHelper.write(ostr, this.myClass);
            ostr.writeString(this.myStruct1);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(Ice.OutputStream ostr, MyStruct1 v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static MyStruct1 ice_read(Ice.InputStream istr) => new(istr);
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::MyClass1")]
    public partial class MyClass1 : Ice.Value
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string tesT = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyClassPrx? myClass;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string myClass1 = "";

        partial void ice_initialize();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyClass1(string tesT, MyClassPrx? myClass, string myClass1)
        {
            global::System.ArgumentNullException.ThrowIfNull(tesT);
            this.tesT = tesT;
            this.myClass = myClass;
            global::System.ArgumentNullException.ThrowIfNull(myClass1);
            this.myClass1 = myClass1;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyClass1()
        {
            ice_initialize();
        }

        private const string _id = "::Test::MyClass1";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(tesT);
            MyClassPrxHelper.write(ostr_, myClass);
            ostr_.writeString(myClass1);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            tesT = istr_.readString();
            myClass = MyClassPrxHelper.read(istr_);
            myClass1 = istr_.readString();
            istr_.endSlice();
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::MyDerivedClass")]
    public partial interface MyDerivedClass : MyClass
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void opDerived(Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyStruct1 opMyStruct1(MyStruct1 s, Ice.Current current);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyClass1? opMyClass1(MyClass1? c, Ice.Current current);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class s0
    {
        public const string value = "\\";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class s1
    {
        public const string value = "A";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class s2
    {
        public const string value = "Ice";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class s3
    {
        public const string value = "A21";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class s4
    {
        public const string value = "\\u0041 \\U00000041";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class s5
    {
        public const string value = "\u00FF";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class s6
    {
        public const string value = "\u03FF";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class s7
    {
        public const string value = "\u05F0";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class s8
    {
        public const string value = "\U00010000";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class s9
    {
        public const string value = "\U0001F34C";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class s10
    {
        public const string value = "\u0DA7";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class sw0
    {
        public const string value = "\\";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class sw1
    {
        public const string value = "A";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class sw2
    {
        public const string value = "Ice";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class sw3
    {
        public const string value = "A21";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class sw4
    {
        public const string value = "\\u0041 \\U00000041";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class sw5
    {
        public const string value = "\U000000FF";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class sw6
    {
        public const string value = "\U000003FF";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class sw7
    {
        public const string value = "\U000005F0";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class sw8
    {
        public const string value = "\U00010000";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class sw9
    {
        public const string value = "\U0001F34C";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class sw10
    {
        public const string value = "\U00000DA7";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class ss0
    {
        public const string value = "'\"?\\\a\b\f\n\r\t\v\u0006";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class ss1
    {
        public const string value = "'\"?\\\a\b\f\n\r\t\v\u0006";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class ss2
    {
        public const string value = "'\"?\\\a\b\f\n\r\t\v\u0006";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class ss3
    {
        public const string value = "\\\\U\\u\\";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class ss4
    {
        public const string value = "\\A\\";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class ss5
    {
        public const string value = "\\u0041\\";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class su0
    {
        public const string value = "\u0128\u0178\u00ff\u0100\u1f00\U00010194\U0001016a\U00010198\U0001f340\U0001f341\U0001f342\U0001f343";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class su1
    {
        public const string value = "\u0128\u0178\u00FF\u0100\u1F00\U00010194\U0001016A\U00010198\U0001F340\U0001F341\U0001F342\U0001F343";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class su2
    {
        public const string value = "\U00000128\U00000178\U000000FF\U00000100\U00001F00\U00010194\U0001016A\U00010198\U0001F340\U0001F341\U0001F342\U0001F343";
    }
}

namespace Test2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test2::MyDerivedClass")]
    public partial interface MyDerivedClass : global::Test.MyClass
    {
    }
}

namespace Test
{
    public record struct MyClass_OpByteResult(byte returnValue, byte p3);

    public record struct MyClass_OpBoolResult(bool returnValue, bool p3);

    public record struct MyClass_OpShortIntLongResult(long returnValue, short p4, int p5, long p6);

    public record struct MyClass_OpFloatDoubleResult(double returnValue, float p3, double p4);

    public record struct MyClass_OpStringResult(string returnValue, string p3);

    public record struct MyClass_OpMyEnumResult(MyEnum returnValue, MyEnum p2);

    public record struct MyClass_OpMyClassResult(MyClassPrx? returnValue, MyClassPrx? p2, MyClassPrx? p3);

    public record struct MyClass_OpStructResult(Structure returnValue, Structure p3);

    public record struct MyClass_OpByteSResult(byte[] returnValue, byte[] p3);

    public record struct MyClass_OpBoolSResult(bool[] returnValue, bool[] p3);

    public record struct MyClass_OpShortIntLongSResult(long[] returnValue, short[] p4, int[] p5, long[] p6);

    public record struct MyClass_OpFloatDoubleSResult(double[] returnValue, float[] p3, double[] p4);

    public record struct MyClass_OpStringSResult(string[] returnValue, string[] p3);

    public record struct MyClass_OpByteSSResult(byte[][] returnValue, byte[][] p3);

    public record struct MyClass_OpBoolSSResult(bool[][] returnValue, bool[][] p3);

    public record struct MyClass_OpShortIntLongSSResult(long[][] returnValue, short[][] p4, int[][] p5, long[][] p6);

    public record struct MyClass_OpFloatDoubleSSResult(double[][] returnValue, float[][] p3, double[][] p4);

    public record struct MyClass_OpStringSSResult(string[][] returnValue, string[][] p3);

    public record struct MyClass_OpByteBoolDResult(global::System.Collections.Generic.Dictionary<byte, bool> returnValue, global::System.Collections.Generic.Dictionary<byte, bool> p3);

    public record struct MyClass_OpShortIntDResult(global::System.Collections.Generic.Dictionary<short, int> returnValue, global::System.Collections.Generic.Dictionary<short, int> p3);

    public record struct MyClass_OpLongFloatDResult(global::System.Collections.Generic.Dictionary<long, float> returnValue, global::System.Collections.Generic.Dictionary<long, float> p3);

    public record struct MyClass_OpStringStringDResult(global::System.Collections.Generic.Dictionary<string, string> returnValue, global::System.Collections.Generic.Dictionary<string, string> p3);

    public record struct MyClass_OpStringMyEnumDResult(global::System.Collections.Generic.Dictionary<string, MyEnum> returnValue, global::System.Collections.Generic.Dictionary<string, MyEnum> p3);

    public record struct MyClass_OpMyEnumStringDResult(global::System.Collections.Generic.Dictionary<MyEnum, string> returnValue, global::System.Collections.Generic.Dictionary<MyEnum, string> p3);

    public record struct MyClass_OpByteBoolDSResult(global::System.Collections.Generic.Dictionary<byte, bool>[] returnValue, global::System.Collections.Generic.Dictionary<byte, bool>[] p3);

    public record struct MyClass_OpShortIntDSResult(global::System.Collections.Generic.Dictionary<short, int>[] returnValue, global::System.Collections.Generic.Dictionary<short, int>[] p3);

    public record struct MyClass_OpLongFloatDSResult(global::System.Collections.Generic.Dictionary<long, float>[] returnValue, global::System.Collections.Generic.Dictionary<long, float>[] p3);

    public record struct MyClass_OpStringStringDSResult(global::System.Collections.Generic.Dictionary<string, string>[] returnValue, global::System.Collections.Generic.Dictionary<string, string>[] p3);

    public record struct MyClass_OpStringMyEnumDSResult(global::System.Collections.Generic.Dictionary<string, MyEnum>[] returnValue, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3);

    public record struct MyClass_OpMyEnumStringDSResult(global::System.Collections.Generic.Dictionary<MyEnum, string>[] returnValue, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3);

    public record struct MyClass_OpByteByteSDResult(global::System.Collections.Generic.Dictionary<byte, byte[]> returnValue, global::System.Collections.Generic.Dictionary<byte, byte[]> p3);

    public record struct MyClass_OpBoolBoolSDResult(global::System.Collections.Generic.Dictionary<bool, bool[]> returnValue, global::System.Collections.Generic.Dictionary<bool, bool[]> p3);

    public record struct MyClass_OpShortShortSDResult(global::System.Collections.Generic.Dictionary<short, short[]> returnValue, global::System.Collections.Generic.Dictionary<short, short[]> p3);

    public record struct MyClass_OpIntIntSDResult(global::System.Collections.Generic.Dictionary<int, int[]> returnValue, global::System.Collections.Generic.Dictionary<int, int[]> p3);

    public record struct MyClass_OpLongLongSDResult(global::System.Collections.Generic.Dictionary<long, long[]> returnValue, global::System.Collections.Generic.Dictionary<long, long[]> p3);

    public record struct MyClass_OpStringFloatSDResult(global::System.Collections.Generic.Dictionary<string, float[]> returnValue, global::System.Collections.Generic.Dictionary<string, float[]> p3);

    public record struct MyClass_OpStringDoubleSDResult(global::System.Collections.Generic.Dictionary<string, double[]> returnValue, global::System.Collections.Generic.Dictionary<string, double[]> p3);

    public record struct MyClass_OpStringStringSDResult(global::System.Collections.Generic.Dictionary<string, string[]> returnValue, global::System.Collections.Generic.Dictionary<string, string[]> p3);

    public record struct MyClass_OpMyEnumMyEnumSDResult(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> returnValue, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public readonly record struct MyClass_OpMStruct1MarshaledResult : Ice.MarshaledResult
    {
        public MyClass_OpMStruct1MarshaledResult(Structure ret, Ice.Current current)
        {
            _ostr = Ice.CurrentExtensions.startReplyStream(current);
            _ostr.startEncapsulation(current.encoding, Ice.FormatType.DefaultFormat);
            Structure.ice_write(_ostr, ret);
            _ostr.endEncapsulation();
        }

        public Ice.OutputStream outputStream => _ostr;

        private readonly Ice.OutputStream _ostr;
    }

    public record struct MyClass_OpMStruct2Result(Structure returnValue, Structure p2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public readonly record struct MyClass_OpMStruct2MarshaledResult : Ice.MarshaledResult
    {
        public MyClass_OpMStruct2MarshaledResult(Structure ret, Structure p2, Ice.Current current)
        {
            _ostr = Ice.CurrentExtensions.startReplyStream(current);
            _ostr.startEncapsulation(current.encoding, Ice.FormatType.DefaultFormat);
            Structure.ice_write(_ostr, p2);
            Structure.ice_write(_ostr, ret);
            _ostr.endEncapsulation();
        }

        public Ice.OutputStream outputStream => _ostr;

        private readonly Ice.OutputStream _ostr;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public readonly record struct MyClass_OpMSeq1MarshaledResult : Ice.MarshaledResult
    {
        public MyClass_OpMSeq1MarshaledResult(string[] ret, Ice.Current current)
        {
            _ostr = Ice.CurrentExtensions.startReplyStream(current);
            _ostr.startEncapsulation(current.encoding, Ice.FormatType.DefaultFormat);
            StringSHelper.write(_ostr, ret);
            _ostr.endEncapsulation();
        }

        public Ice.OutputStream outputStream => _ostr;

        private readonly Ice.OutputStream _ostr;
    }

    public record struct MyClass_OpMSeq2Result(string[] returnValue, string[] p2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public readonly record struct MyClass_OpMSeq2MarshaledResult : Ice.MarshaledResult
    {
        public MyClass_OpMSeq2MarshaledResult(string[] ret, string[] p2, Ice.Current current)
        {
            _ostr = Ice.CurrentExtensions.startReplyStream(current);
            _ostr.startEncapsulation(current.encoding, Ice.FormatType.DefaultFormat);
            StringSHelper.write(_ostr, p2);
            StringSHelper.write(_ostr, ret);
            _ostr.endEncapsulation();
        }

        public Ice.OutputStream outputStream => _ostr;

        private readonly Ice.OutputStream _ostr;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public readonly record struct MyClass_OpMDict1MarshaledResult : Ice.MarshaledResult
    {
        public MyClass_OpMDict1MarshaledResult(global::System.Collections.Generic.Dictionary<string, string> ret, Ice.Current current)
        {
            _ostr = Ice.CurrentExtensions.startReplyStream(current);
            _ostr.startEncapsulation(current.encoding, Ice.FormatType.DefaultFormat);
            StringStringDHelper.write(_ostr, ret);
            _ostr.endEncapsulation();
        }

        public Ice.OutputStream outputStream => _ostr;

        private readonly Ice.OutputStream _ostr;
    }

    public record struct MyClass_OpMDict2Result(global::System.Collections.Generic.Dictionary<string, string> returnValue, global::System.Collections.Generic.Dictionary<string, string> p2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public readonly record struct MyClass_OpMDict2MarshaledResult : Ice.MarshaledResult
    {
        public MyClass_OpMDict2MarshaledResult(global::System.Collections.Generic.Dictionary<string, string> ret, global::System.Collections.Generic.Dictionary<string, string> p2, Ice.Current current)
        {
            _ostr = Ice.CurrentExtensions.startReplyStream(current);
            _ostr.startEncapsulation(current.encoding, Ice.FormatType.DefaultFormat);
            StringStringDHelper.write(_ostr, p2);
            StringStringDHelper.write(_ostr, ret);
            _ostr.endEncapsulation();
        }

        public Ice.OutputStream outputStream => _ostr;

        private readonly Ice.OutputStream _ostr;
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface MyClassPrx : Ice.ObjectPrx
    {
        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool supportsCompress(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<bool> supportsCompressAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void opVoid(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task opVoidAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte opByte(byte p1, byte p2, out byte p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpByteResult> opByteAsync(byte p1, byte p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool opBool(bool p1, bool p2, out bool p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpBoolResult> opBoolAsync(bool p1, bool p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpShortIntLongResult> opShortIntLongAsync(short p1, int p2, long p3, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        double opFloatDouble(float p1, double p2, out float p3, out double p4, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleResult> opFloatDoubleAsync(float p1, double p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string opString(string p1, string p2, out string p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpStringResult> opStringAsync(string p1, string p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        MyEnum opMyEnum(MyEnum p1, out MyEnum p2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpMyEnumResult> opMyEnumAsync(MyEnum p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        MyClassPrx? opMyClass(MyClassPrx? p1, out MyClassPrx? p2, out MyClassPrx? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpMyClassResult> opMyClassAsync(MyClassPrx? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        Structure opStruct(Structure p1, Structure p2, out Structure p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpStructResult> opStructAsync(Structure p1, Structure p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpByteSResult> opByteSAsync(byte[] p1, byte[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpBoolSResult> opBoolSAsync(bool[] p1, bool[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSResult> opShortIntLongSAsync(short[] p1, int[] p2, long[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSResult> opFloatDoubleSAsync(float[] p1, double[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringS(string[] p1, string[] p2, out string[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpStringSResult> opStringSAsync(string[] p1, string[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpByteSSResult> opByteSSAsync(byte[][] p1, byte[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpBoolSSResult> opBoolSSAsync(bool[][] p1, bool[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSSResult> opShortIntLongSSAsync(short[][] p1, int[][] p2, long[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSSResult> opFloatDoubleSSAsync(float[][] p1, double[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpStringSSResult> opStringSSAsync(string[][] p1, string[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpByteBoolDResult> opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpShortIntDResult> opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpLongFloatDResult> opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpStringStringDResult> opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, MyEnum> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDResult> opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<MyEnum, string> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDResult> opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpByteBoolDSResult> opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpShortIntDSResult> opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpLongFloatDSResult> opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpStringStringDSResult> opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDSResult> opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDSResult> opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpByteByteSDResult> opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpBoolBoolSDResult> opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpShortShortSDResult> opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpIntIntSDResult> opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpLongLongSDResult> opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpStringFloatSDResult> opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpStringDoubleSDResult> opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpStringStringSDResult> opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpMyEnumMyEnumSDResult> opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        int[] opIntS(int[] s, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<int[]> opIntSAsync(int[] s, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, string> opContext(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opContextAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void opIdempotent(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task opIdempotentAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte opByte1(byte opByte1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<byte> opByte1Async(byte opByte1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        short opShort1(short opShort1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<short> opShort1Async(short opShort1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        int opInt1(int opInt1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<int> opInt1Async(int opInt1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        long opLong1(long opLong1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<long> opLong1Async(long opLong1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        float opFloat1(float opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<float> opFloat1Async(float opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        double opDouble1(double opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<double> opDouble1Async(double opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string opString1(string opString1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<string> opString1Async(string opString1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringS1(string[] opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<string[]> opStringS1Async(string[] opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringS2(string[] stringS, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<string[]> opStringS2Async(string[] stringS, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringLiterals(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<string[]> opStringLiteralsAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        Structure opMStruct1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Structure> opMStruct1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        Structure opMStruct2(Structure p1, out Structure p2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpMStruct2Result> opMStruct2Async(Structure p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opMSeq1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<string[]> opMSeq1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opMSeq2(string[] p1, out string[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpMSeq2Result> opMSeq2Async(string[] p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, string> opMDict1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opMDict1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, string> opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, out global::System.Collections.Generic.Dictionary<string, string> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass_OpMDict2Result> opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface MyDerivedClassPrx : MyClassPrx
    {
        void opDerived(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task opDerivedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        MyStruct1 opMyStruct1(MyStruct1 s, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyStruct1> opMyStruct1Async(MyStruct1 s, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        MyClass1? opMyClass1(MyClass1? c, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<MyClass1?> opMyClass1Async(MyClass1? c, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test2
{
    /// <summary>
    /// Makes sure that proxy operations are correctly generated when extending an interface from
    /// a different module (ICE-7639).
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface MyDerivedClassPrx : global::Test.MyClassPrx
    {
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteSHelper
    {
        public static void write(Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolSHelper
    {
        public static void write(Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ShortSHelper
    {
        public static void write(Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntSHelper
    {
        public static void write(Ice.OutputStream ostr, int[] v)
        {
            ostr.writeIntSeq(v);
        }

        public static int[] read(Ice.InputStream istr)
        {
            int[] v;
            v = istr.readIntSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LongSHelper
    {
        public static void write(Ice.OutputStream ostr, long[] v)
        {
            ostr.writeLongSeq(v);
        }

        public static long[] read(Ice.InputStream istr)
        {
            long[] v;
            v = istr.readLongSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FloatSHelper
    {
        public static void write(Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DoubleSHelper
    {
        public static void write(Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringSHelper
    {
        public static void write(Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyEnumSHelper
    {
        public static void write(Ice.OutputStream ostr, MyEnum[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 2);
                }
            }
        }

        public static MyEnum[] read(Ice.InputStream istr)
        {
            MyEnum[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new MyEnum[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (MyEnum)istr.readEnum(2);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyClassSHelper
    {
        public static void write(Ice.OutputStream ostr, MyClassPrx?[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    MyClassPrxHelper.write(ostr, v[ix]);
                }
            }
        }

        public static MyClassPrx?[] read(Ice.InputStream istr)
        {
            MyClassPrx?[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new MyClassPrx?[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = MyClassPrxHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteSSHelper
    {
        public static void write(Ice.OutputStream ostr, byte[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ByteSHelper.write(ostr, v[ix]);
                }
            }
        }

        public static byte[][] read(Ice.InputStream istr)
        {
            byte[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new byte[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = ByteSHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolSSHelper
    {
        public static void write(Ice.OutputStream ostr, bool[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    BoolSHelper.write(ostr, v[ix]);
                }
            }
        }

        public static bool[][] read(Ice.InputStream istr)
        {
            bool[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new bool[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = BoolSHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ShortSSHelper
    {
        public static void write(Ice.OutputStream ostr, short[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ShortSHelper.write(ostr, v[ix]);
                }
            }
        }

        public static short[][] read(Ice.InputStream istr)
        {
            short[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new short[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = ShortSHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntSSHelper
    {
        public static void write(Ice.OutputStream ostr, int[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    IntSHelper.write(ostr, v[ix]);
                }
            }
        }

        public static int[][] read(Ice.InputStream istr)
        {
            int[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new int[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = IntSHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LongSSHelper
    {
        public static void write(Ice.OutputStream ostr, long[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    LongSHelper.write(ostr, v[ix]);
                }
            }
        }

        public static long[][] read(Ice.InputStream istr)
        {
            long[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new long[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = LongSHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FloatSSHelper
    {
        public static void write(Ice.OutputStream ostr, float[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    FloatSHelper.write(ostr, v[ix]);
                }
            }
        }

        public static float[][] read(Ice.InputStream istr)
        {
            float[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new float[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = FloatSHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DoubleSSHelper
    {
        public static void write(Ice.OutputStream ostr, double[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    DoubleSHelper.write(ostr, v[ix]);
                }
            }
        }

        public static double[][] read(Ice.InputStream istr)
        {
            double[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new double[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = DoubleSHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringSSHelper
    {
        public static void write(Ice.OutputStream ostr, string[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringSHelper.write(ostr, v[ix]);
                }
            }
        }

        public static string[][] read(Ice.InputStream istr)
        {
            string[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new string[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringSHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyEnumSSHelper
    {
        public static void write(Ice.OutputStream ostr, MyEnum[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    MyEnumSHelper.write(ostr, v[ix]);
                }
            }
        }

        public static MyEnum[][] read(Ice.InputStream istr)
        {
            MyEnum[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new MyEnum[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = MyEnumSHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyClassSSHelper
    {
        public static void write(Ice.OutputStream ostr, MyClassPrx?[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    MyClassSHelper.write(ostr, v[ix]);
                }
            }
        }

        public static MyClassPrx?[][] read(Ice.InputStream istr)
        {
            MyClassPrx?[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new MyClassPrx?[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = MyClassSHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteBoolDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<byte, bool> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<byte, bool> e in v)
                {
                    ostr.writeByte(e.Key);
                    ostr.writeBool(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<byte, bool> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<byte, bool> r = new global::System.Collections.Generic.Dictionary<byte, bool>();
            for(int i = 0; i < sz; ++i)
            {
                byte k;
                k = istr.readByte();
                bool v;
                v = istr.readBool();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ShortIntDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<short, int> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<short, int> e in v)
                {
                    ostr.writeShort(e.Key);
                    ostr.writeInt(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<short, int> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<short, int> r = new global::System.Collections.Generic.Dictionary<short, int>();
            for(int i = 0; i < sz; ++i)
            {
                short k;
                k = istr.readShort();
                int v;
                v = istr.readInt();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LongFloatDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<long, float> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<long, float> e in v)
                {
                    ostr.writeLong(e.Key);
                    ostr.writeFloat(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<long, float> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<long, float> r = new global::System.Collections.Generic.Dictionary<long, float>();
            for(int i = 0; i < sz; ++i)
            {
                long k;
                k = istr.readLong();
                float v;
                v = istr.readFloat();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, string> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, string> r = new global::System.Collections.Generic.Dictionary<string, string>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringMyEnumDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, MyEnum> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, MyEnum> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeEnum((int)e.Value, 2);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, MyEnum> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, MyEnum> r = new global::System.Collections.Generic.Dictionary<string, MyEnum>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                MyEnum v;
                v = (MyEnum)istr.readEnum(2);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyEnumStringDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<MyEnum, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<MyEnum, string> e in v)
                {
                    ostr.writeEnum((int)e.Key, 2);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<MyEnum, string> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<MyEnum, string> r = new global::System.Collections.Generic.Dictionary<MyEnum, string>();
            for(int i = 0; i < sz; ++i)
            {
                MyEnum k;
                k = (MyEnum)istr.readEnum(2);
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteBoolDSHelper
    {
        public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<byte, bool>[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ByteBoolDHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<byte, bool>[] read(Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<byte, bool>[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<byte, bool>[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = ByteBoolDHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ShortIntDSHelper
    {
        public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<short, int>[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ShortIntDHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<short, int>[] read(Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<short, int>[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<short, int>[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = ShortIntDHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LongFloatDSHelper
    {
        public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<long, float>[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    LongFloatDHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<long, float>[] read(Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<long, float>[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<long, float>[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = LongFloatDHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringDSHelper
    {
        public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, string>[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringStringDHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string>[] read(Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<string, string>[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<string, string>[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringStringDHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringMyEnumDSHelper
    {
        public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<string, MyEnum>[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringMyEnumDHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, MyEnum>[] read(Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<string, MyEnum>[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<string, MyEnum>[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringMyEnumDHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyEnumStringDSHelper
    {
        public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<MyEnum, string>[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    MyEnumStringDHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<MyEnum, string>[] read(Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<MyEnum, string>[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<MyEnum, string>[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = MyEnumStringDHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteByteSDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<byte, byte[]> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<byte, byte[]> e in v)
                {
                    ostr.writeByte(e.Key);
                    ByteSHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<byte, byte[]> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<byte, byte[]> r = new global::System.Collections.Generic.Dictionary<byte, byte[]>();
            for(int i = 0; i < sz; ++i)
            {
                byte k;
                k = istr.readByte();
                byte[] v;
                v = ByteSHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolBoolSDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<bool, bool[]> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<bool, bool[]> e in v)
                {
                    ostr.writeBool(e.Key);
                    BoolSHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<bool, bool[]> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<bool, bool[]> r = new global::System.Collections.Generic.Dictionary<bool, bool[]>();
            for(int i = 0; i < sz; ++i)
            {
                bool k;
                k = istr.readBool();
                bool[] v;
                v = BoolSHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ShortShortSDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<short, short[]> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<short, short[]> e in v)
                {
                    ostr.writeShort(e.Key);
                    ShortSHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<short, short[]> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<short, short[]> r = new global::System.Collections.Generic.Dictionary<short, short[]>();
            for(int i = 0; i < sz; ++i)
            {
                short k;
                k = istr.readShort();
                short[] v;
                v = ShortSHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntIntSDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, int[]> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, int[]> e in v)
                {
                    ostr.writeInt(e.Key);
                    IntSHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, int[]> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, int[]> r = new global::System.Collections.Generic.Dictionary<int, int[]>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                int[] v;
                v = IntSHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LongLongSDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<long, long[]> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<long, long[]> e in v)
                {
                    ostr.writeLong(e.Key);
                    LongSHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<long, long[]> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<long, long[]> r = new global::System.Collections.Generic.Dictionary<long, long[]>();
            for(int i = 0; i < sz; ++i)
            {
                long k;
                k = istr.readLong();
                long[] v;
                v = LongSHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringFloatSDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, float[]> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, float[]> e in v)
                {
                    ostr.writeString(e.Key);
                    FloatSHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, float[]> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, float[]> r = new global::System.Collections.Generic.Dictionary<string, float[]>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                float[] v;
                v = FloatSHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringDoubleSDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, double[]> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, double[]> e in v)
                {
                    ostr.writeString(e.Key);
                    DoubleSHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, double[]> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, double[]> r = new global::System.Collections.Generic.Dictionary<string, double[]>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                double[] v;
                v = DoubleSHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringStringSDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, string[]> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, string[]> e in v)
                {
                    ostr.writeString(e.Key);
                    StringSHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, string[]> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, string[]> r = new global::System.Collections.Generic.Dictionary<string, string[]>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                string[] v;
                v = StringSHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyEnumMyEnumSDHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<MyEnum, MyEnum[]> e in v)
                {
                    ostr.writeEnum((int)e.Key, 2);
                    MyEnumSHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> r = new global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]>();
            for(int i = 0; i < sz; ++i)
            {
                MyEnum k;
                k = (MyEnum)istr.readEnum(2);
                MyEnum[] v;
                v = MyEnumSHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyClassPrxHelper : Ice.ObjectPrxHelperBase, MyClassPrx
    {
        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool supportsCompress(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_supportsCompressAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opVoid(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opVoidAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte opByte(byte p1, byte p2, out byte p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool opBool(bool p1, bool p2, out bool p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntLongAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p4 = result_.p4;
                p5 = result_.p5;
                p6 = result_.p6;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double opFloatDouble(float p1, double p2, out float p3, out double p4, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatDoubleAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                p4 = result_.p4;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string opString(string p1, string p2, out string p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public MyEnum opMyEnum(MyEnum p1, out MyEnum p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public MyClassPrx? opMyClass(MyClassPrx? p1, out MyClassPrx? p2, out MyClassPrx? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyClassAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public Structure opStruct(Structure p1, Structure p2, out Structure p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStructAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntLongSAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p4 = result_.p4;
                p5 = result_.p5;
                p6 = result_.p6;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatDoubleSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                p4 = result_.p4;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringS(string[] p1, string[] p2, out string[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntLongSSAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p4 = result_.p4;
                p5 = result_.p5;
                p6 = result_.p6;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatDoubleSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                p4 = result_.p4;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteBoolDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongFloatDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringStringDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, MyEnum> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringMyEnumDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<MyEnum, string> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumStringDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteBoolDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongFloatDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringStringDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringMyEnumDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumStringDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteByteSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolBoolSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortShortSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntIntSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongLongSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringFloatSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringDoubleSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringStringSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumMyEnumSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int[] opIntS(int[] s, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opIntSAsync(s, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opContext(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opContextAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opIdempotent(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opIdempotentAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte opByte1(byte opByte1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opByte1Async(opByte1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short opShort1(short opShort1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opShort1Async(opShort1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int opInt1(int opInt1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opInt1Async(opInt1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long opLong1(long opLong1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opLong1Async(opLong1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public float opFloat1(float opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opFloat1Async(opFloat1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double opDouble1(double opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opDouble1Async(opDouble1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string opString1(string opString1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opString1Async(opString1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringS1(string[] opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opStringS1Async(opStringS1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opByteBoolD1Async(opByteBoolD1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringS2(string[] stringS, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opStringS2Async(stringS, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opByteBoolD2Async(byteBoolD, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringLiterals(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opStringLiteralsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public Structure opMStruct1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMStruct1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public Structure opMStruct2(Structure p1, out Structure p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMStruct2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opMSeq1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMSeq1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opMSeq2(string[] p1, out string[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMSeq2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opMDict1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMDict1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, out global::System.Collections.Generic.Dictionary<string, string> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMDict2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<bool> supportsCompressAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_supportsCompressAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_supportsCompressAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_supportsCompress_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_supportsCompress(context, synchronous, completed);
            return completed.Task;
        }

        private const string _supportsCompress_name = "supportsCompress";

        private void _iceI_supportsCompress(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _supportsCompress_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task opVoidAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opVoidAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opVoidAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opVoid(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVoid_name = "opVoid";

        private void _iceI_opVoid(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opVoid_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<MyClass_OpByteResult> opByteAsync(byte p1, byte p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpByteResult> _iceI_opByteAsync(byte iceP_p1, byte iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByte_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpByteResult>(progress, cancel);
            _iceI_opByte(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByte_name = "opByte";

        private void _iceI_opByte(byte iceP_p1, byte iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpByteResult>(completed);
            outAsync.invoke(
                _opByte_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeByte(iceP_p1);
                    ostr.writeByte(iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpByteResult();
                    ret.p3 = istr.readByte();
                    ret.returnValue = istr.readByte();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpBoolResult> opBoolAsync(bool p1, bool p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpBoolResult> _iceI_opBoolAsync(bool iceP_p1, bool iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBool_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpBoolResult>(progress, cancel);
            _iceI_opBool(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBool_name = "opBool";

        private void _iceI_opBool(bool iceP_p1, bool iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpBoolResult>(completed);
            outAsync.invoke(
                _opBool_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_p1);
                    ostr.writeBool(iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpBoolResult();
                    ret.p3 = istr.readBool();
                    ret.returnValue = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpShortIntLongResult> opShortIntLongAsync(short p1, int p2, long p3, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntLongAsync(p1, p2, p3, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpShortIntLongResult> _iceI_opShortIntLongAsync(short iceP_p1, int iceP_p2, long iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntLong_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpShortIntLongResult>(progress, cancel);
            _iceI_opShortIntLong(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntLong_name = "opShortIntLong";

        private void _iceI_opShortIntLong(short iceP_p1, int iceP_p2, long iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpShortIntLongResult>(completed);
            outAsync.invoke(
                _opShortIntLong_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeShort(iceP_p1);
                    ostr.writeInt(iceP_p2);
                    ostr.writeLong(iceP_p3);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpShortIntLongResult();
                    ret.p4 = istr.readShort();
                    ret.p5 = istr.readInt();
                    ret.p6 = istr.readLong();
                    ret.returnValue = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleResult> opFloatDoubleAsync(float p1, double p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatDoubleAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleResult> _iceI_opFloatDoubleAsync(float iceP_p1, double iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatDouble_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpFloatDoubleResult>(progress, cancel);
            _iceI_opFloatDouble(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatDouble_name = "opFloatDouble";

        private void _iceI_opFloatDouble(float iceP_p1, double iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpFloatDoubleResult>(completed);
            outAsync.invoke(
                _opFloatDouble_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(iceP_p1);
                    ostr.writeDouble(iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpFloatDoubleResult();
                    ret.p3 = istr.readFloat();
                    ret.p4 = istr.readDouble();
                    ret.returnValue = istr.readDouble();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringResult> opStringAsync(string p1, string p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringResult> _iceI_opStringAsync(string iceP_p1, string iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opString_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringResult>(progress, cancel);
            _iceI_opString(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opString_name = "opString";

        private void _iceI_opString(string iceP_p1, string iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringResult>(completed);
            outAsync.invoke(
                _opString_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_p1);
                    ostr.writeString(iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringResult();
                    ret.p3 = istr.readString();
                    ret.returnValue = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMyEnumResult> opMyEnumAsync(MyEnum p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMyEnumResult> _iceI_opMyEnumAsync(MyEnum iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnum_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMyEnumResult>(progress, cancel);
            _iceI_opMyEnum(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnum_name = "opMyEnum";

        private void _iceI_opMyEnum(MyEnum iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMyEnumResult>(completed);
            outAsync.invoke(
                _opMyEnum_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_p1, 2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMyEnumResult();
                    ret.p2 = (MyEnum)istr.readEnum(2);
                    ret.returnValue = (MyEnum)istr.readEnum(2);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMyClassResult> opMyClassAsync(MyClassPrx? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyClassAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMyClassResult> _iceI_opMyClassAsync(MyClassPrx? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyClass_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMyClassResult>(progress, cancel);
            _iceI_opMyClass(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyClass_name = "opMyClass";

        private void _iceI_opMyClass(MyClassPrx? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMyClassResult>(completed);
            outAsync.invoke(
                _opMyClass_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    MyClassPrxHelper.write(ostr, iceP_p1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMyClassResult();
                    ret.p2 = MyClassPrxHelper.read(istr);
                    ret.p3 = MyClassPrxHelper.read(istr);
                    ret.returnValue = MyClassPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStructResult> opStructAsync(Structure p1, Structure p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStructAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStructResult> _iceI_opStructAsync(Structure iceP_p1, Structure iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStruct_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStructResult>(progress, cancel);
            _iceI_opStruct(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStruct_name = "opStruct";

        private void _iceI_opStruct(Structure iceP_p1, Structure iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStructResult>(completed);
            outAsync.invoke(
                _opStruct_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    Structure.ice_write(ostr, iceP_p1);
                    Structure.ice_write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStructResult();
                    ret.p3 = new Structure(istr);
                    ret.returnValue = new Structure(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpByteSResult> opByteSAsync(byte[] p1, byte[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpByteSResult> _iceI_opByteSAsync(byte[] iceP_p1, byte[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpByteSResult>(progress, cancel);
            _iceI_opByteS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteS_name = "opByteS";

        private void _iceI_opByteS(byte[] iceP_p1, byte[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpByteSResult>(completed);
            outAsync.invoke(
                _opByteS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteSHelper.write(ostr, iceP_p1);
                    ByteSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpByteSResult();
                    ret.p3 = ByteSHelper.read(istr);
                    ret.returnValue = ByteSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpBoolSResult> opBoolSAsync(bool[] p1, bool[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpBoolSResult> _iceI_opBoolSAsync(bool[] iceP_p1, bool[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpBoolSResult>(progress, cancel);
            _iceI_opBoolS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolS_name = "opBoolS";

        private void _iceI_opBoolS(bool[] iceP_p1, bool[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpBoolSResult>(completed);
            outAsync.invoke(
                _opBoolS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    BoolSHelper.write(ostr, iceP_p1);
                    BoolSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpBoolSResult();
                    ret.p3 = BoolSHelper.read(istr);
                    ret.returnValue = BoolSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSResult> opShortIntLongSAsync(short[] p1, int[] p2, long[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntLongSAsync(p1, p2, p3, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSResult> _iceI_opShortIntLongSAsync(short[] iceP_p1, int[] iceP_p2, long[] iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntLongS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpShortIntLongSResult>(progress, cancel);
            _iceI_opShortIntLongS(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntLongS_name = "opShortIntLongS";

        private void _iceI_opShortIntLongS(short[] iceP_p1, int[] iceP_p2, long[] iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpShortIntLongSResult>(completed);
            outAsync.invoke(
                _opShortIntLongS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortSHelper.write(ostr, iceP_p1);
                    IntSHelper.write(ostr, iceP_p2);
                    LongSHelper.write(ostr, iceP_p3);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpShortIntLongSResult();
                    ret.p4 = ShortSHelper.read(istr);
                    ret.p5 = IntSHelper.read(istr);
                    ret.p6 = LongSHelper.read(istr);
                    ret.returnValue = LongSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSResult> opFloatDoubleSAsync(float[] p1, double[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatDoubleSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSResult> _iceI_opFloatDoubleSAsync(float[] iceP_p1, double[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatDoubleS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpFloatDoubleSResult>(progress, cancel);
            _iceI_opFloatDoubleS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatDoubleS_name = "opFloatDoubleS";

        private void _iceI_opFloatDoubleS(float[] iceP_p1, double[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpFloatDoubleSResult>(completed);
            outAsync.invoke(
                _opFloatDoubleS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    FloatSHelper.write(ostr, iceP_p1);
                    DoubleSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpFloatDoubleSResult();
                    ret.p3 = FloatSHelper.read(istr);
                    ret.p4 = DoubleSHelper.read(istr);
                    ret.returnValue = DoubleSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringSResult> opStringSAsync(string[] p1, string[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringSResult> _iceI_opStringSAsync(string[] iceP_p1, string[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringSResult>(progress, cancel);
            _iceI_opStringS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringS_name = "opStringS";

        private void _iceI_opStringS(string[] iceP_p1, string[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringSResult>(completed);
            outAsync.invoke(
                _opStringS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSHelper.write(ostr, iceP_p1);
                    StringSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringSResult();
                    ret.p3 = StringSHelper.read(istr);
                    ret.returnValue = StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpByteSSResult> opByteSSAsync(byte[][] p1, byte[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpByteSSResult> _iceI_opByteSSAsync(byte[][] iceP_p1, byte[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpByteSSResult>(progress, cancel);
            _iceI_opByteSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSS_name = "opByteSS";

        private void _iceI_opByteSS(byte[][] iceP_p1, byte[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpByteSSResult>(completed);
            outAsync.invoke(
                _opByteSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteSSHelper.write(ostr, iceP_p1);
                    ByteSSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpByteSSResult();
                    ret.p3 = ByteSSHelper.read(istr);
                    ret.returnValue = ByteSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpBoolSSResult> opBoolSSAsync(bool[][] p1, bool[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpBoolSSResult> _iceI_opBoolSSAsync(bool[][] iceP_p1, bool[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpBoolSSResult>(progress, cancel);
            _iceI_opBoolSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolSS_name = "opBoolSS";

        private void _iceI_opBoolSS(bool[][] iceP_p1, bool[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpBoolSSResult>(completed);
            outAsync.invoke(
                _opBoolSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    BoolSSHelper.write(ostr, iceP_p1);
                    BoolSSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpBoolSSResult();
                    ret.p3 = BoolSSHelper.read(istr);
                    ret.returnValue = BoolSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSSResult> opShortIntLongSSAsync(short[][] p1, int[][] p2, long[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntLongSSAsync(p1, p2, p3, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSSResult> _iceI_opShortIntLongSSAsync(short[][] iceP_p1, int[][] iceP_p2, long[][] iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntLongSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpShortIntLongSSResult>(progress, cancel);
            _iceI_opShortIntLongSS(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntLongSS_name = "opShortIntLongSS";

        private void _iceI_opShortIntLongSS(short[][] iceP_p1, int[][] iceP_p2, long[][] iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpShortIntLongSSResult>(completed);
            outAsync.invoke(
                _opShortIntLongSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortSSHelper.write(ostr, iceP_p1);
                    IntSSHelper.write(ostr, iceP_p2);
                    LongSSHelper.write(ostr, iceP_p3);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpShortIntLongSSResult();
                    ret.p4 = ShortSSHelper.read(istr);
                    ret.p5 = IntSSHelper.read(istr);
                    ret.p6 = LongSSHelper.read(istr);
                    ret.returnValue = LongSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSSResult> opFloatDoubleSSAsync(float[][] p1, double[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatDoubleSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSSResult> _iceI_opFloatDoubleSSAsync(float[][] iceP_p1, double[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatDoubleSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpFloatDoubleSSResult>(progress, cancel);
            _iceI_opFloatDoubleSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatDoubleSS_name = "opFloatDoubleSS";

        private void _iceI_opFloatDoubleSS(float[][] iceP_p1, double[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpFloatDoubleSSResult>(completed);
            outAsync.invoke(
                _opFloatDoubleSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    FloatSSHelper.write(ostr, iceP_p1);
                    DoubleSSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpFloatDoubleSSResult();
                    ret.p3 = FloatSSHelper.read(istr);
                    ret.p4 = DoubleSSHelper.read(istr);
                    ret.returnValue = DoubleSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringSSResult> opStringSSAsync(string[][] p1, string[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringSSResult> _iceI_opStringSSAsync(string[][] iceP_p1, string[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringSSResult>(progress, cancel);
            _iceI_opStringSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSS_name = "opStringSS";

        private void _iceI_opStringSS(string[][] iceP_p1, string[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringSSResult>(completed);
            outAsync.invoke(
                _opStringSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSSHelper.write(ostr, iceP_p1);
                    StringSSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringSSResult();
                    ret.p3 = StringSSHelper.read(istr);
                    ret.returnValue = StringSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpByteBoolDResult> opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteBoolDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpByteBoolDResult> _iceI_opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpByteBoolDResult>(progress, cancel);
            _iceI_opByteBoolD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolD_name = "opByteBoolD";

        private void _iceI_opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpByteBoolDResult>(completed);
            outAsync.invoke(
                _opByteBoolD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteBoolDHelper.write(ostr, iceP_p1);
                    ByteBoolDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpByteBoolDResult();
                    ret.p3 = ByteBoolDHelper.read(istr);
                    ret.returnValue = ByteBoolDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpShortIntDResult> opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpShortIntDResult> _iceI_opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> iceP_p1, global::System.Collections.Generic.Dictionary<short, int> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpShortIntDResult>(progress, cancel);
            _iceI_opShortIntD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntD_name = "opShortIntD";

        private void _iceI_opShortIntD(global::System.Collections.Generic.Dictionary<short, int> iceP_p1, global::System.Collections.Generic.Dictionary<short, int> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpShortIntDResult>(completed);
            outAsync.invoke(
                _opShortIntD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortIntDHelper.write(ostr, iceP_p1);
                    ShortIntDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpShortIntDResult();
                    ret.p3 = ShortIntDHelper.read(istr);
                    ret.returnValue = ShortIntDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpLongFloatDResult> opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongFloatDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpLongFloatDResult> _iceI_opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> iceP_p1, global::System.Collections.Generic.Dictionary<long, float> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongFloatD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLongFloatDResult>(progress, cancel);
            _iceI_opLongFloatD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongFloatD_name = "opLongFloatD";

        private void _iceI_opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> iceP_p1, global::System.Collections.Generic.Dictionary<long, float> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpLongFloatDResult>(completed);
            outAsync.invoke(
                _opLongFloatD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    LongFloatDHelper.write(ostr, iceP_p1);
                    LongFloatDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpLongFloatDResult();
                    ret.p3 = LongFloatDHelper.read(istr);
                    ret.returnValue = LongFloatDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringStringDResult> opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringStringDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringStringDResult> _iceI_opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringStringDResult>(progress, cancel);
            _iceI_opStringStringD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringD_name = "opStringStringD";

        private void _iceI_opStringStringD(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringStringDResult>(completed);
            outAsync.invoke(
                _opStringStringD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringStringDHelper.write(ostr, iceP_p1);
                    StringStringDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringStringDResult();
                    ret.p3 = StringStringDHelper.read(istr);
                    ret.returnValue = StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDResult> opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringMyEnumDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDResult> _iceI_opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringMyEnumD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringMyEnumDResult>(progress, cancel);
            _iceI_opStringMyEnumD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringMyEnumD_name = "opStringMyEnumD";

        private void _iceI_opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringMyEnumDResult>(completed);
            outAsync.invoke(
                _opStringMyEnumD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringMyEnumDHelper.write(ostr, iceP_p1);
                    StringMyEnumDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringMyEnumDResult();
                    ret.p3 = StringMyEnumDHelper.read(istr);
                    ret.returnValue = StringMyEnumDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDResult> opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumStringDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDResult> _iceI_opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnumStringD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMyEnumStringDResult>(progress, cancel);
            _iceI_opMyEnumStringD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnumStringD_name = "opMyEnumStringD";

        private void _iceI_opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMyEnumStringDResult>(completed);
            outAsync.invoke(
                _opMyEnumStringD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    MyEnumStringDHelper.write(ostr, iceP_p1);
                    MyEnumStringDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMyEnumStringDResult();
                    ret.p3 = MyEnumStringDHelper.read(istr);
                    ret.returnValue = MyEnumStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpByteBoolDSResult> opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteBoolDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpByteBoolDSResult> _iceI_opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpByteBoolDSResult>(progress, cancel);
            _iceI_opByteBoolDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolDS_name = "opByteBoolDS";

        private void _iceI_opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpByteBoolDSResult>(completed);
            outAsync.invoke(
                _opByteBoolDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteBoolDSHelper.write(ostr, iceP_p1);
                    ByteBoolDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpByteBoolDSResult();
                    ret.p3 = ByteBoolDSHelper.read(istr);
                    ret.returnValue = ByteBoolDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpShortIntDSResult> opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpShortIntDSResult> _iceI_opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1, global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpShortIntDSResult>(progress, cancel);
            _iceI_opShortIntDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntDS_name = "opShortIntDS";

        private void _iceI_opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1, global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpShortIntDSResult>(completed);
            outAsync.invoke(
                _opShortIntDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortIntDSHelper.write(ostr, iceP_p1);
                    ShortIntDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpShortIntDSResult();
                    ret.p3 = ShortIntDSHelper.read(istr);
                    ret.returnValue = ShortIntDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpLongFloatDSResult> opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongFloatDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpLongFloatDSResult> _iceI_opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1, global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongFloatDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLongFloatDSResult>(progress, cancel);
            _iceI_opLongFloatDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongFloatDS_name = "opLongFloatDS";

        private void _iceI_opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1, global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpLongFloatDSResult>(completed);
            outAsync.invoke(
                _opLongFloatDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    LongFloatDSHelper.write(ostr, iceP_p1);
                    LongFloatDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpLongFloatDSResult();
                    ret.p3 = LongFloatDSHelper.read(istr);
                    ret.returnValue = LongFloatDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringStringDSResult> opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringStringDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringStringDSResult> _iceI_opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringStringDSResult>(progress, cancel);
            _iceI_opStringStringDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringDS_name = "opStringStringDS";

        private void _iceI_opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringStringDSResult>(completed);
            outAsync.invoke(
                _opStringStringDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringStringDSHelper.write(ostr, iceP_p1);
                    StringStringDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringStringDSResult();
                    ret.p3 = StringStringDSHelper.read(istr);
                    ret.returnValue = StringStringDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDSResult> opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringMyEnumDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDSResult> _iceI_opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringMyEnumDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringMyEnumDSResult>(progress, cancel);
            _iceI_opStringMyEnumDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringMyEnumDS_name = "opStringMyEnumDS";

        private void _iceI_opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringMyEnumDSResult>(completed);
            outAsync.invoke(
                _opStringMyEnumDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringMyEnumDSHelper.write(ostr, iceP_p1);
                    StringMyEnumDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringMyEnumDSResult();
                    ret.p3 = StringMyEnumDSHelper.read(istr);
                    ret.returnValue = StringMyEnumDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDSResult> opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumStringDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDSResult> _iceI_opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnumStringDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMyEnumStringDSResult>(progress, cancel);
            _iceI_opMyEnumStringDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnumStringDS_name = "opMyEnumStringDS";

        private void _iceI_opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMyEnumStringDSResult>(completed);
            outAsync.invoke(
                _opMyEnumStringDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    MyEnumStringDSHelper.write(ostr, iceP_p1);
                    MyEnumStringDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMyEnumStringDSResult();
                    ret.p3 = MyEnumStringDSHelper.read(istr);
                    ret.returnValue = MyEnumStringDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpByteByteSDResult> opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteByteSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpByteByteSDResult> _iceI_opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1, global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteByteSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpByteByteSDResult>(progress, cancel);
            _iceI_opByteByteSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteByteSD_name = "opByteByteSD";

        private void _iceI_opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1, global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpByteByteSDResult>(completed);
            outAsync.invoke(
                _opByteByteSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteByteSDHelper.write(ostr, iceP_p1);
                    ByteByteSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpByteByteSDResult();
                    ret.p3 = ByteByteSDHelper.read(istr);
                    ret.returnValue = ByteByteSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpBoolBoolSDResult> opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolBoolSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpBoolBoolSDResult> _iceI_opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1, global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolBoolSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpBoolBoolSDResult>(progress, cancel);
            _iceI_opBoolBoolSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolBoolSD_name = "opBoolBoolSD";

        private void _iceI_opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1, global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpBoolBoolSDResult>(completed);
            outAsync.invoke(
                _opBoolBoolSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    BoolBoolSDHelper.write(ostr, iceP_p1);
                    BoolBoolSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpBoolBoolSDResult();
                    ret.p3 = BoolBoolSDHelper.read(istr);
                    ret.returnValue = BoolBoolSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpShortShortSDResult> opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortShortSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpShortShortSDResult> _iceI_opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1, global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortShortSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpShortShortSDResult>(progress, cancel);
            _iceI_opShortShortSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortShortSD_name = "opShortShortSD";

        private void _iceI_opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1, global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpShortShortSDResult>(completed);
            outAsync.invoke(
                _opShortShortSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortShortSDHelper.write(ostr, iceP_p1);
                    ShortShortSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpShortShortSDResult();
                    ret.p3 = ShortShortSDHelper.read(istr);
                    ret.returnValue = ShortShortSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpIntIntSDResult> opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntIntSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpIntIntSDResult> _iceI_opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1, global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntIntSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpIntIntSDResult>(progress, cancel);
            _iceI_opIntIntSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntIntSD_name = "opIntIntSD";

        private void _iceI_opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1, global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpIntIntSDResult>(completed);
            outAsync.invoke(
                _opIntIntSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    IntIntSDHelper.write(ostr, iceP_p1);
                    IntIntSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpIntIntSDResult();
                    ret.p3 = IntIntSDHelper.read(istr);
                    ret.returnValue = IntIntSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpLongLongSDResult> opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongLongSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpLongLongSDResult> _iceI_opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1, global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongLongSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLongLongSDResult>(progress, cancel);
            _iceI_opLongLongSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongLongSD_name = "opLongLongSD";

        private void _iceI_opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1, global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpLongLongSDResult>(completed);
            outAsync.invoke(
                _opLongLongSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    LongLongSDHelper.write(ostr, iceP_p1);
                    LongLongSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpLongLongSDResult();
                    ret.p3 = LongLongSDHelper.read(istr);
                    ret.returnValue = LongLongSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringFloatSDResult> opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringFloatSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringFloatSDResult> _iceI_opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringFloatSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringFloatSDResult>(progress, cancel);
            _iceI_opStringFloatSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringFloatSD_name = "opStringFloatSD";

        private void _iceI_opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringFloatSDResult>(completed);
            outAsync.invoke(
                _opStringFloatSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringFloatSDHelper.write(ostr, iceP_p1);
                    StringFloatSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringFloatSDResult();
                    ret.p3 = StringFloatSDHelper.read(istr);
                    ret.returnValue = StringFloatSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringDoubleSDResult> opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringDoubleSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringDoubleSDResult> _iceI_opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringDoubleSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringDoubleSDResult>(progress, cancel);
            _iceI_opStringDoubleSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringDoubleSD_name = "opStringDoubleSD";

        private void _iceI_opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringDoubleSDResult>(completed);
            outAsync.invoke(
                _opStringDoubleSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringDoubleSDHelper.write(ostr, iceP_p1);
                    StringDoubleSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringDoubleSDResult();
                    ret.p3 = StringDoubleSDHelper.read(istr);
                    ret.returnValue = StringDoubleSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringStringSDResult> opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringStringSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringStringSDResult> _iceI_opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringStringSDResult>(progress, cancel);
            _iceI_opStringStringSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringSD_name = "opStringStringSD";

        private void _iceI_opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringStringSDResult>(completed);
            outAsync.invoke(
                _opStringStringSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringStringSDHelper.write(ostr, iceP_p1);
                    StringStringSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringStringSDResult();
                    ret.p3 = StringStringSDHelper.read(istr);
                    ret.returnValue = StringStringSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMyEnumMyEnumSDResult> opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumMyEnumSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMyEnumMyEnumSDResult> _iceI_opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnumMyEnumSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMyEnumMyEnumSDResult>(progress, cancel);
            _iceI_opMyEnumMyEnumSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnumMyEnumSD_name = "opMyEnumMyEnumSD";

        private void _iceI_opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMyEnumMyEnumSDResult>(completed);
            outAsync.invoke(
                _opMyEnumMyEnumSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    MyEnumMyEnumSDHelper.write(ostr, iceP_p1);
                    MyEnumMyEnumSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMyEnumMyEnumSDResult();
                    ret.p3 = MyEnumMyEnumSDHelper.read(istr);
                    ret.returnValue = MyEnumMyEnumSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int[]> opIntSAsync(int[] s, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntSAsync(s, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int[]> _iceI_opIntSAsync(int[] iceP_s, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<int[]>(progress, cancel);
            _iceI_opIntS(iceP_s, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntS_name = "opIntS";

        private void _iceI_opIntS(int[] iceP_s, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int[]>(completed);
            outAsync.invoke(
                _opIntS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    IntSHelper.write(ostr, iceP_s);
                },
                read: (Ice.InputStream istr) =>
                {
                    int[] ret;
                    ret = IntSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opContextAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opContextAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_opContextAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opContext_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
            _iceI_opContext(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opContext_name = "opContext";

        private void _iceI_opContext(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
            outAsync.invoke(
                _opContext_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, string> ret;
                    ret = StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task opIdempotentAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIdempotentAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opIdempotentAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opIdempotent(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIdempotent_name = "opIdempotent";

        private void _iceI_opIdempotent(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opIdempotent_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<byte> opByte1Async(byte opByte1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByte1Async(opByte1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<byte> _iceI_opByte1Async(byte iceP_opByte1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByte1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<byte>(progress, cancel);
            _iceI_opByte1(iceP_opByte1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByte1_name = "opByte1";

        private void _iceI_opByte1(byte iceP_opByte1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<byte>(completed);
            outAsync.invoke(
                _opByte1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeByte(iceP_opByte1);
                },
                read: (Ice.InputStream istr) =>
                {
                    byte ret;
                    ret = istr.readByte();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<short> opShort1Async(short opShort1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShort1Async(opShort1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<short> _iceI_opShort1Async(short iceP_opShort1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShort1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<short>(progress, cancel);
            _iceI_opShort1(iceP_opShort1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShort1_name = "opShort1";

        private void _iceI_opShort1(short iceP_opShort1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<short>(completed);
            outAsync.invoke(
                _opShort1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeShort(iceP_opShort1);
                },
                read: (Ice.InputStream istr) =>
                {
                    short ret;
                    ret = istr.readShort();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> opInt1Async(int opInt1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opInt1Async(opInt1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_opInt1Async(int iceP_opInt1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opInt1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_opInt1(iceP_opInt1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opInt1_name = "opInt1";

        private void _iceI_opInt1(int iceP_opInt1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _opInt1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_opInt1);
                },
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<long> opLong1Async(long opLong1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLong1Async(opLong1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_opLong1Async(long iceP_opLong1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLong1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_opLong1(iceP_opLong1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLong1_name = "opLong1";

        private void _iceI_opLong1(long iceP_opLong1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _opLong1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_opLong1);
                },
                read: (Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> opFloat1Async(float opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloat1Async(opFloat1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_opFloat1Async(float iceP_opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloat1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_opFloat1(iceP_opFloat1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloat1_name = "opFloat1";

        private void _iceI_opFloat1(float iceP_opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _opFloat1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(iceP_opFloat1);
                },
                read: (Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<double> opDouble1Async(double opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDouble1Async(opDouble1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<double> _iceI_opDouble1Async(double iceP_opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDouble1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<double>(progress, cancel);
            _iceI_opDouble1(iceP_opDouble1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDouble1_name = "opDouble1";

        private void _iceI_opDouble1(double iceP_opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<double>(completed);
            outAsync.invoke(
                _opDouble1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeDouble(iceP_opDouble1);
                },
                read: (Ice.InputStream istr) =>
                {
                    double ret;
                    ret = istr.readDouble();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string> opString1Async(string opString1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opString1Async(opString1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_opString1Async(string iceP_opString1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opString1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_opString1(iceP_opString1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opString1_name = "opString1";

        private void _iceI_opString1(string iceP_opString1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _opString1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_opString1);
                },
                read: (Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opStringS1Async(string[] opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringS1Async(opStringS1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opStringS1Async(string[] iceP_opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringS1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opStringS1(iceP_opStringS1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringS1_name = "opStringS1";

        private void _iceI_opStringS1(string[] iceP_opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opStringS1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSHelper.write(ostr, iceP_opStringS1);
                },
                read: (Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteBoolD1Async(opByteBoolD1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> _iceI_opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolD1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<byte, bool>>(progress, cancel);
            _iceI_opByteBoolD1(iceP_opByteBoolD1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolD1_name = "opByteBoolD1";

        private void _iceI_opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<byte, bool>>(completed);
            outAsync.invoke(
                _opByteBoolD1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteBoolDHelper.write(ostr, iceP_opByteBoolD1);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<byte, bool> ret;
                    ret = ByteBoolDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opStringS2Async(string[] stringS, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringS2Async(stringS, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opStringS2Async(string[] iceP_stringS, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringS2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opStringS2(iceP_stringS, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringS2_name = "opStringS2";

        private void _iceI_opStringS2(string[] iceP_stringS, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opStringS2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSHelper.write(ostr, iceP_stringS);
                },
                read: (Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteBoolD2Async(byteBoolD, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> _iceI_opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolD2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<byte, bool>>(progress, cancel);
            _iceI_opByteBoolD2(iceP_byteBoolD, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolD2_name = "opByteBoolD2";

        private void _iceI_opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<byte, bool>>(completed);
            outAsync.invoke(
                _opByteBoolD2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteBoolDHelper.write(ostr, iceP_byteBoolD);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<byte, bool> ret;
                    ret = ByteBoolDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opStringLiteralsAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringLiteralsAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opStringLiteralsAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringLiterals_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opStringLiterals(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringLiterals_name = "opStringLiterals";

        private void _iceI_opStringLiterals(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opStringLiterals_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Structure> opMStruct1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMStruct1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Structure> _iceI_opMStruct1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMStruct1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Structure>(progress, cancel);
            _iceI_opMStruct1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMStruct1_name = "opMStruct1";

        private void _iceI_opMStruct1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Structure>(completed);
            outAsync.invoke(
                _opMStruct1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    Structure ret;
                    ret = new Structure(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMStruct2Result> opMStruct2Async(Structure p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMStruct2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMStruct2Result> _iceI_opMStruct2Async(Structure iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMStruct2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMStruct2Result>(progress, cancel);
            _iceI_opMStruct2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMStruct2_name = "opMStruct2";

        private void _iceI_opMStruct2(Structure iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMStruct2Result>(completed);
            outAsync.invoke(
                _opMStruct2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    Structure.ice_write(ostr, iceP_p1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMStruct2Result();
                    ret.p2 = new Structure(istr);
                    ret.returnValue = new Structure(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opMSeq1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMSeq1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opMSeq1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMSeq1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opMSeq1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMSeq1_name = "opMSeq1";

        private void _iceI_opMSeq1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opMSeq1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMSeq2Result> opMSeq2Async(string[] p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMSeq2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMSeq2Result> _iceI_opMSeq2Async(string[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMSeq2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMSeq2Result>(progress, cancel);
            _iceI_opMSeq2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMSeq2_name = "opMSeq2";

        private void _iceI_opMSeq2(string[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMSeq2Result>(completed);
            outAsync.invoke(
                _opMSeq2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSHelper.write(ostr, iceP_p1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMSeq2Result();
                    ret.p2 = StringSHelper.read(istr);
                    ret.returnValue = StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opMDict1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMDict1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_opMDict1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMDict1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
            _iceI_opMDict1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMDict1_name = "opMDict1";

        private void _iceI_opMDict1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
            outAsync.invoke(
                _opMDict1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, string> ret;
                    ret = StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMDict2Result> opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMDict2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMDict2Result> _iceI_opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMDict2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMDict2Result>(progress, cancel);
            _iceI_opMDict2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMDict2_name = "opMDict2";

        private void _iceI_opMDict2(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMDict2Result>(completed);
            outAsync.invoke(
                _opMDict2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringStringDHelper.write(ostr, iceP_p1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMDict2Result();
                    ret.p2 = StringStringDHelper.read(istr);
                    ret.returnValue = StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public static MyClassPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new MyClassPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static MyClassPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new MyClassPrxHelper(b) : null;

        public static MyClassPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new MyClassPrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyClassPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new MyClassPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyClassPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new MyClassPrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::MyClass"
        };

        public static string ice_staticId() => "::Test::MyClass";

        public static void write(Ice.OutputStream ostr, MyClassPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static MyClassPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new MyClassPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new MyClassPrxHelper(reference);

        private MyClassPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private MyClassPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyDerivedClassPrxHelper : Ice.ObjectPrxHelperBase, MyDerivedClassPrx
    {
        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool supportsCompress(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_supportsCompressAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opVoid(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opVoidAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte opByte(byte p1, byte p2, out byte p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool opBool(bool p1, bool p2, out bool p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntLongAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p4 = result_.p4;
                p5 = result_.p5;
                p6 = result_.p6;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double opFloatDouble(float p1, double p2, out float p3, out double p4, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatDoubleAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                p4 = result_.p4;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string opString(string p1, string p2, out string p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public MyEnum opMyEnum(MyEnum p1, out MyEnum p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public MyClassPrx? opMyClass(MyClassPrx? p1, out MyClassPrx? p2, out MyClassPrx? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyClassAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public Structure opStruct(Structure p1, Structure p2, out Structure p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStructAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntLongSAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p4 = result_.p4;
                p5 = result_.p5;
                p6 = result_.p6;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatDoubleSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                p4 = result_.p4;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringS(string[] p1, string[] p2, out string[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntLongSSAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p4 = result_.p4;
                p5 = result_.p5;
                p6 = result_.p6;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatDoubleSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                p4 = result_.p4;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteBoolDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongFloatDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringStringDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, MyEnum> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringMyEnumDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<MyEnum, string> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumStringDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteBoolDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongFloatDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringStringDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringMyEnumDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumStringDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteByteSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolBoolSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortShortSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntIntSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongLongSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringFloatSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringDoubleSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringStringSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumMyEnumSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int[] opIntS(int[] s, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opIntSAsync(s, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opContext(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opContextAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opIdempotent(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opIdempotentAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte opByte1(byte opByte1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opByte1Async(opByte1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short opShort1(short opShort1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opShort1Async(opShort1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int opInt1(int opInt1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opInt1Async(opInt1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long opLong1(long opLong1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opLong1Async(opLong1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public float opFloat1(float opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opFloat1Async(opFloat1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double opDouble1(double opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opDouble1Async(opDouble1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string opString1(string opString1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opString1Async(opString1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringS1(string[] opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opStringS1Async(opStringS1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opByteBoolD1Async(opByteBoolD1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringS2(string[] stringS, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opStringS2Async(stringS, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opByteBoolD2Async(byteBoolD, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringLiterals(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opStringLiteralsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public Structure opMStruct1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMStruct1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public Structure opMStruct2(Structure p1, out Structure p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMStruct2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opMSeq1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMSeq1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opMSeq2(string[] p1, out string[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMSeq2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opMDict1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMDict1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, out global::System.Collections.Generic.Dictionary<string, string> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMDict2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opDerived(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opDerivedAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public MyStruct1 opMyStruct1(MyStruct1 s, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMyStruct1Async(s, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public MyClass1? opMyClass1(MyClass1? c, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMyClass1Async(c, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<bool> supportsCompressAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_supportsCompressAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_supportsCompressAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_supportsCompress_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_supportsCompress(context, synchronous, completed);
            return completed.Task;
        }

        private const string _supportsCompress_name = "supportsCompress";

        private void _iceI_supportsCompress(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _supportsCompress_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task opVoidAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opVoidAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opVoidAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opVoid(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVoid_name = "opVoid";

        private void _iceI_opVoid(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opVoid_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<MyClass_OpByteResult> opByteAsync(byte p1, byte p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpByteResult> _iceI_opByteAsync(byte iceP_p1, byte iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByte_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpByteResult>(progress, cancel);
            _iceI_opByte(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByte_name = "opByte";

        private void _iceI_opByte(byte iceP_p1, byte iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpByteResult>(completed);
            outAsync.invoke(
                _opByte_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeByte(iceP_p1);
                    ostr.writeByte(iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpByteResult();
                    ret.p3 = istr.readByte();
                    ret.returnValue = istr.readByte();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpBoolResult> opBoolAsync(bool p1, bool p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpBoolResult> _iceI_opBoolAsync(bool iceP_p1, bool iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBool_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpBoolResult>(progress, cancel);
            _iceI_opBool(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBool_name = "opBool";

        private void _iceI_opBool(bool iceP_p1, bool iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpBoolResult>(completed);
            outAsync.invoke(
                _opBool_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_p1);
                    ostr.writeBool(iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpBoolResult();
                    ret.p3 = istr.readBool();
                    ret.returnValue = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpShortIntLongResult> opShortIntLongAsync(short p1, int p2, long p3, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntLongAsync(p1, p2, p3, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpShortIntLongResult> _iceI_opShortIntLongAsync(short iceP_p1, int iceP_p2, long iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntLong_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpShortIntLongResult>(progress, cancel);
            _iceI_opShortIntLong(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntLong_name = "opShortIntLong";

        private void _iceI_opShortIntLong(short iceP_p1, int iceP_p2, long iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpShortIntLongResult>(completed);
            outAsync.invoke(
                _opShortIntLong_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeShort(iceP_p1);
                    ostr.writeInt(iceP_p2);
                    ostr.writeLong(iceP_p3);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpShortIntLongResult();
                    ret.p4 = istr.readShort();
                    ret.p5 = istr.readInt();
                    ret.p6 = istr.readLong();
                    ret.returnValue = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleResult> opFloatDoubleAsync(float p1, double p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatDoubleAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleResult> _iceI_opFloatDoubleAsync(float iceP_p1, double iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatDouble_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpFloatDoubleResult>(progress, cancel);
            _iceI_opFloatDouble(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatDouble_name = "opFloatDouble";

        private void _iceI_opFloatDouble(float iceP_p1, double iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpFloatDoubleResult>(completed);
            outAsync.invoke(
                _opFloatDouble_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(iceP_p1);
                    ostr.writeDouble(iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpFloatDoubleResult();
                    ret.p3 = istr.readFloat();
                    ret.p4 = istr.readDouble();
                    ret.returnValue = istr.readDouble();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringResult> opStringAsync(string p1, string p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringResult> _iceI_opStringAsync(string iceP_p1, string iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opString_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringResult>(progress, cancel);
            _iceI_opString(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opString_name = "opString";

        private void _iceI_opString(string iceP_p1, string iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringResult>(completed);
            outAsync.invoke(
                _opString_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_p1);
                    ostr.writeString(iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringResult();
                    ret.p3 = istr.readString();
                    ret.returnValue = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMyEnumResult> opMyEnumAsync(MyEnum p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMyEnumResult> _iceI_opMyEnumAsync(MyEnum iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnum_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMyEnumResult>(progress, cancel);
            _iceI_opMyEnum(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnum_name = "opMyEnum";

        private void _iceI_opMyEnum(MyEnum iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMyEnumResult>(completed);
            outAsync.invoke(
                _opMyEnum_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_p1, 2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMyEnumResult();
                    ret.p2 = (MyEnum)istr.readEnum(2);
                    ret.returnValue = (MyEnum)istr.readEnum(2);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMyClassResult> opMyClassAsync(MyClassPrx? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyClassAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMyClassResult> _iceI_opMyClassAsync(MyClassPrx? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyClass_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMyClassResult>(progress, cancel);
            _iceI_opMyClass(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyClass_name = "opMyClass";

        private void _iceI_opMyClass(MyClassPrx? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMyClassResult>(completed);
            outAsync.invoke(
                _opMyClass_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    MyClassPrxHelper.write(ostr, iceP_p1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMyClassResult();
                    ret.p2 = MyClassPrxHelper.read(istr);
                    ret.p3 = MyClassPrxHelper.read(istr);
                    ret.returnValue = MyClassPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStructResult> opStructAsync(Structure p1, Structure p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStructAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStructResult> _iceI_opStructAsync(Structure iceP_p1, Structure iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStruct_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStructResult>(progress, cancel);
            _iceI_opStruct(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStruct_name = "opStruct";

        private void _iceI_opStruct(Structure iceP_p1, Structure iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStructResult>(completed);
            outAsync.invoke(
                _opStruct_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    Structure.ice_write(ostr, iceP_p1);
                    Structure.ice_write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStructResult();
                    ret.p3 = new Structure(istr);
                    ret.returnValue = new Structure(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpByteSResult> opByteSAsync(byte[] p1, byte[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpByteSResult> _iceI_opByteSAsync(byte[] iceP_p1, byte[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpByteSResult>(progress, cancel);
            _iceI_opByteS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteS_name = "opByteS";

        private void _iceI_opByteS(byte[] iceP_p1, byte[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpByteSResult>(completed);
            outAsync.invoke(
                _opByteS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteSHelper.write(ostr, iceP_p1);
                    ByteSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpByteSResult();
                    ret.p3 = ByteSHelper.read(istr);
                    ret.returnValue = ByteSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpBoolSResult> opBoolSAsync(bool[] p1, bool[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpBoolSResult> _iceI_opBoolSAsync(bool[] iceP_p1, bool[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpBoolSResult>(progress, cancel);
            _iceI_opBoolS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolS_name = "opBoolS";

        private void _iceI_opBoolS(bool[] iceP_p1, bool[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpBoolSResult>(completed);
            outAsync.invoke(
                _opBoolS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    BoolSHelper.write(ostr, iceP_p1);
                    BoolSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpBoolSResult();
                    ret.p3 = BoolSHelper.read(istr);
                    ret.returnValue = BoolSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSResult> opShortIntLongSAsync(short[] p1, int[] p2, long[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntLongSAsync(p1, p2, p3, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSResult> _iceI_opShortIntLongSAsync(short[] iceP_p1, int[] iceP_p2, long[] iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntLongS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpShortIntLongSResult>(progress, cancel);
            _iceI_opShortIntLongS(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntLongS_name = "opShortIntLongS";

        private void _iceI_opShortIntLongS(short[] iceP_p1, int[] iceP_p2, long[] iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpShortIntLongSResult>(completed);
            outAsync.invoke(
                _opShortIntLongS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortSHelper.write(ostr, iceP_p1);
                    IntSHelper.write(ostr, iceP_p2);
                    LongSHelper.write(ostr, iceP_p3);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpShortIntLongSResult();
                    ret.p4 = ShortSHelper.read(istr);
                    ret.p5 = IntSHelper.read(istr);
                    ret.p6 = LongSHelper.read(istr);
                    ret.returnValue = LongSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSResult> opFloatDoubleSAsync(float[] p1, double[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatDoubleSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSResult> _iceI_opFloatDoubleSAsync(float[] iceP_p1, double[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatDoubleS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpFloatDoubleSResult>(progress, cancel);
            _iceI_opFloatDoubleS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatDoubleS_name = "opFloatDoubleS";

        private void _iceI_opFloatDoubleS(float[] iceP_p1, double[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpFloatDoubleSResult>(completed);
            outAsync.invoke(
                _opFloatDoubleS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    FloatSHelper.write(ostr, iceP_p1);
                    DoubleSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpFloatDoubleSResult();
                    ret.p3 = FloatSHelper.read(istr);
                    ret.p4 = DoubleSHelper.read(istr);
                    ret.returnValue = DoubleSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringSResult> opStringSAsync(string[] p1, string[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringSResult> _iceI_opStringSAsync(string[] iceP_p1, string[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringSResult>(progress, cancel);
            _iceI_opStringS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringS_name = "opStringS";

        private void _iceI_opStringS(string[] iceP_p1, string[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringSResult>(completed);
            outAsync.invoke(
                _opStringS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSHelper.write(ostr, iceP_p1);
                    StringSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringSResult();
                    ret.p3 = StringSHelper.read(istr);
                    ret.returnValue = StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpByteSSResult> opByteSSAsync(byte[][] p1, byte[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpByteSSResult> _iceI_opByteSSAsync(byte[][] iceP_p1, byte[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpByteSSResult>(progress, cancel);
            _iceI_opByteSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSS_name = "opByteSS";

        private void _iceI_opByteSS(byte[][] iceP_p1, byte[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpByteSSResult>(completed);
            outAsync.invoke(
                _opByteSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteSSHelper.write(ostr, iceP_p1);
                    ByteSSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpByteSSResult();
                    ret.p3 = ByteSSHelper.read(istr);
                    ret.returnValue = ByteSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpBoolSSResult> opBoolSSAsync(bool[][] p1, bool[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpBoolSSResult> _iceI_opBoolSSAsync(bool[][] iceP_p1, bool[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpBoolSSResult>(progress, cancel);
            _iceI_opBoolSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolSS_name = "opBoolSS";

        private void _iceI_opBoolSS(bool[][] iceP_p1, bool[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpBoolSSResult>(completed);
            outAsync.invoke(
                _opBoolSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    BoolSSHelper.write(ostr, iceP_p1);
                    BoolSSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpBoolSSResult();
                    ret.p3 = BoolSSHelper.read(istr);
                    ret.returnValue = BoolSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSSResult> opShortIntLongSSAsync(short[][] p1, int[][] p2, long[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntLongSSAsync(p1, p2, p3, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpShortIntLongSSResult> _iceI_opShortIntLongSSAsync(short[][] iceP_p1, int[][] iceP_p2, long[][] iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntLongSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpShortIntLongSSResult>(progress, cancel);
            _iceI_opShortIntLongSS(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntLongSS_name = "opShortIntLongSS";

        private void _iceI_opShortIntLongSS(short[][] iceP_p1, int[][] iceP_p2, long[][] iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpShortIntLongSSResult>(completed);
            outAsync.invoke(
                _opShortIntLongSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortSSHelper.write(ostr, iceP_p1);
                    IntSSHelper.write(ostr, iceP_p2);
                    LongSSHelper.write(ostr, iceP_p3);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpShortIntLongSSResult();
                    ret.p4 = ShortSSHelper.read(istr);
                    ret.p5 = IntSSHelper.read(istr);
                    ret.p6 = LongSSHelper.read(istr);
                    ret.returnValue = LongSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSSResult> opFloatDoubleSSAsync(float[][] p1, double[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatDoubleSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpFloatDoubleSSResult> _iceI_opFloatDoubleSSAsync(float[][] iceP_p1, double[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatDoubleSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpFloatDoubleSSResult>(progress, cancel);
            _iceI_opFloatDoubleSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatDoubleSS_name = "opFloatDoubleSS";

        private void _iceI_opFloatDoubleSS(float[][] iceP_p1, double[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpFloatDoubleSSResult>(completed);
            outAsync.invoke(
                _opFloatDoubleSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    FloatSSHelper.write(ostr, iceP_p1);
                    DoubleSSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpFloatDoubleSSResult();
                    ret.p3 = FloatSSHelper.read(istr);
                    ret.p4 = DoubleSSHelper.read(istr);
                    ret.returnValue = DoubleSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringSSResult> opStringSSAsync(string[][] p1, string[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringSSResult> _iceI_opStringSSAsync(string[][] iceP_p1, string[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringSSResult>(progress, cancel);
            _iceI_opStringSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSS_name = "opStringSS";

        private void _iceI_opStringSS(string[][] iceP_p1, string[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringSSResult>(completed);
            outAsync.invoke(
                _opStringSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSSHelper.write(ostr, iceP_p1);
                    StringSSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringSSResult();
                    ret.p3 = StringSSHelper.read(istr);
                    ret.returnValue = StringSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpByteBoolDResult> opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteBoolDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpByteBoolDResult> _iceI_opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpByteBoolDResult>(progress, cancel);
            _iceI_opByteBoolD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolD_name = "opByteBoolD";

        private void _iceI_opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpByteBoolDResult>(completed);
            outAsync.invoke(
                _opByteBoolD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteBoolDHelper.write(ostr, iceP_p1);
                    ByteBoolDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpByteBoolDResult();
                    ret.p3 = ByteBoolDHelper.read(istr);
                    ret.returnValue = ByteBoolDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpShortIntDResult> opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpShortIntDResult> _iceI_opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> iceP_p1, global::System.Collections.Generic.Dictionary<short, int> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpShortIntDResult>(progress, cancel);
            _iceI_opShortIntD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntD_name = "opShortIntD";

        private void _iceI_opShortIntD(global::System.Collections.Generic.Dictionary<short, int> iceP_p1, global::System.Collections.Generic.Dictionary<short, int> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpShortIntDResult>(completed);
            outAsync.invoke(
                _opShortIntD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortIntDHelper.write(ostr, iceP_p1);
                    ShortIntDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpShortIntDResult();
                    ret.p3 = ShortIntDHelper.read(istr);
                    ret.returnValue = ShortIntDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpLongFloatDResult> opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongFloatDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpLongFloatDResult> _iceI_opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> iceP_p1, global::System.Collections.Generic.Dictionary<long, float> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongFloatD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLongFloatDResult>(progress, cancel);
            _iceI_opLongFloatD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongFloatD_name = "opLongFloatD";

        private void _iceI_opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> iceP_p1, global::System.Collections.Generic.Dictionary<long, float> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpLongFloatDResult>(completed);
            outAsync.invoke(
                _opLongFloatD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    LongFloatDHelper.write(ostr, iceP_p1);
                    LongFloatDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpLongFloatDResult();
                    ret.p3 = LongFloatDHelper.read(istr);
                    ret.returnValue = LongFloatDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringStringDResult> opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringStringDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringStringDResult> _iceI_opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringStringDResult>(progress, cancel);
            _iceI_opStringStringD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringD_name = "opStringStringD";

        private void _iceI_opStringStringD(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringStringDResult>(completed);
            outAsync.invoke(
                _opStringStringD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringStringDHelper.write(ostr, iceP_p1);
                    StringStringDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringStringDResult();
                    ret.p3 = StringStringDHelper.read(istr);
                    ret.returnValue = StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDResult> opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringMyEnumDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDResult> _iceI_opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringMyEnumD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringMyEnumDResult>(progress, cancel);
            _iceI_opStringMyEnumD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringMyEnumD_name = "opStringMyEnumD";

        private void _iceI_opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringMyEnumDResult>(completed);
            outAsync.invoke(
                _opStringMyEnumD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringMyEnumDHelper.write(ostr, iceP_p1);
                    StringMyEnumDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringMyEnumDResult();
                    ret.p3 = StringMyEnumDHelper.read(istr);
                    ret.returnValue = StringMyEnumDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDResult> opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumStringDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDResult> _iceI_opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnumStringD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMyEnumStringDResult>(progress, cancel);
            _iceI_opMyEnumStringD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnumStringD_name = "opMyEnumStringD";

        private void _iceI_opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMyEnumStringDResult>(completed);
            outAsync.invoke(
                _opMyEnumStringD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    MyEnumStringDHelper.write(ostr, iceP_p1);
                    MyEnumStringDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMyEnumStringDResult();
                    ret.p3 = MyEnumStringDHelper.read(istr);
                    ret.returnValue = MyEnumStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpByteBoolDSResult> opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteBoolDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpByteBoolDSResult> _iceI_opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpByteBoolDSResult>(progress, cancel);
            _iceI_opByteBoolDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolDS_name = "opByteBoolDS";

        private void _iceI_opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpByteBoolDSResult>(completed);
            outAsync.invoke(
                _opByteBoolDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteBoolDSHelper.write(ostr, iceP_p1);
                    ByteBoolDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpByteBoolDSResult();
                    ret.p3 = ByteBoolDSHelper.read(istr);
                    ret.returnValue = ByteBoolDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpShortIntDSResult> opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpShortIntDSResult> _iceI_opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1, global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpShortIntDSResult>(progress, cancel);
            _iceI_opShortIntDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntDS_name = "opShortIntDS";

        private void _iceI_opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1, global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpShortIntDSResult>(completed);
            outAsync.invoke(
                _opShortIntDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortIntDSHelper.write(ostr, iceP_p1);
                    ShortIntDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpShortIntDSResult();
                    ret.p3 = ShortIntDSHelper.read(istr);
                    ret.returnValue = ShortIntDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpLongFloatDSResult> opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongFloatDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpLongFloatDSResult> _iceI_opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1, global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongFloatDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLongFloatDSResult>(progress, cancel);
            _iceI_opLongFloatDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongFloatDS_name = "opLongFloatDS";

        private void _iceI_opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1, global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpLongFloatDSResult>(completed);
            outAsync.invoke(
                _opLongFloatDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    LongFloatDSHelper.write(ostr, iceP_p1);
                    LongFloatDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpLongFloatDSResult();
                    ret.p3 = LongFloatDSHelper.read(istr);
                    ret.returnValue = LongFloatDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringStringDSResult> opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringStringDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringStringDSResult> _iceI_opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringStringDSResult>(progress, cancel);
            _iceI_opStringStringDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringDS_name = "opStringStringDS";

        private void _iceI_opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringStringDSResult>(completed);
            outAsync.invoke(
                _opStringStringDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringStringDSHelper.write(ostr, iceP_p1);
                    StringStringDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringStringDSResult();
                    ret.p3 = StringStringDSHelper.read(istr);
                    ret.returnValue = StringStringDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDSResult> opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringMyEnumDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringMyEnumDSResult> _iceI_opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringMyEnumDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringMyEnumDSResult>(progress, cancel);
            _iceI_opStringMyEnumDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringMyEnumDS_name = "opStringMyEnumDS";

        private void _iceI_opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringMyEnumDSResult>(completed);
            outAsync.invoke(
                _opStringMyEnumDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringMyEnumDSHelper.write(ostr, iceP_p1);
                    StringMyEnumDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringMyEnumDSResult();
                    ret.p3 = StringMyEnumDSHelper.read(istr);
                    ret.returnValue = StringMyEnumDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDSResult> opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumStringDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMyEnumStringDSResult> _iceI_opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnumStringDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMyEnumStringDSResult>(progress, cancel);
            _iceI_opMyEnumStringDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnumStringDS_name = "opMyEnumStringDS";

        private void _iceI_opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMyEnumStringDSResult>(completed);
            outAsync.invoke(
                _opMyEnumStringDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    MyEnumStringDSHelper.write(ostr, iceP_p1);
                    MyEnumStringDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMyEnumStringDSResult();
                    ret.p3 = MyEnumStringDSHelper.read(istr);
                    ret.returnValue = MyEnumStringDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpByteByteSDResult> opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteByteSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpByteByteSDResult> _iceI_opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1, global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteByteSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpByteByteSDResult>(progress, cancel);
            _iceI_opByteByteSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteByteSD_name = "opByteByteSD";

        private void _iceI_opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1, global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpByteByteSDResult>(completed);
            outAsync.invoke(
                _opByteByteSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteByteSDHelper.write(ostr, iceP_p1);
                    ByteByteSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpByteByteSDResult();
                    ret.p3 = ByteByteSDHelper.read(istr);
                    ret.returnValue = ByteByteSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpBoolBoolSDResult> opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolBoolSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpBoolBoolSDResult> _iceI_opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1, global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolBoolSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpBoolBoolSDResult>(progress, cancel);
            _iceI_opBoolBoolSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolBoolSD_name = "opBoolBoolSD";

        private void _iceI_opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1, global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpBoolBoolSDResult>(completed);
            outAsync.invoke(
                _opBoolBoolSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    BoolBoolSDHelper.write(ostr, iceP_p1);
                    BoolBoolSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpBoolBoolSDResult();
                    ret.p3 = BoolBoolSDHelper.read(istr);
                    ret.returnValue = BoolBoolSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpShortShortSDResult> opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortShortSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpShortShortSDResult> _iceI_opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1, global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortShortSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpShortShortSDResult>(progress, cancel);
            _iceI_opShortShortSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortShortSD_name = "opShortShortSD";

        private void _iceI_opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1, global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpShortShortSDResult>(completed);
            outAsync.invoke(
                _opShortShortSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortShortSDHelper.write(ostr, iceP_p1);
                    ShortShortSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpShortShortSDResult();
                    ret.p3 = ShortShortSDHelper.read(istr);
                    ret.returnValue = ShortShortSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpIntIntSDResult> opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntIntSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpIntIntSDResult> _iceI_opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1, global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntIntSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpIntIntSDResult>(progress, cancel);
            _iceI_opIntIntSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntIntSD_name = "opIntIntSD";

        private void _iceI_opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1, global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpIntIntSDResult>(completed);
            outAsync.invoke(
                _opIntIntSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    IntIntSDHelper.write(ostr, iceP_p1);
                    IntIntSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpIntIntSDResult();
                    ret.p3 = IntIntSDHelper.read(istr);
                    ret.returnValue = IntIntSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpLongLongSDResult> opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongLongSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpLongLongSDResult> _iceI_opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1, global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongLongSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpLongLongSDResult>(progress, cancel);
            _iceI_opLongLongSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongLongSD_name = "opLongLongSD";

        private void _iceI_opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1, global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpLongLongSDResult>(completed);
            outAsync.invoke(
                _opLongLongSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    LongLongSDHelper.write(ostr, iceP_p1);
                    LongLongSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpLongLongSDResult();
                    ret.p3 = LongLongSDHelper.read(istr);
                    ret.returnValue = LongLongSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringFloatSDResult> opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringFloatSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringFloatSDResult> _iceI_opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringFloatSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringFloatSDResult>(progress, cancel);
            _iceI_opStringFloatSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringFloatSD_name = "opStringFloatSD";

        private void _iceI_opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringFloatSDResult>(completed);
            outAsync.invoke(
                _opStringFloatSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringFloatSDHelper.write(ostr, iceP_p1);
                    StringFloatSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringFloatSDResult();
                    ret.p3 = StringFloatSDHelper.read(istr);
                    ret.returnValue = StringFloatSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringDoubleSDResult> opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringDoubleSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringDoubleSDResult> _iceI_opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringDoubleSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringDoubleSDResult>(progress, cancel);
            _iceI_opStringDoubleSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringDoubleSD_name = "opStringDoubleSD";

        private void _iceI_opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringDoubleSDResult>(completed);
            outAsync.invoke(
                _opStringDoubleSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringDoubleSDHelper.write(ostr, iceP_p1);
                    StringDoubleSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringDoubleSDResult();
                    ret.p3 = StringDoubleSDHelper.read(istr);
                    ret.returnValue = StringDoubleSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpStringStringSDResult> opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringStringSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpStringStringSDResult> _iceI_opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpStringStringSDResult>(progress, cancel);
            _iceI_opStringStringSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringSD_name = "opStringStringSD";

        private void _iceI_opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpStringStringSDResult>(completed);
            outAsync.invoke(
                _opStringStringSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringStringSDHelper.write(ostr, iceP_p1);
                    StringStringSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpStringStringSDResult();
                    ret.p3 = StringStringSDHelper.read(istr);
                    ret.returnValue = StringStringSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMyEnumMyEnumSDResult> opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumMyEnumSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMyEnumMyEnumSDResult> _iceI_opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnumMyEnumSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMyEnumMyEnumSDResult>(progress, cancel);
            _iceI_opMyEnumMyEnumSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnumMyEnumSD_name = "opMyEnumMyEnumSD";

        private void _iceI_opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMyEnumMyEnumSDResult>(completed);
            outAsync.invoke(
                _opMyEnumMyEnumSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    MyEnumMyEnumSDHelper.write(ostr, iceP_p1);
                    MyEnumMyEnumSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMyEnumMyEnumSDResult();
                    ret.p3 = MyEnumMyEnumSDHelper.read(istr);
                    ret.returnValue = MyEnumMyEnumSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int[]> opIntSAsync(int[] s, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntSAsync(s, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int[]> _iceI_opIntSAsync(int[] iceP_s, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<int[]>(progress, cancel);
            _iceI_opIntS(iceP_s, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntS_name = "opIntS";

        private void _iceI_opIntS(int[] iceP_s, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int[]>(completed);
            outAsync.invoke(
                _opIntS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    IntSHelper.write(ostr, iceP_s);
                },
                read: (Ice.InputStream istr) =>
                {
                    int[] ret;
                    ret = IntSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opContextAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opContextAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_opContextAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opContext_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
            _iceI_opContext(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opContext_name = "opContext";

        private void _iceI_opContext(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
            outAsync.invoke(
                _opContext_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, string> ret;
                    ret = StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task opIdempotentAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIdempotentAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opIdempotentAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opIdempotent(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIdempotent_name = "opIdempotent";

        private void _iceI_opIdempotent(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opIdempotent_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<byte> opByte1Async(byte opByte1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByte1Async(opByte1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<byte> _iceI_opByte1Async(byte iceP_opByte1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByte1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<byte>(progress, cancel);
            _iceI_opByte1(iceP_opByte1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByte1_name = "opByte1";

        private void _iceI_opByte1(byte iceP_opByte1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<byte>(completed);
            outAsync.invoke(
                _opByte1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeByte(iceP_opByte1);
                },
                read: (Ice.InputStream istr) =>
                {
                    byte ret;
                    ret = istr.readByte();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<short> opShort1Async(short opShort1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShort1Async(opShort1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<short> _iceI_opShort1Async(short iceP_opShort1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShort1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<short>(progress, cancel);
            _iceI_opShort1(iceP_opShort1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShort1_name = "opShort1";

        private void _iceI_opShort1(short iceP_opShort1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<short>(completed);
            outAsync.invoke(
                _opShort1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeShort(iceP_opShort1);
                },
                read: (Ice.InputStream istr) =>
                {
                    short ret;
                    ret = istr.readShort();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> opInt1Async(int opInt1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opInt1Async(opInt1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_opInt1Async(int iceP_opInt1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opInt1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_opInt1(iceP_opInt1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opInt1_name = "opInt1";

        private void _iceI_opInt1(int iceP_opInt1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _opInt1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_opInt1);
                },
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<long> opLong1Async(long opLong1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLong1Async(opLong1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_opLong1Async(long iceP_opLong1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLong1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_opLong1(iceP_opLong1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLong1_name = "opLong1";

        private void _iceI_opLong1(long iceP_opLong1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _opLong1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_opLong1);
                },
                read: (Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> opFloat1Async(float opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloat1Async(opFloat1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_opFloat1Async(float iceP_opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloat1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_opFloat1(iceP_opFloat1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloat1_name = "opFloat1";

        private void _iceI_opFloat1(float iceP_opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _opFloat1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(iceP_opFloat1);
                },
                read: (Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<double> opDouble1Async(double opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDouble1Async(opDouble1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<double> _iceI_opDouble1Async(double iceP_opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDouble1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<double>(progress, cancel);
            _iceI_opDouble1(iceP_opDouble1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDouble1_name = "opDouble1";

        private void _iceI_opDouble1(double iceP_opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<double>(completed);
            outAsync.invoke(
                _opDouble1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeDouble(iceP_opDouble1);
                },
                read: (Ice.InputStream istr) =>
                {
                    double ret;
                    ret = istr.readDouble();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string> opString1Async(string opString1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opString1Async(opString1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_opString1Async(string iceP_opString1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opString1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_opString1(iceP_opString1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opString1_name = "opString1";

        private void _iceI_opString1(string iceP_opString1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _opString1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_opString1);
                },
                read: (Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opStringS1Async(string[] opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringS1Async(opStringS1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opStringS1Async(string[] iceP_opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringS1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opStringS1(iceP_opStringS1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringS1_name = "opStringS1";

        private void _iceI_opStringS1(string[] iceP_opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opStringS1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSHelper.write(ostr, iceP_opStringS1);
                },
                read: (Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteBoolD1Async(opByteBoolD1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> _iceI_opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolD1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<byte, bool>>(progress, cancel);
            _iceI_opByteBoolD1(iceP_opByteBoolD1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolD1_name = "opByteBoolD1";

        private void _iceI_opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<byte, bool>>(completed);
            outAsync.invoke(
                _opByteBoolD1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteBoolDHelper.write(ostr, iceP_opByteBoolD1);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<byte, bool> ret;
                    ret = ByteBoolDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opStringS2Async(string[] stringS, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringS2Async(stringS, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opStringS2Async(string[] iceP_stringS, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringS2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opStringS2(iceP_stringS, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringS2_name = "opStringS2";

        private void _iceI_opStringS2(string[] iceP_stringS, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opStringS2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSHelper.write(ostr, iceP_stringS);
                },
                read: (Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteBoolD2Async(byteBoolD, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> _iceI_opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolD2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<byte, bool>>(progress, cancel);
            _iceI_opByteBoolD2(iceP_byteBoolD, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolD2_name = "opByteBoolD2";

        private void _iceI_opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<byte, bool>>(completed);
            outAsync.invoke(
                _opByteBoolD2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteBoolDHelper.write(ostr, iceP_byteBoolD);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<byte, bool> ret;
                    ret = ByteBoolDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opStringLiteralsAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringLiteralsAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opStringLiteralsAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringLiterals_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opStringLiterals(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringLiterals_name = "opStringLiterals";

        private void _iceI_opStringLiterals(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opStringLiterals_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Structure> opMStruct1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMStruct1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Structure> _iceI_opMStruct1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMStruct1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Structure>(progress, cancel);
            _iceI_opMStruct1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMStruct1_name = "opMStruct1";

        private void _iceI_opMStruct1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Structure>(completed);
            outAsync.invoke(
                _opMStruct1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    Structure ret;
                    ret = new Structure(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMStruct2Result> opMStruct2Async(Structure p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMStruct2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMStruct2Result> _iceI_opMStruct2Async(Structure iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMStruct2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMStruct2Result>(progress, cancel);
            _iceI_opMStruct2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMStruct2_name = "opMStruct2";

        private void _iceI_opMStruct2(Structure iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMStruct2Result>(completed);
            outAsync.invoke(
                _opMStruct2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    Structure.ice_write(ostr, iceP_p1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMStruct2Result();
                    ret.p2 = new Structure(istr);
                    ret.returnValue = new Structure(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opMSeq1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMSeq1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opMSeq1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMSeq1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opMSeq1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMSeq1_name = "opMSeq1";

        private void _iceI_opMSeq1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opMSeq1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMSeq2Result> opMSeq2Async(string[] p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMSeq2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMSeq2Result> _iceI_opMSeq2Async(string[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMSeq2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMSeq2Result>(progress, cancel);
            _iceI_opMSeq2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMSeq2_name = "opMSeq2";

        private void _iceI_opMSeq2(string[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMSeq2Result>(completed);
            outAsync.invoke(
                _opMSeq2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSHelper.write(ostr, iceP_p1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMSeq2Result();
                    ret.p2 = StringSHelper.read(istr);
                    ret.returnValue = StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opMDict1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMDict1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_opMDict1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMDict1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
            _iceI_opMDict1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMDict1_name = "opMDict1";

        private void _iceI_opMDict1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
            outAsync.invoke(
                _opMDict1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, string> ret;
                    ret = StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass_OpMDict2Result> opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMDict2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass_OpMDict2Result> _iceI_opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMDict2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass_OpMDict2Result>(progress, cancel);
            _iceI_opMDict2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMDict2_name = "opMDict2";

        private void _iceI_opMDict2(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass_OpMDict2Result>(completed);
            outAsync.invoke(
                _opMDict2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringStringDHelper.write(ostr, iceP_p1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new MyClass_OpMDict2Result();
                    ret.p2 = StringStringDHelper.read(istr);
                    ret.returnValue = StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task opDerivedAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDerivedAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opDerivedAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opDerived(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDerived_name = "opDerived";

        private void _iceI_opDerived(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opDerived_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<MyStruct1> opMyStruct1Async(MyStruct1 s, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyStruct1Async(s, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyStruct1> _iceI_opMyStruct1Async(MyStruct1 iceP_s, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyStruct1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyStruct1>(progress, cancel);
            _iceI_opMyStruct1(iceP_s, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyStruct1_name = "opMyStruct1";

        private void _iceI_opMyStruct1(MyStruct1 iceP_s, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyStruct1>(completed);
            outAsync.invoke(
                _opMyStruct1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    MyStruct1.ice_write(ostr, iceP_s);
                },
                read: (Ice.InputStream istr) =>
                {
                    MyStruct1 ret;
                    ret = new MyStruct1(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<MyClass1?> opMyClass1Async(MyClass1? c, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyClass1Async(c, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<MyClass1?> _iceI_opMyClass1Async(MyClass1? iceP_c, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyClass1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<MyClass1?>(progress, cancel);
            _iceI_opMyClass1(iceP_c, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyClass1_name = "opMyClass1";

        private void _iceI_opMyClass1(MyClass1? iceP_c, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<MyClass1?>(completed);
            outAsync.invoke(
                _opMyClass1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_c);
                    ostr.writePendingValues();
                },
                read: (Ice.InputStream istr) =>
                {
                    MyClass1? ret = null;
                    istr.readValue((MyClass1? v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public static MyDerivedClassPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new MyDerivedClassPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static MyDerivedClassPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new MyDerivedClassPrxHelper(b) : null;

        public static MyDerivedClassPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new MyDerivedClassPrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyDerivedClassPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new MyDerivedClassPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyDerivedClassPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new MyDerivedClassPrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::MyClass",
            "::Test::MyDerivedClass"
        };

        public static string ice_staticId() => "::Test::MyDerivedClass";

        public static void write(Ice.OutputStream ostr, MyDerivedClassPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static MyDerivedClassPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new MyDerivedClassPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new MyDerivedClassPrxHelper(reference);

        private MyDerivedClassPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private MyDerivedClassPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyDerivedClassPrxHelper : Ice.ObjectPrxHelperBase, MyDerivedClassPrx
    {
        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool supportsCompress(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_supportsCompressAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opVoid(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opVoidAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte opByte(byte p1, byte p2, out byte p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool opBool(bool p1, bool p2, out bool p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntLongAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p4 = result_.p4;
                p5 = result_.p5;
                p6 = result_.p6;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double opFloatDouble(float p1, double p2, out float p3, out double p4, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatDoubleAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                p4 = result_.p4;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string opString(string p1, string p2, out string p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Test.MyEnum opMyEnum(global::Test.MyEnum p1, out global::Test.MyEnum p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Test.MyClassPrx? opMyClass(global::Test.MyClassPrx? p1, out global::Test.MyClassPrx? p2, out global::Test.MyClassPrx? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyClassAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Test.Structure opStruct(global::Test.Structure p1, global::Test.Structure p2, out global::Test.Structure p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStructAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntLongSAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p4 = result_.p4;
                p5 = result_.p5;
                p6 = result_.p6;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatDoubleSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                p4 = result_.p4;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringS(string[] p1, string[] p2, out string[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntLongSSAsync(p1, p2, p3, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p4 = result_.p4;
                p5 = result_.p5;
                p6 = result_.p6;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatDoubleSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                p4 = result_.p4;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringSSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteBoolDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongFloatDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringStringDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> p1, global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringMyEnumDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumStringDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteBoolDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortIntDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongFloatDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringStringDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringMyEnumDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumStringDSAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteByteSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolBoolSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortShortSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntIntSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongLongSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringFloatSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringDoubleSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringStringSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumMyEnumSDAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int[] opIntS(int[] s, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opIntSAsync(s, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opContext(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opContextAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opIdempotent(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opIdempotentAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte opByte1(byte opByte1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opByte1Async(opByte1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short opShort1(short opShort1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opShort1Async(opShort1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int opInt1(int opInt1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opInt1Async(opInt1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long opLong1(long opLong1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opLong1Async(opLong1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public float opFloat1(float opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opFloat1Async(opFloat1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double opDouble1(double opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opDouble1Async(opDouble1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string opString1(string opString1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opString1Async(opString1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringS1(string[] opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opStringS1Async(opStringS1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opByteBoolD1Async(opByteBoolD1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringS2(string[] stringS, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opStringS2Async(stringS, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opByteBoolD2Async(byteBoolD, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringLiterals(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opStringLiteralsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Test.Structure opMStruct1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMStruct1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Test.Structure opMStruct2(global::Test.Structure p1, out global::Test.Structure p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMStruct2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opMSeq1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMSeq1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opMSeq2(string[] p1, out string[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMSeq2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opMDict1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMDict1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, string> opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, out global::System.Collections.Generic.Dictionary<string, string> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMDict2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<bool> supportsCompressAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_supportsCompressAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_supportsCompressAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_supportsCompress_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_supportsCompress(context, synchronous, completed);
            return completed.Task;
        }

        private const string _supportsCompress_name = "supportsCompress";

        private void _iceI_supportsCompress(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _supportsCompress_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task opVoidAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opVoidAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opVoidAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opVoid(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVoid_name = "opVoid";

        private void _iceI_opVoid(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opVoid_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpByteResult> opByteAsync(byte p1, byte p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpByteResult> _iceI_opByteAsync(byte iceP_p1, byte iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByte_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpByteResult>(progress, cancel);
            _iceI_opByte(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByte_name = "opByte";

        private void _iceI_opByte(byte iceP_p1, byte iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpByteResult>(completed);
            outAsync.invoke(
                _opByte_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeByte(iceP_p1);
                    ostr.writeByte(iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpByteResult();
                    ret.p3 = istr.readByte();
                    ret.returnValue = istr.readByte();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpBoolResult> opBoolAsync(bool p1, bool p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpBoolResult> _iceI_opBoolAsync(bool iceP_p1, bool iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBool_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpBoolResult>(progress, cancel);
            _iceI_opBool(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBool_name = "opBool";

        private void _iceI_opBool(bool iceP_p1, bool iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpBoolResult>(completed);
            outAsync.invoke(
                _opBool_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_p1);
                    ostr.writeBool(iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpBoolResult();
                    ret.p3 = istr.readBool();
                    ret.returnValue = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpShortIntLongResult> opShortIntLongAsync(short p1, int p2, long p3, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntLongAsync(p1, p2, p3, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpShortIntLongResult> _iceI_opShortIntLongAsync(short iceP_p1, int iceP_p2, long iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntLong_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpShortIntLongResult>(progress, cancel);
            _iceI_opShortIntLong(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntLong_name = "opShortIntLong";

        private void _iceI_opShortIntLong(short iceP_p1, int iceP_p2, long iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpShortIntLongResult>(completed);
            outAsync.invoke(
                _opShortIntLong_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeShort(iceP_p1);
                    ostr.writeInt(iceP_p2);
                    ostr.writeLong(iceP_p3);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpShortIntLongResult();
                    ret.p4 = istr.readShort();
                    ret.p5 = istr.readInt();
                    ret.p6 = istr.readLong();
                    ret.returnValue = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpFloatDoubleResult> opFloatDoubleAsync(float p1, double p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatDoubleAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpFloatDoubleResult> _iceI_opFloatDoubleAsync(float iceP_p1, double iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatDouble_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpFloatDoubleResult>(progress, cancel);
            _iceI_opFloatDouble(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatDouble_name = "opFloatDouble";

        private void _iceI_opFloatDouble(float iceP_p1, double iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpFloatDoubleResult>(completed);
            outAsync.invoke(
                _opFloatDouble_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(iceP_p1);
                    ostr.writeDouble(iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpFloatDoubleResult();
                    ret.p3 = istr.readFloat();
                    ret.p4 = istr.readDouble();
                    ret.returnValue = istr.readDouble();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringResult> opStringAsync(string p1, string p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringResult> _iceI_opStringAsync(string iceP_p1, string iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opString_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpStringResult>(progress, cancel);
            _iceI_opString(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opString_name = "opString";

        private void _iceI_opString(string iceP_p1, string iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpStringResult>(completed);
            outAsync.invoke(
                _opString_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_p1);
                    ostr.writeString(iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpStringResult();
                    ret.p3 = istr.readString();
                    ret.returnValue = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpMyEnumResult> opMyEnumAsync(global::Test.MyEnum p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpMyEnumResult> _iceI_opMyEnumAsync(global::Test.MyEnum iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnum_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpMyEnumResult>(progress, cancel);
            _iceI_opMyEnum(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnum_name = "opMyEnum";

        private void _iceI_opMyEnum(global::Test.MyEnum iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpMyEnumResult>(completed);
            outAsync.invoke(
                _opMyEnum_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_p1, 2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpMyEnumResult();
                    ret.p2 = (global::Test.MyEnum)istr.readEnum(2);
                    ret.returnValue = (global::Test.MyEnum)istr.readEnum(2);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpMyClassResult> opMyClassAsync(global::Test.MyClassPrx? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyClassAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpMyClassResult> _iceI_opMyClassAsync(global::Test.MyClassPrx? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyClass_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpMyClassResult>(progress, cancel);
            _iceI_opMyClass(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyClass_name = "opMyClass";

        private void _iceI_opMyClass(global::Test.MyClassPrx? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpMyClassResult>(completed);
            outAsync.invoke(
                _opMyClass_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.MyClassPrxHelper.write(ostr, iceP_p1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpMyClassResult();
                    ret.p2 = global::Test.MyClassPrxHelper.read(istr);
                    ret.p3 = global::Test.MyClassPrxHelper.read(istr);
                    ret.returnValue = global::Test.MyClassPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpStructResult> opStructAsync(global::Test.Structure p1, global::Test.Structure p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStructAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpStructResult> _iceI_opStructAsync(global::Test.Structure iceP_p1, global::Test.Structure iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStruct_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpStructResult>(progress, cancel);
            _iceI_opStruct(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStruct_name = "opStruct";

        private void _iceI_opStruct(global::Test.Structure iceP_p1, global::Test.Structure iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpStructResult>(completed);
            outAsync.invoke(
                _opStruct_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.Structure.ice_write(ostr, iceP_p1);
                    global::Test.Structure.ice_write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpStructResult();
                    ret.p3 = new global::Test.Structure(istr);
                    ret.returnValue = new global::Test.Structure(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpByteSResult> opByteSAsync(byte[] p1, byte[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpByteSResult> _iceI_opByteSAsync(byte[] iceP_p1, byte[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpByteSResult>(progress, cancel);
            _iceI_opByteS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteS_name = "opByteS";

        private void _iceI_opByteS(byte[] iceP_p1, byte[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpByteSResult>(completed);
            outAsync.invoke(
                _opByteS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.ByteSHelper.write(ostr, iceP_p1);
                    global::Test.ByteSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpByteSResult();
                    ret.p3 = global::Test.ByteSHelper.read(istr);
                    ret.returnValue = global::Test.ByteSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpBoolSResult> opBoolSAsync(bool[] p1, bool[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpBoolSResult> _iceI_opBoolSAsync(bool[] iceP_p1, bool[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpBoolSResult>(progress, cancel);
            _iceI_opBoolS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolS_name = "opBoolS";

        private void _iceI_opBoolS(bool[] iceP_p1, bool[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpBoolSResult>(completed);
            outAsync.invoke(
                _opBoolS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.BoolSHelper.write(ostr, iceP_p1);
                    global::Test.BoolSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpBoolSResult();
                    ret.p3 = global::Test.BoolSHelper.read(istr);
                    ret.returnValue = global::Test.BoolSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpShortIntLongSResult> opShortIntLongSAsync(short[] p1, int[] p2, long[] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntLongSAsync(p1, p2, p3, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpShortIntLongSResult> _iceI_opShortIntLongSAsync(short[] iceP_p1, int[] iceP_p2, long[] iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntLongS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpShortIntLongSResult>(progress, cancel);
            _iceI_opShortIntLongS(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntLongS_name = "opShortIntLongS";

        private void _iceI_opShortIntLongS(short[] iceP_p1, int[] iceP_p2, long[] iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpShortIntLongSResult>(completed);
            outAsync.invoke(
                _opShortIntLongS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.ShortSHelper.write(ostr, iceP_p1);
                    global::Test.IntSHelper.write(ostr, iceP_p2);
                    global::Test.LongSHelper.write(ostr, iceP_p3);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpShortIntLongSResult();
                    ret.p4 = global::Test.ShortSHelper.read(istr);
                    ret.p5 = global::Test.IntSHelper.read(istr);
                    ret.p6 = global::Test.LongSHelper.read(istr);
                    ret.returnValue = global::Test.LongSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpFloatDoubleSResult> opFloatDoubleSAsync(float[] p1, double[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatDoubleSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpFloatDoubleSResult> _iceI_opFloatDoubleSAsync(float[] iceP_p1, double[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatDoubleS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpFloatDoubleSResult>(progress, cancel);
            _iceI_opFloatDoubleS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatDoubleS_name = "opFloatDoubleS";

        private void _iceI_opFloatDoubleS(float[] iceP_p1, double[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpFloatDoubleSResult>(completed);
            outAsync.invoke(
                _opFloatDoubleS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.FloatSHelper.write(ostr, iceP_p1);
                    global::Test.DoubleSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpFloatDoubleSResult();
                    ret.p3 = global::Test.FloatSHelper.read(istr);
                    ret.p4 = global::Test.DoubleSHelper.read(istr);
                    ret.returnValue = global::Test.DoubleSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringSResult> opStringSAsync(string[] p1, string[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringSResult> _iceI_opStringSAsync(string[] iceP_p1, string[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpStringSResult>(progress, cancel);
            _iceI_opStringS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringS_name = "opStringS";

        private void _iceI_opStringS(string[] iceP_p1, string[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpStringSResult>(completed);
            outAsync.invoke(
                _opStringS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.StringSHelper.write(ostr, iceP_p1);
                    global::Test.StringSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpStringSResult();
                    ret.p3 = global::Test.StringSHelper.read(istr);
                    ret.returnValue = global::Test.StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpByteSSResult> opByteSSAsync(byte[][] p1, byte[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpByteSSResult> _iceI_opByteSSAsync(byte[][] iceP_p1, byte[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpByteSSResult>(progress, cancel);
            _iceI_opByteSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSS_name = "opByteSS";

        private void _iceI_opByteSS(byte[][] iceP_p1, byte[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpByteSSResult>(completed);
            outAsync.invoke(
                _opByteSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.ByteSSHelper.write(ostr, iceP_p1);
                    global::Test.ByteSSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpByteSSResult();
                    ret.p3 = global::Test.ByteSSHelper.read(istr);
                    ret.returnValue = global::Test.ByteSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpBoolSSResult> opBoolSSAsync(bool[][] p1, bool[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpBoolSSResult> _iceI_opBoolSSAsync(bool[][] iceP_p1, bool[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpBoolSSResult>(progress, cancel);
            _iceI_opBoolSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolSS_name = "opBoolSS";

        private void _iceI_opBoolSS(bool[][] iceP_p1, bool[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpBoolSSResult>(completed);
            outAsync.invoke(
                _opBoolSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.BoolSSHelper.write(ostr, iceP_p1);
                    global::Test.BoolSSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpBoolSSResult();
                    ret.p3 = global::Test.BoolSSHelper.read(istr);
                    ret.returnValue = global::Test.BoolSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpShortIntLongSSResult> opShortIntLongSSAsync(short[][] p1, int[][] p2, long[][] p3, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntLongSSAsync(p1, p2, p3, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpShortIntLongSSResult> _iceI_opShortIntLongSSAsync(short[][] iceP_p1, int[][] iceP_p2, long[][] iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntLongSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpShortIntLongSSResult>(progress, cancel);
            _iceI_opShortIntLongSS(iceP_p1, iceP_p2, iceP_p3, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntLongSS_name = "opShortIntLongSS";

        private void _iceI_opShortIntLongSS(short[][] iceP_p1, int[][] iceP_p2, long[][] iceP_p3, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpShortIntLongSSResult>(completed);
            outAsync.invoke(
                _opShortIntLongSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.ShortSSHelper.write(ostr, iceP_p1);
                    global::Test.IntSSHelper.write(ostr, iceP_p2);
                    global::Test.LongSSHelper.write(ostr, iceP_p3);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpShortIntLongSSResult();
                    ret.p4 = global::Test.ShortSSHelper.read(istr);
                    ret.p5 = global::Test.IntSSHelper.read(istr);
                    ret.p6 = global::Test.LongSSHelper.read(istr);
                    ret.returnValue = global::Test.LongSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpFloatDoubleSSResult> opFloatDoubleSSAsync(float[][] p1, double[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatDoubleSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpFloatDoubleSSResult> _iceI_opFloatDoubleSSAsync(float[][] iceP_p1, double[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatDoubleSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpFloatDoubleSSResult>(progress, cancel);
            _iceI_opFloatDoubleSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatDoubleSS_name = "opFloatDoubleSS";

        private void _iceI_opFloatDoubleSS(float[][] iceP_p1, double[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpFloatDoubleSSResult>(completed);
            outAsync.invoke(
                _opFloatDoubleSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.FloatSSHelper.write(ostr, iceP_p1);
                    global::Test.DoubleSSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpFloatDoubleSSResult();
                    ret.p3 = global::Test.FloatSSHelper.read(istr);
                    ret.p4 = global::Test.DoubleSSHelper.read(istr);
                    ret.returnValue = global::Test.DoubleSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringSSResult> opStringSSAsync(string[][] p1, string[][] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringSSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringSSResult> _iceI_opStringSSAsync(string[][] iceP_p1, string[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpStringSSResult>(progress, cancel);
            _iceI_opStringSS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSS_name = "opStringSS";

        private void _iceI_opStringSS(string[][] iceP_p1, string[][] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpStringSSResult>(completed);
            outAsync.invoke(
                _opStringSS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.StringSSHelper.write(ostr, iceP_p1);
                    global::Test.StringSSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpStringSSResult();
                    ret.p3 = global::Test.StringSSHelper.read(istr);
                    ret.returnValue = global::Test.StringSSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpByteBoolDResult> opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteBoolDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpByteBoolDResult> _iceI_opByteBoolDAsync(global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpByteBoolDResult>(progress, cancel);
            _iceI_opByteBoolD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolD_name = "opByteBoolD";

        private void _iceI_opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpByteBoolDResult>(completed);
            outAsync.invoke(
                _opByteBoolD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.ByteBoolDHelper.write(ostr, iceP_p1);
                    global::Test.ByteBoolDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpByteBoolDResult();
                    ret.p3 = global::Test.ByteBoolDHelper.read(istr);
                    ret.returnValue = global::Test.ByteBoolDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpShortIntDResult> opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpShortIntDResult> _iceI_opShortIntDAsync(global::System.Collections.Generic.Dictionary<short, int> iceP_p1, global::System.Collections.Generic.Dictionary<short, int> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpShortIntDResult>(progress, cancel);
            _iceI_opShortIntD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntD_name = "opShortIntD";

        private void _iceI_opShortIntD(global::System.Collections.Generic.Dictionary<short, int> iceP_p1, global::System.Collections.Generic.Dictionary<short, int> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpShortIntDResult>(completed);
            outAsync.invoke(
                _opShortIntD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.ShortIntDHelper.write(ostr, iceP_p1);
                    global::Test.ShortIntDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpShortIntDResult();
                    ret.p3 = global::Test.ShortIntDHelper.read(istr);
                    ret.returnValue = global::Test.ShortIntDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpLongFloatDResult> opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongFloatDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpLongFloatDResult> _iceI_opLongFloatDAsync(global::System.Collections.Generic.Dictionary<long, float> iceP_p1, global::System.Collections.Generic.Dictionary<long, float> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongFloatD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpLongFloatDResult>(progress, cancel);
            _iceI_opLongFloatD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongFloatD_name = "opLongFloatD";

        private void _iceI_opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> iceP_p1, global::System.Collections.Generic.Dictionary<long, float> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpLongFloatDResult>(completed);
            outAsync.invoke(
                _opLongFloatD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.LongFloatDHelper.write(ostr, iceP_p1);
                    global::Test.LongFloatDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpLongFloatDResult();
                    ret.p3 = global::Test.LongFloatDHelper.read(istr);
                    ret.returnValue = global::Test.LongFloatDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringStringDResult> opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringStringDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringStringDResult> _iceI_opStringStringDAsync(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpStringStringDResult>(progress, cancel);
            _iceI_opStringStringD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringD_name = "opStringStringD";

        private void _iceI_opStringStringD(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpStringStringDResult>(completed);
            outAsync.invoke(
                _opStringStringD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.StringStringDHelper.write(ostr, iceP_p1);
                    global::Test.StringStringDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpStringStringDResult();
                    ret.p3 = global::Test.StringStringDHelper.read(istr);
                    ret.returnValue = global::Test.StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringMyEnumDResult> opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> p1, global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringMyEnumDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringMyEnumDResult> _iceI_opStringMyEnumDAsync(global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringMyEnumD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpStringMyEnumDResult>(progress, cancel);
            _iceI_opStringMyEnumD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringMyEnumD_name = "opStringMyEnumD";

        private void _iceI_opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> iceP_p1, global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpStringMyEnumDResult>(completed);
            outAsync.invoke(
                _opStringMyEnumD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.StringMyEnumDHelper.write(ostr, iceP_p1);
                    global::Test.StringMyEnumDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpStringMyEnumDResult();
                    ret.p3 = global::Test.StringMyEnumDHelper.read(istr);
                    ret.returnValue = global::Test.StringMyEnumDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpMyEnumStringDResult> opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumStringDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpMyEnumStringDResult> _iceI_opMyEnumStringDAsync(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> iceP_p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnumStringD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpMyEnumStringDResult>(progress, cancel);
            _iceI_opMyEnumStringD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnumStringD_name = "opMyEnumStringD";

        private void _iceI_opMyEnumStringD(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> iceP_p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpMyEnumStringDResult>(completed);
            outAsync.invoke(
                _opMyEnumStringD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.MyEnumStringDHelper.write(ostr, iceP_p1);
                    global::Test.MyEnumStringDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpMyEnumStringDResult();
                    ret.p3 = global::Test.MyEnumStringDHelper.read(istr);
                    ret.returnValue = global::Test.MyEnumStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpByteBoolDSResult> opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteBoolDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpByteBoolDSResult> _iceI_opByteBoolDSAsync(global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpByteBoolDSResult>(progress, cancel);
            _iceI_opByteBoolDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolDS_name = "opByteBoolDS";

        private void _iceI_opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1, global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpByteBoolDSResult>(completed);
            outAsync.invoke(
                _opByteBoolDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.ByteBoolDSHelper.write(ostr, iceP_p1);
                    global::Test.ByteBoolDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpByteBoolDSResult();
                    ret.p3 = global::Test.ByteBoolDSHelper.read(istr);
                    ret.returnValue = global::Test.ByteBoolDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpShortIntDSResult> opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortIntDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpShortIntDSResult> _iceI_opShortIntDSAsync(global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1, global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortIntDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpShortIntDSResult>(progress, cancel);
            _iceI_opShortIntDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortIntDS_name = "opShortIntDS";

        private void _iceI_opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1, global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpShortIntDSResult>(completed);
            outAsync.invoke(
                _opShortIntDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.ShortIntDSHelper.write(ostr, iceP_p1);
                    global::Test.ShortIntDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpShortIntDSResult();
                    ret.p3 = global::Test.ShortIntDSHelper.read(istr);
                    ret.returnValue = global::Test.ShortIntDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpLongFloatDSResult> opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongFloatDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpLongFloatDSResult> _iceI_opLongFloatDSAsync(global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1, global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongFloatDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpLongFloatDSResult>(progress, cancel);
            _iceI_opLongFloatDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongFloatDS_name = "opLongFloatDS";

        private void _iceI_opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1, global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpLongFloatDSResult>(completed);
            outAsync.invoke(
                _opLongFloatDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.LongFloatDSHelper.write(ostr, iceP_p1);
                    global::Test.LongFloatDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpLongFloatDSResult();
                    ret.p3 = global::Test.LongFloatDSHelper.read(istr);
                    ret.returnValue = global::Test.LongFloatDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringStringDSResult> opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringStringDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringStringDSResult> _iceI_opStringStringDSAsync(global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpStringStringDSResult>(progress, cancel);
            _iceI_opStringStringDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringDS_name = "opStringStringDS";

        private void _iceI_opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpStringStringDSResult>(completed);
            outAsync.invoke(
                _opStringStringDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.StringStringDSHelper.write(ostr, iceP_p1);
                    global::Test.StringStringDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpStringStringDSResult();
                    ret.p3 = global::Test.StringStringDSHelper.read(istr);
                    ret.returnValue = global::Test.StringStringDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringMyEnumDSResult> opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringMyEnumDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringMyEnumDSResult> _iceI_opStringMyEnumDSAsync(global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringMyEnumDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpStringMyEnumDSResult>(progress, cancel);
            _iceI_opStringMyEnumDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringMyEnumDS_name = "opStringMyEnumDS";

        private void _iceI_opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] iceP_p1, global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpStringMyEnumDSResult>(completed);
            outAsync.invoke(
                _opStringMyEnumDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.StringMyEnumDSHelper.write(ostr, iceP_p1);
                    global::Test.StringMyEnumDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpStringMyEnumDSResult();
                    ret.p3 = global::Test.StringMyEnumDSHelper.read(istr);
                    ret.returnValue = global::Test.StringMyEnumDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpMyEnumStringDSResult> opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumStringDSAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpMyEnumStringDSResult> _iceI_opMyEnumStringDSAsync(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnumStringDS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpMyEnumStringDSResult>(progress, cancel);
            _iceI_opMyEnumStringDS(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnumStringDS_name = "opMyEnumStringDS";

        private void _iceI_opMyEnumStringDS(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] iceP_p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpMyEnumStringDSResult>(completed);
            outAsync.invoke(
                _opMyEnumStringDS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.MyEnumStringDSHelper.write(ostr, iceP_p1);
                    global::Test.MyEnumStringDSHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpMyEnumStringDSResult();
                    ret.p3 = global::Test.MyEnumStringDSHelper.read(istr);
                    ret.returnValue = global::Test.MyEnumStringDSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpByteByteSDResult> opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteByteSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpByteByteSDResult> _iceI_opByteByteSDAsync(global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1, global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteByteSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpByteByteSDResult>(progress, cancel);
            _iceI_opByteByteSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteByteSD_name = "opByteByteSD";

        private void _iceI_opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1, global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpByteByteSDResult>(completed);
            outAsync.invoke(
                _opByteByteSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.ByteByteSDHelper.write(ostr, iceP_p1);
                    global::Test.ByteByteSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpByteByteSDResult();
                    ret.p3 = global::Test.ByteByteSDHelper.read(istr);
                    ret.returnValue = global::Test.ByteByteSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpBoolBoolSDResult> opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolBoolSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpBoolBoolSDResult> _iceI_opBoolBoolSDAsync(global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1, global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolBoolSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpBoolBoolSDResult>(progress, cancel);
            _iceI_opBoolBoolSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolBoolSD_name = "opBoolBoolSD";

        private void _iceI_opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1, global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpBoolBoolSDResult>(completed);
            outAsync.invoke(
                _opBoolBoolSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.BoolBoolSDHelper.write(ostr, iceP_p1);
                    global::Test.BoolBoolSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpBoolBoolSDResult();
                    ret.p3 = global::Test.BoolBoolSDHelper.read(istr);
                    ret.returnValue = global::Test.BoolBoolSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpShortShortSDResult> opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortShortSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpShortShortSDResult> _iceI_opShortShortSDAsync(global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1, global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortShortSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpShortShortSDResult>(progress, cancel);
            _iceI_opShortShortSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortShortSD_name = "opShortShortSD";

        private void _iceI_opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1, global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpShortShortSDResult>(completed);
            outAsync.invoke(
                _opShortShortSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.ShortShortSDHelper.write(ostr, iceP_p1);
                    global::Test.ShortShortSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpShortShortSDResult();
                    ret.p3 = global::Test.ShortShortSDHelper.read(istr);
                    ret.returnValue = global::Test.ShortShortSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpIntIntSDResult> opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntIntSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpIntIntSDResult> _iceI_opIntIntSDAsync(global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1, global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntIntSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpIntIntSDResult>(progress, cancel);
            _iceI_opIntIntSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntIntSD_name = "opIntIntSD";

        private void _iceI_opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1, global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpIntIntSDResult>(completed);
            outAsync.invoke(
                _opIntIntSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.IntIntSDHelper.write(ostr, iceP_p1);
                    global::Test.IntIntSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpIntIntSDResult();
                    ret.p3 = global::Test.IntIntSDHelper.read(istr);
                    ret.returnValue = global::Test.IntIntSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpLongLongSDResult> opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongLongSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpLongLongSDResult> _iceI_opLongLongSDAsync(global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1, global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongLongSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpLongLongSDResult>(progress, cancel);
            _iceI_opLongLongSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongLongSD_name = "opLongLongSD";

        private void _iceI_opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1, global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpLongLongSDResult>(completed);
            outAsync.invoke(
                _opLongLongSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.LongLongSDHelper.write(ostr, iceP_p1);
                    global::Test.LongLongSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpLongLongSDResult();
                    ret.p3 = global::Test.LongLongSDHelper.read(istr);
                    ret.returnValue = global::Test.LongLongSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringFloatSDResult> opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringFloatSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringFloatSDResult> _iceI_opStringFloatSDAsync(global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringFloatSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpStringFloatSDResult>(progress, cancel);
            _iceI_opStringFloatSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringFloatSD_name = "opStringFloatSD";

        private void _iceI_opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpStringFloatSDResult>(completed);
            outAsync.invoke(
                _opStringFloatSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.StringFloatSDHelper.write(ostr, iceP_p1);
                    global::Test.StringFloatSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpStringFloatSDResult();
                    ret.p3 = global::Test.StringFloatSDHelper.read(istr);
                    ret.returnValue = global::Test.StringFloatSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringDoubleSDResult> opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringDoubleSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringDoubleSDResult> _iceI_opStringDoubleSDAsync(global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringDoubleSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpStringDoubleSDResult>(progress, cancel);
            _iceI_opStringDoubleSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringDoubleSD_name = "opStringDoubleSD";

        private void _iceI_opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpStringDoubleSDResult>(completed);
            outAsync.invoke(
                _opStringDoubleSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.StringDoubleSDHelper.write(ostr, iceP_p1);
                    global::Test.StringDoubleSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpStringDoubleSDResult();
                    ret.p3 = global::Test.StringDoubleSDHelper.read(istr);
                    ret.returnValue = global::Test.StringDoubleSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringStringSDResult> opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringStringSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpStringStringSDResult> _iceI_opStringStringSDAsync(global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringStringSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpStringStringSDResult>(progress, cancel);
            _iceI_opStringStringSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringStringSD_name = "opStringStringSD";

        private void _iceI_opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1, global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpStringStringSDResult>(completed);
            outAsync.invoke(
                _opStringStringSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.StringStringSDHelper.write(ostr, iceP_p1);
                    global::Test.StringStringSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpStringStringSDResult();
                    ret.p3 = global::Test.StringStringSDHelper.read(istr);
                    ret.returnValue = global::Test.StringStringSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpMyEnumMyEnumSDResult> opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> p2, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumMyEnumSDAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpMyEnumMyEnumSDResult> _iceI_opMyEnumMyEnumSDAsync(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> iceP_p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnumMyEnumSD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpMyEnumMyEnumSDResult>(progress, cancel);
            _iceI_opMyEnumMyEnumSD(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnumMyEnumSD_name = "opMyEnumMyEnumSD";

        private void _iceI_opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> iceP_p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> iceP_p2, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpMyEnumMyEnumSDResult>(completed);
            outAsync.invoke(
                _opMyEnumMyEnumSD_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.MyEnumMyEnumSDHelper.write(ostr, iceP_p1);
                    global::Test.MyEnumMyEnumSDHelper.write(ostr, iceP_p2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpMyEnumMyEnumSDResult();
                    ret.p3 = global::Test.MyEnumMyEnumSDHelper.read(istr);
                    ret.returnValue = global::Test.MyEnumMyEnumSDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int[]> opIntSAsync(int[] s, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntSAsync(s, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int[]> _iceI_opIntSAsync(int[] iceP_s, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<int[]>(progress, cancel);
            _iceI_opIntS(iceP_s, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntS_name = "opIntS";

        private void _iceI_opIntS(int[] iceP_s, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int[]>(completed);
            outAsync.invoke(
                _opIntS_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.IntSHelper.write(ostr, iceP_s);
                },
                read: (Ice.InputStream istr) =>
                {
                    int[] ret;
                    ret = global::Test.IntSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opContextAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opContextAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_opContextAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opContext_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
            _iceI_opContext(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opContext_name = "opContext";

        private void _iceI_opContext(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
            outAsync.invoke(
                _opContext_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, string> ret;
                    ret = global::Test.StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task opIdempotentAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIdempotentAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opIdempotentAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opIdempotent(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIdempotent_name = "opIdempotent";

        private void _iceI_opIdempotent(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opIdempotent_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<byte> opByte1Async(byte opByte1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByte1Async(opByte1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<byte> _iceI_opByte1Async(byte iceP_opByte1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByte1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<byte>(progress, cancel);
            _iceI_opByte1(iceP_opByte1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByte1_name = "opByte1";

        private void _iceI_opByte1(byte iceP_opByte1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<byte>(completed);
            outAsync.invoke(
                _opByte1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeByte(iceP_opByte1);
                },
                read: (Ice.InputStream istr) =>
                {
                    byte ret;
                    ret = istr.readByte();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<short> opShort1Async(short opShort1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShort1Async(opShort1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<short> _iceI_opShort1Async(short iceP_opShort1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShort1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<short>(progress, cancel);
            _iceI_opShort1(iceP_opShort1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShort1_name = "opShort1";

        private void _iceI_opShort1(short iceP_opShort1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<short>(completed);
            outAsync.invoke(
                _opShort1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeShort(iceP_opShort1);
                },
                read: (Ice.InputStream istr) =>
                {
                    short ret;
                    ret = istr.readShort();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> opInt1Async(int opInt1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opInt1Async(opInt1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_opInt1Async(int iceP_opInt1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opInt1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_opInt1(iceP_opInt1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opInt1_name = "opInt1";

        private void _iceI_opInt1(int iceP_opInt1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _opInt1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_opInt1);
                },
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<long> opLong1Async(long opLong1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLong1Async(opLong1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<long> _iceI_opLong1Async(long iceP_opLong1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLong1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<long>(progress, cancel);
            _iceI_opLong1(iceP_opLong1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLong1_name = "opLong1";

        private void _iceI_opLong1(long iceP_opLong1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<long>(completed);
            outAsync.invoke(
                _opLong1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(iceP_opLong1);
                },
                read: (Ice.InputStream istr) =>
                {
                    long ret;
                    ret = istr.readLong();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> opFloat1Async(float opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloat1Async(opFloat1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_opFloat1Async(float iceP_opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloat1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_opFloat1(iceP_opFloat1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloat1_name = "opFloat1";

        private void _iceI_opFloat1(float iceP_opFloat1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _opFloat1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(iceP_opFloat1);
                },
                read: (Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<double> opDouble1Async(double opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDouble1Async(opDouble1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<double> _iceI_opDouble1Async(double iceP_opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDouble1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<double>(progress, cancel);
            _iceI_opDouble1(iceP_opDouble1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDouble1_name = "opDouble1";

        private void _iceI_opDouble1(double iceP_opDouble1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<double>(completed);
            outAsync.invoke(
                _opDouble1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeDouble(iceP_opDouble1);
                },
                read: (Ice.InputStream istr) =>
                {
                    double ret;
                    ret = istr.readDouble();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string> opString1Async(string opString1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opString1Async(opString1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_opString1Async(string iceP_opString1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opString1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_opString1(iceP_opString1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opString1_name = "opString1";

        private void _iceI_opString1(string iceP_opString1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _opString1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_opString1);
                },
                read: (Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opStringS1Async(string[] opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringS1Async(opStringS1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opStringS1Async(string[] iceP_opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringS1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opStringS1(iceP_opStringS1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringS1_name = "opStringS1";

        private void _iceI_opStringS1(string[] iceP_opStringS1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opStringS1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.StringSHelper.write(ostr, iceP_opStringS1);
                },
                read: (Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = global::Test.StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteBoolD1Async(opByteBoolD1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> _iceI_opByteBoolD1Async(global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolD1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<byte, bool>>(progress, cancel);
            _iceI_opByteBoolD1(iceP_opByteBoolD1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolD1_name = "opByteBoolD1";

        private void _iceI_opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<byte, bool>>(completed);
            outAsync.invoke(
                _opByteBoolD1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.ByteBoolDHelper.write(ostr, iceP_opByteBoolD1);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<byte, bool> ret;
                    ret = global::Test.ByteBoolDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opStringS2Async(string[] stringS, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringS2Async(stringS, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opStringS2Async(string[] iceP_stringS, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringS2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opStringS2(iceP_stringS, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringS2_name = "opStringS2";

        private void _iceI_opStringS2(string[] iceP_stringS, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opStringS2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.StringSHelper.write(ostr, iceP_stringS);
                },
                read: (Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = global::Test.StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteBoolD2Async(byteBoolD, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<byte, bool>> _iceI_opByteBoolD2Async(global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBoolD2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<byte, bool>>(progress, cancel);
            _iceI_opByteBoolD2(iceP_byteBoolD, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBoolD2_name = "opByteBoolD2";

        private void _iceI_opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<byte, bool>>(completed);
            outAsync.invoke(
                _opByteBoolD2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.ByteBoolDHelper.write(ostr, iceP_byteBoolD);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<byte, bool> ret;
                    ret = global::Test.ByteBoolDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opStringLiteralsAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringLiteralsAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opStringLiteralsAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringLiterals_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opStringLiterals(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringLiterals_name = "opStringLiterals";

        private void _iceI_opStringLiterals(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opStringLiterals_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = global::Test.StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.Structure> opMStruct1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMStruct1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.Structure> _iceI_opMStruct1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMStruct1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.Structure>(progress, cancel);
            _iceI_opMStruct1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMStruct1_name = "opMStruct1";

        private void _iceI_opMStruct1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.Structure>(completed);
            outAsync.invoke(
                _opMStruct1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::Test.Structure ret;
                    ret = new global::Test.Structure(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpMStruct2Result> opMStruct2Async(global::Test.Structure p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMStruct2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpMStruct2Result> _iceI_opMStruct2Async(global::Test.Structure iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMStruct2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpMStruct2Result>(progress, cancel);
            _iceI_opMStruct2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMStruct2_name = "opMStruct2";

        private void _iceI_opMStruct2(global::Test.Structure iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpMStruct2Result>(completed);
            outAsync.invoke(
                _opMStruct2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.Structure.ice_write(ostr, iceP_p1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpMStruct2Result();
                    ret.p2 = new global::Test.Structure(istr);
                    ret.returnValue = new global::Test.Structure(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> opMSeq1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMSeq1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_opMSeq1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMSeq1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_opMSeq1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMSeq1_name = "opMSeq1";

        private void _iceI_opMSeq1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _opMSeq1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = global::Test.StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpMSeq2Result> opMSeq2Async(string[] p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMSeq2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpMSeq2Result> _iceI_opMSeq2Async(string[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMSeq2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpMSeq2Result>(progress, cancel);
            _iceI_opMSeq2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMSeq2_name = "opMSeq2";

        private void _iceI_opMSeq2(string[] iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpMSeq2Result>(completed);
            outAsync.invoke(
                _opMSeq2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.StringSHelper.write(ostr, iceP_p1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpMSeq2Result();
                    ret.p2 = global::Test.StringSHelper.read(istr);
                    ret.returnValue = global::Test.StringSHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> opMDict1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMDict1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, string>> _iceI_opMDict1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMDict1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, string>>(progress, cancel);
            _iceI_opMDict1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMDict1_name = "opMDict1";

        private void _iceI_opMDict1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, string>>(completed);
            outAsync.invoke(
                _opMDict1_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, string> ret;
                    ret = global::Test.StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MyClass_OpMDict2Result> opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMDict2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MyClass_OpMDict2Result> _iceI_opMDict2Async(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMDict2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MyClass_OpMDict2Result>(progress, cancel);
            _iceI_opMDict2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMDict2_name = "opMDict2";

        private void _iceI_opMDict2(global::System.Collections.Generic.Dictionary<string, string> iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MyClass_OpMDict2Result>(completed);
            outAsync.invoke(
                _opMDict2_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    global::Test.StringStringDHelper.write(ostr, iceP_p1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new global::Test.MyClass_OpMDict2Result();
                    ret.p2 = global::Test.StringStringDHelper.read(istr);
                    ret.returnValue = global::Test.StringStringDHelper.read(istr);
                    return ret;
                });
        }

        public static MyDerivedClassPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new MyDerivedClassPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static MyDerivedClassPrx? checkedCast(Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new MyDerivedClassPrxHelper(b) : null;

        public static MyDerivedClassPrx? checkedCast(Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    return new MyDerivedClassPrxHelper(bb);
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyDerivedClassPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new MyDerivedClassPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyDerivedClassPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            b is not null ? new MyDerivedClassPrxHelper(b.ice_facet(f)) : null;

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test2::MyDerivedClass",
            "::Test::MyClass"
        };

        public static string ice_staticId() => "::Test2::MyDerivedClass";

        public static void write(Ice.OutputStream ostr, MyDerivedClassPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static MyDerivedClassPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new MyDerivedClassPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new MyDerivedClassPrxHelper(reference);

        private MyDerivedClassPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private MyDerivedClassPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class MyClassDisp_ : Ice.ObjectImpl, MyClass
    {
        public abstract void shutdown(Ice.Current current);

        public abstract bool supportsCompress(Ice.Current current);

        public abstract void opVoid(Ice.Current current);

        public abstract byte opByte(byte p1, byte p2, out byte p3, Ice.Current current);

        public abstract bool opBool(bool p1, bool p2, out bool p3, Ice.Current current);

        public abstract long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, Ice.Current current);

        public abstract double opFloatDouble(float p1, double p2, out float p3, out double p4, Ice.Current current);

        public abstract string opString(string p1, string p2, out string p3, Ice.Current current);

        public abstract MyEnum opMyEnum(MyEnum p1, out MyEnum p2, Ice.Current current);

        public abstract MyClassPrx? opMyClass(MyClassPrx? p1, out MyClassPrx? p2, out MyClassPrx? p3, Ice.Current current);

        public abstract Structure opStruct(Structure p1, Structure p2, out Structure p3, Ice.Current current);

        public abstract byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, Ice.Current current);

        public abstract bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, Ice.Current current);

        public abstract long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, Ice.Current current);

        public abstract double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, Ice.Current current);

        public abstract string[] opStringS(string[] p1, string[] p2, out string[] p3, Ice.Current current);

        public abstract byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, Ice.Current current);

        public abstract bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, Ice.Current current);

        public abstract long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, Ice.Current current);

        public abstract double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, Ice.Current current);

        public abstract string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, MyEnum> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<MyEnum, string> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3, Ice.Current current);

        public abstract int[] opIntS(int[] s, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, string> opContext(Ice.Current current);

        public abstract void opIdempotent(Ice.Current current);

        public abstract byte opByte1(byte opByte1, Ice.Current current);

        public abstract short opShort1(short opShort1, Ice.Current current);

        public abstract int opInt1(int opInt1, Ice.Current current);

        public abstract long opLong1(long opLong1, Ice.Current current);

        public abstract float opFloat1(float opFloat1, Ice.Current current);

        public abstract double opDouble1(double opDouble1, Ice.Current current);

        public abstract string opString1(string opString1, Ice.Current current);

        public abstract string[] opStringS1(string[] opStringS1, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, Ice.Current current);

        public abstract string[] opStringS2(string[] stringS, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, Ice.Current current);

        public abstract string[] opStringLiterals(Ice.Current current);

        public abstract MyClass_OpMStruct1MarshaledResult opMStruct1(Ice.Current current);

        public abstract MyClass_OpMStruct2MarshaledResult opMStruct2(Structure p1, Ice.Current current);

        public abstract MyClass_OpMSeq1MarshaledResult opMSeq1(Ice.Current current);

        public abstract MyClass_OpMSeq2MarshaledResult opMSeq2(string[] p1, Ice.Current current);

        public abstract MyClass_OpMDict1MarshaledResult opMDict1(Ice.Current current);

        public abstract MyClass_OpMDict2MarshaledResult opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::MyClass";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "shutdown" => MyClass.iceD_shutdownAsync(this, request),
                "supportsCompress" => MyClass.iceD_supportsCompressAsync(this, request),
                "opVoid" => MyClass.iceD_opVoidAsync(this, request),
                "opByte" => MyClass.iceD_opByteAsync(this, request),
                "opBool" => MyClass.iceD_opBoolAsync(this, request),
                "opShortIntLong" => MyClass.iceD_opShortIntLongAsync(this, request),
                "opFloatDouble" => MyClass.iceD_opFloatDoubleAsync(this, request),
                "opString" => MyClass.iceD_opStringAsync(this, request),
                "opMyEnum" => MyClass.iceD_opMyEnumAsync(this, request),
                "opMyClass" => MyClass.iceD_opMyClassAsync(this, request),
                "opStruct" => MyClass.iceD_opStructAsync(this, request),
                "opByteS" => MyClass.iceD_opByteSAsync(this, request),
                "opBoolS" => MyClass.iceD_opBoolSAsync(this, request),
                "opShortIntLongS" => MyClass.iceD_opShortIntLongSAsync(this, request),
                "opFloatDoubleS" => MyClass.iceD_opFloatDoubleSAsync(this, request),
                "opStringS" => MyClass.iceD_opStringSAsync(this, request),
                "opByteSS" => MyClass.iceD_opByteSSAsync(this, request),
                "opBoolSS" => MyClass.iceD_opBoolSSAsync(this, request),
                "opShortIntLongSS" => MyClass.iceD_opShortIntLongSSAsync(this, request),
                "opFloatDoubleSS" => MyClass.iceD_opFloatDoubleSSAsync(this, request),
                "opStringSS" => MyClass.iceD_opStringSSAsync(this, request),
                "opByteBoolD" => MyClass.iceD_opByteBoolDAsync(this, request),
                "opShortIntD" => MyClass.iceD_opShortIntDAsync(this, request),
                "opLongFloatD" => MyClass.iceD_opLongFloatDAsync(this, request),
                "opStringStringD" => MyClass.iceD_opStringStringDAsync(this, request),
                "opStringMyEnumD" => MyClass.iceD_opStringMyEnumDAsync(this, request),
                "opMyEnumStringD" => MyClass.iceD_opMyEnumStringDAsync(this, request),
                "opByteBoolDS" => MyClass.iceD_opByteBoolDSAsync(this, request),
                "opShortIntDS" => MyClass.iceD_opShortIntDSAsync(this, request),
                "opLongFloatDS" => MyClass.iceD_opLongFloatDSAsync(this, request),
                "opStringStringDS" => MyClass.iceD_opStringStringDSAsync(this, request),
                "opStringMyEnumDS" => MyClass.iceD_opStringMyEnumDSAsync(this, request),
                "opMyEnumStringDS" => MyClass.iceD_opMyEnumStringDSAsync(this, request),
                "opByteByteSD" => MyClass.iceD_opByteByteSDAsync(this, request),
                "opBoolBoolSD" => MyClass.iceD_opBoolBoolSDAsync(this, request),
                "opShortShortSD" => MyClass.iceD_opShortShortSDAsync(this, request),
                "opIntIntSD" => MyClass.iceD_opIntIntSDAsync(this, request),
                "opLongLongSD" => MyClass.iceD_opLongLongSDAsync(this, request),
                "opStringFloatSD" => MyClass.iceD_opStringFloatSDAsync(this, request),
                "opStringDoubleSD" => MyClass.iceD_opStringDoubleSDAsync(this, request),
                "opStringStringSD" => MyClass.iceD_opStringStringSDAsync(this, request),
                "opMyEnumMyEnumSD" => MyClass.iceD_opMyEnumMyEnumSDAsync(this, request),
                "opIntS" => MyClass.iceD_opIntSAsync(this, request),
                "opContext" => MyClass.iceD_opContextAsync(this, request),
                "opIdempotent" => MyClass.iceD_opIdempotentAsync(this, request),
                "opByte1" => MyClass.iceD_opByte1Async(this, request),
                "opShort1" => MyClass.iceD_opShort1Async(this, request),
                "opInt1" => MyClass.iceD_opInt1Async(this, request),
                "opLong1" => MyClass.iceD_opLong1Async(this, request),
                "opFloat1" => MyClass.iceD_opFloat1Async(this, request),
                "opDouble1" => MyClass.iceD_opDouble1Async(this, request),
                "opString1" => MyClass.iceD_opString1Async(this, request),
                "opStringS1" => MyClass.iceD_opStringS1Async(this, request),
                "opByteBoolD1" => MyClass.iceD_opByteBoolD1Async(this, request),
                "opStringS2" => MyClass.iceD_opStringS2Async(this, request),
                "opByteBoolD2" => MyClass.iceD_opByteBoolD2Async(this, request),
                "opStringLiterals" => MyClass.iceD_opStringLiteralsAsync(this, request),
                "opMStruct1" => MyClass.iceD_opMStruct1Async(this, request),
                "opMStruct2" => MyClass.iceD_opMStruct2Async(this, request),
                "opMSeq1" => MyClass.iceD_opMSeq1Async(this, request),
                "opMSeq2" => MyClass.iceD_opMSeq2Async(this, request),
                "opMDict1" => MyClass.iceD_opMDict1Async(this, request),
                "opMDict2" => MyClass.iceD_opMDict2Async(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class MyDerivedClassDisp_ : Ice.ObjectImpl, MyDerivedClass
    {
        public abstract void opDerived(Ice.Current current);

        public abstract MyStruct1 opMyStruct1(MyStruct1 s, Ice.Current current);

        public abstract MyClass1? opMyClass1(MyClass1? c, Ice.Current current);

        public abstract void shutdown(Ice.Current current);

        public abstract bool supportsCompress(Ice.Current current);

        public abstract void opVoid(Ice.Current current);

        public abstract byte opByte(byte p1, byte p2, out byte p3, Ice.Current current);

        public abstract bool opBool(bool p1, bool p2, out bool p3, Ice.Current current);

        public abstract long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, Ice.Current current);

        public abstract double opFloatDouble(float p1, double p2, out float p3, out double p4, Ice.Current current);

        public abstract string opString(string p1, string p2, out string p3, Ice.Current current);

        public abstract MyEnum opMyEnum(MyEnum p1, out MyEnum p2, Ice.Current current);

        public abstract MyClassPrx? opMyClass(MyClassPrx? p1, out MyClassPrx? p2, out MyClassPrx? p3, Ice.Current current);

        public abstract Structure opStruct(Structure p1, Structure p2, out Structure p3, Ice.Current current);

        public abstract byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, Ice.Current current);

        public abstract bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, Ice.Current current);

        public abstract long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, Ice.Current current);

        public abstract double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, Ice.Current current);

        public abstract string[] opStringS(string[] p1, string[] p2, out string[] p3, Ice.Current current);

        public abstract byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, Ice.Current current);

        public abstract bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, Ice.Current current);

        public abstract long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, Ice.Current current);

        public abstract double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, Ice.Current current);

        public abstract string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, MyEnum> p1, global::System.Collections.Generic.Dictionary<string, MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, MyEnum> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<MyEnum, string> p1, global::System.Collections.Generic.Dictionary<MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<MyEnum, string> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, MyEnum>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<MyEnum, string>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p1, global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> p3, Ice.Current current);

        public abstract int[] opIntS(int[] s, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, string> opContext(Ice.Current current);

        public abstract void opIdempotent(Ice.Current current);

        public abstract byte opByte1(byte opByte1, Ice.Current current);

        public abstract short opShort1(short opShort1, Ice.Current current);

        public abstract int opInt1(int opInt1, Ice.Current current);

        public abstract long opLong1(long opLong1, Ice.Current current);

        public abstract float opFloat1(float opFloat1, Ice.Current current);

        public abstract double opDouble1(double opDouble1, Ice.Current current);

        public abstract string opString1(string opString1, Ice.Current current);

        public abstract string[] opStringS1(string[] opStringS1, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, Ice.Current current);

        public abstract string[] opStringS2(string[] stringS, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, Ice.Current current);

        public abstract string[] opStringLiterals(Ice.Current current);

        public abstract MyClass_OpMStruct1MarshaledResult opMStruct1(Ice.Current current);

        public abstract MyClass_OpMStruct2MarshaledResult opMStruct2(Structure p1, Ice.Current current);

        public abstract MyClass_OpMSeq1MarshaledResult opMSeq1(Ice.Current current);

        public abstract MyClass_OpMSeq2MarshaledResult opMSeq2(string[] p1, Ice.Current current);

        public abstract MyClass_OpMDict1MarshaledResult opMDict1(Ice.Current current);

        public abstract MyClass_OpMDict2MarshaledResult opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::MyDerivedClass";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "shutdown" => MyClass.iceD_shutdownAsync(this, request),
                "supportsCompress" => MyClass.iceD_supportsCompressAsync(this, request),
                "opVoid" => MyClass.iceD_opVoidAsync(this, request),
                "opByte" => MyClass.iceD_opByteAsync(this, request),
                "opBool" => MyClass.iceD_opBoolAsync(this, request),
                "opShortIntLong" => MyClass.iceD_opShortIntLongAsync(this, request),
                "opFloatDouble" => MyClass.iceD_opFloatDoubleAsync(this, request),
                "opString" => MyClass.iceD_opStringAsync(this, request),
                "opMyEnum" => MyClass.iceD_opMyEnumAsync(this, request),
                "opMyClass" => MyClass.iceD_opMyClassAsync(this, request),
                "opStruct" => MyClass.iceD_opStructAsync(this, request),
                "opByteS" => MyClass.iceD_opByteSAsync(this, request),
                "opBoolS" => MyClass.iceD_opBoolSAsync(this, request),
                "opShortIntLongS" => MyClass.iceD_opShortIntLongSAsync(this, request),
                "opFloatDoubleS" => MyClass.iceD_opFloatDoubleSAsync(this, request),
                "opStringS" => MyClass.iceD_opStringSAsync(this, request),
                "opByteSS" => MyClass.iceD_opByteSSAsync(this, request),
                "opBoolSS" => MyClass.iceD_opBoolSSAsync(this, request),
                "opShortIntLongSS" => MyClass.iceD_opShortIntLongSSAsync(this, request),
                "opFloatDoubleSS" => MyClass.iceD_opFloatDoubleSSAsync(this, request),
                "opStringSS" => MyClass.iceD_opStringSSAsync(this, request),
                "opByteBoolD" => MyClass.iceD_opByteBoolDAsync(this, request),
                "opShortIntD" => MyClass.iceD_opShortIntDAsync(this, request),
                "opLongFloatD" => MyClass.iceD_opLongFloatDAsync(this, request),
                "opStringStringD" => MyClass.iceD_opStringStringDAsync(this, request),
                "opStringMyEnumD" => MyClass.iceD_opStringMyEnumDAsync(this, request),
                "opMyEnumStringD" => MyClass.iceD_opMyEnumStringDAsync(this, request),
                "opByteBoolDS" => MyClass.iceD_opByteBoolDSAsync(this, request),
                "opShortIntDS" => MyClass.iceD_opShortIntDSAsync(this, request),
                "opLongFloatDS" => MyClass.iceD_opLongFloatDSAsync(this, request),
                "opStringStringDS" => MyClass.iceD_opStringStringDSAsync(this, request),
                "opStringMyEnumDS" => MyClass.iceD_opStringMyEnumDSAsync(this, request),
                "opMyEnumStringDS" => MyClass.iceD_opMyEnumStringDSAsync(this, request),
                "opByteByteSD" => MyClass.iceD_opByteByteSDAsync(this, request),
                "opBoolBoolSD" => MyClass.iceD_opBoolBoolSDAsync(this, request),
                "opShortShortSD" => MyClass.iceD_opShortShortSDAsync(this, request),
                "opIntIntSD" => MyClass.iceD_opIntIntSDAsync(this, request),
                "opLongLongSD" => MyClass.iceD_opLongLongSDAsync(this, request),
                "opStringFloatSD" => MyClass.iceD_opStringFloatSDAsync(this, request),
                "opStringDoubleSD" => MyClass.iceD_opStringDoubleSDAsync(this, request),
                "opStringStringSD" => MyClass.iceD_opStringStringSDAsync(this, request),
                "opMyEnumMyEnumSD" => MyClass.iceD_opMyEnumMyEnumSDAsync(this, request),
                "opIntS" => MyClass.iceD_opIntSAsync(this, request),
                "opContext" => MyClass.iceD_opContextAsync(this, request),
                "opIdempotent" => MyClass.iceD_opIdempotentAsync(this, request),
                "opByte1" => MyClass.iceD_opByte1Async(this, request),
                "opShort1" => MyClass.iceD_opShort1Async(this, request),
                "opInt1" => MyClass.iceD_opInt1Async(this, request),
                "opLong1" => MyClass.iceD_opLong1Async(this, request),
                "opFloat1" => MyClass.iceD_opFloat1Async(this, request),
                "opDouble1" => MyClass.iceD_opDouble1Async(this, request),
                "opString1" => MyClass.iceD_opString1Async(this, request),
                "opStringS1" => MyClass.iceD_opStringS1Async(this, request),
                "opByteBoolD1" => MyClass.iceD_opByteBoolD1Async(this, request),
                "opStringS2" => MyClass.iceD_opStringS2Async(this, request),
                "opByteBoolD2" => MyClass.iceD_opByteBoolD2Async(this, request),
                "opStringLiterals" => MyClass.iceD_opStringLiteralsAsync(this, request),
                "opMStruct1" => MyClass.iceD_opMStruct1Async(this, request),
                "opMStruct2" => MyClass.iceD_opMStruct2Async(this, request),
                "opMSeq1" => MyClass.iceD_opMSeq1Async(this, request),
                "opMSeq2" => MyClass.iceD_opMSeq2Async(this, request),
                "opMDict1" => MyClass.iceD_opMDict1Async(this, request),
                "opMDict2" => MyClass.iceD_opMDict2Async(this, request),
                "opDerived" => MyDerivedClass.iceD_opDerivedAsync(this, request),
                "opMyStruct1" => MyDerivedClass.iceD_opMyStruct1Async(this, request),
                "opMyClass1" => MyDerivedClass.iceD_opMyClass1Async(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test2
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class MyDerivedClassDisp_ : Ice.ObjectImpl, MyDerivedClass
    {
        public abstract void shutdown(Ice.Current current);

        public abstract bool supportsCompress(Ice.Current current);

        public abstract void opVoid(Ice.Current current);

        public abstract byte opByte(byte p1, byte p2, out byte p3, Ice.Current current);

        public abstract bool opBool(bool p1, bool p2, out bool p3, Ice.Current current);

        public abstract long opShortIntLong(short p1, int p2, long p3, out short p4, out int p5, out long p6, Ice.Current current);

        public abstract double opFloatDouble(float p1, double p2, out float p3, out double p4, Ice.Current current);

        public abstract string opString(string p1, string p2, out string p3, Ice.Current current);

        public abstract global::Test.MyEnum opMyEnum(global::Test.MyEnum p1, out global::Test.MyEnum p2, Ice.Current current);

        public abstract global::Test.MyClassPrx? opMyClass(global::Test.MyClassPrx? p1, out global::Test.MyClassPrx? p2, out global::Test.MyClassPrx? p3, Ice.Current current);

        public abstract global::Test.Structure opStruct(global::Test.Structure p1, global::Test.Structure p2, out global::Test.Structure p3, Ice.Current current);

        public abstract byte[] opByteS(byte[] p1, byte[] p2, out byte[] p3, Ice.Current current);

        public abstract bool[] opBoolS(bool[] p1, bool[] p2, out bool[] p3, Ice.Current current);

        public abstract long[] opShortIntLongS(short[] p1, int[] p2, long[] p3, out short[] p4, out int[] p5, out long[] p6, Ice.Current current);

        public abstract double[] opFloatDoubleS(float[] p1, double[] p2, out float[] p3, out double[] p4, Ice.Current current);

        public abstract string[] opStringS(string[] p1, string[] p2, out string[] p3, Ice.Current current);

        public abstract byte[][] opByteSS(byte[][] p1, byte[][] p2, out byte[][] p3, Ice.Current current);

        public abstract bool[][] opBoolSS(bool[][] p1, bool[][] p2, out bool[][] p3, Ice.Current current);

        public abstract long[][] opShortIntLongSS(short[][] p1, int[][] p2, long[][] p3, out short[][] p4, out int[][] p5, out long[][] p6, Ice.Current current);

        public abstract double[][] opFloatDoubleSS(float[][] p1, double[][] p2, out float[][] p3, out double[][] p4, Ice.Current current);

        public abstract string[][] opStringSS(string[][] p1, string[][] p2, out string[][] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD(global::System.Collections.Generic.Dictionary<byte, bool> p1, global::System.Collections.Generic.Dictionary<byte, bool> p2, out global::System.Collections.Generic.Dictionary<byte, bool> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<short, int> opShortIntD(global::System.Collections.Generic.Dictionary<short, int> p1, global::System.Collections.Generic.Dictionary<short, int> p2, out global::System.Collections.Generic.Dictionary<short, int> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<long, float> opLongFloatD(global::System.Collections.Generic.Dictionary<long, float> p1, global::System.Collections.Generic.Dictionary<long, float> p2, out global::System.Collections.Generic.Dictionary<long, float> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool>[] opByteBoolDS(global::System.Collections.Generic.Dictionary<byte, bool>[] p1, global::System.Collections.Generic.Dictionary<byte, bool>[] p2, out global::System.Collections.Generic.Dictionary<byte, bool>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, string> opStringStringD(global::System.Collections.Generic.Dictionary<string, string> p1, global::System.Collections.Generic.Dictionary<string, string> p2, out global::System.Collections.Generic.Dictionary<string, string> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> opStringMyEnumD(global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> p1, global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> p2, out global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> opMyEnumStringD(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> p2, out global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<short, int>[] opShortIntDS(global::System.Collections.Generic.Dictionary<short, int>[] p1, global::System.Collections.Generic.Dictionary<short, int>[] p2, out global::System.Collections.Generic.Dictionary<short, int>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<long, float>[] opLongFloatDS(global::System.Collections.Generic.Dictionary<long, float>[] p1, global::System.Collections.Generic.Dictionary<long, float>[] p2, out global::System.Collections.Generic.Dictionary<long, float>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, string>[] opStringStringDS(global::System.Collections.Generic.Dictionary<string, string>[] p1, global::System.Collections.Generic.Dictionary<string, string>[] p2, out global::System.Collections.Generic.Dictionary<string, string>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] opStringMyEnumDS(global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] p1, global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] p2, out global::System.Collections.Generic.Dictionary<string, global::Test.MyEnum>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] opMyEnumStringDS(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] p2, out global::System.Collections.Generic.Dictionary<global::Test.MyEnum, string>[] p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, byte[]> opByteByteSD(global::System.Collections.Generic.Dictionary<byte, byte[]> p1, global::System.Collections.Generic.Dictionary<byte, byte[]> p2, out global::System.Collections.Generic.Dictionary<byte, byte[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<bool, bool[]> opBoolBoolSD(global::System.Collections.Generic.Dictionary<bool, bool[]> p1, global::System.Collections.Generic.Dictionary<bool, bool[]> p2, out global::System.Collections.Generic.Dictionary<bool, bool[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<short, short[]> opShortShortSD(global::System.Collections.Generic.Dictionary<short, short[]> p1, global::System.Collections.Generic.Dictionary<short, short[]> p2, out global::System.Collections.Generic.Dictionary<short, short[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<int, int[]> opIntIntSD(global::System.Collections.Generic.Dictionary<int, int[]> p1, global::System.Collections.Generic.Dictionary<int, int[]> p2, out global::System.Collections.Generic.Dictionary<int, int[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<long, long[]> opLongLongSD(global::System.Collections.Generic.Dictionary<long, long[]> p1, global::System.Collections.Generic.Dictionary<long, long[]> p2, out global::System.Collections.Generic.Dictionary<long, long[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, float[]> opStringFloatSD(global::System.Collections.Generic.Dictionary<string, float[]> p1, global::System.Collections.Generic.Dictionary<string, float[]> p2, out global::System.Collections.Generic.Dictionary<string, float[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, double[]> opStringDoubleSD(global::System.Collections.Generic.Dictionary<string, double[]> p1, global::System.Collections.Generic.Dictionary<string, double[]> p2, out global::System.Collections.Generic.Dictionary<string, double[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, string[]> opStringStringSD(global::System.Collections.Generic.Dictionary<string, string[]> p1, global::System.Collections.Generic.Dictionary<string, string[]> p2, out global::System.Collections.Generic.Dictionary<string, string[]> p3, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> opMyEnumMyEnumSD(global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> p1, global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> p2, out global::System.Collections.Generic.Dictionary<global::Test.MyEnum, global::Test.MyEnum[]> p3, Ice.Current current);

        public abstract int[] opIntS(int[] s, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, string> opContext(Ice.Current current);

        public abstract void opIdempotent(Ice.Current current);

        public abstract byte opByte1(byte opByte1, Ice.Current current);

        public abstract short opShort1(short opShort1, Ice.Current current);

        public abstract int opInt1(int opInt1, Ice.Current current);

        public abstract long opLong1(long opLong1, Ice.Current current);

        public abstract float opFloat1(float opFloat1, Ice.Current current);

        public abstract double opDouble1(double opDouble1, Ice.Current current);

        public abstract string opString1(string opString1, Ice.Current current);

        public abstract string[] opStringS1(string[] opStringS1, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1(global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD1, Ice.Current current);

        public abstract string[] opStringS2(string[] stringS, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<byte, bool> opByteBoolD2(global::System.Collections.Generic.Dictionary<byte, bool> byteBoolD, Ice.Current current);

        public abstract string[] opStringLiterals(Ice.Current current);

        public abstract global::Test.MyClass_OpMStruct1MarshaledResult opMStruct1(Ice.Current current);

        public abstract global::Test.MyClass_OpMStruct2MarshaledResult opMStruct2(global::Test.Structure p1, Ice.Current current);

        public abstract global::Test.MyClass_OpMSeq1MarshaledResult opMSeq1(Ice.Current current);

        public abstract global::Test.MyClass_OpMSeq2MarshaledResult opMSeq2(string[] p1, Ice.Current current);

        public abstract global::Test.MyClass_OpMDict1MarshaledResult opMDict1(Ice.Current current);

        public abstract global::Test.MyClass_OpMDict2MarshaledResult opMDict2(global::System.Collections.Generic.Dictionary<string, string> p1, Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test2::MyDerivedClass";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "shutdown" => global::Test.MyClass.iceD_shutdownAsync(this, request),
                "supportsCompress" => global::Test.MyClass.iceD_supportsCompressAsync(this, request),
                "opVoid" => global::Test.MyClass.iceD_opVoidAsync(this, request),
                "opByte" => global::Test.MyClass.iceD_opByteAsync(this, request),
                "opBool" => global::Test.MyClass.iceD_opBoolAsync(this, request),
                "opShortIntLong" => global::Test.MyClass.iceD_opShortIntLongAsync(this, request),
                "opFloatDouble" => global::Test.MyClass.iceD_opFloatDoubleAsync(this, request),
                "opString" => global::Test.MyClass.iceD_opStringAsync(this, request),
                "opMyEnum" => global::Test.MyClass.iceD_opMyEnumAsync(this, request),
                "opMyClass" => global::Test.MyClass.iceD_opMyClassAsync(this, request),
                "opStruct" => global::Test.MyClass.iceD_opStructAsync(this, request),
                "opByteS" => global::Test.MyClass.iceD_opByteSAsync(this, request),
                "opBoolS" => global::Test.MyClass.iceD_opBoolSAsync(this, request),
                "opShortIntLongS" => global::Test.MyClass.iceD_opShortIntLongSAsync(this, request),
                "opFloatDoubleS" => global::Test.MyClass.iceD_opFloatDoubleSAsync(this, request),
                "opStringS" => global::Test.MyClass.iceD_opStringSAsync(this, request),
                "opByteSS" => global::Test.MyClass.iceD_opByteSSAsync(this, request),
                "opBoolSS" => global::Test.MyClass.iceD_opBoolSSAsync(this, request),
                "opShortIntLongSS" => global::Test.MyClass.iceD_opShortIntLongSSAsync(this, request),
                "opFloatDoubleSS" => global::Test.MyClass.iceD_opFloatDoubleSSAsync(this, request),
                "opStringSS" => global::Test.MyClass.iceD_opStringSSAsync(this, request),
                "opByteBoolD" => global::Test.MyClass.iceD_opByteBoolDAsync(this, request),
                "opShortIntD" => global::Test.MyClass.iceD_opShortIntDAsync(this, request),
                "opLongFloatD" => global::Test.MyClass.iceD_opLongFloatDAsync(this, request),
                "opStringStringD" => global::Test.MyClass.iceD_opStringStringDAsync(this, request),
                "opStringMyEnumD" => global::Test.MyClass.iceD_opStringMyEnumDAsync(this, request),
                "opMyEnumStringD" => global::Test.MyClass.iceD_opMyEnumStringDAsync(this, request),
                "opByteBoolDS" => global::Test.MyClass.iceD_opByteBoolDSAsync(this, request),
                "opShortIntDS" => global::Test.MyClass.iceD_opShortIntDSAsync(this, request),
                "opLongFloatDS" => global::Test.MyClass.iceD_opLongFloatDSAsync(this, request),
                "opStringStringDS" => global::Test.MyClass.iceD_opStringStringDSAsync(this, request),
                "opStringMyEnumDS" => global::Test.MyClass.iceD_opStringMyEnumDSAsync(this, request),
                "opMyEnumStringDS" => global::Test.MyClass.iceD_opMyEnumStringDSAsync(this, request),
                "opByteByteSD" => global::Test.MyClass.iceD_opByteByteSDAsync(this, request),
                "opBoolBoolSD" => global::Test.MyClass.iceD_opBoolBoolSDAsync(this, request),
                "opShortShortSD" => global::Test.MyClass.iceD_opShortShortSDAsync(this, request),
                "opIntIntSD" => global::Test.MyClass.iceD_opIntIntSDAsync(this, request),
                "opLongLongSD" => global::Test.MyClass.iceD_opLongLongSDAsync(this, request),
                "opStringFloatSD" => global::Test.MyClass.iceD_opStringFloatSDAsync(this, request),
                "opStringDoubleSD" => global::Test.MyClass.iceD_opStringDoubleSDAsync(this, request),
                "opStringStringSD" => global::Test.MyClass.iceD_opStringStringSDAsync(this, request),
                "opMyEnumMyEnumSD" => global::Test.MyClass.iceD_opMyEnumMyEnumSDAsync(this, request),
                "opIntS" => global::Test.MyClass.iceD_opIntSAsync(this, request),
                "opContext" => global::Test.MyClass.iceD_opContextAsync(this, request),
                "opIdempotent" => global::Test.MyClass.iceD_opIdempotentAsync(this, request),
                "opByte1" => global::Test.MyClass.iceD_opByte1Async(this, request),
                "opShort1" => global::Test.MyClass.iceD_opShort1Async(this, request),
                "opInt1" => global::Test.MyClass.iceD_opInt1Async(this, request),
                "opLong1" => global::Test.MyClass.iceD_opLong1Async(this, request),
                "opFloat1" => global::Test.MyClass.iceD_opFloat1Async(this, request),
                "opDouble1" => global::Test.MyClass.iceD_opDouble1Async(this, request),
                "opString1" => global::Test.MyClass.iceD_opString1Async(this, request),
                "opStringS1" => global::Test.MyClass.iceD_opStringS1Async(this, request),
                "opByteBoolD1" => global::Test.MyClass.iceD_opByteBoolD1Async(this, request),
                "opStringS2" => global::Test.MyClass.iceD_opStringS2Async(this, request),
                "opByteBoolD2" => global::Test.MyClass.iceD_opByteBoolD2Async(this, request),
                "opStringLiterals" => global::Test.MyClass.iceD_opStringLiteralsAsync(this, request),
                "opMStruct1" => global::Test.MyClass.iceD_opMStruct1Async(this, request),
                "opMStruct2" => global::Test.MyClass.iceD_opMStruct2Async(this, request),
                "opMSeq1" => global::Test.MyClass.iceD_opMSeq1Async(this, request),
                "opMSeq2" => global::Test.MyClass.iceD_opMSeq2Async(this, request),
                "opMDict1" => global::Test.MyClass.iceD_opMDict1Async(this, request),
                "opMDict2" => global::Test.MyClass.iceD_opMDict2Async(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test
{
    public partial interface MyClass
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.shutdown(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_supportsCompressAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.supportsCompress(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeBool(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opVoidAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.opVoid(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte iceP_p1;
            byte iceP_p2;
            iceP_p1 = istr.readByte();
            iceP_p2 = istr.readByte();
            istr.endEncapsulation();
            byte iceP_p3;
            var ret = obj.opByte(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeByte(iceP_p3);
            ostr.writeByte(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBoolAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            bool iceP_p1;
            bool iceP_p2;
            iceP_p1 = istr.readBool();
            iceP_p2 = istr.readBool();
            istr.endEncapsulation();
            bool iceP_p3;
            var ret = obj.opBool(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeBool(iceP_p3);
            ostr.writeBool(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortIntLongAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            short iceP_p1;
            int iceP_p2;
            long iceP_p3;
            iceP_p1 = istr.readShort();
            iceP_p2 = istr.readInt();
            iceP_p3 = istr.readLong();
            istr.endEncapsulation();
            short iceP_p4;
            int iceP_p5;
            long iceP_p6;
            var ret = obj.opShortIntLong(iceP_p1, iceP_p2, iceP_p3, out iceP_p4, out iceP_p5, out iceP_p6, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeShort(iceP_p4);
            ostr.writeInt(iceP_p5);
            ostr.writeLong(iceP_p6);
            ostr.writeLong(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opFloatDoubleAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            float iceP_p1;
            double iceP_p2;
            iceP_p1 = istr.readFloat();
            iceP_p2 = istr.readDouble();
            istr.endEncapsulation();
            float iceP_p3;
            double iceP_p4;
            var ret = obj.opFloatDouble(iceP_p1, iceP_p2, out iceP_p3, out iceP_p4, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeFloat(iceP_p3);
            ostr.writeDouble(iceP_p4);
            ostr.writeDouble(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_p1;
            string iceP_p2;
            iceP_p1 = istr.readString();
            iceP_p2 = istr.readString();
            istr.endEncapsulation();
            string iceP_p3;
            var ret = obj.opString(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeString(iceP_p3);
            ostr.writeString(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMyEnumAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            MyEnum iceP_p1;
            iceP_p1 = (MyEnum)istr.readEnum(2);
            istr.endEncapsulation();
            MyEnum iceP_p2;
            var ret = obj.opMyEnum(iceP_p1, out iceP_p2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeEnum((int)iceP_p2, 2);
            ostr.writeEnum((int)ret, 2);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMyClassAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            MyClassPrx? iceP_p1;
            iceP_p1 = MyClassPrxHelper.read(istr);
            istr.endEncapsulation();
            MyClassPrx? iceP_p2;
            MyClassPrx? iceP_p3;
            var ret = obj.opMyClass(iceP_p1, out iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            MyClassPrxHelper.write(ostr, iceP_p2);
            MyClassPrxHelper.write(ostr, iceP_p3);
            MyClassPrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStructAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            Structure iceP_p1;
            Structure iceP_p2;
            iceP_p1 = new Structure(istr);
            iceP_p2 = new Structure(istr);
            istr.endEncapsulation();
            Structure iceP_p3;
            var ret = obj.opStruct(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            Structure.ice_write(ostr, iceP_p3);
            Structure.ice_write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_p1;
            byte[] iceP_p2;
            iceP_p1 = ByteSHelper.read(istr);
            iceP_p2 = ByteSHelper.read(istr);
            istr.endEncapsulation();
            byte[] iceP_p3;
            var ret = obj.opByteS(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ByteSHelper.write(ostr, iceP_p3);
            ByteSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBoolSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            bool[] iceP_p1;
            bool[] iceP_p2;
            iceP_p1 = BoolSHelper.read(istr);
            iceP_p2 = BoolSHelper.read(istr);
            istr.endEncapsulation();
            bool[] iceP_p3;
            var ret = obj.opBoolS(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            BoolSHelper.write(ostr, iceP_p3);
            BoolSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortIntLongSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            short[] iceP_p1;
            int[] iceP_p2;
            long[] iceP_p3;
            iceP_p1 = ShortSHelper.read(istr);
            iceP_p2 = IntSHelper.read(istr);
            iceP_p3 = LongSHelper.read(istr);
            istr.endEncapsulation();
            short[] iceP_p4;
            int[] iceP_p5;
            long[] iceP_p6;
            var ret = obj.opShortIntLongS(iceP_p1, iceP_p2, iceP_p3, out iceP_p4, out iceP_p5, out iceP_p6, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ShortSHelper.write(ostr, iceP_p4);
            IntSHelper.write(ostr, iceP_p5);
            LongSHelper.write(ostr, iceP_p6);
            LongSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opFloatDoubleSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            float[] iceP_p1;
            double[] iceP_p2;
            iceP_p1 = FloatSHelper.read(istr);
            iceP_p2 = DoubleSHelper.read(istr);
            istr.endEncapsulation();
            float[] iceP_p3;
            double[] iceP_p4;
            var ret = obj.opFloatDoubleS(iceP_p1, iceP_p2, out iceP_p3, out iceP_p4, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            FloatSHelper.write(ostr, iceP_p3);
            DoubleSHelper.write(ostr, iceP_p4);
            DoubleSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[] iceP_p1;
            string[] iceP_p2;
            iceP_p1 = StringSHelper.read(istr);
            iceP_p2 = StringSHelper.read(istr);
            istr.endEncapsulation();
            string[] iceP_p3;
            var ret = obj.opStringS(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            StringSHelper.write(ostr, iceP_p3);
            StringSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteSSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[][] iceP_p1;
            byte[][] iceP_p2;
            iceP_p1 = ByteSSHelper.read(istr);
            iceP_p2 = ByteSSHelper.read(istr);
            istr.endEncapsulation();
            byte[][] iceP_p3;
            var ret = obj.opByteSS(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ByteSSHelper.write(ostr, iceP_p3);
            ByteSSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBoolSSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            bool[][] iceP_p1;
            bool[][] iceP_p2;
            iceP_p1 = BoolSSHelper.read(istr);
            iceP_p2 = BoolSSHelper.read(istr);
            istr.endEncapsulation();
            bool[][] iceP_p3;
            var ret = obj.opBoolSS(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            BoolSSHelper.write(ostr, iceP_p3);
            BoolSSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortIntLongSSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            short[][] iceP_p1;
            int[][] iceP_p2;
            long[][] iceP_p3;
            iceP_p1 = ShortSSHelper.read(istr);
            iceP_p2 = IntSSHelper.read(istr);
            iceP_p3 = LongSSHelper.read(istr);
            istr.endEncapsulation();
            short[][] iceP_p4;
            int[][] iceP_p5;
            long[][] iceP_p6;
            var ret = obj.opShortIntLongSS(iceP_p1, iceP_p2, iceP_p3, out iceP_p4, out iceP_p5, out iceP_p6, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ShortSSHelper.write(ostr, iceP_p4);
            IntSSHelper.write(ostr, iceP_p5);
            LongSSHelper.write(ostr, iceP_p6);
            LongSSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opFloatDoubleSSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            float[][] iceP_p1;
            double[][] iceP_p2;
            iceP_p1 = FloatSSHelper.read(istr);
            iceP_p2 = DoubleSSHelper.read(istr);
            istr.endEncapsulation();
            float[][] iceP_p3;
            double[][] iceP_p4;
            var ret = obj.opFloatDoubleSS(iceP_p1, iceP_p2, out iceP_p3, out iceP_p4, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            FloatSSHelper.write(ostr, iceP_p3);
            DoubleSSHelper.write(ostr, iceP_p4);
            DoubleSSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringSSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[][] iceP_p1;
            string[][] iceP_p2;
            iceP_p1 = StringSSHelper.read(istr);
            iceP_p2 = StringSSHelper.read(istr);
            istr.endEncapsulation();
            string[][] iceP_p3;
            var ret = obj.opStringSS(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            StringSSHelper.write(ostr, iceP_p3);
            StringSSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteBoolDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<byte, bool> iceP_p1;
            global::System.Collections.Generic.Dictionary<byte, bool> iceP_p2;
            iceP_p1 = ByteBoolDHelper.read(istr);
            iceP_p2 = ByteBoolDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<byte, bool> iceP_p3;
            var ret = obj.opByteBoolD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ByteBoolDHelper.write(ostr, iceP_p3);
            ByteBoolDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortIntDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<short, int> iceP_p1;
            global::System.Collections.Generic.Dictionary<short, int> iceP_p2;
            iceP_p1 = ShortIntDHelper.read(istr);
            iceP_p2 = ShortIntDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<short, int> iceP_p3;
            var ret = obj.opShortIntD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ShortIntDHelper.write(ostr, iceP_p3);
            ShortIntDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLongFloatDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<long, float> iceP_p1;
            global::System.Collections.Generic.Dictionary<long, float> iceP_p2;
            iceP_p1 = LongFloatDHelper.read(istr);
            iceP_p2 = LongFloatDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<long, float> iceP_p3;
            var ret = obj.opLongFloatD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            LongFloatDHelper.write(ostr, iceP_p3);
            LongFloatDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringStringDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, string> iceP_p1;
            global::System.Collections.Generic.Dictionary<string, string> iceP_p2;
            iceP_p1 = StringStringDHelper.read(istr);
            iceP_p2 = StringStringDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<string, string> iceP_p3;
            var ret = obj.opStringStringD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            StringStringDHelper.write(ostr, iceP_p3);
            StringStringDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringMyEnumDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p1;
            global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p2;
            iceP_p1 = StringMyEnumDHelper.read(istr);
            iceP_p2 = StringMyEnumDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<string, MyEnum> iceP_p3;
            var ret = obj.opStringMyEnumD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            StringMyEnumDHelper.write(ostr, iceP_p3);
            StringMyEnumDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMyEnumStringDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p1;
            global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p2;
            iceP_p1 = MyEnumStringDHelper.read(istr);
            iceP_p2 = MyEnumStringDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<MyEnum, string> iceP_p3;
            var ret = obj.opMyEnumStringD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            MyEnumStringDHelper.write(ostr, iceP_p3);
            MyEnumStringDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteBoolDSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p1;
            global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p2;
            iceP_p1 = ByteBoolDSHelper.read(istr);
            iceP_p2 = ByteBoolDSHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<byte, bool>[] iceP_p3;
            var ret = obj.opByteBoolDS(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ByteBoolDSHelper.write(ostr, iceP_p3);
            ByteBoolDSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortIntDSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<short, int>[] iceP_p1;
            global::System.Collections.Generic.Dictionary<short, int>[] iceP_p2;
            iceP_p1 = ShortIntDSHelper.read(istr);
            iceP_p2 = ShortIntDSHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<short, int>[] iceP_p3;
            var ret = obj.opShortIntDS(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ShortIntDSHelper.write(ostr, iceP_p3);
            ShortIntDSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLongFloatDSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<long, float>[] iceP_p1;
            global::System.Collections.Generic.Dictionary<long, float>[] iceP_p2;
            iceP_p1 = LongFloatDSHelper.read(istr);
            iceP_p2 = LongFloatDSHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<long, float>[] iceP_p3;
            var ret = obj.opLongFloatDS(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            LongFloatDSHelper.write(ostr, iceP_p3);
            LongFloatDSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringStringDSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, string>[] iceP_p1;
            global::System.Collections.Generic.Dictionary<string, string>[] iceP_p2;
            iceP_p1 = StringStringDSHelper.read(istr);
            iceP_p2 = StringStringDSHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<string, string>[] iceP_p3;
            var ret = obj.opStringStringDS(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            StringStringDSHelper.write(ostr, iceP_p3);
            StringStringDSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringMyEnumDSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p1;
            global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p2;
            iceP_p1 = StringMyEnumDSHelper.read(istr);
            iceP_p2 = StringMyEnumDSHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<string, MyEnum>[] iceP_p3;
            var ret = obj.opStringMyEnumDS(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            StringMyEnumDSHelper.write(ostr, iceP_p3);
            StringMyEnumDSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMyEnumStringDSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p1;
            global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p2;
            iceP_p1 = MyEnumStringDSHelper.read(istr);
            iceP_p2 = MyEnumStringDSHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<MyEnum, string>[] iceP_p3;
            var ret = obj.opMyEnumStringDS(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            MyEnumStringDSHelper.write(ostr, iceP_p3);
            MyEnumStringDSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteByteSDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p1;
            global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p2;
            iceP_p1 = ByteByteSDHelper.read(istr);
            iceP_p2 = ByteByteSDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<byte, byte[]> iceP_p3;
            var ret = obj.opByteByteSD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ByteByteSDHelper.write(ostr, iceP_p3);
            ByteByteSDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBoolBoolSDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p1;
            global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p2;
            iceP_p1 = BoolBoolSDHelper.read(istr);
            iceP_p2 = BoolBoolSDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<bool, bool[]> iceP_p3;
            var ret = obj.opBoolBoolSD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            BoolBoolSDHelper.write(ostr, iceP_p3);
            BoolBoolSDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortShortSDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<short, short[]> iceP_p1;
            global::System.Collections.Generic.Dictionary<short, short[]> iceP_p2;
            iceP_p1 = ShortShortSDHelper.read(istr);
            iceP_p2 = ShortShortSDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<short, short[]> iceP_p3;
            var ret = obj.opShortShortSD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ShortShortSDHelper.write(ostr, iceP_p3);
            ShortShortSDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opIntIntSDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<int, int[]> iceP_p1;
            global::System.Collections.Generic.Dictionary<int, int[]> iceP_p2;
            iceP_p1 = IntIntSDHelper.read(istr);
            iceP_p2 = IntIntSDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<int, int[]> iceP_p3;
            var ret = obj.opIntIntSD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            IntIntSDHelper.write(ostr, iceP_p3);
            IntIntSDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLongLongSDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<long, long[]> iceP_p1;
            global::System.Collections.Generic.Dictionary<long, long[]> iceP_p2;
            iceP_p1 = LongLongSDHelper.read(istr);
            iceP_p2 = LongLongSDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<long, long[]> iceP_p3;
            var ret = obj.opLongLongSD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            LongLongSDHelper.write(ostr, iceP_p3);
            LongLongSDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringFloatSDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, float[]> iceP_p1;
            global::System.Collections.Generic.Dictionary<string, float[]> iceP_p2;
            iceP_p1 = StringFloatSDHelper.read(istr);
            iceP_p2 = StringFloatSDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<string, float[]> iceP_p3;
            var ret = obj.opStringFloatSD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            StringFloatSDHelper.write(ostr, iceP_p3);
            StringFloatSDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringDoubleSDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, double[]> iceP_p1;
            global::System.Collections.Generic.Dictionary<string, double[]> iceP_p2;
            iceP_p1 = StringDoubleSDHelper.read(istr);
            iceP_p2 = StringDoubleSDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<string, double[]> iceP_p3;
            var ret = obj.opStringDoubleSD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            StringDoubleSDHelper.write(ostr, iceP_p3);
            StringDoubleSDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringStringSDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, string[]> iceP_p1;
            global::System.Collections.Generic.Dictionary<string, string[]> iceP_p2;
            iceP_p1 = StringStringSDHelper.read(istr);
            iceP_p2 = StringStringSDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<string, string[]> iceP_p3;
            var ret = obj.opStringStringSD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            StringStringSDHelper.write(ostr, iceP_p3);
            StringStringSDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMyEnumMyEnumSDAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p1;
            global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p2;
            iceP_p1 = MyEnumMyEnumSDHelper.read(istr);
            iceP_p2 = MyEnumMyEnumSDHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<MyEnum, MyEnum[]> iceP_p3;
            var ret = obj.opMyEnumMyEnumSD(iceP_p1, iceP_p2, out iceP_p3, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            MyEnumMyEnumSDHelper.write(ostr, iceP_p3);
            MyEnumMyEnumSDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opIntSAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            int[] iceP_s;
            iceP_s = IntSHelper.read(istr);
            istr.endEncapsulation();
            var ret = obj.opIntS(iceP_s, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            IntSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opContextAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.opContext(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            StringStringDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opIdempotentAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.opIdempotent(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByte1Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte iceP_opByte1;
            iceP_opByte1 = istr.readByte();
            istr.endEncapsulation();
            var ret = obj.opByte1(iceP_opByte1, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeByte(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShort1Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            short iceP_opShort1;
            iceP_opShort1 = istr.readShort();
            istr.endEncapsulation();
            var ret = obj.opShort1(iceP_opShort1, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeShort(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opInt1Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            int iceP_opInt1;
            iceP_opInt1 = istr.readInt();
            istr.endEncapsulation();
            var ret = obj.opInt1(iceP_opInt1, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeInt(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLong1Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            long iceP_opLong1;
            iceP_opLong1 = istr.readLong();
            istr.endEncapsulation();
            var ret = obj.opLong1(iceP_opLong1, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeLong(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opFloat1Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            float iceP_opFloat1;
            iceP_opFloat1 = istr.readFloat();
            istr.endEncapsulation();
            var ret = obj.opFloat1(iceP_opFloat1, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeFloat(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opDouble1Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            double iceP_opDouble1;
            iceP_opDouble1 = istr.readDouble();
            istr.endEncapsulation();
            var ret = obj.opDouble1(iceP_opDouble1, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeDouble(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opString1Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string iceP_opString1;
            iceP_opString1 = istr.readString();
            istr.endEncapsulation();
            var ret = obj.opString1(iceP_opString1, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeString(ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringS1Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[] iceP_opStringS1;
            iceP_opStringS1 = StringSHelper.read(istr);
            istr.endEncapsulation();
            var ret = obj.opStringS1(iceP_opStringS1, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            StringSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteBoolD1Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<byte, bool> iceP_opByteBoolD1;
            iceP_opByteBoolD1 = ByteBoolDHelper.read(istr);
            istr.endEncapsulation();
            var ret = obj.opByteBoolD1(iceP_opByteBoolD1, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ByteBoolDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringS2Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[] iceP_stringS;
            iceP_stringS = StringSHelper.read(istr);
            istr.endEncapsulation();
            var ret = obj.opStringS2(iceP_stringS, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            StringSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteBoolD2Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<byte, bool> iceP_byteBoolD;
            iceP_byteBoolD = ByteBoolDHelper.read(istr);
            istr.endEncapsulation();
            var ret = obj.opByteBoolD2(iceP_byteBoolD, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ByteBoolDHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringLiteralsAsync(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.opStringLiterals(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            StringSHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMStruct1Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var result = obj.opMStruct1(request.current);
            return new (new Ice.OutgoingResponse(result.outputStream));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMStruct2Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            Structure iceP_p1;
            iceP_p1 = new Structure(istr);
            istr.endEncapsulation();
            var result = obj.opMStruct2(iceP_p1, request.current);
            return new (new Ice.OutgoingResponse(result.outputStream));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMSeq1Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var result = obj.opMSeq1(request.current);
            return new (new Ice.OutgoingResponse(result.outputStream));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMSeq2Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[] iceP_p1;
            iceP_p1 = StringSHelper.read(istr);
            istr.endEncapsulation();
            var result = obj.opMSeq2(iceP_p1, request.current);
            return new (new Ice.OutgoingResponse(result.outputStream));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMDict1Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var result = obj.opMDict1(request.current);
            return new (new Ice.OutgoingResponse(result.outputStream));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMDict2Async(
            MyClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, string> iceP_p1;
            iceP_p1 = StringStringDHelper.read(istr);
            istr.endEncapsulation();
            var result = obj.opMDict2(iceP_p1, request.current);
            return new (new Ice.OutgoingResponse(result.outputStream));
        }
    }

    public partial interface MyDerivedClass
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opDerivedAsync(
            MyDerivedClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.opDerived(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMyStruct1Async(
            MyDerivedClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            MyStruct1 iceP_s;
            iceP_s = new MyStruct1(istr);
            istr.endEncapsulation();
            var ret = obj.opMyStruct1(iceP_s, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            MyStruct1.ice_write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opMyClass1Async(
            MyDerivedClass obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            MyClass1? iceP_c = null;
            istr.readValue((MyClass1? v) => { iceP_c = v; });
            istr.readPendingValues();
            istr.endEncapsulation();
            var ret = obj.opMyClass1(iceP_c, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, Ice.FormatType.DefaultFormat);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }
}

namespace Test2
{
    public partial interface MyDerivedClass
    {
    }
}
