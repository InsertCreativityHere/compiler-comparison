//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test
{
    public abstract class ByteConst1
    {
        public const byte value = 10;
    }

    public abstract class ShortConst1
    {
        public const short value = 20;
    }

    public abstract class IntConst1
    {
        public const int value = 30;
    }

    public abstract class LongConst1
    {
        public const long value = 40L;
    }

    public abstract class ByteConst2
    {
        public const byte value = 126;
    }

    public abstract class ShortConst2
    {
        public const short value = 32766;
    }

    public abstract class IntConst2
    {
        public const int value = 2147483647;
    }

    public abstract class LongConst2
    {
        public const long value = 2147483646L;
    }

    public enum ByteEnum
    {
        benum1 = 0,
        benum2 = 1,
        benum3 = 10,
        benum4 = 11,
        benum5 = 20,
        benum6 = 21,
        benum7 = 30,
        benum8 = 31,
        benum9 = 40,
        benum10 = 41,
        benum11 = 126
    }

    public sealed class ByteEnumHelper
    {
        public static void write(Ice.OutputStream ostr, ByteEnum v)
        {
            ostr.writeEnum((int)v, 126);
        }

        public static ByteEnum read(Ice.InputStream istr)
        {
            ByteEnum v;
            v = (ByteEnum)istr.readEnum(126);
            return v;
        }
    }

    public enum ShortEnum
    {
        senum1 = 3,
        senum2 = 4,
        senum3 = 10,
        senum4 = 11,
        senum5 = 20,
        senum6 = 21,
        senum7 = 30,
        senum8 = 31,
        senum9 = 40,
        senum10 = 41,
        senum11 = 32766
    }

    public sealed class ShortEnumHelper
    {
        public static void write(Ice.OutputStream ostr, ShortEnum v)
        {
            ostr.writeEnum((int)v, 32766);
        }

        public static ShortEnum read(Ice.InputStream istr)
        {
            ShortEnum v;
            v = (ShortEnum)istr.readEnum(32766);
            return v;
        }
    }

    public enum IntEnum
    {
        ienum1 = 0,
        ienum2 = 1,
        ienum3 = 10,
        ienum4 = 11,
        ienum5 = 20,
        ienum6 = 21,
        ienum7 = 30,
        ienum8 = 31,
        ienum9 = 40,
        ienum10 = 41,
        ienum11 = 2147483647,
        ienum12 = 2147483646
    }

    public sealed class IntEnumHelper
    {
        public static void write(Ice.OutputStream ostr, IntEnum v)
        {
            ostr.writeEnum((int)v, 2147483647);
        }

        public static IntEnum read(Ice.InputStream istr)
        {
            IntEnum v;
            v = (IntEnum)istr.readEnum(2147483647);
            return v;
        }
    }

    public enum SimpleEnum
    {
        red,
        green,
        blue
    }

    public sealed class SimpleEnumHelper
    {
        public static void write(Ice.OutputStream ostr, SimpleEnum v)
        {
            ostr.writeEnum((int)v, 2);
        }

        public static SimpleEnum read(Ice.InputStream istr)
        {
            SimpleEnum v;
            v = (SimpleEnum)istr.readEnum(2);
            return v;
        }
    }

    [Ice.SliceTypeId("::Test::TestIntf")]
    public partial interface TestIntf : Ice.Object
    {
        ByteEnum opByte(ByteEnum b1, out ByteEnum b2, Ice.Current current);

        ShortEnum opShort(ShortEnum s1, out ShortEnum s2, Ice.Current current);

        IntEnum opInt(IntEnum i1, out IntEnum i2, Ice.Current current);

        SimpleEnum opSimple(SimpleEnum s1, out SimpleEnum s2, Ice.Current current);

        void shutdown(Ice.Current current);
    }
}

namespace Test
{
    public record struct TestIntf_OpByteResult(ByteEnum returnValue, ByteEnum b2);

    public record struct TestIntf_OpShortResult(ShortEnum returnValue, ShortEnum s2);

    public record struct TestIntf_OpIntResult(IntEnum returnValue, IntEnum i2);

    public record struct TestIntf_OpSimpleResult(SimpleEnum returnValue, SimpleEnum s2);
}

namespace Test
{
    public interface TestIntfPrx : Ice.ObjectPrx
    {
        ByteEnum opByte(ByteEnum b1, out ByteEnum b2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpByteResult> opByteAsync(ByteEnum b1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        ShortEnum opShort(ShortEnum s1, out ShortEnum s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpShortResult> opShortAsync(ShortEnum s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        IntEnum opInt(IntEnum i1, out IntEnum i2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpIntResult> opIntAsync(IntEnum i1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        SimpleEnum opSimple(SimpleEnum s1, out SimpleEnum s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpSimpleResult> opSimpleAsync(SimpleEnum s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    public sealed class TestIntfPrxHelper : Ice.ObjectPrxHelperBase, TestIntfPrx
    {
        public ByteEnum opByte(ByteEnum b1, out ByteEnum b2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteAsync(b1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                b2 = result_.b2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public ShortEnum opShort(ShortEnum s1, out ShortEnum s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public IntEnum opInt(IntEnum i1, out IntEnum i2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntAsync(i1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                i2 = result_.i2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public SimpleEnum opSimple(SimpleEnum s1, out SimpleEnum s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opSimpleAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteResult> opByteAsync(ByteEnum b1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteAsync(b1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteResult> _iceI_opByteAsync(ByteEnum iceP_b1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByte_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpByteResult>(progress, cancel);
            _iceI_opByte(iceP_b1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByte_name = "opByte";

        private void _iceI_opByte(ByteEnum iceP_b1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteResult>(completed);
            outAsync.invoke(
                _opByte_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_b1, 126);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpByteResult();
                    ret.b2 = (ByteEnum)istr.readEnum(126);
                    ret.returnValue = (ByteEnum)istr.readEnum(126);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpShortResult> opShortAsync(ShortEnum s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpShortResult> _iceI_opShortAsync(ShortEnum iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShort_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpShortResult>(progress, cancel);
            _iceI_opShort(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShort_name = "opShort";

        private void _iceI_opShort(ShortEnum iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpShortResult>(completed);
            outAsync.invoke(
                _opShort_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_s1, 32766);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpShortResult();
                    ret.s2 = (ShortEnum)istr.readEnum(32766);
                    ret.returnValue = (ShortEnum)istr.readEnum(32766);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpIntResult> opIntAsync(IntEnum i1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntAsync(i1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpIntResult> _iceI_opIntAsync(IntEnum iceP_i1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opInt_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpIntResult>(progress, cancel);
            _iceI_opInt(iceP_i1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opInt_name = "opInt";

        private void _iceI_opInt(IntEnum iceP_i1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpIntResult>(completed);
            outAsync.invoke(
                _opInt_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_i1, 2147483647);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpIntResult();
                    ret.i2 = (IntEnum)istr.readEnum(2147483647);
                    ret.returnValue = (IntEnum)istr.readEnum(2147483647);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpSimpleResult> opSimpleAsync(SimpleEnum s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSimpleAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpSimpleResult> _iceI_opSimpleAsync(SimpleEnum iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSimple_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpSimpleResult>(progress, cancel);
            _iceI_opSimple(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSimple_name = "opSimple";

        private void _iceI_opSimple(SimpleEnum iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpSimpleResult>(completed);
            outAsync.invoke(
                _opSimple_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_s1, 2);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpSimpleResult();
                    ret.s2 = (SimpleEnum)istr.readEnum(2);
                    ret.returnValue = (SimpleEnum)istr.readEnum(2);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public static TestIntfPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new TestIntfPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static TestIntfPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new TestIntfPrxHelper(b) : null;

        public static TestIntfPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new TestIntfPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public static string ice_staticId() => "::Test::TestIntf";

        public static void write(Ice.OutputStream ostr, TestIntfPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static TestIntfPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new TestIntfPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TestIntfPrxHelper(reference);

        private TestIntfPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private TestIntfPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test
{
    public abstract class TestIntfDisp_ : Ice.ObjectImpl, TestIntf
    {
        public abstract ByteEnum opByte(ByteEnum b1, out ByteEnum b2, Ice.Current current);

        public abstract ShortEnum opShort(ShortEnum s1, out ShortEnum s2, Ice.Current current);

        public abstract IntEnum opInt(IntEnum i1, out IntEnum i2, Ice.Current current);

        public abstract SimpleEnum opSimple(SimpleEnum s1, out SimpleEnum s2, Ice.Current current);

        public abstract void shutdown(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::TestIntf";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "opByte" => TestIntf.iceD_opByteAsync(this, request),
                "opShort" => TestIntf.iceD_opShortAsync(this, request),
                "opInt" => TestIntf.iceD_opIntAsync(this, request),
                "opSimple" => TestIntf.iceD_opSimpleAsync(this, request),
                "shutdown" => TestIntf.iceD_shutdownAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test
{
    public partial interface TestIntf
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            ByteEnum iceP_b1;
            iceP_b1 = (ByteEnum)istr.readEnum(126);
            istr.endEncapsulation();
            ByteEnum iceP_b2;
            var ret = obj.opByte(iceP_b1, out iceP_b2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeEnum((int)iceP_b2, 126);
            ostr.writeEnum((int)ret, 126);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            ShortEnum iceP_s1;
            iceP_s1 = (ShortEnum)istr.readEnum(32766);
            istr.endEncapsulation();
            ShortEnum iceP_s2;
            var ret = obj.opShort(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeEnum((int)iceP_s2, 32766);
            ostr.writeEnum((int)ret, 32766);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opIntAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            IntEnum iceP_i1;
            iceP_i1 = (IntEnum)istr.readEnum(2147483647);
            istr.endEncapsulation();
            IntEnum iceP_i2;
            var ret = obj.opInt(iceP_i1, out iceP_i2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeEnum((int)iceP_i2, 2147483647);
            ostr.writeEnum((int)ret, 2147483647);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSimpleAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            SimpleEnum iceP_s1;
            iceP_s1 = (SimpleEnum)istr.readEnum(2);
            istr.endEncapsulation();
            SimpleEnum iceP_s2;
            var ret = obj.opSimple(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeEnum((int)iceP_s2, 2);
            ostr.writeEnum((int)ret, 2);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.shutdown(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }
}
