// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Controller.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("Controller.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test
{
    namespace Common
    {
        public sealed class BoolSeqHelper
        {
            public static void write(Ice.OutputStream ostr, bool[] v)
            {
                ostr.writeBoolSeq(v);
            }

            public static bool[] read(Ice.InputStream istr)
            {
                bool[] v;
                v = istr.readBoolSeq();
                return v;
            }
        }

        public sealed class StringSeqHelper
        {
            public static void write(Ice.OutputStream ostr, string[] v)
            {
                ostr.writeStringSeq(v);
            }

            public static string[] read(Ice.InputStream istr)
            {
                string[] v;
                v = istr.readStringSeq();
                return v;
            }
        }

        [Ice.SliceTypeId("::Test::Common::Config")]
        public partial class Config : Ice.Value
        {
            public string? protocol;

            public bool? mx;

            public bool? serialize;

            public bool? compress;

            public bool? ipv6;

            public string[]? cprops;

            public string[]? sprops;

            partial void ice_initialize();

            public Config(string? protocol, bool? mx, bool? serialize, bool? compress, bool? ipv6, string[]? cprops, string[]? sprops)
            {
                this.protocol = protocol;
                this.mx = mx;
                this.serialize = serialize;
                this.compress = compress;
                this.ipv6 = ipv6;
                this.cprops = cprops;
                this.sprops = sprops;
                ice_initialize();
            }

            public Config()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::Common::Config";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeString(1, protocol);
                ostr_.writeBool(2, mx);
                ostr_.writeBool(3, serialize);
                ostr_.writeBool(4, compress);
                ostr_.writeBool(5, ipv6);
                ostr_.writeStringSeq(6, cprops);
                ostr_.writeStringSeq(7, sprops);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                protocol = istr_.readString(1);
                mx = istr_.readBool(2);
                serialize = istr_.readBool(3);
                compress = istr_.readBool(4);
                ipv6 = istr_.readBool(5);
                cprops = istr_.readStringSeq(6);
                sprops = istr_.readStringSeq(7);
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::Common::OptionOverrides")]
        public partial class OptionOverrides : Ice.Value
        {
            public string[]? protocol;

            public bool[]? mx;

            public bool[]? serialize;

            public bool[]? compress;

            public bool[]? ipv6;

            partial void ice_initialize();

            public OptionOverrides(string[]? protocol, bool[]? mx, bool[]? serialize, bool[]? compress, bool[]? ipv6)
            {
                this.protocol = protocol;
                this.mx = mx;
                this.serialize = serialize;
                this.compress = compress;
                this.ipv6 = ipv6;
                ice_initialize();
            }

            public OptionOverrides()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::Common::OptionOverrides";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeStringSeq(1, protocol);
                ostr_.writeBoolSeq(2, mx);
                ostr_.writeBoolSeq(3, serialize);
                ostr_.writeBoolSeq(4, compress);
                ostr_.writeBoolSeq(5, ipv6);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                protocol = istr_.readStringSeq(1);
                mx = istr_.readBoolSeq(2);
                serialize = istr_.readBoolSeq(3);
                compress = istr_.readBoolSeq(4);
                ipv6 = istr_.readBoolSeq(5);
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::Common::TestCaseNotExistException")]
        public partial class TestCaseNotExistException : Ice.UserException
        {
            public string reason = "";

            public TestCaseNotExistException(string reason)
            {
                global::System.ArgumentNullException.ThrowIfNull(reason);
                this.reason = reason;
            }

            public TestCaseNotExistException()
            {
            }

            public override string ice_id() => "::Test::Common::TestCaseNotExistException";

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::Common::TestCaseNotExistException", -1, true);
                ostr_.writeString(reason);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                reason = istr_.readString();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::Common::TestCaseFailedException")]
        public partial class TestCaseFailedException : Ice.UserException
        {
            public string output = "";

            public TestCaseFailedException(string output)
            {
                global::System.ArgumentNullException.ThrowIfNull(output);
                this.output = output;
            }

            public TestCaseFailedException()
            {
            }

            public override string ice_id() => "::Test::Common::TestCaseFailedException";

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::Common::TestCaseFailedException", -1, true);
                ostr_.writeString(output);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                output = istr_.readString();
                istr_.endSlice();
            }
        }

        public interface TestCasePrx : Ice.ObjectPrx
        {
            string startServerSide(Config? config, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<string> startServerSideAsync(Config? config, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            string stopServerSide(bool success, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<string> stopServerSideAsync(bool success, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            string runClientSide(string host, Config? config, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<string> runClientSideAsync(string host, Config? config, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void destroy(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task destroyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        public sealed class TestCasePrxHelper : Ice.ObjectPrxHelperBase, TestCasePrx
        {
            public string startServerSide(Config? config, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_startServerSideAsync(config, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public string stopServerSide(bool success, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_stopServerSideAsync(success, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public string runClientSide(string host, Config? config, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_runClientSideAsync(host, config, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void destroy(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_destroyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task<string> startServerSideAsync(Config? config, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_startServerSideAsync(config, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_startServerSideAsync(Config? iceP_config, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_startServerSide_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_startServerSide(iceP_config, context, synchronous, completed);
                return completed.Task;
            }

            private const string _startServerSide_name = "startServerSide";

            private void _iceI_startServerSide(Config? iceP_config, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _startServerSide_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_config);
                        ostr.writePendingValues();
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(TestCaseFailedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> stopServerSideAsync(bool success, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_stopServerSideAsync(success, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_stopServerSideAsync(bool iceP_success, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_stopServerSide_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_stopServerSide(iceP_success, context, synchronous, completed);
                return completed.Task;
            }

            private const string _stopServerSide_name = "stopServerSide";

            private void _iceI_stopServerSide(bool iceP_success, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _stopServerSide_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeBool(iceP_success);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(TestCaseFailedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> runClientSideAsync(string host, Config? config, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_runClientSideAsync(host, config, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_runClientSideAsync(string iceP_host, Config? iceP_config, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_runClientSide_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_runClientSide(iceP_host, iceP_config, context, synchronous, completed);
                return completed.Task;
            }

            private const string _runClientSide_name = "runClientSide";

            private void _iceI_runClientSide(string iceP_host, Config? iceP_config, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _runClientSide_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_host);
                        ostr.writeValue(iceP_config);
                        ostr.writePendingValues();
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(TestCaseFailedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task destroyAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_destroyAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_destroyAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_destroy(context, synchronous, completed);
                return completed.Task;
            }

            private const string _destroy_name = "destroy";

            private void _iceI_destroy(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _destroy_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public static TestCasePrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new TestCasePrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static TestCasePrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new TestCasePrxHelper(b) : null;

            public static TestCasePrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestCasePrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new TestCasePrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static TestCasePrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Common::TestCase"
            };

            public static string ice_staticId() => "::Test::Common::TestCase";

            public static void write(Ice.OutputStream ostr, TestCasePrx? v)
            {
                ostr.writeProxy(v);
            }

            public static TestCasePrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new TestCasePrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TestCasePrxHelper(reference);

            private TestCasePrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private TestCasePrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        public interface ControllerPrx : Ice.ObjectPrx
        {
            TestCasePrx? runTestCase(string mapping, string testsuite, string testcase, string cross, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<TestCasePrx?> runTestCaseAsync(string mapping, string testsuite, string testcase, string cross, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            OptionOverrides? getOptionOverrides(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<OptionOverrides?> getOptionOverridesAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            string[] getTestSuites(string mapping, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<string[]> getTestSuitesAsync(string mapping, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            string getHost(string protocol, bool ipv6, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<string> getHostAsync(string protocol, bool ipv6, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        public sealed class ControllerPrxHelper : Ice.ObjectPrxHelperBase, ControllerPrx
        {
            public TestCasePrx? runTestCase(string mapping, string testsuite, string testcase, string cross, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_runTestCaseAsync(mapping, testsuite, testcase, cross, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public OptionOverrides? getOptionOverrides(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getOptionOverridesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public string[] getTestSuites(string mapping, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getTestSuitesAsync(mapping, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public string getHost(string protocol, bool ipv6, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getHostAsync(protocol, ipv6, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task<TestCasePrx?> runTestCaseAsync(string mapping, string testsuite, string testcase, string cross, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_runTestCaseAsync(mapping, testsuite, testcase, cross, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<TestCasePrx?> _iceI_runTestCaseAsync(string iceP_mapping, string iceP_testsuite, string iceP_testcase, string iceP_cross, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_runTestCase_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<TestCasePrx?>(progress, cancel);
                _iceI_runTestCase(iceP_mapping, iceP_testsuite, iceP_testcase, iceP_cross, context, synchronous, completed);
                return completed.Task;
            }

            private const string _runTestCase_name = "runTestCase";

            private void _iceI_runTestCase(string iceP_mapping, string iceP_testsuite, string iceP_testcase, string iceP_cross, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<TestCasePrx?>(completed);
                outAsync.invoke(
                    _runTestCase_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_mapping);
                        ostr.writeString(iceP_testsuite);
                        ostr.writeString(iceP_testcase);
                        ostr.writeString(iceP_cross);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(TestCaseNotExistException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        TestCasePrx? ret;
                        ret = TestCasePrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<OptionOverrides?> getOptionOverridesAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getOptionOverridesAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<OptionOverrides?> _iceI_getOptionOverridesAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getOptionOverrides_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<OptionOverrides?>(progress, cancel);
                _iceI_getOptionOverrides(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getOptionOverrides_name = "getOptionOverrides";

            private void _iceI_getOptionOverrides(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<OptionOverrides?>(completed);
                outAsync.invoke(
                    _getOptionOverrides_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        OptionOverrides? ret = null;
                        istr.readValue((OptionOverrides? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> getTestSuitesAsync(string mapping, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getTestSuitesAsync(mapping, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_getTestSuitesAsync(string iceP_mapping, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getTestSuites_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_getTestSuites(iceP_mapping, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getTestSuites_name = "getTestSuites";

            private void _iceI_getTestSuites(string iceP_mapping, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _getTestSuites_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_mapping);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getHostAsync(string protocol, bool ipv6, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getHostAsync(protocol, ipv6, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getHostAsync(string iceP_protocol, bool iceP_ipv6, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getHost_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getHost(iceP_protocol, iceP_ipv6, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getHost_name = "getHost";

            private void _iceI_getHost(string iceP_protocol, bool iceP_ipv6, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getHost_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_protocol);
                        ostr.writeBool(iceP_ipv6);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public static ControllerPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new ControllerPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static ControllerPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new ControllerPrxHelper(b) : null;

            public static ControllerPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ControllerPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new ControllerPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ControllerPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Common::Controller"
            };

            public static string ice_staticId() => "::Test::Common::Controller";

            public static void write(Ice.OutputStream ostr, ControllerPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static ControllerPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new ControllerPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new ControllerPrxHelper(reference);

            private ControllerPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private ControllerPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        [Ice.SliceTypeId("::Test::Common::ProcessFailedException")]
        public partial class ProcessFailedException : Ice.UserException
        {
            public string reason = "";

            public ProcessFailedException(string reason)
            {
                global::System.ArgumentNullException.ThrowIfNull(reason);
                this.reason = reason;
            }

            public ProcessFailedException()
            {
            }

            public override string ice_id() => "::Test::Common::ProcessFailedException";

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::Common::ProcessFailedException", -1, true);
                ostr_.writeString(reason);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                reason = istr_.readString();
                istr_.endSlice();
            }
        }

        public interface ProcessPrx : Ice.ObjectPrx
        {
            void waitReady(int timeout, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task waitReadyAsync(int timeout, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            int waitSuccess(int timeout, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<int> waitSuccessAsync(int timeout, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            string terminate(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<string> terminateAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        public sealed class ProcessPrxHelper : Ice.ObjectPrxHelperBase, ProcessPrx
        {
            public void waitReady(int timeout, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_waitReadyAsync(timeout, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public int waitSuccess(int timeout, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_waitSuccessAsync(timeout, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public string terminate(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_terminateAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task waitReadyAsync(int timeout, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_waitReadyAsync(timeout, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_waitReadyAsync(int iceP_timeout, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_waitReady_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_waitReady(iceP_timeout, context, synchronous, completed);
                return completed.Task;
            }

            private const string _waitReady_name = "waitReady";

            private void _iceI_waitReady(int iceP_timeout, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _waitReady_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_timeout);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(ProcessFailedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<int> waitSuccessAsync(int timeout, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_waitSuccessAsync(timeout, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_waitSuccessAsync(int iceP_timeout, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_waitSuccess_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_waitSuccess(iceP_timeout, context, synchronous, completed);
                return completed.Task;
            }

            private const string _waitSuccess_name = "waitSuccess";

            private void _iceI_waitSuccess(int iceP_timeout, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _waitSuccess_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_timeout);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(ProcessFailedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> terminateAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_terminateAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_terminateAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_terminate_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_terminate(context, synchronous, completed);
                return completed.Task;
            }

            private const string _terminate_name = "terminate";

            private void _iceI_terminate(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _terminate_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public static ProcessPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new ProcessPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static ProcessPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new ProcessPrxHelper(b) : null;

            public static ProcessPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ProcessPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new ProcessPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ProcessPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Common::Process"
            };

            public static string ice_staticId() => "::Test::Common::Process";

            public static void write(Ice.OutputStream ostr, ProcessPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static ProcessPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new ProcessPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new ProcessPrxHelper(reference);

            private ProcessPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private ProcessPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        public interface ProcessControllerPrx : Ice.ObjectPrx
        {
            ProcessPrx? start(string testsuite, string exe, string[] args, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<ProcessPrx?> startAsync(string testsuite, string exe, string[] args, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            string getHost(string protocol, bool ipv6, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<string> getHostAsync(string protocol, bool ipv6, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        public sealed class ProcessControllerPrxHelper : Ice.ObjectPrxHelperBase, ProcessControllerPrx
        {
            public ProcessPrx? start(string testsuite, string exe, string[] args, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_startAsync(testsuite, exe, args, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public string getHost(string protocol, bool ipv6, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getHostAsync(protocol, ipv6, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task<ProcessPrx?> startAsync(string testsuite, string exe, string[] args, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_startAsync(testsuite, exe, args, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<ProcessPrx?> _iceI_startAsync(string iceP_testsuite, string iceP_exe, string[] iceP_args, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_start_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<ProcessPrx?>(progress, cancel);
                _iceI_start(iceP_testsuite, iceP_exe, iceP_args, context, synchronous, completed);
                return completed.Task;
            }

            private const string _start_name = "start";

            private void _iceI_start(string iceP_testsuite, string iceP_exe, string[] iceP_args, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<ProcessPrx?>(completed);
                outAsync.invoke(
                    _start_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_testsuite);
                        ostr.writeString(iceP_exe);
                        StringSeqHelper.write(ostr, iceP_args);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(ProcessFailedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        ProcessPrx? ret;
                        ret = ProcessPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getHostAsync(string protocol, bool ipv6, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getHostAsync(protocol, ipv6, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getHostAsync(string iceP_protocol, bool iceP_ipv6, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getHost_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getHost(iceP_protocol, iceP_ipv6, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getHost_name = "getHost";

            private void _iceI_getHost(string iceP_protocol, bool iceP_ipv6, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getHost_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_protocol);
                        ostr.writeBool(iceP_ipv6);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public static ProcessControllerPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new ProcessControllerPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static ProcessControllerPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new ProcessControllerPrxHelper(b) : null;

            public static ProcessControllerPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ProcessControllerPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new ProcessControllerPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ProcessControllerPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Common::ProcessController"
            };

            public static string ice_staticId() => "::Test::Common::ProcessController";

            public static void write(Ice.OutputStream ostr, ProcessControllerPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static ProcessControllerPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new ProcessControllerPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new ProcessControllerPrxHelper(reference);

            private ProcessControllerPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private ProcessControllerPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        public interface BrowserProcessControllerPrx : ProcessControllerPrx
        {
            void redirect(string url, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task redirectAsync(string url, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        public sealed class BrowserProcessControllerPrxHelper : Ice.ObjectPrxHelperBase, BrowserProcessControllerPrx
        {
            public ProcessPrx? start(string testsuite, string exe, string[] args, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_startAsync(testsuite, exe, args, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public string getHost(string protocol, bool ipv6, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_getHostAsync(protocol, ipv6, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void redirect(string url, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_redirectAsync(url, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task<ProcessPrx?> startAsync(string testsuite, string exe, string[] args, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_startAsync(testsuite, exe, args, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<ProcessPrx?> _iceI_startAsync(string iceP_testsuite, string iceP_exe, string[] iceP_args, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_start_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<ProcessPrx?>(progress, cancel);
                _iceI_start(iceP_testsuite, iceP_exe, iceP_args, context, synchronous, completed);
                return completed.Task;
            }

            private const string _start_name = "start";

            private void _iceI_start(string iceP_testsuite, string iceP_exe, string[] iceP_args, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<ProcessPrx?>(completed);
                outAsync.invoke(
                    _start_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_testsuite);
                        ostr.writeString(iceP_exe);
                        StringSeqHelper.write(ostr, iceP_args);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(ProcessFailedException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        ProcessPrx? ret;
                        ret = ProcessPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getHostAsync(string protocol, bool ipv6, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_getHostAsync(protocol, ipv6, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getHostAsync(string iceP_protocol, bool iceP_ipv6, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getHost_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getHost(iceP_protocol, iceP_ipv6, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getHost_name = "getHost";

            private void _iceI_getHost(string iceP_protocol, bool iceP_ipv6, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getHost_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_protocol);
                        ostr.writeBool(iceP_ipv6);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task redirectAsync(string url, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_redirectAsync(url, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_redirectAsync(string iceP_url, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_redirect(iceP_url, context, synchronous, completed);
                return completed.Task;
            }

            private const string _redirect_name = "redirect";

            private void _iceI_redirect(string iceP_url, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _redirect_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_url);
                    });
            }

            public static BrowserProcessControllerPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new BrowserProcessControllerPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static BrowserProcessControllerPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new BrowserProcessControllerPrxHelper(b) : null;

            public static BrowserProcessControllerPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static BrowserProcessControllerPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new BrowserProcessControllerPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static BrowserProcessControllerPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Common::BrowserProcessController",
                "::Test::Common::ProcessController"
            };

            public static string ice_staticId() => "::Test::Common::BrowserProcessController";

            public static void write(Ice.OutputStream ostr, BrowserProcessControllerPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static BrowserProcessControllerPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new BrowserProcessControllerPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new BrowserProcessControllerPrxHelper(reference);

            private BrowserProcessControllerPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private BrowserProcessControllerPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        public interface ProcessControllerRegistryPrx : Ice.ObjectPrx
        {
            void setProcessController(ProcessControllerPrx? controller, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task setProcessControllerAsync(ProcessControllerPrx? controller, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        public sealed class ProcessControllerRegistryPrxHelper : Ice.ObjectPrxHelperBase, ProcessControllerRegistryPrx
        {
            public void setProcessController(ProcessControllerPrx? controller, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_setProcessControllerAsync(controller, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task setProcessControllerAsync(ProcessControllerPrx? controller, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_setProcessControllerAsync(controller, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setProcessControllerAsync(ProcessControllerPrx? iceP_controller, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setProcessController(iceP_controller, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setProcessController_name = "setProcessController";

            private void _iceI_setProcessController(ProcessControllerPrx? iceP_controller, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setProcessController_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ProcessControllerPrxHelper.write(ostr, iceP_controller);
                    });
            }

            public static ProcessControllerRegistryPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new ProcessControllerRegistryPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static ProcessControllerRegistryPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new ProcessControllerRegistryPrxHelper(b) : null;

            public static ProcessControllerRegistryPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ProcessControllerRegistryPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new ProcessControllerRegistryPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ProcessControllerRegistryPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Common::ProcessControllerRegistry"
            };

            public static string ice_staticId() => "::Test::Common::ProcessControllerRegistry";

            public static void write(Ice.OutputStream ostr, ProcessControllerRegistryPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static ProcessControllerRegistryPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new ProcessControllerRegistryPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new ProcessControllerRegistryPrxHelper(reference);

            private ProcessControllerRegistryPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private ProcessControllerRegistryPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }
}

namespace Test
{
    namespace Common
    {
        [Ice.SliceTypeId("::Test::Common::TestCase")]
        public partial interface TestCase : Ice.Object
        {
            string startServerSide(Config? config, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_startServerSideAsync(
                TestCase obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                Config? iceP_config = null;
                istr.readValue((Config? v) => { iceP_config = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                var ret = obj.startServerSide(iceP_config, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeString(ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            string stopServerSide(bool success, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_stopServerSideAsync(
                TestCase obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                bool iceP_success;
                iceP_success = istr.readBool();
                istr.endEncapsulation();
                var ret = obj.stopServerSide(iceP_success, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeString(ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            string runClientSide(string host, Config? config, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_runClientSideAsync(
                TestCase obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                string iceP_host;
                Config? iceP_config = null;
                iceP_host = istr.readString();
                istr.readValue((Config? v) => { iceP_config = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                var ret = obj.runClientSide(iceP_host, iceP_config, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeString(ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            void destroy(Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_destroyAsync(
                TestCase obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.destroy(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }

        public abstract class TestCaseDisp_ : Ice.ObjectImpl, TestCase
        {
            public abstract string startServerSide(Config? config, Ice.Current current);

            public abstract string stopServerSide(bool success, Ice.Current current);

            public abstract string runClientSide(string host, Config? config, Ice.Current current);

            public abstract void destroy(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Common::TestCase";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "startServerSide" => TestCase.iceD_startServerSideAsync(this, request),
                    "stopServerSide" => TestCase.iceD_stopServerSideAsync(this, request),
                    "runClientSide" => TestCase.iceD_runClientSideAsync(this, request),
                    "destroy" => TestCase.iceD_destroyAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }

        [Ice.SliceTypeId("::Test::Common::Controller")]
        public partial interface Controller : Ice.Object
        {
            TestCasePrx? runTestCase(string mapping, string testsuite, string testcase, string cross, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_runTestCaseAsync(
                Controller obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                string iceP_mapping;
                string iceP_testsuite;
                string iceP_testcase;
                string iceP_cross;
                iceP_mapping = istr.readString();
                iceP_testsuite = istr.readString();
                iceP_testcase = istr.readString();
                iceP_cross = istr.readString();
                istr.endEncapsulation();
                var ret = obj.runTestCase(iceP_mapping, iceP_testsuite, iceP_testcase, iceP_cross, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                TestCasePrxHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            OptionOverrides? getOptionOverrides(Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getOptionOverridesAsync(
                Controller obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.getOptionOverrides(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            string[] getTestSuites(string mapping, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getTestSuitesAsync(
                Controller obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                string iceP_mapping;
                iceP_mapping = istr.readString();
                istr.endEncapsulation();
                var ret = obj.getTestSuites(iceP_mapping, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                StringSeqHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            string getHost(string protocol, bool ipv6, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getHostAsync(
                Controller obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                string iceP_protocol;
                bool iceP_ipv6;
                iceP_protocol = istr.readString();
                iceP_ipv6 = istr.readBool();
                istr.endEncapsulation();
                var ret = obj.getHost(iceP_protocol, iceP_ipv6, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeString(ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }
        }

        public abstract class ControllerDisp_ : Ice.ObjectImpl, Controller
        {
            public abstract TestCasePrx? runTestCase(string mapping, string testsuite, string testcase, string cross, Ice.Current current);

            public abstract OptionOverrides? getOptionOverrides(Ice.Current current);

            public abstract string[] getTestSuites(string mapping, Ice.Current current);

            public abstract string getHost(string protocol, bool ipv6, Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Common::Controller";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "runTestCase" => Controller.iceD_runTestCaseAsync(this, request),
                    "getOptionOverrides" => Controller.iceD_getOptionOverridesAsync(this, request),
                    "getTestSuites" => Controller.iceD_getTestSuitesAsync(this, request),
                    "getHost" => Controller.iceD_getHostAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }

        [Ice.SliceTypeId("::Test::Common::Process")]
        public partial interface Process : Ice.Object
        {
            void waitReady(int timeout, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_waitReadyAsync(
                Process obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_timeout;
                iceP_timeout = istr.readInt();
                istr.endEncapsulation();
                obj.waitReady(iceP_timeout, request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }

            int waitSuccess(int timeout, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_waitSuccessAsync(
                Process obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int iceP_timeout;
                iceP_timeout = istr.readInt();
                istr.endEncapsulation();
                var ret = obj.waitSuccess(iceP_timeout, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeInt(ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            string terminate(Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_terminateAsync(
                Process obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.terminate(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeString(ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }
        }

        public abstract class ProcessDisp_ : Ice.ObjectImpl, Process
        {
            public abstract void waitReady(int timeout, Ice.Current current);

            public abstract int waitSuccess(int timeout, Ice.Current current);

            public abstract string terminate(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Common::Process";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "waitReady" => Process.iceD_waitReadyAsync(this, request),
                    "waitSuccess" => Process.iceD_waitSuccessAsync(this, request),
                    "terminate" => Process.iceD_terminateAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }

        [Ice.SliceTypeId("::Test::Common::ProcessController")]
        public partial interface ProcessController : Ice.Object
        {
            ProcessPrx? start(string testsuite, string exe, string[] args, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_startAsync(
                ProcessController obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                string iceP_testsuite;
                string iceP_exe;
                string[] iceP_args;
                iceP_testsuite = istr.readString();
                iceP_exe = istr.readString();
                iceP_args = StringSeqHelper.read(istr);
                istr.endEncapsulation();
                var ret = obj.start(iceP_testsuite, iceP_exe, iceP_args, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ProcessPrxHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            string getHost(string protocol, bool ipv6, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_getHostAsync(
                ProcessController obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                string iceP_protocol;
                bool iceP_ipv6;
                iceP_protocol = istr.readString();
                iceP_ipv6 = istr.readBool();
                istr.endEncapsulation();
                var ret = obj.getHost(iceP_protocol, iceP_ipv6, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeString(ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }
        }

        public abstract class ProcessControllerDisp_ : Ice.ObjectImpl, ProcessController
        {
            public abstract ProcessPrx? start(string testsuite, string exe, string[] args, Ice.Current current);

            public abstract string getHost(string protocol, bool ipv6, Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Common::ProcessController";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "start" => ProcessController.iceD_startAsync(this, request),
                    "getHost" => ProcessController.iceD_getHostAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }

        [Ice.SliceTypeId("::Test::Common::BrowserProcessController")]
        public partial interface BrowserProcessController : ProcessController
        {
            void redirect(string url, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_redirectAsync(
                BrowserProcessController obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                string iceP_url;
                iceP_url = istr.readString();
                istr.endEncapsulation();
                obj.redirect(iceP_url, request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }

        public abstract class BrowserProcessControllerDisp_ : Ice.ObjectImpl, BrowserProcessController
        {
            public abstract ProcessPrx? start(string testsuite, string exe, string[] args, Ice.Current current);

            public abstract string getHost(string protocol, bool ipv6, Ice.Current current);

            public abstract void redirect(string url, Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Common::BrowserProcessController";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "start" => ProcessController.iceD_startAsync(this, request),
                    "getHost" => ProcessController.iceD_getHostAsync(this, request),
                    "redirect" => BrowserProcessController.iceD_redirectAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }

        [Ice.SliceTypeId("::Test::Common::ProcessControllerRegistry")]
        public partial interface ProcessControllerRegistry : Ice.Object
        {
            void setProcessController(ProcessControllerPrx? controller, Ice.Current current);

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_setProcessControllerAsync(
                ProcessControllerRegistry obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                ProcessControllerPrx? iceP_controller;
                iceP_controller = ProcessControllerPrxHelper.read(istr);
                istr.endEncapsulation();
                obj.setProcessController(iceP_controller, request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }

        public abstract class ProcessControllerRegistryDisp_ : Ice.ObjectImpl, ProcessControllerRegistry
        {
            public abstract void setProcessController(ProcessControllerPrx? controller, Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Common::ProcessControllerRegistry";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "setProcessController" => ProcessControllerRegistry.iceD_setProcessControllerAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}
