//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Initial : global::Ice.Object, InitialOperations_
    {
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getTest1C2AsC1(global::Test1.C1 ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getTest1C2AsC2(global::Test1.C2 ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_throwTest1E2AsE1();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_throwTest1E2AsE2();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_throwTest1Def();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getTest2C2AsC1(global::Test2.C1 ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getTest2C2AsC2(global::Test2.C2 ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_throwTest2E2AsE1();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_throwTest2E2AsE2();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getTest3C2AsC1(global::Test3.C1 ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getTest3C2AsC2(global::Test3.C2 ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_throwTest3E2AsE1();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_throwTest3E2AsE2();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_shutdown();
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface InitialPrx : global::Ice.ObjectPrx
    {
        global::Test1.C1 getTest1C2AsC1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::Test1.C1> getTest1C2AsC1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getTest1C2AsC1> begin_getTest1C2AsC1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getTest1C2AsC1(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getTest1C2AsC1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::Test1.C1 end_getTest1C2AsC1(global::Ice.AsyncResult asyncResult);

        global::Test1.C2 getTest1C2AsC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::Test1.C2> getTest1C2AsC2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getTest1C2AsC2> begin_getTest1C2AsC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getTest1C2AsC2(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getTest1C2AsC2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::Test1.C2 end_getTest1C2AsC2(global::Ice.AsyncResult asyncResult);

        void throwTest1E2AsE1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwTest1E2AsE1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_throwTest1E2AsE1> begin_throwTest1E2AsE1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_throwTest1E2AsE1(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_throwTest1E2AsE1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_throwTest1E2AsE1(global::Ice.AsyncResult asyncResult);

        void throwTest1E2AsE2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwTest1E2AsE2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_throwTest1E2AsE2> begin_throwTest1E2AsE2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_throwTest1E2AsE2(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_throwTest1E2AsE2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_throwTest1E2AsE2(global::Ice.AsyncResult asyncResult);

        void throwTest1Def(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwTest1DefAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_throwTest1Def> begin_throwTest1Def(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_throwTest1Def(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_throwTest1Def(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_throwTest1Def(global::Ice.AsyncResult asyncResult);

        global::Test2.C1 getTest2C2AsC1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::Test2.C1> getTest2C2AsC1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getTest2C2AsC1> begin_getTest2C2AsC1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getTest2C2AsC1(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getTest2C2AsC1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::Test2.C1 end_getTest2C2AsC1(global::Ice.AsyncResult asyncResult);

        global::Test2.C2 getTest2C2AsC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::Test2.C2> getTest2C2AsC2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getTest2C2AsC2> begin_getTest2C2AsC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getTest2C2AsC2(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getTest2C2AsC2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::Test2.C2 end_getTest2C2AsC2(global::Ice.AsyncResult asyncResult);

        void throwTest2E2AsE1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwTest2E2AsE1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_throwTest2E2AsE1> begin_throwTest2E2AsE1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_throwTest2E2AsE1(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_throwTest2E2AsE1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_throwTest2E2AsE1(global::Ice.AsyncResult asyncResult);

        void throwTest2E2AsE2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwTest2E2AsE2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_throwTest2E2AsE2> begin_throwTest2E2AsE2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_throwTest2E2AsE2(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_throwTest2E2AsE2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_throwTest2E2AsE2(global::Ice.AsyncResult asyncResult);

        global::Test3.C1 getTest3C2AsC1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::Test3.C1> getTest3C2AsC1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getTest3C2AsC1> begin_getTest3C2AsC1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getTest3C2AsC1(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getTest3C2AsC1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::Test3.C1 end_getTest3C2AsC1(global::Ice.AsyncResult asyncResult);

        global::Test3.C2 getTest3C2AsC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::Test3.C2> getTest3C2AsC2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getTest3C2AsC2> begin_getTest3C2AsC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getTest3C2AsC2(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getTest3C2AsC2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::Test3.C2 end_getTest3C2AsC2(global::Ice.AsyncResult asyncResult);

        void throwTest3E2AsE1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwTest3E2AsE1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_throwTest3E2AsE1> begin_throwTest3E2AsE1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_throwTest3E2AsE1(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_throwTest3E2AsE1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_throwTest3E2AsE1(global::Ice.AsyncResult asyncResult);

        void throwTest3E2AsE2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwTest3E2AsE2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_throwTest3E2AsE2> begin_throwTest3E2AsE2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_throwTest3E2AsE2(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_throwTest3E2AsE2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_throwTest3E2AsE2(global::Ice.AsyncResult asyncResult);

        void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_shutdown(global::Ice.AsyncResult asyncResult);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface InitialOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Test1.C1 getTest1C2AsC1(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Test1.C2 getTest1C2AsC2(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwTest1E2AsE1(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwTest1E2AsE2(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwTest1Def(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Test2.C1 getTest2C2AsC1(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Test2.C2 getTest2C2AsC2(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwTest2E2AsE1(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwTest2E2AsE2(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Test3.C1 getTest3C2AsC1(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Test3.C2 getTest3C2AsC2(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwTest3E2AsE1(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwTest3E2AsE2(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void shutdown(global::Ice.Current current = null);
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class InitialPrxHelper : global::Ice.ObjectPrxHelperBase, InitialPrx
    {
        public InitialPrxHelper()
        {
        }

        #region Synchronous operations

        public global::Test1.C1 getTest1C2AsC1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getTest1C2AsC1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Test1.C2 getTest1C2AsC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getTest1C2AsC2Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwTest1E2AsE1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwTest1E2AsE1Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwTest1E2AsE2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwTest1E2AsE2Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwTest1Def(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwTest1DefAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Test2.C1 getTest2C2AsC1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getTest2C2AsC1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Test2.C2 getTest2C2AsC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getTest2C2AsC2Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwTest2E2AsE1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwTest2E2AsE1Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwTest2E2AsE2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwTest2E2AsE2Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Test3.C1 getTest3C2AsC1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getTest3C2AsC1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Test3.C2 getTest3C2AsC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getTest3C2AsC2Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwTest3E2AsE1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwTest3E2AsE1Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwTest3E2AsE2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwTest3E2AsE2Async(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<global::Test1.C1> getTest1C2AsC1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getTest1C2AsC1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test1.C1> _iceI_getTest1C2AsC1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTest1C2AsC1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Test1.C1>(progress, cancel);
            _iceI_getTest1C2AsC1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTest1C2AsC1_name = "getTest1C2AsC1";

        private void _iceI_getTest1C2AsC1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test1.C1>(completed);
            outAsync.invoke(
                _getTest1C2AsC1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Test1.C1 ret = null;
                    istr.readValue((global::Test1.C1 v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test1.C2> getTest1C2AsC2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getTest1C2AsC2Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test1.C2> _iceI_getTest1C2AsC2Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTest1C2AsC2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Test1.C2>(progress, cancel);
            _iceI_getTest1C2AsC2(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTest1C2AsC2_name = "getTest1C2AsC2";

        private void _iceI_getTest1C2AsC2(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test1.C2>(completed);
            outAsync.invoke(
                _getTest1C2AsC2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Test1.C2 ret = null;
                    istr.readValue((global::Test1.C2 v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task throwTest1E2AsE1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwTest1E2AsE1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwTest1E2AsE1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwTest1E2AsE1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwTest1E2AsE1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwTest1E2AsE1_name = "throwTest1E2AsE1";

        private void _iceI_throwTest1E2AsE1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwTest1E2AsE1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Test1.E1)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwTest1E2AsE2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwTest1E2AsE2Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwTest1E2AsE2Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwTest1E2AsE2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwTest1E2AsE2(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwTest1E2AsE2_name = "throwTest1E2AsE2";

        private void _iceI_throwTest1E2AsE2(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwTest1E2AsE2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Test1.E2)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwTest1DefAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwTest1DefAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwTest1DefAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwTest1Def_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwTest1Def(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwTest1Def_name = "throwTest1Def";

        private void _iceI_throwTest1Def(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwTest1Def_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Test1.def)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<global::Test2.C1> getTest2C2AsC1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getTest2C2AsC1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test2.C1> _iceI_getTest2C2AsC1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTest2C2AsC1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Test2.C1>(progress, cancel);
            _iceI_getTest2C2AsC1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTest2C2AsC1_name = "getTest2C2AsC1";

        private void _iceI_getTest2C2AsC1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test2.C1>(completed);
            outAsync.invoke(
                _getTest2C2AsC1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Test2.C1 ret = null;
                    istr.readValue((global::Test2.C1 v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test2.C2> getTest2C2AsC2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getTest2C2AsC2Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test2.C2> _iceI_getTest2C2AsC2Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTest2C2AsC2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Test2.C2>(progress, cancel);
            _iceI_getTest2C2AsC2(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTest2C2AsC2_name = "getTest2C2AsC2";

        private void _iceI_getTest2C2AsC2(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test2.C2>(completed);
            outAsync.invoke(
                _getTest2C2AsC2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Test2.C2 ret = null;
                    istr.readValue((global::Test2.C2 v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task throwTest2E2AsE1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwTest2E2AsE1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwTest2E2AsE1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwTest2E2AsE1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwTest2E2AsE1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwTest2E2AsE1_name = "throwTest2E2AsE1";

        private void _iceI_throwTest2E2AsE1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwTest2E2AsE1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Test2.E1)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwTest2E2AsE2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwTest2E2AsE2Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwTest2E2AsE2Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwTest2E2AsE2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwTest2E2AsE2(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwTest2E2AsE2_name = "throwTest2E2AsE2";

        private void _iceI_throwTest2E2AsE2(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwTest2E2AsE2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Test2.E2)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<global::Test3.C1> getTest3C2AsC1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getTest3C2AsC1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test3.C1> _iceI_getTest3C2AsC1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTest3C2AsC1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Test3.C1>(progress, cancel);
            _iceI_getTest3C2AsC1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTest3C2AsC1_name = "getTest3C2AsC1";

        private void _iceI_getTest3C2AsC1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test3.C1>(completed);
            outAsync.invoke(
                _getTest3C2AsC1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Test3.C1 ret = null;
                    istr.readValue((global::Test3.C1 v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test3.C2> getTest3C2AsC2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getTest3C2AsC2Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test3.C2> _iceI_getTest3C2AsC2Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTest3C2AsC2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Test3.C2>(progress, cancel);
            _iceI_getTest3C2AsC2(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTest3C2AsC2_name = "getTest3C2AsC2";

        private void _iceI_getTest3C2AsC2(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test3.C2>(completed);
            outAsync.invoke(
                _getTest3C2AsC2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Test3.C2 ret = null;
                    istr.readValue((global::Test3.C2 v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task throwTest3E2AsE1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwTest3E2AsE1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwTest3E2AsE1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwTest3E2AsE1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwTest3E2AsE1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwTest3E2AsE1_name = "throwTest3E2AsE1";

        private void _iceI_throwTest3E2AsE1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwTest3E2AsE1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Test3.E1)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwTest3E2AsE2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwTest3E2AsE2Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwTest3E2AsE2Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwTest3E2AsE2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwTest3E2AsE2(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwTest3E2AsE2_name = "throwTest3E2AsE2";

        private void _iceI_throwTest3E2AsE2(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwTest3E2AsE2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Test3.E2)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Initial_getTest1C2AsC1> begin_getTest1C2AsC1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getTest1C2AsC1(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getTest1C2AsC1(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTest1C2AsC1(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getTest1C2AsC1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTest1C2AsC1(context, callback, cookie, false);
        }

        public global::Test1.C1 end_getTest1C2AsC1(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getTest1C2AsC1_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Test1.C1>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getTest1C2AsC1> begin_getTest1C2AsC1(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getTest1C2AsC1_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getTest1C2AsC1, global::Test1.C1>(
                (Callback_Initial_getTest1C2AsC1 cb, global::Test1.C1 ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getTest1C2AsC1_name, cookie, completedCallback);
            _iceI_getTest1C2AsC1(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getTest1C2AsC2> begin_getTest1C2AsC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getTest1C2AsC2(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getTest1C2AsC2(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTest1C2AsC2(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getTest1C2AsC2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTest1C2AsC2(context, callback, cookie, false);
        }

        public global::Test1.C2 end_getTest1C2AsC2(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getTest1C2AsC2_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Test1.C2>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getTest1C2AsC2> begin_getTest1C2AsC2(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getTest1C2AsC2_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getTest1C2AsC2, global::Test1.C2>(
                (Callback_Initial_getTest1C2AsC2 cb, global::Test1.C2 ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getTest1C2AsC2_name, cookie, completedCallback);
            _iceI_getTest1C2AsC2(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_throwTest1E2AsE1> begin_throwTest1E2AsE1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_throwTest1E2AsE1(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_throwTest1E2AsE1(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest1E2AsE1(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_throwTest1E2AsE1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest1E2AsE1(context, callback, cookie, false);
        }

        public void end_throwTest1E2AsE1(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwTest1E2AsE1_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_throwTest1E2AsE1> begin_throwTest1E2AsE1(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_throwTest1E2AsE1_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_throwTest1E2AsE1, object>(
                (Callback_Initial_throwTest1E2AsE1 cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _throwTest1E2AsE1_name, cookie, completedCallback);
            _iceI_throwTest1E2AsE1(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_throwTest1E2AsE2> begin_throwTest1E2AsE2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_throwTest1E2AsE2(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_throwTest1E2AsE2(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest1E2AsE2(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_throwTest1E2AsE2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest1E2AsE2(context, callback, cookie, false);
        }

        public void end_throwTest1E2AsE2(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwTest1E2AsE2_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_throwTest1E2AsE2> begin_throwTest1E2AsE2(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_throwTest1E2AsE2_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_throwTest1E2AsE2, object>(
                (Callback_Initial_throwTest1E2AsE2 cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _throwTest1E2AsE2_name, cookie, completedCallback);
            _iceI_throwTest1E2AsE2(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_throwTest1Def> begin_throwTest1Def(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_throwTest1Def(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_throwTest1Def(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest1Def(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_throwTest1Def(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest1Def(context, callback, cookie, false);
        }

        public void end_throwTest1Def(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwTest1Def_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_throwTest1Def> begin_throwTest1Def(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_throwTest1Def_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_throwTest1Def, object>(
                (Callback_Initial_throwTest1Def cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _throwTest1Def_name, cookie, completedCallback);
            _iceI_throwTest1Def(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getTest2C2AsC1> begin_getTest2C2AsC1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getTest2C2AsC1(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getTest2C2AsC1(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTest2C2AsC1(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getTest2C2AsC1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTest2C2AsC1(context, callback, cookie, false);
        }

        public global::Test2.C1 end_getTest2C2AsC1(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getTest2C2AsC1_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Test2.C1>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getTest2C2AsC1> begin_getTest2C2AsC1(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getTest2C2AsC1_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getTest2C2AsC1, global::Test2.C1>(
                (Callback_Initial_getTest2C2AsC1 cb, global::Test2.C1 ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getTest2C2AsC1_name, cookie, completedCallback);
            _iceI_getTest2C2AsC1(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getTest2C2AsC2> begin_getTest2C2AsC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getTest2C2AsC2(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getTest2C2AsC2(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTest2C2AsC2(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getTest2C2AsC2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTest2C2AsC2(context, callback, cookie, false);
        }

        public global::Test2.C2 end_getTest2C2AsC2(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getTest2C2AsC2_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Test2.C2>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getTest2C2AsC2> begin_getTest2C2AsC2(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getTest2C2AsC2_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getTest2C2AsC2, global::Test2.C2>(
                (Callback_Initial_getTest2C2AsC2 cb, global::Test2.C2 ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getTest2C2AsC2_name, cookie, completedCallback);
            _iceI_getTest2C2AsC2(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_throwTest2E2AsE1> begin_throwTest2E2AsE1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_throwTest2E2AsE1(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_throwTest2E2AsE1(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest2E2AsE1(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_throwTest2E2AsE1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest2E2AsE1(context, callback, cookie, false);
        }

        public void end_throwTest2E2AsE1(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwTest2E2AsE1_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_throwTest2E2AsE1> begin_throwTest2E2AsE1(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_throwTest2E2AsE1_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_throwTest2E2AsE1, object>(
                (Callback_Initial_throwTest2E2AsE1 cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _throwTest2E2AsE1_name, cookie, completedCallback);
            _iceI_throwTest2E2AsE1(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_throwTest2E2AsE2> begin_throwTest2E2AsE2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_throwTest2E2AsE2(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_throwTest2E2AsE2(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest2E2AsE2(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_throwTest2E2AsE2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest2E2AsE2(context, callback, cookie, false);
        }

        public void end_throwTest2E2AsE2(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwTest2E2AsE2_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_throwTest2E2AsE2> begin_throwTest2E2AsE2(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_throwTest2E2AsE2_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_throwTest2E2AsE2, object>(
                (Callback_Initial_throwTest2E2AsE2 cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _throwTest2E2AsE2_name, cookie, completedCallback);
            _iceI_throwTest2E2AsE2(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getTest3C2AsC1> begin_getTest3C2AsC1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getTest3C2AsC1(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getTest3C2AsC1(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTest3C2AsC1(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getTest3C2AsC1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTest3C2AsC1(context, callback, cookie, false);
        }

        public global::Test3.C1 end_getTest3C2AsC1(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getTest3C2AsC1_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Test3.C1>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getTest3C2AsC1> begin_getTest3C2AsC1(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getTest3C2AsC1_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getTest3C2AsC1, global::Test3.C1>(
                (Callback_Initial_getTest3C2AsC1 cb, global::Test3.C1 ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getTest3C2AsC1_name, cookie, completedCallback);
            _iceI_getTest3C2AsC1(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getTest3C2AsC2> begin_getTest3C2AsC2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getTest3C2AsC2(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getTest3C2AsC2(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTest3C2AsC2(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getTest3C2AsC2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTest3C2AsC2(context, callback, cookie, false);
        }

        public global::Test3.C2 end_getTest3C2AsC2(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getTest3C2AsC2_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Test3.C2>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getTest3C2AsC2> begin_getTest3C2AsC2(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getTest3C2AsC2_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getTest3C2AsC2, global::Test3.C2>(
                (Callback_Initial_getTest3C2AsC2 cb, global::Test3.C2 ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getTest3C2AsC2_name, cookie, completedCallback);
            _iceI_getTest3C2AsC2(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_throwTest3E2AsE1> begin_throwTest3E2AsE1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_throwTest3E2AsE1(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_throwTest3E2AsE1(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest3E2AsE1(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_throwTest3E2AsE1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest3E2AsE1(context, callback, cookie, false);
        }

        public void end_throwTest3E2AsE1(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwTest3E2AsE1_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_throwTest3E2AsE1> begin_throwTest3E2AsE1(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_throwTest3E2AsE1_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_throwTest3E2AsE1, object>(
                (Callback_Initial_throwTest3E2AsE1 cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _throwTest3E2AsE1_name, cookie, completedCallback);
            _iceI_throwTest3E2AsE1(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_throwTest3E2AsE2> begin_throwTest3E2AsE2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_throwTest3E2AsE2(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_throwTest3E2AsE2(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest3E2AsE2(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_throwTest3E2AsE2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwTest3E2AsE2(context, callback, cookie, false);
        }

        public void end_throwTest3E2AsE2(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwTest3E2AsE2_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_throwTest3E2AsE2> begin_throwTest3E2AsE2(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_throwTest3E2AsE2_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_throwTest3E2AsE2, object>(
                (Callback_Initial_throwTest3E2AsE2 cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _throwTest3E2AsE2_name, cookie, completedCallback);
            _iceI_throwTest3E2AsE2(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_shutdown(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(context, callback, cookie, false);
        }

        public void end_shutdown(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_shutdown> begin_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_shutdown, object>(
                (Callback_Initial_shutdown cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _shutdown_name, cookie, completedCallback);
            _iceI_shutdown(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static InitialPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            InitialPrx r = b as InitialPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                InitialPrxHelper h = new InitialPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static InitialPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            InitialPrx r = b as InitialPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                InitialPrxHelper h = new InitialPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static InitialPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    InitialPrxHelper h = new InitialPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static InitialPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    InitialPrxHelper h = new InitialPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static InitialPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            InitialPrx r = b as InitialPrx;
            if(r == null)
            {
                InitialPrxHelper h = new InitialPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static InitialPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            InitialPrxHelper h = new InitialPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Initial"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, InitialPrx v)
        {
            ostr.writeProxy(v);
        }

        public static InitialPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                InitialPrxHelper result = new InitialPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class InitialDisp_ : global::Ice.ObjectImpl, Initial
    {
        #region Slice operations

        public abstract global::Test1.C1 getTest1C2AsC1(global::Ice.Current current = null);

        public abstract global::Test1.C2 getTest1C2AsC2(global::Ice.Current current = null);

        public abstract void throwTest1E2AsE1(global::Ice.Current current = null);

        public abstract void throwTest1E2AsE2(global::Ice.Current current = null);

        public abstract void throwTest1Def(global::Ice.Current current = null);

        public abstract global::Test2.C1 getTest2C2AsC1(global::Ice.Current current = null);

        public abstract global::Test2.C2 getTest2C2AsC2(global::Ice.Current current = null);

        public abstract void throwTest2E2AsE1(global::Ice.Current current = null);

        public abstract void throwTest2E2AsE2(global::Ice.Current current = null);

        public abstract global::Test3.C1 getTest3C2AsC1(global::Ice.Current current = null);

        public abstract global::Test3.C2 getTest3C2AsC2(global::Ice.Current current = null);

        public abstract void throwTest3E2AsE1(global::Ice.Current current = null);

        public abstract void throwTest3E2AsE2(global::Ice.Current current = null);

        public abstract void shutdown(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Initial"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getTest1C2AsC1(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getTest1C2AsC1(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getTest1C2AsC2(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getTest1C2AsC2(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwTest1E2AsE1(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwTest1E2AsE1(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwTest1E2AsE2(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwTest1E2AsE2(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwTest1Def(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwTest1Def(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getTest2C2AsC1(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getTest2C2AsC1(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getTest2C2AsC2(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getTest2C2AsC2(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwTest2E2AsE1(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwTest2E2AsE1(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwTest2E2AsE2(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwTest2E2AsE2(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getTest3C2AsC1(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getTest3C2AsC1(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getTest3C2AsC2(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getTest3C2AsC2(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwTest3E2AsE1(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwTest3E2AsE1(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwTest3E2AsE2(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwTest3E2AsE2(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "getTest1C2AsC1",
            "getTest1C2AsC2",
            "getTest2C2AsC1",
            "getTest2C2AsC2",
            "getTest3C2AsC1",
            "getTest3C2AsC2",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "shutdown",
            "throwTest1Def",
            "throwTest1E2AsE1",
            "throwTest1E2AsE2",
            "throwTest2E2AsE1",
            "throwTest2E2AsE2",
            "throwTest3E2AsE1",
            "throwTest3E2AsE2"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getTest1C2AsC1(this, inS, current);
                }
                case 1:
                {
                    return iceD_getTest1C2AsC2(this, inS, current);
                }
                case 2:
                {
                    return iceD_getTest2C2AsC1(this, inS, current);
                }
                case 3:
                {
                    return iceD_getTest2C2AsC2(this, inS, current);
                }
                case 4:
                {
                    return iceD_getTest3C2AsC1(this, inS, current);
                }
                case 5:
                {
                    return iceD_getTest3C2AsC2(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 10:
                {
                    return iceD_shutdown(this, inS, current);
                }
                case 11:
                {
                    return iceD_throwTest1Def(this, inS, current);
                }
                case 12:
                {
                    return iceD_throwTest1E2AsE1(this, inS, current);
                }
                case 13:
                {
                    return iceD_throwTest1E2AsE2(this, inS, current);
                }
                case 14:
                {
                    return iceD_throwTest2E2AsE1(this, inS, current);
                }
                case 15:
                {
                    return iceD_throwTest2E2AsE2(this, inS, current);
                }
                case 16:
                {
                    return iceD_throwTest3E2AsE1(this, inS, current);
                }
                case 17:
                {
                    return iceD_throwTest3E2AsE2(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
