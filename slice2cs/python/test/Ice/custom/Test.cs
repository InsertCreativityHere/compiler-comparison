//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Test
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class S : global::System.ICloneable, global::System.IEquatable<S>
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte[] b1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte[] b2;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte[] b3;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte[] b4;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] s1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] s2;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] s3;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] s4;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public S()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public S(byte[] b1, byte[] b2, byte[] b3, byte[] b4, string[] s1, string[] s2, string[] s3, string[] s4)
        {
            this.b1 = b1;
            this.b2 = b2;
            this.b3 = b3;
            this.b4 = b4;
            this.s1 = s1;
            this.s2 = s2;
            this.s3 = s3;
            this.s4 = s4;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone() => MemberwiseClone();

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::Ice.Internal.HashUtil.hashAdd(ref h_, "::Test::S");
            global::Ice.Internal.HashUtil.hashAdd(ref h_, b1);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, b2);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, b3);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, b4);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, s1);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, s2);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, s3);
            global::Ice.Internal.HashUtil.hashAdd(ref h_, s4);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other) => Equals(other as S);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(S other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return other is not null && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.b1, other.b1) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.b2, other.b2) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.b3, other.b3) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.b4, other.b4) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.s1, other.s1) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.s2, other.s2) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.s3, other.s3) && 
                Ice.UtilInternal.Collections.NullableSequenceEqual(this.s4, other.s4);
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator ==(S lhs, S rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator !=(S lhs, S rhs) => !(lhs == rhs);

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ByteStringHelper.write(ostr, this.b1);
            ByteStringHelper.write(ostr, this.b2);
            ByteListHelper.write(ostr, this.b3);
            ByteListHelper.write(ostr, this.b4);
            StringListHelper.write(ostr, this.s1);
            StringListHelper.write(ostr, this.s2);
            StringTupleHelper.write(ostr, this.s3);
            StringTupleHelper.write(ostr, this.s4);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.b1 = ByteStringHelper.read(istr);
            this.b2 = ByteStringHelper.read(istr);
            this.b3 = ByteListHelper.read(istr);
            this.b4 = ByteListHelper.read(istr);
            this.s1 = StringListHelper.read(istr);
            this.s2 = StringListHelper.read(istr);
            this.s3 = StringTupleHelper.read(istr);
            this.s4 = StringTupleHelper.read(istr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, S v)
        {
            if (v is null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static S ice_read(global::Ice.InputStream istr)
        {
            var v = new S();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly S _nullMarshalValue = new S();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class C : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte[] b1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte[] b2;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte[] b3;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte[] b4;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] s1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] s2;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] s3;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[] s4;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C(byte[] b1, byte[] b2, byte[] b3, byte[] b4, string[] s1, string[] s2, string[] s3, string[] s4)
        {
            this.b1 = b1;
            this.b2 = b2;
            this.b3 = b3;
            this.b4 = b4;
            this.s1 = s1;
            this.s2 = s2;
            this.s3 = s3;
            this.s4 = s4;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::C";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ByteStringHelper.write(ostr_, b1);
            ByteStringHelper.write(ostr_, b2);
            ByteListHelper.write(ostr_, b3);
            ByteListHelper.write(ostr_, b4);
            StringListHelper.write(ostr_, s1);
            StringListHelper.write(ostr_, s2);
            StringTupleHelper.write(ostr_, s3);
            StringTupleHelper.write(ostr_, s4);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            b1 = ByteStringHelper.read(istr_);
            b2 = ByteStringHelper.read(istr_);
            b3 = ByteListHelper.read(istr_);
            b4 = ByteListHelper.read(istr_);
            s1 = StringListHelper.read(istr_);
            s2 = StringListHelper.read(istr_);
            s3 = StringTupleHelper.read(istr_);
            s4 = StringTupleHelper.read(istr_);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class D : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool[] boolSeq;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte[] byteSeq;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public short[] shortSeq;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int[] intSeq;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long[] longSeq;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public float[] floatSeq;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public double[] doubleSeq;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D(bool[] boolSeq, byte[] byteSeq, short[] shortSeq, int[] intSeq, long[] longSeq, float[] floatSeq, double[] doubleSeq)
        {
            this.boolSeq = boolSeq;
            this.byteSeq = byteSeq;
            this.shortSeq = shortSeq;
            this.intSeq = intSeq;
            this.longSeq = longSeq;
            this.floatSeq = floatSeq;
            this.doubleSeq = doubleSeq;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::D";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeBoolSeq(1, boolSeq);
            ostr_.writeByteSeq(2, byteSeq);
            ostr_.writeShortSeq(3, shortSeq);
            ostr_.writeIntSeq(4, intSeq);
            ostr_.writeLongSeq(5, longSeq);
            ostr_.writeFloatSeq(6, floatSeq);
            ostr_.writeDoubleSeq(7, doubleSeq);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            if (istr_.readOptional(1, global::Ice.OptionalFormat.VSize))
            {
                bool[] tmpVal;
                tmpVal = BoolSeq1Helper.read(istr_);
                boolSeq = tmpVal;
            }
            else
            {
                boolSeq = null;
            }
            if (istr_.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal;
                tmpVal = ByteSeq1Helper.read(istr_);
                byteSeq = tmpVal;
            }
            else
            {
                byteSeq = null;
            }
            if (istr_.readOptional(3, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                short[] tmpVal;
                tmpVal = ShortSeq1Helper.read(istr_);
                shortSeq = tmpVal;
            }
            else
            {
                shortSeq = null;
            }
            if (istr_.readOptional(4, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                int[] tmpVal;
                tmpVal = IntSeq1Helper.read(istr_);
                intSeq = tmpVal;
            }
            else
            {
                intSeq = null;
            }
            if (istr_.readOptional(5, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                long[] tmpVal;
                tmpVal = LongSeq1Helper.read(istr_);
                longSeq = tmpVal;
            }
            else
            {
                longSeq = null;
            }
            if (istr_.readOptional(6, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                float[] tmpVal;
                tmpVal = FloatSeq1Helper.read(istr_);
                floatSeq = tmpVal;
            }
            else
            {
                floatSeq = null;
            }
            if (istr_.readOptional(7, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                double[] tmpVal;
                tmpVal = DoubleSeq1Helper.read(istr_);
                doubleSeq = tmpVal;
            }
            else
            {
                doubleSeq = null;
            }
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Custom : global::Ice.Object, CustomOperations_
    {
    }
}

namespace Test
{
    public struct Custom_OpByteString1Result
    {
        public Custom_OpByteString1Result(byte[] returnValue, byte[] b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public byte[] returnValue;
        public byte[] b2;
    }

    public struct Custom_OpByteString2Result
    {
        public Custom_OpByteString2Result(byte[] returnValue, byte[] b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public byte[] returnValue;
        public byte[] b2;
    }

    public struct Custom_OpByteList1Result
    {
        public Custom_OpByteList1Result(byte[] returnValue, byte[] b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public byte[] returnValue;
        public byte[] b2;
    }

    public struct Custom_OpByteList2Result
    {
        public Custom_OpByteList2Result(byte[] returnValue, byte[] b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public byte[] returnValue;
        public byte[] b2;
    }

    public struct Custom_OpStringList1Result
    {
        public Custom_OpStringList1Result(string[] returnValue, string[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public string[] returnValue;
        public string[] s2;
    }

    public struct Custom_OpStringList2Result
    {
        public Custom_OpStringList2Result(string[] returnValue, string[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public string[] returnValue;
        public string[] s2;
    }

    public struct Custom_OpStringTuple1Result
    {
        public Custom_OpStringTuple1Result(string[] returnValue, string[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public string[] returnValue;
        public string[] s2;
    }

    public struct Custom_OpStringTuple2Result
    {
        public Custom_OpStringTuple2Result(string[] returnValue, string[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public string[] returnValue;
        public string[] s2;
    }

    public struct Custom_OpBoolSeqResult
    {
        public Custom_OpBoolSeqResult(bool[] returnValue, bool[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public bool[] returnValue;
        public bool[] v2;
    }

    public struct Custom_OpByteSeqResult
    {
        public Custom_OpByteSeqResult(byte[] returnValue, byte[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public byte[] returnValue;
        public byte[] v2;
    }

    public struct Custom_OpShortSeqResult
    {
        public Custom_OpShortSeqResult(short[] returnValue, short[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public short[] returnValue;
        public short[] v2;
    }

    public struct Custom_OpIntSeqResult
    {
        public Custom_OpIntSeqResult(int[] returnValue, int[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public int[] returnValue;
        public int[] v2;
    }

    public struct Custom_OpLongSeqResult
    {
        public Custom_OpLongSeqResult(long[] returnValue, long[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public long[] returnValue;
        public long[] v2;
    }

    public struct Custom_OpFloatSeqResult
    {
        public Custom_OpFloatSeqResult(float[] returnValue, float[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public float[] returnValue;
        public float[] v2;
    }

    public struct Custom_OpDoubleSeqResult
    {
        public Custom_OpDoubleSeqResult(double[] returnValue, double[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public double[] returnValue;
        public double[] v2;
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface CustomPrx : global::Ice.ObjectPrx
    {
        byte[] opByteString1(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpByteString1Result> opByteString1Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteString2(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpByteString2Result> opByteString2Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteList1(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpByteList1Result> opByteList1Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteList2(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpByteList2Result> opByteList2Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringList1(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpStringList1Result> opStringList1Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringList2(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpStringList2Result> opStringList2Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringTuple1(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpStringTuple1Result> opStringTuple1Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringTuple2(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpStringTuple2Result> opStringTuple2Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void sendS(S val, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task sendSAsync(S val, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void sendC(C val, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task sendCAsync(C val, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBoolSeq(bool[] v1, out bool[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpBoolSeqResult> opBoolSeqAsync(bool[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteSeq(byte[] v1, out byte[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpByteSeqResult> opByteSeqAsync(byte[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        short[] opShortSeq(short[] v1, out short[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpShortSeqResult> opShortSeqAsync(short[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        int[] opIntSeq(int[] v1, out int[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpIntSeqResult> opIntSeqAsync(int[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        long[] opLongSeq(long[] v1, out long[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpLongSeqResult> opLongSeqAsync(long[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        float[] opFloatSeq(float[] v1, out float[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpFloatSeqResult> opFloatSeqAsync(float[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        double[] opDoubleSeq(double[] v1, out double[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Custom_OpDoubleSeqResult> opDoubleSeqAsync(double[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBogusArrayNotExistsFactory(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<bool[]> opBogusArrayNotExistsFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBogusArrayThrowFactory(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<bool[]> opBogusArrayThrowFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBogusArrayType(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<bool[]> opBogusArrayTypeAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBogusArrayNoneFactory(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<bool[]> opBogusArrayNoneFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBogusArraySignatureFactory(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<bool[]> opBogusArraySignatureFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBogusArrayNoCallableFactory(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<bool[]> opBogusArrayNoCallableFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        D opD(D d, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<D> opDAsync(D d, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface CustomOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte[] opByteString1(byte[] b1, out byte[] b2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte[] opByteString2(byte[] b1, out byte[] b2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte[] opByteList1(byte[] b1, out byte[] b2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte[] opByteList2(byte[] b1, out byte[] b2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[] opStringList1(string[] s1, out string[] s2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[] opStringList2(string[] s1, out string[] s2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[] opStringTuple1(string[] s1, out string[] s2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[] opStringTuple2(string[] s1, out string[] s2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void sendS(S val, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void sendC(C val, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool[] opBoolSeq(bool[] v1, out bool[] v2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte[] opByteSeq(byte[] v1, out byte[] v2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        short[] opShortSeq(short[] v1, out short[] v2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        int[] opIntSeq(int[] v1, out int[] v2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        long[] opLongSeq(long[] v1, out long[] v2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        float[] opFloatSeq(float[] v1, out float[] v2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        double[] opDoubleSeq(double[] v1, out double[] v2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool[] opBogusArrayNotExistsFactory(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool[] opBogusArrayThrowFactory(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool[] opBogusArrayType(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool[] opBogusArrayNoneFactory(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool[] opBogusArraySignatureFactory(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool[] opBogusArrayNoCallableFactory(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        D opD(D d, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void shutdown(global::Ice.Current current = null);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteStringHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteListHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringListHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(global::Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringTupleHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(global::Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolSeq1Helper
    {
        public static void write(global::Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(global::Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolSeq2Helper
    {
        public static void write(global::Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(global::Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteSeq1Helper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteSeq2Helper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ShortSeq1Helper
    {
        public static void write(global::Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(global::Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ShortSeq2Helper
    {
        public static void write(global::Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(global::Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntSeq1Helper
    {
        public static void write(global::Ice.OutputStream ostr, int[] v)
        {
            ostr.writeIntSeq(v);
        }

        public static int[] read(global::Ice.InputStream istr)
        {
            int[] v;
            v = istr.readIntSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntSeq2Helper
    {
        public static void write(global::Ice.OutputStream ostr, int[] v)
        {
            ostr.writeIntSeq(v);
        }

        public static int[] read(global::Ice.InputStream istr)
        {
            int[] v;
            v = istr.readIntSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LongSeq1Helper
    {
        public static void write(global::Ice.OutputStream ostr, long[] v)
        {
            ostr.writeLongSeq(v);
        }

        public static long[] read(global::Ice.InputStream istr)
        {
            long[] v;
            v = istr.readLongSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LongSeq2Helper
    {
        public static void write(global::Ice.OutputStream ostr, long[] v)
        {
            ostr.writeLongSeq(v);
        }

        public static long[] read(global::Ice.InputStream istr)
        {
            long[] v;
            v = istr.readLongSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FloatSeq1Helper
    {
        public static void write(global::Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(global::Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FloatSeq2Helper
    {
        public static void write(global::Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(global::Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DoubleSeq1Helper
    {
        public static void write(global::Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(global::Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DoubleSeq2Helper
    {
        public static void write(global::Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(global::Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class CustomPrxHelper : global::Ice.ObjectPrxHelperBase, CustomPrx
    {
        public CustomPrxHelper()
        {
        }

        #region Synchronous operations

        public byte[] opByteString1(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opByteString1Async(b1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                b2 = result_.b2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opByteString2(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opByteString2Async(b1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                b2 = result_.b2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opByteList1(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opByteList1Async(b1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                b2 = result_.b2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opByteList2(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opByteList2Async(b1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                b2 = result_.b2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opStringList1(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opStringList1Async(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opStringList2(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opStringList2Async(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opStringTuple1(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opStringTuple1Async(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] opStringTuple2(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opStringTuple2Async(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void sendS(S val, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_sendSAsync(val, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void sendC(C val, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_sendCAsync(val, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBoolSeq(bool[] v1, out bool[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opBoolSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] opByteSeq(byte[] v1, out byte[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opByteSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public short[] opShortSeq(short[] v1, out short[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opShortSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int[] opIntSeq(int[] v1, out int[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opIntSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public long[] opLongSeq(long[] v1, out long[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opLongSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float[] opFloatSeq(float[] v1, out float[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opFloatSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public double[] opDoubleSeq(double[] v1, out double[] v2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_opDoubleSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBogusArrayNotExistsFactory(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_opBogusArrayNotExistsFactoryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBogusArrayThrowFactory(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_opBogusArrayThrowFactoryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBogusArrayType(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_opBogusArrayTypeAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBogusArrayNoneFactory(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_opBogusArrayNoneFactoryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBogusArraySignatureFactory(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_opBogusArraySignatureFactoryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool[] opBogusArrayNoCallableFactory(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_opBogusArrayNoCallableFactoryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public D opD(D d, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_opDAsync(d, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<Custom_OpByteString1Result> opByteString1Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteString1Async(b1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpByteString1Result> _iceI_opByteString1Async(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteString1_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpByteString1Result>(progress, cancel);
            _iceI_opByteString1(iceP_b1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteString1_name = "opByteString1";

        private void _iceI_opByteString1(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpByteString1Result>(completed);
            outAsync.invoke(
                _opByteString1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteStringHelper.write(ostr, iceP_b1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpByteString1Result ret = new Custom_OpByteString1Result();
                    ret.b2 = ByteStringHelper.read(istr);
                    ret.returnValue = ByteStringHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpByteString2Result> opByteString2Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteString2Async(b1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpByteString2Result> _iceI_opByteString2Async(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteString2_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpByteString2Result>(progress, cancel);
            _iceI_opByteString2(iceP_b1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteString2_name = "opByteString2";

        private void _iceI_opByteString2(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpByteString2Result>(completed);
            outAsync.invoke(
                _opByteString2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteStringHelper.write(ostr, iceP_b1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpByteString2Result ret = new Custom_OpByteString2Result();
                    ret.b2 = ByteStringHelper.read(istr);
                    ret.returnValue = ByteStringHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpByteList1Result> opByteList1Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteList1Async(b1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpByteList1Result> _iceI_opByteList1Async(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteList1_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpByteList1Result>(progress, cancel);
            _iceI_opByteList1(iceP_b1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteList1_name = "opByteList1";

        private void _iceI_opByteList1(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpByteList1Result>(completed);
            outAsync.invoke(
                _opByteList1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteListHelper.write(ostr, iceP_b1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpByteList1Result ret = new Custom_OpByteList1Result();
                    ret.b2 = ByteListHelper.read(istr);
                    ret.returnValue = ByteListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpByteList2Result> opByteList2Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteList2Async(b1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpByteList2Result> _iceI_opByteList2Async(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteList2_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpByteList2Result>(progress, cancel);
            _iceI_opByteList2(iceP_b1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteList2_name = "opByteList2";

        private void _iceI_opByteList2(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpByteList2Result>(completed);
            outAsync.invoke(
                _opByteList2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteListHelper.write(ostr, iceP_b1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpByteList2Result ret = new Custom_OpByteList2Result();
                    ret.b2 = ByteListHelper.read(istr);
                    ret.returnValue = ByteListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpStringList1Result> opStringList1Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringList1Async(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpStringList1Result> _iceI_opStringList1Async(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringList1_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpStringList1Result>(progress, cancel);
            _iceI_opStringList1(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringList1_name = "opStringList1";

        private void _iceI_opStringList1(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpStringList1Result>(completed);
            outAsync.invoke(
                _opStringList1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    StringListHelper.write(ostr, iceP_s1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpStringList1Result ret = new Custom_OpStringList1Result();
                    ret.s2 = StringListHelper.read(istr);
                    ret.returnValue = StringListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpStringList2Result> opStringList2Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringList2Async(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpStringList2Result> _iceI_opStringList2Async(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringList2_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpStringList2Result>(progress, cancel);
            _iceI_opStringList2(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringList2_name = "opStringList2";

        private void _iceI_opStringList2(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpStringList2Result>(completed);
            outAsync.invoke(
                _opStringList2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    StringListHelper.write(ostr, iceP_s1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpStringList2Result ret = new Custom_OpStringList2Result();
                    ret.s2 = StringListHelper.read(istr);
                    ret.returnValue = StringListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpStringTuple1Result> opStringTuple1Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringTuple1Async(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpStringTuple1Result> _iceI_opStringTuple1Async(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringTuple1_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpStringTuple1Result>(progress, cancel);
            _iceI_opStringTuple1(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringTuple1_name = "opStringTuple1";

        private void _iceI_opStringTuple1(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpStringTuple1Result>(completed);
            outAsync.invoke(
                _opStringTuple1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    StringTupleHelper.write(ostr, iceP_s1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpStringTuple1Result ret = new Custom_OpStringTuple1Result();
                    ret.s2 = StringTupleHelper.read(istr);
                    ret.returnValue = StringTupleHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpStringTuple2Result> opStringTuple2Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringTuple2Async(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpStringTuple2Result> _iceI_opStringTuple2Async(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringTuple2_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpStringTuple2Result>(progress, cancel);
            _iceI_opStringTuple2(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringTuple2_name = "opStringTuple2";

        private void _iceI_opStringTuple2(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpStringTuple2Result>(completed);
            outAsync.invoke(
                _opStringTuple2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    StringTupleHelper.write(ostr, iceP_s1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpStringTuple2Result ret = new Custom_OpStringTuple2Result();
                    ret.s2 = StringTupleHelper.read(istr);
                    ret.returnValue = StringTupleHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task sendSAsync(S val, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_sendSAsync(val, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_sendSAsync(S iceP_val, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_sendS(iceP_val, context, synchronous, completed);
            return completed.Task;
        }

        private const string _sendS_name = "sendS";

        private void _iceI_sendS(S iceP_val, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _sendS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    S.ice_write(ostr, iceP_val);
                });
        }

        public global::System.Threading.Tasks.Task sendCAsync(C val, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_sendCAsync(val, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_sendCAsync(C iceP_val, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_sendC(iceP_val, context, synchronous, completed);
            return completed.Task;
        }

        private const string _sendC_name = "sendC";

        private void _iceI_sendC(C iceP_val, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _sendC_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_val);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpBoolSeqResult> opBoolSeqAsync(bool[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpBoolSeqResult> _iceI_opBoolSeqAsync(bool[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpBoolSeqResult>(progress, cancel);
            _iceI_opBoolSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolSeq_name = "opBoolSeq";

        private void _iceI_opBoolSeq(bool[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpBoolSeqResult>(completed);
            outAsync.invoke(
                _opBoolSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BoolSeq1Helper.write(ostr, iceP_v1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpBoolSeqResult ret = new Custom_OpBoolSeqResult();
                    ret.v2 = BoolSeq2Helper.read(istr);
                    ret.returnValue = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpByteSeqResult> opByteSeqAsync(byte[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpByteSeqResult> _iceI_opByteSeqAsync(byte[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpByteSeqResult>(progress, cancel);
            _iceI_opByteSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSeq_name = "opByteSeq";

        private void _iceI_opByteSeq(byte[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpByteSeqResult>(completed);
            outAsync.invoke(
                _opByteSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteSeq1Helper.write(ostr, iceP_v1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpByteSeqResult ret = new Custom_OpByteSeqResult();
                    ret.v2 = ByteSeq2Helper.read(istr);
                    ret.returnValue = ByteSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpShortSeqResult> opShortSeqAsync(short[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpShortSeqResult> _iceI_opShortSeqAsync(short[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpShortSeqResult>(progress, cancel);
            _iceI_opShortSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortSeq_name = "opShortSeq";

        private void _iceI_opShortSeq(short[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpShortSeqResult>(completed);
            outAsync.invoke(
                _opShortSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ShortSeq1Helper.write(ostr, iceP_v1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpShortSeqResult ret = new Custom_OpShortSeqResult();
                    ret.v2 = ShortSeq2Helper.read(istr);
                    ret.returnValue = ShortSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpIntSeqResult> opIntSeqAsync(int[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpIntSeqResult> _iceI_opIntSeqAsync(int[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpIntSeqResult>(progress, cancel);
            _iceI_opIntSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntSeq_name = "opIntSeq";

        private void _iceI_opIntSeq(int[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpIntSeqResult>(completed);
            outAsync.invoke(
                _opIntSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    IntSeq1Helper.write(ostr, iceP_v1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpIntSeqResult ret = new Custom_OpIntSeqResult();
                    ret.v2 = IntSeq2Helper.read(istr);
                    ret.returnValue = IntSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpLongSeqResult> opLongSeqAsync(long[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpLongSeqResult> _iceI_opLongSeqAsync(long[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpLongSeqResult>(progress, cancel);
            _iceI_opLongSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongSeq_name = "opLongSeq";

        private void _iceI_opLongSeq(long[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpLongSeqResult>(completed);
            outAsync.invoke(
                _opLongSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    LongSeq1Helper.write(ostr, iceP_v1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpLongSeqResult ret = new Custom_OpLongSeqResult();
                    ret.v2 = LongSeq2Helper.read(istr);
                    ret.returnValue = LongSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpFloatSeqResult> opFloatSeqAsync(float[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpFloatSeqResult> _iceI_opFloatSeqAsync(float[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpFloatSeqResult>(progress, cancel);
            _iceI_opFloatSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatSeq_name = "opFloatSeq";

        private void _iceI_opFloatSeq(float[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpFloatSeqResult>(completed);
            outAsync.invoke(
                _opFloatSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    FloatSeq1Helper.write(ostr, iceP_v1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpFloatSeqResult ret = new Custom_OpFloatSeqResult();
                    ret.v2 = FloatSeq2Helper.read(istr);
                    ret.returnValue = FloatSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpDoubleSeqResult> opDoubleSeqAsync(double[] v1, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDoubleSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpDoubleSeqResult> _iceI_opDoubleSeqAsync(double[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDoubleSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Custom_OpDoubleSeqResult>(progress, cancel);
            _iceI_opDoubleSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDoubleSeq_name = "opDoubleSeq";

        private void _iceI_opDoubleSeq(double[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpDoubleSeqResult>(completed);
            outAsync.invoke(
                _opDoubleSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    DoubleSeq1Helper.write(ostr, iceP_v1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Custom_OpDoubleSeqResult ret = new Custom_OpDoubleSeqResult();
                    ret.v2 = DoubleSeq2Helper.read(istr);
                    ret.returnValue = DoubleSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool[]> opBogusArrayNotExistsFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBogusArrayNotExistsFactoryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusArrayNotExistsFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBogusArrayNotExistsFactory_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
            _iceI_opBogusArrayNotExistsFactory(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBogusArrayNotExistsFactory_name = "opBogusArrayNotExistsFactory";

        private void _iceI_opBogusArrayNotExistsFactory(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool[]>(completed);
            outAsync.invoke(
                _opBogusArrayNotExistsFactory_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool[] ret = default;
                    ret = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool[]> opBogusArrayThrowFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBogusArrayThrowFactoryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusArrayThrowFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBogusArrayThrowFactory_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
            _iceI_opBogusArrayThrowFactory(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBogusArrayThrowFactory_name = "opBogusArrayThrowFactory";

        private void _iceI_opBogusArrayThrowFactory(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool[]>(completed);
            outAsync.invoke(
                _opBogusArrayThrowFactory_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool[] ret = default;
                    ret = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool[]> opBogusArrayTypeAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBogusArrayTypeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusArrayTypeAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBogusArrayType_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
            _iceI_opBogusArrayType(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBogusArrayType_name = "opBogusArrayType";

        private void _iceI_opBogusArrayType(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool[]>(completed);
            outAsync.invoke(
                _opBogusArrayType_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool[] ret = default;
                    ret = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool[]> opBogusArrayNoneFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBogusArrayNoneFactoryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusArrayNoneFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBogusArrayNoneFactory_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
            _iceI_opBogusArrayNoneFactory(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBogusArrayNoneFactory_name = "opBogusArrayNoneFactory";

        private void _iceI_opBogusArrayNoneFactory(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool[]>(completed);
            outAsync.invoke(
                _opBogusArrayNoneFactory_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool[] ret = default;
                    ret = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool[]> opBogusArraySignatureFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBogusArraySignatureFactoryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusArraySignatureFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBogusArraySignatureFactory_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
            _iceI_opBogusArraySignatureFactory(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBogusArraySignatureFactory_name = "opBogusArraySignatureFactory";

        private void _iceI_opBogusArraySignatureFactory(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool[]>(completed);
            outAsync.invoke(
                _opBogusArraySignatureFactory_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool[] ret = default;
                    ret = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool[]> opBogusArrayNoCallableFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBogusArrayNoCallableFactoryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusArrayNoCallableFactoryAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBogusArrayNoCallableFactory_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
            _iceI_opBogusArrayNoCallableFactory(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBogusArrayNoCallableFactory_name = "opBogusArrayNoCallableFactory";

        private void _iceI_opBogusArrayNoCallableFactory(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool[]>(completed);
            outAsync.invoke(
                _opBogusArrayNoCallableFactory_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool[] ret = default;
                    ret = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<D> opDAsync(D d, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDAsync(d, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<D> _iceI_opDAsync(D iceP_d, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opD_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<D>(progress, cancel);
            _iceI_opD(iceP_d, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opD_name = "opD";

        private void _iceI_opD(D iceP_d, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<D>(completed);
            outAsync.invoke(
                _opD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_d);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    D ret = default;
                    istr.readValue((D v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CustomPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                CustomPrxHelper prx = new CustomPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static CustomPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    CustomPrxHelper prx = new CustomPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CustomPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                CustomPrxHelper prx = new CustomPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static CustomPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                CustomPrxHelper prx = new CustomPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Custom"
        };

        public static string ice_staticId() => "::Test::Custom";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, CustomPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CustomPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CustomPrxHelper result = new CustomPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class CustomDisp_ : global::Ice.ObjectImpl, Custom
    {
        #region Slice operations

        public abstract byte[] opByteString1(byte[] b1, out byte[] b2, global::Ice.Current current = null);

        public abstract byte[] opByteString2(byte[] b1, out byte[] b2, global::Ice.Current current = null);

        public abstract byte[] opByteList1(byte[] b1, out byte[] b2, global::Ice.Current current = null);

        public abstract byte[] opByteList2(byte[] b1, out byte[] b2, global::Ice.Current current = null);

        public abstract string[] opStringList1(string[] s1, out string[] s2, global::Ice.Current current = null);

        public abstract string[] opStringList2(string[] s1, out string[] s2, global::Ice.Current current = null);

        public abstract string[] opStringTuple1(string[] s1, out string[] s2, global::Ice.Current current = null);

        public abstract string[] opStringTuple2(string[] s1, out string[] s2, global::Ice.Current current = null);

        public abstract void sendS(S val, global::Ice.Current current = null);

        public abstract void sendC(C val, global::Ice.Current current = null);

        public abstract bool[] opBoolSeq(bool[] v1, out bool[] v2, global::Ice.Current current = null);

        public abstract byte[] opByteSeq(byte[] v1, out byte[] v2, global::Ice.Current current = null);

        public abstract short[] opShortSeq(short[] v1, out short[] v2, global::Ice.Current current = null);

        public abstract int[] opIntSeq(int[] v1, out int[] v2, global::Ice.Current current = null);

        public abstract long[] opLongSeq(long[] v1, out long[] v2, global::Ice.Current current = null);

        public abstract float[] opFloatSeq(float[] v1, out float[] v2, global::Ice.Current current = null);

        public abstract double[] opDoubleSeq(double[] v1, out double[] v2, global::Ice.Current current = null);

        public abstract bool[] opBogusArrayNotExistsFactory(global::Ice.Current current = null);

        public abstract bool[] opBogusArrayThrowFactory(global::Ice.Current current = null);

        public abstract bool[] opBogusArrayType(global::Ice.Current current = null);

        public abstract bool[] opBogusArrayNoneFactory(global::Ice.Current current = null);

        public abstract bool[] opBogusArraySignatureFactory(global::Ice.Current current = null);

        public abstract bool[] opBogusArrayNoCallableFactory(global::Ice.Current current = null);

        public abstract D opD(D d, global::Ice.Current current = null);

        public abstract void shutdown(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Custom"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::Custom";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteString1(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_b1 = default;
            iceP_b1 = ByteStringHelper.read(istr);
            inS.endReadParams();
            byte[] iceP_b2;
            var ret = obj.opByteString1(iceP_b1, out iceP_b2, current);
            var ostr = inS.startWriteParams();
            ByteStringHelper.write(ostr, iceP_b2);
            ByteStringHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteString2(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_b1 = default;
            iceP_b1 = ByteStringHelper.read(istr);
            inS.endReadParams();
            byte[] iceP_b2;
            var ret = obj.opByteString2(iceP_b1, out iceP_b2, current);
            var ostr = inS.startWriteParams();
            ByteStringHelper.write(ostr, iceP_b2);
            ByteStringHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteList1(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_b1 = default;
            iceP_b1 = ByteListHelper.read(istr);
            inS.endReadParams();
            byte[] iceP_b2;
            var ret = obj.opByteList1(iceP_b1, out iceP_b2, current);
            var ostr = inS.startWriteParams();
            ByteListHelper.write(ostr, iceP_b2);
            ByteListHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteList2(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_b1 = default;
            iceP_b1 = ByteListHelper.read(istr);
            inS.endReadParams();
            byte[] iceP_b2;
            var ret = obj.opByteList2(iceP_b1, out iceP_b2, current);
            var ostr = inS.startWriteParams();
            ByteListHelper.write(ostr, iceP_b2);
            ByteListHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringList1(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[] iceP_s1 = default;
            iceP_s1 = StringListHelper.read(istr);
            inS.endReadParams();
            string[] iceP_s2;
            var ret = obj.opStringList1(iceP_s1, out iceP_s2, current);
            var ostr = inS.startWriteParams();
            StringListHelper.write(ostr, iceP_s2);
            StringListHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringList2(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[] iceP_s1 = default;
            iceP_s1 = StringListHelper.read(istr);
            inS.endReadParams();
            string[] iceP_s2;
            var ret = obj.opStringList2(iceP_s1, out iceP_s2, current);
            var ostr = inS.startWriteParams();
            StringListHelper.write(ostr, iceP_s2);
            StringListHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringTuple1(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[] iceP_s1 = default;
            iceP_s1 = StringTupleHelper.read(istr);
            inS.endReadParams();
            string[] iceP_s2;
            var ret = obj.opStringTuple1(iceP_s1, out iceP_s2, current);
            var ostr = inS.startWriteParams();
            StringTupleHelper.write(ostr, iceP_s2);
            StringTupleHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringTuple2(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[] iceP_s1 = default;
            iceP_s1 = StringTupleHelper.read(istr);
            inS.endReadParams();
            string[] iceP_s2;
            var ret = obj.opStringTuple2(iceP_s1, out iceP_s2, current);
            var ostr = inS.startWriteParams();
            StringTupleHelper.write(ostr, iceP_s2);
            StringTupleHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_sendS(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            S iceP_val = default;
            iceP_val = S.ice_read(istr);
            inS.endReadParams();
            obj.sendS(iceP_val, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_sendC(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            C iceP_val = default;
            istr.readValue((C v) => {iceP_val = v; });
            istr.readPendingValues();
            inS.endReadParams();
            obj.sendC(iceP_val, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBoolSeq(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool[] iceP_v1 = default;
            iceP_v1 = BoolSeq1Helper.read(istr);
            inS.endReadParams();
            bool[] iceP_v2;
            var ret = obj.opBoolSeq(iceP_v1, out iceP_v2, current);
            var ostr = inS.startWriteParams();
            BoolSeq2Helper.write(ostr, iceP_v2);
            BoolSeq1Helper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteSeq(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_v1 = default;
            iceP_v1 = ByteSeq1Helper.read(istr);
            inS.endReadParams();
            byte[] iceP_v2;
            var ret = obj.opByteSeq(iceP_v1, out iceP_v2, current);
            var ostr = inS.startWriteParams();
            ByteSeq2Helper.write(ostr, iceP_v2);
            ByteSeq1Helper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opShortSeq(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            short[] iceP_v1 = default;
            iceP_v1 = ShortSeq1Helper.read(istr);
            inS.endReadParams();
            short[] iceP_v2;
            var ret = obj.opShortSeq(iceP_v1, out iceP_v2, current);
            var ostr = inS.startWriteParams();
            ShortSeq2Helper.write(ostr, iceP_v2);
            ShortSeq1Helper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opIntSeq(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int[] iceP_v1 = default;
            iceP_v1 = IntSeq1Helper.read(istr);
            inS.endReadParams();
            int[] iceP_v2;
            var ret = obj.opIntSeq(iceP_v1, out iceP_v2, current);
            var ostr = inS.startWriteParams();
            IntSeq2Helper.write(ostr, iceP_v2);
            IntSeq1Helper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opLongSeq(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long[] iceP_v1 = default;
            iceP_v1 = LongSeq1Helper.read(istr);
            inS.endReadParams();
            long[] iceP_v2;
            var ret = obj.opLongSeq(iceP_v1, out iceP_v2, current);
            var ostr = inS.startWriteParams();
            LongSeq2Helper.write(ostr, iceP_v2);
            LongSeq1Helper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFloatSeq(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            float[] iceP_v1 = default;
            iceP_v1 = FloatSeq1Helper.read(istr);
            inS.endReadParams();
            float[] iceP_v2;
            var ret = obj.opFloatSeq(iceP_v1, out iceP_v2, current);
            var ostr = inS.startWriteParams();
            FloatSeq2Helper.write(ostr, iceP_v2);
            FloatSeq1Helper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opDoubleSeq(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            double[] iceP_v1 = default;
            iceP_v1 = DoubleSeq1Helper.read(istr);
            inS.endReadParams();
            double[] iceP_v2;
            var ret = obj.opDoubleSeq(iceP_v1, out iceP_v2, current);
            var ostr = inS.startWriteParams();
            DoubleSeq2Helper.write(ostr, iceP_v2);
            DoubleSeq1Helper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBogusArrayNotExistsFactory(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.opBogusArrayNotExistsFactory(current);
            var ostr = inS.startWriteParams();
            BoolSeq1Helper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBogusArrayThrowFactory(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.opBogusArrayThrowFactory(current);
            var ostr = inS.startWriteParams();
            BoolSeq1Helper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBogusArrayType(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.opBogusArrayType(current);
            var ostr = inS.startWriteParams();
            BoolSeq1Helper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBogusArrayNoneFactory(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.opBogusArrayNoneFactory(current);
            var ostr = inS.startWriteParams();
            BoolSeq1Helper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBogusArraySignatureFactory(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.opBogusArraySignatureFactory(current);
            var ostr = inS.startWriteParams();
            BoolSeq1Helper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBogusArrayNoCallableFactory(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.opBogusArrayNoCallableFactory(current);
            var ostr = inS.startWriteParams();
            BoolSeq1Helper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opD(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            D iceP_d = default;
            istr.readValue((D v) => {iceP_d = v; });
            istr.readPendingValues();
            inS.endReadParams();
            var ret = obj.opD(iceP_d, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(Custom obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "opBogusArrayNoCallableFactory",
            "opBogusArrayNoneFactory",
            "opBogusArrayNotExistsFactory",
            "opBogusArraySignatureFactory",
            "opBogusArrayThrowFactory",
            "opBogusArrayType",
            "opBoolSeq",
            "opByteList1",
            "opByteList2",
            "opByteSeq",
            "opByteString1",
            "opByteString2",
            "opD",
            "opDoubleSeq",
            "opFloatSeq",
            "opIntSeq",
            "opLongSeq",
            "opShortSeq",
            "opStringList1",
            "opStringList2",
            "opStringTuple1",
            "opStringTuple2",
            "sendC",
            "sendS",
            "shutdown"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_opBogusArrayNoCallableFactory(this, inS, current);
                }
                case 5:
                {
                    return iceD_opBogusArrayNoneFactory(this, inS, current);
                }
                case 6:
                {
                    return iceD_opBogusArrayNotExistsFactory(this, inS, current);
                }
                case 7:
                {
                    return iceD_opBogusArraySignatureFactory(this, inS, current);
                }
                case 8:
                {
                    return iceD_opBogusArrayThrowFactory(this, inS, current);
                }
                case 9:
                {
                    return iceD_opBogusArrayType(this, inS, current);
                }
                case 10:
                {
                    return iceD_opBoolSeq(this, inS, current);
                }
                case 11:
                {
                    return iceD_opByteList1(this, inS, current);
                }
                case 12:
                {
                    return iceD_opByteList2(this, inS, current);
                }
                case 13:
                {
                    return iceD_opByteSeq(this, inS, current);
                }
                case 14:
                {
                    return iceD_opByteString1(this, inS, current);
                }
                case 15:
                {
                    return iceD_opByteString2(this, inS, current);
                }
                case 16:
                {
                    return iceD_opD(this, inS, current);
                }
                case 17:
                {
                    return iceD_opDoubleSeq(this, inS, current);
                }
                case 18:
                {
                    return iceD_opFloatSeq(this, inS, current);
                }
                case 19:
                {
                    return iceD_opIntSeq(this, inS, current);
                }
                case 20:
                {
                    return iceD_opLongSeq(this, inS, current);
                }
                case 21:
                {
                    return iceD_opShortSeq(this, inS, current);
                }
                case 22:
                {
                    return iceD_opStringList1(this, inS, current);
                }
                case 23:
                {
                    return iceD_opStringList2(this, inS, current);
                }
                case 24:
                {
                    return iceD_opStringTuple1(this, inS, current);
                }
                case 25:
                {
                    return iceD_opStringTuple2(this, inS, current);
                }
                case 26:
                {
                    return iceD_sendC(this, inS, current);
                }
                case 27:
                {
                    return iceD_sendS(this, inS, current);
                }
                case 28:
                {
                    return iceD_shutdown(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
