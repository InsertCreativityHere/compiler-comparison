//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test
{
    public sealed partial record class S
    {
        public byte[] b1;

        public byte[] b2;

        public byte[] b3;

        public byte[] b4;

        public string[] s1;

        public string[] s2;

        public string[] s3;

        public string[] s4;

        partial void ice_initialize();

        public S(byte[] b1, byte[] b2, byte[] b3, byte[] b4, string[] s1, string[] s2, string[] s3, string[] s4)
        {
            global::System.ArgumentNullException.ThrowIfNull(b1);
            this.b1 = b1;
            global::System.ArgumentNullException.ThrowIfNull(b2);
            this.b2 = b2;
            global::System.ArgumentNullException.ThrowIfNull(b3);
            this.b3 = b3;
            global::System.ArgumentNullException.ThrowIfNull(b4);
            this.b4 = b4;
            global::System.ArgumentNullException.ThrowIfNull(s1);
            this.s1 = s1;
            global::System.ArgumentNullException.ThrowIfNull(s2);
            this.s2 = s2;
            global::System.ArgumentNullException.ThrowIfNull(s3);
            this.s3 = s3;
            global::System.ArgumentNullException.ThrowIfNull(s4);
            this.s4 = s4;
            ice_initialize();
        }

        public S(Ice.InputStream istr)
        {
            this.b1 = ByteStringHelper.read(istr);
            this.b2 = ByteStringHelper.read(istr);
            this.b3 = ByteListHelper.read(istr);
            this.b4 = ByteListHelper.read(istr);
            this.s1 = StringListHelper.read(istr);
            this.s2 = StringListHelper.read(istr);
            this.s3 = StringTupleHelper.read(istr);
            this.s4 = StringTupleHelper.read(istr);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ByteStringHelper.write(ostr, this.b1);
            ByteStringHelper.write(ostr, this.b2);
            ByteListHelper.write(ostr, this.b3);
            ByteListHelper.write(ostr, this.b4);
            StringListHelper.write(ostr, this.s1);
            StringListHelper.write(ostr, this.s2);
            StringTupleHelper.write(ostr, this.s3);
            StringTupleHelper.write(ostr, this.s4);
        }

        public static void ice_write(Ice.OutputStream ostr, S v)
        {
            v.ice_writeMembers(ostr);
        }

        public static S ice_read(Ice.InputStream istr) => new(istr);
    }

    [Ice.SliceTypeId("::Test::C")]
    public partial class C : Ice.Value
    {
        public byte[] b1;

        public byte[] b2;

        public byte[] b3;

        public byte[] b4;

        public string[] s1;

        public string[] s2;

        public string[] s3;

        public string[] s4;

        partial void ice_initialize();

        public C(byte[] b1, byte[] b2, byte[] b3, byte[] b4, string[] s1, string[] s2, string[] s3, string[] s4)
        {
            global::System.ArgumentNullException.ThrowIfNull(b1);
            this.b1 = b1;
            global::System.ArgumentNullException.ThrowIfNull(b2);
            this.b2 = b2;
            global::System.ArgumentNullException.ThrowIfNull(b3);
            this.b3 = b3;
            global::System.ArgumentNullException.ThrowIfNull(b4);
            this.b4 = b4;
            global::System.ArgumentNullException.ThrowIfNull(s1);
            this.s1 = s1;
            global::System.ArgumentNullException.ThrowIfNull(s2);
            this.s2 = s2;
            global::System.ArgumentNullException.ThrowIfNull(s3);
            this.s3 = s3;
            global::System.ArgumentNullException.ThrowIfNull(s4);
            this.s4 = s4;
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public C()
        {
            this.b1 = null!;
            this.b2 = null!;
            this.b3 = null!;
            this.b4 = null!;
            this.s1 = null!;
            this.s2 = null!;
            this.s3 = null!;
            this.s4 = null!;
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::C";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ByteStringHelper.write(ostr_, b1);
            ByteStringHelper.write(ostr_, b2);
            ByteListHelper.write(ostr_, b3);
            ByteListHelper.write(ostr_, b4);
            StringListHelper.write(ostr_, s1);
            StringListHelper.write(ostr_, s2);
            StringTupleHelper.write(ostr_, s3);
            StringTupleHelper.write(ostr_, s4);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            b1 = ByteStringHelper.read(istr_);
            b2 = ByteStringHelper.read(istr_);
            b3 = ByteListHelper.read(istr_);
            b4 = ByteListHelper.read(istr_);
            s1 = StringListHelper.read(istr_);
            s2 = StringListHelper.read(istr_);
            s3 = StringTupleHelper.read(istr_);
            s4 = StringTupleHelper.read(istr_);
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test::D")]
    public partial class D : Ice.Value
    {
        public bool[]? boolSeq;

        public byte[]? byteSeq;

        public short[]? shortSeq;

        public int[]? intSeq;

        public long[]? longSeq;

        public float[]? floatSeq;

        public double[]? doubleSeq;

        partial void ice_initialize();

        public D(bool[]? boolSeq, byte[]? byteSeq, short[]? shortSeq, int[]? intSeq, long[]? longSeq, float[]? floatSeq, double[]? doubleSeq)
        {
            this.boolSeq = boolSeq;
            this.byteSeq = byteSeq;
            this.shortSeq = shortSeq;
            this.intSeq = intSeq;
            this.longSeq = longSeq;
            this.floatSeq = floatSeq;
            this.doubleSeq = doubleSeq;
            ice_initialize();
        }

        public D()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::D";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeBoolSeq(1, boolSeq);
            ostr_.writeByteSeq(2, byteSeq);
            ostr_.writeShortSeq(3, shortSeq);
            ostr_.writeIntSeq(4, intSeq);
            ostr_.writeLongSeq(5, longSeq);
            ostr_.writeFloatSeq(6, floatSeq);
            ostr_.writeDoubleSeq(7, doubleSeq);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            boolSeq = istr_.readBoolSeq(1);
            byteSeq = istr_.readByteSeq(2);
            shortSeq = istr_.readShortSeq(3);
            intSeq = istr_.readIntSeq(4);
            longSeq = istr_.readLongSeq(5);
            floatSeq = istr_.readFloatSeq(6);
            doubleSeq = istr_.readDoubleSeq(7);
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test::Custom")]
    public partial interface Custom : Ice.Object
    {
        byte[] opByteString1(byte[] b1, out byte[] b2, Ice.Current current);

        byte[] opByteString2(byte[] b1, out byte[] b2, Ice.Current current);

        byte[] opByteList1(byte[] b1, out byte[] b2, Ice.Current current);

        byte[] opByteList2(byte[] b1, out byte[] b2, Ice.Current current);

        string[] opStringList1(string[] s1, out string[] s2, Ice.Current current);

        string[] opStringList2(string[] s1, out string[] s2, Ice.Current current);

        string[] opStringTuple1(string[] s1, out string[] s2, Ice.Current current);

        string[] opStringTuple2(string[] s1, out string[] s2, Ice.Current current);

        void sendS(S val, Ice.Current current);

        void sendC(C? val, Ice.Current current);

        bool[] opBoolSeq(bool[] v1, out bool[] v2, Ice.Current current);

        byte[] opByteSeq(byte[] v1, out byte[] v2, Ice.Current current);

        short[] opShortSeq(short[] v1, out short[] v2, Ice.Current current);

        int[] opIntSeq(int[] v1, out int[] v2, Ice.Current current);

        long[] opLongSeq(long[] v1, out long[] v2, Ice.Current current);

        float[] opFloatSeq(float[] v1, out float[] v2, Ice.Current current);

        double[] opDoubleSeq(double[] v1, out double[] v2, Ice.Current current);

        bool[] opBogusArrayNotExistsFactory(Ice.Current current);

        bool[] opBogusArrayThrowFactory(Ice.Current current);

        bool[] opBogusArrayType(Ice.Current current);

        bool[] opBogusArrayNoneFactory(Ice.Current current);

        bool[] opBogusArraySignatureFactory(Ice.Current current);

        bool[] opBogusArrayNoCallableFactory(Ice.Current current);

        D? opD(D? d, Ice.Current current);

        void shutdown(Ice.Current current);
    }
}

namespace Test
{
    public record struct Custom_OpByteString1Result(byte[] returnValue, byte[] b2);

    public record struct Custom_OpByteString2Result(byte[] returnValue, byte[] b2);

    public record struct Custom_OpByteList1Result(byte[] returnValue, byte[] b2);

    public record struct Custom_OpByteList2Result(byte[] returnValue, byte[] b2);

    public record struct Custom_OpStringList1Result(string[] returnValue, string[] s2);

    public record struct Custom_OpStringList2Result(string[] returnValue, string[] s2);

    public record struct Custom_OpStringTuple1Result(string[] returnValue, string[] s2);

    public record struct Custom_OpStringTuple2Result(string[] returnValue, string[] s2);

    public record struct Custom_OpBoolSeqResult(bool[] returnValue, bool[] v2);

    public record struct Custom_OpByteSeqResult(byte[] returnValue, byte[] v2);

    public record struct Custom_OpShortSeqResult(short[] returnValue, short[] v2);

    public record struct Custom_OpIntSeqResult(int[] returnValue, int[] v2);

    public record struct Custom_OpLongSeqResult(long[] returnValue, long[] v2);

    public record struct Custom_OpFloatSeqResult(float[] returnValue, float[] v2);

    public record struct Custom_OpDoubleSeqResult(double[] returnValue, double[] v2);
}

namespace Test
{
    public interface CustomPrx : Ice.ObjectPrx
    {
        byte[] opByteString1(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpByteString1Result> opByteString1Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteString2(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpByteString2Result> opByteString2Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteList1(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpByteList1Result> opByteList1Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteList2(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpByteList2Result> opByteList2Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringList1(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpStringList1Result> opStringList1Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringList2(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpStringList2Result> opStringList2Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringTuple1(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpStringTuple1Result> opStringTuple1Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringTuple2(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpStringTuple2Result> opStringTuple2Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void sendS(S val, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task sendSAsync(S val, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void sendC(C? val, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task sendCAsync(C? val, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBoolSeq(bool[] v1, out bool[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpBoolSeqResult> opBoolSeqAsync(bool[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteSeq(byte[] v1, out byte[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpByteSeqResult> opByteSeqAsync(byte[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        short[] opShortSeq(short[] v1, out short[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpShortSeqResult> opShortSeqAsync(short[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        int[] opIntSeq(int[] v1, out int[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpIntSeqResult> opIntSeqAsync(int[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        long[] opLongSeq(long[] v1, out long[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpLongSeqResult> opLongSeqAsync(long[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        float[] opFloatSeq(float[] v1, out float[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpFloatSeqResult> opFloatSeqAsync(float[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        double[] opDoubleSeq(double[] v1, out double[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Custom_OpDoubleSeqResult> opDoubleSeqAsync(double[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBogusArrayNotExistsFactory(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<bool[]> opBogusArrayNotExistsFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBogusArrayThrowFactory(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<bool[]> opBogusArrayThrowFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBogusArrayType(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<bool[]> opBogusArrayTypeAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBogusArrayNoneFactory(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<bool[]> opBogusArrayNoneFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBogusArraySignatureFactory(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<bool[]> opBogusArraySignatureFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBogusArrayNoCallableFactory(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<bool[]> opBogusArrayNoCallableFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        D? opD(D? d, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<D?> opDAsync(D? d, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    public sealed class ByteStringHelper
    {
        public static void write(Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    public sealed class ByteListHelper
    {
        public static void write(Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    public sealed class StringListHelper
    {
        public static void write(Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    public sealed class StringTupleHelper
    {
        public static void write(Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    public sealed class BoolSeq1Helper
    {
        public static void write(Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    public sealed class BoolSeq2Helper
    {
        public static void write(Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    public sealed class ByteSeq1Helper
    {
        public static void write(Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    public sealed class ByteSeq2Helper
    {
        public static void write(Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    public sealed class ShortSeq1Helper
    {
        public static void write(Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    public sealed class ShortSeq2Helper
    {
        public static void write(Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    public sealed class IntSeq1Helper
    {
        public static void write(Ice.OutputStream ostr, int[] v)
        {
            ostr.writeIntSeq(v);
        }

        public static int[] read(Ice.InputStream istr)
        {
            int[] v;
            v = istr.readIntSeq();
            return v;
        }
    }

    public sealed class IntSeq2Helper
    {
        public static void write(Ice.OutputStream ostr, int[] v)
        {
            ostr.writeIntSeq(v);
        }

        public static int[] read(Ice.InputStream istr)
        {
            int[] v;
            v = istr.readIntSeq();
            return v;
        }
    }

    public sealed class LongSeq1Helper
    {
        public static void write(Ice.OutputStream ostr, long[] v)
        {
            ostr.writeLongSeq(v);
        }

        public static long[] read(Ice.InputStream istr)
        {
            long[] v;
            v = istr.readLongSeq();
            return v;
        }
    }

    public sealed class LongSeq2Helper
    {
        public static void write(Ice.OutputStream ostr, long[] v)
        {
            ostr.writeLongSeq(v);
        }

        public static long[] read(Ice.InputStream istr)
        {
            long[] v;
            v = istr.readLongSeq();
            return v;
        }
    }

    public sealed class FloatSeq1Helper
    {
        public static void write(Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    public sealed class FloatSeq2Helper
    {
        public static void write(Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    public sealed class DoubleSeq1Helper
    {
        public static void write(Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    public sealed class DoubleSeq2Helper
    {
        public static void write(Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    public sealed class CustomPrxHelper : Ice.ObjectPrxHelperBase, CustomPrx
    {
        public byte[] opByteString1(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteString1Async(b1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                b2 = result_.b2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[] opByteString2(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteString2Async(b1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                b2 = result_.b2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[] opByteList1(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteList1Async(b1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                b2 = result_.b2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[] opByteList2(byte[] b1, out byte[] b2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteList2Async(b1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                b2 = result_.b2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringList1(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringList1Async(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringList2(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringList2Async(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringTuple1(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringTuple1Async(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringTuple2(string[] s1, out string[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringTuple2Async(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void sendS(S val, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_sendSAsync(val, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void sendC(C? val, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_sendCAsync(val, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBoolSeq(bool[] v1, out bool[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[] opByteSeq(byte[] v1, out byte[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short[] opShortSeq(short[] v1, out short[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int[] opIntSeq(int[] v1, out int[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long[] opLongSeq(long[] v1, out long[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public float[] opFloatSeq(float[] v1, out float[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double[] opDoubleSeq(double[] v1, out double[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opDoubleSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBogusArrayNotExistsFactory(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opBogusArrayNotExistsFactoryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBogusArrayThrowFactory(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opBogusArrayThrowFactoryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBogusArrayType(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opBogusArrayTypeAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBogusArrayNoneFactory(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opBogusArrayNoneFactoryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBogusArraySignatureFactory(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opBogusArraySignatureFactoryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBogusArrayNoCallableFactory(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opBogusArrayNoCallableFactoryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public D? opD(D? d, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opDAsync(d, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<Custom_OpByteString1Result> opByteString1Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteString1Async(b1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpByteString1Result> _iceI_opByteString1Async(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteString1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpByteString1Result>(progress, cancel);
            _iceI_opByteString1(iceP_b1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteString1_name = "opByteString1";

        private void _iceI_opByteString1(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpByteString1Result>(completed);
            outAsync.invoke(
                _opByteString1_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteStringHelper.write(ostr, iceP_b1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpByteString1Result();
                    ret.b2 = ByteStringHelper.read(istr);
                    ret.returnValue = ByteStringHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpByteString2Result> opByteString2Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteString2Async(b1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpByteString2Result> _iceI_opByteString2Async(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteString2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpByteString2Result>(progress, cancel);
            _iceI_opByteString2(iceP_b1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteString2_name = "opByteString2";

        private void _iceI_opByteString2(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpByteString2Result>(completed);
            outAsync.invoke(
                _opByteString2_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteStringHelper.write(ostr, iceP_b1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpByteString2Result();
                    ret.b2 = ByteStringHelper.read(istr);
                    ret.returnValue = ByteStringHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpByteList1Result> opByteList1Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteList1Async(b1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpByteList1Result> _iceI_opByteList1Async(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteList1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpByteList1Result>(progress, cancel);
            _iceI_opByteList1(iceP_b1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteList1_name = "opByteList1";

        private void _iceI_opByteList1(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpByteList1Result>(completed);
            outAsync.invoke(
                _opByteList1_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteListHelper.write(ostr, iceP_b1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpByteList1Result();
                    ret.b2 = ByteListHelper.read(istr);
                    ret.returnValue = ByteListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpByteList2Result> opByteList2Async(byte[] b1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteList2Async(b1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpByteList2Result> _iceI_opByteList2Async(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteList2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpByteList2Result>(progress, cancel);
            _iceI_opByteList2(iceP_b1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteList2_name = "opByteList2";

        private void _iceI_opByteList2(byte[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpByteList2Result>(completed);
            outAsync.invoke(
                _opByteList2_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteListHelper.write(ostr, iceP_b1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpByteList2Result();
                    ret.b2 = ByteListHelper.read(istr);
                    ret.returnValue = ByteListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpStringList1Result> opStringList1Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringList1Async(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpStringList1Result> _iceI_opStringList1Async(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringList1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpStringList1Result>(progress, cancel);
            _iceI_opStringList1(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringList1_name = "opStringList1";

        private void _iceI_opStringList1(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpStringList1Result>(completed);
            outAsync.invoke(
                _opStringList1_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringListHelper.write(ostr, iceP_s1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpStringList1Result();
                    ret.s2 = StringListHelper.read(istr);
                    ret.returnValue = StringListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpStringList2Result> opStringList2Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringList2Async(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpStringList2Result> _iceI_opStringList2Async(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringList2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpStringList2Result>(progress, cancel);
            _iceI_opStringList2(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringList2_name = "opStringList2";

        private void _iceI_opStringList2(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpStringList2Result>(completed);
            outAsync.invoke(
                _opStringList2_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringListHelper.write(ostr, iceP_s1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpStringList2Result();
                    ret.s2 = StringListHelper.read(istr);
                    ret.returnValue = StringListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpStringTuple1Result> opStringTuple1Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringTuple1Async(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpStringTuple1Result> _iceI_opStringTuple1Async(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringTuple1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpStringTuple1Result>(progress, cancel);
            _iceI_opStringTuple1(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringTuple1_name = "opStringTuple1";

        private void _iceI_opStringTuple1(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpStringTuple1Result>(completed);
            outAsync.invoke(
                _opStringTuple1_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringTupleHelper.write(ostr, iceP_s1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpStringTuple1Result();
                    ret.s2 = StringTupleHelper.read(istr);
                    ret.returnValue = StringTupleHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpStringTuple2Result> opStringTuple2Async(string[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringTuple2Async(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpStringTuple2Result> _iceI_opStringTuple2Async(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringTuple2_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpStringTuple2Result>(progress, cancel);
            _iceI_opStringTuple2(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringTuple2_name = "opStringTuple2";

        private void _iceI_opStringTuple2(string[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpStringTuple2Result>(completed);
            outAsync.invoke(
                _opStringTuple2_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringTupleHelper.write(ostr, iceP_s1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpStringTuple2Result();
                    ret.s2 = StringTupleHelper.read(istr);
                    ret.returnValue = StringTupleHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task sendSAsync(S val, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_sendSAsync(val, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_sendSAsync(S iceP_val, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_sendS(iceP_val, context, synchronous, completed);
            return completed.Task;
        }

        private const string _sendS_name = "sendS";

        private void _iceI_sendS(S iceP_val, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _sendS_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    S.ice_write(ostr, iceP_val);
                });
        }

        public global::System.Threading.Tasks.Task sendCAsync(C? val, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_sendCAsync(val, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_sendCAsync(C? iceP_val, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_sendC(iceP_val, context, synchronous, completed);
            return completed.Task;
        }

        private const string _sendC_name = "sendC";

        private void _iceI_sendC(C? iceP_val, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _sendC_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_val);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpBoolSeqResult> opBoolSeqAsync(bool[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpBoolSeqResult> _iceI_opBoolSeqAsync(bool[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpBoolSeqResult>(progress, cancel);
            _iceI_opBoolSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolSeq_name = "opBoolSeq";

        private void _iceI_opBoolSeq(bool[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpBoolSeqResult>(completed);
            outAsync.invoke(
                _opBoolSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    BoolSeq1Helper.write(ostr, iceP_v1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpBoolSeqResult();
                    ret.v2 = BoolSeq2Helper.read(istr);
                    ret.returnValue = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpByteSeqResult> opByteSeqAsync(byte[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpByteSeqResult> _iceI_opByteSeqAsync(byte[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpByteSeqResult>(progress, cancel);
            _iceI_opByteSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSeq_name = "opByteSeq";

        private void _iceI_opByteSeq(byte[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpByteSeqResult>(completed);
            outAsync.invoke(
                _opByteSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteSeq1Helper.write(ostr, iceP_v1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpByteSeqResult();
                    ret.v2 = ByteSeq2Helper.read(istr);
                    ret.returnValue = ByteSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpShortSeqResult> opShortSeqAsync(short[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpShortSeqResult> _iceI_opShortSeqAsync(short[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpShortSeqResult>(progress, cancel);
            _iceI_opShortSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortSeq_name = "opShortSeq";

        private void _iceI_opShortSeq(short[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpShortSeqResult>(completed);
            outAsync.invoke(
                _opShortSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortSeq1Helper.write(ostr, iceP_v1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpShortSeqResult();
                    ret.v2 = ShortSeq2Helper.read(istr);
                    ret.returnValue = ShortSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpIntSeqResult> opIntSeqAsync(int[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpIntSeqResult> _iceI_opIntSeqAsync(int[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpIntSeqResult>(progress, cancel);
            _iceI_opIntSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntSeq_name = "opIntSeq";

        private void _iceI_opIntSeq(int[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpIntSeqResult>(completed);
            outAsync.invoke(
                _opIntSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    IntSeq1Helper.write(ostr, iceP_v1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpIntSeqResult();
                    ret.v2 = IntSeq2Helper.read(istr);
                    ret.returnValue = IntSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpLongSeqResult> opLongSeqAsync(long[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpLongSeqResult> _iceI_opLongSeqAsync(long[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpLongSeqResult>(progress, cancel);
            _iceI_opLongSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongSeq_name = "opLongSeq";

        private void _iceI_opLongSeq(long[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpLongSeqResult>(completed);
            outAsync.invoke(
                _opLongSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    LongSeq1Helper.write(ostr, iceP_v1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpLongSeqResult();
                    ret.v2 = LongSeq2Helper.read(istr);
                    ret.returnValue = LongSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpFloatSeqResult> opFloatSeqAsync(float[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpFloatSeqResult> _iceI_opFloatSeqAsync(float[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpFloatSeqResult>(progress, cancel);
            _iceI_opFloatSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatSeq_name = "opFloatSeq";

        private void _iceI_opFloatSeq(float[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpFloatSeqResult>(completed);
            outAsync.invoke(
                _opFloatSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    FloatSeq1Helper.write(ostr, iceP_v1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpFloatSeqResult();
                    ret.v2 = FloatSeq2Helper.read(istr);
                    ret.returnValue = FloatSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Custom_OpDoubleSeqResult> opDoubleSeqAsync(double[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDoubleSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Custom_OpDoubleSeqResult> _iceI_opDoubleSeqAsync(double[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDoubleSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpDoubleSeqResult>(progress, cancel);
            _iceI_opDoubleSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDoubleSeq_name = "opDoubleSeq";

        private void _iceI_opDoubleSeq(double[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Custom_OpDoubleSeqResult>(completed);
            outAsync.invoke(
                _opDoubleSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    DoubleSeq1Helper.write(ostr, iceP_v1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new Custom_OpDoubleSeqResult();
                    ret.v2 = DoubleSeq2Helper.read(istr);
                    ret.returnValue = DoubleSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool[]> opBogusArrayNotExistsFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBogusArrayNotExistsFactoryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusArrayNotExistsFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBogusArrayNotExistsFactory_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
            _iceI_opBogusArrayNotExistsFactory(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBogusArrayNotExistsFactory_name = "opBogusArrayNotExistsFactory";

        private void _iceI_opBogusArrayNotExistsFactory(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool[]>(completed);
            outAsync.invoke(
                _opBogusArrayNotExistsFactory_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    bool[] ret;
                    ret = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool[]> opBogusArrayThrowFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBogusArrayThrowFactoryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusArrayThrowFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBogusArrayThrowFactory_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
            _iceI_opBogusArrayThrowFactory(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBogusArrayThrowFactory_name = "opBogusArrayThrowFactory";

        private void _iceI_opBogusArrayThrowFactory(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool[]>(completed);
            outAsync.invoke(
                _opBogusArrayThrowFactory_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    bool[] ret;
                    ret = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool[]> opBogusArrayTypeAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBogusArrayTypeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusArrayTypeAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBogusArrayType_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
            _iceI_opBogusArrayType(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBogusArrayType_name = "opBogusArrayType";

        private void _iceI_opBogusArrayType(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool[]>(completed);
            outAsync.invoke(
                _opBogusArrayType_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    bool[] ret;
                    ret = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool[]> opBogusArrayNoneFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBogusArrayNoneFactoryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusArrayNoneFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBogusArrayNoneFactory_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
            _iceI_opBogusArrayNoneFactory(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBogusArrayNoneFactory_name = "opBogusArrayNoneFactory";

        private void _iceI_opBogusArrayNoneFactory(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool[]>(completed);
            outAsync.invoke(
                _opBogusArrayNoneFactory_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    bool[] ret;
                    ret = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool[]> opBogusArraySignatureFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBogusArraySignatureFactoryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusArraySignatureFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBogusArraySignatureFactory_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
            _iceI_opBogusArraySignatureFactory(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBogusArraySignatureFactory_name = "opBogusArraySignatureFactory";

        private void _iceI_opBogusArraySignatureFactory(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool[]>(completed);
            outAsync.invoke(
                _opBogusArraySignatureFactory_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    bool[] ret;
                    ret = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool[]> opBogusArrayNoCallableFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBogusArrayNoCallableFactoryAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusArrayNoCallableFactoryAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBogusArrayNoCallableFactory_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
            _iceI_opBogusArrayNoCallableFactory(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBogusArrayNoCallableFactory_name = "opBogusArrayNoCallableFactory";

        private void _iceI_opBogusArrayNoCallableFactory(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool[]>(completed);
            outAsync.invoke(
                _opBogusArrayNoCallableFactory_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    bool[] ret;
                    ret = BoolSeq1Helper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<D?> opDAsync(D? d, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDAsync(d, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<D?> _iceI_opDAsync(D? iceP_d, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opD_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<D?>(progress, cancel);
            _iceI_opD(iceP_d, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opD_name = "opD";

        private void _iceI_opD(D? iceP_d, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<D?>(completed);
            outAsync.invoke(
                _opD_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_d);
                    ostr.writePendingValues();
                },
                read: (Ice.InputStream istr) =>
                {
                    D? ret = null;
                    istr.readValue((D? v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public static CustomPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new CustomPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static CustomPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new CustomPrxHelper(b) : null;

        public static CustomPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static CustomPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new CustomPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static CustomPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Custom"
        };

        public static string ice_staticId() => "::Test::Custom";

        public static void write(Ice.OutputStream ostr, CustomPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static CustomPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new CustomPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new CustomPrxHelper(reference);

        private CustomPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private CustomPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test
{
    public abstract class CustomDisp_ : Ice.ObjectImpl, Custom
    {
        public abstract byte[] opByteString1(byte[] b1, out byte[] b2, Ice.Current current);

        public abstract byte[] opByteString2(byte[] b1, out byte[] b2, Ice.Current current);

        public abstract byte[] opByteList1(byte[] b1, out byte[] b2, Ice.Current current);

        public abstract byte[] opByteList2(byte[] b1, out byte[] b2, Ice.Current current);

        public abstract string[] opStringList1(string[] s1, out string[] s2, Ice.Current current);

        public abstract string[] opStringList2(string[] s1, out string[] s2, Ice.Current current);

        public abstract string[] opStringTuple1(string[] s1, out string[] s2, Ice.Current current);

        public abstract string[] opStringTuple2(string[] s1, out string[] s2, Ice.Current current);

        public abstract void sendS(S val, Ice.Current current);

        public abstract void sendC(C? val, Ice.Current current);

        public abstract bool[] opBoolSeq(bool[] v1, out bool[] v2, Ice.Current current);

        public abstract byte[] opByteSeq(byte[] v1, out byte[] v2, Ice.Current current);

        public abstract short[] opShortSeq(short[] v1, out short[] v2, Ice.Current current);

        public abstract int[] opIntSeq(int[] v1, out int[] v2, Ice.Current current);

        public abstract long[] opLongSeq(long[] v1, out long[] v2, Ice.Current current);

        public abstract float[] opFloatSeq(float[] v1, out float[] v2, Ice.Current current);

        public abstract double[] opDoubleSeq(double[] v1, out double[] v2, Ice.Current current);

        public abstract bool[] opBogusArrayNotExistsFactory(Ice.Current current);

        public abstract bool[] opBogusArrayThrowFactory(Ice.Current current);

        public abstract bool[] opBogusArrayType(Ice.Current current);

        public abstract bool[] opBogusArrayNoneFactory(Ice.Current current);

        public abstract bool[] opBogusArraySignatureFactory(Ice.Current current);

        public abstract bool[] opBogusArrayNoCallableFactory(Ice.Current current);

        public abstract D? opD(D? d, Ice.Current current);

        public abstract void shutdown(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::Custom";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "opByteString1" => Custom.iceD_opByteString1Async(this, request),
                "opByteString2" => Custom.iceD_opByteString2Async(this, request),
                "opByteList1" => Custom.iceD_opByteList1Async(this, request),
                "opByteList2" => Custom.iceD_opByteList2Async(this, request),
                "opStringList1" => Custom.iceD_opStringList1Async(this, request),
                "opStringList2" => Custom.iceD_opStringList2Async(this, request),
                "opStringTuple1" => Custom.iceD_opStringTuple1Async(this, request),
                "opStringTuple2" => Custom.iceD_opStringTuple2Async(this, request),
                "sendS" => Custom.iceD_sendSAsync(this, request),
                "sendC" => Custom.iceD_sendCAsync(this, request),
                "opBoolSeq" => Custom.iceD_opBoolSeqAsync(this, request),
                "opByteSeq" => Custom.iceD_opByteSeqAsync(this, request),
                "opShortSeq" => Custom.iceD_opShortSeqAsync(this, request),
                "opIntSeq" => Custom.iceD_opIntSeqAsync(this, request),
                "opLongSeq" => Custom.iceD_opLongSeqAsync(this, request),
                "opFloatSeq" => Custom.iceD_opFloatSeqAsync(this, request),
                "opDoubleSeq" => Custom.iceD_opDoubleSeqAsync(this, request),
                "opBogusArrayNotExistsFactory" => Custom.iceD_opBogusArrayNotExistsFactoryAsync(this, request),
                "opBogusArrayThrowFactory" => Custom.iceD_opBogusArrayThrowFactoryAsync(this, request),
                "opBogusArrayType" => Custom.iceD_opBogusArrayTypeAsync(this, request),
                "opBogusArrayNoneFactory" => Custom.iceD_opBogusArrayNoneFactoryAsync(this, request),
                "opBogusArraySignatureFactory" => Custom.iceD_opBogusArraySignatureFactoryAsync(this, request),
                "opBogusArrayNoCallableFactory" => Custom.iceD_opBogusArrayNoCallableFactoryAsync(this, request),
                "opD" => Custom.iceD_opDAsync(this, request),
                "shutdown" => Custom.iceD_shutdownAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test
{
    public partial interface Custom
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteString1Async(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_b1;
            iceP_b1 = ByteStringHelper.read(istr);
            istr.endEncapsulation();
            byte[] iceP_b2;
            var ret = obj.opByteString1(iceP_b1, out iceP_b2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ByteStringHelper.write(ostr, iceP_b2);
            ByteStringHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteString2Async(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_b1;
            iceP_b1 = ByteStringHelper.read(istr);
            istr.endEncapsulation();
            byte[] iceP_b2;
            var ret = obj.opByteString2(iceP_b1, out iceP_b2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ByteStringHelper.write(ostr, iceP_b2);
            ByteStringHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteList1Async(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_b1;
            iceP_b1 = ByteListHelper.read(istr);
            istr.endEncapsulation();
            byte[] iceP_b2;
            var ret = obj.opByteList1(iceP_b1, out iceP_b2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ByteListHelper.write(ostr, iceP_b2);
            ByteListHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteList2Async(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_b1;
            iceP_b1 = ByteListHelper.read(istr);
            istr.endEncapsulation();
            byte[] iceP_b2;
            var ret = obj.opByteList2(iceP_b1, out iceP_b2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ByteListHelper.write(ostr, iceP_b2);
            ByteListHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringList1Async(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[] iceP_s1;
            iceP_s1 = StringListHelper.read(istr);
            istr.endEncapsulation();
            string[] iceP_s2;
            var ret = obj.opStringList1(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            StringListHelper.write(ostr, iceP_s2);
            StringListHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringList2Async(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[] iceP_s1;
            iceP_s1 = StringListHelper.read(istr);
            istr.endEncapsulation();
            string[] iceP_s2;
            var ret = obj.opStringList2(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            StringListHelper.write(ostr, iceP_s2);
            StringListHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringTuple1Async(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[] iceP_s1;
            iceP_s1 = StringTupleHelper.read(istr);
            istr.endEncapsulation();
            string[] iceP_s2;
            var ret = obj.opStringTuple1(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            StringTupleHelper.write(ostr, iceP_s2);
            StringTupleHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringTuple2Async(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[] iceP_s1;
            iceP_s1 = StringTupleHelper.read(istr);
            istr.endEncapsulation();
            string[] iceP_s2;
            var ret = obj.opStringTuple2(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            StringTupleHelper.write(ostr, iceP_s2);
            StringTupleHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_sendSAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            S iceP_val;
            iceP_val = new S(istr);
            istr.endEncapsulation();
            obj.sendS(iceP_val, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_sendCAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            C? iceP_val = null;
            istr.readValue((C? v) => { iceP_val = v; });
            istr.readPendingValues();
            istr.endEncapsulation();
            obj.sendC(iceP_val, request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBoolSeqAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            bool[] iceP_v1;
            iceP_v1 = BoolSeq1Helper.read(istr);
            istr.endEncapsulation();
            bool[] iceP_v2;
            var ret = obj.opBoolSeq(iceP_v1, out iceP_v2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            BoolSeq2Helper.write(ostr, iceP_v2);
            BoolSeq1Helper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteSeqAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_v1;
            iceP_v1 = ByteSeq1Helper.read(istr);
            istr.endEncapsulation();
            byte[] iceP_v2;
            var ret = obj.opByteSeq(iceP_v1, out iceP_v2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ByteSeq2Helper.write(ostr, iceP_v2);
            ByteSeq1Helper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortSeqAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            short[] iceP_v1;
            iceP_v1 = ShortSeq1Helper.read(istr);
            istr.endEncapsulation();
            short[] iceP_v2;
            var ret = obj.opShortSeq(iceP_v1, out iceP_v2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ShortSeq2Helper.write(ostr, iceP_v2);
            ShortSeq1Helper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opIntSeqAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            int[] iceP_v1;
            iceP_v1 = IntSeq1Helper.read(istr);
            istr.endEncapsulation();
            int[] iceP_v2;
            var ret = obj.opIntSeq(iceP_v1, out iceP_v2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            IntSeq2Helper.write(ostr, iceP_v2);
            IntSeq1Helper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLongSeqAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            long[] iceP_v1;
            iceP_v1 = LongSeq1Helper.read(istr);
            istr.endEncapsulation();
            long[] iceP_v2;
            var ret = obj.opLongSeq(iceP_v1, out iceP_v2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            LongSeq2Helper.write(ostr, iceP_v2);
            LongSeq1Helper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opFloatSeqAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            float[] iceP_v1;
            iceP_v1 = FloatSeq1Helper.read(istr);
            istr.endEncapsulation();
            float[] iceP_v2;
            var ret = obj.opFloatSeq(iceP_v1, out iceP_v2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            FloatSeq2Helper.write(ostr, iceP_v2);
            FloatSeq1Helper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opDoubleSeqAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            double[] iceP_v1;
            iceP_v1 = DoubleSeq1Helper.read(istr);
            istr.endEncapsulation();
            double[] iceP_v2;
            var ret = obj.opDoubleSeq(iceP_v1, out iceP_v2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            DoubleSeq2Helper.write(ostr, iceP_v2);
            DoubleSeq1Helper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBogusArrayNotExistsFactoryAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.opBogusArrayNotExistsFactory(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            BoolSeq1Helper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBogusArrayThrowFactoryAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.opBogusArrayThrowFactory(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            BoolSeq1Helper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBogusArrayTypeAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.opBogusArrayType(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            BoolSeq1Helper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBogusArrayNoneFactoryAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.opBogusArrayNoneFactory(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            BoolSeq1Helper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBogusArraySignatureFactoryAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.opBogusArraySignatureFactory(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            BoolSeq1Helper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBogusArrayNoCallableFactoryAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.opBogusArrayNoCallableFactory(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            BoolSeq1Helper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opDAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            D? iceP_d = null;
            istr.readValue((D? v) => { iceP_d = v; });
            istr.readPendingValues();
            istr.endEncapsulation();
            var ret = obj.opD(iceP_d, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
            Custom obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.shutdown(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }
}
