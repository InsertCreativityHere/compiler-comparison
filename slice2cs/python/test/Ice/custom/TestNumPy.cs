//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestNumPy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("TestNumPy.ice")]

#pragma warning disable 1591

namespace Test
{
    namespace NumPy
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::NumPy::D")]
        public partial class D : Ice.Value
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public bool[]? boolSeq;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public byte[]? byteSeq;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public short[]? shortSeq;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int[]? intSeq;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public long[]? longSeq;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public float[]? floatSeq;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public double[]? doubleSeq;

            partial void ice_initialize();

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public D(bool[]? boolSeq, byte[]? byteSeq, short[]? shortSeq, int[]? intSeq, long[]? longSeq, float[]? floatSeq, double[]? doubleSeq)
            {
                this.boolSeq = boolSeq;
                this.byteSeq = byteSeq;
                this.shortSeq = shortSeq;
                this.intSeq = intSeq;
                this.longSeq = longSeq;
                this.floatSeq = floatSeq;
                this.doubleSeq = doubleSeq;
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public D()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId() => "::Test::NumPy::D";
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id() => ice_staticId();

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeBoolSeq(1, boolSeq);
                ostr_.writeByteSeq(2, byteSeq);
                ostr_.writeShortSeq(3, shortSeq);
                ostr_.writeIntSeq(4, intSeq);
                ostr_.writeLongSeq(5, longSeq);
                ostr_.writeFloatSeq(6, floatSeq);
                ostr_.writeDoubleSeq(7, doubleSeq);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                if (istr_.readOptional(1, Ice.OptionalFormat.VSize))
                {
                    bool[] tmpVal;
                    tmpVal = BoolSeq1Helper.read(istr_);
                    boolSeq = tmpVal;
                }
                else
                {
                    boolSeq = null;
                }
                if (istr_.readOptional(2, Ice.OptionalFormat.VSize))
                {
                    byte[] tmpVal;
                    tmpVal = ByteSeq1Helper.read(istr_);
                    byteSeq = tmpVal;
                }
                else
                {
                    byteSeq = null;
                }
                if (istr_.readOptional(3, Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    short[] tmpVal;
                    tmpVal = ShortSeq1Helper.read(istr_);
                    shortSeq = tmpVal;
                }
                else
                {
                    shortSeq = null;
                }
                if (istr_.readOptional(4, Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    int[] tmpVal;
                    tmpVal = IntSeq1Helper.read(istr_);
                    intSeq = tmpVal;
                }
                else
                {
                    intSeq = null;
                }
                if (istr_.readOptional(5, Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    long[] tmpVal;
                    tmpVal = LongSeq1Helper.read(istr_);
                    longSeq = tmpVal;
                }
                else
                {
                    longSeq = null;
                }
                if (istr_.readOptional(6, Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    float[] tmpVal;
                    tmpVal = FloatSeq1Helper.read(istr_);
                    floatSeq = tmpVal;
                }
                else
                {
                    floatSeq = null;
                }
                if (istr_.readOptional(7, Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    double[] tmpVal;
                    tmpVal = DoubleSeq1Helper.read(istr_);
                    doubleSeq = tmpVal;
                }
                else
                {
                    doubleSeq = null;
                }
                istr_.endSlice();
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::NumPy::Custom")]
        public partial interface Custom : Ice.Object
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            bool[] opBoolSeq(bool[] v1, out bool[] v2, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            byte[] opByteSeq(byte[] v1, out byte[] v2, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            short[] opShortSeq(short[] v1, out short[] v2, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            int[] opIntSeq(int[] v1, out int[] v2, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            long[] opLongSeq(long[] v1, out long[] v2, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            float[] opFloatSeq(float[] v1, out float[] v2, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            double[] opDoubleSeq(double[] v1, out double[] v2, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            byte[] opComplex128Seq(byte[] v1, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            bool[] opBoolMatrix(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            byte[] opByteMatrix(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            short[] opShortMatrix(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            int[] opIntMatrix(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            long[] opLongMatrix(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            float[] opFloatMatrix(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            double[] opDoubleMatrix(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            bool[] opBogusNumpyArrayType(Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            D? opD(D? d, Ice.Current current);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            void shutdown(Ice.Current current);
        }
    }
}

namespace Test
{
    namespace NumPy
    {
        public record struct Custom_OpBoolSeqResult(bool[] returnValue, bool[] v2);

        public record struct Custom_OpByteSeqResult(byte[] returnValue, byte[] v2);

        public record struct Custom_OpShortSeqResult(short[] returnValue, short[] v2);

        public record struct Custom_OpIntSeqResult(int[] returnValue, int[] v2);

        public record struct Custom_OpLongSeqResult(long[] returnValue, long[] v2);

        public record struct Custom_OpFloatSeqResult(float[] returnValue, float[] v2);

        public record struct Custom_OpDoubleSeqResult(double[] returnValue, double[] v2);
    }
}

namespace Test
{
    namespace NumPy
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public interface CustomPrx : Ice.ObjectPrx
        {
            bool[] opBoolSeq(bool[] v1, out bool[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Custom_OpBoolSeqResult> opBoolSeqAsync(bool[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            byte[] opByteSeq(byte[] v1, out byte[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Custom_OpByteSeqResult> opByteSeqAsync(byte[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            short[] opShortSeq(short[] v1, out short[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Custom_OpShortSeqResult> opShortSeqAsync(short[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            int[] opIntSeq(int[] v1, out int[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Custom_OpIntSeqResult> opIntSeqAsync(int[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            long[] opLongSeq(long[] v1, out long[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Custom_OpLongSeqResult> opLongSeqAsync(long[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            float[] opFloatSeq(float[] v1, out float[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Custom_OpFloatSeqResult> opFloatSeqAsync(float[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            double[] opDoubleSeq(double[] v1, out double[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<Custom_OpDoubleSeqResult> opDoubleSeqAsync(double[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            byte[] opComplex128Seq(byte[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<byte[]> opComplex128SeqAsync(byte[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            bool[] opBoolMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<bool[]> opBoolMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            byte[] opByteMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<byte[]> opByteMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            short[] opShortMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<short[]> opShortMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            int[] opIntMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<int[]> opIntMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            long[] opLongMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<long[]> opLongMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            float[] opFloatMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<float[]> opFloatMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            double[] opDoubleMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<double[]> opDoubleMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            bool[] opBogusNumpyArrayType(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<bool[]> opBogusNumpyArrayTypeAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            D? opD(D? d, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<D?> opDAsync(D? d, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Test
{
    namespace NumPy
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class BoolSeq1Helper
        {
            public static void write(Ice.OutputStream ostr, bool[] v)
            {
                ostr.writeBoolSeq(v);
            }

            public static bool[] read(Ice.InputStream istr)
            {
                bool[] v;
                v = istr.readBoolSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class BoolSeq2Helper
        {
            public static void write(Ice.OutputStream ostr, bool[] v)
            {
                ostr.writeBoolSeq(v);
            }

            public static bool[] read(Ice.InputStream istr)
            {
                bool[] v;
                v = istr.readBoolSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ByteSeq1Helper
        {
            public static void write(Ice.OutputStream ostr, byte[] v)
            {
                ostr.writeByteSeq(v);
            }

            public static byte[] read(Ice.InputStream istr)
            {
                byte[] v;
                v = istr.readByteSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ByteSeq2Helper
        {
            public static void write(Ice.OutputStream ostr, byte[] v)
            {
                ostr.writeByteSeq(v);
            }

            public static byte[] read(Ice.InputStream istr)
            {
                byte[] v;
                v = istr.readByteSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ShortSeq1Helper
        {
            public static void write(Ice.OutputStream ostr, short[] v)
            {
                ostr.writeShortSeq(v);
            }

            public static short[] read(Ice.InputStream istr)
            {
                short[] v;
                v = istr.readShortSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class ShortSeq2Helper
        {
            public static void write(Ice.OutputStream ostr, short[] v)
            {
                ostr.writeShortSeq(v);
            }

            public static short[] read(Ice.InputStream istr)
            {
                short[] v;
                v = istr.readShortSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntSeq1Helper
        {
            public static void write(Ice.OutputStream ostr, int[] v)
            {
                ostr.writeIntSeq(v);
            }

            public static int[] read(Ice.InputStream istr)
            {
                int[] v;
                v = istr.readIntSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class IntSeq2Helper
        {
            public static void write(Ice.OutputStream ostr, int[] v)
            {
                ostr.writeIntSeq(v);
            }

            public static int[] read(Ice.InputStream istr)
            {
                int[] v;
                v = istr.readIntSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LongSeq1Helper
        {
            public static void write(Ice.OutputStream ostr, long[] v)
            {
                ostr.writeLongSeq(v);
            }

            public static long[] read(Ice.InputStream istr)
            {
                long[] v;
                v = istr.readLongSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class LongSeq2Helper
        {
            public static void write(Ice.OutputStream ostr, long[] v)
            {
                ostr.writeLongSeq(v);
            }

            public static long[] read(Ice.InputStream istr)
            {
                long[] v;
                v = istr.readLongSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class FloatSeq1Helper
        {
            public static void write(Ice.OutputStream ostr, float[] v)
            {
                ostr.writeFloatSeq(v);
            }

            public static float[] read(Ice.InputStream istr)
            {
                float[] v;
                v = istr.readFloatSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class FloatSeq2Helper
        {
            public static void write(Ice.OutputStream ostr, float[] v)
            {
                ostr.writeFloatSeq(v);
            }

            public static float[] read(Ice.InputStream istr)
            {
                float[] v;
                v = istr.readFloatSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class DoubleSeq1Helper
        {
            public static void write(Ice.OutputStream ostr, double[] v)
            {
                ostr.writeDoubleSeq(v);
            }

            public static double[] read(Ice.InputStream istr)
            {
                double[] v;
                v = istr.readDoubleSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class DoubleSeq2Helper
        {
            public static void write(Ice.OutputStream ostr, double[] v)
            {
                ostr.writeDoubleSeq(v);
            }

            public static double[] read(Ice.InputStream istr)
            {
                double[] v;
                v = istr.readDoubleSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class Complex128SeqHelper
        {
            public static void write(Ice.OutputStream ostr, byte[] v)
            {
                ostr.writeByteSeq(v);
            }

            public static byte[] read(Ice.InputStream istr)
            {
                byte[] v;
                v = istr.readByteSeq();
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public sealed class CustomPrxHelper : Ice.ObjectPrxHelperBase, CustomPrx
        {
            public bool[] opBoolSeq(bool[] v1, out bool[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opBoolSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public byte[] opByteSeq(byte[] v1, out byte[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opByteSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public short[] opShortSeq(short[] v1, out short[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opShortSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public int[] opIntSeq(int[] v1, out int[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opIntSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public long[] opLongSeq(long[] v1, out long[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opLongSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public float[] opFloatSeq(float[] v1, out float[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opFloatSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public double[] opDoubleSeq(double[] v1, out double[] v2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opDoubleSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public byte[] opComplex128Seq(byte[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opComplex128SeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public bool[] opBoolMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opBoolMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public byte[] opByteMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opByteMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public short[] opShortMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opShortMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public int[] opIntMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opIntMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public long[] opLongMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opLongMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public float[] opFloatMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opFloatMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public double[] opDoubleMatrix(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opDoubleMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public bool[] opBogusNumpyArrayType(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opBogusNumpyArrayTypeAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public D? opD(D? d, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_opDAsync(d, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task<Custom_OpBoolSeqResult> opBoolSeqAsync(bool[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opBoolSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpBoolSeqResult> _iceI_opBoolSeqAsync(bool[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBoolSeq_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpBoolSeqResult>(progress, cancel);
                _iceI_opBoolSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBoolSeq_name = "opBoolSeq";

            private void _iceI_opBoolSeq(bool[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpBoolSeqResult>(completed);
                outAsync.invoke(
                    _opBoolSeq_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        BoolSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Custom_OpBoolSeqResult();
                        ret.v2 = BoolSeq2Helper.read(istr);
                        ret.returnValue = BoolSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Custom_OpByteSeqResult> opByteSeqAsync(byte[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opByteSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpByteSeqResult> _iceI_opByteSeqAsync(byte[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteSeq_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpByteSeqResult>(progress, cancel);
                _iceI_opByteSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteSeq_name = "opByteSeq";

            private void _iceI_opByteSeq(byte[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpByteSeqResult>(completed);
                outAsync.invoke(
                    _opByteSeq_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ByteSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Custom_OpByteSeqResult();
                        ret.v2 = ByteSeq2Helper.read(istr);
                        ret.returnValue = ByteSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Custom_OpShortSeqResult> opShortSeqAsync(short[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opShortSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpShortSeqResult> _iceI_opShortSeqAsync(short[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortSeq_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpShortSeqResult>(progress, cancel);
                _iceI_opShortSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortSeq_name = "opShortSeq";

            private void _iceI_opShortSeq(short[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpShortSeqResult>(completed);
                outAsync.invoke(
                    _opShortSeq_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ShortSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Custom_OpShortSeqResult();
                        ret.v2 = ShortSeq2Helper.read(istr);
                        ret.returnValue = ShortSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Custom_OpIntSeqResult> opIntSeqAsync(int[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opIntSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpIntSeqResult> _iceI_opIntSeqAsync(int[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opIntSeq_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpIntSeqResult>(progress, cancel);
                _iceI_opIntSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opIntSeq_name = "opIntSeq";

            private void _iceI_opIntSeq(int[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpIntSeqResult>(completed);
                outAsync.invoke(
                    _opIntSeq_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        IntSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Custom_OpIntSeqResult();
                        ret.v2 = IntSeq2Helper.read(istr);
                        ret.returnValue = IntSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Custom_OpLongSeqResult> opLongSeqAsync(long[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLongSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpLongSeqResult> _iceI_opLongSeqAsync(long[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLongSeq_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpLongSeqResult>(progress, cancel);
                _iceI_opLongSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLongSeq_name = "opLongSeq";

            private void _iceI_opLongSeq(long[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpLongSeqResult>(completed);
                outAsync.invoke(
                    _opLongSeq_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        LongSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Custom_OpLongSeqResult();
                        ret.v2 = LongSeq2Helper.read(istr);
                        ret.returnValue = LongSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Custom_OpFloatSeqResult> opFloatSeqAsync(float[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opFloatSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpFloatSeqResult> _iceI_opFloatSeqAsync(float[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloatSeq_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpFloatSeqResult>(progress, cancel);
                _iceI_opFloatSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloatSeq_name = "opFloatSeq";

            private void _iceI_opFloatSeq(float[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpFloatSeqResult>(completed);
                outAsync.invoke(
                    _opFloatSeq_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        FloatSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Custom_OpFloatSeqResult();
                        ret.v2 = FloatSeq2Helper.read(istr);
                        ret.returnValue = FloatSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Custom_OpDoubleSeqResult> opDoubleSeqAsync(double[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opDoubleSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpDoubleSeqResult> _iceI_opDoubleSeqAsync(double[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opDoubleSeq_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<Custom_OpDoubleSeqResult>(progress, cancel);
                _iceI_opDoubleSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opDoubleSeq_name = "opDoubleSeq";

            private void _iceI_opDoubleSeq(double[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpDoubleSeqResult>(completed);
                outAsync.invoke(
                    _opDoubleSeq_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        DoubleSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new Custom_OpDoubleSeqResult();
                        ret.v2 = DoubleSeq2Helper.read(istr);
                        ret.returnValue = DoubleSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<byte[]> opComplex128SeqAsync(byte[] v1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opComplex128SeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte[]> _iceI_opComplex128SeqAsync(byte[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opComplex128Seq_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
                _iceI_opComplex128Seq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opComplex128Seq_name = "opComplex128Seq";

            private void _iceI_opComplex128Seq(byte[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte[]>(completed);
                outAsync.invoke(
                    _opComplex128Seq_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        Complex128SeqHelper.write(ostr, iceP_v1);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        byte[] ret;
                        ret = Complex128SeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<bool[]> opBoolMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opBoolMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool[]> _iceI_opBoolMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBoolMatrix_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                _iceI_opBoolMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBoolMatrix_name = "opBoolMatrix";

            private void _iceI_opBoolMatrix(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool[]>(completed);
                outAsync.invoke(
                    _opBoolMatrix_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        bool[] ret;
                        ret = BoolSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<byte[]> opByteMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opByteMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte[]> _iceI_opByteMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteMatrix_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
                _iceI_opByteMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteMatrix_name = "opByteMatrix";

            private void _iceI_opByteMatrix(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte[]>(completed);
                outAsync.invoke(
                    _opByteMatrix_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        byte[] ret;
                        ret = ByteSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<short[]> opShortMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opShortMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<short[]> _iceI_opShortMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortMatrix_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<short[]>(progress, cancel);
                _iceI_opShortMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortMatrix_name = "opShortMatrix";

            private void _iceI_opShortMatrix(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<short[]>(completed);
                outAsync.invoke(
                    _opShortMatrix_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        short[] ret;
                        ret = ShortSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<int[]> opIntMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opIntMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int[]> _iceI_opIntMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opIntMatrix_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<int[]>(progress, cancel);
                _iceI_opIntMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opIntMatrix_name = "opIntMatrix";

            private void _iceI_opIntMatrix(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int[]>(completed);
                outAsync.invoke(
                    _opIntMatrix_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        int[] ret;
                        ret = IntSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<long[]> opLongMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opLongMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<long[]> _iceI_opLongMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLongMatrix_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<long[]>(progress, cancel);
                _iceI_opLongMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLongMatrix_name = "opLongMatrix";

            private void _iceI_opLongMatrix(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<long[]>(completed);
                outAsync.invoke(
                    _opLongMatrix_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        long[] ret;
                        ret = LongSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<float[]> opFloatMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opFloatMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<float[]> _iceI_opFloatMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloatMatrix_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<float[]>(progress, cancel);
                _iceI_opFloatMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloatMatrix_name = "opFloatMatrix";

            private void _iceI_opFloatMatrix(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<float[]>(completed);
                outAsync.invoke(
                    _opFloatMatrix_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        float[] ret;
                        ret = FloatSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<double[]> opDoubleMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opDoubleMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<double[]> _iceI_opDoubleMatrixAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opDoubleMatrix_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<double[]>(progress, cancel);
                _iceI_opDoubleMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opDoubleMatrix_name = "opDoubleMatrix";

            private void _iceI_opDoubleMatrix(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<double[]>(completed);
                outAsync.invoke(
                    _opDoubleMatrix_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        double[] ret;
                        ret = DoubleSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<bool[]> opBogusNumpyArrayTypeAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opBogusNumpyArrayTypeAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusNumpyArrayTypeAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBogusNumpyArrayType_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                _iceI_opBogusNumpyArrayType(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBogusNumpyArrayType_name = "opBogusNumpyArrayType";

            private void _iceI_opBogusNumpyArrayType(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool[]>(completed);
                outAsync.invoke(
                    _opBogusNumpyArrayType_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    read: (Ice.InputStream istr) =>
                    {
                        bool[] ret;
                        ret = BoolSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<D?> opDAsync(D? d, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opDAsync(d, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<D?> _iceI_opDAsync(D? iceP_d, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opD_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<D?>(progress, cancel);
                _iceI_opD(iceP_d, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opD_name = "opD";

            private void _iceI_opD(D? iceP_d, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<D?>(completed);
                outAsync.invoke(
                    _opD_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_d);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        D? ret = null;
                        istr.readValue((D? v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public static CustomPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new CustomPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static CustomPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new CustomPrxHelper(b) : null;

            public static CustomPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static CustomPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new CustomPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static CustomPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::NumPy::Custom"
            };

            public static string ice_staticId() => "::Test::NumPy::Custom";

            public static void write(Ice.OutputStream ostr, CustomPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static CustomPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new CustomPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new CustomPrxHelper(reference);

            private CustomPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private CustomPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }
}

namespace Test
{
    namespace NumPy
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public abstract class CustomDisp_ : Ice.ObjectImpl, Custom
        {
            public abstract bool[] opBoolSeq(bool[] v1, out bool[] v2, Ice.Current current);

            public abstract byte[] opByteSeq(byte[] v1, out byte[] v2, Ice.Current current);

            public abstract short[] opShortSeq(short[] v1, out short[] v2, Ice.Current current);

            public abstract int[] opIntSeq(int[] v1, out int[] v2, Ice.Current current);

            public abstract long[] opLongSeq(long[] v1, out long[] v2, Ice.Current current);

            public abstract float[] opFloatSeq(float[] v1, out float[] v2, Ice.Current current);

            public abstract double[] opDoubleSeq(double[] v1, out double[] v2, Ice.Current current);

            public abstract byte[] opComplex128Seq(byte[] v1, Ice.Current current);

            public abstract bool[] opBoolMatrix(Ice.Current current);

            public abstract byte[] opByteMatrix(Ice.Current current);

            public abstract short[] opShortMatrix(Ice.Current current);

            public abstract int[] opIntMatrix(Ice.Current current);

            public abstract long[] opLongMatrix(Ice.Current current);

            public abstract float[] opFloatMatrix(Ice.Current current);

            public abstract double[] opDoubleMatrix(Ice.Current current);

            public abstract bool[] opBogusNumpyArrayType(Ice.Current current);

            public abstract D? opD(D? d, Ice.Current current);

            public abstract void shutdown(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::NumPy::Custom";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "opBoolSeq" => Custom.iceD_opBoolSeqAsync(this, request),
                    "opByteSeq" => Custom.iceD_opByteSeqAsync(this, request),
                    "opShortSeq" => Custom.iceD_opShortSeqAsync(this, request),
                    "opIntSeq" => Custom.iceD_opIntSeqAsync(this, request),
                    "opLongSeq" => Custom.iceD_opLongSeqAsync(this, request),
                    "opFloatSeq" => Custom.iceD_opFloatSeqAsync(this, request),
                    "opDoubleSeq" => Custom.iceD_opDoubleSeqAsync(this, request),
                    "opComplex128Seq" => Custom.iceD_opComplex128SeqAsync(this, request),
                    "opBoolMatrix" => Custom.iceD_opBoolMatrixAsync(this, request),
                    "opByteMatrix" => Custom.iceD_opByteMatrixAsync(this, request),
                    "opShortMatrix" => Custom.iceD_opShortMatrixAsync(this, request),
                    "opIntMatrix" => Custom.iceD_opIntMatrixAsync(this, request),
                    "opLongMatrix" => Custom.iceD_opLongMatrixAsync(this, request),
                    "opFloatMatrix" => Custom.iceD_opFloatMatrixAsync(this, request),
                    "opDoubleMatrix" => Custom.iceD_opDoubleMatrixAsync(this, request),
                    "opBogusNumpyArrayType" => Custom.iceD_opBogusNumpyArrayTypeAsync(this, request),
                    "opD" => Custom.iceD_opDAsync(this, request),
                    "shutdown" => Custom.iceD_shutdownAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}

namespace Test
{
    namespace NumPy
    {
        public partial interface Custom
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBoolSeqAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                bool[] iceP_v1;
                iceP_v1 = BoolSeq1Helper.read(istr);
                istr.endEncapsulation();
                bool[] iceP_v2;
                var ret = obj.opBoolSeq(iceP_v1, out iceP_v2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                BoolSeq2Helper.write(ostr, iceP_v2);
                BoolSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteSeqAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                byte[] iceP_v1;
                iceP_v1 = ByteSeq1Helper.read(istr);
                istr.endEncapsulation();
                byte[] iceP_v2;
                var ret = obj.opByteSeq(iceP_v1, out iceP_v2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ByteSeq2Helper.write(ostr, iceP_v2);
                ByteSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortSeqAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                short[] iceP_v1;
                iceP_v1 = ShortSeq1Helper.read(istr);
                istr.endEncapsulation();
                short[] iceP_v2;
                var ret = obj.opShortSeq(iceP_v1, out iceP_v2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ShortSeq2Helper.write(ostr, iceP_v2);
                ShortSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opIntSeqAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                int[] iceP_v1;
                iceP_v1 = IntSeq1Helper.read(istr);
                istr.endEncapsulation();
                int[] iceP_v2;
                var ret = obj.opIntSeq(iceP_v1, out iceP_v2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                IntSeq2Helper.write(ostr, iceP_v2);
                IntSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLongSeqAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                long[] iceP_v1;
                iceP_v1 = LongSeq1Helper.read(istr);
                istr.endEncapsulation();
                long[] iceP_v2;
                var ret = obj.opLongSeq(iceP_v1, out iceP_v2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LongSeq2Helper.write(ostr, iceP_v2);
                LongSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opFloatSeqAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                float[] iceP_v1;
                iceP_v1 = FloatSeq1Helper.read(istr);
                istr.endEncapsulation();
                float[] iceP_v2;
                var ret = obj.opFloatSeq(iceP_v1, out iceP_v2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                FloatSeq2Helper.write(ostr, iceP_v2);
                FloatSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opDoubleSeqAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                double[] iceP_v1;
                iceP_v1 = DoubleSeq1Helper.read(istr);
                istr.endEncapsulation();
                double[] iceP_v2;
                var ret = obj.opDoubleSeq(iceP_v1, out iceP_v2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                DoubleSeq2Helper.write(ostr, iceP_v2);
                DoubleSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opComplex128SeqAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                byte[] iceP_v1;
                iceP_v1 = Complex128SeqHelper.read(istr);
                istr.endEncapsulation();
                var ret = obj.opComplex128Seq(iceP_v1, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                Complex128SeqHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBoolMatrixAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.opBoolMatrix(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                BoolSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteMatrixAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.opByteMatrix(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ByteSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortMatrixAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.opShortMatrix(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ShortSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opIntMatrixAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.opIntMatrix(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                IntSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLongMatrixAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.opLongMatrix(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                LongSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opFloatMatrixAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.opFloatMatrix(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                FloatSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opDoubleMatrixAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.opDoubleMatrix(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                DoubleSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBogusNumpyArrayTypeAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                var ret = obj.opBogusNumpyArrayType(request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                BoolSeq1Helper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opDAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                D? iceP_d = null;
                istr.readValue((D? v) => { iceP_d = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                var ret = obj.opD(iceP_d, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
                Custom obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.shutdown(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }
    }
}
