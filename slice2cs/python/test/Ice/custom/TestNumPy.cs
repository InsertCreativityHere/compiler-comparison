//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `TestNumPy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Test
{
    namespace NumPy
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class D : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            public global::Ice.Optional<bool[]> boolSeq;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            public global::Ice.Optional<byte[]> byteSeq;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            public global::Ice.Optional<short[]> shortSeq;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            public global::Ice.Optional<int[]> intSeq;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            public global::Ice.Optional<long[]> longSeq;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            public global::Ice.Optional<float[]> floatSeq;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            public global::Ice.Optional<double[]> doubleSeq;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            public D()
            {
                this.boolSeq = new global::Ice.Optional<bool[]>();
                this.byteSeq = new global::Ice.Optional<byte[]>();
                this.shortSeq = new global::Ice.Optional<short[]>();
                this.intSeq = new global::Ice.Optional<int[]>();
                this.longSeq = new global::Ice.Optional<long[]>();
                this.floatSeq = new global::Ice.Optional<float[]>();
                this.doubleSeq = new global::Ice.Optional<double[]>();
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            public D(global::Ice.Optional<bool[]> boolSeq, global::Ice.Optional<byte[]> byteSeq, global::Ice.Optional<short[]> shortSeq, global::Ice.Optional<int[]> intSeq, global::Ice.Optional<long[]> longSeq, global::Ice.Optional<float[]> floatSeq, global::Ice.Optional<double[]> doubleSeq)
            {
                this.boolSeq = boolSeq;
                this.byteSeq = byteSeq;
                this.shortSeq = shortSeq;
                this.intSeq = intSeq;
                this.longSeq = longSeq;
                this.floatSeq = floatSeq;
                this.doubleSeq = doubleSeq;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::NumPy::D";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeBoolSeq(1, boolSeq);
                ostr_.writeByteSeq(2, byteSeq);
                ostr_.writeShortSeq(3, shortSeq);
                ostr_.writeIntSeq(4, intSeq);
                ostr_.writeLongSeq(5, longSeq);
                ostr_.writeFloatSeq(6, floatSeq);
                ostr_.writeDoubleSeq(7, doubleSeq);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                if(istr_.readOptional(1, global::Ice.OptionalFormat.VSize))
                {
                    bool[] tmpVal;
                    tmpVal = BoolSeq1Helper.read(istr_);
                    boolSeq = new global::Ice.Optional<bool[]>(tmpVal);
                }
                else
                {
                    boolSeq = new global::Ice.Optional<bool[]>();
                }
                if(istr_.readOptional(2, global::Ice.OptionalFormat.VSize))
                {
                    byte[] tmpVal;
                    tmpVal = ByteSeq1Helper.read(istr_);
                    byteSeq = new global::Ice.Optional<byte[]>(tmpVal);
                }
                else
                {
                    byteSeq = new global::Ice.Optional<byte[]>();
                }
                if(istr_.readOptional(3, global::Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    short[] tmpVal;
                    tmpVal = ShortSeq1Helper.read(istr_);
                    shortSeq = new global::Ice.Optional<short[]>(tmpVal);
                }
                else
                {
                    shortSeq = new global::Ice.Optional<short[]>();
                }
                if(istr_.readOptional(4, global::Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    int[] tmpVal;
                    tmpVal = IntSeq1Helper.read(istr_);
                    intSeq = new global::Ice.Optional<int[]>(tmpVal);
                }
                else
                {
                    intSeq = new global::Ice.Optional<int[]>();
                }
                if(istr_.readOptional(5, global::Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    long[] tmpVal;
                    tmpVal = LongSeq1Helper.read(istr_);
                    longSeq = new global::Ice.Optional<long[]>(tmpVal);
                }
                else
                {
                    longSeq = new global::Ice.Optional<long[]>();
                }
                if(istr_.readOptional(6, global::Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    float[] tmpVal;
                    tmpVal = FloatSeq1Helper.read(istr_);
                    floatSeq = new global::Ice.Optional<float[]>(tmpVal);
                }
                else
                {
                    floatSeq = new global::Ice.Optional<float[]>();
                }
                if(istr_.readOptional(7, global::Ice.OptionalFormat.VSize))
                {
                    istr_.skipSize();
                    double[] tmpVal;
                    tmpVal = DoubleSeq1Helper.read(istr_);
                    doubleSeq = new global::Ice.Optional<double[]>(tmpVal);
                }
                else
                {
                    doubleSeq = new global::Ice.Optional<double[]>();
                }
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface Custom : global::Ice.Object, CustomOperations_
        {
        }
    }
}

namespace Test
{
    namespace NumPy
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opBoolSeq(bool[] ret, bool[] v2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opByteSeq(byte[] ret, byte[] v2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opShortSeq(short[] ret, short[] v2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opIntSeq(int[] ret, int[] v2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opLongSeq(long[] ret, long[] v2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opFloatSeq(float[] ret, float[] v2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opDoubleSeq(double[] ret, double[] v2);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opComplex128Seq(byte[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opBoolMatrix(bool[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opByteMatrix(byte[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opShortMatrix(short[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opIntMatrix(int[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opLongMatrix(long[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opFloatMatrix(float[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opDoubleMatrix(double[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opBogusNumpyArrayType(bool[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_opD(D ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public delegate void Callback_Custom_shutdown();
    }
}

namespace Test
{
    namespace NumPy
    {
        public struct Custom_OpBoolSeqResult
        {
            public Custom_OpBoolSeqResult(bool[] returnValue, bool[] v2)
            {
                this.returnValue = returnValue;
                this.v2 = v2;
            }

            public bool[] returnValue;
            public bool[] v2;
        }

        public struct Custom_OpByteSeqResult
        {
            public Custom_OpByteSeqResult(byte[] returnValue, byte[] v2)
            {
                this.returnValue = returnValue;
                this.v2 = v2;
            }

            public byte[] returnValue;
            public byte[] v2;
        }

        public struct Custom_OpShortSeqResult
        {
            public Custom_OpShortSeqResult(short[] returnValue, short[] v2)
            {
                this.returnValue = returnValue;
                this.v2 = v2;
            }

            public short[] returnValue;
            public short[] v2;
        }

        public struct Custom_OpIntSeqResult
        {
            public Custom_OpIntSeqResult(int[] returnValue, int[] v2)
            {
                this.returnValue = returnValue;
                this.v2 = v2;
            }

            public int[] returnValue;
            public int[] v2;
        }

        public struct Custom_OpLongSeqResult
        {
            public Custom_OpLongSeqResult(long[] returnValue, long[] v2)
            {
                this.returnValue = returnValue;
                this.v2 = v2;
            }

            public long[] returnValue;
            public long[] v2;
        }

        public struct Custom_OpFloatSeqResult
        {
            public Custom_OpFloatSeqResult(float[] returnValue, float[] v2)
            {
                this.returnValue = returnValue;
                this.v2 = v2;
            }

            public float[] returnValue;
            public float[] v2;
        }

        public struct Custom_OpDoubleSeqResult
        {
            public Custom_OpDoubleSeqResult(double[] returnValue, double[] v2)
            {
                this.returnValue = returnValue;
                this.v2 = v2;
            }

            public double[] returnValue;
            public double[] v2;
        }
    }
}

namespace Test
{
    namespace NumPy
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public interface CustomPrx : global::Ice.ObjectPrx
        {
            bool[] opBoolSeq(bool[] v1, out bool[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Custom_OpBoolSeqResult> opBoolSeqAsync(bool[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opBoolSeq> begin_opBoolSeq(bool[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opBoolSeq(bool[] v1, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opBoolSeq(bool[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            bool[] end_opBoolSeq(out bool[] v2, global::Ice.AsyncResult asyncResult);

            byte[] opByteSeq(byte[] v1, out byte[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Custom_OpByteSeqResult> opByteSeqAsync(byte[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opByteSeq> begin_opByteSeq(byte[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opByteSeq(byte[] v1, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opByteSeq(byte[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            byte[] end_opByteSeq(out byte[] v2, global::Ice.AsyncResult asyncResult);

            short[] opShortSeq(short[] v1, out short[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Custom_OpShortSeqResult> opShortSeqAsync(short[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opShortSeq> begin_opShortSeq(short[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opShortSeq(short[] v1, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opShortSeq(short[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            short[] end_opShortSeq(out short[] v2, global::Ice.AsyncResult asyncResult);

            int[] opIntSeq(int[] v1, out int[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Custom_OpIntSeqResult> opIntSeqAsync(int[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opIntSeq> begin_opIntSeq(int[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opIntSeq(int[] v1, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opIntSeq(int[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            int[] end_opIntSeq(out int[] v2, global::Ice.AsyncResult asyncResult);

            long[] opLongSeq(long[] v1, out long[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Custom_OpLongSeqResult> opLongSeqAsync(long[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opLongSeq> begin_opLongSeq(long[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opLongSeq(long[] v1, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opLongSeq(long[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            long[] end_opLongSeq(out long[] v2, global::Ice.AsyncResult asyncResult);

            float[] opFloatSeq(float[] v1, out float[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Custom_OpFloatSeqResult> opFloatSeqAsync(float[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opFloatSeq> begin_opFloatSeq(float[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opFloatSeq(float[] v1, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opFloatSeq(float[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            float[] end_opFloatSeq(out float[] v2, global::Ice.AsyncResult asyncResult);

            double[] opDoubleSeq(double[] v1, out double[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Custom_OpDoubleSeqResult> opDoubleSeqAsync(double[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opDoubleSeq> begin_opDoubleSeq(double[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opDoubleSeq(double[] v1, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opDoubleSeq(double[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            double[] end_opDoubleSeq(out double[] v2, global::Ice.AsyncResult asyncResult);

            byte[] opComplex128Seq(byte[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<byte[]> opComplex128SeqAsync(byte[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opComplex128Seq> begin_opComplex128Seq(byte[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opComplex128Seq(byte[] v1, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opComplex128Seq(byte[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            byte[] end_opComplex128Seq(global::Ice.AsyncResult asyncResult);

            bool[] opBoolMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<bool[]> opBoolMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opBoolMatrix> begin_opBoolMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opBoolMatrix(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opBoolMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            bool[] end_opBoolMatrix(global::Ice.AsyncResult asyncResult);

            byte[] opByteMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<byte[]> opByteMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opByteMatrix> begin_opByteMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opByteMatrix(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opByteMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            byte[] end_opByteMatrix(global::Ice.AsyncResult asyncResult);

            short[] opShortMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<short[]> opShortMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opShortMatrix> begin_opShortMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opShortMatrix(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opShortMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            short[] end_opShortMatrix(global::Ice.AsyncResult asyncResult);

            int[] opIntMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<int[]> opIntMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opIntMatrix> begin_opIntMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opIntMatrix(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opIntMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            int[] end_opIntMatrix(global::Ice.AsyncResult asyncResult);

            long[] opLongMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<long[]> opLongMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opLongMatrix> begin_opLongMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opLongMatrix(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opLongMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            long[] end_opLongMatrix(global::Ice.AsyncResult asyncResult);

            float[] opFloatMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<float[]> opFloatMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opFloatMatrix> begin_opFloatMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opFloatMatrix(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opFloatMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            float[] end_opFloatMatrix(global::Ice.AsyncResult asyncResult);

            double[] opDoubleMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<double[]> opDoubleMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opDoubleMatrix> begin_opDoubleMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opDoubleMatrix(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opDoubleMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            double[] end_opDoubleMatrix(global::Ice.AsyncResult asyncResult);

            bool[] opBogusNumpyArrayType(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<bool[]> opBogusNumpyArrayTypeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opBogusNumpyArrayType> begin_opBogusNumpyArrayType(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opBogusNumpyArrayType(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opBogusNumpyArrayType(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            bool[] end_opBogusNumpyArrayType(global::Ice.AsyncResult asyncResult);

            D opD(D d, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<D> opDAsync(D d, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_opD> begin_opD(D d, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_opD(D d, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_opD(D d, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            D end_opD(global::Ice.AsyncResult asyncResult);

            void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Custom_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_shutdown(global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace Test
{
    namespace NumPy
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public interface CustomOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            bool[] opBoolSeq(bool[] v1, out bool[] v2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            byte[] opByteSeq(byte[] v1, out byte[] v2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            short[] opShortSeq(short[] v1, out short[] v2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            int[] opIntSeq(int[] v1, out int[] v2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            long[] opLongSeq(long[] v1, out long[] v2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            float[] opFloatSeq(float[] v1, out float[] v2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            double[] opDoubleSeq(double[] v1, out double[] v2, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            byte[] opComplex128Seq(byte[] v1, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            bool[] opBoolMatrix(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            byte[] opByteMatrix(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            short[] opShortMatrix(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            int[] opIntMatrix(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            long[] opLongMatrix(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            float[] opFloatMatrix(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            double[] opDoubleMatrix(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            bool[] opBogusNumpyArrayType(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            D opD(D d, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
            void shutdown(global::Ice.Current current = null);
        }
    }
}

namespace Test
{
    namespace NumPy
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class BoolSeq1Helper
        {
            public static void write(global::Ice.OutputStream ostr, bool[] v)
            {
                ostr.writeBoolSeq(v);
            }

            public static bool[] read(global::Ice.InputStream istr)
            {
                bool[] v;
                v = istr.readBoolSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class BoolSeq2Helper
        {
            public static void write(global::Ice.OutputStream ostr, bool[] v)
            {
                ostr.writeBoolSeq(v);
            }

            public static bool[] read(global::Ice.InputStream istr)
            {
                bool[] v;
                v = istr.readBoolSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class ByteSeq1Helper
        {
            public static void write(global::Ice.OutputStream ostr, byte[] v)
            {
                ostr.writeByteSeq(v);
            }

            public static byte[] read(global::Ice.InputStream istr)
            {
                byte[] v;
                v = istr.readByteSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class ByteSeq2Helper
        {
            public static void write(global::Ice.OutputStream ostr, byte[] v)
            {
                ostr.writeByteSeq(v);
            }

            public static byte[] read(global::Ice.InputStream istr)
            {
                byte[] v;
                v = istr.readByteSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class ShortSeq1Helper
        {
            public static void write(global::Ice.OutputStream ostr, short[] v)
            {
                ostr.writeShortSeq(v);
            }

            public static short[] read(global::Ice.InputStream istr)
            {
                short[] v;
                v = istr.readShortSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class ShortSeq2Helper
        {
            public static void write(global::Ice.OutputStream ostr, short[] v)
            {
                ostr.writeShortSeq(v);
            }

            public static short[] read(global::Ice.InputStream istr)
            {
                short[] v;
                v = istr.readShortSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class IntSeq1Helper
        {
            public static void write(global::Ice.OutputStream ostr, int[] v)
            {
                ostr.writeIntSeq(v);
            }

            public static int[] read(global::Ice.InputStream istr)
            {
                int[] v;
                v = istr.readIntSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class IntSeq2Helper
        {
            public static void write(global::Ice.OutputStream ostr, int[] v)
            {
                ostr.writeIntSeq(v);
            }

            public static int[] read(global::Ice.InputStream istr)
            {
                int[] v;
                v = istr.readIntSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class LongSeq1Helper
        {
            public static void write(global::Ice.OutputStream ostr, long[] v)
            {
                ostr.writeLongSeq(v);
            }

            public static long[] read(global::Ice.InputStream istr)
            {
                long[] v;
                v = istr.readLongSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class LongSeq2Helper
        {
            public static void write(global::Ice.OutputStream ostr, long[] v)
            {
                ostr.writeLongSeq(v);
            }

            public static long[] read(global::Ice.InputStream istr)
            {
                long[] v;
                v = istr.readLongSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class FloatSeq1Helper
        {
            public static void write(global::Ice.OutputStream ostr, float[] v)
            {
                ostr.writeFloatSeq(v);
            }

            public static float[] read(global::Ice.InputStream istr)
            {
                float[] v;
                v = istr.readFloatSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class FloatSeq2Helper
        {
            public static void write(global::Ice.OutputStream ostr, float[] v)
            {
                ostr.writeFloatSeq(v);
            }

            public static float[] read(global::Ice.InputStream istr)
            {
                float[] v;
                v = istr.readFloatSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class DoubleSeq1Helper
        {
            public static void write(global::Ice.OutputStream ostr, double[] v)
            {
                ostr.writeDoubleSeq(v);
            }

            public static double[] read(global::Ice.InputStream istr)
            {
                double[] v;
                v = istr.readDoubleSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class DoubleSeq2Helper
        {
            public static void write(global::Ice.OutputStream ostr, double[] v)
            {
                ostr.writeDoubleSeq(v);
            }

            public static double[] read(global::Ice.InputStream istr)
            {
                double[] v;
                v = istr.readDoubleSeq();
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public sealed class Complex128SeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, byte[] v)
            {
                ostr.writeByteSeq(v);
            }

            public static byte[] read(global::Ice.InputStream istr)
            {
                byte[] v;
                v = istr.readByteSeq();
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        [global::System.Serializable]
        public sealed class CustomPrxHelper : global::Ice.ObjectPrxHelperBase, CustomPrx
        {
            public CustomPrxHelper()
            {
            }

            public CustomPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public bool[] opBoolSeq(bool[] v1, out bool[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opBoolSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[] opByteSeq(byte[] v1, out byte[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opByteSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public short[] opShortSeq(short[] v1, out short[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opShortSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int[] opIntSeq(int[] v1, out int[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opIntSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long[] opLongSeq(long[] v1, out long[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opLongSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public float[] opFloatSeq(float[] v1, out float[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opFloatSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double[] opDoubleSeq(double[] v1, out double[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_opDoubleSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    v2 = result_.v2;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[] opComplex128Seq(byte[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opComplex128SeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool[] opBoolMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opBoolMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[] opByteMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opByteMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public short[] opShortMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opShortMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int[] opIntMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opIntMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long[] opLongMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opLongMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public float[] opFloatMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opFloatMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double[] opDoubleMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opDoubleMatrixAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool[] opBogusNumpyArrayType(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opBogusNumpyArrayTypeAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public D opD(D d, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_opDAsync(d, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<Custom_OpBoolSeqResult> opBoolSeqAsync(bool[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opBoolSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpBoolSeqResult> _iceI_opBoolSeqAsync(bool[] iceP_v1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBoolSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Custom_OpBoolSeqResult>(progress, cancel);
                _iceI_opBoolSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBoolSeq_name = "opBoolSeq";

            private void _iceI_opBoolSeq(bool[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpBoolSeqResult>(completed);
                outAsync.invoke(
                    _opBoolSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        BoolSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Custom_OpBoolSeqResult ret = new Custom_OpBoolSeqResult();
                        ret.v2 = BoolSeq2Helper.read(istr);
                        ret.returnValue = BoolSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Custom_OpByteSeqResult> opByteSeqAsync(byte[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpByteSeqResult> _iceI_opByteSeqAsync(byte[] iceP_v1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Custom_OpByteSeqResult>(progress, cancel);
                _iceI_opByteSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteSeq_name = "opByteSeq";

            private void _iceI_opByteSeq(byte[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpByteSeqResult>(completed);
                outAsync.invoke(
                    _opByteSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ByteSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Custom_OpByteSeqResult ret = new Custom_OpByteSeqResult();
                        ret.v2 = ByteSeq2Helper.read(istr);
                        ret.returnValue = ByteSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Custom_OpShortSeqResult> opShortSeqAsync(short[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpShortSeqResult> _iceI_opShortSeqAsync(short[] iceP_v1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Custom_OpShortSeqResult>(progress, cancel);
                _iceI_opShortSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortSeq_name = "opShortSeq";

            private void _iceI_opShortSeq(short[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpShortSeqResult>(completed);
                outAsync.invoke(
                    _opShortSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ShortSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Custom_OpShortSeqResult ret = new Custom_OpShortSeqResult();
                        ret.v2 = ShortSeq2Helper.read(istr);
                        ret.returnValue = ShortSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Custom_OpIntSeqResult> opIntSeqAsync(int[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opIntSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpIntSeqResult> _iceI_opIntSeqAsync(int[] iceP_v1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opIntSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Custom_OpIntSeqResult>(progress, cancel);
                _iceI_opIntSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opIntSeq_name = "opIntSeq";

            private void _iceI_opIntSeq(int[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpIntSeqResult>(completed);
                outAsync.invoke(
                    _opIntSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        IntSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Custom_OpIntSeqResult ret = new Custom_OpIntSeqResult();
                        ret.v2 = IntSeq2Helper.read(istr);
                        ret.returnValue = IntSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Custom_OpLongSeqResult> opLongSeqAsync(long[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opLongSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpLongSeqResult> _iceI_opLongSeqAsync(long[] iceP_v1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLongSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Custom_OpLongSeqResult>(progress, cancel);
                _iceI_opLongSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLongSeq_name = "opLongSeq";

            private void _iceI_opLongSeq(long[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpLongSeqResult>(completed);
                outAsync.invoke(
                    _opLongSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        LongSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Custom_OpLongSeqResult ret = new Custom_OpLongSeqResult();
                        ret.v2 = LongSeq2Helper.read(istr);
                        ret.returnValue = LongSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Custom_OpFloatSeqResult> opFloatSeqAsync(float[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFloatSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpFloatSeqResult> _iceI_opFloatSeqAsync(float[] iceP_v1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloatSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Custom_OpFloatSeqResult>(progress, cancel);
                _iceI_opFloatSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloatSeq_name = "opFloatSeq";

            private void _iceI_opFloatSeq(float[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpFloatSeqResult>(completed);
                outAsync.invoke(
                    _opFloatSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        FloatSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Custom_OpFloatSeqResult ret = new Custom_OpFloatSeqResult();
                        ret.v2 = FloatSeq2Helper.read(istr);
                        ret.returnValue = FloatSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Custom_OpDoubleSeqResult> opDoubleSeqAsync(double[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opDoubleSeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Custom_OpDoubleSeqResult> _iceI_opDoubleSeqAsync(double[] iceP_v1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opDoubleSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Custom_OpDoubleSeqResult>(progress, cancel);
                _iceI_opDoubleSeq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opDoubleSeq_name = "opDoubleSeq";

            private void _iceI_opDoubleSeq(double[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Custom_OpDoubleSeqResult>(completed);
                outAsync.invoke(
                    _opDoubleSeq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        DoubleSeq1Helper.write(ostr, iceP_v1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Custom_OpDoubleSeqResult ret = new Custom_OpDoubleSeqResult();
                        ret.v2 = DoubleSeq2Helper.read(istr);
                        ret.returnValue = DoubleSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<byte[]> opComplex128SeqAsync(byte[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opComplex128SeqAsync(v1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte[]> _iceI_opComplex128SeqAsync(byte[] iceP_v1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opComplex128Seq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
                _iceI_opComplex128Seq(iceP_v1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opComplex128Seq_name = "opComplex128Seq";

            private void _iceI_opComplex128Seq(byte[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte[]>(completed);
                outAsync.invoke(
                    _opComplex128Seq_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        Complex128SeqHelper.write(ostr, iceP_v1);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        byte[] ret;
                        ret = Complex128SeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<bool[]> opBoolMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opBoolMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool[]> _iceI_opBoolMatrixAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBoolMatrix_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                _iceI_opBoolMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBoolMatrix_name = "opBoolMatrix";

            private void _iceI_opBoolMatrix(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool[]>(completed);
                outAsync.invoke(
                    _opBoolMatrix_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        bool[] ret;
                        ret = BoolSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<byte[]> opByteMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opByteMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte[]> _iceI_opByteMatrixAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opByteMatrix_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
                _iceI_opByteMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opByteMatrix_name = "opByteMatrix";

            private void _iceI_opByteMatrix(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte[]>(completed);
                outAsync.invoke(
                    _opByteMatrix_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        byte[] ret;
                        ret = ByteSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<short[]> opShortMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opShortMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<short[]> _iceI_opShortMatrixAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opShortMatrix_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<short[]>(progress, cancel);
                _iceI_opShortMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opShortMatrix_name = "opShortMatrix";

            private void _iceI_opShortMatrix(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<short[]>(completed);
                outAsync.invoke(
                    _opShortMatrix_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        short[] ret;
                        ret = ShortSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<int[]> opIntMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opIntMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int[]> _iceI_opIntMatrixAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opIntMatrix_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int[]>(progress, cancel);
                _iceI_opIntMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opIntMatrix_name = "opIntMatrix";

            private void _iceI_opIntMatrix(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int[]>(completed);
                outAsync.invoke(
                    _opIntMatrix_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        int[] ret;
                        ret = IntSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<long[]> opLongMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opLongMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<long[]> _iceI_opLongMatrixAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opLongMatrix_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<long[]>(progress, cancel);
                _iceI_opLongMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opLongMatrix_name = "opLongMatrix";

            private void _iceI_opLongMatrix(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<long[]>(completed);
                outAsync.invoke(
                    _opLongMatrix_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        long[] ret;
                        ret = LongSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<float[]> opFloatMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opFloatMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<float[]> _iceI_opFloatMatrixAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opFloatMatrix_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<float[]>(progress, cancel);
                _iceI_opFloatMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opFloatMatrix_name = "opFloatMatrix";

            private void _iceI_opFloatMatrix(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<float[]>(completed);
                outAsync.invoke(
                    _opFloatMatrix_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        float[] ret;
                        ret = FloatSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<double[]> opDoubleMatrixAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opDoubleMatrixAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<double[]> _iceI_opDoubleMatrixAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opDoubleMatrix_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<double[]>(progress, cancel);
                _iceI_opDoubleMatrix(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opDoubleMatrix_name = "opDoubleMatrix";

            private void _iceI_opDoubleMatrix(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<double[]>(completed);
                outAsync.invoke(
                    _opDoubleMatrix_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        double[] ret;
                        ret = DoubleSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<bool[]> opBogusNumpyArrayTypeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opBogusNumpyArrayTypeAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool[]> _iceI_opBogusNumpyArrayTypeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opBogusNumpyArrayType_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                _iceI_opBogusNumpyArrayType(context, synchronous, completed);
                return completed.Task;
            }

            private const string _opBogusNumpyArrayType_name = "opBogusNumpyArrayType";

            private void _iceI_opBogusNumpyArrayType(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool[]>(completed);
                outAsync.invoke(
                    _opBogusNumpyArrayType_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        bool[] ret;
                        ret = BoolSeq1Helper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<D> opDAsync(D d, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_opDAsync(d, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<D> _iceI_opDAsync(D iceP_d, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opD_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<D>(progress, cancel);
                _iceI_opD(iceP_d, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opD_name = "opD";

            private void _iceI_opD(D iceP_d, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<D>(completed);
                outAsync.invoke(
                    _opD_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_d);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        D ret = null;
                        istr.readValue((D v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_Custom_opBoolSeq> begin_opBoolSeq(bool[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opBoolSeq(v1, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opBoolSeq(bool[] v1, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opBoolSeq(v1, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opBoolSeq(bool[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opBoolSeq(v1, context, callback, cookie, false);
            }

            public bool[] end_opBoolSeq(out bool[] v2, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opBoolSeq_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Custom_OpBoolSeqResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                v2 = result_.v2;
                return result_.returnValue;
            }

            private global::Ice.AsyncResult<Callback_Custom_opBoolSeq> begin_opBoolSeq(bool[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opBoolSeq_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opBoolSeq, Custom_OpBoolSeqResult>(
                    (Callback_Custom_opBoolSeq cb, Custom_OpBoolSeqResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.returnValue, ret.v2);
                        }
                    },
                    this, _opBoolSeq_name, cookie, completedCallback);
                _iceI_opBoolSeq(iceP_v1, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opByteSeq> begin_opByteSeq(byte[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opByteSeq(v1, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opByteSeq(byte[] v1, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opByteSeq(v1, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opByteSeq(byte[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opByteSeq(v1, context, callback, cookie, false);
            }

            public byte[] end_opByteSeq(out byte[] v2, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opByteSeq_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Custom_OpByteSeqResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                v2 = result_.v2;
                return result_.returnValue;
            }

            private global::Ice.AsyncResult<Callback_Custom_opByteSeq> begin_opByteSeq(byte[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opByteSeq_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opByteSeq, Custom_OpByteSeqResult>(
                    (Callback_Custom_opByteSeq cb, Custom_OpByteSeqResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.returnValue, ret.v2);
                        }
                    },
                    this, _opByteSeq_name, cookie, completedCallback);
                _iceI_opByteSeq(iceP_v1, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opShortSeq> begin_opShortSeq(short[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opShortSeq(v1, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opShortSeq(short[] v1, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opShortSeq(v1, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opShortSeq(short[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opShortSeq(v1, context, callback, cookie, false);
            }

            public short[] end_opShortSeq(out short[] v2, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opShortSeq_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Custom_OpShortSeqResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                v2 = result_.v2;
                return result_.returnValue;
            }

            private global::Ice.AsyncResult<Callback_Custom_opShortSeq> begin_opShortSeq(short[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opShortSeq_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opShortSeq, Custom_OpShortSeqResult>(
                    (Callback_Custom_opShortSeq cb, Custom_OpShortSeqResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.returnValue, ret.v2);
                        }
                    },
                    this, _opShortSeq_name, cookie, completedCallback);
                _iceI_opShortSeq(iceP_v1, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opIntSeq> begin_opIntSeq(int[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opIntSeq(v1, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opIntSeq(int[] v1, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opIntSeq(v1, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opIntSeq(int[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opIntSeq(v1, context, callback, cookie, false);
            }

            public int[] end_opIntSeq(out int[] v2, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opIntSeq_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Custom_OpIntSeqResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                v2 = result_.v2;
                return result_.returnValue;
            }

            private global::Ice.AsyncResult<Callback_Custom_opIntSeq> begin_opIntSeq(int[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opIntSeq_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opIntSeq, Custom_OpIntSeqResult>(
                    (Callback_Custom_opIntSeq cb, Custom_OpIntSeqResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.returnValue, ret.v2);
                        }
                    },
                    this, _opIntSeq_name, cookie, completedCallback);
                _iceI_opIntSeq(iceP_v1, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opLongSeq> begin_opLongSeq(long[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opLongSeq(v1, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opLongSeq(long[] v1, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opLongSeq(v1, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opLongSeq(long[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opLongSeq(v1, context, callback, cookie, false);
            }

            public long[] end_opLongSeq(out long[] v2, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opLongSeq_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Custom_OpLongSeqResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                v2 = result_.v2;
                return result_.returnValue;
            }

            private global::Ice.AsyncResult<Callback_Custom_opLongSeq> begin_opLongSeq(long[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opLongSeq_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opLongSeq, Custom_OpLongSeqResult>(
                    (Callback_Custom_opLongSeq cb, Custom_OpLongSeqResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.returnValue, ret.v2);
                        }
                    },
                    this, _opLongSeq_name, cookie, completedCallback);
                _iceI_opLongSeq(iceP_v1, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opFloatSeq> begin_opFloatSeq(float[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opFloatSeq(v1, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opFloatSeq(float[] v1, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opFloatSeq(v1, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opFloatSeq(float[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opFloatSeq(v1, context, callback, cookie, false);
            }

            public float[] end_opFloatSeq(out float[] v2, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opFloatSeq_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Custom_OpFloatSeqResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                v2 = result_.v2;
                return result_.returnValue;
            }

            private global::Ice.AsyncResult<Callback_Custom_opFloatSeq> begin_opFloatSeq(float[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opFloatSeq_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opFloatSeq, Custom_OpFloatSeqResult>(
                    (Callback_Custom_opFloatSeq cb, Custom_OpFloatSeqResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.returnValue, ret.v2);
                        }
                    },
                    this, _opFloatSeq_name, cookie, completedCallback);
                _iceI_opFloatSeq(iceP_v1, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opDoubleSeq> begin_opDoubleSeq(double[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opDoubleSeq(v1, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opDoubleSeq(double[] v1, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opDoubleSeq(v1, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opDoubleSeq(double[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opDoubleSeq(v1, context, callback, cookie, false);
            }

            public double[] end_opDoubleSeq(out double[] v2, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opDoubleSeq_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Custom_OpDoubleSeqResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                v2 = result_.v2;
                return result_.returnValue;
            }

            private global::Ice.AsyncResult<Callback_Custom_opDoubleSeq> begin_opDoubleSeq(double[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opDoubleSeq_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opDoubleSeq, Custom_OpDoubleSeqResult>(
                    (Callback_Custom_opDoubleSeq cb, Custom_OpDoubleSeqResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.returnValue, ret.v2);
                        }
                    },
                    this, _opDoubleSeq_name, cookie, completedCallback);
                _iceI_opDoubleSeq(iceP_v1, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opComplex128Seq> begin_opComplex128Seq(byte[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opComplex128Seq(v1, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opComplex128Seq(byte[] v1, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opComplex128Seq(v1, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opComplex128Seq(byte[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opComplex128Seq(v1, context, callback, cookie, false);
            }

            public byte[] end_opComplex128Seq(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opComplex128Seq_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<byte[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Custom_opComplex128Seq> begin_opComplex128Seq(byte[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opComplex128Seq_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opComplex128Seq, byte[]>(
                    (Callback_Custom_opComplex128Seq cb, byte[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _opComplex128Seq_name, cookie, completedCallback);
                _iceI_opComplex128Seq(iceP_v1, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opBoolMatrix> begin_opBoolMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opBoolMatrix(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opBoolMatrix(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opBoolMatrix(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opBoolMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opBoolMatrix(context, callback, cookie, false);
            }

            public bool[] end_opBoolMatrix(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opBoolMatrix_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Custom_opBoolMatrix> begin_opBoolMatrix(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opBoolMatrix_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opBoolMatrix, bool[]>(
                    (Callback_Custom_opBoolMatrix cb, bool[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _opBoolMatrix_name, cookie, completedCallback);
                _iceI_opBoolMatrix(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opByteMatrix> begin_opByteMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opByteMatrix(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opByteMatrix(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opByteMatrix(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opByteMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opByteMatrix(context, callback, cookie, false);
            }

            public byte[] end_opByteMatrix(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opByteMatrix_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<byte[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Custom_opByteMatrix> begin_opByteMatrix(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opByteMatrix_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opByteMatrix, byte[]>(
                    (Callback_Custom_opByteMatrix cb, byte[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _opByteMatrix_name, cookie, completedCallback);
                _iceI_opByteMatrix(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opShortMatrix> begin_opShortMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opShortMatrix(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opShortMatrix(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opShortMatrix(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opShortMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opShortMatrix(context, callback, cookie, false);
            }

            public short[] end_opShortMatrix(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opShortMatrix_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<short[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Custom_opShortMatrix> begin_opShortMatrix(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opShortMatrix_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opShortMatrix, short[]>(
                    (Callback_Custom_opShortMatrix cb, short[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _opShortMatrix_name, cookie, completedCallback);
                _iceI_opShortMatrix(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opIntMatrix> begin_opIntMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opIntMatrix(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opIntMatrix(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opIntMatrix(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opIntMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opIntMatrix(context, callback, cookie, false);
            }

            public int[] end_opIntMatrix(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opIntMatrix_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<int[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Custom_opIntMatrix> begin_opIntMatrix(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opIntMatrix_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opIntMatrix, int[]>(
                    (Callback_Custom_opIntMatrix cb, int[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _opIntMatrix_name, cookie, completedCallback);
                _iceI_opIntMatrix(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opLongMatrix> begin_opLongMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opLongMatrix(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opLongMatrix(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opLongMatrix(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opLongMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opLongMatrix(context, callback, cookie, false);
            }

            public long[] end_opLongMatrix(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opLongMatrix_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<long[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Custom_opLongMatrix> begin_opLongMatrix(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opLongMatrix_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opLongMatrix, long[]>(
                    (Callback_Custom_opLongMatrix cb, long[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _opLongMatrix_name, cookie, completedCallback);
                _iceI_opLongMatrix(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opFloatMatrix> begin_opFloatMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opFloatMatrix(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opFloatMatrix(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opFloatMatrix(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opFloatMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opFloatMatrix(context, callback, cookie, false);
            }

            public float[] end_opFloatMatrix(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opFloatMatrix_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<float[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Custom_opFloatMatrix> begin_opFloatMatrix(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opFloatMatrix_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opFloatMatrix, float[]>(
                    (Callback_Custom_opFloatMatrix cb, float[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _opFloatMatrix_name, cookie, completedCallback);
                _iceI_opFloatMatrix(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opDoubleMatrix> begin_opDoubleMatrix(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opDoubleMatrix(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opDoubleMatrix(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opDoubleMatrix(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opDoubleMatrix(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opDoubleMatrix(context, callback, cookie, false);
            }

            public double[] end_opDoubleMatrix(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opDoubleMatrix_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<double[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Custom_opDoubleMatrix> begin_opDoubleMatrix(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opDoubleMatrix_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opDoubleMatrix, double[]>(
                    (Callback_Custom_opDoubleMatrix cb, double[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _opDoubleMatrix_name, cookie, completedCallback);
                _iceI_opDoubleMatrix(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opBogusNumpyArrayType> begin_opBogusNumpyArrayType(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opBogusNumpyArrayType(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opBogusNumpyArrayType(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opBogusNumpyArrayType(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opBogusNumpyArrayType(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opBogusNumpyArrayType(context, callback, cookie, false);
            }

            public bool[] end_opBogusNumpyArrayType(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opBogusNumpyArrayType_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Custom_opBogusNumpyArrayType> begin_opBogusNumpyArrayType(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opBogusNumpyArrayType_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opBogusNumpyArrayType, bool[]>(
                    (Callback_Custom_opBogusNumpyArrayType cb, bool[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _opBogusNumpyArrayType_name, cookie, completedCallback);
                _iceI_opBogusNumpyArrayType(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_opD> begin_opD(D d, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_opD(d, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_opD(D d, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opD(d, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_opD(D d, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_opD(d, context, callback, cookie, false);
            }

            public D end_opD(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opD_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<D>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Custom_opD> begin_opD(D iceP_d, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_opD_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_opD, D>(
                    (Callback_Custom_opD cb, D ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _opD_name, cookie, completedCallback);
                _iceI_opD(iceP_d, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Custom_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_shutdown(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_shutdown(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_shutdown(context, callback, cookie, false);
            }

            public void end_shutdown(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Custom_shutdown> begin_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Custom_shutdown, object>(
                    (Callback_Custom_shutdown cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _shutdown_name, cookie, completedCallback);
                _iceI_shutdown(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static CustomPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                CustomPrx r = b as CustomPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    CustomPrxHelper h = new CustomPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static CustomPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                CustomPrx r = b as CustomPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    CustomPrxHelper h = new CustomPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static CustomPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        CustomPrxHelper h = new CustomPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static CustomPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        CustomPrxHelper h = new CustomPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static CustomPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                CustomPrx r = b as CustomPrx;
                if(r == null)
                {
                    CustomPrxHelper h = new CustomPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static CustomPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                CustomPrxHelper h = new CustomPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::NumPy::Custom"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, CustomPrx v)
            {
                ostr.writeProxy(v);
            }

            public static CustomPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    CustomPrxHelper result = new CustomPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Test
{
    namespace NumPy
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public abstract class CustomDisp_ : global::Ice.ObjectImpl, Custom
        {
            #region Slice operations

            public abstract bool[] opBoolSeq(bool[] v1, out bool[] v2, global::Ice.Current current = null);

            public abstract byte[] opByteSeq(byte[] v1, out byte[] v2, global::Ice.Current current = null);

            public abstract short[] opShortSeq(short[] v1, out short[] v2, global::Ice.Current current = null);

            public abstract int[] opIntSeq(int[] v1, out int[] v2, global::Ice.Current current = null);

            public abstract long[] opLongSeq(long[] v1, out long[] v2, global::Ice.Current current = null);

            public abstract float[] opFloatSeq(float[] v1, out float[] v2, global::Ice.Current current = null);

            public abstract double[] opDoubleSeq(double[] v1, out double[] v2, global::Ice.Current current = null);

            public abstract byte[] opComplex128Seq(byte[] v1, global::Ice.Current current = null);

            public abstract bool[] opBoolMatrix(global::Ice.Current current = null);

            public abstract byte[] opByteMatrix(global::Ice.Current current = null);

            public abstract short[] opShortMatrix(global::Ice.Current current = null);

            public abstract int[] opIntMatrix(global::Ice.Current current = null);

            public abstract long[] opLongMatrix(global::Ice.Current current = null);

            public abstract float[] opFloatMatrix(global::Ice.Current current = null);

            public abstract double[] opDoubleMatrix(global::Ice.Current current = null);

            public abstract bool[] opBogusNumpyArrayType(global::Ice.Current current = null);

            public abstract D opD(D d, global::Ice.Current current = null);

            public abstract void shutdown(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::NumPy::Custom"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opBoolSeq(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                bool[] iceP_v1;
                iceP_v1 = BoolSeq1Helper.read(istr);
                inS.endReadParams();
                bool[] iceP_v2;
                var ret = obj.opBoolSeq(iceP_v1, out iceP_v2, current);
                var ostr = inS.startWriteParams();
                BoolSeq2Helper.write(ostr, iceP_v2);
                BoolSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByteSeq(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                byte[] iceP_v1;
                iceP_v1 = ByteSeq1Helper.read(istr);
                inS.endReadParams();
                byte[] iceP_v2;
                var ret = obj.opByteSeq(iceP_v1, out iceP_v2, current);
                var ostr = inS.startWriteParams();
                ByteSeq2Helper.write(ostr, iceP_v2);
                ByteSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opShortSeq(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                short[] iceP_v1;
                iceP_v1 = ShortSeq1Helper.read(istr);
                inS.endReadParams();
                short[] iceP_v2;
                var ret = obj.opShortSeq(iceP_v1, out iceP_v2, current);
                var ostr = inS.startWriteParams();
                ShortSeq2Helper.write(ostr, iceP_v2);
                ShortSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opIntSeq(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int[] iceP_v1;
                iceP_v1 = IntSeq1Helper.read(istr);
                inS.endReadParams();
                int[] iceP_v2;
                var ret = obj.opIntSeq(iceP_v1, out iceP_v2, current);
                var ostr = inS.startWriteParams();
                IntSeq2Helper.write(ostr, iceP_v2);
                IntSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLongSeq(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                long[] iceP_v1;
                iceP_v1 = LongSeq1Helper.read(istr);
                inS.endReadParams();
                long[] iceP_v2;
                var ret = obj.opLongSeq(iceP_v1, out iceP_v2, current);
                var ostr = inS.startWriteParams();
                LongSeq2Helper.write(ostr, iceP_v2);
                LongSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opFloatSeq(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                float[] iceP_v1;
                iceP_v1 = FloatSeq1Helper.read(istr);
                inS.endReadParams();
                float[] iceP_v2;
                var ret = obj.opFloatSeq(iceP_v1, out iceP_v2, current);
                var ostr = inS.startWriteParams();
                FloatSeq2Helper.write(ostr, iceP_v2);
                FloatSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opDoubleSeq(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                double[] iceP_v1;
                iceP_v1 = DoubleSeq1Helper.read(istr);
                inS.endReadParams();
                double[] iceP_v2;
                var ret = obj.opDoubleSeq(iceP_v1, out iceP_v2, current);
                var ostr = inS.startWriteParams();
                DoubleSeq2Helper.write(ostr, iceP_v2);
                DoubleSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opComplex128Seq(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                byte[] iceP_v1;
                iceP_v1 = Complex128SeqHelper.read(istr);
                inS.endReadParams();
                var ret = obj.opComplex128Seq(iceP_v1, current);
                var ostr = inS.startWriteParams();
                Complex128SeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opBoolMatrix(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.opBoolMatrix(current);
                var ostr = inS.startWriteParams();
                BoolSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opByteMatrix(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.opByteMatrix(current);
                var ostr = inS.startWriteParams();
                ByteSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opShortMatrix(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.opShortMatrix(current);
                var ostr = inS.startWriteParams();
                ShortSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opIntMatrix(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.opIntMatrix(current);
                var ostr = inS.startWriteParams();
                IntSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opLongMatrix(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.opLongMatrix(current);
                var ostr = inS.startWriteParams();
                LongSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opFloatMatrix(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.opFloatMatrix(current);
                var ostr = inS.startWriteParams();
                FloatSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opDoubleMatrix(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.opDoubleMatrix(current);
                var ostr = inS.startWriteParams();
                DoubleSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opBogusNumpyArrayType(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.opBogusNumpyArrayType(current);
                var ostr = inS.startWriteParams();
                BoolSeq1Helper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_opD(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                D iceP_d;
                iceP_d = null;
                istr.readValue((D v) => {iceP_d = v; });
                istr.readPendingValues();
                inS.endReadParams();
                var ret = obj.opD(iceP_d, current);
                var ostr = inS.startWriteParams();
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_shutdown(Custom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.shutdown(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "opBogusNumpyArrayType",
                "opBoolMatrix",
                "opBoolSeq",
                "opByteMatrix",
                "opByteSeq",
                "opComplex128Seq",
                "opD",
                "opDoubleMatrix",
                "opDoubleSeq",
                "opFloatMatrix",
                "opFloatSeq",
                "opIntMatrix",
                "opIntSeq",
                "opLongMatrix",
                "opLongSeq",
                "opShortMatrix",
                "opShortSeq",
                "shutdown"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_opBogusNumpyArrayType(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_opBoolMatrix(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_opBoolSeq(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_opByteMatrix(this, inS, current);
                    }
                    case 8:
                    {
                        return iceD_opByteSeq(this, inS, current);
                    }
                    case 9:
                    {
                        return iceD_opComplex128Seq(this, inS, current);
                    }
                    case 10:
                    {
                        return iceD_opD(this, inS, current);
                    }
                    case 11:
                    {
                        return iceD_opDoubleMatrix(this, inS, current);
                    }
                    case 12:
                    {
                        return iceD_opDoubleSeq(this, inS, current);
                    }
                    case 13:
                    {
                        return iceD_opFloatMatrix(this, inS, current);
                    }
                    case 14:
                    {
                        return iceD_opFloatSeq(this, inS, current);
                    }
                    case 15:
                    {
                        return iceD_opIntMatrix(this, inS, current);
                    }
                    case 16:
                    {
                        return iceD_opIntSeq(this, inS, current);
                    }
                    case 17:
                    {
                        return iceD_opLongMatrix(this, inS, current);
                    }
                    case 18:
                    {
                        return iceD_opLongSeq(this, inS, current);
                    }
                    case 19:
                    {
                        return iceD_opShortMatrix(this, inS, current);
                    }
                    case 20:
                    {
                        return iceD_opShortSeq(this, inS, current);
                    }
                    case 21:
                    {
                        return iceD_shutdown(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
