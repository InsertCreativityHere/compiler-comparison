//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

using _System = global::System;

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable 1591

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Empty : global::Ice.Object, EmptyOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::A")]
    public partial class A : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int aMem;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A(int aMem, global::System.Exception innerException = null) : base(innerException)
        {
            this.aMem = aMem;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A(global::System.Exception innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::A";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::A", -1, true);
            ostr_.writeInt(aMem);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            aMem = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::B")]
    public partial class B : A
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int bMem;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B(int aMem, int bMem, global::System.Exception innerException = null) : base(aMem, innerException)
        {
            this.bMem = bMem;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B(global::System.Exception innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::B";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::B", -1, false);
            ostr_.writeInt(bMem);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            bMem = istr_.readInt();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::C")]
    public partial class C : B
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int cMem;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C(int aMem, int bMem, int cMem, global::System.Exception innerException = null) : base(aMem, bMem, innerException)
        {
            this.cMem = cMem;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C(global::System.Exception innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::C";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::C", -1, false);
            ostr_.writeInt(cMem);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            cMem = istr_.readInt();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::D")]
    public partial class D : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int dMem;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D(int dMem, global::System.Exception innerException = null) : base(innerException)
        {
            this.dMem = dMem;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D(global::System.Exception innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::D";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::D", -1, true);
            ostr_.writeInt(dMem);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            dMem = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    namespace Mod
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [Ice.SliceTypeId("::Test::Mod::A")]
        public partial class A : global::Test.A
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public int a2Mem;

            #endregion

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public A(int aMem, int a2Mem, global::System.Exception innerException = null) : base(aMem, innerException)
            {
                this.a2Mem = a2Mem;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public A(global::System.Exception innerException) : base(innerException)
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public A()
            {
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return "::Test::Mod::A";
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::Mod::A", -1, false);
                ostr_.writeInt(a2Mem);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                a2Mem = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Thrower : global::Ice.Object, ThrowerOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface WrongOperation : global::Ice.Object, WrongOperationOperations_
    {
    }
}

namespace Test
{
    public record struct Thrower_ThrowMarshalExceptionResult(int returnValue, int p);
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface EmptyPrx : global::Ice.ObjectPrx
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface ThrowerPrx : global::Ice.ObjectPrx
    {
        void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        bool supportsUndeclaredExceptions(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<bool> supportsUndeclaredExceptionsAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        bool supportsAssertException(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<bool> supportsAssertExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwAasA(int a, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwAasAAsync(int a, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwAorDasAorD(int a, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwAorDasAorDAsync(int a, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwBasA(int a, int b, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwBasAAsync(int a, int b, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwCasA(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwCasAAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwBasB(int a, int b, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwBasBAsync(int a, int b, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwCasB(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwCasBAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwCasC(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwCasCAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwModA(int a, int a2, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwModAAsync(int a, int a2, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwUndeclaredA(int a, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwUndeclaredAAsync(int a, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwUndeclaredB(int a, int b, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwUndeclaredBAsync(int a, int b, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwUndeclaredC(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwUndeclaredCAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwLocalException(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwLocalExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwNonIceException(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwNonIceExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwAssertException(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwAssertExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] throwMemoryLimitException(byte[] seq, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<byte[]> throwMemoryLimitExceptionAsync(byte[] seq, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwLocalExceptionIdempotent(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwLocalExceptionIdempotentAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwAfterResponse(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwAfterResponseAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        void throwAfterException(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task throwAfterExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);

        int throwMarshalException(out int p, global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task<Thrower_ThrowMarshalExceptionResult> throwMarshalExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface WrongOperationPrx : global::Ice.ObjectPrx
    {
        void noSuchOperation(global::System.Collections.Generic.Dictionary<string, string> context = null);

        global::System.Threading.Tasks.Task noSuchOperationAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface EmptyOperations_
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface ThrowerOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void shutdown(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool supportsUndeclaredExceptions(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool supportsAssertException(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwAasA(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwAorDasAorD(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwBasA(int a, int b, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwCasA(int a, int b, int c, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwBasB(int a, int b, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwCasB(int a, int b, int c, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwCasC(int a, int b, int c, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwModA(int a, int a2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwUndeclaredA(int a, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwUndeclaredB(int a, int b, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwUndeclaredC(int a, int b, int c, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwLocalException(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwNonIceException(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwAssertException(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte[] throwMemoryLimitException(byte[] seq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwLocalExceptionIdempotent(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwAfterResponse(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwAfterException(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        int throwMarshalException(out int p, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface WrongOperationOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void noSuchOperation(global::Ice.Current current = null);
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class EmptyPrxHelper : global::Ice.ObjectPrxHelperBase, EmptyPrx
    {
        public EmptyPrxHelper()
        {
        }

        #region Async Task operations

        #endregion

        #region Factory operations

        public static EmptyPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static EmptyPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                EmptyPrxHelper prx = new EmptyPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static EmptyPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    EmptyPrxHelper prx = new EmptyPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static EmptyPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                EmptyPrxHelper prx = new EmptyPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static EmptyPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                EmptyPrxHelper prx = new EmptyPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Empty"
        };

        public static string ice_staticId() => "::Test::Empty";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, EmptyPrx v)
        {
            ostr.writeProxy(v);
        }

        public static EmptyPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                EmptyPrxHelper result = new EmptyPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ThrowerPrxHelper : global::Ice.ObjectPrxHelperBase, ThrowerPrx
    {
        public ThrowerPrxHelper()
        {
        }

        #region Synchronous operations

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool supportsUndeclaredExceptions(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_supportsUndeclaredExceptionsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool supportsAssertException(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_supportsAssertExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwAasA(int a, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwAasAAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwAorDasAorD(int a, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwAorDasAorDAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwBasA(int a, int b, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwBasAAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwCasA(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwCasAAsync(a, b, c, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwBasB(int a, int b, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwBasBAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwCasB(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwCasBAsync(a, b, c, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwCasC(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwCasCAsync(a, b, c, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwModA(int a, int a2, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwModAAsync(a, a2, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwUndeclaredA(int a, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwUndeclaredAAsync(a, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwUndeclaredB(int a, int b, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwUndeclaredBAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwUndeclaredC(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwUndeclaredCAsync(a, b, c, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwLocalException(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwLocalExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwNonIceException(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwNonIceExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwAssertException(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwAssertExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public byte[] throwMemoryLimitException(byte[] seq, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                return _iceI_throwMemoryLimitExceptionAsync(seq, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwLocalExceptionIdempotent(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwLocalExceptionIdempotentAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwAfterResponse(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwAfterResponseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwAfterException(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_throwAfterExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int throwMarshalException(out int p, global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                var result_ = _iceI_throwMarshalExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                p = result_.p;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<bool> supportsUndeclaredExceptionsAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_supportsUndeclaredExceptionsAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_supportsUndeclaredExceptionsAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_supportsUndeclaredExceptions_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_supportsUndeclaredExceptions(context, synchronous, completed);
            return completed.Task;
        }

        private const string _supportsUndeclaredExceptions_name = "supportsUndeclaredExceptions";

        private void _iceI_supportsUndeclaredExceptions(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _supportsUndeclaredExceptions_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret = default;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> supportsAssertExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_supportsAssertExceptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_supportsAssertExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_supportsAssertException_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_supportsAssertException(context, synchronous, completed);
            return completed.Task;
        }

        private const string _supportsAssertException_name = "supportsAssertException";

        private void _iceI_supportsAssertException(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _supportsAssertException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret = default;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task throwAasAAsync(int a, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwAasAAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwAasAAsync(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwAasA_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwAasA(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwAasA_name = "throwAasA";

        private void _iceI_throwAasA(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwAasA_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(A)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwAorDasAorDAsync(int a, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwAorDasAorDAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwAorDasAorDAsync(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwAorDasAorD_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwAorDasAorD(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwAorDasAorD_name = "throwAorDasAorD";

        private void _iceI_throwAorDasAorD(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwAorDasAorD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(A)
                    {
                        throw;
                    }
                    catch(D)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwBasAAsync(int a, int b, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwBasAAsync(a, b, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwBasAAsync(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwBasA_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwBasA(iceP_a, iceP_b, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwBasA_name = "throwBasA";

        private void _iceI_throwBasA(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwBasA_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                    ostr.writeInt(iceP_b);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(A)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwCasAAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwCasAAsync(a, b, c, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwCasAAsync(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwCasA_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwCasA(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwCasA_name = "throwCasA";

        private void _iceI_throwCasA(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwCasA_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                    ostr.writeInt(iceP_b);
                    ostr.writeInt(iceP_c);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(A)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwBasBAsync(int a, int b, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwBasBAsync(a, b, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwBasBAsync(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwBasB_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwBasB(iceP_a, iceP_b, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwBasB_name = "throwBasB";

        private void _iceI_throwBasB(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwBasB_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                    ostr.writeInt(iceP_b);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(B)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwCasBAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwCasBAsync(a, b, c, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwCasBAsync(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwCasB_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwCasB(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwCasB_name = "throwCasB";

        private void _iceI_throwCasB(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwCasB_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                    ostr.writeInt(iceP_b);
                    ostr.writeInt(iceP_c);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(B)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwCasCAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwCasCAsync(a, b, c, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwCasCAsync(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwCasC_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwCasC(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwCasC_name = "throwCasC";

        private void _iceI_throwCasC(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwCasC_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                    ostr.writeInt(iceP_b);
                    ostr.writeInt(iceP_c);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(C)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwModAAsync(int a, int a2, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwModAAsync(a, a2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwModAAsync(int iceP_a, int iceP_a2, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwModA_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwModA(iceP_a, iceP_a2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwModA_name = "throwModA";

        private void _iceI_throwModA(int iceP_a, int iceP_a2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwModA_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                    ostr.writeInt(iceP_a2);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Test.Mod.A)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwUndeclaredAAsync(int a, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwUndeclaredAAsync(a, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwUndeclaredAAsync(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwUndeclaredA(iceP_a, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwUndeclaredA_name = "throwUndeclaredA";

        private void _iceI_throwUndeclaredA(int iceP_a, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwUndeclaredA_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                });
        }

        public global::System.Threading.Tasks.Task throwUndeclaredBAsync(int a, int b, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwUndeclaredBAsync(a, b, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwUndeclaredBAsync(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwUndeclaredB(iceP_a, iceP_b, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwUndeclaredB_name = "throwUndeclaredB";

        private void _iceI_throwUndeclaredB(int iceP_a, int iceP_b, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwUndeclaredB_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                    ostr.writeInt(iceP_b);
                });
        }

        public global::System.Threading.Tasks.Task throwUndeclaredCAsync(int a, int b, int c, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwUndeclaredCAsync(a, b, c, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwUndeclaredCAsync(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwUndeclaredC(iceP_a, iceP_b, iceP_c, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwUndeclaredC_name = "throwUndeclaredC";

        private void _iceI_throwUndeclaredC(int iceP_a, int iceP_b, int iceP_c, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwUndeclaredC_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_a);
                    ostr.writeInt(iceP_b);
                    ostr.writeInt(iceP_c);
                });
        }

        public global::System.Threading.Tasks.Task throwLocalExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwLocalExceptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwLocalExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwLocalException(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwLocalException_name = "throwLocalException";

        private void _iceI_throwLocalException(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwLocalException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task throwNonIceExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwNonIceExceptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwNonIceExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwNonIceException(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwNonIceException_name = "throwNonIceException";

        private void _iceI_throwNonIceException(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwNonIceException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task throwAssertExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwAssertExceptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwAssertExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwAssertException(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwAssertException_name = "throwAssertException";

        private void _iceI_throwAssertException(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwAssertException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<byte[]> throwMemoryLimitExceptionAsync(byte[] seq, global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwMemoryLimitExceptionAsync(seq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<byte[]> _iceI_throwMemoryLimitExceptionAsync(byte[] iceP_seq, global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwMemoryLimitException_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
            _iceI_throwMemoryLimitException(iceP_seq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwMemoryLimitException_name = "throwMemoryLimitException";

        private void _iceI_throwMemoryLimitException(byte[] iceP_seq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<byte[]>(completed);
            outAsync.invoke(
                _throwMemoryLimitException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.ByteSeqHelper.write(ostr, iceP_seq);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    byte[] ret = default;
                    ret = global::Ice.ByteSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task throwLocalExceptionIdempotentAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwLocalExceptionIdempotentAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwLocalExceptionIdempotentAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwLocalExceptionIdempotent(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwLocalExceptionIdempotent_name = "throwLocalExceptionIdempotent";

        private void _iceI_throwLocalExceptionIdempotent(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwLocalExceptionIdempotent_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task throwAfterResponseAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwAfterResponseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwAfterResponseAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwAfterResponse(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwAfterResponse_name = "throwAfterResponse";

        private void _iceI_throwAfterResponse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwAfterResponse_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task throwAfterExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwAfterExceptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwAfterExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwAfterException_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwAfterException(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwAfterException_name = "throwAfterException";

        private void _iceI_throwAfterException(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwAfterException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(A)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<Thrower_ThrowMarshalExceptionResult> throwMarshalExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_throwMarshalExceptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Thrower_ThrowMarshalExceptionResult> _iceI_throwMarshalExceptionAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwMarshalException_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Thrower_ThrowMarshalExceptionResult>(progress, cancel);
            _iceI_throwMarshalException(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwMarshalException_name = "throwMarshalException";

        private void _iceI_throwMarshalException(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Thrower_ThrowMarshalExceptionResult>(completed);
            outAsync.invoke(
                _throwMarshalException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Thrower_ThrowMarshalExceptionResult ret = new Thrower_ThrowMarshalExceptionResult();
                    ret.p = istr.readInt();
                    ret.returnValue = istr.readInt();
                    return ret;
                });
        }

        #endregion

        #region Factory operations

        public static ThrowerPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static ThrowerPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                ThrowerPrxHelper prx = new ThrowerPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static ThrowerPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    ThrowerPrxHelper prx = new ThrowerPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ThrowerPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                ThrowerPrxHelper prx = new ThrowerPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static ThrowerPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                ThrowerPrxHelper prx = new ThrowerPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Thrower"
        };

        public static string ice_staticId() => "::Test::Thrower";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, ThrowerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static ThrowerPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ThrowerPrxHelper result = new ThrowerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class WrongOperationPrxHelper : global::Ice.ObjectPrxHelperBase, WrongOperationPrx
    {
        public WrongOperationPrxHelper()
        {
        }

        #region Synchronous operations

        public void noSuchOperation(global::System.Collections.Generic.Dictionary<string, string> context = null)
        {
            try
            {
                _iceI_noSuchOperationAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task noSuchOperationAsync(global::System.Collections.Generic.Dictionary<string, string> context = null, global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_noSuchOperationAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_noSuchOperationAsync(global::System.Collections.Generic.Dictionary<string, string> context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_noSuchOperation(context, synchronous, completed);
            return completed.Task;
        }

        private const string _noSuchOperation_name = "noSuchOperation";

        private void _iceI_noSuchOperation(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _noSuchOperation_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Factory operations

        public static WrongOperationPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static WrongOperationPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                WrongOperationPrxHelper prx = new WrongOperationPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static WrongOperationPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx = null)
        {
            global::Ice.ObjectPrx bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    WrongOperationPrxHelper prx = new WrongOperationPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static WrongOperationPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if (b is not null)
            {
                WrongOperationPrxHelper prx = new WrongOperationPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static WrongOperationPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                WrongOperationPrxHelper prx = new WrongOperationPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::WrongOperation"
        };

        public static string ice_staticId() => "::Test::WrongOperation";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, WrongOperationPrx v)
        {
            ostr.writeProxy(v);
        }

        public static WrongOperationPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                WrongOperationPrxHelper result = new WrongOperationPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class EmptyDisp_ : global::Ice.ObjectImpl, Empty
    {
        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Empty"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::Empty";
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class ThrowerDisp_ : global::Ice.ObjectImpl, Thrower
    {
        #region Slice operations

        public abstract void shutdown(global::Ice.Current current = null);

        public abstract bool supportsUndeclaredExceptions(global::Ice.Current current = null);

        public abstract bool supportsAssertException(global::Ice.Current current = null);

        public abstract void throwAasA(int a, global::Ice.Current current = null);

        public abstract void throwAorDasAorD(int a, global::Ice.Current current = null);

        public abstract void throwBasA(int a, int b, global::Ice.Current current = null);

        public abstract void throwCasA(int a, int b, int c, global::Ice.Current current = null);

        public abstract void throwBasB(int a, int b, global::Ice.Current current = null);

        public abstract void throwCasB(int a, int b, int c, global::Ice.Current current = null);

        public abstract void throwCasC(int a, int b, int c, global::Ice.Current current = null);

        public abstract void throwModA(int a, int a2, global::Ice.Current current = null);

        public abstract void throwUndeclaredA(int a, global::Ice.Current current = null);

        public abstract void throwUndeclaredB(int a, int b, global::Ice.Current current = null);

        public abstract void throwUndeclaredC(int a, int b, int c, global::Ice.Current current = null);

        public abstract void throwLocalException(global::Ice.Current current = null);

        public abstract void throwNonIceException(global::Ice.Current current = null);

        public abstract void throwAssertException(global::Ice.Current current = null);

        public abstract byte[] throwMemoryLimitException(byte[] seq, global::Ice.Current current = null);

        public abstract void throwLocalExceptionIdempotent(global::Ice.Current current = null);

        public abstract void throwAfterResponse(global::Ice.Current current = null);

        public abstract void throwAfterException(global::Ice.Current current = null);

        public abstract int throwMarshalException(out int p, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Thrower"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::Thrower";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_supportsUndeclaredExceptions(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.supportsUndeclaredExceptions(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_supportsAssertException(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.supportsAssertException(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwAasA(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a = default;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.throwAasA(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwAorDasAorD(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a = default;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.throwAorDasAorD(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwBasA(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a = default;
            int iceP_b = default;
            iceP_a = istr.readInt();
            iceP_b = istr.readInt();
            inS.endReadParams();
            obj.throwBasA(iceP_a, iceP_b, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwCasA(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a = default;
            int iceP_b = default;
            int iceP_c = default;
            iceP_a = istr.readInt();
            iceP_b = istr.readInt();
            iceP_c = istr.readInt();
            inS.endReadParams();
            obj.throwCasA(iceP_a, iceP_b, iceP_c, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwBasB(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a = default;
            int iceP_b = default;
            iceP_a = istr.readInt();
            iceP_b = istr.readInt();
            inS.endReadParams();
            obj.throwBasB(iceP_a, iceP_b, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwCasB(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a = default;
            int iceP_b = default;
            int iceP_c = default;
            iceP_a = istr.readInt();
            iceP_b = istr.readInt();
            iceP_c = istr.readInt();
            inS.endReadParams();
            obj.throwCasB(iceP_a, iceP_b, iceP_c, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwCasC(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a = default;
            int iceP_b = default;
            int iceP_c = default;
            iceP_a = istr.readInt();
            iceP_b = istr.readInt();
            iceP_c = istr.readInt();
            inS.endReadParams();
            obj.throwCasC(iceP_a, iceP_b, iceP_c, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwModA(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a = default;
            int iceP_a2 = default;
            iceP_a = istr.readInt();
            iceP_a2 = istr.readInt();
            inS.endReadParams();
            obj.throwModA(iceP_a, iceP_a2, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwUndeclaredA(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a = default;
            iceP_a = istr.readInt();
            inS.endReadParams();
            obj.throwUndeclaredA(iceP_a, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwUndeclaredB(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a = default;
            int iceP_b = default;
            iceP_a = istr.readInt();
            iceP_b = istr.readInt();
            inS.endReadParams();
            obj.throwUndeclaredB(iceP_a, iceP_b, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwUndeclaredC(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_a = default;
            int iceP_b = default;
            int iceP_c = default;
            iceP_a = istr.readInt();
            iceP_b = istr.readInt();
            iceP_c = istr.readInt();
            inS.endReadParams();
            obj.throwUndeclaredC(iceP_a, iceP_b, iceP_c, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwLocalException(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwLocalException(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwNonIceException(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwNonIceException(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwAssertException(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwAssertException(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwMemoryLimitException(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_seq = default;
            iceP_seq = global::Ice.ByteSeqHelper.read(istr);
            inS.endReadParams();
            var ret = obj.throwMemoryLimitException(iceP_seq, current);
            var ostr = inS.startWriteParams();
            global::Ice.ByteSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwLocalExceptionIdempotent(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            obj.throwLocalExceptionIdempotent(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwAfterResponse(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwAfterResponse(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwAfterException(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwAfterException(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwMarshalException(Thrower obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            int iceP_p;
            var ret = obj.throwMarshalException(out iceP_p, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(iceP_p);
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "shutdown",
            "supportsAssertException",
            "supportsUndeclaredExceptions",
            "throwAasA",
            "throwAfterException",
            "throwAfterResponse",
            "throwAorDasAorD",
            "throwAssertException",
            "throwBasA",
            "throwBasB",
            "throwCasA",
            "throwCasB",
            "throwCasC",
            "throwLocalException",
            "throwLocalExceptionIdempotent",
            "throwMarshalException",
            "throwMemoryLimitException",
            "throwModA",
            "throwNonIceException",
            "throwUndeclaredA",
            "throwUndeclaredB",
            "throwUndeclaredC"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_shutdown(this, inS, current);
                }
                case 5:
                {
                    return iceD_supportsAssertException(this, inS, current);
                }
                case 6:
                {
                    return iceD_supportsUndeclaredExceptions(this, inS, current);
                }
                case 7:
                {
                    return iceD_throwAasA(this, inS, current);
                }
                case 8:
                {
                    return iceD_throwAfterException(this, inS, current);
                }
                case 9:
                {
                    return iceD_throwAfterResponse(this, inS, current);
                }
                case 10:
                {
                    return iceD_throwAorDasAorD(this, inS, current);
                }
                case 11:
                {
                    return iceD_throwAssertException(this, inS, current);
                }
                case 12:
                {
                    return iceD_throwBasA(this, inS, current);
                }
                case 13:
                {
                    return iceD_throwBasB(this, inS, current);
                }
                case 14:
                {
                    return iceD_throwCasA(this, inS, current);
                }
                case 15:
                {
                    return iceD_throwCasB(this, inS, current);
                }
                case 16:
                {
                    return iceD_throwCasC(this, inS, current);
                }
                case 17:
                {
                    return iceD_throwLocalException(this, inS, current);
                }
                case 18:
                {
                    return iceD_throwLocalExceptionIdempotent(this, inS, current);
                }
                case 19:
                {
                    return iceD_throwMarshalException(this, inS, current);
                }
                case 20:
                {
                    return iceD_throwMemoryLimitException(this, inS, current);
                }
                case 21:
                {
                    return iceD_throwModA(this, inS, current);
                }
                case 22:
                {
                    return iceD_throwNonIceException(this, inS, current);
                }
                case 23:
                {
                    return iceD_throwUndeclaredA(this, inS, current);
                }
                case 24:
                {
                    return iceD_throwUndeclaredB(this, inS, current);
                }
                case 25:
                {
                    return iceD_throwUndeclaredC(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class WrongOperationDisp_ : global::Ice.ObjectImpl, WrongOperation
    {
        #region Slice operations

        public abstract void noSuchOperation(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::WrongOperation"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::WrongOperation";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_noSuchOperation(WrongOperation obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.noSuchOperation(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "noSuchOperation"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_noSuchOperation(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
