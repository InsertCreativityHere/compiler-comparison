//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("ClientPrivate.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test
{
    [Ice.SliceTypeId("::Test::Empty")]
    public partial class Empty : Ice.Value
    {
        partial void ice_initialize();

        public Empty()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::Empty";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test::AlsoEmpty")]
    public partial class AlsoEmpty : Ice.Value
    {
        partial void ice_initialize();

        public AlsoEmpty()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::AlsoEmpty";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test::UnexpectedObjectExceptionTest")]
    public partial interface UnexpectedObjectExceptionTest : Ice.Object
    {
        Empty? op(Ice.Current current);
    }

    [Ice.SliceTypeId("::Test::COneMember")]
    public partial class COneMember : Ice.Value
    {
        public Empty? e;

        partial void ice_initialize();

        public COneMember(Empty? e)
        {
            this.e = e;
            ice_initialize();
        }

        public COneMember()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::COneMember";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(e);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((Empty? v) => { this.e = v; });
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test::CTwoMembers")]
    public partial class CTwoMembers : Ice.Value
    {
        public Empty? e1;

        public Empty? e2;

        partial void ice_initialize();

        public CTwoMembers(Empty? e1, Empty? e2)
        {
            this.e1 = e1;
            this.e2 = e2;
            ice_initialize();
        }

        public CTwoMembers()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::CTwoMembers";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(e1);
            ostr_.writeValue(e2);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((Empty? v) => { this.e1 = v; });
            istr_.readValue((Empty? v) => { this.e2 = v; });
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test::EOneMember")]
    public partial class EOneMember : Ice.UserException
    {
        public Empty? e;

        public EOneMember(Empty? e)
        {
            this.e = e;
        }

        public EOneMember()
        {
        }

        public override string ice_id() => "::Test::EOneMember";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::EOneMember", -1, true);
            ostr_.writeValue(e);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((Empty? v) => { this.e = v; });
            istr_.endSlice();
        }

        public override bool iceUsesClasses()
        {
            return true;
        }
    }

    [Ice.SliceTypeId("::Test::ETwoMembers")]
    public partial class ETwoMembers : Ice.UserException
    {
        public Empty? e1;

        public Empty? e2;

        public ETwoMembers(Empty? e1, Empty? e2)
        {
            this.e1 = e1;
            this.e2 = e2;
        }

        public ETwoMembers()
        {
        }

        public override string ice_id() => "::Test::ETwoMembers";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::ETwoMembers", -1, true);
            ostr_.writeValue(e1);
            ostr_.writeValue(e2);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((Empty? v) => { this.e1 = v; });
            istr_.readValue((Empty? v) => { this.e2 = v; });
            istr_.endSlice();
        }

        public override bool iceUsesClasses()
        {
            return true;
        }
    }

    public sealed partial record class SOneMember
    {
        public Empty? e;

        partial void ice_initialize();

        public SOneMember()
        {
            ice_initialize();
        }

        public SOneMember(Empty? e)
        {
            this.e = e;
            ice_initialize();
        }

        public SOneMember(Ice.InputStream istr)
        {
            istr.readValue((Empty? v) => { this.e = v; });
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeValue(this.e);
        }

        public static void ice_write(Ice.OutputStream ostr, SOneMember v)
        {
            v.ice_writeMembers(ostr);
        }

        public static SOneMember ice_read(Ice.InputStream istr) => new(istr);
    }

    public sealed partial record class STwoMembers
    {
        public Empty? e1;

        public Empty? e2;

        partial void ice_initialize();

        public STwoMembers()
        {
            ice_initialize();
        }

        public STwoMembers(Empty? e1, Empty? e2)
        {
            this.e1 = e1;
            this.e2 = e2;
            ice_initialize();
        }

        public STwoMembers(Ice.InputStream istr)
        {
            istr.readValue((Empty? v) => { this.e1 = v; });
            istr.readValue((Empty? v) => { this.e2 = v; });
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeValue(this.e1);
            ostr.writeValue(this.e2);
        }

        public static void ice_write(Ice.OutputStream ostr, STwoMembers v)
        {
            v.ice_writeMembers(ostr);
        }

        public static STwoMembers ice_read(Ice.InputStream istr) => new(istr);
    }
}

namespace Test
{
    public interface UnexpectedObjectExceptionTestPrx : Ice.ObjectPrx
    {
        Empty? op(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Empty?> opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    public sealed class UnexpectedObjectExceptionTestPrxHelper : Ice.ObjectPrxHelperBase, UnexpectedObjectExceptionTestPrx
    {
        public Empty? op(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<Empty?> opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Empty?> _iceI_opAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_op_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<Empty?>(progress, cancel);
            _iceI_op(context, synchronous, completed);
            return completed.Task;
        }

        private const string _op_name = "op";

        private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Empty?>(completed);
            outAsync.invoke(
                _op_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    Empty? ret = null;
                    istr.readValue((Empty? v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public static UnexpectedObjectExceptionTestPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new UnexpectedObjectExceptionTestPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static UnexpectedObjectExceptionTestPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new UnexpectedObjectExceptionTestPrxHelper(b) : null;

        public static UnexpectedObjectExceptionTestPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static UnexpectedObjectExceptionTestPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new UnexpectedObjectExceptionTestPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static UnexpectedObjectExceptionTestPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::UnexpectedObjectExceptionTest"
        };

        public static string ice_staticId() => "::Test::UnexpectedObjectExceptionTest";

        public static void write(Ice.OutputStream ostr, UnexpectedObjectExceptionTestPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static UnexpectedObjectExceptionTestPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new UnexpectedObjectExceptionTestPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new UnexpectedObjectExceptionTestPrxHelper(reference);

        private UnexpectedObjectExceptionTestPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private UnexpectedObjectExceptionTestPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    public sealed class DOneMemberHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, COneMember?> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, COneMember?> e in v)
                {
                    ostr.writeInt(e.Key);
                    ostr.writeValue(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, COneMember?> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, COneMember?> r = new global::System.Collections.Generic.Dictionary<int, COneMember?>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                istr.readValue((COneMember? v) => { r[k] = v; });
            }
            return r;
        }
    }

    public sealed class DTwoMembersHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, CTwoMembers?> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, CTwoMembers?> e in v)
                {
                    ostr.writeInt(e.Key);
                    ostr.writeValue(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, CTwoMembers?> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, CTwoMembers?> r = new global::System.Collections.Generic.Dictionary<int, CTwoMembers?>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                istr.readValue((CTwoMembers? v) => { r[k] = v; });
            }
            return r;
        }
    }
}

namespace Test
{
    public abstract class UnexpectedObjectExceptionTestDisp_ : Ice.ObjectImpl, UnexpectedObjectExceptionTest
    {
        public abstract Empty? op(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::UnexpectedObjectExceptionTest";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "op" => UnexpectedObjectExceptionTest.iceD_opAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test
{
    public partial interface UnexpectedObjectExceptionTest
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAsync(
            UnexpectedObjectExceptionTest obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.op(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }
}
