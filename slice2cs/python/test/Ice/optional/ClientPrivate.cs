//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class D : B
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string ds;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public global::Ice.Optional<string[]> seq;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public global::Ice.Optional<A> ao;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public D() : base()
        {
            this.ds = "";
            this.seq = new global::Ice.Optional<string[]>();
            this.ao = new global::Ice.Optional<A>();
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public D(int requiredA, global::Ice.Optional<int> ma, global::Ice.Optional<int> mb, global::Ice.Optional<int> mc, int requiredB, global::Ice.Optional<int> md, string ds, global::Ice.Optional<string[]> seq, global::Ice.Optional<A> ao) : base(requiredA, ma, mb, mc, requiredB, md)
        {
            this.ds = ds;
            this.seq = seq;
            this.ao = ao;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::D";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(ds);
            ostr_.writeStringSeq(990, seq);
            ostr_.writeValue(1000, ao);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            ds = istr_.readString();
            if(istr_.readOptional(990, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                string[] tmpVal;
                tmpVal = StringSeqHelper.read(istr_);
                seq = new global::Ice.Optional<string[]>(tmpVal);
            }
            else
            {
                seq = new global::Ice.Optional<string[]>();
            }
            istr_.readValue(1000, (A v) => { this.ao = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Initial2 : global::Ice.Object, Initial2Operations_
    {
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Initial2_opClassAndUnknownOptional();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Initial2_opVoid();
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface Initial2Prx : global::Ice.ObjectPrx
    {
        void opClassAndUnknownOptional(A p, global::Ice.Optional<global::Ice.Value> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task opClassAndUnknownOptionalAsync(A p, global::Ice.Optional<global::Ice.Value> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial2_opClassAndUnknownOptional> begin_opClassAndUnknownOptional(A p, global::Ice.Optional<global::Ice.Value> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opClassAndUnknownOptional(A p, global::Ice.Optional<global::Ice.Value> o, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opClassAndUnknownOptional(A p, global::Ice.Optional<global::Ice.Value> o, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_opClassAndUnknownOptional(global::Ice.AsyncResult asyncResult);

        void opVoid(global::Ice.Optional<int> a, global::Ice.Optional<string> v, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task opVoidAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> v, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial2_opVoid> begin_opVoid(global::Ice.Optional<int> a, global::Ice.Optional<string> v, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opVoid(global::Ice.Optional<int> a, global::Ice.Optional<string> v, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opVoid(global::Ice.Optional<int> a, global::Ice.Optional<string> v, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_opVoid(global::Ice.AsyncResult asyncResult);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface Initial2Operations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void opClassAndUnknownOptional(A p, global::Ice.Optional<global::Ice.Value> o, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void opVoid(global::Ice.Optional<int> a, global::Ice.Optional<string> v, global::Ice.Current current = null);
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class Initial2PrxHelper : global::Ice.ObjectPrxHelperBase, Initial2Prx
    {
        public Initial2PrxHelper()
        {
        }

        #region Synchronous operations

        public void opClassAndUnknownOptional(A p, global::Ice.Optional<global::Ice.Value> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_opClassAndUnknownOptionalAsync(p, o, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void opVoid(global::Ice.Optional<int> a, global::Ice.Optional<string> v, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_opVoidAsync(a, v, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task opClassAndUnknownOptionalAsync(A p, global::Ice.Optional<global::Ice.Value> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opClassAndUnknownOptionalAsync(p, o, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opClassAndUnknownOptionalAsync(A iceP_p, global::Ice.Optional<global::Ice.Value> iceP_o, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opClassAndUnknownOptional(iceP_p, iceP_o, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opClassAndUnknownOptional_name = "opClassAndUnknownOptional";

        private void _iceI_opClassAndUnknownOptional(A iceP_p, global::Ice.Optional<global::Ice.Value> iceP_o, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opClassAndUnknownOptional_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_p);
                    ostr.writeValue(1, iceP_o);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task opVoidAsync(global::Ice.Optional<int> a, global::Ice.Optional<string> v, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opVoidAsync(a, v, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opVoidAsync(global::Ice.Optional<int> iceP_a, global::Ice.Optional<string> iceP_v, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opVoid(iceP_a, iceP_v, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVoid_name = "opVoid";

        private void _iceI_opVoid(global::Ice.Optional<int> iceP_a, global::Ice.Optional<string> iceP_v, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opVoid_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(1, iceP_a);
                    ostr.writeString(2, iceP_v);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Initial2_opClassAndUnknownOptional> begin_opClassAndUnknownOptional(A p, global::Ice.Optional<global::Ice.Value> o, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opClassAndUnknownOptional(p, o, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opClassAndUnknownOptional(A p, global::Ice.Optional<global::Ice.Value> o, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opClassAndUnknownOptional(p, o, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opClassAndUnknownOptional(A p, global::Ice.Optional<global::Ice.Value> o, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opClassAndUnknownOptional(p, o, context, callback, cookie, false);
        }

        public void end_opClassAndUnknownOptional(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opClassAndUnknownOptional_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial2_opClassAndUnknownOptional> begin_opClassAndUnknownOptional(A iceP_p, global::Ice.Optional<global::Ice.Value> iceP_o, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial2_opClassAndUnknownOptional, object>(
                (Callback_Initial2_opClassAndUnknownOptional cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _opClassAndUnknownOptional_name, cookie, completedCallback);
            _iceI_opClassAndUnknownOptional(iceP_p, iceP_o, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial2_opVoid> begin_opVoid(global::Ice.Optional<int> a, global::Ice.Optional<string> v, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opVoid(a, v, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opVoid(global::Ice.Optional<int> a, global::Ice.Optional<string> v, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opVoid(a, v, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opVoid(global::Ice.Optional<int> a, global::Ice.Optional<string> v, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opVoid(a, v, context, callback, cookie, false);
        }

        public void end_opVoid(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opVoid_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial2_opVoid> begin_opVoid(global::Ice.Optional<int> iceP_a, global::Ice.Optional<string> iceP_v, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial2_opVoid, object>(
                (Callback_Initial2_opVoid cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _opVoid_name, cookie, completedCallback);
            _iceI_opVoid(iceP_a, iceP_v, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static Initial2Prx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            Initial2Prx r = b as Initial2Prx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                Initial2PrxHelper h = new Initial2PrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static Initial2Prx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Initial2Prx r = b as Initial2Prx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                Initial2PrxHelper h = new Initial2PrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static Initial2Prx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    Initial2PrxHelper h = new Initial2PrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static Initial2Prx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    Initial2PrxHelper h = new Initial2PrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static Initial2Prx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            Initial2Prx r = b as Initial2Prx;
            if(r == null)
            {
                Initial2PrxHelper h = new Initial2PrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static Initial2Prx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            Initial2PrxHelper h = new Initial2PrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Initial2"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, Initial2Prx v)
        {
            ostr.writeProxy(v);
        }

        public static Initial2Prx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                Initial2PrxHelper result = new Initial2PrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class Initial2Disp_ : global::Ice.ObjectImpl, Initial2
    {
        #region Slice operations

        public abstract void opClassAndUnknownOptional(A p, global::Ice.Optional<global::Ice.Value> o, global::Ice.Current current = null);

        public abstract void opVoid(global::Ice.Optional<int> a, global::Ice.Optional<string> v, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Initial2"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opClassAndUnknownOptional(Initial2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            A iceP_p;
            iceP_p = null;
            global::Ice.Optional<global::Ice.Value> iceP_o = global::Ice.Util.None;
            istr.readValue((A v) => {iceP_p = v; });
            istr.readValue(1, (global::Ice.Value v) => {iceP_o = v; });
            istr.readPendingValues();
            inS.endReadParams();
            obj.opClassAndUnknownOptional(iceP_p, iceP_o, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opVoid(Initial2 obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Optional<int> iceP_a;
            global::Ice.Optional<string> iceP_v;
            iceP_a = istr.readInt(1);
            iceP_v = istr.readString(2);
            inS.endReadParams();
            obj.opVoid(iceP_a, iceP_v, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "opClassAndUnknownOptional",
            "opVoid"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_opClassAndUnknownOptional(this, inS, current);
                }
                case 5:
                {
                    return iceD_opVoid(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
