//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `NoPackage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("NoPackage.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test1
{
    [Ice.SliceTypeId("::Test1::C1")]
    public partial class C1 : Ice.Value
    {
        public int i;

        partial void ice_initialize();

        public C1(int i)
        {
            this.i = i;
            ice_initialize();
        }

        public C1()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test1::C1";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(i);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            i = istr_.readInt();
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test1::C2")]
    public partial class C2 : C1
    {
        public long l;

        partial void ice_initialize();

        public C2(int i, long l) : base(i)
        {
            this.l = l;
            ice_initialize();
        }

        public C2()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test1::C2";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeLong(l);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            l = istr_.readLong();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    [Ice.SliceTypeId("::Test1::E1")]
    public partial class E1 : Ice.UserException
    {
        public int i;

        public E1(int i)
        {
            this.i = i;
        }

        public E1()
        {
        }

        public override string ice_id() => "::Test1::E1";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test1::E1", -1, true);
            ostr_.writeInt(i);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            i = istr_.readInt();
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test1::E2")]
    public partial class E2 : E1
    {
        public long l;

        public E2(int i, long l) : base(i)
        {
            this.l = l;
        }

        public E2()
        {
        }

        public override string ice_id() => "::Test1::E2";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test1::E2", -1, false);
            ostr_.writeLong(l);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            l = istr_.readLong();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }
    }

    /// <summary>
    /// Test keyword escape.
    /// </summary>

    [Ice.SliceTypeId("::Test1::notify")]
    public partial class notify : Ice.UserException
    {
        public int i;

        public notify(int i)
        {
            this.i = i;
        }

        public notify()
        {
        }

        public override string ice_id() => "::Test1::notify";

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test1::notify", -1, true);
            ostr_.writeInt(i);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            i = istr_.readInt();
            istr_.endSlice();
        }
    }
}
