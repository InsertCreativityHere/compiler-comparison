//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class ByteConst1
    {
        public const byte value = 10;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class ShortConst1
    {
        public const short value = 20;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class IntConst1
    {
        public const int value = 30;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class LongConst1
    {
        public const long value = 40L;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class ByteConst2
    {
        public const byte value = 126;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class ShortConst2
    {
        public const short value = 32766;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class IntConst2
    {
        public const int value = 2147483647;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class LongConst2
    {
        public const long value = 2147483646L;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public enum ByteEnum
    {
        benum1 = 0,
        benum2 = 1,
        benum3 = 10,
        benum4 = 11,
        benum5 = 20,
        benum6 = 21,
        benum7 = 30,
        benum8 = 31,
        benum9 = 40,
        benum10 = 41,
        benum11 = 126
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class ByteEnumHelper
    {
        public static void write(global::Ice.OutputStream ostr, ByteEnum v)
        {
            ostr.writeEnum((int)v, 126);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static ByteEnum read(global::Ice.InputStream istr)
        {
            ByteEnum v;
            v = (ByteEnum)istr.readEnum(126);
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public enum ShortEnum
    {
        senum1 = 3,
        senum2 = 4,
        senum3 = 10,
        senum4 = 11,
        senum5 = 20,
        senum6 = 21,
        senum7 = 30,
        senum8 = 31,
        senum9 = 40,
        senum10 = 41,
        senum11 = 32766
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class ShortEnumHelper
    {
        public static void write(global::Ice.OutputStream ostr, ShortEnum v)
        {
            ostr.writeEnum((int)v, 32766);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static ShortEnum read(global::Ice.InputStream istr)
        {
            ShortEnum v;
            v = (ShortEnum)istr.readEnum(32766);
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public enum IntEnum
    {
        ienum1 = 0,
        ienum2 = 1,
        ienum3 = 10,
        ienum4 = 11,
        ienum5 = 20,
        ienum6 = 21,
        ienum7 = 30,
        ienum8 = 31,
        ienum9 = 40,
        ienum10 = 41,
        ienum11 = 2147483647,
        ienum12 = 2147483646
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class IntEnumHelper
    {
        public static void write(global::Ice.OutputStream ostr, IntEnum v)
        {
            ostr.writeEnum((int)v, 2147483647);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static IntEnum read(global::Ice.InputStream istr)
        {
            IntEnum v;
            v = (IntEnum)istr.readEnum(2147483647);
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public enum SimpleEnum
    {
        red,
        green,
        blue
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class SimpleEnumHelper
    {
        public static void write(global::Ice.OutputStream ostr, SimpleEnum v)
        {
            ostr.writeEnum((int)v, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static SimpleEnum read(global::Ice.InputStream istr)
        {
            SimpleEnum v;
            v = (SimpleEnum)istr.readEnum(2);
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface TestIntf : global::Ice.Object, TestIntfOperations_
    {
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opByte(ByteEnum ret, ByteEnum b2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opShort(ShortEnum ret, ShortEnum s2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opInt(IntEnum ret, IntEnum i2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opSimple(SimpleEnum ret, SimpleEnum s2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opByteSeq(ByteEnum[] ret, ByteEnum[] b2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opShortSeq(ShortEnum[] ret, ShortEnum[] s2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opIntSeq(IntEnum[] ret, IntEnum[] i2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_opSimpleSeq(SimpleEnum[] ret, SimpleEnum[] s2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_TestIntf_shutdown();
}

namespace Test
{
    public struct TestIntf_OpByteResult
    {
        public TestIntf_OpByteResult(ByteEnum returnValue, ByteEnum b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public ByteEnum returnValue;
        public ByteEnum b2;
    }

    public struct TestIntf_OpShortResult
    {
        public TestIntf_OpShortResult(ShortEnum returnValue, ShortEnum s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public ShortEnum returnValue;
        public ShortEnum s2;
    }

    public struct TestIntf_OpIntResult
    {
        public TestIntf_OpIntResult(IntEnum returnValue, IntEnum i2)
        {
            this.returnValue = returnValue;
            this.i2 = i2;
        }

        public IntEnum returnValue;
        public IntEnum i2;
    }

    public struct TestIntf_OpSimpleResult
    {
        public TestIntf_OpSimpleResult(SimpleEnum returnValue, SimpleEnum s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public SimpleEnum returnValue;
        public SimpleEnum s2;
    }

    public struct TestIntf_OpByteSeqResult
    {
        public TestIntf_OpByteSeqResult(ByteEnum[] returnValue, ByteEnum[] b2)
        {
            this.returnValue = returnValue;
            this.b2 = b2;
        }

        public ByteEnum[] returnValue;
        public ByteEnum[] b2;
    }

    public struct TestIntf_OpShortSeqResult
    {
        public TestIntf_OpShortSeqResult(ShortEnum[] returnValue, ShortEnum[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public ShortEnum[] returnValue;
        public ShortEnum[] s2;
    }

    public struct TestIntf_OpIntSeqResult
    {
        public TestIntf_OpIntSeqResult(IntEnum[] returnValue, IntEnum[] i2)
        {
            this.returnValue = returnValue;
            this.i2 = i2;
        }

        public IntEnum[] returnValue;
        public IntEnum[] i2;
    }

    public struct TestIntf_OpSimpleSeqResult
    {
        public TestIntf_OpSimpleSeqResult(SimpleEnum[] returnValue, SimpleEnum[] s2)
        {
            this.returnValue = returnValue;
            this.s2 = s2;
        }

        public SimpleEnum[] returnValue;
        public SimpleEnum[] s2;
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface TestIntfPrx : global::Ice.ObjectPrx
    {
        ByteEnum opByte(ByteEnum b1, out ByteEnum b2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpByteResult> opByteAsync(ByteEnum b1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opByte> begin_opByte(ByteEnum b1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opByte(ByteEnum b1, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opByte(ByteEnum b1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        ByteEnum end_opByte(out ByteEnum b2, global::Ice.AsyncResult asyncResult);

        ShortEnum opShort(ShortEnum s1, out ShortEnum s2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpShortResult> opShortAsync(ShortEnum s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opShort> begin_opShort(ShortEnum s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opShort(ShortEnum s1, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opShort(ShortEnum s1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        ShortEnum end_opShort(out ShortEnum s2, global::Ice.AsyncResult asyncResult);

        IntEnum opInt(IntEnum i1, out IntEnum i2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpIntResult> opIntAsync(IntEnum i1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opInt> begin_opInt(IntEnum i1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opInt(IntEnum i1, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opInt(IntEnum i1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        IntEnum end_opInt(out IntEnum i2, global::Ice.AsyncResult asyncResult);

        SimpleEnum opSimple(SimpleEnum s1, out SimpleEnum s2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpSimpleResult> opSimpleAsync(SimpleEnum s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opSimple> begin_opSimple(SimpleEnum s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opSimple(SimpleEnum s1, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opSimple(SimpleEnum s1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        SimpleEnum end_opSimple(out SimpleEnum s2, global::Ice.AsyncResult asyncResult);

        ByteEnum[] opByteSeq(ByteEnum[] b1, out ByteEnum[] b2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(ByteEnum[] b1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opByteSeq> begin_opByteSeq(ByteEnum[] b1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opByteSeq(ByteEnum[] b1, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opByteSeq(ByteEnum[] b1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        ByteEnum[] end_opByteSeq(out ByteEnum[] b2, global::Ice.AsyncResult asyncResult);

        ShortEnum[] opShortSeq(ShortEnum[] s1, out ShortEnum[] s2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpShortSeqResult> opShortSeqAsync(ShortEnum[] s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opShortSeq> begin_opShortSeq(ShortEnum[] s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opShortSeq(ShortEnum[] s1, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opShortSeq(ShortEnum[] s1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        ShortEnum[] end_opShortSeq(out ShortEnum[] s2, global::Ice.AsyncResult asyncResult);

        IntEnum[] opIntSeq(IntEnum[] i1, out IntEnum[] i2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpIntSeqResult> opIntSeqAsync(IntEnum[] i1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opIntSeq> begin_opIntSeq(IntEnum[] i1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opIntSeq(IntEnum[] i1, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opIntSeq(IntEnum[] i1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        IntEnum[] end_opIntSeq(out IntEnum[] i2, global::Ice.AsyncResult asyncResult);

        SimpleEnum[] opSimpleSeq(SimpleEnum[] s1, out SimpleEnum[] s2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_OpSimpleSeqResult> opSimpleSeqAsync(SimpleEnum[] s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_opSimpleSeq> begin_opSimpleSeq(SimpleEnum[] s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opSimpleSeq(SimpleEnum[] s1, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opSimpleSeq(SimpleEnum[] s1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        SimpleEnum[] end_opSimpleSeq(out SimpleEnum[] s2, global::Ice.AsyncResult asyncResult);

        void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TestIntf_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_shutdown(global::Ice.AsyncResult asyncResult);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface TestIntfOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        ByteEnum opByte(ByteEnum b1, out ByteEnum b2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        ShortEnum opShort(ShortEnum s1, out ShortEnum s2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        IntEnum opInt(IntEnum i1, out IntEnum i2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        SimpleEnum opSimple(SimpleEnum s1, out SimpleEnum s2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        ByteEnum[] opByteSeq(ByteEnum[] b1, out ByteEnum[] b2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        ShortEnum[] opShortSeq(ShortEnum[] s1, out ShortEnum[] s2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        IntEnum[] opIntSeq(IntEnum[] i1, out IntEnum[] i2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        SimpleEnum[] opSimpleSeq(SimpleEnum[] s1, out SimpleEnum[] s2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void shutdown(global::Ice.Current current = null);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class ByteEnumSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, ByteEnum[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 126);
                }
            }
        }

        public static ByteEnum[] read(global::Ice.InputStream istr)
        {
            ByteEnum[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new ByteEnum[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (ByteEnum)istr.readEnum(126);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class ShortEnumSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, ShortEnum[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 32766);
                }
            }
        }

        public static ShortEnum[] read(global::Ice.InputStream istr)
        {
            ShortEnum[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new ShortEnum[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (ShortEnum)istr.readEnum(32766);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class IntEnumSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, IntEnum[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 2147483647);
                }
            }
        }

        public static IntEnum[] read(global::Ice.InputStream istr)
        {
            IntEnum[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new IntEnum[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (IntEnum)istr.readEnum(2147483647);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class SimpleEnumSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, SimpleEnum[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 2);
                }
            }
        }

        public static SimpleEnum[] read(global::Ice.InputStream istr)
        {
            SimpleEnum[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new SimpleEnum[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (SimpleEnum)istr.readEnum(2);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class TestIntfPrxHelper : global::Ice.ObjectPrxHelperBase, TestIntfPrx
    {
        public TestIntfPrxHelper()
        {
        }

        #region Synchronous operations

        public ByteEnum opByte(ByteEnum b1, out ByteEnum b2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteAsync(b1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                b2 = result_.b2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ShortEnum opShort(ShortEnum s1, out ShortEnum s2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opShortAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public IntEnum opInt(IntEnum i1, out IntEnum i2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opIntAsync(i1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                i2 = result_.i2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SimpleEnum opSimple(SimpleEnum s1, out SimpleEnum s2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opSimpleAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ByteEnum[] opByteSeq(ByteEnum[] b1, out ByteEnum[] b2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opByteSeqAsync(b1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                b2 = result_.b2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ShortEnum[] opShortSeq(ShortEnum[] s1, out ShortEnum[] s2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opShortSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public IntEnum[] opIntSeq(IntEnum[] i1, out IntEnum[] i2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opIntSeqAsync(i1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                i2 = result_.i2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SimpleEnum[] opSimpleSeq(SimpleEnum[] s1, out SimpleEnum[] s2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opSimpleSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<TestIntf_OpByteResult> opByteAsync(ByteEnum b1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteAsync(b1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteResult> _iceI_opByteAsync(ByteEnum iceP_b1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByte_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpByteResult>(progress, cancel);
            _iceI_opByte(iceP_b1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByte_name = "opByte";

        private void _iceI_opByte(ByteEnum iceP_b1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteResult>(completed);
            outAsync.invoke(
                _opByte_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_b1, 126);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpByteResult ret = new TestIntf_OpByteResult();
                    ret.b2 = (ByteEnum)istr.readEnum(126);
                    ret.returnValue = (ByteEnum)istr.readEnum(126);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpShortResult> opShortAsync(ShortEnum s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opShortAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpShortResult> _iceI_opShortAsync(ShortEnum iceP_s1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShort_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpShortResult>(progress, cancel);
            _iceI_opShort(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShort_name = "opShort";

        private void _iceI_opShort(ShortEnum iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpShortResult>(completed);
            outAsync.invoke(
                _opShort_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_s1, 32766);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpShortResult ret = new TestIntf_OpShortResult();
                    ret.s2 = (ShortEnum)istr.readEnum(32766);
                    ret.returnValue = (ShortEnum)istr.readEnum(32766);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpIntResult> opIntAsync(IntEnum i1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opIntAsync(i1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpIntResult> _iceI_opIntAsync(IntEnum iceP_i1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opInt_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpIntResult>(progress, cancel);
            _iceI_opInt(iceP_i1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opInt_name = "opInt";

        private void _iceI_opInt(IntEnum iceP_i1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpIntResult>(completed);
            outAsync.invoke(
                _opInt_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_i1, 2147483647);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpIntResult ret = new TestIntf_OpIntResult();
                    ret.i2 = (IntEnum)istr.readEnum(2147483647);
                    ret.returnValue = (IntEnum)istr.readEnum(2147483647);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpSimpleResult> opSimpleAsync(SimpleEnum s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opSimpleAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpSimpleResult> _iceI_opSimpleAsync(SimpleEnum iceP_s1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSimple_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpSimpleResult>(progress, cancel);
            _iceI_opSimple(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSimple_name = "opSimple";

        private void _iceI_opSimple(SimpleEnum iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpSimpleResult>(completed);
            outAsync.invoke(
                _opSimple_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_s1, 2);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpSimpleResult ret = new TestIntf_OpSimpleResult();
                    ret.s2 = (SimpleEnum)istr.readEnum(2);
                    ret.returnValue = (SimpleEnum)istr.readEnum(2);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(ByteEnum[] b1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opByteSeqAsync(b1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> _iceI_opByteSeqAsync(ByteEnum[] iceP_b1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpByteSeqResult>(progress, cancel);
            _iceI_opByteSeq(iceP_b1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSeq_name = "opByteSeq";

        private void _iceI_opByteSeq(ByteEnum[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteSeqResult>(completed);
            outAsync.invoke(
                _opByteSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ByteEnumSeqHelper.write(ostr, iceP_b1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpByteSeqResult ret = new TestIntf_OpByteSeqResult();
                    ret.b2 = ByteEnumSeqHelper.read(istr);
                    ret.returnValue = ByteEnumSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpShortSeqResult> opShortSeqAsync(ShortEnum[] s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opShortSeqAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpShortSeqResult> _iceI_opShortSeqAsync(ShortEnum[] iceP_s1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpShortSeqResult>(progress, cancel);
            _iceI_opShortSeq(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortSeq_name = "opShortSeq";

        private void _iceI_opShortSeq(ShortEnum[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpShortSeqResult>(completed);
            outAsync.invoke(
                _opShortSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ShortEnumSeqHelper.write(ostr, iceP_s1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpShortSeqResult ret = new TestIntf_OpShortSeqResult();
                    ret.s2 = ShortEnumSeqHelper.read(istr);
                    ret.returnValue = ShortEnumSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpIntSeqResult> opIntSeqAsync(IntEnum[] i1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opIntSeqAsync(i1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpIntSeqResult> _iceI_opIntSeqAsync(IntEnum[] iceP_i1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpIntSeqResult>(progress, cancel);
            _iceI_opIntSeq(iceP_i1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntSeq_name = "opIntSeq";

        private void _iceI_opIntSeq(IntEnum[] iceP_i1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpIntSeqResult>(completed);
            outAsync.invoke(
                _opIntSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    IntEnumSeqHelper.write(ostr, iceP_i1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpIntSeqResult ret = new TestIntf_OpIntSeqResult();
                    ret.i2 = IntEnumSeqHelper.read(istr);
                    ret.returnValue = IntEnumSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpSimpleSeqResult> opSimpleSeqAsync(SimpleEnum[] s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opSimpleSeqAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpSimpleSeqResult> _iceI_opSimpleSeqAsync(SimpleEnum[] iceP_s1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSimpleSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_OpSimpleSeqResult>(progress, cancel);
            _iceI_opSimpleSeq(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSimpleSeq_name = "opSimpleSeq";

        private void _iceI_opSimpleSeq(SimpleEnum[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpSimpleSeqResult>(completed);
            outAsync.invoke(
                _opSimpleSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    SimpleEnumSeqHelper.write(ostr, iceP_s1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_OpSimpleSeqResult ret = new TestIntf_OpSimpleSeqResult();
                    ret.s2 = SimpleEnumSeqHelper.read(istr);
                    ret.returnValue = SimpleEnumSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_TestIntf_opByte> begin_opByte(ByteEnum b1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opByte(b1, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opByte(ByteEnum b1, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opByte(b1, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opByte(ByteEnum b1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opByte(b1, context, callback, cookie, false);
        }

        public ByteEnum end_opByte(out ByteEnum b2, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opByte_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpByteResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            b2 = result_.b2;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opByte> begin_opByte(ByteEnum iceP_b1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opByte_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opByte, TestIntf_OpByteResult>(
                (Callback_TestIntf_opByte cb, TestIntf_OpByteResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.b2);
                    }
                },
                this, _opByte_name, cookie, completedCallback);
            _iceI_opByte(iceP_b1, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opShort> begin_opShort(ShortEnum s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opShort(s1, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opShort(ShortEnum s1, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opShort(s1, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opShort(ShortEnum s1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opShort(s1, context, callback, cookie, false);
        }

        public ShortEnum end_opShort(out ShortEnum s2, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opShort_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpShortResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            s2 = result_.s2;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opShort> begin_opShort(ShortEnum iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opShort_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opShort, TestIntf_OpShortResult>(
                (Callback_TestIntf_opShort cb, TestIntf_OpShortResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.s2);
                    }
                },
                this, _opShort_name, cookie, completedCallback);
            _iceI_opShort(iceP_s1, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opInt> begin_opInt(IntEnum i1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opInt(i1, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opInt(IntEnum i1, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opInt(i1, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opInt(IntEnum i1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opInt(i1, context, callback, cookie, false);
        }

        public IntEnum end_opInt(out IntEnum i2, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opInt_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpIntResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            i2 = result_.i2;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opInt> begin_opInt(IntEnum iceP_i1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opInt_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opInt, TestIntf_OpIntResult>(
                (Callback_TestIntf_opInt cb, TestIntf_OpIntResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.i2);
                    }
                },
                this, _opInt_name, cookie, completedCallback);
            _iceI_opInt(iceP_i1, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opSimple> begin_opSimple(SimpleEnum s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opSimple(s1, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opSimple(SimpleEnum s1, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opSimple(s1, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opSimple(SimpleEnum s1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opSimple(s1, context, callback, cookie, false);
        }

        public SimpleEnum end_opSimple(out SimpleEnum s2, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opSimple_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpSimpleResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            s2 = result_.s2;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opSimple> begin_opSimple(SimpleEnum iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opSimple_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opSimple, TestIntf_OpSimpleResult>(
                (Callback_TestIntf_opSimple cb, TestIntf_OpSimpleResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.s2);
                    }
                },
                this, _opSimple_name, cookie, completedCallback);
            _iceI_opSimple(iceP_s1, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opByteSeq> begin_opByteSeq(ByteEnum[] b1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opByteSeq(b1, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opByteSeq(ByteEnum[] b1, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opByteSeq(b1, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opByteSeq(ByteEnum[] b1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opByteSeq(b1, context, callback, cookie, false);
        }

        public ByteEnum[] end_opByteSeq(out ByteEnum[] b2, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opByteSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpByteSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            b2 = result_.b2;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opByteSeq> begin_opByteSeq(ByteEnum[] iceP_b1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opByteSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opByteSeq, TestIntf_OpByteSeqResult>(
                (Callback_TestIntf_opByteSeq cb, TestIntf_OpByteSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.b2);
                    }
                },
                this, _opByteSeq_name, cookie, completedCallback);
            _iceI_opByteSeq(iceP_b1, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opShortSeq> begin_opShortSeq(ShortEnum[] s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opShortSeq(s1, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opShortSeq(ShortEnum[] s1, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opShortSeq(s1, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opShortSeq(ShortEnum[] s1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opShortSeq(s1, context, callback, cookie, false);
        }

        public ShortEnum[] end_opShortSeq(out ShortEnum[] s2, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opShortSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpShortSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            s2 = result_.s2;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opShortSeq> begin_opShortSeq(ShortEnum[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opShortSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opShortSeq, TestIntf_OpShortSeqResult>(
                (Callback_TestIntf_opShortSeq cb, TestIntf_OpShortSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.s2);
                    }
                },
                this, _opShortSeq_name, cookie, completedCallback);
            _iceI_opShortSeq(iceP_s1, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opIntSeq> begin_opIntSeq(IntEnum[] i1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opIntSeq(i1, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opIntSeq(IntEnum[] i1, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opIntSeq(i1, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opIntSeq(IntEnum[] i1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opIntSeq(i1, context, callback, cookie, false);
        }

        public IntEnum[] end_opIntSeq(out IntEnum[] i2, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opIntSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpIntSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            i2 = result_.i2;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opIntSeq> begin_opIntSeq(IntEnum[] iceP_i1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opIntSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opIntSeq, TestIntf_OpIntSeqResult>(
                (Callback_TestIntf_opIntSeq cb, TestIntf_OpIntSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.i2);
                    }
                },
                this, _opIntSeq_name, cookie, completedCallback);
            _iceI_opIntSeq(iceP_i1, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_opSimpleSeq> begin_opSimpleSeq(SimpleEnum[] s1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opSimpleSeq(s1, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opSimpleSeq(SimpleEnum[] s1, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opSimpleSeq(s1, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opSimpleSeq(SimpleEnum[] s1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opSimpleSeq(s1, context, callback, cookie, false);
        }

        public SimpleEnum[] end_opSimpleSeq(out SimpleEnum[] s2, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opSimpleSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<TestIntf_OpSimpleSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            s2 = result_.s2;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_TestIntf_opSimpleSeq> begin_opSimpleSeq(SimpleEnum[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opSimpleSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_opSimpleSeq, TestIntf_OpSimpleSeqResult>(
                (Callback_TestIntf_opSimpleSeq cb, TestIntf_OpSimpleSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.s2);
                    }
                },
                this, _opSimpleSeq_name, cookie, completedCallback);
            _iceI_opSimpleSeq(iceP_s1, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TestIntf_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_shutdown(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(context, callback, cookie, false);
        }

        public void end_shutdown(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TestIntf_shutdown> begin_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TestIntf_shutdown, object>(
                (Callback_TestIntf_shutdown cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _shutdown_name, cookie, completedCallback);
            _iceI_shutdown(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestIntfPrx r = b as TestIntfPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            TestIntfPrx r = b as TestIntfPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestIntfPrx r = b as TestIntfPrx;
            if(r == null)
            {
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            TestIntfPrxHelper h = new TestIntfPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TestIntfPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TestIntfPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TestIntfPrxHelper result = new TestIntfPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class TestIntfDisp_ : global::Ice.ObjectImpl, TestIntf
    {
        #region Slice operations

        public abstract ByteEnum opByte(ByteEnum b1, out ByteEnum b2, global::Ice.Current current = null);

        public abstract ShortEnum opShort(ShortEnum s1, out ShortEnum s2, global::Ice.Current current = null);

        public abstract IntEnum opInt(IntEnum i1, out IntEnum i2, global::Ice.Current current = null);

        public abstract SimpleEnum opSimple(SimpleEnum s1, out SimpleEnum s2, global::Ice.Current current = null);

        public abstract ByteEnum[] opByteSeq(ByteEnum[] b1, out ByteEnum[] b2, global::Ice.Current current = null);

        public abstract ShortEnum[] opShortSeq(ShortEnum[] s1, out ShortEnum[] s2, global::Ice.Current current = null);

        public abstract IntEnum[] opIntSeq(IntEnum[] i1, out IntEnum[] i2, global::Ice.Current current = null);

        public abstract SimpleEnum[] opSimpleSeq(SimpleEnum[] s1, out SimpleEnum[] s2, global::Ice.Current current = null);

        public abstract void shutdown(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByte(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            ByteEnum iceP_b1;
            iceP_b1 = (ByteEnum)istr.readEnum(126);
            inS.endReadParams();
            ByteEnum iceP_b2;
            var ret = obj.opByte(iceP_b1, out iceP_b2, current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)iceP_b2, 126);
            ostr.writeEnum((int)ret, 126);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opShort(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            ShortEnum iceP_s1;
            iceP_s1 = (ShortEnum)istr.readEnum(32766);
            inS.endReadParams();
            ShortEnum iceP_s2;
            var ret = obj.opShort(iceP_s1, out iceP_s2, current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)iceP_s2, 32766);
            ostr.writeEnum((int)ret, 32766);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opInt(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            IntEnum iceP_i1;
            iceP_i1 = (IntEnum)istr.readEnum(2147483647);
            inS.endReadParams();
            IntEnum iceP_i2;
            var ret = obj.opInt(iceP_i1, out iceP_i2, current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)iceP_i2, 2147483647);
            ostr.writeEnum((int)ret, 2147483647);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opSimple(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SimpleEnum iceP_s1;
            iceP_s1 = (SimpleEnum)istr.readEnum(2);
            inS.endReadParams();
            SimpleEnum iceP_s2;
            var ret = obj.opSimple(iceP_s1, out iceP_s2, current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)iceP_s2, 2);
            ostr.writeEnum((int)ret, 2);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            ByteEnum[] iceP_b1;
            iceP_b1 = ByteEnumSeqHelper.read(istr);
            inS.endReadParams();
            ByteEnum[] iceP_b2;
            var ret = obj.opByteSeq(iceP_b1, out iceP_b2, current);
            var ostr = inS.startWriteParams();
            ByteEnumSeqHelper.write(ostr, iceP_b2);
            ByteEnumSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opShortSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            ShortEnum[] iceP_s1;
            iceP_s1 = ShortEnumSeqHelper.read(istr);
            inS.endReadParams();
            ShortEnum[] iceP_s2;
            var ret = obj.opShortSeq(iceP_s1, out iceP_s2, current);
            var ostr = inS.startWriteParams();
            ShortEnumSeqHelper.write(ostr, iceP_s2);
            ShortEnumSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opIntSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            IntEnum[] iceP_i1;
            iceP_i1 = IntEnumSeqHelper.read(istr);
            inS.endReadParams();
            IntEnum[] iceP_i2;
            var ret = obj.opIntSeq(iceP_i1, out iceP_i2, current);
            var ostr = inS.startWriteParams();
            IntEnumSeqHelper.write(ostr, iceP_i2);
            IntEnumSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opSimpleSeq(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SimpleEnum[] iceP_s1;
            iceP_s1 = SimpleEnumSeqHelper.read(istr);
            inS.endReadParams();
            SimpleEnum[] iceP_s2;
            var ret = obj.opSimpleSeq(iceP_s1, out iceP_s2, current);
            var ostr = inS.startWriteParams();
            SimpleEnumSeqHelper.write(ostr, iceP_s2);
            SimpleEnumSeqHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "opByte",
            "opByteSeq",
            "opInt",
            "opIntSeq",
            "opShort",
            "opShortSeq",
            "opSimple",
            "opSimpleSeq",
            "shutdown"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_opByte(this, inS, current);
                }
                case 5:
                {
                    return iceD_opByteSeq(this, inS, current);
                }
                case 6:
                {
                    return iceD_opInt(this, inS, current);
                }
                case 7:
                {
                    return iceD_opIntSeq(this, inS, current);
                }
                case 8:
                {
                    return iceD_opShort(this, inS, current);
                }
                case 9:
                {
                    return iceD_opShortSeq(this, inS, current);
                }
                case 10:
                {
                    return iceD_opSimple(this, inS, current);
                }
                case 11:
                {
                    return iceD_opSimpleSeq(this, inS, current);
                }
                case 12:
                {
                    return iceD_shutdown(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
