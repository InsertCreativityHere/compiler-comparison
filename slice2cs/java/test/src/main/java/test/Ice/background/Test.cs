//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Background : global::Ice.Object, BackgroundOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface BackgroundController : global::Ice.Object, BackgroundControllerOperations_
    {
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Background_op();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Background_opWithPayload();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Background_shutdown();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_BackgroundController_pauseCall();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_BackgroundController_resumeCall();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_BackgroundController_holdAdapter();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_BackgroundController_resumeAdapter();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_BackgroundController_initializeSocketStatus();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_BackgroundController_initializeException();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_BackgroundController_readReady();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_BackgroundController_readException();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_BackgroundController_writeReady();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_BackgroundController_writeException();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_BackgroundController_buffered();
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface BackgroundPrx : global::Ice.ObjectPrx
    {
        void op(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task opAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Background_op> begin_op(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_op(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_op(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_op(global::Ice.AsyncResult asyncResult);

        void opWithPayload(byte[] seq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task opWithPayloadAsync(byte[] seq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Background_opWithPayload> begin_opWithPayload(byte[] seq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opWithPayload(byte[] seq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opWithPayload(byte[] seq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_opWithPayload(global::Ice.AsyncResult asyncResult);

        void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Background_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_shutdown(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface BackgroundControllerPrx : global::Ice.ObjectPrx
    {
        void pauseCall(string call, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task pauseCallAsync(string call, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_BackgroundController_pauseCall> begin_pauseCall(string call, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_pauseCall(string call, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_pauseCall(string call, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_pauseCall(global::Ice.AsyncResult asyncResult);

        void resumeCall(string call, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task resumeCallAsync(string call, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_BackgroundController_resumeCall> begin_resumeCall(string call, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_resumeCall(string call, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_resumeCall(string call, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_resumeCall(global::Ice.AsyncResult asyncResult);

        void holdAdapter(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task holdAdapterAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_BackgroundController_holdAdapter> begin_holdAdapter(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_holdAdapter(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_holdAdapter(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_holdAdapter(global::Ice.AsyncResult asyncResult);

        void resumeAdapter(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task resumeAdapterAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_BackgroundController_resumeAdapter> begin_resumeAdapter(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_resumeAdapter(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_resumeAdapter(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_resumeAdapter(global::Ice.AsyncResult asyncResult);

        void initializeSocketStatus(int status, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task initializeSocketStatusAsync(int status, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_BackgroundController_initializeSocketStatus> begin_initializeSocketStatus(int status, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_initializeSocketStatus(int status, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_initializeSocketStatus(int status, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_initializeSocketStatus(global::Ice.AsyncResult asyncResult);

        void initializeException(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task initializeExceptionAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_BackgroundController_initializeException> begin_initializeException(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_initializeException(bool enable, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_initializeException(bool enable, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_initializeException(global::Ice.AsyncResult asyncResult);

        void readReady(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task readReadyAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_BackgroundController_readReady> begin_readReady(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_readReady(bool enable, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_readReady(bool enable, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_readReady(global::Ice.AsyncResult asyncResult);

        void readException(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task readExceptionAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_BackgroundController_readException> begin_readException(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_readException(bool enable, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_readException(bool enable, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_readException(global::Ice.AsyncResult asyncResult);

        void writeReady(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task writeReadyAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_BackgroundController_writeReady> begin_writeReady(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_writeReady(bool enable, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_writeReady(bool enable, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_writeReady(global::Ice.AsyncResult asyncResult);

        void writeException(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task writeExceptionAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_BackgroundController_writeException> begin_writeException(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_writeException(bool enable, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_writeException(bool enable, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_writeException(global::Ice.AsyncResult asyncResult);

        void buffered(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task bufferedAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_BackgroundController_buffered> begin_buffered(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_buffered(bool enable, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_buffered(bool enable, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_buffered(global::Ice.AsyncResult asyncResult);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface BackgroundOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void op(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void opWithPayload(byte[] seq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void shutdown(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface BackgroundControllerOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void pauseCall(string call, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void resumeCall(string call, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void holdAdapter(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void resumeAdapter(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void initializeSocketStatus(int status, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void initializeException(bool enable, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void readReady(bool enable, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void readException(bool enable, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void writeReady(bool enable, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void writeException(bool enable, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void buffered(bool enable, global::Ice.Current current = null);
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BackgroundPrxHelper : global::Ice.ObjectPrxHelperBase, BackgroundPrx
    {
        public BackgroundPrxHelper()
        {
        }

        #region Synchronous operations

        public void op(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void opWithPayload(byte[] seq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_opWithPayloadAsync(seq, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task opAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_op(context, synchronous, completed);
            return completed.Task;
        }

        private const string _op_name = "op";

        private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _op_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task opWithPayloadAsync(byte[] seq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opWithPayloadAsync(seq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opWithPayloadAsync(byte[] iceP_seq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opWithPayload(iceP_seq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opWithPayload_name = "opWithPayload";

        private void _iceI_opWithPayload(byte[] iceP_seq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opWithPayload_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    global::Ice.ByteSeqHelper.write(ostr, iceP_seq);
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Background_op> begin_op(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_op(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_op(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_op(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_op(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_op(context, callback, cookie, false);
        }

        public void end_op(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _op_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Background_op> begin_op(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Background_op, object>(
                (Callback_Background_op cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _op_name, cookie, completedCallback);
            _iceI_op(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Background_opWithPayload> begin_opWithPayload(byte[] seq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opWithPayload(seq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opWithPayload(byte[] seq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opWithPayload(seq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opWithPayload(byte[] seq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opWithPayload(seq, context, callback, cookie, false);
        }

        public void end_opWithPayload(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opWithPayload_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Background_opWithPayload> begin_opWithPayload(byte[] iceP_seq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Background_opWithPayload, object>(
                (Callback_Background_opWithPayload cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _opWithPayload_name, cookie, completedCallback);
            _iceI_opWithPayload(iceP_seq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Background_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_shutdown(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(context, callback, cookie, false);
        }

        public void end_shutdown(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Background_shutdown> begin_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Background_shutdown, object>(
                (Callback_Background_shutdown cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _shutdown_name, cookie, completedCallback);
            _iceI_shutdown(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static BackgroundPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BackgroundPrx r = b as BackgroundPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                BackgroundPrxHelper h = new BackgroundPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static BackgroundPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            BackgroundPrx r = b as BackgroundPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                BackgroundPrxHelper h = new BackgroundPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static BackgroundPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    BackgroundPrxHelper h = new BackgroundPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BackgroundPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    BackgroundPrxHelper h = new BackgroundPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BackgroundPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BackgroundPrx r = b as BackgroundPrx;
            if(r == null)
            {
                BackgroundPrxHelper h = new BackgroundPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static BackgroundPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            BackgroundPrxHelper h = new BackgroundPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Background"
        };

        public static string ice_staticId() => "::Test::Background";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, BackgroundPrx v)
        {
            ostr.writeProxy(v);
        }

        public static BackgroundPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                BackgroundPrxHelper result = new BackgroundPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BackgroundControllerPrxHelper : global::Ice.ObjectPrxHelperBase, BackgroundControllerPrx
    {
        public BackgroundControllerPrxHelper()
        {
        }

        #region Synchronous operations

        public void pauseCall(string call, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_pauseCallAsync(call, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void resumeCall(string call, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_resumeCallAsync(call, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void holdAdapter(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_holdAdapterAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void resumeAdapter(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_resumeAdapterAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void initializeSocketStatus(int status, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_initializeSocketStatusAsync(status, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void initializeException(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_initializeExceptionAsync(enable, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void readReady(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_readReadyAsync(enable, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void readException(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_readExceptionAsync(enable, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void writeReady(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_writeReadyAsync(enable, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void writeException(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_writeExceptionAsync(enable, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void buffered(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_bufferedAsync(enable, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task pauseCallAsync(string call, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_pauseCallAsync(call, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_pauseCallAsync(string iceP_call, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_pauseCall(iceP_call, context, synchronous, completed);
            return completed.Task;
        }

        private const string _pauseCall_name = "pauseCall";

        private void _iceI_pauseCall(string iceP_call, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _pauseCall_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_call);
                });
        }

        public global::System.Threading.Tasks.Task resumeCallAsync(string call, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_resumeCallAsync(call, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_resumeCallAsync(string iceP_call, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_resumeCall(iceP_call, context, synchronous, completed);
            return completed.Task;
        }

        private const string _resumeCall_name = "resumeCall";

        private void _iceI_resumeCall(string iceP_call, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _resumeCall_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_call);
                });
        }

        public global::System.Threading.Tasks.Task holdAdapterAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_holdAdapterAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_holdAdapterAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_holdAdapter(context, synchronous, completed);
            return completed.Task;
        }

        private const string _holdAdapter_name = "holdAdapter";

        private void _iceI_holdAdapter(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _holdAdapter_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task resumeAdapterAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_resumeAdapterAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_resumeAdapterAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_resumeAdapter(context, synchronous, completed);
            return completed.Task;
        }

        private const string _resumeAdapter_name = "resumeAdapter";

        private void _iceI_resumeAdapter(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _resumeAdapter_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task initializeSocketStatusAsync(int status, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_initializeSocketStatusAsync(status, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_initializeSocketStatusAsync(int iceP_status, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_initializeSocketStatus(iceP_status, context, synchronous, completed);
            return completed.Task;
        }

        private const string _initializeSocketStatus_name = "initializeSocketStatus";

        private void _iceI_initializeSocketStatus(int iceP_status, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _initializeSocketStatus_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_status);
                });
        }

        public global::System.Threading.Tasks.Task initializeExceptionAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_initializeExceptionAsync(enable, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_initializeExceptionAsync(bool iceP_enable, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_initializeException(iceP_enable, context, synchronous, completed);
            return completed.Task;
        }

        private const string _initializeException_name = "initializeException";

        private void _iceI_initializeException(bool iceP_enable, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _initializeException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_enable);
                });
        }

        public global::System.Threading.Tasks.Task readReadyAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_readReadyAsync(enable, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_readReadyAsync(bool iceP_enable, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_readReady(iceP_enable, context, synchronous, completed);
            return completed.Task;
        }

        private const string _readReady_name = "readReady";

        private void _iceI_readReady(bool iceP_enable, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _readReady_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_enable);
                });
        }

        public global::System.Threading.Tasks.Task readExceptionAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_readExceptionAsync(enable, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_readExceptionAsync(bool iceP_enable, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_readException(iceP_enable, context, synchronous, completed);
            return completed.Task;
        }

        private const string _readException_name = "readException";

        private void _iceI_readException(bool iceP_enable, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _readException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_enable);
                });
        }

        public global::System.Threading.Tasks.Task writeReadyAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_writeReadyAsync(enable, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_writeReadyAsync(bool iceP_enable, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_writeReady(iceP_enable, context, synchronous, completed);
            return completed.Task;
        }

        private const string _writeReady_name = "writeReady";

        private void _iceI_writeReady(bool iceP_enable, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _writeReady_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_enable);
                });
        }

        public global::System.Threading.Tasks.Task writeExceptionAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_writeExceptionAsync(enable, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_writeExceptionAsync(bool iceP_enable, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_writeException(iceP_enable, context, synchronous, completed);
            return completed.Task;
        }

        private const string _writeException_name = "writeException";

        private void _iceI_writeException(bool iceP_enable, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _writeException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_enable);
                });
        }

        public global::System.Threading.Tasks.Task bufferedAsync(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_bufferedAsync(enable, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_bufferedAsync(bool iceP_enable, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_buffered(iceP_enable, context, synchronous, completed);
            return completed.Task;
        }

        private const string _buffered_name = "buffered";

        private void _iceI_buffered(bool iceP_enable, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _buffered_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(iceP_enable);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_BackgroundController_pauseCall> begin_pauseCall(string call, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_pauseCall(call, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_pauseCall(string call, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_pauseCall(call, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_pauseCall(string call, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_pauseCall(call, context, callback, cookie, false);
        }

        public void end_pauseCall(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _pauseCall_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_BackgroundController_pauseCall> begin_pauseCall(string iceP_call, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BackgroundController_pauseCall, object>(
                (Callback_BackgroundController_pauseCall cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _pauseCall_name, cookie, completedCallback);
            _iceI_pauseCall(iceP_call, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_BackgroundController_resumeCall> begin_resumeCall(string call, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_resumeCall(call, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_resumeCall(string call, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_resumeCall(call, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_resumeCall(string call, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_resumeCall(call, context, callback, cookie, false);
        }

        public void end_resumeCall(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _resumeCall_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_BackgroundController_resumeCall> begin_resumeCall(string iceP_call, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BackgroundController_resumeCall, object>(
                (Callback_BackgroundController_resumeCall cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _resumeCall_name, cookie, completedCallback);
            _iceI_resumeCall(iceP_call, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_BackgroundController_holdAdapter> begin_holdAdapter(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_holdAdapter(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_holdAdapter(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_holdAdapter(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_holdAdapter(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_holdAdapter(context, callback, cookie, false);
        }

        public void end_holdAdapter(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _holdAdapter_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_BackgroundController_holdAdapter> begin_holdAdapter(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BackgroundController_holdAdapter, object>(
                (Callback_BackgroundController_holdAdapter cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _holdAdapter_name, cookie, completedCallback);
            _iceI_holdAdapter(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_BackgroundController_resumeAdapter> begin_resumeAdapter(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_resumeAdapter(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_resumeAdapter(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_resumeAdapter(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_resumeAdapter(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_resumeAdapter(context, callback, cookie, false);
        }

        public void end_resumeAdapter(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _resumeAdapter_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_BackgroundController_resumeAdapter> begin_resumeAdapter(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BackgroundController_resumeAdapter, object>(
                (Callback_BackgroundController_resumeAdapter cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _resumeAdapter_name, cookie, completedCallback);
            _iceI_resumeAdapter(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_BackgroundController_initializeSocketStatus> begin_initializeSocketStatus(int status, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_initializeSocketStatus(status, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_initializeSocketStatus(int status, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initializeSocketStatus(status, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_initializeSocketStatus(int status, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initializeSocketStatus(status, context, callback, cookie, false);
        }

        public void end_initializeSocketStatus(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _initializeSocketStatus_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_BackgroundController_initializeSocketStatus> begin_initializeSocketStatus(int iceP_status, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BackgroundController_initializeSocketStatus, object>(
                (Callback_BackgroundController_initializeSocketStatus cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _initializeSocketStatus_name, cookie, completedCallback);
            _iceI_initializeSocketStatus(iceP_status, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_BackgroundController_initializeException> begin_initializeException(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_initializeException(enable, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_initializeException(bool enable, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initializeException(enable, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_initializeException(bool enable, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_initializeException(enable, context, callback, cookie, false);
        }

        public void end_initializeException(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _initializeException_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_BackgroundController_initializeException> begin_initializeException(bool iceP_enable, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BackgroundController_initializeException, object>(
                (Callback_BackgroundController_initializeException cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _initializeException_name, cookie, completedCallback);
            _iceI_initializeException(iceP_enable, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_BackgroundController_readReady> begin_readReady(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_readReady(enable, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_readReady(bool enable, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_readReady(enable, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_readReady(bool enable, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_readReady(enable, context, callback, cookie, false);
        }

        public void end_readReady(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _readReady_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_BackgroundController_readReady> begin_readReady(bool iceP_enable, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BackgroundController_readReady, object>(
                (Callback_BackgroundController_readReady cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _readReady_name, cookie, completedCallback);
            _iceI_readReady(iceP_enable, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_BackgroundController_readException> begin_readException(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_readException(enable, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_readException(bool enable, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_readException(enable, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_readException(bool enable, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_readException(enable, context, callback, cookie, false);
        }

        public void end_readException(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _readException_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_BackgroundController_readException> begin_readException(bool iceP_enable, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BackgroundController_readException, object>(
                (Callback_BackgroundController_readException cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _readException_name, cookie, completedCallback);
            _iceI_readException(iceP_enable, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_BackgroundController_writeReady> begin_writeReady(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_writeReady(enable, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_writeReady(bool enable, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_writeReady(enable, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_writeReady(bool enable, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_writeReady(enable, context, callback, cookie, false);
        }

        public void end_writeReady(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _writeReady_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_BackgroundController_writeReady> begin_writeReady(bool iceP_enable, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BackgroundController_writeReady, object>(
                (Callback_BackgroundController_writeReady cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _writeReady_name, cookie, completedCallback);
            _iceI_writeReady(iceP_enable, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_BackgroundController_writeException> begin_writeException(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_writeException(enable, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_writeException(bool enable, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_writeException(enable, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_writeException(bool enable, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_writeException(enable, context, callback, cookie, false);
        }

        public void end_writeException(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _writeException_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_BackgroundController_writeException> begin_writeException(bool iceP_enable, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BackgroundController_writeException, object>(
                (Callback_BackgroundController_writeException cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _writeException_name, cookie, completedCallback);
            _iceI_writeException(iceP_enable, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_BackgroundController_buffered> begin_buffered(bool enable, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_buffered(enable, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_buffered(bool enable, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_buffered(enable, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_buffered(bool enable, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_buffered(enable, context, callback, cookie, false);
        }

        public void end_buffered(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _buffered_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_BackgroundController_buffered> begin_buffered(bool iceP_enable, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BackgroundController_buffered, object>(
                (Callback_BackgroundController_buffered cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _buffered_name, cookie, completedCallback);
            _iceI_buffered(iceP_enable, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static BackgroundControllerPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BackgroundControllerPrx r = b as BackgroundControllerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                BackgroundControllerPrxHelper h = new BackgroundControllerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static BackgroundControllerPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            BackgroundControllerPrx r = b as BackgroundControllerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                BackgroundControllerPrxHelper h = new BackgroundControllerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static BackgroundControllerPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    BackgroundControllerPrxHelper h = new BackgroundControllerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BackgroundControllerPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    BackgroundControllerPrxHelper h = new BackgroundControllerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BackgroundControllerPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BackgroundControllerPrx r = b as BackgroundControllerPrx;
            if(r == null)
            {
                BackgroundControllerPrxHelper h = new BackgroundControllerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static BackgroundControllerPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            BackgroundControllerPrxHelper h = new BackgroundControllerPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::BackgroundController"
        };

        public static string ice_staticId() => "::Test::BackgroundController";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, BackgroundControllerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static BackgroundControllerPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                BackgroundControllerPrxHelper result = new BackgroundControllerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class BackgroundDisp_ : global::Ice.ObjectImpl, Background
    {
        #region Slice operations

        public abstract void op(global::Ice.Current current = null);

        public abstract void opWithPayload(byte[] seq, global::Ice.Current current = null);

        public abstract void shutdown(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Background"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::Background";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_op(Background obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.op(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opWithPayload(Background obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_seq;
            iceP_seq = global::Ice.ByteSeqHelper.read(istr);
            inS.endReadParams();
            obj.opWithPayload(iceP_seq, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(Background obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "op",
            "opWithPayload",
            "shutdown"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_op(this, inS, current);
                }
                case 5:
                {
                    return iceD_opWithPayload(this, inS, current);
                }
                case 6:
                {
                    return iceD_shutdown(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class BackgroundControllerDisp_ : global::Ice.ObjectImpl, BackgroundController
    {
        #region Slice operations

        public abstract void pauseCall(string call, global::Ice.Current current = null);

        public abstract void resumeCall(string call, global::Ice.Current current = null);

        public abstract void holdAdapter(global::Ice.Current current = null);

        public abstract void resumeAdapter(global::Ice.Current current = null);

        public abstract void initializeSocketStatus(int status, global::Ice.Current current = null);

        public abstract void initializeException(bool enable, global::Ice.Current current = null);

        public abstract void readReady(bool enable, global::Ice.Current current = null);

        public abstract void readException(bool enable, global::Ice.Current current = null);

        public abstract void writeReady(bool enable, global::Ice.Current current = null);

        public abstract void writeException(bool enable, global::Ice.Current current = null);

        public abstract void buffered(bool enable, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::BackgroundController"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::BackgroundController";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_pauseCall(BackgroundController obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_call;
            iceP_call = istr.readString();
            inS.endReadParams();
            obj.pauseCall(iceP_call, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_resumeCall(BackgroundController obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_call;
            iceP_call = istr.readString();
            inS.endReadParams();
            obj.resumeCall(iceP_call, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_holdAdapter(BackgroundController obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.holdAdapter(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_resumeAdapter(BackgroundController obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.resumeAdapter(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_initializeSocketStatus(BackgroundController obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_status;
            iceP_status = istr.readInt();
            inS.endReadParams();
            obj.initializeSocketStatus(iceP_status, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_initializeException(BackgroundController obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool iceP_enable;
            iceP_enable = istr.readBool();
            inS.endReadParams();
            obj.initializeException(iceP_enable, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_readReady(BackgroundController obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool iceP_enable;
            iceP_enable = istr.readBool();
            inS.endReadParams();
            obj.readReady(iceP_enable, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_readException(BackgroundController obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool iceP_enable;
            iceP_enable = istr.readBool();
            inS.endReadParams();
            obj.readException(iceP_enable, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_writeReady(BackgroundController obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool iceP_enable;
            iceP_enable = istr.readBool();
            inS.endReadParams();
            obj.writeReady(iceP_enable, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_writeException(BackgroundController obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool iceP_enable;
            iceP_enable = istr.readBool();
            inS.endReadParams();
            obj.writeException(iceP_enable, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_buffered(BackgroundController obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool iceP_enable;
            iceP_enable = istr.readBool();
            inS.endReadParams();
            obj.buffered(iceP_enable, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "buffered",
            "holdAdapter",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "initializeException",
            "initializeSocketStatus",
            "pauseCall",
            "readException",
            "readReady",
            "resumeAdapter",
            "resumeCall",
            "writeException",
            "writeReady"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_buffered(this, inS, current);
                }
                case 1:
                {
                    return iceD_holdAdapter(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_initializeException(this, inS, current);
                }
                case 7:
                {
                    return iceD_initializeSocketStatus(this, inS, current);
                }
                case 8:
                {
                    return iceD_pauseCall(this, inS, current);
                }
                case 9:
                {
                    return iceD_readException(this, inS, current);
                }
                case 10:
                {
                    return iceD_readReady(this, inS, current);
                }
                case 11:
                {
                    return iceD_resumeAdapter(this, inS, current);
                }
                case 12:
                {
                    return iceD_resumeCall(this, inS, current);
                }
                case 13:
                {
                    return iceD_writeException(this, inS, current);
                }
                case 14:
                {
                    return iceD_writeReady(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
