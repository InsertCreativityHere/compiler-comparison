//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test
{
    public partial record struct A
    {
        public int i;

        partial void ice_initialize();

        public A(int i)
        {
            this.i = i;
            ice_initialize();
        }

        public A(Ice.InputStream istr)
        {
            this.i = istr.readInt();
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeInt(this.i);
        }

        public static void ice_write(Ice.OutputStream ostr, A v)
        {
            v.ice_writeMembers(ostr);
        }

        public static A ice_read(Ice.InputStream istr) => new(istr);
    }

    public enum E
    {
        E1,
        E2,
        E3
    }

    public sealed class EHelper
    {
        public static void write(Ice.OutputStream ostr, E v)
        {
            ostr.writeEnum((int)v, 2);
        }

        public static E read(Ice.InputStream istr)
        {
            E v;
            v = (E)istr.readEnum(2);
            return v;
        }
    }

    public partial record struct S
    {
        public E en;

        partial void ice_initialize();

        public S(E en)
        {
            this.en = en;
            ice_initialize();
        }

        public S(Ice.InputStream istr)
        {
            this.en = (E)istr.readEnum(2);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeEnum((int)this.en, 2);
        }

        public static void ice_write(Ice.OutputStream ostr, S v)
        {
            v.ice_writeMembers(ostr);
        }

        public static S ice_read(Ice.InputStream istr) => new(istr);
    }

    [Ice.SliceTypeId("::Test::TestIntf")]
    public partial interface TestIntf : Ice.Object
    {
        A[] opASeq(A[] inSeq, out A[] outSeq, Ice.Current current);

        A[] opAArray(A[] inSeq, out A[] outSeq, Ice.Current current);

        A[] opAList(A[] inSeq, out A[] outSeq, Ice.Current current);

        bool[] opBoolSeq(bool[] inSeq, out bool[] outSeq, Ice.Current current);

        byte[] opByteSeq(byte[] inSeq, out byte[] outSeq, Ice.Current current);

        short[] opShortSeq(short[] inSeq, out short[] outSeq, Ice.Current current);

        int[] opIntSeq(int[] inSeq, out int[] outSeq, Ice.Current current);

        long[] opLongSeq(long[] inSeq, out long[] outSeq, Ice.Current current);

        float[] opFloatSeq(float[] inSeq, out float[] outSeq, Ice.Current current);

        double[] opDoubleSeq(double[] inSeq, out double[] outSeq, Ice.Current current);

        string[] opStringSeq(string[] inSeq, out string[] outSeq, Ice.Current current);

        E[] opESeq(E[] inSeq, out E[] outSeq, Ice.Current current);

        S[] opSSeq(S[] inSeq, out S[] outSeq, Ice.Current current);

        global::System.Collections.Generic.Dictionary<int, string>[] opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, out global::System.Collections.Generic.Dictionary<int, string>[] outSeq, Ice.Current current);

        string[][] opStringSeqSeq(string[][] inSeq, out string[][] outSeq, Ice.Current current);

        byte[] opByteBufferSeq(byte[] inSeq, out byte[] outSeq, Ice.Current current);

        short[] opShortBufferSeq(short[] inSeq, out short[] outSeq, Ice.Current current);

        int[] opIntBufferSeq(int[] inSeq, out int[] outSeq, Ice.Current current);

        long[] opLongBufferSeq(long[] inSeq, out long[] outSeq, Ice.Current current);

        float[] opFloatBufferSeq(float[] inSeq, out float[] outSeq, Ice.Current current);

        double[] opDoubleBufferSeq(double[] inSeq, out double[] outSeq, Ice.Current current);

        A[]? opOptASeq(A[]? inSeq, out A[]? outSeq, Ice.Current current);

        A[]? opOptAArray(A[]? inSeq, out A[]? outSeq, Ice.Current current);

        A[]? opOptAList(A[]? inSeq, out A[]? outSeq, Ice.Current current);

        bool[]? opOptBoolSeq(bool[]? inSeq, out bool[]? outSeq, Ice.Current current);

        byte[]? opOptByteSeq(byte[]? inSeq, out byte[]? outSeq, Ice.Current current);

        short[]? opOptShortSeq(short[]? inSeq, out short[]? outSeq, Ice.Current current);

        int[]? opOptIntSeq(int[]? inSeq, out int[]? outSeq, Ice.Current current);

        long[]? opOptLongSeq(long[]? inSeq, out long[]? outSeq, Ice.Current current);

        float[]? opOptFloatSeq(float[]? inSeq, out float[]? outSeq, Ice.Current current);

        double[]? opOptDoubleSeq(double[]? inSeq, out double[]? outSeq, Ice.Current current);

        string[]? opOptStringSeq(string[]? inSeq, out string[]? outSeq, Ice.Current current);

        E[]? opOptESeq(E[]? inSeq, out E[]? outSeq, Ice.Current current);

        S[]? opOptSSeq(S[]? inSeq, out S[]? outSeq, Ice.Current current);

        global::System.Collections.Generic.Dictionary<int, string>[]? opOptDSeq(global::System.Collections.Generic.Dictionary<int, string>[]? inSeq, out global::System.Collections.Generic.Dictionary<int, string>[]? outSeq, Ice.Current current);

        string[][]? opOptStringSeqSeq(string[][]? inSeq, out string[][]? outSeq, Ice.Current current);

        byte[]? opOptByteBufferSeq(byte[]? inSeq, out byte[]? outSeq, Ice.Current current);

        short[]? opOptShortBufferSeq(short[]? inSeq, out short[]? outSeq, Ice.Current current);

        int[]? opOptIntBufferSeq(int[]? inSeq, out int[]? outSeq, Ice.Current current);

        long[]? opOptLongBufferSeq(long[]? inSeq, out long[]? outSeq, Ice.Current current);

        float[]? opOptFloatBufferSeq(float[]? inSeq, out float[]? outSeq, Ice.Current current);

        double[]? opOptDoubleBufferSeq(double[]? inSeq, out double[]? outSeq, Ice.Current current);

        void shutdown(Ice.Current current);
    }
}

namespace Test
{
    public record struct TestIntf_OpASeqResult(A[] returnValue, A[] outSeq);

    public record struct TestIntf_OpAArrayResult(A[] returnValue, A[] outSeq);

    public record struct TestIntf_OpAListResult(A[] returnValue, A[] outSeq);

    public record struct TestIntf_OpBoolSeqResult(bool[] returnValue, bool[] outSeq);

    public record struct TestIntf_OpByteSeqResult(byte[] returnValue, byte[] outSeq);

    public record struct TestIntf_OpShortSeqResult(short[] returnValue, short[] outSeq);

    public record struct TestIntf_OpIntSeqResult(int[] returnValue, int[] outSeq);

    public record struct TestIntf_OpLongSeqResult(long[] returnValue, long[] outSeq);

    public record struct TestIntf_OpFloatSeqResult(float[] returnValue, float[] outSeq);

    public record struct TestIntf_OpDoubleSeqResult(double[] returnValue, double[] outSeq);

    public record struct TestIntf_OpStringSeqResult(string[] returnValue, string[] outSeq);

    public record struct TestIntf_OpESeqResult(E[] returnValue, E[] outSeq);

    public record struct TestIntf_OpSSeqResult(S[] returnValue, S[] outSeq);

    public record struct TestIntf_OpDSeqResult(global::System.Collections.Generic.Dictionary<int, string>[] returnValue, global::System.Collections.Generic.Dictionary<int, string>[] outSeq);

    public record struct TestIntf_OpStringSeqSeqResult(string[][] returnValue, string[][] outSeq);

    public record struct TestIntf_OpByteBufferSeqResult(byte[] returnValue, byte[] outSeq);

    public record struct TestIntf_OpShortBufferSeqResult(short[] returnValue, short[] outSeq);

    public record struct TestIntf_OpIntBufferSeqResult(int[] returnValue, int[] outSeq);

    public record struct TestIntf_OpLongBufferSeqResult(long[] returnValue, long[] outSeq);

    public record struct TestIntf_OpFloatBufferSeqResult(float[] returnValue, float[] outSeq);

    public record struct TestIntf_OpDoubleBufferSeqResult(double[] returnValue, double[] outSeq);

    public record struct TestIntf_OpOptASeqResult(A[]? returnValue, A[]? outSeq);

    public record struct TestIntf_OpOptAArrayResult(A[]? returnValue, A[]? outSeq);

    public record struct TestIntf_OpOptAListResult(A[]? returnValue, A[]? outSeq);

    public record struct TestIntf_OpOptBoolSeqResult(bool[]? returnValue, bool[]? outSeq);

    public record struct TestIntf_OpOptByteSeqResult(byte[]? returnValue, byte[]? outSeq);

    public record struct TestIntf_OpOptShortSeqResult(short[]? returnValue, short[]? outSeq);

    public record struct TestIntf_OpOptIntSeqResult(int[]? returnValue, int[]? outSeq);

    public record struct TestIntf_OpOptLongSeqResult(long[]? returnValue, long[]? outSeq);

    public record struct TestIntf_OpOptFloatSeqResult(float[]? returnValue, float[]? outSeq);

    public record struct TestIntf_OpOptDoubleSeqResult(double[]? returnValue, double[]? outSeq);

    public record struct TestIntf_OpOptStringSeqResult(string[]? returnValue, string[]? outSeq);

    public record struct TestIntf_OpOptESeqResult(E[]? returnValue, E[]? outSeq);

    public record struct TestIntf_OpOptSSeqResult(S[]? returnValue, S[]? outSeq);

    public record struct TestIntf_OpOptDSeqResult(global::System.Collections.Generic.Dictionary<int, string>[]? returnValue, global::System.Collections.Generic.Dictionary<int, string>[]? outSeq);

    public record struct TestIntf_OpOptStringSeqSeqResult(string[][]? returnValue, string[][]? outSeq);

    public record struct TestIntf_OpOptByteBufferSeqResult(byte[]? returnValue, byte[]? outSeq);

    public record struct TestIntf_OpOptShortBufferSeqResult(short[]? returnValue, short[]? outSeq);

    public record struct TestIntf_OpOptIntBufferSeqResult(int[]? returnValue, int[]? outSeq);

    public record struct TestIntf_OpOptLongBufferSeqResult(long[]? returnValue, long[]? outSeq);

    public record struct TestIntf_OpOptFloatBufferSeqResult(float[]? returnValue, float[]? outSeq);

    public record struct TestIntf_OpOptDoubleBufferSeqResult(double[]? returnValue, double[]? outSeq);
}

namespace Test
{
    public interface TestIntfPrx : Ice.ObjectPrx
    {
        A[] opASeq(A[] inSeq, out A[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpASeqResult> opASeqAsync(A[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        A[] opAArray(A[] inSeq, out A[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpAArrayResult> opAArrayAsync(A[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        A[] opAList(A[] inSeq, out A[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpAListResult> opAListAsync(A[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[] opBoolSeq(bool[] inSeq, out bool[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> opBoolSeqAsync(bool[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteSeq(byte[] inSeq, out byte[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(byte[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        short[] opShortSeq(short[] inSeq, out short[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpShortSeqResult> opShortSeqAsync(short[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        int[] opIntSeq(int[] inSeq, out int[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpIntSeqResult> opIntSeqAsync(int[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        long[] opLongSeq(long[] inSeq, out long[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpLongSeqResult> opLongSeqAsync(long[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        float[] opFloatSeq(float[] inSeq, out float[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpFloatSeqResult> opFloatSeqAsync(float[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        double[] opDoubleSeq(double[] inSeq, out double[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpDoubleSeqResult> opDoubleSeqAsync(double[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[] opStringSeq(string[] inSeq, out string[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> opStringSeqAsync(string[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        E[] opESeq(E[] inSeq, out E[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> opESeqAsync(E[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        S[] opSSeq(S[] inSeq, out S[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpSSeqResult> opSSeqAsync(S[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<int, string>[] opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, out global::System.Collections.Generic.Dictionary<int, string>[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpDSeqResult> opDSeqAsync(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[][] opStringSeqSeq(string[][] inSeq, out string[][] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpStringSeqSeqResult> opStringSeqSeqAsync(string[][] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[] opByteBufferSeq(byte[] inSeq, out byte[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpByteBufferSeqResult> opByteBufferSeqAsync(byte[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        short[] opShortBufferSeq(short[] inSeq, out short[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpShortBufferSeqResult> opShortBufferSeqAsync(short[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        int[] opIntBufferSeq(int[] inSeq, out int[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpIntBufferSeqResult> opIntBufferSeqAsync(int[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        long[] opLongBufferSeq(long[] inSeq, out long[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpLongBufferSeqResult> opLongBufferSeqAsync(long[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        float[] opFloatBufferSeq(float[] inSeq, out float[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpFloatBufferSeqResult> opFloatBufferSeqAsync(float[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        double[] opDoubleBufferSeq(double[] inSeq, out double[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpDoubleBufferSeqResult> opDoubleBufferSeqAsync(double[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        A[]? opOptASeq(A[]? inSeq, out A[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptASeqResult> opOptASeqAsync(A[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        A[]? opOptAArray(A[]? inSeq, out A[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptAArrayResult> opOptAArrayAsync(A[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        A[]? opOptAList(A[]? inSeq, out A[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptAListResult> opOptAListAsync(A[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[]? opOptBoolSeq(bool[]? inSeq, out bool[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptBoolSeqResult> opOptBoolSeqAsync(bool[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[]? opOptByteSeq(byte[]? inSeq, out byte[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptByteSeqResult> opOptByteSeqAsync(byte[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        short[]? opOptShortSeq(short[]? inSeq, out short[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptShortSeqResult> opOptShortSeqAsync(short[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        int[]? opOptIntSeq(int[]? inSeq, out int[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptIntSeqResult> opOptIntSeqAsync(int[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        long[]? opOptLongSeq(long[]? inSeq, out long[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptLongSeqResult> opOptLongSeqAsync(long[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        float[]? opOptFloatSeq(float[]? inSeq, out float[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptFloatSeqResult> opOptFloatSeqAsync(float[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        double[]? opOptDoubleSeq(double[]? inSeq, out double[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptDoubleSeqResult> opOptDoubleSeqAsync(double[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[]? opOptStringSeq(string[]? inSeq, out string[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptStringSeqResult> opOptStringSeqAsync(string[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        E[]? opOptESeq(E[]? inSeq, out E[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptESeqResult> opOptESeqAsync(E[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        S[]? opOptSSeq(S[]? inSeq, out S[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptSSeqResult> opOptSSeqAsync(S[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<int, string>[]? opOptDSeq(global::System.Collections.Generic.Dictionary<int, string>[]? inSeq, out global::System.Collections.Generic.Dictionary<int, string>[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptDSeqResult> opOptDSeqAsync(global::System.Collections.Generic.Dictionary<int, string>[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[][]? opOptStringSeqSeq(string[][]? inSeq, out string[][]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptStringSeqSeqResult> opOptStringSeqSeqAsync(string[][]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[]? opOptByteBufferSeq(byte[]? inSeq, out byte[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptByteBufferSeqResult> opOptByteBufferSeqAsync(byte[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        short[]? opOptShortBufferSeq(short[]? inSeq, out short[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptShortBufferSeqResult> opOptShortBufferSeqAsync(short[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        int[]? opOptIntBufferSeq(int[]? inSeq, out int[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptIntBufferSeqResult> opOptIntBufferSeqAsync(int[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        long[]? opOptLongBufferSeq(long[]? inSeq, out long[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptLongBufferSeqResult> opOptLongBufferSeqAsync(long[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        float[]? opOptFloatBufferSeq(float[]? inSeq, out float[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptFloatBufferSeqResult> opOptFloatBufferSeqAsync(float[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        double[]? opOptDoubleBufferSeq(double[]? inSeq, out double[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<TestIntf_OpOptDoubleBufferSeqResult> opOptDoubleBufferSeqAsync(double[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    public sealed class ASeqHelper
    {
        public static void write(Ice.OutputStream ostr, A[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static A[] read(Ice.InputStream istr)
        {
            A[] v;
            {
                int szx = istr.readAndCheckSeqSize(4);
                v = new A[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new A(istr);
                }
            }
            return v;
        }
    }

    public sealed class AArrayHelper
    {
        public static void write(Ice.OutputStream ostr, A[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static A[] read(Ice.InputStream istr)
        {
            A[] v;
            {
                int szx = istr.readAndCheckSeqSize(4);
                v = new A[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new A(istr);
                }
            }
            return v;
        }
    }

    public sealed class AListHelper
    {
        public static void write(Ice.OutputStream ostr, A[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static A[] read(Ice.InputStream istr)
        {
            A[] v;
            {
                int szx = istr.readAndCheckSeqSize(4);
                v = new A[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new A(istr);
                }
            }
            return v;
        }
    }

    public sealed class BoolSeqHelper
    {
        public static void write(Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    public sealed class ByteSeqHelper
    {
        public static void write(Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    public sealed class ShortSeqHelper
    {
        public static void write(Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    public sealed class IntSeqHelper
    {
        public static void write(Ice.OutputStream ostr, int[] v)
        {
            ostr.writeIntSeq(v);
        }

        public static int[] read(Ice.InputStream istr)
        {
            int[] v;
            v = istr.readIntSeq();
            return v;
        }
    }

    public sealed class LongSeqHelper
    {
        public static void write(Ice.OutputStream ostr, long[] v)
        {
            ostr.writeLongSeq(v);
        }

        public static long[] read(Ice.InputStream istr)
        {
            long[] v;
            v = istr.readLongSeq();
            return v;
        }
    }

    public sealed class FloatSeqHelper
    {
        public static void write(Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    public sealed class DoubleSeqHelper
    {
        public static void write(Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    public sealed class StringSeqHelper
    {
        public static void write(Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    public sealed class ByteBufferHelper
    {
        public static void write(Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    public sealed class ShortBufferHelper
    {
        public static void write(Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    public sealed class IntBufferHelper
    {
        public static void write(Ice.OutputStream ostr, int[] v)
        {
            ostr.writeIntSeq(v);
        }

        public static int[] read(Ice.InputStream istr)
        {
            int[] v;
            v = istr.readIntSeq();
            return v;
        }
    }

    public sealed class LongBufferHelper
    {
        public static void write(Ice.OutputStream ostr, long[] v)
        {
            ostr.writeLongSeq(v);
        }

        public static long[] read(Ice.InputStream istr)
        {
            long[] v;
            v = istr.readLongSeq();
            return v;
        }
    }

    public sealed class FloatBufferHelper
    {
        public static void write(Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    public sealed class DoubleBufferHelper
    {
        public static void write(Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    public sealed class ESeqHelper
    {
        public static void write(Ice.OutputStream ostr, E[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 2);
                }
            }
        }

        public static E[] read(Ice.InputStream istr)
        {
            E[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new E[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (E)istr.readEnum(2);
                }
            }
            return v;
        }
    }

    public sealed class SSeqHelper
    {
        public static void write(Ice.OutputStream ostr, S[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static S[] read(Ice.InputStream istr)
        {
            S[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new S[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new S(istr);
                }
            }
            return v;
        }
    }

    public sealed class DHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, string> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, string> e in v)
                {
                    ostr.writeInt(e.Key);
                    ostr.writeString(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, string> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, string> r = new global::System.Collections.Generic.Dictionary<int, string>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                string v;
                v = istr.readString();
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class DSeqHelper
    {
        public static void write(Ice.OutputStream ostr, global::System.Collections.Generic.Dictionary<int, string>[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    DHelper.write(ostr, v[ix]);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, string>[] read(Ice.InputStream istr)
        {
            global::System.Collections.Generic.Dictionary<int, string>[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new global::System.Collections.Generic.Dictionary<int, string>[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = DHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class StringSeqSeqHelper
    {
        public static void write(Ice.OutputStream ostr, string[][] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    StringSeqHelper.write(ostr, v[ix]);
                }
            }
        }

        public static string[][] read(Ice.InputStream istr)
        {
            string[][] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new string[szx][];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = StringSeqHelper.read(istr);
                }
            }
            return v;
        }
    }

    public sealed class TestIntfPrxHelper : Ice.ObjectPrxHelperBase, TestIntfPrx
    {
        public A[] opASeq(A[] inSeq, out A[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opASeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public A[] opAArray(A[] inSeq, out A[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opAArrayAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public A[] opAList(A[] inSeq, out A[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opAListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[] opBoolSeq(bool[] inSeq, out bool[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[] opByteSeq(byte[] inSeq, out byte[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short[] opShortSeq(short[] inSeq, out short[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int[] opIntSeq(int[] inSeq, out int[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long[] opLongSeq(long[] inSeq, out long[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public float[] opFloatSeq(float[] inSeq, out float[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double[] opDoubleSeq(double[] inSeq, out double[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opDoubleSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[] opStringSeq(string[] inSeq, out string[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public E[] opESeq(E[] inSeq, out E[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opESeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public S[] opSSeq(S[] inSeq, out S[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opSSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, string>[] opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, out global::System.Collections.Generic.Dictionary<int, string>[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opDSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[][] opStringSeqSeq(string[][] inSeq, out string[][] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringSeqSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[] opByteBufferSeq(byte[] inSeq, out byte[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short[] opShortBufferSeq(short[] inSeq, out short[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int[] opIntBufferSeq(int[] inSeq, out int[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long[] opLongBufferSeq(long[] inSeq, out long[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public float[] opFloatBufferSeq(float[] inSeq, out float[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double[] opDoubleBufferSeq(double[] inSeq, out double[] outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opDoubleBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public A[]? opOptASeq(A[]? inSeq, out A[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptASeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public A[]? opOptAArray(A[]? inSeq, out A[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptAArrayAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public A[]? opOptAList(A[]? inSeq, out A[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptAListAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[]? opOptBoolSeq(bool[]? inSeq, out bool[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptBoolSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[]? opOptByteSeq(byte[]? inSeq, out byte[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptByteSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short[]? opOptShortSeq(short[]? inSeq, out short[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptShortSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int[]? opOptIntSeq(int[]? inSeq, out int[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptIntSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long[]? opOptLongSeq(long[]? inSeq, out long[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptLongSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public float[]? opOptFloatSeq(float[]? inSeq, out float[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptFloatSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double[]? opOptDoubleSeq(double[]? inSeq, out double[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptDoubleSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[]? opOptStringSeq(string[]? inSeq, out string[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptStringSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public E[]? opOptESeq(E[]? inSeq, out E[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptESeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public S[]? opOptSSeq(S[]? inSeq, out S[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptSSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, string>[]? opOptDSeq(global::System.Collections.Generic.Dictionary<int, string>[]? inSeq, out global::System.Collections.Generic.Dictionary<int, string>[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptDSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[][]? opOptStringSeqSeq(string[][]? inSeq, out string[][]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptStringSeqSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[]? opOptByteBufferSeq(byte[]? inSeq, out byte[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptByteBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short[]? opOptShortBufferSeq(short[]? inSeq, out short[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptShortBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int[]? opOptIntBufferSeq(int[]? inSeq, out int[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptIntBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long[]? opOptLongBufferSeq(long[]? inSeq, out long[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptLongBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public float[]? opOptFloatBufferSeq(float[]? inSeq, out float[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptFloatBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double[]? opOptDoubleBufferSeq(double[]? inSeq, out double[]? outSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOptDoubleBufferSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpASeqResult> opASeqAsync(A[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opASeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpASeqResult> _iceI_opASeqAsync(A[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opASeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpASeqResult>(progress, cancel);
            _iceI_opASeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opASeq_name = "opASeq";

        private void _iceI_opASeq(A[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpASeqResult>(completed);
            outAsync.invoke(
                _opASeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ASeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpASeqResult();
                    ret.outSeq = ASeqHelper.read(istr);
                    ret.returnValue = ASeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpAArrayResult> opAArrayAsync(A[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opAArrayAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpAArrayResult> _iceI_opAArrayAsync(A[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opAArray_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpAArrayResult>(progress, cancel);
            _iceI_opAArray(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opAArray_name = "opAArray";

        private void _iceI_opAArray(A[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpAArrayResult>(completed);
            outAsync.invoke(
                _opAArray_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    AArrayHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpAArrayResult();
                    ret.outSeq = AArrayHelper.read(istr);
                    ret.returnValue = AArrayHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpAListResult> opAListAsync(A[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opAListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpAListResult> _iceI_opAListAsync(A[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opAList_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpAListResult>(progress, cancel);
            _iceI_opAList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opAList_name = "opAList";

        private void _iceI_opAList(A[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpAListResult>(completed);
            outAsync.invoke(
                _opAList_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    AListHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpAListResult();
                    ret.outSeq = AListHelper.read(istr);
                    ret.returnValue = AListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> opBoolSeqAsync(bool[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpBoolSeqResult> _iceI_opBoolSeqAsync(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpBoolSeqResult>(progress, cancel);
            _iceI_opBoolSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolSeq_name = "opBoolSeq";

        private void _iceI_opBoolSeq(bool[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpBoolSeqResult>(completed);
            outAsync.invoke(
                _opBoolSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    BoolSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpBoolSeqResult();
                    ret.outSeq = BoolSeqHelper.read(istr);
                    ret.returnValue = BoolSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> opByteSeqAsync(byte[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteSeqResult> _iceI_opByteSeqAsync(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpByteSeqResult>(progress, cancel);
            _iceI_opByteSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSeq_name = "opByteSeq";

        private void _iceI_opByteSeq(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteSeqResult>(completed);
            outAsync.invoke(
                _opByteSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpByteSeqResult();
                    ret.outSeq = ByteSeqHelper.read(istr);
                    ret.returnValue = ByteSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpShortSeqResult> opShortSeqAsync(short[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpShortSeqResult> _iceI_opShortSeqAsync(short[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpShortSeqResult>(progress, cancel);
            _iceI_opShortSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortSeq_name = "opShortSeq";

        private void _iceI_opShortSeq(short[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpShortSeqResult>(completed);
            outAsync.invoke(
                _opShortSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpShortSeqResult();
                    ret.outSeq = ShortSeqHelper.read(istr);
                    ret.returnValue = ShortSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpIntSeqResult> opIntSeqAsync(int[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpIntSeqResult> _iceI_opIntSeqAsync(int[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpIntSeqResult>(progress, cancel);
            _iceI_opIntSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntSeq_name = "opIntSeq";

        private void _iceI_opIntSeq(int[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpIntSeqResult>(completed);
            outAsync.invoke(
                _opIntSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    IntSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpIntSeqResult();
                    ret.outSeq = IntSeqHelper.read(istr);
                    ret.returnValue = IntSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpLongSeqResult> opLongSeqAsync(long[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpLongSeqResult> _iceI_opLongSeqAsync(long[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpLongSeqResult>(progress, cancel);
            _iceI_opLongSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongSeq_name = "opLongSeq";

        private void _iceI_opLongSeq(long[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpLongSeqResult>(completed);
            outAsync.invoke(
                _opLongSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    LongSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpLongSeqResult();
                    ret.outSeq = LongSeqHelper.read(istr);
                    ret.returnValue = LongSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpFloatSeqResult> opFloatSeqAsync(float[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpFloatSeqResult> _iceI_opFloatSeqAsync(float[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpFloatSeqResult>(progress, cancel);
            _iceI_opFloatSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatSeq_name = "opFloatSeq";

        private void _iceI_opFloatSeq(float[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpFloatSeqResult>(completed);
            outAsync.invoke(
                _opFloatSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    FloatSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpFloatSeqResult();
                    ret.outSeq = FloatSeqHelper.read(istr);
                    ret.returnValue = FloatSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpDoubleSeqResult> opDoubleSeqAsync(double[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDoubleSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpDoubleSeqResult> _iceI_opDoubleSeqAsync(double[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDoubleSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpDoubleSeqResult>(progress, cancel);
            _iceI_opDoubleSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDoubleSeq_name = "opDoubleSeq";

        private void _iceI_opDoubleSeq(double[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpDoubleSeqResult>(completed);
            outAsync.invoke(
                _opDoubleSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    DoubleSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpDoubleSeqResult();
                    ret.outSeq = DoubleSeqHelper.read(istr);
                    ret.returnValue = DoubleSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> opStringSeqAsync(string[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringSeqResult> _iceI_opStringSeqAsync(string[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpStringSeqResult>(progress, cancel);
            _iceI_opStringSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSeq_name = "opStringSeq";

        private void _iceI_opStringSeq(string[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringSeqResult>(completed);
            outAsync.invoke(
                _opStringSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpStringSeqResult();
                    ret.outSeq = StringSeqHelper.read(istr);
                    ret.returnValue = StringSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> opESeqAsync(E[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opESeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpESeqResult> _iceI_opESeqAsync(E[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opESeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpESeqResult>(progress, cancel);
            _iceI_opESeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opESeq_name = "opESeq";

        private void _iceI_opESeq(E[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpESeqResult>(completed);
            outAsync.invoke(
                _opESeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ESeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpESeqResult();
                    ret.outSeq = ESeqHelper.read(istr);
                    ret.returnValue = ESeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpSSeqResult> opSSeqAsync(S[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpSSeqResult> _iceI_opSSeqAsync(S[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpSSeqResult>(progress, cancel);
            _iceI_opSSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSSeq_name = "opSSeq";

        private void _iceI_opSSeq(S[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpSSeqResult>(completed);
            outAsync.invoke(
                _opSSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    SSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpSSeqResult();
                    ret.outSeq = SSeqHelper.read(istr);
                    ret.returnValue = SSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpDSeqResult> opDSeqAsync(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpDSeqResult> _iceI_opDSeqAsync(global::System.Collections.Generic.Dictionary<int, string>[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpDSeqResult>(progress, cancel);
            _iceI_opDSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDSeq_name = "opDSeq";

        private void _iceI_opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpDSeqResult>(completed);
            outAsync.invoke(
                _opDSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    DSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpDSeqResult();
                    ret.outSeq = DSeqHelper.read(istr);
                    ret.returnValue = DSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpStringSeqSeqResult> opStringSeqSeqAsync(string[][] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringSeqSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpStringSeqSeqResult> _iceI_opStringSeqSeqAsync(string[][] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSeqSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpStringSeqSeqResult>(progress, cancel);
            _iceI_opStringSeqSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSeqSeq_name = "opStringSeqSeq";

        private void _iceI_opStringSeqSeq(string[][] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpStringSeqSeqResult>(completed);
            outAsync.invoke(
                _opStringSeqSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    StringSeqSeqHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpStringSeqSeqResult();
                    ret.outSeq = StringSeqSeqHelper.read(istr);
                    ret.returnValue = StringSeqSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpByteBufferSeqResult> opByteBufferSeqAsync(byte[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpByteBufferSeqResult> _iceI_opByteBufferSeqAsync(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteBufferSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpByteBufferSeqResult>(progress, cancel);
            _iceI_opByteBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteBufferSeq_name = "opByteBufferSeq";

        private void _iceI_opByteBufferSeq(byte[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpByteBufferSeqResult>(completed);
            outAsync.invoke(
                _opByteBufferSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ByteBufferHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpByteBufferSeqResult();
                    ret.outSeq = ByteBufferHelper.read(istr);
                    ret.returnValue = ByteBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpShortBufferSeqResult> opShortBufferSeqAsync(short[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpShortBufferSeqResult> _iceI_opShortBufferSeqAsync(short[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortBufferSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpShortBufferSeqResult>(progress, cancel);
            _iceI_opShortBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortBufferSeq_name = "opShortBufferSeq";

        private void _iceI_opShortBufferSeq(short[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpShortBufferSeqResult>(completed);
            outAsync.invoke(
                _opShortBufferSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ShortBufferHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpShortBufferSeqResult();
                    ret.outSeq = ShortBufferHelper.read(istr);
                    ret.returnValue = ShortBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpIntBufferSeqResult> opIntBufferSeqAsync(int[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpIntBufferSeqResult> _iceI_opIntBufferSeqAsync(int[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntBufferSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpIntBufferSeqResult>(progress, cancel);
            _iceI_opIntBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntBufferSeq_name = "opIntBufferSeq";

        private void _iceI_opIntBufferSeq(int[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpIntBufferSeqResult>(completed);
            outAsync.invoke(
                _opIntBufferSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    IntBufferHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpIntBufferSeqResult();
                    ret.outSeq = IntBufferHelper.read(istr);
                    ret.returnValue = IntBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpLongBufferSeqResult> opLongBufferSeqAsync(long[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpLongBufferSeqResult> _iceI_opLongBufferSeqAsync(long[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongBufferSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpLongBufferSeqResult>(progress, cancel);
            _iceI_opLongBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongBufferSeq_name = "opLongBufferSeq";

        private void _iceI_opLongBufferSeq(long[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpLongBufferSeqResult>(completed);
            outAsync.invoke(
                _opLongBufferSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    LongBufferHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpLongBufferSeqResult();
                    ret.outSeq = LongBufferHelper.read(istr);
                    ret.returnValue = LongBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpFloatBufferSeqResult> opFloatBufferSeqAsync(float[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpFloatBufferSeqResult> _iceI_opFloatBufferSeqAsync(float[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatBufferSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpFloatBufferSeqResult>(progress, cancel);
            _iceI_opFloatBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatBufferSeq_name = "opFloatBufferSeq";

        private void _iceI_opFloatBufferSeq(float[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpFloatBufferSeqResult>(completed);
            outAsync.invoke(
                _opFloatBufferSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    FloatBufferHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpFloatBufferSeqResult();
                    ret.outSeq = FloatBufferHelper.read(istr);
                    ret.returnValue = FloatBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpDoubleBufferSeqResult> opDoubleBufferSeqAsync(double[] inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDoubleBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpDoubleBufferSeqResult> _iceI_opDoubleBufferSeqAsync(double[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDoubleBufferSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpDoubleBufferSeqResult>(progress, cancel);
            _iceI_opDoubleBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDoubleBufferSeq_name = "opDoubleBufferSeq";

        private void _iceI_opDoubleBufferSeq(double[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpDoubleBufferSeqResult>(completed);
            outAsync.invoke(
                _opDoubleBufferSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    DoubleBufferHelper.write(ostr, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpDoubleBufferSeqResult();
                    ret.outSeq = DoubleBufferHelper.read(istr);
                    ret.returnValue = DoubleBufferHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptASeqResult> opOptASeqAsync(A[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptASeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptASeqResult> _iceI_opOptASeqAsync(A[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptASeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptASeqResult>(progress, cancel);
            _iceI_opOptASeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptASeq_name = "opOptASeq";

        private void _iceI_opOptASeq(A[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptASeqResult>(completed);
            outAsync.invoke(
                _opOptASeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    if (iceP_inSeq is not null && ostr.writeOptional(2, Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(iceP_inSeq.Length * 4 + (iceP_inSeq.Length > 254 ? 5 : 1));
                        ASeqHelper.write(ostr, iceP_inSeq);
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptASeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        A[] tmpVal;
                        tmpVal = ASeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        A[] tmpVal;
                        tmpVal = ASeqHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptAArrayResult> opOptAArrayAsync(A[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptAArrayAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptAArrayResult> _iceI_opOptAArrayAsync(A[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptAArray_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptAArrayResult>(progress, cancel);
            _iceI_opOptAArray(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptAArray_name = "opOptAArray";

        private void _iceI_opOptAArray(A[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptAArrayResult>(completed);
            outAsync.invoke(
                _opOptAArray_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    if (iceP_inSeq is not null && ostr.writeOptional(2, Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(iceP_inSeq.Length * 4 + (iceP_inSeq.Length > 254 ? 5 : 1));
                        AArrayHelper.write(ostr, iceP_inSeq);
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptAArrayResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        A[] tmpVal;
                        tmpVal = AArrayHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        A[] tmpVal;
                        tmpVal = AArrayHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptAListResult> opOptAListAsync(A[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptAListAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptAListResult> _iceI_opOptAListAsync(A[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptAList_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptAListResult>(progress, cancel);
            _iceI_opOptAList(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptAList_name = "opOptAList";

        private void _iceI_opOptAList(A[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptAListResult>(completed);
            outAsync.invoke(
                _opOptAList_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    if (iceP_inSeq is not null && ostr.writeOptional(2, Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(iceP_inSeq.Length * 4 + (iceP_inSeq.Length > 254 ? 5 : 1));
                        AListHelper.write(ostr, iceP_inSeq);
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptAListResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        A[] tmpVal;
                        tmpVal = AListHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        A[] tmpVal;
                        tmpVal = AListHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptBoolSeqResult> opOptBoolSeqAsync(bool[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptBoolSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptBoolSeqResult> _iceI_opOptBoolSeqAsync(bool[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptBoolSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptBoolSeqResult>(progress, cancel);
            _iceI_opOptBoolSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptBoolSeq_name = "opOptBoolSeq";

        private void _iceI_opOptBoolSeq(bool[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptBoolSeqResult>(completed);
            outAsync.invoke(
                _opOptBoolSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeBoolSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptBoolSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        bool[] tmpVal;
                        tmpVal = BoolSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        bool[] tmpVal;
                        tmpVal = BoolSeqHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptByteSeqResult> opOptByteSeqAsync(byte[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptByteSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptByteSeqResult> _iceI_opOptByteSeqAsync(byte[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptByteSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptByteSeqResult>(progress, cancel);
            _iceI_opOptByteSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptByteSeq_name = "opOptByteSeq";

        private void _iceI_opOptByteSeq(byte[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptByteSeqResult>(completed);
            outAsync.invoke(
                _opOptByteSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeByteSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptByteSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = ByteSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = ByteSeqHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptShortSeqResult> opOptShortSeqAsync(short[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptShortSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptShortSeqResult> _iceI_opOptShortSeqAsync(short[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptShortSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptShortSeqResult>(progress, cancel);
            _iceI_opOptShortSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptShortSeq_name = "opOptShortSeq";

        private void _iceI_opOptShortSeq(short[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptShortSeqResult>(completed);
            outAsync.invoke(
                _opOptShortSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeShortSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptShortSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        short[] tmpVal;
                        tmpVal = ShortSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        short[] tmpVal;
                        tmpVal = ShortSeqHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptIntSeqResult> opOptIntSeqAsync(int[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptIntSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptIntSeqResult> _iceI_opOptIntSeqAsync(int[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptIntSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptIntSeqResult>(progress, cancel);
            _iceI_opOptIntSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptIntSeq_name = "opOptIntSeq";

        private void _iceI_opOptIntSeq(int[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptIntSeqResult>(completed);
            outAsync.invoke(
                _opOptIntSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeIntSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptIntSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        int[] tmpVal;
                        tmpVal = IntSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        int[] tmpVal;
                        tmpVal = IntSeqHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptLongSeqResult> opOptLongSeqAsync(long[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptLongSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptLongSeqResult> _iceI_opOptLongSeqAsync(long[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptLongSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptLongSeqResult>(progress, cancel);
            _iceI_opOptLongSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptLongSeq_name = "opOptLongSeq";

        private void _iceI_opOptLongSeq(long[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptLongSeqResult>(completed);
            outAsync.invoke(
                _opOptLongSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLongSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptLongSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        long[] tmpVal;
                        tmpVal = LongSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        long[] tmpVal;
                        tmpVal = LongSeqHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptFloatSeqResult> opOptFloatSeqAsync(float[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptFloatSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptFloatSeqResult> _iceI_opOptFloatSeqAsync(float[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptFloatSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptFloatSeqResult>(progress, cancel);
            _iceI_opOptFloatSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptFloatSeq_name = "opOptFloatSeq";

        private void _iceI_opOptFloatSeq(float[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptFloatSeqResult>(completed);
            outAsync.invoke(
                _opOptFloatSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeFloatSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptFloatSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        float[] tmpVal;
                        tmpVal = FloatSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        float[] tmpVal;
                        tmpVal = FloatSeqHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptDoubleSeqResult> opOptDoubleSeqAsync(double[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptDoubleSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptDoubleSeqResult> _iceI_opOptDoubleSeqAsync(double[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptDoubleSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptDoubleSeqResult>(progress, cancel);
            _iceI_opOptDoubleSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptDoubleSeq_name = "opOptDoubleSeq";

        private void _iceI_opOptDoubleSeq(double[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptDoubleSeqResult>(completed);
            outAsync.invoke(
                _opOptDoubleSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeDoubleSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptDoubleSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        double[] tmpVal;
                        tmpVal = DoubleSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        double[] tmpVal;
                        tmpVal = DoubleSeqHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptStringSeqResult> opOptStringSeqAsync(string[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptStringSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptStringSeqResult> _iceI_opOptStringSeqAsync(string[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptStringSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptStringSeqResult>(progress, cancel);
            _iceI_opOptStringSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptStringSeq_name = "opOptStringSeq";

        private void _iceI_opOptStringSeq(string[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptStringSeqResult>(completed);
            outAsync.invoke(
                _opOptStringSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeStringSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptStringSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[] tmpVal;
                        tmpVal = StringSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[] tmpVal;
                        tmpVal = StringSeqHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptESeqResult> opOptESeqAsync(E[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptESeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptESeqResult> _iceI_opOptESeqAsync(E[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptESeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptESeqResult>(progress, cancel);
            _iceI_opOptESeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptESeq_name = "opOptESeq";

        private void _iceI_opOptESeq(E[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptESeqResult>(completed);
            outAsync.invoke(
                _opOptESeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    if (iceP_inSeq is not null && ostr.writeOptional(2, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        ESeqHelper.write(ostr, iceP_inSeq);
                        ostr.endSize(pos);
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptESeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        E[] tmpVal;
                        tmpVal = ESeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        E[] tmpVal;
                        tmpVal = ESeqHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptSSeqResult> opOptSSeqAsync(S[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptSSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptSSeqResult> _iceI_opOptSSeqAsync(S[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptSSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptSSeqResult>(progress, cancel);
            _iceI_opOptSSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptSSeq_name = "opOptSSeq";

        private void _iceI_opOptSSeq(S[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptSSeqResult>(completed);
            outAsync.invoke(
                _opOptSSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    if (iceP_inSeq is not null && ostr.writeOptional(2, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        SSeqHelper.write(ostr, iceP_inSeq);
                        ostr.endSize(pos);
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptSSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        S[] tmpVal;
                        tmpVal = SSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        S[] tmpVal;
                        tmpVal = SSeqHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptDSeqResult> opOptDSeqAsync(global::System.Collections.Generic.Dictionary<int, string>[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptDSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptDSeqResult> _iceI_opOptDSeqAsync(global::System.Collections.Generic.Dictionary<int, string>[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptDSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptDSeqResult>(progress, cancel);
            _iceI_opOptDSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptDSeq_name = "opOptDSeq";

        private void _iceI_opOptDSeq(global::System.Collections.Generic.Dictionary<int, string>[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptDSeqResult>(completed);
            outAsync.invoke(
                _opOptDSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    if (iceP_inSeq is not null && ostr.writeOptional(2, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        DSeqHelper.write(ostr, iceP_inSeq);
                        ostr.endSize(pos);
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptDSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<int, string>[] tmpVal;
                        tmpVal = DSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<int, string>[] tmpVal;
                        tmpVal = DSeqHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptStringSeqSeqResult> opOptStringSeqSeqAsync(string[][]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptStringSeqSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptStringSeqSeqResult> _iceI_opOptStringSeqSeqAsync(string[][]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptStringSeqSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptStringSeqSeqResult>(progress, cancel);
            _iceI_opOptStringSeqSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptStringSeqSeq_name = "opOptStringSeqSeq";

        private void _iceI_opOptStringSeqSeq(string[][]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptStringSeqSeqResult>(completed);
            outAsync.invoke(
                _opOptStringSeqSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    if (iceP_inSeq is not null && ostr.writeOptional(2, Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        StringSeqSeqHelper.write(ostr, iceP_inSeq);
                        ostr.endSize(pos);
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptStringSeqSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[][] tmpVal;
                        tmpVal = StringSeqSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[][] tmpVal;
                        tmpVal = StringSeqSeqHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptByteBufferSeqResult> opOptByteBufferSeqAsync(byte[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptByteBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptByteBufferSeqResult> _iceI_opOptByteBufferSeqAsync(byte[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptByteBufferSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptByteBufferSeqResult>(progress, cancel);
            _iceI_opOptByteBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptByteBufferSeq_name = "opOptByteBufferSeq";

        private void _iceI_opOptByteBufferSeq(byte[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptByteBufferSeqResult>(completed);
            outAsync.invoke(
                _opOptByteBufferSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeByteSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptByteBufferSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = ByteBufferHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = ByteBufferHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptShortBufferSeqResult> opOptShortBufferSeqAsync(short[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptShortBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptShortBufferSeqResult> _iceI_opOptShortBufferSeqAsync(short[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptShortBufferSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptShortBufferSeqResult>(progress, cancel);
            _iceI_opOptShortBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptShortBufferSeq_name = "opOptShortBufferSeq";

        private void _iceI_opOptShortBufferSeq(short[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptShortBufferSeqResult>(completed);
            outAsync.invoke(
                _opOptShortBufferSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeShortSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptShortBufferSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        short[] tmpVal;
                        tmpVal = ShortBufferHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        short[] tmpVal;
                        tmpVal = ShortBufferHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptIntBufferSeqResult> opOptIntBufferSeqAsync(int[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptIntBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptIntBufferSeqResult> _iceI_opOptIntBufferSeqAsync(int[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptIntBufferSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptIntBufferSeqResult>(progress, cancel);
            _iceI_opOptIntBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptIntBufferSeq_name = "opOptIntBufferSeq";

        private void _iceI_opOptIntBufferSeq(int[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptIntBufferSeqResult>(completed);
            outAsync.invoke(
                _opOptIntBufferSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeIntSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptIntBufferSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        int[] tmpVal;
                        tmpVal = IntBufferHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        int[] tmpVal;
                        tmpVal = IntBufferHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptLongBufferSeqResult> opOptLongBufferSeqAsync(long[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptLongBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptLongBufferSeqResult> _iceI_opOptLongBufferSeqAsync(long[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptLongBufferSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptLongBufferSeqResult>(progress, cancel);
            _iceI_opOptLongBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptLongBufferSeq_name = "opOptLongBufferSeq";

        private void _iceI_opOptLongBufferSeq(long[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptLongBufferSeqResult>(completed);
            outAsync.invoke(
                _opOptLongBufferSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeLongSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptLongBufferSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        long[] tmpVal;
                        tmpVal = LongBufferHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        long[] tmpVal;
                        tmpVal = LongBufferHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptFloatBufferSeqResult> opOptFloatBufferSeqAsync(float[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptFloatBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptFloatBufferSeqResult> _iceI_opOptFloatBufferSeqAsync(float[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptFloatBufferSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptFloatBufferSeqResult>(progress, cancel);
            _iceI_opOptFloatBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptFloatBufferSeq_name = "opOptFloatBufferSeq";

        private void _iceI_opOptFloatBufferSeq(float[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptFloatBufferSeqResult>(completed);
            outAsync.invoke(
                _opOptFloatBufferSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeFloatSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptFloatBufferSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        float[] tmpVal;
                        tmpVal = FloatBufferHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        float[] tmpVal;
                        tmpVal = FloatBufferHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_OpOptDoubleBufferSeqResult> opOptDoubleBufferSeqAsync(double[]? inSeq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptDoubleBufferSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_OpOptDoubleBufferSeqResult> _iceI_opOptDoubleBufferSeqAsync(double[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptDoubleBufferSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<TestIntf_OpOptDoubleBufferSeqResult>(progress, cancel);
            _iceI_opOptDoubleBufferSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptDoubleBufferSeq_name = "opOptDoubleBufferSeq";

        private void _iceI_opOptDoubleBufferSeq(double[]? iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_OpOptDoubleBufferSeqResult>(completed);
            outAsync.invoke(
                _opOptDoubleBufferSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeDoubleSeq(2, iceP_inSeq);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new TestIntf_OpOptDoubleBufferSeqResult();
                    if (istr.readOptional(1, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        double[] tmpVal;
                        tmpVal = DoubleBufferHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        double[] tmpVal;
                        tmpVal = DoubleBufferHelper.read(istr);
                        ret.outSeq = tmpVal;
                    }
                    else
                    {
                        ret.outSeq = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public static TestIntfPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new TestIntfPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static TestIntfPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new TestIntfPrxHelper(b) : null;

        public static TestIntfPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new TestIntfPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static TestIntfPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public static string ice_staticId() => "::Test::TestIntf";

        public static void write(Ice.OutputStream ostr, TestIntfPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static TestIntfPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new TestIntfPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new TestIntfPrxHelper(reference);

        private TestIntfPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private TestIntfPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test
{
    public abstract class TestIntfDisp_ : Ice.ObjectImpl, TestIntf
    {
        public abstract A[] opASeq(A[] inSeq, out A[] outSeq, Ice.Current current);

        public abstract A[] opAArray(A[] inSeq, out A[] outSeq, Ice.Current current);

        public abstract A[] opAList(A[] inSeq, out A[] outSeq, Ice.Current current);

        public abstract bool[] opBoolSeq(bool[] inSeq, out bool[] outSeq, Ice.Current current);

        public abstract byte[] opByteSeq(byte[] inSeq, out byte[] outSeq, Ice.Current current);

        public abstract short[] opShortSeq(short[] inSeq, out short[] outSeq, Ice.Current current);

        public abstract int[] opIntSeq(int[] inSeq, out int[] outSeq, Ice.Current current);

        public abstract long[] opLongSeq(long[] inSeq, out long[] outSeq, Ice.Current current);

        public abstract float[] opFloatSeq(float[] inSeq, out float[] outSeq, Ice.Current current);

        public abstract double[] opDoubleSeq(double[] inSeq, out double[] outSeq, Ice.Current current);

        public abstract string[] opStringSeq(string[] inSeq, out string[] outSeq, Ice.Current current);

        public abstract E[] opESeq(E[] inSeq, out E[] outSeq, Ice.Current current);

        public abstract S[] opSSeq(S[] inSeq, out S[] outSeq, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<int, string>[] opDSeq(global::System.Collections.Generic.Dictionary<int, string>[] inSeq, out global::System.Collections.Generic.Dictionary<int, string>[] outSeq, Ice.Current current);

        public abstract string[][] opStringSeqSeq(string[][] inSeq, out string[][] outSeq, Ice.Current current);

        public abstract byte[] opByteBufferSeq(byte[] inSeq, out byte[] outSeq, Ice.Current current);

        public abstract short[] opShortBufferSeq(short[] inSeq, out short[] outSeq, Ice.Current current);

        public abstract int[] opIntBufferSeq(int[] inSeq, out int[] outSeq, Ice.Current current);

        public abstract long[] opLongBufferSeq(long[] inSeq, out long[] outSeq, Ice.Current current);

        public abstract float[] opFloatBufferSeq(float[] inSeq, out float[] outSeq, Ice.Current current);

        public abstract double[] opDoubleBufferSeq(double[] inSeq, out double[] outSeq, Ice.Current current);

        public abstract A[]? opOptASeq(A[]? inSeq, out A[]? outSeq, Ice.Current current);

        public abstract A[]? opOptAArray(A[]? inSeq, out A[]? outSeq, Ice.Current current);

        public abstract A[]? opOptAList(A[]? inSeq, out A[]? outSeq, Ice.Current current);

        public abstract bool[]? opOptBoolSeq(bool[]? inSeq, out bool[]? outSeq, Ice.Current current);

        public abstract byte[]? opOptByteSeq(byte[]? inSeq, out byte[]? outSeq, Ice.Current current);

        public abstract short[]? opOptShortSeq(short[]? inSeq, out short[]? outSeq, Ice.Current current);

        public abstract int[]? opOptIntSeq(int[]? inSeq, out int[]? outSeq, Ice.Current current);

        public abstract long[]? opOptLongSeq(long[]? inSeq, out long[]? outSeq, Ice.Current current);

        public abstract float[]? opOptFloatSeq(float[]? inSeq, out float[]? outSeq, Ice.Current current);

        public abstract double[]? opOptDoubleSeq(double[]? inSeq, out double[]? outSeq, Ice.Current current);

        public abstract string[]? opOptStringSeq(string[]? inSeq, out string[]? outSeq, Ice.Current current);

        public abstract E[]? opOptESeq(E[]? inSeq, out E[]? outSeq, Ice.Current current);

        public abstract S[]? opOptSSeq(S[]? inSeq, out S[]? outSeq, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<int, string>[]? opOptDSeq(global::System.Collections.Generic.Dictionary<int, string>[]? inSeq, out global::System.Collections.Generic.Dictionary<int, string>[]? outSeq, Ice.Current current);

        public abstract string[][]? opOptStringSeqSeq(string[][]? inSeq, out string[][]? outSeq, Ice.Current current);

        public abstract byte[]? opOptByteBufferSeq(byte[]? inSeq, out byte[]? outSeq, Ice.Current current);

        public abstract short[]? opOptShortBufferSeq(short[]? inSeq, out short[]? outSeq, Ice.Current current);

        public abstract int[]? opOptIntBufferSeq(int[]? inSeq, out int[]? outSeq, Ice.Current current);

        public abstract long[]? opOptLongBufferSeq(long[]? inSeq, out long[]? outSeq, Ice.Current current);

        public abstract float[]? opOptFloatBufferSeq(float[]? inSeq, out float[]? outSeq, Ice.Current current);

        public abstract double[]? opOptDoubleBufferSeq(double[]? inSeq, out double[]? outSeq, Ice.Current current);

        public abstract void shutdown(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::TestIntf";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "opASeq" => TestIntf.iceD_opASeqAsync(this, request),
                "opAArray" => TestIntf.iceD_opAArrayAsync(this, request),
                "opAList" => TestIntf.iceD_opAListAsync(this, request),
                "opBoolSeq" => TestIntf.iceD_opBoolSeqAsync(this, request),
                "opByteSeq" => TestIntf.iceD_opByteSeqAsync(this, request),
                "opShortSeq" => TestIntf.iceD_opShortSeqAsync(this, request),
                "opIntSeq" => TestIntf.iceD_opIntSeqAsync(this, request),
                "opLongSeq" => TestIntf.iceD_opLongSeqAsync(this, request),
                "opFloatSeq" => TestIntf.iceD_opFloatSeqAsync(this, request),
                "opDoubleSeq" => TestIntf.iceD_opDoubleSeqAsync(this, request),
                "opStringSeq" => TestIntf.iceD_opStringSeqAsync(this, request),
                "opESeq" => TestIntf.iceD_opESeqAsync(this, request),
                "opSSeq" => TestIntf.iceD_opSSeqAsync(this, request),
                "opDSeq" => TestIntf.iceD_opDSeqAsync(this, request),
                "opStringSeqSeq" => TestIntf.iceD_opStringSeqSeqAsync(this, request),
                "opByteBufferSeq" => TestIntf.iceD_opByteBufferSeqAsync(this, request),
                "opShortBufferSeq" => TestIntf.iceD_opShortBufferSeqAsync(this, request),
                "opIntBufferSeq" => TestIntf.iceD_opIntBufferSeqAsync(this, request),
                "opLongBufferSeq" => TestIntf.iceD_opLongBufferSeqAsync(this, request),
                "opFloatBufferSeq" => TestIntf.iceD_opFloatBufferSeqAsync(this, request),
                "opDoubleBufferSeq" => TestIntf.iceD_opDoubleBufferSeqAsync(this, request),
                "opOptASeq" => TestIntf.iceD_opOptASeqAsync(this, request),
                "opOptAArray" => TestIntf.iceD_opOptAArrayAsync(this, request),
                "opOptAList" => TestIntf.iceD_opOptAListAsync(this, request),
                "opOptBoolSeq" => TestIntf.iceD_opOptBoolSeqAsync(this, request),
                "opOptByteSeq" => TestIntf.iceD_opOptByteSeqAsync(this, request),
                "opOptShortSeq" => TestIntf.iceD_opOptShortSeqAsync(this, request),
                "opOptIntSeq" => TestIntf.iceD_opOptIntSeqAsync(this, request),
                "opOptLongSeq" => TestIntf.iceD_opOptLongSeqAsync(this, request),
                "opOptFloatSeq" => TestIntf.iceD_opOptFloatSeqAsync(this, request),
                "opOptDoubleSeq" => TestIntf.iceD_opOptDoubleSeqAsync(this, request),
                "opOptStringSeq" => TestIntf.iceD_opOptStringSeqAsync(this, request),
                "opOptESeq" => TestIntf.iceD_opOptESeqAsync(this, request),
                "opOptSSeq" => TestIntf.iceD_opOptSSeqAsync(this, request),
                "opOptDSeq" => TestIntf.iceD_opOptDSeqAsync(this, request),
                "opOptStringSeqSeq" => TestIntf.iceD_opOptStringSeqSeqAsync(this, request),
                "opOptByteBufferSeq" => TestIntf.iceD_opOptByteBufferSeqAsync(this, request),
                "opOptShortBufferSeq" => TestIntf.iceD_opOptShortBufferSeqAsync(this, request),
                "opOptIntBufferSeq" => TestIntf.iceD_opOptIntBufferSeqAsync(this, request),
                "opOptLongBufferSeq" => TestIntf.iceD_opOptLongBufferSeqAsync(this, request),
                "opOptFloatBufferSeq" => TestIntf.iceD_opOptFloatBufferSeqAsync(this, request),
                "opOptDoubleBufferSeq" => TestIntf.iceD_opOptDoubleBufferSeqAsync(this, request),
                "shutdown" => TestIntf.iceD_shutdownAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test
{
    public partial interface TestIntf
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opASeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            A[] iceP_inSeq;
            iceP_inSeq = ASeqHelper.read(istr);
            istr.endEncapsulation();
            A[] iceP_outSeq;
            var ret = obj.opASeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ASeqHelper.write(ostr, iceP_outSeq);
            ASeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAArrayAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            A[] iceP_inSeq;
            iceP_inSeq = AArrayHelper.read(istr);
            istr.endEncapsulation();
            A[] iceP_outSeq;
            var ret = obj.opAArray(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            AArrayHelper.write(ostr, iceP_outSeq);
            AArrayHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opAListAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            A[] iceP_inSeq;
            iceP_inSeq = AListHelper.read(istr);
            istr.endEncapsulation();
            A[] iceP_outSeq;
            var ret = obj.opAList(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            AListHelper.write(ostr, iceP_outSeq);
            AListHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opBoolSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            bool[] iceP_inSeq;
            iceP_inSeq = BoolSeqHelper.read(istr);
            istr.endEncapsulation();
            bool[] iceP_outSeq;
            var ret = obj.opBoolSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            BoolSeqHelper.write(ostr, iceP_outSeq);
            BoolSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteSeqHelper.read(istr);
            istr.endEncapsulation();
            byte[] iceP_outSeq;
            var ret = obj.opByteSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ByteSeqHelper.write(ostr, iceP_outSeq);
            ByteSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            short[] iceP_inSeq;
            iceP_inSeq = ShortSeqHelper.read(istr);
            istr.endEncapsulation();
            short[] iceP_outSeq;
            var ret = obj.opShortSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ShortSeqHelper.write(ostr, iceP_outSeq);
            ShortSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opIntSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            int[] iceP_inSeq;
            iceP_inSeq = IntSeqHelper.read(istr);
            istr.endEncapsulation();
            int[] iceP_outSeq;
            var ret = obj.opIntSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            IntSeqHelper.write(ostr, iceP_outSeq);
            IntSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLongSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            long[] iceP_inSeq;
            iceP_inSeq = LongSeqHelper.read(istr);
            istr.endEncapsulation();
            long[] iceP_outSeq;
            var ret = obj.opLongSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            LongSeqHelper.write(ostr, iceP_outSeq);
            LongSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opFloatSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            float[] iceP_inSeq;
            iceP_inSeq = FloatSeqHelper.read(istr);
            istr.endEncapsulation();
            float[] iceP_outSeq;
            var ret = obj.opFloatSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            FloatSeqHelper.write(ostr, iceP_outSeq);
            FloatSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opDoubleSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            double[] iceP_inSeq;
            iceP_inSeq = DoubleSeqHelper.read(istr);
            istr.endEncapsulation();
            double[] iceP_outSeq;
            var ret = obj.opDoubleSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            DoubleSeqHelper.write(ostr, iceP_outSeq);
            DoubleSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[] iceP_inSeq;
            iceP_inSeq = StringSeqHelper.read(istr);
            istr.endEncapsulation();
            string[] iceP_outSeq;
            var ret = obj.opStringSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            StringSeqHelper.write(ostr, iceP_outSeq);
            StringSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opESeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            E[] iceP_inSeq;
            iceP_inSeq = ESeqHelper.read(istr);
            istr.endEncapsulation();
            E[] iceP_outSeq;
            var ret = obj.opESeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ESeqHelper.write(ostr, iceP_outSeq);
            ESeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            S[] iceP_inSeq;
            iceP_inSeq = SSeqHelper.read(istr);
            istr.endEncapsulation();
            S[] iceP_outSeq;
            var ret = obj.opSSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            SSeqHelper.write(ostr, iceP_outSeq);
            SSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opDSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<int, string>[] iceP_inSeq;
            iceP_inSeq = DSeqHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<int, string>[] iceP_outSeq;
            var ret = obj.opDSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            DSeqHelper.write(ostr, iceP_outSeq);
            DSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opStringSeqSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[][] iceP_inSeq;
            iceP_inSeq = StringSeqSeqHelper.read(istr);
            istr.endEncapsulation();
            string[][] iceP_outSeq;
            var ret = obj.opStringSeqSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            StringSeqSeqHelper.write(ostr, iceP_outSeq);
            StringSeqSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opByteBufferSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[] iceP_inSeq;
            iceP_inSeq = ByteBufferHelper.read(istr);
            istr.endEncapsulation();
            byte[] iceP_outSeq;
            var ret = obj.opByteBufferSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ByteBufferHelper.write(ostr, iceP_outSeq);
            ByteBufferHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opShortBufferSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            short[] iceP_inSeq;
            iceP_inSeq = ShortBufferHelper.read(istr);
            istr.endEncapsulation();
            short[] iceP_outSeq;
            var ret = obj.opShortBufferSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ShortBufferHelper.write(ostr, iceP_outSeq);
            ShortBufferHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opIntBufferSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            int[] iceP_inSeq;
            iceP_inSeq = IntBufferHelper.read(istr);
            istr.endEncapsulation();
            int[] iceP_outSeq;
            var ret = obj.opIntBufferSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            IntBufferHelper.write(ostr, iceP_outSeq);
            IntBufferHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opLongBufferSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            long[] iceP_inSeq;
            iceP_inSeq = LongBufferHelper.read(istr);
            istr.endEncapsulation();
            long[] iceP_outSeq;
            var ret = obj.opLongBufferSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            LongBufferHelper.write(ostr, iceP_outSeq);
            LongBufferHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opFloatBufferSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            float[] iceP_inSeq;
            iceP_inSeq = FloatBufferHelper.read(istr);
            istr.endEncapsulation();
            float[] iceP_outSeq;
            var ret = obj.opFloatBufferSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            FloatBufferHelper.write(ostr, iceP_outSeq);
            FloatBufferHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opDoubleBufferSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            double[] iceP_inSeq;
            iceP_inSeq = DoubleBufferHelper.read(istr);
            istr.endEncapsulation();
            double[] iceP_outSeq;
            var ret = obj.opDoubleBufferSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            DoubleBufferHelper.write(ostr, iceP_outSeq);
            DoubleBufferHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptASeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            A[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                A[] tmpVal;
                tmpVal = ASeqHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            A[]? iceP_outSeq;
            var ret = obj.opOptASeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            if (ret is not null && ostr.writeOptional(1, Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(ret.Length * 4 + (ret.Length > 254 ? 5 : 1));
                ASeqHelper.write(ostr, ret);
            }
            if (iceP_outSeq is not null && ostr.writeOptional(3, Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(iceP_outSeq.Length * 4 + (iceP_outSeq.Length > 254 ? 5 : 1));
                ASeqHelper.write(ostr, iceP_outSeq);
            }
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptAArrayAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            A[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                A[] tmpVal;
                tmpVal = AArrayHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            A[]? iceP_outSeq;
            var ret = obj.opOptAArray(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            if (ret is not null && ostr.writeOptional(1, Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(ret.Length * 4 + (ret.Length > 254 ? 5 : 1));
                AArrayHelper.write(ostr, ret);
            }
            if (iceP_outSeq is not null && ostr.writeOptional(3, Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(iceP_outSeq.Length * 4 + (iceP_outSeq.Length > 254 ? 5 : 1));
                AArrayHelper.write(ostr, iceP_outSeq);
            }
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptAListAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            A[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                A[] tmpVal;
                tmpVal = AListHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            A[]? iceP_outSeq;
            var ret = obj.opOptAList(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            if (ret is not null && ostr.writeOptional(1, Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(ret.Length * 4 + (ret.Length > 254 ? 5 : 1));
                AListHelper.write(ostr, ret);
            }
            if (iceP_outSeq is not null && ostr.writeOptional(3, Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(iceP_outSeq.Length * 4 + (iceP_outSeq.Length > 254 ? 5 : 1));
                AListHelper.write(ostr, iceP_outSeq);
            }
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptBoolSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            bool[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                bool[] tmpVal;
                tmpVal = BoolSeqHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            bool[]? iceP_outSeq;
            var ret = obj.opOptBoolSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeBoolSeq(1, ret);
            ostr.writeBoolSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptByteSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal;
                tmpVal = ByteSeqHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            byte[]? iceP_outSeq;
            var ret = obj.opOptByteSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeByteSeq(1, ret);
            ostr.writeByteSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptShortSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            short[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                short[] tmpVal;
                tmpVal = ShortSeqHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            short[]? iceP_outSeq;
            var ret = obj.opOptShortSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeShortSeq(1, ret);
            ostr.writeShortSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptIntSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            int[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                int[] tmpVal;
                tmpVal = IntSeqHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            int[]? iceP_outSeq;
            var ret = obj.opOptIntSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeIntSeq(1, ret);
            ostr.writeIntSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptLongSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            long[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                long[] tmpVal;
                tmpVal = LongSeqHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            long[]? iceP_outSeq;
            var ret = obj.opOptLongSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeLongSeq(1, ret);
            ostr.writeLongSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptFloatSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            float[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                float[] tmpVal;
                tmpVal = FloatSeqHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            float[]? iceP_outSeq;
            var ret = obj.opOptFloatSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeFloatSeq(1, ret);
            ostr.writeFloatSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptDoubleSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            double[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                double[] tmpVal;
                tmpVal = DoubleSeqHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            double[]? iceP_outSeq;
            var ret = obj.opOptDoubleSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeDoubleSeq(1, ret);
            ostr.writeDoubleSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptStringSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                string[] tmpVal;
                tmpVal = StringSeqHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            string[]? iceP_outSeq;
            var ret = obj.opOptStringSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeStringSeq(1, ret);
            ostr.writeStringSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptESeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            E[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                E[] tmpVal;
                tmpVal = ESeqHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            E[]? iceP_outSeq;
            var ret = obj.opOptESeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            if (ret is not null && ostr.writeOptional(1, Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                ESeqHelper.write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_outSeq is not null && ostr.writeOptional(3, Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                ESeqHelper.write(ostr, iceP_outSeq);
                ostr.endSize(pos);
            }
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptSSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            S[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                S[] tmpVal;
                tmpVal = SSeqHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            S[]? iceP_outSeq;
            var ret = obj.opOptSSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            if (ret is not null && ostr.writeOptional(1, Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                SSeqHelper.write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_outSeq is not null && ostr.writeOptional(3, Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                SSeqHelper.write(ostr, iceP_outSeq);
                ostr.endSize(pos);
            }
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptDSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<int, string>[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                global::System.Collections.Generic.Dictionary<int, string>[] tmpVal;
                tmpVal = DSeqHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<int, string>[]? iceP_outSeq;
            var ret = obj.opOptDSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            if (ret is not null && ostr.writeOptional(1, Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                DSeqHelper.write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_outSeq is not null && ostr.writeOptional(3, Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                DSeqHelper.write(ostr, iceP_outSeq);
                ostr.endSize(pos);
            }
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptStringSeqSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            string[][]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                string[][] tmpVal;
                tmpVal = StringSeqSeqHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            string[][]? iceP_outSeq;
            var ret = obj.opOptStringSeqSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            if (ret is not null && ostr.writeOptional(1, Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                StringSeqSeqHelper.write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_outSeq is not null && ostr.writeOptional(3, Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                StringSeqSeqHelper.write(ostr, iceP_outSeq);
                ostr.endSize(pos);
            }
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptByteBufferSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            byte[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal;
                tmpVal = ByteBufferHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            byte[]? iceP_outSeq;
            var ret = obj.opOptByteBufferSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeByteSeq(1, ret);
            ostr.writeByteSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptShortBufferSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            short[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                short[] tmpVal;
                tmpVal = ShortBufferHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            short[]? iceP_outSeq;
            var ret = obj.opOptShortBufferSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeShortSeq(1, ret);
            ostr.writeShortSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptIntBufferSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            int[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                int[] tmpVal;
                tmpVal = IntBufferHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            int[]? iceP_outSeq;
            var ret = obj.opOptIntBufferSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeIntSeq(1, ret);
            ostr.writeIntSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptLongBufferSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            long[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                long[] tmpVal;
                tmpVal = LongBufferHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            long[]? iceP_outSeq;
            var ret = obj.opOptLongBufferSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeLongSeq(1, ret);
            ostr.writeLongSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptFloatBufferSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            float[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                float[] tmpVal;
                tmpVal = FloatBufferHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            float[]? iceP_outSeq;
            var ret = obj.opOptFloatBufferSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeFloatSeq(1, ret);
            ostr.writeFloatSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opOptDoubleBufferSeqAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            double[]? iceP_inSeq;
            if (istr.readOptional(2, Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                double[] tmpVal;
                tmpVal = DoubleBufferHelper.read(istr);
                iceP_inSeq = tmpVal;
            }
            else
            {
                iceP_inSeq = null;
            }
            istr.endEncapsulation();
            double[]? iceP_outSeq;
            var ret = obj.opOptDoubleBufferSeq(iceP_inSeq, out iceP_outSeq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeDoubleSeq(1, ret);
            ostr.writeDoubleSeq(3, iceP_outSeq);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
            TestIntf obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.shutdown(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }
}
