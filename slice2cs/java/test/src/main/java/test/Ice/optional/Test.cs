//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

using _System = global::System;

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable 1591

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::OneOptional")]
    public partial class OneOptional : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int? a;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public OneOptional(int? a)
        {
            this.a = a;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public OneOptional()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::OneOptional";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(1, a);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            a = istr_.readInt(1);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface MyInterface : global::Ice.Object, MyInterfaceOperations_
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public enum MyEnum
    {
        MyEnumMember
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyEnumHelper
    {
        public static void write(global::Ice.OutputStream ostr, MyEnum v)
        {
            ostr.writeEnum((int)v, 0);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static MyEnum read(global::Ice.InputStream istr)
        {
            MyEnum v;
            v = (MyEnum)istr.readEnum(0);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial record struct SmallStruct
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte m;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SmallStruct(byte m)
        {
            this.m = m;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SmallStruct(global::Ice.InputStream istr)
        {
            this.m = istr.readByte();
            ice_initialize();
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeByte(this.m);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, SmallStruct v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static SmallStruct ice_read(global::Ice.InputStream istr) => new(istr);

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial record struct FixedStruct
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int m;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public FixedStruct(int m)
        {
            this.m = m;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public FixedStruct(global::Ice.InputStream istr)
        {
            this.m = istr.readInt();
            ice_initialize();
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.m);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, FixedStruct v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static FixedStruct ice_read(global::Ice.InputStream istr) => new(istr);

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class VarStruct : global::System.ICloneable, global::System.IEquatable<VarStruct>
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string m = "";

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public VarStruct()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public VarStruct(string m)
        {
            this.m = m;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public VarStruct(global::Ice.InputStream istr)
        {
            this.m = istr.readString();
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone() => MemberwiseClone();

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            var hash = new global::System.HashCode();
            hash.Add(this.m);
            return hash.ToHashCode();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object? other) => Equals(other as VarStruct);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(VarStruct? other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return other is not null && 
                this.m == other.m;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator ==(VarStruct? lhs, VarStruct? rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator !=(VarStruct? lhs, VarStruct? rhs) => !(lhs == rhs);

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.m);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, VarStruct v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static VarStruct ice_read(global::Ice.InputStream istr) => new(istr);

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::MultiOptional")]
    public partial class MultiOptional : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte? a;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool? b;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public short? c;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int? d;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long? e;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public float? f;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public double? g;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string? h;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyEnum? i;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyInterfacePrx? j;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte[]? bs;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string[]? ss;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<int, int>? iid;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<string, int>? sid;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public FixedStruct? fs;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public VarStruct? vs;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public short[]? shs;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyEnum[]? es;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public FixedStruct[]? fss;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public VarStruct[]? vss;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public OneOptional?[]? oos;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyInterfacePrx?[]? mips;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<int, MyEnum>? ied;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<int, FixedStruct>? ifsd;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<int, VarStruct>? ivsd;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<int, OneOptional?>? iood;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<int, MyInterfacePrx?>? imipd;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool[]? bos;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public byte[]? ser;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MultiOptional(byte? a, bool? b, short? c, int? d, long? e, float? f, double? g, string? h, MyEnum? i, MyInterfacePrx? j, byte[]? bs, string[]? ss, global::System.Collections.Generic.Dictionary<int, int>? iid, global::System.Collections.Generic.Dictionary<string, int>? sid, FixedStruct? fs, VarStruct? vs, short[]? shs, MyEnum[]? es, FixedStruct[]? fss, VarStruct[]? vss, OneOptional?[]? oos, MyInterfacePrx?[]? mips, global::System.Collections.Generic.Dictionary<int, MyEnum>? ied, global::System.Collections.Generic.Dictionary<int, FixedStruct>? ifsd, global::System.Collections.Generic.Dictionary<int, VarStruct>? ivsd, global::System.Collections.Generic.Dictionary<int, OneOptional?>? iood, global::System.Collections.Generic.Dictionary<int, MyInterfacePrx?>? imipd, bool[]? bos, byte[]? ser)
        {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.e = e;
            this.f = f;
            this.g = g;
            this.h = h;
            this.i = i;
            this.j = j;
            this.bs = bs;
            this.ss = ss;
            this.iid = iid;
            this.sid = sid;
            this.fs = fs;
            this.vs = vs;
            this.shs = shs;
            this.es = es;
            this.fss = fss;
            this.vss = vss;
            this.oos = oos;
            this.mips = mips;
            this.ied = ied;
            this.ifsd = ifsd;
            this.ivsd = ivsd;
            this.iood = iood;
            this.imipd = imipd;
            this.bos = bos;
            this.ser = ser;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MultiOptional()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::MultiOptional";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeByte(1, a);
            ostr_.writeBool(2, b);
            ostr_.writeShort(3, c);
            ostr_.writeInt(4, d);
            ostr_.writeLong(5, e);
            ostr_.writeFloat(6, f);
            ostr_.writeDouble(7, g);
            ostr_.writeString(8, h);
            if (i is not null)
            {
                ostr_.writeEnum(9, (int)i.Value, 1);
            }
            if (j is not null && ostr_.writeOptional(10, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                MyInterfacePrxHelper.write(ostr_, j);
                ostr_.endSize(pos);
            }
            ostr_.writeByteSeq(12, bs);
            ostr_.writeStringSeq(13, ss);
            if (iid is not null && ostr_.writeOptional(14, global::Ice.OptionalFormat.VSize))
            {
                ostr_.writeSize(iid.Count * 8 + (iid.Count > 254 ? 5 : 1));
                IntIntDictHelper.write(ostr_, iid);
            }
            if (sid is not null && ostr_.writeOptional(15, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                StringIntDictHelper.write(ostr_, sid);
                ostr_.endSize(pos);
            }
            if (fs is not null && ostr_.writeOptional(16, global::Ice.OptionalFormat.VSize))
            {
                ostr_.writeSize(4);
                fs.Value.ice_writeMembers(ostr_);
            }
            if (vs is not null && ostr_.writeOptional(17, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                VarStruct.ice_write(ostr_, vs);
                ostr_.endSize(pos);
            }
            ostr_.writeShortSeq(18, shs);
            if (es is not null && ostr_.writeOptional(19, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                MyEnumSeqHelper.write(ostr_, es);
                ostr_.endSize(pos);
            }
            if (fss is not null && ostr_.writeOptional(20, global::Ice.OptionalFormat.VSize))
            {
                ostr_.writeSize(fss.Length * 4 + (fss.Length > 254 ? 5 : 1));
                FixedStructSeqHelper.write(ostr_, fss);
            }
            if (vss is not null && ostr_.writeOptional(21, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                VarStructSeqHelper.write(ostr_, vss);
                ostr_.endSize(pos);
            }
            if (oos is not null && ostr_.writeOptional(22, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                OneOptionalSeqHelper.write(ostr_, oos);
                ostr_.endSize(pos);
            }
            if (mips is not null && ostr_.writeOptional(23, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                MyInterfacePrxSeqHelper.write(ostr_, mips);
                ostr_.endSize(pos);
            }
            if (ied is not null && ostr_.writeOptional(24, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                IntEnumDictHelper.write(ostr_, ied);
                ostr_.endSize(pos);
            }
            if (ifsd is not null && ostr_.writeOptional(25, global::Ice.OptionalFormat.VSize))
            {
                ostr_.writeSize(ifsd.Count * 8 + (ifsd.Count > 254 ? 5 : 1));
                IntFixedStructDictHelper.write(ostr_, ifsd);
            }
            if (ivsd is not null && ostr_.writeOptional(26, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                IntVarStructDictHelper.write(ostr_, ivsd);
                ostr_.endSize(pos);
            }
            if (iood is not null && ostr_.writeOptional(27, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                IntOneOptionalDictHelper.write(ostr_, iood);
                ostr_.endSize(pos);
            }
            if (imipd is not null && ostr_.writeOptional(28, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                IntMyInterfacePrxDictHelper.write(ostr_, imipd);
                ostr_.endSize(pos);
            }
            ostr_.writeBoolSeq(29, bos);
            ostr_.writeByteSeq(30, ser);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            a = istr_.readByte(1);
            b = istr_.readBool(2);
            c = istr_.readShort(3);
            d = istr_.readInt(4);
            e = istr_.readLong(5);
            f = istr_.readFloat(6);
            g = istr_.readDouble(7);
            h = istr_.readString(8);
            if (istr_.readOptional(9, global::Ice.OptionalFormat.Size))
            {
                MyEnum tmpVal;
                tmpVal = (MyEnum)istr_.readEnum(0);
                i = tmpVal;
            }
            else
            {
                i = null;
            }
            if (istr_.readOptional(10, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                MyInterfacePrx? tmpVal;
                tmpVal = MyInterfacePrxHelper.read(istr_);
                j = tmpVal;
            }
            else
            {
                j = null;
            }
            if (istr_.readOptional(12, global::Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal;
                tmpVal = ByteSeqHelper.read(istr_);
                bs = tmpVal;
            }
            else
            {
                bs = null;
            }
            if (istr_.readOptional(13, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                string[] tmpVal;
                tmpVal = StringSeqHelper.read(istr_);
                ss = tmpVal;
            }
            else
            {
                ss = null;
            }
            if (istr_.readOptional(14, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                global::System.Collections.Generic.Dictionary<int, int> tmpVal = new global::System.Collections.Generic.Dictionary<int, int>();
                tmpVal = IntIntDictHelper.read(istr_);
                iid = tmpVal;
            }
            else
            {
                iid = null;
            }
            if (istr_.readOptional(15, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                tmpVal = StringIntDictHelper.read(istr_);
                sid = tmpVal;
            }
            else
            {
                sid = null;
            }
            if (istr_.readOptional(16, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                FixedStruct tmpVal;
                tmpVal = new FixedStruct(istr_);
                fs = tmpVal;
            }
            else
            {
                fs = null;
            }
            if (istr_.readOptional(17, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                VarStruct tmpVal;
                tmpVal = new VarStruct(istr_);
                vs = tmpVal;
            }
            else
            {
                vs = null;
            }
            if (istr_.readOptional(18, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                short[] tmpVal;
                tmpVal = ShortSeqHelper.read(istr_);
                shs = tmpVal;
            }
            else
            {
                shs = null;
            }
            if (istr_.readOptional(19, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                MyEnum[] tmpVal;
                tmpVal = MyEnumSeqHelper.read(istr_);
                es = tmpVal;
            }
            else
            {
                es = null;
            }
            if (istr_.readOptional(20, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                FixedStruct[] tmpVal;
                tmpVal = FixedStructSeqHelper.read(istr_);
                fss = tmpVal;
            }
            else
            {
                fss = null;
            }
            if (istr_.readOptional(21, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                VarStruct[] tmpVal;
                tmpVal = VarStructSeqHelper.read(istr_);
                vss = tmpVal;
            }
            else
            {
                vss = null;
            }
            if (istr_.readOptional(22, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                OneOptional?[] tmpVal;
                tmpVal = OneOptionalSeqHelper.read(istr_);
                oos = tmpVal;
            }
            else
            {
                oos = null;
            }
            if (istr_.readOptional(23, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                MyInterfacePrx?[] tmpVal;
                tmpVal = MyInterfacePrxSeqHelper.read(istr_);
                mips = tmpVal;
            }
            else
            {
                mips = null;
            }
            if (istr_.readOptional(24, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                global::System.Collections.Generic.Dictionary<int, MyEnum> tmpVal = new global::System.Collections.Generic.Dictionary<int, MyEnum>();
                tmpVal = IntEnumDictHelper.read(istr_);
                ied = tmpVal;
            }
            else
            {
                ied = null;
            }
            if (istr_.readOptional(25, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                global::System.Collections.Generic.Dictionary<int, FixedStruct> tmpVal = new global::System.Collections.Generic.Dictionary<int, FixedStruct>();
                tmpVal = IntFixedStructDictHelper.read(istr_);
                ifsd = tmpVal;
            }
            else
            {
                ifsd = null;
            }
            if (istr_.readOptional(26, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                global::System.Collections.Generic.Dictionary<int, VarStruct> tmpVal = new global::System.Collections.Generic.Dictionary<int, VarStruct>();
                tmpVal = IntVarStructDictHelper.read(istr_);
                ivsd = tmpVal;
            }
            else
            {
                ivsd = null;
            }
            if (istr_.readOptional(27, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                global::System.Collections.Generic.Dictionary<int, OneOptional?> tmpVal = new global::System.Collections.Generic.Dictionary<int, OneOptional?>();
                tmpVal = IntOneOptionalDictHelper.read(istr_);
                iood = tmpVal;
            }
            else
            {
                iood = null;
            }
            if (istr_.readOptional(28, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                global::System.Collections.Generic.Dictionary<int, MyInterfacePrx?> tmpVal = new global::System.Collections.Generic.Dictionary<int, MyInterfacePrx?>();
                tmpVal = IntMyInterfacePrxDictHelper.read(istr_);
                imipd = tmpVal;
            }
            else
            {
                imipd = null;
            }
            if (istr_.readOptional(29, global::Ice.OptionalFormat.VSize))
            {
                bool[] tmpVal;
                tmpVal = BoolSeqHelper.read(istr_);
                bos = tmpVal;
            }
            else
            {
                bos = null;
            }
            if (istr_.readOptional(30, global::Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal;
                tmpVal = SerializableHelper.read(istr_);
                ser = tmpVal;
            }
            else
            {
                ser = null;
            }
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::A")]
    public partial class A : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int requiredA;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int? ma;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int? mb;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int? mc;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A(int requiredA, int? ma, int? mb, int? mc)
        {
            this.requiredA = requiredA;
            this.ma = ma;
            this.mb = mb;
            this.mc = mc;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::A";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(requiredA);
            ostr_.writeInt(1, ma);
            ostr_.writeInt(50, mb);
            ostr_.writeInt(500, mc);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            requiredA = istr_.readInt();
            ma = istr_.readInt(1);
            mb = istr_.readInt(50);
            mc = istr_.readInt(500);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::B")]
    public partial class B : A
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int requiredB;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int? md;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B(int requiredA, int? ma, int? mb, int? mc, int requiredB, int? md) : base(requiredA, ma, mb, mc)
        {
            this.requiredB = requiredB;
            this.md = md;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::B";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeInt(requiredB);
            ostr_.writeInt(10, md);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            requiredB = istr_.readInt();
            md = istr_.readInt(10);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::C")]
    public partial class C : B
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string ss = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string? ms;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C(int requiredA, int? ma, int? mb, int? mc, int requiredB, int? md, string ss, string? ms) : base(requiredA, ma, mb, mc, requiredB, md)
        {
            this.ss = ss;
            this.ms = ms;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::C";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(ss);
            ostr_.writeString(890, ms);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            ss = istr_.readString();
            ms = istr_.readString(890);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::WD")]
    public partial class WD : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int? a = 5;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string? s = "test";

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public WD(int? a, string? s)
        {
            this.a = a;
            this.s = s;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public WD()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::WD";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(1, a);
            ostr_.writeString(2, s);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            a = istr_.readInt(1);
            s = istr_.readString(2);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::OptionalException")]
    public partial class OptionalException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool req = false;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int? a = 5;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string? b;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public OptionalException(bool req, int? a, string? b, global::System.Exception? innerException = null) : base(innerException)
        {
            this.req = req;
            this.a = a;
            this.b = b;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public OptionalException(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public OptionalException()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::OptionalException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::OptionalException", -1, true);
            ostr_.writeBool(req);
            ostr_.writeInt(1, a);
            ostr_.writeString(2, b);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            req = istr_.readBool();
            a = istr_.readInt(1);
            b = istr_.readString(2);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::DerivedException")]
    public partial class DerivedException : OptionalException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string d1 = "";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string? ss = "test";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string d2 = "";

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public DerivedException(bool req, int? a, string? b, string d1, string? ss, string d2, global::System.Exception? innerException = null) : base(req, a, b, innerException)
        {
            this.d1 = d1;
            this.ss = ss;
            this.d2 = d2;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public DerivedException(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public DerivedException()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::DerivedException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::DerivedException", -1, false);
            ostr_.writeString(d1);
            ostr_.writeString(d2);
            ostr_.writeString(600, ss);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            d1 = istr_.readString();
            d2 = istr_.readString();
            ss = istr_.readString(600);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::RequiredException")]
    public partial class RequiredException : OptionalException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string ss = "test";

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public RequiredException(bool req, int? a, string? b, string ss, global::System.Exception? innerException = null) : base(req, a, b, innerException)
        {
            this.ss = ss;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public RequiredException(global::System.Exception? innerException) : base(innerException)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public RequiredException()
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::RequiredException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::RequiredException", -1, false);
            ostr_.writeString(ss);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            ss = istr_.readString();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::OptionalWithCustom")]
    public partial class OptionalWithCustom : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SmallStruct[]? l;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected SmallStruct[]? lp;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public OptionalWithCustom(SmallStruct[]? l, SmallStruct[]? lp)
        {
            this.l = l;
            this.lp = lp;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public OptionalWithCustom()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::OptionalWithCustom";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            if (l is not null && ostr_.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                SmallStructListHelper.write(ostr_, l);
            }
            if (lp is not null && ostr_.writeOptional(2, global::Ice.OptionalFormat.VSize))
            {
                SmallStructListHelper.write(ostr_, lp);
            }
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            if (istr_.readOptional(1, global::Ice.OptionalFormat.VSize))
            {
                SmallStruct[] tmpVal;
                tmpVal = SmallStructListHelper.read(istr_);
                l = tmpVal;
            }
            else
            {
                l = null;
            }
            if (istr_.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                SmallStruct[] tmpVal;
                tmpVal = SmallStructListHelper.read(istr_);
                lp = tmpVal;
            }
            else
            {
                lp = null;
            }
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::E")]
    public partial class E : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public FixedStruct fse;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public E(FixedStruct fse)
        {
            this.fse = fse;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public E()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::E";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            fse.ice_writeMembers(ostr_);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            fse = new FixedStruct(istr_);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::F")]
    public partial class F : E
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public FixedStruct? fsf;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public F(FixedStruct fse, FixedStruct? fsf) : base(fse)
        {
            this.fsf = fsf;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public F()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::F";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            if (fsf is not null && ostr_.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr_.writeSize(4);
                fsf.Value.ice_writeMembers(ostr_);
            }
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            if (istr_.readOptional(1, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                FixedStruct tmpVal;
                tmpVal = new FixedStruct(istr_);
                fsf = tmpVal;
            }
            else
            {
                fsf = null;
            }
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public sealed partial class G1 : global::System.ICloneable, global::System.IEquatable<G1>
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string a = "";

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public G1()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public G1(string a)
        {
            this.a = a;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public G1(global::Ice.InputStream istr)
        {
            this.a = istr.readString();
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone() => MemberwiseClone();

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            var hash = new global::System.HashCode();
            hash.Add(this.a);
            return hash.ToHashCode();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object? other) => Equals(other as G1);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool Equals(G1? other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }
            return other is not null && 
                this.a == other.a;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator ==(G1? lhs, G1? rhs) => lhs is not null ? lhs.Equals(rhs) : rhs is null;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator !=(G1? lhs, G1? rhs) => !(lhs == rhs);

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.a);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, G1 v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static G1 ice_read(global::Ice.InputStream istr) => new(istr);

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial record struct G2
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public long a;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public G2(long a)
        {
            this.a = a;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public G2(global::Ice.InputStream istr)
        {
            this.a = istr.readLong();
            ice_initialize();
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeLong(this.a);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, G2 v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static G2 ice_read(global::Ice.InputStream istr) => new(istr);

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [Ice.SliceTypeId("::Test::G")]
    public partial class G : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public G1? gg1Opt;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public G2 gg2;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public G2? gg2Opt;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public G1 gg1;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public G(G1? gg1Opt, G2 gg2, G2? gg2Opt, G1 gg1)
        {
            this.gg1Opt = gg1Opt;
            this.gg2 = gg2;
            this.gg2Opt = gg2Opt;
            this.gg1 = gg1;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public G(G1 gg1)
        {
            this.gg1 = gg1;
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public G()
        {
            this.gg1 = null!;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::G";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            gg2.ice_writeMembers(ostr_);
            G1.ice_write(ostr_, gg1);
            if (gg2Opt is not null && ostr_.writeOptional(0, global::Ice.OptionalFormat.VSize))
            {
                ostr_.writeSize(8);
                gg2Opt.Value.ice_writeMembers(ostr_);
            }
            if (gg1Opt is not null && ostr_.writeOptional(1, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr_.startSize();
                G1.ice_write(ostr_, gg1Opt);
                ostr_.endSize(pos);
            }
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            gg2 = new G2(istr_);
            gg1 = new G1(istr_);
            if (istr_.readOptional(0, global::Ice.OptionalFormat.VSize))
            {
                istr_.skipSize();
                G2 tmpVal;
                tmpVal = new G2(istr_);
                gg2Opt = tmpVal;
            }
            else
            {
                gg2Opt = null;
            }
            if (istr_.readOptional(1, global::Ice.OptionalFormat.FSize))
            {
                istr_.skip(4);
                G1 tmpVal;
                tmpVal = new G1(istr_);
                gg1Opt = tmpVal;
            }
            else
            {
                gg1Opt = null;
            }
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Initial : global::Ice.Object, InitialOperations_
    {
    }
}

namespace Test
{
    public record struct Initial_OpByteResult(byte? returnValue, byte? p3);

    public record struct Initial_OpByteReqResult(byte? returnValue, byte? p3);

    public record struct Initial_OpBoolResult(bool? returnValue, bool? p3);

    public record struct Initial_OpBoolReqResult(bool? returnValue, bool? p3);

    public record struct Initial_OpShortResult(short? returnValue, short? p3);

    public record struct Initial_OpShortReqResult(short? returnValue, short? p3);

    public record struct Initial_OpIntResult(int? returnValue, int? p3);

    public record struct Initial_OpIntReqResult(int? returnValue, int? p3);

    public record struct Initial_OpLongResult(long? returnValue, long? p3);

    public record struct Initial_OpLongReqResult(long? returnValue, long? p3);

    public record struct Initial_OpFloatResult(float? returnValue, float? p3);

    public record struct Initial_OpFloatReqResult(float? returnValue, float? p3);

    public record struct Initial_OpDoubleResult(double? returnValue, double? p3);

    public record struct Initial_OpDoubleReqResult(double? returnValue, double? p3);

    public record struct Initial_OpStringResult(string? returnValue, string? p3);

    public record struct Initial_OpStringReqResult(string? returnValue, string? p3);

    public record struct Initial_OpMyEnumResult(MyEnum? returnValue, MyEnum? p3);

    public record struct Initial_OpMyEnumReqResult(MyEnum? returnValue, MyEnum? p3);

    public record struct Initial_OpSmallStructResult(SmallStruct? returnValue, SmallStruct? p3);

    public record struct Initial_OpSmallStructReqResult(SmallStruct? returnValue, SmallStruct? p3);

    public record struct Initial_OpFixedStructResult(FixedStruct? returnValue, FixedStruct? p3);

    public record struct Initial_OpFixedStructReqResult(FixedStruct? returnValue, FixedStruct? p3);

    public record struct Initial_OpVarStructResult(VarStruct? returnValue, VarStruct? p3);

    public record struct Initial_OpVarStructReqResult(VarStruct? returnValue, VarStruct? p3);

    public record struct Initial_OpMyInterfaceProxyResult(MyInterfacePrx? returnValue, MyInterfacePrx? p3);

    public record struct Initial_OpMyInterfaceProxyReqResult(MyInterfacePrx? returnValue, MyInterfacePrx? p3);

    public record struct Initial_OpOneOptionalResult(OneOptional? returnValue, OneOptional? p3);

    public record struct Initial_OpByteSeqResult(byte[]? returnValue, byte[]? p3);

    public record struct Initial_OpByteSeqReqResult(byte[]? returnValue, byte[]? p3);

    public record struct Initial_OpBoolSeqResult(bool[]? returnValue, bool[]? p3);

    public record struct Initial_OpBoolSeqReqResult(bool[]? returnValue, bool[]? p3);

    public record struct Initial_OpShortSeqResult(short[]? returnValue, short[]? p3);

    public record struct Initial_OpShortSeqReqResult(short[]? returnValue, short[]? p3);

    public record struct Initial_OpIntSeqResult(int[]? returnValue, int[]? p3);

    public record struct Initial_OpIntSeqReqResult(int[]? returnValue, int[]? p3);

    public record struct Initial_OpLongSeqResult(long[]? returnValue, long[]? p3);

    public record struct Initial_OpLongSeqReqResult(long[]? returnValue, long[]? p3);

    public record struct Initial_OpFloatSeqResult(float[]? returnValue, float[]? p3);

    public record struct Initial_OpFloatSeqReqResult(float[]? returnValue, float[]? p3);

    public record struct Initial_OpDoubleSeqResult(double[]? returnValue, double[]? p3);

    public record struct Initial_OpDoubleSeqReqResult(double[]? returnValue, double[]? p3);

    public record struct Initial_OpStringSeqResult(string[]? returnValue, string[]? p3);

    public record struct Initial_OpStringSeqReqResult(string[]? returnValue, string[]? p3);

    public record struct Initial_OpSmallStructSeqResult(SmallStruct[]? returnValue, SmallStruct[]? p3);

    public record struct Initial_OpSmallStructSeqReqResult(SmallStruct[]? returnValue, SmallStruct[]? p3);

    public record struct Initial_OpSmallStructListResult(SmallStruct[]? returnValue, SmallStruct[]? p3);

    public record struct Initial_OpSmallStructListReqResult(SmallStruct[]? returnValue, SmallStruct[]? p3);

    public record struct Initial_OpFixedStructSeqResult(FixedStruct[]? returnValue, FixedStruct[]? p3);

    public record struct Initial_OpFixedStructSeqReqResult(FixedStruct[]? returnValue, FixedStruct[]? p3);

    public record struct Initial_OpFixedStructListResult(FixedStruct[]? returnValue, FixedStruct[]? p3);

    public record struct Initial_OpFixedStructListReqResult(FixedStruct[]? returnValue, FixedStruct[]? p3);

    public record struct Initial_OpVarStructSeqResult(VarStruct[]? returnValue, VarStruct[]? p3);

    public record struct Initial_OpVarStructSeqReqResult(VarStruct[]? returnValue, VarStruct[]? p3);

    public record struct Initial_OpSerializableResult(byte[]? returnValue, byte[]? p3);

    public record struct Initial_OpSerializableReqResult(byte[]? returnValue, byte[]? p3);

    public record struct Initial_OpIntIntDictResult(global::System.Collections.Generic.Dictionary<int, int>? returnValue, global::System.Collections.Generic.Dictionary<int, int>? p3);

    public record struct Initial_OpIntIntDictReqResult(global::System.Collections.Generic.Dictionary<int, int>? returnValue, global::System.Collections.Generic.Dictionary<int, int>? p3);

    public record struct Initial_OpStringIntDictResult(global::System.Collections.Generic.Dictionary<string, int>? returnValue, global::System.Collections.Generic.Dictionary<string, int>? p3);

    public record struct Initial_OpStringIntDictReqResult(global::System.Collections.Generic.Dictionary<string, int>? returnValue, global::System.Collections.Generic.Dictionary<string, int>? p3);

    public record struct Initial_OpIntOneOptionalDictResult(global::System.Collections.Generic.Dictionary<int, OneOptional?>? returnValue, global::System.Collections.Generic.Dictionary<int, OneOptional?>? p3);

    public record struct Initial_OpIntOneOptionalDictReqResult(global::System.Collections.Generic.Dictionary<int, OneOptional?>? returnValue, global::System.Collections.Generic.Dictionary<int, OneOptional?>? p3);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public readonly record struct Initial_OpMStruct1MarshaledResult : global::Ice.MarshaledResult
    {
        public Initial_OpMStruct1MarshaledResult(SmallStruct? ret, global::Ice.Current current)
        {
            _ostr = global::Ice.Internal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
            if (ret is not null && _ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                _ostr.writeSize(1);
                ret.Value.ice_writeMembers(_ostr);
            }
            _ostr.endEncapsulation();
        }

        public global::Ice.OutputStream outputStream => _ostr;

        private readonly global::Ice.OutputStream _ostr;
    }

    public record struct Initial_OpMStruct2Result(SmallStruct? returnValue, SmallStruct? p2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public readonly record struct Initial_OpMStruct2MarshaledResult : global::Ice.MarshaledResult
    {
        public Initial_OpMStruct2MarshaledResult(SmallStruct? ret, SmallStruct? p2, global::Ice.Current current)
        {
            _ostr = global::Ice.Internal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
            if (ret is not null && _ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                _ostr.writeSize(1);
                ret.Value.ice_writeMembers(_ostr);
            }
            if (p2 is not null && _ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                _ostr.writeSize(1);
                p2.Value.ice_writeMembers(_ostr);
            }
            _ostr.endEncapsulation();
        }

        public global::Ice.OutputStream outputStream => _ostr;

        private readonly global::Ice.OutputStream _ostr;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public readonly record struct Initial_OpMSeq1MarshaledResult : global::Ice.MarshaledResult
    {
        public Initial_OpMSeq1MarshaledResult(string[]? ret, global::Ice.Current current)
        {
            _ostr = global::Ice.Internal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
            _ostr.writeStringSeq(1, ret);
            _ostr.endEncapsulation();
        }

        public global::Ice.OutputStream outputStream => _ostr;

        private readonly global::Ice.OutputStream _ostr;
    }

    public record struct Initial_OpMSeq2Result(string[]? returnValue, string[]? p2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public readonly record struct Initial_OpMSeq2MarshaledResult : global::Ice.MarshaledResult
    {
        public Initial_OpMSeq2MarshaledResult(string[]? ret, string[]? p2, global::Ice.Current current)
        {
            _ostr = global::Ice.Internal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
            _ostr.writeStringSeq(1, ret);
            _ostr.writeStringSeq(3, p2);
            _ostr.endEncapsulation();
        }

        public global::Ice.OutputStream outputStream => _ostr;

        private readonly global::Ice.OutputStream _ostr;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public readonly record struct Initial_OpMDict1MarshaledResult : global::Ice.MarshaledResult
    {
        public Initial_OpMDict1MarshaledResult(global::System.Collections.Generic.Dictionary<string, int>? ret, global::Ice.Current current)
        {
            _ostr = global::Ice.Internal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
            if (ret is not null && _ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
            {
                int pos = _ostr.startSize();
                StringIntDictHelper.write(_ostr, ret);
                _ostr.endSize(pos);
            }
            _ostr.endEncapsulation();
        }

        public global::Ice.OutputStream outputStream => _ostr;

        private readonly global::Ice.OutputStream _ostr;
    }

    public record struct Initial_OpMDict2Result(global::System.Collections.Generic.Dictionary<string, int>? returnValue, global::System.Collections.Generic.Dictionary<string, int>? p2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public readonly record struct Initial_OpMDict2MarshaledResult : global::Ice.MarshaledResult
    {
        public Initial_OpMDict2MarshaledResult(global::System.Collections.Generic.Dictionary<string, int>? ret, global::System.Collections.Generic.Dictionary<string, int>? p2, global::Ice.Current current)
        {
            _ostr = global::Ice.Internal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
            if (ret is not null && _ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
            {
                int pos = _ostr.startSize();
                StringIntDictHelper.write(_ostr, ret);
                _ostr.endSize(pos);
            }
            if (p2 is not null && _ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = _ostr.startSize();
                StringIntDictHelper.write(_ostr, p2);
                _ostr.endSize(pos);
            }
            _ostr.endEncapsulation();
        }

        public global::Ice.OutputStream outputStream => _ostr;

        private readonly global::Ice.OutputStream _ostr;
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface MyInterfacePrx : global::Ice.ObjectPrx
    {
        void op(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface InitialPrx : global::Ice.ObjectPrx
    {
        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::Ice.Value? pingPong(global::Ice.Value? o, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<global::Ice.Value?> pingPongAsync(global::Ice.Value? o, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void opOptionalException(int? a, string? b, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task opOptionalExceptionAsync(int? a, string? b, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void opDerivedException(int? a, string? b, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task opDerivedExceptionAsync(int? a, string? b, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void opRequiredException(int? a, string? b, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task opRequiredExceptionAsync(int? a, string? b, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte? opByte(byte? p1, out byte? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpByteResult> opByteAsync(byte? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte? opByteReq(byte? p1, out byte? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpByteReqResult> opByteReqAsync(byte? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool? opBool(bool? p1, out bool? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpBoolResult> opBoolAsync(bool? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool? opBoolReq(bool? p1, out bool? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpBoolReqResult> opBoolReqAsync(bool? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        short? opShort(short? p1, out short? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpShortResult> opShortAsync(short? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        short? opShortReq(short? p1, out short? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpShortReqResult> opShortReqAsync(short? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        int? opInt(int? p1, out int? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpIntResult> opIntAsync(int? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        int? opIntReq(int? p1, out int? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpIntReqResult> opIntReqAsync(int? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        long? opLong(long? p1, out long? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpLongResult> opLongAsync(long? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        long? opLongReq(long? p1, out long? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpLongReqResult> opLongReqAsync(long? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        float? opFloat(float? p1, out float? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpFloatResult> opFloatAsync(float? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        float? opFloatReq(float? p1, out float? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpFloatReqResult> opFloatReqAsync(float? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        double? opDouble(double? p1, out double? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpDoubleResult> opDoubleAsync(double? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        double? opDoubleReq(double? p1, out double? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpDoubleReqResult> opDoubleReqAsync(double? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string? opString(string? p1, out string? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpStringResult> opStringAsync(string? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string? opStringReq(string? p1, out string? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpStringReqResult> opStringReqAsync(string? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        MyEnum? opMyEnum(MyEnum? p1, out MyEnum? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpMyEnumResult> opMyEnumAsync(MyEnum? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        MyEnum? opMyEnumReq(MyEnum? p1, out MyEnum? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpMyEnumReqResult> opMyEnumReqAsync(MyEnum? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        SmallStruct? opSmallStruct(SmallStruct? p1, out SmallStruct? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpSmallStructResult> opSmallStructAsync(SmallStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        SmallStruct? opSmallStructReq(SmallStruct? p1, out SmallStruct? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpSmallStructReqResult> opSmallStructReqAsync(SmallStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        FixedStruct? opFixedStruct(FixedStruct? p1, out FixedStruct? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpFixedStructResult> opFixedStructAsync(FixedStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        FixedStruct? opFixedStructReq(FixedStruct? p1, out FixedStruct? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpFixedStructReqResult> opFixedStructReqAsync(FixedStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        VarStruct? opVarStruct(VarStruct? p1, out VarStruct? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpVarStructResult> opVarStructAsync(VarStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        VarStruct? opVarStructReq(VarStruct? p1, out VarStruct? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpVarStructReqResult> opVarStructReqAsync(VarStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        MyInterfacePrx? opMyInterfaceProxy(MyInterfacePrx? p1, out MyInterfacePrx? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpMyInterfaceProxyResult> opMyInterfaceProxyAsync(MyInterfacePrx? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        MyInterfacePrx? opMyInterfaceProxyReq(MyInterfacePrx? p1, out MyInterfacePrx? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpMyInterfaceProxyReqResult> opMyInterfaceProxyReqAsync(MyInterfacePrx? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        OneOptional? opOneOptional(OneOptional? p1, out OneOptional? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpOneOptionalResult> opOneOptionalAsync(OneOptional? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[]? opByteSeq(byte[]? p1, out byte[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpByteSeqResult> opByteSeqAsync(byte[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[]? opByteSeqReq(byte[]? p1, out byte[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpByteSeqReqResult> opByteSeqReqAsync(byte[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[]? opBoolSeq(bool[]? p1, out bool[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpBoolSeqResult> opBoolSeqAsync(bool[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool[]? opBoolSeqReq(bool[]? p1, out bool[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpBoolSeqReqResult> opBoolSeqReqAsync(bool[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        short[]? opShortSeq(short[]? p1, out short[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpShortSeqResult> opShortSeqAsync(short[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        short[]? opShortSeqReq(short[]? p1, out short[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpShortSeqReqResult> opShortSeqReqAsync(short[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        int[]? opIntSeq(int[]? p1, out int[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpIntSeqResult> opIntSeqAsync(int[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        int[]? opIntSeqReq(int[]? p1, out int[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpIntSeqReqResult> opIntSeqReqAsync(int[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        long[]? opLongSeq(long[]? p1, out long[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpLongSeqResult> opLongSeqAsync(long[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        long[]? opLongSeqReq(long[]? p1, out long[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpLongSeqReqResult> opLongSeqReqAsync(long[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        float[]? opFloatSeq(float[]? p1, out float[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpFloatSeqResult> opFloatSeqAsync(float[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        float[]? opFloatSeqReq(float[]? p1, out float[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpFloatSeqReqResult> opFloatSeqReqAsync(float[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        double[]? opDoubleSeq(double[]? p1, out double[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpDoubleSeqResult> opDoubleSeqAsync(double[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        double[]? opDoubleSeqReq(double[]? p1, out double[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpDoubleSeqReqResult> opDoubleSeqReqAsync(double[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[]? opStringSeq(string[]? p1, out string[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpStringSeqResult> opStringSeqAsync(string[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[]? opStringSeqReq(string[]? p1, out string[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpStringSeqReqResult> opStringSeqReqAsync(string[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        SmallStruct[]? opSmallStructSeq(SmallStruct[]? p1, out SmallStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpSmallStructSeqResult> opSmallStructSeqAsync(SmallStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        SmallStruct[]? opSmallStructSeqReq(SmallStruct[]? p1, out SmallStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpSmallStructSeqReqResult> opSmallStructSeqReqAsync(SmallStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        SmallStruct[]? opSmallStructList(SmallStruct[]? p1, out SmallStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpSmallStructListResult> opSmallStructListAsync(SmallStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        SmallStruct[]? opSmallStructListReq(SmallStruct[]? p1, out SmallStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpSmallStructListReqResult> opSmallStructListReqAsync(SmallStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        FixedStruct[]? opFixedStructSeq(FixedStruct[]? p1, out FixedStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpFixedStructSeqResult> opFixedStructSeqAsync(FixedStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        FixedStruct[]? opFixedStructSeqReq(FixedStruct[]? p1, out FixedStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpFixedStructSeqReqResult> opFixedStructSeqReqAsync(FixedStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        FixedStruct[]? opFixedStructList(FixedStruct[]? p1, out FixedStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpFixedStructListResult> opFixedStructListAsync(FixedStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        FixedStruct[]? opFixedStructListReq(FixedStruct[]? p1, out FixedStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpFixedStructListReqResult> opFixedStructListReqAsync(FixedStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        VarStruct[]? opVarStructSeq(VarStruct[]? p1, out VarStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpVarStructSeqResult> opVarStructSeqAsync(VarStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        VarStruct[]? opVarStructSeqReq(VarStruct[]? p1, out VarStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpVarStructSeqReqResult> opVarStructSeqReqAsync(VarStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[]? opSerializable(byte[]? p1, out byte[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpSerializableResult> opSerializableAsync(byte[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        byte[]? opSerializableReq(byte[]? p1, out byte[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpSerializableReqResult> opSerializableReqAsync(byte[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<int, int>? opIntIntDict(global::System.Collections.Generic.Dictionary<int, int>? p1, out global::System.Collections.Generic.Dictionary<int, int>? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpIntIntDictResult> opIntIntDictAsync(global::System.Collections.Generic.Dictionary<int, int>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<int, int>? opIntIntDictReq(global::System.Collections.Generic.Dictionary<int, int>? p1, out global::System.Collections.Generic.Dictionary<int, int>? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpIntIntDictReqResult> opIntIntDictReqAsync(global::System.Collections.Generic.Dictionary<int, int>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, int>? opStringIntDict(global::System.Collections.Generic.Dictionary<string, int>? p1, out global::System.Collections.Generic.Dictionary<string, int>? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpStringIntDictResult> opStringIntDictAsync(global::System.Collections.Generic.Dictionary<string, int>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, int>? opStringIntDictReq(global::System.Collections.Generic.Dictionary<string, int>? p1, out global::System.Collections.Generic.Dictionary<string, int>? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpStringIntDictReqResult> opStringIntDictReqAsync(global::System.Collections.Generic.Dictionary<string, int>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<int, OneOptional?>? opIntOneOptionalDict(global::System.Collections.Generic.Dictionary<int, OneOptional?>? p1, out global::System.Collections.Generic.Dictionary<int, OneOptional?>? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpIntOneOptionalDictResult> opIntOneOptionalDictAsync(global::System.Collections.Generic.Dictionary<int, OneOptional?>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<int, OneOptional?>? opIntOneOptionalDictReq(global::System.Collections.Generic.Dictionary<int, OneOptional?>? p1, out global::System.Collections.Generic.Dictionary<int, OneOptional?>? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpIntOneOptionalDictReqResult> opIntOneOptionalDictReqAsync(global::System.Collections.Generic.Dictionary<int, OneOptional?>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void opClassAndUnknownOptional(A? p, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task opClassAndUnknownOptionalAsync(A? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        G? opG(G? g, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<G?> opGAsync(G? g, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void opVoid(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task opVoidAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        SmallStruct? opMStruct1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<SmallStruct?> opMStruct1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        SmallStruct? opMStruct2(SmallStruct? p1, out SmallStruct? p2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpMStruct2Result> opMStruct2Async(SmallStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[]? opMSeq1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<string[]?> opMSeq1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        string[]? opMSeq2(string[]? p1, out string[]? p2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpMSeq2Result> opMSeq2Async(string[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, int>? opMDict1(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, int>?> opMDict1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, int>? opMDict2(global::System.Collections.Generic.Dictionary<string, int>? p1, out global::System.Collections.Generic.Dictionary<string, int>? p2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<Initial_OpMDict2Result> opMDict2Async(global::System.Collections.Generic.Dictionary<string, int>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool supportsRequiredParams(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<bool> supportsRequiredParamsAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool supportsJavaSerializable(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<bool> supportsJavaSerializableAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        bool supportsCsharpSerializable(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<bool> supportsCsharpSerializableAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface MyInterfaceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void op(global::Ice.Current? current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface InitialOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void shutdown(global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Ice.Value? pingPong(global::Ice.Value? o, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void opOptionalException(int? a, string? b, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void opDerivedException(int? a, string? b, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void opRequiredException(int? a, string? b, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte? opByte(byte? p1, out byte? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte? opByteReq(byte? p1, out byte? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool? opBool(bool? p1, out bool? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool? opBoolReq(bool? p1, out bool? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        short? opShort(short? p1, out short? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        short? opShortReq(short? p1, out short? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        int? opInt(int? p1, out int? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        int? opIntReq(int? p1, out int? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        long? opLong(long? p1, out long? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        long? opLongReq(long? p1, out long? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        float? opFloat(float? p1, out float? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        float? opFloatReq(float? p1, out float? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        double? opDouble(double? p1, out double? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        double? opDoubleReq(double? p1, out double? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string? opString(string? p1, out string? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string? opStringReq(string? p1, out string? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyEnum? opMyEnum(MyEnum? p1, out MyEnum? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyEnum? opMyEnumReq(MyEnum? p1, out MyEnum? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        SmallStruct? opSmallStruct(SmallStruct? p1, out SmallStruct? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        SmallStruct? opSmallStructReq(SmallStruct? p1, out SmallStruct? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        FixedStruct? opFixedStruct(FixedStruct? p1, out FixedStruct? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        FixedStruct? opFixedStructReq(FixedStruct? p1, out FixedStruct? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        VarStruct? opVarStruct(VarStruct? p1, out VarStruct? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        VarStruct? opVarStructReq(VarStruct? p1, out VarStruct? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyInterfacePrx? opMyInterfaceProxy(MyInterfacePrx? p1, out MyInterfacePrx? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        MyInterfacePrx? opMyInterfaceProxyReq(MyInterfacePrx? p1, out MyInterfacePrx? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        OneOptional? opOneOptional(OneOptional? p1, out OneOptional? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte[]? opByteSeq(byte[]? p1, out byte[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte[]? opByteSeqReq(byte[]? p1, out byte[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool[]? opBoolSeq(bool[]? p1, out bool[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool[]? opBoolSeqReq(bool[]? p1, out bool[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        short[]? opShortSeq(short[]? p1, out short[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        short[]? opShortSeqReq(short[]? p1, out short[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        int[]? opIntSeq(int[]? p1, out int[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        int[]? opIntSeqReq(int[]? p1, out int[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        long[]? opLongSeq(long[]? p1, out long[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        long[]? opLongSeqReq(long[]? p1, out long[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        float[]? opFloatSeq(float[]? p1, out float[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        float[]? opFloatSeqReq(float[]? p1, out float[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        double[]? opDoubleSeq(double[]? p1, out double[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        double[]? opDoubleSeqReq(double[]? p1, out double[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[]? opStringSeq(string[]? p1, out string[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        string[]? opStringSeqReq(string[]? p1, out string[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        SmallStruct[]? opSmallStructSeq(SmallStruct[]? p1, out SmallStruct[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        SmallStruct[]? opSmallStructSeqReq(SmallStruct[]? p1, out SmallStruct[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        SmallStruct[]? opSmallStructList(SmallStruct[]? p1, out SmallStruct[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        SmallStruct[]? opSmallStructListReq(SmallStruct[]? p1, out SmallStruct[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        FixedStruct[]? opFixedStructSeq(FixedStruct[]? p1, out FixedStruct[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        FixedStruct[]? opFixedStructSeqReq(FixedStruct[]? p1, out FixedStruct[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        FixedStruct[]? opFixedStructList(FixedStruct[]? p1, out FixedStruct[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        FixedStruct[]? opFixedStructListReq(FixedStruct[]? p1, out FixedStruct[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        VarStruct[]? opVarStructSeq(VarStruct[]? p1, out VarStruct[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        VarStruct[]? opVarStructSeqReq(VarStruct[]? p1, out VarStruct[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte[]? opSerializable(byte[]? p1, out byte[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        byte[]? opSerializableReq(byte[]? p1, out byte[]? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<int, int>? opIntIntDict(global::System.Collections.Generic.Dictionary<int, int>? p1, out global::System.Collections.Generic.Dictionary<int, int>? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<int, int>? opIntIntDictReq(global::System.Collections.Generic.Dictionary<int, int>? p1, out global::System.Collections.Generic.Dictionary<int, int>? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, int>? opStringIntDict(global::System.Collections.Generic.Dictionary<string, int>? p1, out global::System.Collections.Generic.Dictionary<string, int>? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, int>? opStringIntDictReq(global::System.Collections.Generic.Dictionary<string, int>? p1, out global::System.Collections.Generic.Dictionary<string, int>? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<int, OneOptional?>? opIntOneOptionalDict(global::System.Collections.Generic.Dictionary<int, OneOptional?>? p1, out global::System.Collections.Generic.Dictionary<int, OneOptional?>? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<int, OneOptional?>? opIntOneOptionalDictReq(global::System.Collections.Generic.Dictionary<int, OneOptional?>? p1, out global::System.Collections.Generic.Dictionary<int, OneOptional?>? p3, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void opClassAndUnknownOptional(A? p, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        G? opG(G? g, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void opVoid(global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        Initial_OpMStruct1MarshaledResult opMStruct1(global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        Initial_OpMStruct2MarshaledResult opMStruct2(SmallStruct? p1, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        Initial_OpMSeq1MarshaledResult opMSeq1(global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        Initial_OpMSeq2MarshaledResult opMSeq2(string[]? p1, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        Initial_OpMDict1MarshaledResult opMDict1(global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        Initial_OpMDict2MarshaledResult opMDict2(global::System.Collections.Generic.Dictionary<string, int>? p1, global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool supportsRequiredParams(global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool supportsJavaSerializable(global::Ice.Current? current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool supportsCsharpSerializable(global::Ice.Current? current = null);
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, MyInterfacePrx
    {
        public MyInterfacePrxHelper()
        {
        }

        #region Synchronous operations

        public void op(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_op(context, synchronous, completed);
            return completed.Task;
        }

        private const string _op_name = "op";

        private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _op_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Factory operations

        public static MyInterfacePrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static MyInterfacePrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                MyInterfacePrxHelper prx = new MyInterfacePrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static MyInterfacePrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            global::Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    MyInterfacePrxHelper prx = new MyInterfacePrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyInterfacePrx? uncheckedCast(global::Ice.ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new MyInterfacePrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static MyInterfacePrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx? bb = b.ice_facet(f);
                var prx = new MyInterfacePrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::MyInterface"
        };

        public static string ice_staticId() => "::Test::MyInterface";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, MyInterfacePrx? v)
        {
            ostr.writeProxy(v);
        }

        public static MyInterfacePrx? read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new MyInterfacePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ByteSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BoolSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, bool[] v)
        {
            ostr.writeBoolSeq(v);
        }

        public static bool[] read(global::Ice.InputStream istr)
        {
            bool[] v;
            v = istr.readBoolSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ShortSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, short[] v)
        {
            ostr.writeShortSeq(v);
        }

        public static short[] read(global::Ice.InputStream istr)
        {
            short[] v;
            v = istr.readShortSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, int[] v)
        {
            ostr.writeIntSeq(v);
        }

        public static int[] read(global::Ice.InputStream istr)
        {
            int[] v;
            v = istr.readIntSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LongSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, long[] v)
        {
            ostr.writeLongSeq(v);
        }

        public static long[] read(global::Ice.InputStream istr)
        {
            long[] v;
            v = istr.readLongSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FloatSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, float[] v)
        {
            ostr.writeFloatSeq(v);
        }

        public static float[] read(global::Ice.InputStream istr)
        {
            float[] v;
            v = istr.readFloatSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DoubleSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, double[] v)
        {
            ostr.writeDoubleSeq(v);
        }

        public static double[] read(global::Ice.InputStream istr)
        {
            double[] v;
            v = istr.readDoubleSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(global::Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyEnumSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, MyEnum[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeEnum((int)v[ix], 0);
                }
            }
        }

        public static MyEnum[] read(global::Ice.InputStream istr)
        {
            MyEnum[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new MyEnum[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = (MyEnum)istr.readEnum(0);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class SmallStructSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, SmallStruct[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static SmallStruct[] read(global::Ice.InputStream istr)
        {
            SmallStruct[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new SmallStruct[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new SmallStruct(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class SmallStructListHelper
    {
        public static void write(global::Ice.OutputStream ostr, SmallStruct[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static SmallStruct[] read(global::Ice.InputStream istr)
        {
            SmallStruct[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new SmallStruct[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new SmallStruct(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FixedStructSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, FixedStruct[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static FixedStruct[] read(global::Ice.InputStream istr)
        {
            FixedStruct[] v;
            {
                int szx = istr.readAndCheckSeqSize(4);
                v = new FixedStruct[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new FixedStruct(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class FixedStructListHelper
    {
        public static void write(global::Ice.OutputStream ostr, FixedStruct[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static FixedStruct[] read(global::Ice.InputStream istr)
        {
            FixedStruct[] v;
            {
                int szx = istr.readAndCheckSeqSize(4);
                v = new FixedStruct[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new FixedStruct(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class VarStructSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, VarStruct[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static VarStruct[] read(global::Ice.InputStream istr)
        {
            VarStruct[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new VarStruct[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new VarStruct(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class OneOptionalSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, OneOptional?[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static OneOptional?[] read(global::Ice.InputStream istr)
        {
            OneOptional?[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new OneOptional?[szx];
                for (int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::Ice.Internal.Patcher.arrayReadValue<OneOptional>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class MyInterfacePrxSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, MyInterfacePrx?[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    MyInterfacePrxHelper.write(ostr, v[ix]);
                }
            }
        }

        public static MyInterfacePrx?[] read(global::Ice.InputStream istr)
        {
            MyInterfacePrx?[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new MyInterfacePrx?[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = MyInterfacePrxHelper.read(istr);
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class SerializableHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntIntDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, int> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, int> e in v)
                {
                    ostr.writeInt(e.Key);
                    ostr.writeInt(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, int> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, int> r = new global::System.Collections.Generic.Dictionary<int, int>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                int v;
                v = istr.readInt();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class StringIntDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, int> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, int> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeInt(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, int> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, int> r = new global::System.Collections.Generic.Dictionary<string, int>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                int v;
                v = istr.readInt();
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntEnumDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, MyEnum> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, MyEnum> e in v)
                {
                    ostr.writeInt(e.Key);
                    ostr.writeEnum((int)e.Value, 0);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, MyEnum> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, MyEnum> r = new global::System.Collections.Generic.Dictionary<int, MyEnum>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                MyEnum v;
                v = (MyEnum)istr.readEnum(0);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntFixedStructDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, FixedStruct> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, FixedStruct> e in v)
                {
                    ostr.writeInt(e.Key);
                    e.Value.ice_writeMembers(ostr);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, FixedStruct> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, FixedStruct> r = new global::System.Collections.Generic.Dictionary<int, FixedStruct>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                FixedStruct v;
                v = new FixedStruct(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntVarStructDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, VarStruct> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, VarStruct> e in v)
                {
                    ostr.writeInt(e.Key);
                    VarStruct.ice_write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, VarStruct> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, VarStruct> r = new global::System.Collections.Generic.Dictionary<int, VarStruct>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                VarStruct v;
                v = new VarStruct(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntOneOptionalDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, OneOptional?> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, OneOptional?> e in v)
                {
                    ostr.writeInt(e.Key);
                    ostr.writeValue(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, OneOptional?> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, OneOptional?> r = new global::System.Collections.Generic.Dictionary<int, OneOptional?>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                istr.readValue((OneOptional? v) => { r[k] = v; });
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IntMyInterfacePrxDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, MyInterfacePrx?> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, MyInterfacePrx?> e in v)
                {
                    ostr.writeInt(e.Key);
                    MyInterfacePrxHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, MyInterfacePrx?> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, MyInterfacePrx?> r = new global::System.Collections.Generic.Dictionary<int, MyInterfacePrx?>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                MyInterfacePrx? v;
                v = MyInterfacePrxHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class InitialPrxHelper : global::Ice.ObjectPrxHelperBase, InitialPrx
    {
        public InitialPrxHelper()
        {
        }

        #region Synchronous operations

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Ice.Value? pingPong(global::Ice.Value? o, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_pingPongAsync(o, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opOptionalException(int? a, string? b, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opOptionalExceptionAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opDerivedException(int? a, string? b, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opDerivedExceptionAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opRequiredException(int? a, string? b, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opRequiredExceptionAsync(a, b, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte? opByte(byte? p1, out byte? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte? opByteReq(byte? p1, out byte? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool? opBool(bool? p1, out bool? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool? opBoolReq(bool? p1, out bool? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short? opShort(short? p1, out short? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short? opShortReq(short? p1, out short? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int? opInt(int? p1, out int? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int? opIntReq(int? p1, out int? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long? opLong(long? p1, out long? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long? opLongReq(long? p1, out long? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public float? opFloat(float? p1, out float? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public float? opFloatReq(float? p1, out float? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double? opDouble(double? p1, out double? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opDoubleAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double? opDoubleReq(double? p1, out double? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opDoubleReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string? opString(string? p1, out string? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string? opStringReq(string? p1, out string? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public MyEnum? opMyEnum(MyEnum? p1, out MyEnum? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public MyEnum? opMyEnumReq(MyEnum? p1, out MyEnum? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyEnumReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public SmallStruct? opSmallStruct(SmallStruct? p1, out SmallStruct? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opSmallStructAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public SmallStruct? opSmallStructReq(SmallStruct? p1, out SmallStruct? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opSmallStructReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public FixedStruct? opFixedStruct(FixedStruct? p1, out FixedStruct? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFixedStructAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public FixedStruct? opFixedStructReq(FixedStruct? p1, out FixedStruct? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFixedStructReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public VarStruct? opVarStruct(VarStruct? p1, out VarStruct? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opVarStructAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public VarStruct? opVarStructReq(VarStruct? p1, out VarStruct? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opVarStructReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public MyInterfacePrx? opMyInterfaceProxy(MyInterfacePrx? p1, out MyInterfacePrx? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyInterfaceProxyAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public MyInterfacePrx? opMyInterfaceProxyReq(MyInterfacePrx? p1, out MyInterfacePrx? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMyInterfaceProxyReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public OneOptional? opOneOptional(OneOptional? p1, out OneOptional? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opOneOptionalAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[]? opByteSeq(byte[]? p1, out byte[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[]? opByteSeqReq(byte[]? p1, out byte[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opByteSeqReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[]? opBoolSeq(bool[]? p1, out bool[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool[]? opBoolSeqReq(bool[]? p1, out bool[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opBoolSeqReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short[]? opShortSeq(short[]? p1, out short[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public short[]? opShortSeqReq(short[]? p1, out short[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opShortSeqReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int[]? opIntSeq(int[]? p1, out int[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public int[]? opIntSeqReq(int[]? p1, out int[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntSeqReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long[]? opLongSeq(long[]? p1, out long[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public long[]? opLongSeqReq(long[]? p1, out long[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opLongSeqReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public float[]? opFloatSeq(float[]? p1, out float[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public float[]? opFloatSeqReq(float[]? p1, out float[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFloatSeqReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double[]? opDoubleSeq(double[]? p1, out double[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opDoubleSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public double[]? opDoubleSeqReq(double[]? p1, out double[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opDoubleSeqReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[]? opStringSeq(string[]? p1, out string[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[]? opStringSeqReq(string[]? p1, out string[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringSeqReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public SmallStruct[]? opSmallStructSeq(SmallStruct[]? p1, out SmallStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opSmallStructSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public SmallStruct[]? opSmallStructSeqReq(SmallStruct[]? p1, out SmallStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opSmallStructSeqReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public SmallStruct[]? opSmallStructList(SmallStruct[]? p1, out SmallStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opSmallStructListAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public SmallStruct[]? opSmallStructListReq(SmallStruct[]? p1, out SmallStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opSmallStructListReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public FixedStruct[]? opFixedStructSeq(FixedStruct[]? p1, out FixedStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFixedStructSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public FixedStruct[]? opFixedStructSeqReq(FixedStruct[]? p1, out FixedStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFixedStructSeqReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public FixedStruct[]? opFixedStructList(FixedStruct[]? p1, out FixedStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFixedStructListAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public FixedStruct[]? opFixedStructListReq(FixedStruct[]? p1, out FixedStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opFixedStructListReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public VarStruct[]? opVarStructSeq(VarStruct[]? p1, out VarStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opVarStructSeqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public VarStruct[]? opVarStructSeqReq(VarStruct[]? p1, out VarStruct[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opVarStructSeqReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[]? opSerializable(byte[]? p1, out byte[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opSerializableAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public byte[]? opSerializableReq(byte[]? p1, out byte[]? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opSerializableReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, int>? opIntIntDict(global::System.Collections.Generic.Dictionary<int, int>? p1, out global::System.Collections.Generic.Dictionary<int, int>? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntIntDictAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, int>? opIntIntDictReq(global::System.Collections.Generic.Dictionary<int, int>? p1, out global::System.Collections.Generic.Dictionary<int, int>? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntIntDictReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, int>? opStringIntDict(global::System.Collections.Generic.Dictionary<string, int>? p1, out global::System.Collections.Generic.Dictionary<string, int>? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringIntDictAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, int>? opStringIntDictReq(global::System.Collections.Generic.Dictionary<string, int>? p1, out global::System.Collections.Generic.Dictionary<string, int>? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opStringIntDictReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, OneOptional?>? opIntOneOptionalDict(global::System.Collections.Generic.Dictionary<int, OneOptional?>? p1, out global::System.Collections.Generic.Dictionary<int, OneOptional?>? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntOneOptionalDictAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, OneOptional?>? opIntOneOptionalDictReq(global::System.Collections.Generic.Dictionary<int, OneOptional?>? p1, out global::System.Collections.Generic.Dictionary<int, OneOptional?>? p3, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opIntOneOptionalDictReqAsync(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p3 = result_.p3;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opClassAndUnknownOptional(A? p, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opClassAndUnknownOptionalAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public G? opG(G? g, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opGAsync(g, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void opVoid(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_opVoidAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public SmallStruct? opMStruct1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMStruct1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public SmallStruct? opMStruct2(SmallStruct? p1, out SmallStruct? p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMStruct2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[]? opMSeq1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMSeq1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public string[]? opMSeq2(string[]? p1, out string[]? p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMSeq2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, int>? opMDict1(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opMDict1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, int>? opMDict2(global::System.Collections.Generic.Dictionary<string, int>? p1, out global::System.Collections.Generic.Dictionary<string, int>? p2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opMDict2Async(p1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool supportsRequiredParams(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_supportsRequiredParamsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool supportsJavaSerializable(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_supportsJavaSerializableAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public bool supportsCsharpSerializable(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_supportsCsharpSerializableAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<global::Ice.Value?> pingPongAsync(global::Ice.Value? o, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_pingPongAsync(o, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.Value?> _iceI_pingPongAsync(global::Ice.Value? iceP_o, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_pingPong_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<global::Ice.Value?>(progress, cancel);
            _iceI_pingPong(iceP_o, context, synchronous, completed);
            return completed.Task;
        }

        private const string _pingPong_name = "pingPong";

        private void _iceI_pingPong(global::Ice.Value? iceP_o, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.Value?>(completed);
            outAsync.invoke(
                _pingPong_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_o);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.Value? ret = null;
                    istr.readValue((global::Ice.Value? v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task opOptionalExceptionAsync(int? a, string? b, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOptionalExceptionAsync(a, b, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opOptionalExceptionAsync(int? iceP_a, string? iceP_b, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOptionalException_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opOptionalException(iceP_a, iceP_b, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOptionalException_name = "opOptionalException";

        private void _iceI_opOptionalException(int? iceP_a, string? iceP_b, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opOptionalException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(1, iceP_a);
                    ostr.writeString(2, iceP_b);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(OptionalException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task opDerivedExceptionAsync(int? a, string? b, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDerivedExceptionAsync(a, b, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opDerivedExceptionAsync(int? iceP_a, string? iceP_b, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDerivedException_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opDerivedException(iceP_a, iceP_b, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDerivedException_name = "opDerivedException";

        private void _iceI_opDerivedException(int? iceP_a, string? iceP_b, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opDerivedException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(1, iceP_a);
                    ostr.writeString(2, iceP_b);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(OptionalException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task opRequiredExceptionAsync(int? a, string? b, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opRequiredExceptionAsync(a, b, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opRequiredExceptionAsync(int? iceP_a, string? iceP_b, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opRequiredException_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opRequiredException(iceP_a, iceP_b, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opRequiredException_name = "opRequiredException";

        private void _iceI_opRequiredException(int? iceP_a, string? iceP_b, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opRequiredException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(1, iceP_a);
                    ostr.writeString(2, iceP_b);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(OptionalException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpByteResult> opByteAsync(byte? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpByteResult> _iceI_opByteAsync(byte? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByte_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpByteResult>(progress, cancel);
            _iceI_opByte(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByte_name = "opByte";

        private void _iceI_opByte(byte? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpByteResult>(completed);
            outAsync.invoke(
                _opByte_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeByte(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpByteResult();
                    {
                        var tmp = istr.readByte(1);
                        ret.returnValue = tmp;
                    }
                    {
                        var tmp = istr.readByte(3);
                        ret.p3 = tmp;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpByteReqResult> opByteReqAsync(byte? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpByteReqResult> _iceI_opByteReqAsync(byte? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpByteReqResult>(progress, cancel);
            _iceI_opByteReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteReq_name = "opByteReq";

        private void _iceI_opByteReq(byte? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpByteReqResult>(completed);
            outAsync.invoke(
                _opByteReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeByte(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpByteReqResult();
                    {
                        var tmp = istr.readByte(1);
                        ret.returnValue = tmp;
                    }
                    {
                        var tmp = istr.readByte(3);
                        ret.p3 = tmp;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpBoolResult> opBoolAsync(bool? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpBoolResult> _iceI_opBoolAsync(bool? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBool_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpBoolResult>(progress, cancel);
            _iceI_opBool(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBool_name = "opBool";

        private void _iceI_opBool(bool? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpBoolResult>(completed);
            outAsync.invoke(
                _opBool_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpBoolResult();
                    {
                        var tmp = istr.readBool(1);
                        ret.returnValue = tmp;
                    }
                    {
                        var tmp = istr.readBool(3);
                        ret.p3 = tmp;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpBoolReqResult> opBoolReqAsync(bool? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpBoolReqResult> _iceI_opBoolReqAsync(bool? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpBoolReqResult>(progress, cancel);
            _iceI_opBoolReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolReq_name = "opBoolReq";

        private void _iceI_opBoolReq(bool? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpBoolReqResult>(completed);
            outAsync.invoke(
                _opBoolReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBool(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpBoolReqResult();
                    {
                        var tmp = istr.readBool(1);
                        ret.returnValue = tmp;
                    }
                    {
                        var tmp = istr.readBool(3);
                        ret.p3 = tmp;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpShortResult> opShortAsync(short? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpShortResult> _iceI_opShortAsync(short? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShort_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpShortResult>(progress, cancel);
            _iceI_opShort(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShort_name = "opShort";

        private void _iceI_opShort(short? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpShortResult>(completed);
            outAsync.invoke(
                _opShort_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeShort(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpShortResult();
                    ret.returnValue = istr.readShort(1);
                    ret.p3 = istr.readShort(3);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpShortReqResult> opShortReqAsync(short? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpShortReqResult> _iceI_opShortReqAsync(short? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpShortReqResult>(progress, cancel);
            _iceI_opShortReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortReq_name = "opShortReq";

        private void _iceI_opShortReq(short? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpShortReqResult>(completed);
            outAsync.invoke(
                _opShortReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeShort(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpShortReqResult();
                    ret.returnValue = istr.readShort(1);
                    ret.p3 = istr.readShort(3);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpIntResult> opIntAsync(int? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpIntResult> _iceI_opIntAsync(int? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opInt_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpIntResult>(progress, cancel);
            _iceI_opInt(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opInt_name = "opInt";

        private void _iceI_opInt(int? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpIntResult>(completed);
            outAsync.invoke(
                _opInt_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpIntResult();
                    ret.returnValue = istr.readInt(1);
                    ret.p3 = istr.readInt(3);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpIntReqResult> opIntReqAsync(int? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpIntReqResult> _iceI_opIntReqAsync(int? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpIntReqResult>(progress, cancel);
            _iceI_opIntReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntReq_name = "opIntReq";

        private void _iceI_opIntReq(int? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpIntReqResult>(completed);
            outAsync.invoke(
                _opIntReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpIntReqResult();
                    ret.returnValue = istr.readInt(1);
                    ret.p3 = istr.readInt(3);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpLongResult> opLongAsync(long? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpLongResult> _iceI_opLongAsync(long? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLong_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpLongResult>(progress, cancel);
            _iceI_opLong(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLong_name = "opLong";

        private void _iceI_opLong(long? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpLongResult>(completed);
            outAsync.invoke(
                _opLong_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(1, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpLongResult();
                    ret.p3 = istr.readLong(2);
                    ret.returnValue = istr.readLong(3);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpLongReqResult> opLongReqAsync(long? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpLongReqResult> _iceI_opLongReqAsync(long? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpLongReqResult>(progress, cancel);
            _iceI_opLongReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongReq_name = "opLongReq";

        private void _iceI_opLongReq(long? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpLongReqResult>(completed);
            outAsync.invoke(
                _opLongReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeLong(1, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpLongReqResult();
                    ret.p3 = istr.readLong(2);
                    ret.returnValue = istr.readLong(3);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpFloatResult> opFloatAsync(float? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpFloatResult> _iceI_opFloatAsync(float? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloat_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpFloatResult>(progress, cancel);
            _iceI_opFloat(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloat_name = "opFloat";

        private void _iceI_opFloat(float? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpFloatResult>(completed);
            outAsync.invoke(
                _opFloat_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpFloatResult();
                    ret.returnValue = istr.readFloat(1);
                    ret.p3 = istr.readFloat(3);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpFloatReqResult> opFloatReqAsync(float? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpFloatReqResult> _iceI_opFloatReqAsync(float? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpFloatReqResult>(progress, cancel);
            _iceI_opFloatReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatReq_name = "opFloatReq";

        private void _iceI_opFloatReq(float? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpFloatReqResult>(completed);
            outAsync.invoke(
                _opFloatReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpFloatReqResult();
                    ret.returnValue = istr.readFloat(1);
                    ret.p3 = istr.readFloat(3);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpDoubleResult> opDoubleAsync(double? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDoubleAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpDoubleResult> _iceI_opDoubleAsync(double? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDouble_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpDoubleResult>(progress, cancel);
            _iceI_opDouble(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDouble_name = "opDouble";

        private void _iceI_opDouble(double? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpDoubleResult>(completed);
            outAsync.invoke(
                _opDouble_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeDouble(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpDoubleResult();
                    ret.returnValue = istr.readDouble(1);
                    ret.p3 = istr.readDouble(3);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpDoubleReqResult> opDoubleReqAsync(double? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDoubleReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpDoubleReqResult> _iceI_opDoubleReqAsync(double? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDoubleReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpDoubleReqResult>(progress, cancel);
            _iceI_opDoubleReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDoubleReq_name = "opDoubleReq";

        private void _iceI_opDoubleReq(double? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpDoubleReqResult>(completed);
            outAsync.invoke(
                _opDoubleReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeDouble(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpDoubleReqResult();
                    ret.returnValue = istr.readDouble(1);
                    ret.p3 = istr.readDouble(3);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpStringResult> opStringAsync(string? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpStringResult> _iceI_opStringAsync(string? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opString_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpStringResult>(progress, cancel);
            _iceI_opString(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opString_name = "opString";

        private void _iceI_opString(string? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpStringResult>(completed);
            outAsync.invoke(
                _opString_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpStringResult();
                    ret.returnValue = istr.readString(1);
                    ret.p3 = istr.readString(3);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpStringReqResult> opStringReqAsync(string? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpStringReqResult> _iceI_opStringReqAsync(string? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpStringReqResult>(progress, cancel);
            _iceI_opStringReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringReq_name = "opStringReq";

        private void _iceI_opStringReq(string? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpStringReqResult>(completed);
            outAsync.invoke(
                _opStringReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpStringReqResult();
                    ret.returnValue = istr.readString(1);
                    ret.p3 = istr.readString(3);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpMyEnumResult> opMyEnumAsync(MyEnum? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpMyEnumResult> _iceI_opMyEnumAsync(MyEnum? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnum_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpMyEnumResult>(progress, cancel);
            _iceI_opMyEnum(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnum_name = "opMyEnum";

        private void _iceI_opMyEnum(MyEnum? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpMyEnumResult>(completed);
            outAsync.invoke(
                _opMyEnum_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null)
                    {
                        ostr.writeEnum(2, (int)iceP_p1.Value, 1);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpMyEnumResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.Size))
                    {
                        MyEnum tmpVal;
                        tmpVal = (MyEnum)istr.readEnum(0);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.Size))
                    {
                        MyEnum tmpVal;
                        tmpVal = (MyEnum)istr.readEnum(0);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpMyEnumReqResult> opMyEnumReqAsync(MyEnum? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyEnumReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpMyEnumReqResult> _iceI_opMyEnumReqAsync(MyEnum? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyEnumReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpMyEnumReqResult>(progress, cancel);
            _iceI_opMyEnumReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyEnumReq_name = "opMyEnumReq";

        private void _iceI_opMyEnumReq(MyEnum? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpMyEnumReqResult>(completed);
            outAsync.invoke(
                _opMyEnumReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null)
                    {
                        ostr.writeEnum(2, (int)iceP_p1.Value, 1);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpMyEnumReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.Size))
                    {
                        MyEnum tmpVal;
                        tmpVal = (MyEnum)istr.readEnum(0);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.Size))
                    {
                        MyEnum tmpVal;
                        tmpVal = (MyEnum)istr.readEnum(0);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpSmallStructResult> opSmallStructAsync(SmallStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSmallStructAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpSmallStructResult> _iceI_opSmallStructAsync(SmallStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSmallStruct_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpSmallStructResult>(progress, cancel);
            _iceI_opSmallStruct(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSmallStruct_name = "opSmallStruct";

        private void _iceI_opSmallStruct(SmallStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpSmallStructResult>(completed);
            outAsync.invoke(
                _opSmallStruct_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(1);
                        iceP_p1.Value.ice_writeMembers(ostr);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpSmallStructResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        SmallStruct tmpVal;
                        tmpVal = new SmallStruct(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        SmallStruct tmpVal;
                        tmpVal = new SmallStruct(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpSmallStructReqResult> opSmallStructReqAsync(SmallStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSmallStructReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpSmallStructReqResult> _iceI_opSmallStructReqAsync(SmallStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSmallStructReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpSmallStructReqResult>(progress, cancel);
            _iceI_opSmallStructReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSmallStructReq_name = "opSmallStructReq";

        private void _iceI_opSmallStructReq(SmallStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpSmallStructReqResult>(completed);
            outAsync.invoke(
                _opSmallStructReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(1);
                        iceP_p1.Value.ice_writeMembers(ostr);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpSmallStructReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        SmallStruct tmpVal;
                        tmpVal = new SmallStruct(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        SmallStruct tmpVal;
                        tmpVal = new SmallStruct(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpFixedStructResult> opFixedStructAsync(FixedStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFixedStructAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpFixedStructResult> _iceI_opFixedStructAsync(FixedStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFixedStruct_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpFixedStructResult>(progress, cancel);
            _iceI_opFixedStruct(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFixedStruct_name = "opFixedStruct";

        private void _iceI_opFixedStruct(FixedStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpFixedStructResult>(completed);
            outAsync.invoke(
                _opFixedStruct_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(4);
                        iceP_p1.Value.ice_writeMembers(ostr);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpFixedStructResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        FixedStruct tmpVal;
                        tmpVal = new FixedStruct(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        FixedStruct tmpVal;
                        tmpVal = new FixedStruct(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpFixedStructReqResult> opFixedStructReqAsync(FixedStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFixedStructReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpFixedStructReqResult> _iceI_opFixedStructReqAsync(FixedStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFixedStructReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpFixedStructReqResult>(progress, cancel);
            _iceI_opFixedStructReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFixedStructReq_name = "opFixedStructReq";

        private void _iceI_opFixedStructReq(FixedStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpFixedStructReqResult>(completed);
            outAsync.invoke(
                _opFixedStructReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(4);
                        iceP_p1.Value.ice_writeMembers(ostr);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpFixedStructReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        FixedStruct tmpVal;
                        tmpVal = new FixedStruct(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        FixedStruct tmpVal;
                        tmpVal = new FixedStruct(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpVarStructResult> opVarStructAsync(VarStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opVarStructAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpVarStructResult> _iceI_opVarStructAsync(VarStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVarStruct_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpVarStructResult>(progress, cancel);
            _iceI_opVarStruct(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVarStruct_name = "opVarStruct";

        private void _iceI_opVarStruct(VarStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpVarStructResult>(completed);
            outAsync.invoke(
                _opVarStruct_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        VarStruct.ice_write(ostr, iceP_p1);
                        ostr.endSize(pos);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpVarStructResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        VarStruct tmpVal;
                        tmpVal = new VarStruct(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        VarStruct tmpVal;
                        tmpVal = new VarStruct(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpVarStructReqResult> opVarStructReqAsync(VarStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opVarStructReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpVarStructReqResult> _iceI_opVarStructReqAsync(VarStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVarStructReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpVarStructReqResult>(progress, cancel);
            _iceI_opVarStructReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVarStructReq_name = "opVarStructReq";

        private void _iceI_opVarStructReq(VarStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpVarStructReqResult>(completed);
            outAsync.invoke(
                _opVarStructReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        VarStruct.ice_write(ostr, iceP_p1);
                        ostr.endSize(pos);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpVarStructReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        VarStruct tmpVal;
                        tmpVal = new VarStruct(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        VarStruct tmpVal;
                        tmpVal = new VarStruct(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpMyInterfaceProxyResult> opMyInterfaceProxyAsync(MyInterfacePrx? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyInterfaceProxyAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpMyInterfaceProxyResult> _iceI_opMyInterfaceProxyAsync(MyInterfacePrx? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyInterfaceProxy_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpMyInterfaceProxyResult>(progress, cancel);
            _iceI_opMyInterfaceProxy(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyInterfaceProxy_name = "opMyInterfaceProxy";

        private void _iceI_opMyInterfaceProxy(MyInterfacePrx? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpMyInterfaceProxyResult>(completed);
            outAsync.invoke(
                _opMyInterfaceProxy_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        MyInterfacePrxHelper.write(ostr, iceP_p1);
                        ostr.endSize(pos);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpMyInterfaceProxyResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        MyInterfacePrx? tmpVal;
                        tmpVal = MyInterfacePrxHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        MyInterfacePrx? tmpVal;
                        tmpVal = MyInterfacePrxHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpMyInterfaceProxyReqResult> opMyInterfaceProxyReqAsync(MyInterfacePrx? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMyInterfaceProxyReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpMyInterfaceProxyReqResult> _iceI_opMyInterfaceProxyReqAsync(MyInterfacePrx? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMyInterfaceProxyReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpMyInterfaceProxyReqResult>(progress, cancel);
            _iceI_opMyInterfaceProxyReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMyInterfaceProxyReq_name = "opMyInterfaceProxyReq";

        private void _iceI_opMyInterfaceProxyReq(MyInterfacePrx? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpMyInterfaceProxyReqResult>(completed);
            outAsync.invoke(
                _opMyInterfaceProxyReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        MyInterfacePrxHelper.write(ostr, iceP_p1);
                        ostr.endSize(pos);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpMyInterfaceProxyReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        MyInterfacePrx? tmpVal;
                        tmpVal = MyInterfacePrxHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        MyInterfacePrx? tmpVal;
                        tmpVal = MyInterfacePrxHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpOneOptionalResult> opOneOptionalAsync(OneOptional? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opOneOptionalAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpOneOptionalResult> _iceI_opOneOptionalAsync(OneOptional? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOneOptional_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpOneOptionalResult>(progress, cancel);
            _iceI_opOneOptional(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOneOptional_name = "opOneOptional";

        private void _iceI_opOneOptional(OneOptional? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpOneOptionalResult>(completed);
            outAsync.invoke(
                _opOneOptional_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_p1);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpOneOptionalResult();
                    istr.readValue((OneOptional? v) => { ret.p3 = v; });
                    istr.readValue((OneOptional? v) => {ret.returnValue = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpByteSeqResult> opByteSeqAsync(byte[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSeqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpByteSeqResult> _iceI_opByteSeqAsync(byte[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpByteSeqResult>(progress, cancel);
            _iceI_opByteSeq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSeq_name = "opByteSeq";

        private void _iceI_opByteSeq(byte[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpByteSeqResult>(completed);
            outAsync.invoke(
                _opByteSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeByteSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpByteSeqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = ByteSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = ByteSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpByteSeqReqResult> opByteSeqReqAsync(byte[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opByteSeqReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpByteSeqReqResult> _iceI_opByteSeqReqAsync(byte[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opByteSeqReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpByteSeqReqResult>(progress, cancel);
            _iceI_opByteSeqReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opByteSeqReq_name = "opByteSeqReq";

        private void _iceI_opByteSeqReq(byte[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpByteSeqReqResult>(completed);
            outAsync.invoke(
                _opByteSeqReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeByteSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpByteSeqReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = ByteSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = ByteSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpBoolSeqResult> opBoolSeqAsync(bool[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolSeqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpBoolSeqResult> _iceI_opBoolSeqAsync(bool[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpBoolSeqResult>(progress, cancel);
            _iceI_opBoolSeq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolSeq_name = "opBoolSeq";

        private void _iceI_opBoolSeq(bool[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpBoolSeqResult>(completed);
            outAsync.invoke(
                _opBoolSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBoolSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpBoolSeqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        bool[] tmpVal;
                        tmpVal = BoolSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        bool[] tmpVal;
                        tmpVal = BoolSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpBoolSeqReqResult> opBoolSeqReqAsync(bool[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opBoolSeqReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpBoolSeqReqResult> _iceI_opBoolSeqReqAsync(bool[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBoolSeqReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpBoolSeqReqResult>(progress, cancel);
            _iceI_opBoolSeqReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBoolSeqReq_name = "opBoolSeqReq";

        private void _iceI_opBoolSeqReq(bool[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpBoolSeqReqResult>(completed);
            outAsync.invoke(
                _opBoolSeqReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeBoolSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpBoolSeqReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        bool[] tmpVal;
                        tmpVal = BoolSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        bool[] tmpVal;
                        tmpVal = BoolSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpShortSeqResult> opShortSeqAsync(short[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortSeqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpShortSeqResult> _iceI_opShortSeqAsync(short[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpShortSeqResult>(progress, cancel);
            _iceI_opShortSeq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortSeq_name = "opShortSeq";

        private void _iceI_opShortSeq(short[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpShortSeqResult>(completed);
            outAsync.invoke(
                _opShortSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeShortSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpShortSeqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        short[] tmpVal;
                        tmpVal = ShortSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        short[] tmpVal;
                        tmpVal = ShortSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpShortSeqReqResult> opShortSeqReqAsync(short[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opShortSeqReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpShortSeqReqResult> _iceI_opShortSeqReqAsync(short[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opShortSeqReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpShortSeqReqResult>(progress, cancel);
            _iceI_opShortSeqReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opShortSeqReq_name = "opShortSeqReq";

        private void _iceI_opShortSeqReq(short[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpShortSeqReqResult>(completed);
            outAsync.invoke(
                _opShortSeqReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeShortSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpShortSeqReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        short[] tmpVal;
                        tmpVal = ShortSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        short[] tmpVal;
                        tmpVal = ShortSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpIntSeqResult> opIntSeqAsync(int[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntSeqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpIntSeqResult> _iceI_opIntSeqAsync(int[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpIntSeqResult>(progress, cancel);
            _iceI_opIntSeq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntSeq_name = "opIntSeq";

        private void _iceI_opIntSeq(int[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpIntSeqResult>(completed);
            outAsync.invoke(
                _opIntSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeIntSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpIntSeqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        int[] tmpVal;
                        tmpVal = IntSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        int[] tmpVal;
                        tmpVal = IntSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpIntSeqReqResult> opIntSeqReqAsync(int[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntSeqReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpIntSeqReqResult> _iceI_opIntSeqReqAsync(int[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntSeqReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpIntSeqReqResult>(progress, cancel);
            _iceI_opIntSeqReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntSeqReq_name = "opIntSeqReq";

        private void _iceI_opIntSeqReq(int[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpIntSeqReqResult>(completed);
            outAsync.invoke(
                _opIntSeqReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeIntSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpIntSeqReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        int[] tmpVal;
                        tmpVal = IntSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        int[] tmpVal;
                        tmpVal = IntSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpLongSeqResult> opLongSeqAsync(long[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongSeqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpLongSeqResult> _iceI_opLongSeqAsync(long[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpLongSeqResult>(progress, cancel);
            _iceI_opLongSeq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongSeq_name = "opLongSeq";

        private void _iceI_opLongSeq(long[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpLongSeqResult>(completed);
            outAsync.invoke(
                _opLongSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeLongSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpLongSeqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        long[] tmpVal;
                        tmpVal = LongSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        long[] tmpVal;
                        tmpVal = LongSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpLongSeqReqResult> opLongSeqReqAsync(long[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opLongSeqReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpLongSeqReqResult> _iceI_opLongSeqReqAsync(long[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opLongSeqReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpLongSeqReqResult>(progress, cancel);
            _iceI_opLongSeqReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opLongSeqReq_name = "opLongSeqReq";

        private void _iceI_opLongSeqReq(long[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpLongSeqReqResult>(completed);
            outAsync.invoke(
                _opLongSeqReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeLongSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpLongSeqReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        long[] tmpVal;
                        tmpVal = LongSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        long[] tmpVal;
                        tmpVal = LongSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpFloatSeqResult> opFloatSeqAsync(float[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatSeqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpFloatSeqResult> _iceI_opFloatSeqAsync(float[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpFloatSeqResult>(progress, cancel);
            _iceI_opFloatSeq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatSeq_name = "opFloatSeq";

        private void _iceI_opFloatSeq(float[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpFloatSeqResult>(completed);
            outAsync.invoke(
                _opFloatSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeFloatSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpFloatSeqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        float[] tmpVal;
                        tmpVal = FloatSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        float[] tmpVal;
                        tmpVal = FloatSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpFloatSeqReqResult> opFloatSeqReqAsync(float[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFloatSeqReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpFloatSeqReqResult> _iceI_opFloatSeqReqAsync(float[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFloatSeqReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpFloatSeqReqResult>(progress, cancel);
            _iceI_opFloatSeqReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFloatSeqReq_name = "opFloatSeqReq";

        private void _iceI_opFloatSeqReq(float[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpFloatSeqReqResult>(completed);
            outAsync.invoke(
                _opFloatSeqReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeFloatSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpFloatSeqReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        float[] tmpVal;
                        tmpVal = FloatSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        float[] tmpVal;
                        tmpVal = FloatSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpDoubleSeqResult> opDoubleSeqAsync(double[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDoubleSeqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpDoubleSeqResult> _iceI_opDoubleSeqAsync(double[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDoubleSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpDoubleSeqResult>(progress, cancel);
            _iceI_opDoubleSeq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDoubleSeq_name = "opDoubleSeq";

        private void _iceI_opDoubleSeq(double[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpDoubleSeqResult>(completed);
            outAsync.invoke(
                _opDoubleSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeDoubleSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpDoubleSeqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        double[] tmpVal;
                        tmpVal = DoubleSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        double[] tmpVal;
                        tmpVal = DoubleSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpDoubleSeqReqResult> opDoubleSeqReqAsync(double[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opDoubleSeqReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpDoubleSeqReqResult> _iceI_opDoubleSeqReqAsync(double[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opDoubleSeqReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpDoubleSeqReqResult>(progress, cancel);
            _iceI_opDoubleSeqReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opDoubleSeqReq_name = "opDoubleSeqReq";

        private void _iceI_opDoubleSeqReq(double[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpDoubleSeqReqResult>(completed);
            outAsync.invoke(
                _opDoubleSeqReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeDoubleSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpDoubleSeqReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        double[] tmpVal;
                        tmpVal = DoubleSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        double[] tmpVal;
                        tmpVal = DoubleSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpStringSeqResult> opStringSeqAsync(string[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringSeqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpStringSeqResult> _iceI_opStringSeqAsync(string[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpStringSeqResult>(progress, cancel);
            _iceI_opStringSeq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSeq_name = "opStringSeq";

        private void _iceI_opStringSeq(string[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpStringSeqResult>(completed);
            outAsync.invoke(
                _opStringSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeStringSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpStringSeqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[] tmpVal;
                        tmpVal = StringSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[] tmpVal;
                        tmpVal = StringSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpStringSeqReqResult> opStringSeqReqAsync(string[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringSeqReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpStringSeqReqResult> _iceI_opStringSeqReqAsync(string[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringSeqReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpStringSeqReqResult>(progress, cancel);
            _iceI_opStringSeqReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringSeqReq_name = "opStringSeqReq";

        private void _iceI_opStringSeqReq(string[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpStringSeqReqResult>(completed);
            outAsync.invoke(
                _opStringSeqReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeStringSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpStringSeqReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[] tmpVal;
                        tmpVal = StringSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[] tmpVal;
                        tmpVal = StringSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpSmallStructSeqResult> opSmallStructSeqAsync(SmallStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSmallStructSeqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpSmallStructSeqResult> _iceI_opSmallStructSeqAsync(SmallStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSmallStructSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpSmallStructSeqResult>(progress, cancel);
            _iceI_opSmallStructSeq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSmallStructSeq_name = "opSmallStructSeq";

        private void _iceI_opSmallStructSeq(SmallStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpSmallStructSeqResult>(completed);
            outAsync.invoke(
                _opSmallStructSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        SmallStructSeqHelper.write(ostr, iceP_p1);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpSmallStructSeqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        SmallStruct[] tmpVal;
                        tmpVal = SmallStructSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        SmallStruct[] tmpVal;
                        tmpVal = SmallStructSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpSmallStructSeqReqResult> opSmallStructSeqReqAsync(SmallStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSmallStructSeqReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpSmallStructSeqReqResult> _iceI_opSmallStructSeqReqAsync(SmallStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSmallStructSeqReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpSmallStructSeqReqResult>(progress, cancel);
            _iceI_opSmallStructSeqReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSmallStructSeqReq_name = "opSmallStructSeqReq";

        private void _iceI_opSmallStructSeqReq(SmallStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpSmallStructSeqReqResult>(completed);
            outAsync.invoke(
                _opSmallStructSeqReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        SmallStructSeqHelper.write(ostr, iceP_p1);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpSmallStructSeqReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        SmallStruct[] tmpVal;
                        tmpVal = SmallStructSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        SmallStruct[] tmpVal;
                        tmpVal = SmallStructSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpSmallStructListResult> opSmallStructListAsync(SmallStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSmallStructListAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpSmallStructListResult> _iceI_opSmallStructListAsync(SmallStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSmallStructList_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpSmallStructListResult>(progress, cancel);
            _iceI_opSmallStructList(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSmallStructList_name = "opSmallStructList";

        private void _iceI_opSmallStructList(SmallStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpSmallStructListResult>(completed);
            outAsync.invoke(
                _opSmallStructList_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        SmallStructListHelper.write(ostr, iceP_p1);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpSmallStructListResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        SmallStruct[] tmpVal;
                        tmpVal = SmallStructListHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        SmallStruct[] tmpVal;
                        tmpVal = SmallStructListHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpSmallStructListReqResult> opSmallStructListReqAsync(SmallStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSmallStructListReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpSmallStructListReqResult> _iceI_opSmallStructListReqAsync(SmallStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSmallStructListReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpSmallStructListReqResult>(progress, cancel);
            _iceI_opSmallStructListReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSmallStructListReq_name = "opSmallStructListReq";

        private void _iceI_opSmallStructListReq(SmallStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpSmallStructListReqResult>(completed);
            outAsync.invoke(
                _opSmallStructListReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        SmallStructListHelper.write(ostr, iceP_p1);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpSmallStructListReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        SmallStruct[] tmpVal;
                        tmpVal = SmallStructListHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        SmallStruct[] tmpVal;
                        tmpVal = SmallStructListHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpFixedStructSeqResult> opFixedStructSeqAsync(FixedStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFixedStructSeqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpFixedStructSeqResult> _iceI_opFixedStructSeqAsync(FixedStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFixedStructSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpFixedStructSeqResult>(progress, cancel);
            _iceI_opFixedStructSeq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFixedStructSeq_name = "opFixedStructSeq";

        private void _iceI_opFixedStructSeq(FixedStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpFixedStructSeqResult>(completed);
            outAsync.invoke(
                _opFixedStructSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(iceP_p1.Length * 4 + (iceP_p1.Length > 254 ? 5 : 1));
                        FixedStructSeqHelper.write(ostr, iceP_p1);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpFixedStructSeqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        FixedStruct[] tmpVal;
                        tmpVal = FixedStructSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        FixedStruct[] tmpVal;
                        tmpVal = FixedStructSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpFixedStructSeqReqResult> opFixedStructSeqReqAsync(FixedStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFixedStructSeqReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpFixedStructSeqReqResult> _iceI_opFixedStructSeqReqAsync(FixedStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFixedStructSeqReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpFixedStructSeqReqResult>(progress, cancel);
            _iceI_opFixedStructSeqReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFixedStructSeqReq_name = "opFixedStructSeqReq";

        private void _iceI_opFixedStructSeqReq(FixedStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpFixedStructSeqReqResult>(completed);
            outAsync.invoke(
                _opFixedStructSeqReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(iceP_p1.Length * 4 + (iceP_p1.Length > 254 ? 5 : 1));
                        FixedStructSeqHelper.write(ostr, iceP_p1);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpFixedStructSeqReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        FixedStruct[] tmpVal;
                        tmpVal = FixedStructSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        FixedStruct[] tmpVal;
                        tmpVal = FixedStructSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpFixedStructListResult> opFixedStructListAsync(FixedStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFixedStructListAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpFixedStructListResult> _iceI_opFixedStructListAsync(FixedStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFixedStructList_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpFixedStructListResult>(progress, cancel);
            _iceI_opFixedStructList(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFixedStructList_name = "opFixedStructList";

        private void _iceI_opFixedStructList(FixedStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpFixedStructListResult>(completed);
            outAsync.invoke(
                _opFixedStructList_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(iceP_p1.Length * 4 + (iceP_p1.Length > 254 ? 5 : 1));
                        FixedStructListHelper.write(ostr, iceP_p1);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpFixedStructListResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        FixedStruct[] tmpVal;
                        tmpVal = FixedStructListHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        FixedStruct[] tmpVal;
                        tmpVal = FixedStructListHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpFixedStructListReqResult> opFixedStructListReqAsync(FixedStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opFixedStructListReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpFixedStructListReqResult> _iceI_opFixedStructListReqAsync(FixedStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opFixedStructListReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpFixedStructListReqResult>(progress, cancel);
            _iceI_opFixedStructListReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opFixedStructListReq_name = "opFixedStructListReq";

        private void _iceI_opFixedStructListReq(FixedStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpFixedStructListReqResult>(completed);
            outAsync.invoke(
                _opFixedStructListReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(iceP_p1.Length * 4 + (iceP_p1.Length > 254 ? 5 : 1));
                        FixedStructListHelper.write(ostr, iceP_p1);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpFixedStructListReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        FixedStruct[] tmpVal;
                        tmpVal = FixedStructListHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        FixedStruct[] tmpVal;
                        tmpVal = FixedStructListHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpVarStructSeqResult> opVarStructSeqAsync(VarStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opVarStructSeqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpVarStructSeqResult> _iceI_opVarStructSeqAsync(VarStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVarStructSeq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpVarStructSeqResult>(progress, cancel);
            _iceI_opVarStructSeq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVarStructSeq_name = "opVarStructSeq";

        private void _iceI_opVarStructSeq(VarStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpVarStructSeqResult>(completed);
            outAsync.invoke(
                _opVarStructSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        VarStructSeqHelper.write(ostr, iceP_p1);
                        ostr.endSize(pos);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpVarStructSeqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        VarStruct[] tmpVal;
                        tmpVal = VarStructSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        VarStruct[] tmpVal;
                        tmpVal = VarStructSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpVarStructSeqReqResult> opVarStructSeqReqAsync(VarStruct[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opVarStructSeqReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpVarStructSeqReqResult> _iceI_opVarStructSeqReqAsync(VarStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opVarStructSeqReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpVarStructSeqReqResult>(progress, cancel);
            _iceI_opVarStructSeqReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVarStructSeqReq_name = "opVarStructSeqReq";

        private void _iceI_opVarStructSeqReq(VarStruct[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpVarStructSeqReqResult>(completed);
            outAsync.invoke(
                _opVarStructSeqReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        VarStructSeqHelper.write(ostr, iceP_p1);
                        ostr.endSize(pos);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpVarStructSeqReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        VarStruct[] tmpVal;
                        tmpVal = VarStructSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        VarStruct[] tmpVal;
                        tmpVal = VarStructSeqHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpSerializableResult> opSerializableAsync(byte[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSerializableAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpSerializableResult> _iceI_opSerializableAsync(byte[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSerializable_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpSerializableResult>(progress, cancel);
            _iceI_opSerializable(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSerializable_name = "opSerializable";

        private void _iceI_opSerializable(byte[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpSerializableResult>(completed);
            outAsync.invoke(
                _opSerializable_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeByteSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpSerializableResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = SerializableHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = SerializableHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpSerializableReqResult> opSerializableReqAsync(byte[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSerializableReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpSerializableReqResult> _iceI_opSerializableReqAsync(byte[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSerializableReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpSerializableReqResult>(progress, cancel);
            _iceI_opSerializableReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSerializableReq_name = "opSerializableReq";

        private void _iceI_opSerializableReq(byte[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpSerializableReqResult>(completed);
            outAsync.invoke(
                _opSerializableReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeByteSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpSerializableReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = SerializableHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal;
                        tmpVal = SerializableHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpIntIntDictResult> opIntIntDictAsync(global::System.Collections.Generic.Dictionary<int, int>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntIntDictAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpIntIntDictResult> _iceI_opIntIntDictAsync(global::System.Collections.Generic.Dictionary<int, int>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntIntDict_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpIntIntDictResult>(progress, cancel);
            _iceI_opIntIntDict(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntIntDict_name = "opIntIntDict";

        private void _iceI_opIntIntDict(global::System.Collections.Generic.Dictionary<int, int>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpIntIntDictResult>(completed);
            outAsync.invoke(
                _opIntIntDict_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(iceP_p1.Count * 8 + (iceP_p1.Count > 254 ? 5 : 1));
                        IntIntDictHelper.write(ostr, iceP_p1);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpIntIntDictResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        global::System.Collections.Generic.Dictionary<int, int> tmpVal = new global::System.Collections.Generic.Dictionary<int, int>();
                        tmpVal = IntIntDictHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        global::System.Collections.Generic.Dictionary<int, int> tmpVal = new global::System.Collections.Generic.Dictionary<int, int>();
                        tmpVal = IntIntDictHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpIntIntDictReqResult> opIntIntDictReqAsync(global::System.Collections.Generic.Dictionary<int, int>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntIntDictReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpIntIntDictReqResult> _iceI_opIntIntDictReqAsync(global::System.Collections.Generic.Dictionary<int, int>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntIntDictReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpIntIntDictReqResult>(progress, cancel);
            _iceI_opIntIntDictReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntIntDictReq_name = "opIntIntDictReq";

        private void _iceI_opIntIntDictReq(global::System.Collections.Generic.Dictionary<int, int>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpIntIntDictReqResult>(completed);
            outAsync.invoke(
                _opIntIntDictReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(iceP_p1.Count * 8 + (iceP_p1.Count > 254 ? 5 : 1));
                        IntIntDictHelper.write(ostr, iceP_p1);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpIntIntDictReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        global::System.Collections.Generic.Dictionary<int, int> tmpVal = new global::System.Collections.Generic.Dictionary<int, int>();
                        tmpVal = IntIntDictHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        global::System.Collections.Generic.Dictionary<int, int> tmpVal = new global::System.Collections.Generic.Dictionary<int, int>();
                        tmpVal = IntIntDictHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpStringIntDictResult> opStringIntDictAsync(global::System.Collections.Generic.Dictionary<string, int>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringIntDictAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpStringIntDictResult> _iceI_opStringIntDictAsync(global::System.Collections.Generic.Dictionary<string, int>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringIntDict_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpStringIntDictResult>(progress, cancel);
            _iceI_opStringIntDict(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringIntDict_name = "opStringIntDict";

        private void _iceI_opStringIntDict(global::System.Collections.Generic.Dictionary<string, int>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpStringIntDictResult>(completed);
            outAsync.invoke(
                _opStringIntDict_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        StringIntDictHelper.write(ostr, iceP_p1);
                        ostr.endSize(pos);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpStringIntDictResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                        tmpVal = StringIntDictHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                        tmpVal = StringIntDictHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpStringIntDictReqResult> opStringIntDictReqAsync(global::System.Collections.Generic.Dictionary<string, int>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opStringIntDictReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpStringIntDictReqResult> _iceI_opStringIntDictReqAsync(global::System.Collections.Generic.Dictionary<string, int>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opStringIntDictReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpStringIntDictReqResult>(progress, cancel);
            _iceI_opStringIntDictReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opStringIntDictReq_name = "opStringIntDictReq";

        private void _iceI_opStringIntDictReq(global::System.Collections.Generic.Dictionary<string, int>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpStringIntDictReqResult>(completed);
            outAsync.invoke(
                _opStringIntDictReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        StringIntDictHelper.write(ostr, iceP_p1);
                        ostr.endSize(pos);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpStringIntDictReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                        tmpVal = StringIntDictHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                        tmpVal = StringIntDictHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpIntOneOptionalDictResult> opIntOneOptionalDictAsync(global::System.Collections.Generic.Dictionary<int, OneOptional?>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntOneOptionalDictAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpIntOneOptionalDictResult> _iceI_opIntOneOptionalDictAsync(global::System.Collections.Generic.Dictionary<int, OneOptional?>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntOneOptionalDict_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpIntOneOptionalDictResult>(progress, cancel);
            _iceI_opIntOneOptionalDict(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntOneOptionalDict_name = "opIntOneOptionalDict";

        private void _iceI_opIntOneOptionalDict(global::System.Collections.Generic.Dictionary<int, OneOptional?>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpIntOneOptionalDictResult>(completed);
            outAsync.invoke(
                _opIntOneOptionalDict_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        IntOneOptionalDictHelper.write(ostr, iceP_p1);
                        ostr.endSize(pos);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpIntOneOptionalDictResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<int, OneOptional?> tmpVal = new global::System.Collections.Generic.Dictionary<int, OneOptional?>();
                        tmpVal = IntOneOptionalDictHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<int, OneOptional?> tmpVal = new global::System.Collections.Generic.Dictionary<int, OneOptional?>();
                        tmpVal = IntOneOptionalDictHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpIntOneOptionalDictReqResult> opIntOneOptionalDictReqAsync(global::System.Collections.Generic.Dictionary<int, OneOptional?>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opIntOneOptionalDictReqAsync(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpIntOneOptionalDictReqResult> _iceI_opIntOneOptionalDictReqAsync(global::System.Collections.Generic.Dictionary<int, OneOptional?>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opIntOneOptionalDictReq_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpIntOneOptionalDictReqResult>(progress, cancel);
            _iceI_opIntOneOptionalDictReq(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opIntOneOptionalDictReq_name = "opIntOneOptionalDictReq";

        private void _iceI_opIntOneOptionalDictReq(global::System.Collections.Generic.Dictionary<int, OneOptional?>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpIntOneOptionalDictReqResult>(completed);
            outAsync.invoke(
                _opIntOneOptionalDictReq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        IntOneOptionalDictHelper.write(ostr, iceP_p1);
                        ostr.endSize(pos);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpIntOneOptionalDictReqResult();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<int, OneOptional?> tmpVal = new global::System.Collections.Generic.Dictionary<int, OneOptional?>();
                        tmpVal = IntOneOptionalDictHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<int, OneOptional?> tmpVal = new global::System.Collections.Generic.Dictionary<int, OneOptional?>();
                        tmpVal = IntOneOptionalDictHelper.read(istr);
                        ret.p3 = tmpVal;
                    }
                    else
                    {
                        ret.p3 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task opClassAndUnknownOptionalAsync(A? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opClassAndUnknownOptionalAsync(p, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opClassAndUnknownOptionalAsync(A? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opClassAndUnknownOptional(iceP_p, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opClassAndUnknownOptional_name = "opClassAndUnknownOptional";

        private void _iceI_opClassAndUnknownOptional(A? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opClassAndUnknownOptional_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_p);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task<G?> opGAsync(G? g, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opGAsync(g, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<G?> _iceI_opGAsync(G? iceP_g, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opG_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<G?>(progress, cancel);
            _iceI_opG(iceP_g, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opG_name = "opG";

        private void _iceI_opG(G? iceP_g, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<G?>(completed);
            outAsync.invoke(
                _opG_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_g);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    G? ret = null;
                    istr.readValue((G? v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task opVoidAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opVoidAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opVoidAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_opVoid(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opVoid_name = "opVoid";

        private void _iceI_opVoid(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _opVoid_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<SmallStruct?> opMStruct1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMStruct1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SmallStruct?> _iceI_opMStruct1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMStruct1_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<SmallStruct?>(progress, cancel);
            _iceI_opMStruct1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMStruct1_name = "opMStruct1";

        private void _iceI_opMStruct1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SmallStruct?>(completed);
            outAsync.invoke(
                _opMStruct1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    SmallStruct? ret;
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        SmallStruct tmpVal;
                        tmpVal = new SmallStruct(istr);
                        ret = tmpVal;
                    }
                    else
                    {
                        ret = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpMStruct2Result> opMStruct2Async(SmallStruct? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMStruct2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpMStruct2Result> _iceI_opMStruct2Async(SmallStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMStruct2_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpMStruct2Result>(progress, cancel);
            _iceI_opMStruct2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMStruct2_name = "opMStruct2";

        private void _iceI_opMStruct2(SmallStruct? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpMStruct2Result>(completed);
            outAsync.invoke(
                _opMStruct2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.VSize))
                    {
                        ostr.writeSize(1);
                        iceP_p1.Value.ice_writeMembers(ostr);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpMStruct2Result();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        SmallStruct tmpVal;
                        tmpVal = new SmallStruct(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.VSize))
                    {
                        istr.skipSize();
                        SmallStruct tmpVal;
                        tmpVal = new SmallStruct(istr);
                        ret.p2 = tmpVal;
                    }
                    else
                    {
                        ret.p2 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]?> opMSeq1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMSeq1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]?> _iceI_opMSeq1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMSeq1_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<string[]?>(progress, cancel);
            _iceI_opMSeq1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMSeq1_name = "opMSeq1";

        private void _iceI_opMSeq1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]?>(completed);
            outAsync.invoke(
                _opMSeq1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string[]? ret;
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[] tmpVal;
                        tmpVal = StringSeqHelper.read(istr);
                        ret = tmpVal;
                    }
                    else
                    {
                        ret = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpMSeq2Result> opMSeq2Async(string[]? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMSeq2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpMSeq2Result> _iceI_opMSeq2Async(string[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMSeq2_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpMSeq2Result>(progress, cancel);
            _iceI_opMSeq2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMSeq2_name = "opMSeq2";

        private void _iceI_opMSeq2(string[]? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpMSeq2Result>(completed);
            outAsync.invoke(
                _opMSeq2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeStringSeq(2, iceP_p1);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpMSeq2Result();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[] tmpVal;
                        tmpVal = StringSeqHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        string[] tmpVal;
                        tmpVal = StringSeqHelper.read(istr);
                        ret.p2 = tmpVal;
                    }
                    else
                    {
                        ret.p2 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, int>?> opMDict1Async(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMDict1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, int>?> _iceI_opMDict1Async(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMDict1_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, int>?>(progress, cancel);
            _iceI_opMDict1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMDict1_name = "opMDict1";

        private void _iceI_opMDict1(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, int>?>(completed);
            outAsync.invoke(
                _opMDict1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, int>? ret;
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                        tmpVal = StringIntDictHelper.read(istr);
                        ret = tmpVal;
                    }
                    else
                    {
                        ret = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpMDict2Result> opMDict2Async(global::System.Collections.Generic.Dictionary<string, int>? p1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opMDict2Async(p1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpMDict2Result> _iceI_opMDict2Async(global::System.Collections.Generic.Dictionary<string, int>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opMDict2_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<Initial_OpMDict2Result>(progress, cancel);
            _iceI_opMDict2(iceP_p1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opMDict2_name = "opMDict2";

        private void _iceI_opMDict2(global::System.Collections.Generic.Dictionary<string, int>? iceP_p1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpMDict2Result>(completed);
            outAsync.invoke(
                _opMDict2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    if (iceP_p1 is not null && ostr.writeOptional(2, global::Ice.OptionalFormat.FSize))
                    {
                        int pos = ostr.startSize();
                        StringIntDictHelper.write(ostr, iceP_p1);
                        ostr.endSize(pos);
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    var ret = new Initial_OpMDict2Result();
                    if (istr.readOptional(1, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                        tmpVal = StringIntDictHelper.read(istr);
                        ret.returnValue = tmpVal;
                    }
                    else
                    {
                        ret.returnValue = null;
                    }
                    if (istr.readOptional(3, global::Ice.OptionalFormat.FSize))
                    {
                        istr.skip(4);
                        global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                        tmpVal = StringIntDictHelper.read(istr);
                        ret.p2 = tmpVal;
                    }
                    else
                    {
                        ret.p2 = null;
                    }
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> supportsRequiredParamsAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_supportsRequiredParamsAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_supportsRequiredParamsAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_supportsRequiredParams_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_supportsRequiredParams(context, synchronous, completed);
            return completed.Task;
        }

        private const string _supportsRequiredParams_name = "supportsRequiredParams";

        private void _iceI_supportsRequiredParams(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _supportsRequiredParams_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> supportsJavaSerializableAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_supportsJavaSerializableAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_supportsJavaSerializableAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_supportsJavaSerializable_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_supportsJavaSerializable(context, synchronous, completed);
            return completed.Task;
        }

        private const string _supportsJavaSerializable_name = "supportsJavaSerializable";

        private void _iceI_supportsJavaSerializable(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _supportsJavaSerializable_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> supportsCsharpSerializableAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_supportsCsharpSerializableAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_supportsCsharpSerializableAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_supportsCsharpSerializable_name);
            var completed = new global::Ice.Internal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_supportsCsharpSerializable(context, synchronous, completed);
            return completed.Task;
        }

        private const string _supportsCsharpSerializable_name = "supportsCsharpSerializable";

        private void _iceI_supportsCsharpSerializable(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, global::Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _supportsCsharpSerializable_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Factory operations

        public static InitialPrx createProxy(global::Ice.Communicator communicator, string proxyString) =>
            uncheckedCast(global::Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static InitialPrx? checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            if (b is not null && b.ice_isA(ice_staticId(), ctx))
            {
                InitialPrxHelper prx = new InitialPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        public static InitialPrx? checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null)
        {
            global::Ice.ObjectPrx? bb = b?.ice_facet(f);
            try
            {
                if (bb is not null && bb.ice_isA(ice_staticId(), ctx))
                {
                    InitialPrxHelper prx = new InitialPrxHelper();
                    prx.iceCopyFrom(bb);
                    return prx;
                }
            }
            catch (global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static InitialPrx? uncheckedCast(global::Ice.ObjectPrx? b)
        {
            if (b is not null)
            {
                var prx = new InitialPrxHelper();
                prx.iceCopyFrom(b);
                return prx;
            }
            return null;
        }

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static InitialPrx? uncheckedCast(global::Ice.ObjectPrx? b, string f)
        {
            if (b is not null)
            {
                global::Ice.ObjectPrx? bb = b.ice_facet(f);
                var prx = new InitialPrxHelper();
                prx.iceCopyFrom(bb);
                return prx;
            }
            return null;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Initial"
        };

        public static string ice_staticId() => "::Test::Initial";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, InitialPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static InitialPrx? read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx? proxy = istr.readProxy();
            if (proxy is not null)
            {
                 var result = new InitialPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class MyInterfaceDisp_ : global::Ice.ObjectImpl, MyInterface
    {
        #region Slice operations

        public abstract void op(global::Ice.Current? current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::MyInterface"
        };

        public override bool ice_isA(string s, global::Ice.Current? current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current? current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current? current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::MyInterface";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_op(MyInterface obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.op(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "op"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_op(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class InitialDisp_ : global::Ice.ObjectImpl, Initial
    {
        #region Slice operations

        public abstract void shutdown(global::Ice.Current? current = null);

        public abstract global::Ice.Value? pingPong(global::Ice.Value? o, global::Ice.Current? current = null);

        public abstract void opOptionalException(int? a, string? b, global::Ice.Current? current = null);

        public abstract void opDerivedException(int? a, string? b, global::Ice.Current? current = null);

        public abstract void opRequiredException(int? a, string? b, global::Ice.Current? current = null);

        public abstract byte? opByte(byte? p1, out byte? p3, global::Ice.Current? current = null);

        public abstract byte? opByteReq(byte? p1, out byte? p3, global::Ice.Current? current = null);

        public abstract bool? opBool(bool? p1, out bool? p3, global::Ice.Current? current = null);

        public abstract bool? opBoolReq(bool? p1, out bool? p3, global::Ice.Current? current = null);

        public abstract short? opShort(short? p1, out short? p3, global::Ice.Current? current = null);

        public abstract short? opShortReq(short? p1, out short? p3, global::Ice.Current? current = null);

        public abstract int? opInt(int? p1, out int? p3, global::Ice.Current? current = null);

        public abstract int? opIntReq(int? p1, out int? p3, global::Ice.Current? current = null);

        public abstract long? opLong(long? p1, out long? p3, global::Ice.Current? current = null);

        public abstract long? opLongReq(long? p1, out long? p3, global::Ice.Current? current = null);

        public abstract float? opFloat(float? p1, out float? p3, global::Ice.Current? current = null);

        public abstract float? opFloatReq(float? p1, out float? p3, global::Ice.Current? current = null);

        public abstract double? opDouble(double? p1, out double? p3, global::Ice.Current? current = null);

        public abstract double? opDoubleReq(double? p1, out double? p3, global::Ice.Current? current = null);

        public abstract string? opString(string? p1, out string? p3, global::Ice.Current? current = null);

        public abstract string? opStringReq(string? p1, out string? p3, global::Ice.Current? current = null);

        public abstract MyEnum? opMyEnum(MyEnum? p1, out MyEnum? p3, global::Ice.Current? current = null);

        public abstract MyEnum? opMyEnumReq(MyEnum? p1, out MyEnum? p3, global::Ice.Current? current = null);

        public abstract SmallStruct? opSmallStruct(SmallStruct? p1, out SmallStruct? p3, global::Ice.Current? current = null);

        public abstract SmallStruct? opSmallStructReq(SmallStruct? p1, out SmallStruct? p3, global::Ice.Current? current = null);

        public abstract FixedStruct? opFixedStruct(FixedStruct? p1, out FixedStruct? p3, global::Ice.Current? current = null);

        public abstract FixedStruct? opFixedStructReq(FixedStruct? p1, out FixedStruct? p3, global::Ice.Current? current = null);

        public abstract VarStruct? opVarStruct(VarStruct? p1, out VarStruct? p3, global::Ice.Current? current = null);

        public abstract VarStruct? opVarStructReq(VarStruct? p1, out VarStruct? p3, global::Ice.Current? current = null);

        public abstract MyInterfacePrx? opMyInterfaceProxy(MyInterfacePrx? p1, out MyInterfacePrx? p3, global::Ice.Current? current = null);

        public abstract MyInterfacePrx? opMyInterfaceProxyReq(MyInterfacePrx? p1, out MyInterfacePrx? p3, global::Ice.Current? current = null);

        public abstract OneOptional? opOneOptional(OneOptional? p1, out OneOptional? p3, global::Ice.Current? current = null);

        public abstract byte[]? opByteSeq(byte[]? p1, out byte[]? p3, global::Ice.Current? current = null);

        public abstract byte[]? opByteSeqReq(byte[]? p1, out byte[]? p3, global::Ice.Current? current = null);

        public abstract bool[]? opBoolSeq(bool[]? p1, out bool[]? p3, global::Ice.Current? current = null);

        public abstract bool[]? opBoolSeqReq(bool[]? p1, out bool[]? p3, global::Ice.Current? current = null);

        public abstract short[]? opShortSeq(short[]? p1, out short[]? p3, global::Ice.Current? current = null);

        public abstract short[]? opShortSeqReq(short[]? p1, out short[]? p3, global::Ice.Current? current = null);

        public abstract int[]? opIntSeq(int[]? p1, out int[]? p3, global::Ice.Current? current = null);

        public abstract int[]? opIntSeqReq(int[]? p1, out int[]? p3, global::Ice.Current? current = null);

        public abstract long[]? opLongSeq(long[]? p1, out long[]? p3, global::Ice.Current? current = null);

        public abstract long[]? opLongSeqReq(long[]? p1, out long[]? p3, global::Ice.Current? current = null);

        public abstract float[]? opFloatSeq(float[]? p1, out float[]? p3, global::Ice.Current? current = null);

        public abstract float[]? opFloatSeqReq(float[]? p1, out float[]? p3, global::Ice.Current? current = null);

        public abstract double[]? opDoubleSeq(double[]? p1, out double[]? p3, global::Ice.Current? current = null);

        public abstract double[]? opDoubleSeqReq(double[]? p1, out double[]? p3, global::Ice.Current? current = null);

        public abstract string[]? opStringSeq(string[]? p1, out string[]? p3, global::Ice.Current? current = null);

        public abstract string[]? opStringSeqReq(string[]? p1, out string[]? p3, global::Ice.Current? current = null);

        public abstract SmallStruct[]? opSmallStructSeq(SmallStruct[]? p1, out SmallStruct[]? p3, global::Ice.Current? current = null);

        public abstract SmallStruct[]? opSmallStructSeqReq(SmallStruct[]? p1, out SmallStruct[]? p3, global::Ice.Current? current = null);

        public abstract SmallStruct[]? opSmallStructList(SmallStruct[]? p1, out SmallStruct[]? p3, global::Ice.Current? current = null);

        public abstract SmallStruct[]? opSmallStructListReq(SmallStruct[]? p1, out SmallStruct[]? p3, global::Ice.Current? current = null);

        public abstract FixedStruct[]? opFixedStructSeq(FixedStruct[]? p1, out FixedStruct[]? p3, global::Ice.Current? current = null);

        public abstract FixedStruct[]? opFixedStructSeqReq(FixedStruct[]? p1, out FixedStruct[]? p3, global::Ice.Current? current = null);

        public abstract FixedStruct[]? opFixedStructList(FixedStruct[]? p1, out FixedStruct[]? p3, global::Ice.Current? current = null);

        public abstract FixedStruct[]? opFixedStructListReq(FixedStruct[]? p1, out FixedStruct[]? p3, global::Ice.Current? current = null);

        public abstract VarStruct[]? opVarStructSeq(VarStruct[]? p1, out VarStruct[]? p3, global::Ice.Current? current = null);

        public abstract VarStruct[]? opVarStructSeqReq(VarStruct[]? p1, out VarStruct[]? p3, global::Ice.Current? current = null);

        public abstract byte[]? opSerializable(byte[]? p1, out byte[]? p3, global::Ice.Current? current = null);

        public abstract byte[]? opSerializableReq(byte[]? p1, out byte[]? p3, global::Ice.Current? current = null);

        public abstract global::System.Collections.Generic.Dictionary<int, int>? opIntIntDict(global::System.Collections.Generic.Dictionary<int, int>? p1, out global::System.Collections.Generic.Dictionary<int, int>? p3, global::Ice.Current? current = null);

        public abstract global::System.Collections.Generic.Dictionary<int, int>? opIntIntDictReq(global::System.Collections.Generic.Dictionary<int, int>? p1, out global::System.Collections.Generic.Dictionary<int, int>? p3, global::Ice.Current? current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, int>? opStringIntDict(global::System.Collections.Generic.Dictionary<string, int>? p1, out global::System.Collections.Generic.Dictionary<string, int>? p3, global::Ice.Current? current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, int>? opStringIntDictReq(global::System.Collections.Generic.Dictionary<string, int>? p1, out global::System.Collections.Generic.Dictionary<string, int>? p3, global::Ice.Current? current = null);

        public abstract global::System.Collections.Generic.Dictionary<int, OneOptional?>? opIntOneOptionalDict(global::System.Collections.Generic.Dictionary<int, OneOptional?>? p1, out global::System.Collections.Generic.Dictionary<int, OneOptional?>? p3, global::Ice.Current? current = null);

        public abstract global::System.Collections.Generic.Dictionary<int, OneOptional?>? opIntOneOptionalDictReq(global::System.Collections.Generic.Dictionary<int, OneOptional?>? p1, out global::System.Collections.Generic.Dictionary<int, OneOptional?>? p3, global::Ice.Current? current = null);

        public abstract void opClassAndUnknownOptional(A? p, global::Ice.Current? current = null);

        public abstract G? opG(G? g, global::Ice.Current? current = null);

        public abstract void opVoid(global::Ice.Current? current = null);

        public abstract Initial_OpMStruct1MarshaledResult opMStruct1(global::Ice.Current? current = null);

        public abstract Initial_OpMStruct2MarshaledResult opMStruct2(SmallStruct? p1, global::Ice.Current? current = null);

        public abstract Initial_OpMSeq1MarshaledResult opMSeq1(global::Ice.Current? current = null);

        public abstract Initial_OpMSeq2MarshaledResult opMSeq2(string[]? p1, global::Ice.Current? current = null);

        public abstract Initial_OpMDict1MarshaledResult opMDict1(global::Ice.Current? current = null);

        public abstract Initial_OpMDict2MarshaledResult opMDict2(global::System.Collections.Generic.Dictionary<string, int>? p1, global::Ice.Current? current = null);

        public abstract bool supportsRequiredParams(global::Ice.Current? current = null);

        public abstract bool supportsJavaSerializable(global::Ice.Current? current = null);

        public abstract bool supportsCsharpSerializable(global::Ice.Current? current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Initial"
        };

        public override bool ice_isA(string s, global::Ice.Current? current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, Ice.UtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current? current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current? current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::Initial";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_pingPong(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Value? iceP_o = null;
            istr.readValue((global::Ice.Value? v) => { iceP_o = v; });
            istr.readPendingValues();
            inS.endReadParams();
            var ret = obj.pingPong(iceP_o, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opOptionalException(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int? iceP_a;
            string? iceP_b;
            iceP_a = istr.readInt(1);
            iceP_b = istr.readString(2);
            inS.endReadParams();
            obj.opOptionalException(iceP_a, iceP_b, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opDerivedException(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int? iceP_a;
            string? iceP_b;
            iceP_a = istr.readInt(1);
            iceP_b = istr.readString(2);
            inS.endReadParams();
            obj.opDerivedException(iceP_a, iceP_b, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opRequiredException(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int? iceP_a;
            string? iceP_b;
            iceP_a = istr.readInt(1);
            iceP_b = istr.readString(2);
            inS.endReadParams();
            obj.opRequiredException(iceP_a, iceP_b, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByte(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte? iceP_p1;
            iceP_p1 = istr.readByte(2);
            inS.endReadParams();
            byte? iceP_p3;
            var ret = obj.opByte(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeByte(1, ret);
            ostr.writeByte(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte? iceP_p1;
            iceP_p1 = istr.readByte(2);
            inS.endReadParams();
            byte? iceP_p3;
            var ret = obj.opByteReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeByte(1, ret);
            ostr.writeByte(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBool(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool? iceP_p1;
            iceP_p1 = istr.readBool(2);
            inS.endReadParams();
            bool? iceP_p3;
            var ret = obj.opBool(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(1, ret);
            ostr.writeBool(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBoolReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool? iceP_p1;
            iceP_p1 = istr.readBool(2);
            inS.endReadParams();
            bool? iceP_p3;
            var ret = obj.opBoolReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(1, ret);
            ostr.writeBool(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opShort(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            short? iceP_p1;
            iceP_p1 = istr.readShort(2);
            inS.endReadParams();
            short? iceP_p3;
            var ret = obj.opShort(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeShort(1, ret);
            ostr.writeShort(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opShortReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            short? iceP_p1;
            iceP_p1 = istr.readShort(2);
            inS.endReadParams();
            short? iceP_p3;
            var ret = obj.opShortReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeShort(1, ret);
            ostr.writeShort(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opInt(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int? iceP_p1;
            iceP_p1 = istr.readInt(2);
            inS.endReadParams();
            int? iceP_p3;
            var ret = obj.opInt(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(1, ret);
            ostr.writeInt(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opIntReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int? iceP_p1;
            iceP_p1 = istr.readInt(2);
            inS.endReadParams();
            int? iceP_p3;
            var ret = obj.opIntReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(1, ret);
            ostr.writeInt(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opLong(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long? iceP_p1;
            iceP_p1 = istr.readLong(1);
            inS.endReadParams();
            long? iceP_p3;
            var ret = obj.opLong(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeLong(2, iceP_p3);
            ostr.writeLong(3, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opLongReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long? iceP_p1;
            iceP_p1 = istr.readLong(1);
            inS.endReadParams();
            long? iceP_p3;
            var ret = obj.opLongReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeLong(2, iceP_p3);
            ostr.writeLong(3, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFloat(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            float? iceP_p1;
            iceP_p1 = istr.readFloat(2);
            inS.endReadParams();
            float? iceP_p3;
            var ret = obj.opFloat(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(1, ret);
            ostr.writeFloat(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFloatReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            float? iceP_p1;
            iceP_p1 = istr.readFloat(2);
            inS.endReadParams();
            float? iceP_p3;
            var ret = obj.opFloatReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(1, ret);
            ostr.writeFloat(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opDouble(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            double? iceP_p1;
            iceP_p1 = istr.readDouble(2);
            inS.endReadParams();
            double? iceP_p3;
            var ret = obj.opDouble(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeDouble(1, ret);
            ostr.writeDouble(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opDoubleReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            double? iceP_p1;
            iceP_p1 = istr.readDouble(2);
            inS.endReadParams();
            double? iceP_p3;
            var ret = obj.opDoubleReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeDouble(1, ret);
            ostr.writeDouble(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opString(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string? iceP_p1;
            iceP_p1 = istr.readString(2);
            inS.endReadParams();
            string? iceP_p3;
            var ret = obj.opString(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeString(1, ret);
            ostr.writeString(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string? iceP_p1;
            iceP_p1 = istr.readString(2);
            inS.endReadParams();
            string? iceP_p3;
            var ret = obj.opStringReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeString(1, ret);
            ostr.writeString(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opMyEnum(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            MyEnum? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.Size))
            {
                MyEnum tmpVal;
                tmpVal = (MyEnum)istr.readEnum(0);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            MyEnum? iceP_p3;
            var ret = obj.opMyEnum(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null)
            {
                ostr.writeEnum(1, (int)ret.Value, 1);
            }
            if (iceP_p3 is not null)
            {
                ostr.writeEnum(3, (int)iceP_p3.Value, 1);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opMyEnumReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            MyEnum? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.Size))
            {
                MyEnum tmpVal;
                tmpVal = (MyEnum)istr.readEnum(0);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            MyEnum? iceP_p3;
            var ret = obj.opMyEnumReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null)
            {
                ostr.writeEnum(1, (int)ret.Value, 1);
            }
            if (iceP_p3 is not null)
            {
                ostr.writeEnum(3, (int)iceP_p3.Value, 1);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opSmallStruct(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SmallStruct? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                SmallStruct tmpVal;
                tmpVal = new SmallStruct(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            SmallStruct? iceP_p3;
            var ret = obj.opSmallStruct(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(1);
                ret.Value.ice_writeMembers(ostr);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(1);
                iceP_p3.Value.ice_writeMembers(ostr);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opSmallStructReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SmallStruct? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                SmallStruct tmpVal;
                tmpVal = new SmallStruct(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            SmallStruct? iceP_p3;
            var ret = obj.opSmallStructReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(1);
                ret.Value.ice_writeMembers(ostr);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(1);
                iceP_p3.Value.ice_writeMembers(ostr);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFixedStruct(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            FixedStruct? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                FixedStruct tmpVal;
                tmpVal = new FixedStruct(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            FixedStruct? iceP_p3;
            var ret = obj.opFixedStruct(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(4);
                ret.Value.ice_writeMembers(ostr);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(4);
                iceP_p3.Value.ice_writeMembers(ostr);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFixedStructReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            FixedStruct? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                FixedStruct tmpVal;
                tmpVal = new FixedStruct(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            FixedStruct? iceP_p3;
            var ret = obj.opFixedStructReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(4);
                ret.Value.ice_writeMembers(ostr);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(4);
                iceP_p3.Value.ice_writeMembers(ostr);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opVarStruct(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            VarStruct? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                VarStruct tmpVal;
                tmpVal = new VarStruct(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            VarStruct? iceP_p3;
            var ret = obj.opVarStruct(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                VarStruct.ice_write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                VarStruct.ice_write(ostr, iceP_p3);
                ostr.endSize(pos);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opVarStructReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            VarStruct? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                VarStruct tmpVal;
                tmpVal = new VarStruct(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            VarStruct? iceP_p3;
            var ret = obj.opVarStructReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                VarStruct.ice_write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                VarStruct.ice_write(ostr, iceP_p3);
                ostr.endSize(pos);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opMyInterfaceProxy(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            MyInterfacePrx? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                MyInterfacePrx? tmpVal;
                tmpVal = MyInterfacePrxHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            MyInterfacePrx? iceP_p3;
            var ret = obj.opMyInterfaceProxy(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                MyInterfacePrxHelper.write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                MyInterfacePrxHelper.write(ostr, iceP_p3);
                ostr.endSize(pos);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opMyInterfaceProxyReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            MyInterfacePrx? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                MyInterfacePrx? tmpVal;
                tmpVal = MyInterfacePrxHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            MyInterfacePrx? iceP_p3;
            var ret = obj.opMyInterfaceProxyReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                MyInterfacePrxHelper.write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                MyInterfacePrxHelper.write(ostr, iceP_p3);
                ostr.endSize(pos);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opOneOptional(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            OneOptional? iceP_p1 = null;
            istr.readValue((OneOptional? v) => { iceP_p1 = v; });
            istr.readPendingValues();
            inS.endReadParams();
            OneOptional? iceP_p3;
            var ret = obj.opOneOptional(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_p3);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteSeq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal;
                tmpVal = ByteSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            byte[]? iceP_p3;
            var ret = obj.opByteSeq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeByteSeq(1, ret);
            ostr.writeByteSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opByteSeqReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal;
                tmpVal = ByteSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            byte[]? iceP_p3;
            var ret = obj.opByteSeqReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeByteSeq(1, ret);
            ostr.writeByteSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBoolSeq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                bool[] tmpVal;
                tmpVal = BoolSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            bool[]? iceP_p3;
            var ret = obj.opBoolSeq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeBoolSeq(1, ret);
            ostr.writeBoolSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBoolSeqReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            bool[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                bool[] tmpVal;
                tmpVal = BoolSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            bool[]? iceP_p3;
            var ret = obj.opBoolSeqReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeBoolSeq(1, ret);
            ostr.writeBoolSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opShortSeq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            short[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                short[] tmpVal;
                tmpVal = ShortSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            short[]? iceP_p3;
            var ret = obj.opShortSeq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeShortSeq(1, ret);
            ostr.writeShortSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opShortSeqReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            short[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                short[] tmpVal;
                tmpVal = ShortSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            short[]? iceP_p3;
            var ret = obj.opShortSeqReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeShortSeq(1, ret);
            ostr.writeShortSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opIntSeq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                int[] tmpVal;
                tmpVal = IntSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            int[]? iceP_p3;
            var ret = obj.opIntSeq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeIntSeq(1, ret);
            ostr.writeIntSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opIntSeqReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                int[] tmpVal;
                tmpVal = IntSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            int[]? iceP_p3;
            var ret = obj.opIntSeqReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeIntSeq(1, ret);
            ostr.writeIntSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opLongSeq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                long[] tmpVal;
                tmpVal = LongSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            long[]? iceP_p3;
            var ret = obj.opLongSeq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeLongSeq(1, ret);
            ostr.writeLongSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opLongSeqReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            long[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                long[] tmpVal;
                tmpVal = LongSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            long[]? iceP_p3;
            var ret = obj.opLongSeqReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeLongSeq(1, ret);
            ostr.writeLongSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFloatSeq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            float[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                float[] tmpVal;
                tmpVal = FloatSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            float[]? iceP_p3;
            var ret = obj.opFloatSeq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeFloatSeq(1, ret);
            ostr.writeFloatSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFloatSeqReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            float[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                float[] tmpVal;
                tmpVal = FloatSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            float[]? iceP_p3;
            var ret = obj.opFloatSeqReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeFloatSeq(1, ret);
            ostr.writeFloatSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opDoubleSeq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            double[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                double[] tmpVal;
                tmpVal = DoubleSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            double[]? iceP_p3;
            var ret = obj.opDoubleSeq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeDoubleSeq(1, ret);
            ostr.writeDoubleSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opDoubleSeqReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            double[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                double[] tmpVal;
                tmpVal = DoubleSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            double[]? iceP_p3;
            var ret = obj.opDoubleSeqReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeDoubleSeq(1, ret);
            ostr.writeDoubleSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringSeq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                string[] tmpVal;
                tmpVal = StringSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            string[]? iceP_p3;
            var ret = obj.opStringSeq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeStringSeq(1, ret);
            ostr.writeStringSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringSeqReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                string[] tmpVal;
                tmpVal = StringSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            string[]? iceP_p3;
            var ret = obj.opStringSeqReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeStringSeq(1, ret);
            ostr.writeStringSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opSmallStructSeq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SmallStruct[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                SmallStruct[] tmpVal;
                tmpVal = SmallStructSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            SmallStruct[]? iceP_p3;
            var ret = obj.opSmallStructSeq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                SmallStructSeqHelper.write(ostr, ret);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                SmallStructSeqHelper.write(ostr, iceP_p3);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opSmallStructSeqReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SmallStruct[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                SmallStruct[] tmpVal;
                tmpVal = SmallStructSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            SmallStruct[]? iceP_p3;
            var ret = obj.opSmallStructSeqReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                SmallStructSeqHelper.write(ostr, ret);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                SmallStructSeqHelper.write(ostr, iceP_p3);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opSmallStructList(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SmallStruct[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                SmallStruct[] tmpVal;
                tmpVal = SmallStructListHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            SmallStruct[]? iceP_p3;
            var ret = obj.opSmallStructList(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                SmallStructListHelper.write(ostr, ret);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                SmallStructListHelper.write(ostr, iceP_p3);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opSmallStructListReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SmallStruct[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                SmallStruct[] tmpVal;
                tmpVal = SmallStructListHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            SmallStruct[]? iceP_p3;
            var ret = obj.opSmallStructListReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                SmallStructListHelper.write(ostr, ret);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                SmallStructListHelper.write(ostr, iceP_p3);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFixedStructSeq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            FixedStruct[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                FixedStruct[] tmpVal;
                tmpVal = FixedStructSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            FixedStruct[]? iceP_p3;
            var ret = obj.opFixedStructSeq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(ret.Length * 4 + (ret.Length > 254 ? 5 : 1));
                FixedStructSeqHelper.write(ostr, ret);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(iceP_p3.Length * 4 + (iceP_p3.Length > 254 ? 5 : 1));
                FixedStructSeqHelper.write(ostr, iceP_p3);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFixedStructSeqReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            FixedStruct[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                FixedStruct[] tmpVal;
                tmpVal = FixedStructSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            FixedStruct[]? iceP_p3;
            var ret = obj.opFixedStructSeqReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(ret.Length * 4 + (ret.Length > 254 ? 5 : 1));
                FixedStructSeqHelper.write(ostr, ret);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(iceP_p3.Length * 4 + (iceP_p3.Length > 254 ? 5 : 1));
                FixedStructSeqHelper.write(ostr, iceP_p3);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFixedStructList(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            FixedStruct[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                FixedStruct[] tmpVal;
                tmpVal = FixedStructListHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            FixedStruct[]? iceP_p3;
            var ret = obj.opFixedStructList(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(ret.Length * 4 + (ret.Length > 254 ? 5 : 1));
                FixedStructListHelper.write(ostr, ret);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(iceP_p3.Length * 4 + (iceP_p3.Length > 254 ? 5 : 1));
                FixedStructListHelper.write(ostr, iceP_p3);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opFixedStructListReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            FixedStruct[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                FixedStruct[] tmpVal;
                tmpVal = FixedStructListHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            FixedStruct[]? iceP_p3;
            var ret = obj.opFixedStructListReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(ret.Length * 4 + (ret.Length > 254 ? 5 : 1));
                FixedStructListHelper.write(ostr, ret);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(iceP_p3.Length * 4 + (iceP_p3.Length > 254 ? 5 : 1));
                FixedStructListHelper.write(ostr, iceP_p3);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opVarStructSeq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            VarStruct[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                VarStruct[] tmpVal;
                tmpVal = VarStructSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            VarStruct[]? iceP_p3;
            var ret = obj.opVarStructSeq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                VarStructSeqHelper.write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                VarStructSeqHelper.write(ostr, iceP_p3);
                ostr.endSize(pos);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opVarStructSeqReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            VarStruct[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                VarStruct[] tmpVal;
                tmpVal = VarStructSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            VarStruct[]? iceP_p3;
            var ret = obj.opVarStructSeqReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                VarStructSeqHelper.write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                VarStructSeqHelper.write(ostr, iceP_p3);
                ostr.endSize(pos);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opSerializable(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal;
                tmpVal = SerializableHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            byte[]? iceP_p3;
            var ret = obj.opSerializable(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeByteSeq(1, ret);
            ostr.writeByteSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opSerializableReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal;
                tmpVal = SerializableHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            byte[]? iceP_p3;
            var ret = obj.opSerializableReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            ostr.writeByteSeq(1, ret);
            ostr.writeByteSeq(3, iceP_p3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opIntIntDict(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<int, int>? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                global::System.Collections.Generic.Dictionary<int, int> tmpVal = new global::System.Collections.Generic.Dictionary<int, int>();
                tmpVal = IntIntDictHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            global::System.Collections.Generic.Dictionary<int, int>? iceP_p3;
            var ret = obj.opIntIntDict(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(ret.Count * 8 + (ret.Count > 254 ? 5 : 1));
                IntIntDictHelper.write(ostr, ret);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(iceP_p3.Count * 8 + (iceP_p3.Count > 254 ? 5 : 1));
                IntIntDictHelper.write(ostr, iceP_p3);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opIntIntDictReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<int, int>? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                global::System.Collections.Generic.Dictionary<int, int> tmpVal = new global::System.Collections.Generic.Dictionary<int, int>();
                tmpVal = IntIntDictHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            global::System.Collections.Generic.Dictionary<int, int>? iceP_p3;
            var ret = obj.opIntIntDictReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(ret.Count * 8 + (ret.Count > 254 ? 5 : 1));
                IntIntDictHelper.write(ostr, ret);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.VSize))
            {
                ostr.writeSize(iceP_p3.Count * 8 + (iceP_p3.Count > 254 ? 5 : 1));
                IntIntDictHelper.write(ostr, iceP_p3);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringIntDict(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<string, int>? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                tmpVal = StringIntDictHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            global::System.Collections.Generic.Dictionary<string, int>? iceP_p3;
            var ret = obj.opStringIntDict(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                StringIntDictHelper.write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                StringIntDictHelper.write(ostr, iceP_p3);
                ostr.endSize(pos);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opStringIntDictReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<string, int>? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                tmpVal = StringIntDictHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            global::System.Collections.Generic.Dictionary<string, int>? iceP_p3;
            var ret = obj.opStringIntDictReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                StringIntDictHelper.write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                StringIntDictHelper.write(ostr, iceP_p3);
                ostr.endSize(pos);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opIntOneOptionalDict(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<int, OneOptional?>? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                global::System.Collections.Generic.Dictionary<int, OneOptional?> tmpVal = new global::System.Collections.Generic.Dictionary<int, OneOptional?>();
                tmpVal = IntOneOptionalDictHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            global::System.Collections.Generic.Dictionary<int, OneOptional?>? iceP_p3;
            var ret = obj.opIntOneOptionalDict(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                IntOneOptionalDictHelper.write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                IntOneOptionalDictHelper.write(ostr, iceP_p3);
                ostr.endSize(pos);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opIntOneOptionalDictReq(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<int, OneOptional?>? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                global::System.Collections.Generic.Dictionary<int, OneOptional?> tmpVal = new global::System.Collections.Generic.Dictionary<int, OneOptional?>();
                tmpVal = IntOneOptionalDictHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            global::System.Collections.Generic.Dictionary<int, OneOptional?>? iceP_p3;
            var ret = obj.opIntOneOptionalDictReq(iceP_p1, out iceP_p3, current);
            var ostr = inS.startWriteParams();
            if (ret is not null && ostr.writeOptional(1, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                IntOneOptionalDictHelper.write(ostr, ret);
                ostr.endSize(pos);
            }
            if (iceP_p3 is not null && ostr.writeOptional(3, global::Ice.OptionalFormat.FSize))
            {
                int pos = ostr.startSize();
                IntOneOptionalDictHelper.write(ostr, iceP_p3);
                ostr.endSize(pos);
            }
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opClassAndUnknownOptional(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            A? iceP_p = null;
            istr.readValue((A? v) => { iceP_p = v; });
            istr.readPendingValues();
            inS.endReadParams();
            obj.opClassAndUnknownOptional(iceP_p, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opG(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            G? iceP_g = null;
            istr.readValue((G? v) => { iceP_g = v; });
            istr.readPendingValues();
            inS.endReadParams();
            var ret = obj.opG(iceP_g, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opVoid(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.opVoid(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opMStruct1(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setMarshaledResult(obj.opMStruct1(current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opMStruct2(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SmallStruct? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.VSize))
            {
                istr.skipSize();
                SmallStruct tmpVal;
                tmpVal = new SmallStruct(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            return inS.setMarshaledResult(obj.opMStruct2(iceP_p1, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opMSeq1(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setMarshaledResult(obj.opMSeq1(current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opMSeq2(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string[]? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                string[] tmpVal;
                tmpVal = StringSeqHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            return inS.setMarshaledResult(obj.opMSeq2(iceP_p1, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opMDict1(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setMarshaledResult(obj.opMDict1(current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opMDict2(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<string, int>? iceP_p1;
            if (istr.readOptional(2, global::Ice.OptionalFormat.FSize))
            {
                istr.skip(4);
                global::System.Collections.Generic.Dictionary<string, int> tmpVal = new global::System.Collections.Generic.Dictionary<string, int>();
                tmpVal = StringIntDictHelper.read(istr);
                iceP_p1 = tmpVal;
            }
            else
            {
                iceP_p1 = null;
            }
            inS.endReadParams();
            return inS.setMarshaledResult(obj.opMDict2(iceP_p1, current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_supportsRequiredParams(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.supportsRequiredParams(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_supportsJavaSerializable(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.supportsJavaSerializable(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_supportsCsharpSerializable(Initial obj, global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.supportsCsharpSerializable(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "opBool",
            "opBoolReq",
            "opBoolSeq",
            "opBoolSeqReq",
            "opByte",
            "opByteReq",
            "opByteSeq",
            "opByteSeqReq",
            "opClassAndUnknownOptional",
            "opDerivedException",
            "opDouble",
            "opDoubleReq",
            "opDoubleSeq",
            "opDoubleSeqReq",
            "opFixedStruct",
            "opFixedStructList",
            "opFixedStructListReq",
            "opFixedStructReq",
            "opFixedStructSeq",
            "opFixedStructSeqReq",
            "opFloat",
            "opFloatReq",
            "opFloatSeq",
            "opFloatSeqReq",
            "opG",
            "opInt",
            "opIntIntDict",
            "opIntIntDictReq",
            "opIntOneOptionalDict",
            "opIntOneOptionalDictReq",
            "opIntReq",
            "opIntSeq",
            "opIntSeqReq",
            "opLong",
            "opLongReq",
            "opLongSeq",
            "opLongSeqReq",
            "opMDict1",
            "opMDict2",
            "opMSeq1",
            "opMSeq2",
            "opMStruct1",
            "opMStruct2",
            "opMyEnum",
            "opMyEnumReq",
            "opMyInterfaceProxy",
            "opMyInterfaceProxyReq",
            "opOneOptional",
            "opOptionalException",
            "opRequiredException",
            "opSerializable",
            "opSerializableReq",
            "opShort",
            "opShortReq",
            "opShortSeq",
            "opShortSeqReq",
            "opSmallStruct",
            "opSmallStructList",
            "opSmallStructListReq",
            "opSmallStructReq",
            "opSmallStructSeq",
            "opSmallStructSeqReq",
            "opString",
            "opStringIntDict",
            "opStringIntDictReq",
            "opStringReq",
            "opStringSeq",
            "opStringSeqReq",
            "opVarStruct",
            "opVarStructReq",
            "opVarStructSeq",
            "opVarStructSeqReq",
            "opVoid",
            "pingPong",
            "shutdown",
            "supportsCsharpSerializable",
            "supportsJavaSerializable",
            "supportsRequiredParams"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::Ice.Internal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::Ice.UtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_opBool(this, inS, current);
                }
                case 5:
                {
                    return iceD_opBoolReq(this, inS, current);
                }
                case 6:
                {
                    return iceD_opBoolSeq(this, inS, current);
                }
                case 7:
                {
                    return iceD_opBoolSeqReq(this, inS, current);
                }
                case 8:
                {
                    return iceD_opByte(this, inS, current);
                }
                case 9:
                {
                    return iceD_opByteReq(this, inS, current);
                }
                case 10:
                {
                    return iceD_opByteSeq(this, inS, current);
                }
                case 11:
                {
                    return iceD_opByteSeqReq(this, inS, current);
                }
                case 12:
                {
                    return iceD_opClassAndUnknownOptional(this, inS, current);
                }
                case 13:
                {
                    return iceD_opDerivedException(this, inS, current);
                }
                case 14:
                {
                    return iceD_opDouble(this, inS, current);
                }
                case 15:
                {
                    return iceD_opDoubleReq(this, inS, current);
                }
                case 16:
                {
                    return iceD_opDoubleSeq(this, inS, current);
                }
                case 17:
                {
                    return iceD_opDoubleSeqReq(this, inS, current);
                }
                case 18:
                {
                    return iceD_opFixedStruct(this, inS, current);
                }
                case 19:
                {
                    return iceD_opFixedStructList(this, inS, current);
                }
                case 20:
                {
                    return iceD_opFixedStructListReq(this, inS, current);
                }
                case 21:
                {
                    return iceD_opFixedStructReq(this, inS, current);
                }
                case 22:
                {
                    return iceD_opFixedStructSeq(this, inS, current);
                }
                case 23:
                {
                    return iceD_opFixedStructSeqReq(this, inS, current);
                }
                case 24:
                {
                    return iceD_opFloat(this, inS, current);
                }
                case 25:
                {
                    return iceD_opFloatReq(this, inS, current);
                }
                case 26:
                {
                    return iceD_opFloatSeq(this, inS, current);
                }
                case 27:
                {
                    return iceD_opFloatSeqReq(this, inS, current);
                }
                case 28:
                {
                    return iceD_opG(this, inS, current);
                }
                case 29:
                {
                    return iceD_opInt(this, inS, current);
                }
                case 30:
                {
                    return iceD_opIntIntDict(this, inS, current);
                }
                case 31:
                {
                    return iceD_opIntIntDictReq(this, inS, current);
                }
                case 32:
                {
                    return iceD_opIntOneOptionalDict(this, inS, current);
                }
                case 33:
                {
                    return iceD_opIntOneOptionalDictReq(this, inS, current);
                }
                case 34:
                {
                    return iceD_opIntReq(this, inS, current);
                }
                case 35:
                {
                    return iceD_opIntSeq(this, inS, current);
                }
                case 36:
                {
                    return iceD_opIntSeqReq(this, inS, current);
                }
                case 37:
                {
                    return iceD_opLong(this, inS, current);
                }
                case 38:
                {
                    return iceD_opLongReq(this, inS, current);
                }
                case 39:
                {
                    return iceD_opLongSeq(this, inS, current);
                }
                case 40:
                {
                    return iceD_opLongSeqReq(this, inS, current);
                }
                case 41:
                {
                    return iceD_opMDict1(this, inS, current);
                }
                case 42:
                {
                    return iceD_opMDict2(this, inS, current);
                }
                case 43:
                {
                    return iceD_opMSeq1(this, inS, current);
                }
                case 44:
                {
                    return iceD_opMSeq2(this, inS, current);
                }
                case 45:
                {
                    return iceD_opMStruct1(this, inS, current);
                }
                case 46:
                {
                    return iceD_opMStruct2(this, inS, current);
                }
                case 47:
                {
                    return iceD_opMyEnum(this, inS, current);
                }
                case 48:
                {
                    return iceD_opMyEnumReq(this, inS, current);
                }
                case 49:
                {
                    return iceD_opMyInterfaceProxy(this, inS, current);
                }
                case 50:
                {
                    return iceD_opMyInterfaceProxyReq(this, inS, current);
                }
                case 51:
                {
                    return iceD_opOneOptional(this, inS, current);
                }
                case 52:
                {
                    return iceD_opOptionalException(this, inS, current);
                }
                case 53:
                {
                    return iceD_opRequiredException(this, inS, current);
                }
                case 54:
                {
                    return iceD_opSerializable(this, inS, current);
                }
                case 55:
                {
                    return iceD_opSerializableReq(this, inS, current);
                }
                case 56:
                {
                    return iceD_opShort(this, inS, current);
                }
                case 57:
                {
                    return iceD_opShortReq(this, inS, current);
                }
                case 58:
                {
                    return iceD_opShortSeq(this, inS, current);
                }
                case 59:
                {
                    return iceD_opShortSeqReq(this, inS, current);
                }
                case 60:
                {
                    return iceD_opSmallStruct(this, inS, current);
                }
                case 61:
                {
                    return iceD_opSmallStructList(this, inS, current);
                }
                case 62:
                {
                    return iceD_opSmallStructListReq(this, inS, current);
                }
                case 63:
                {
                    return iceD_opSmallStructReq(this, inS, current);
                }
                case 64:
                {
                    return iceD_opSmallStructSeq(this, inS, current);
                }
                case 65:
                {
                    return iceD_opSmallStructSeqReq(this, inS, current);
                }
                case 66:
                {
                    return iceD_opString(this, inS, current);
                }
                case 67:
                {
                    return iceD_opStringIntDict(this, inS, current);
                }
                case 68:
                {
                    return iceD_opStringIntDictReq(this, inS, current);
                }
                case 69:
                {
                    return iceD_opStringReq(this, inS, current);
                }
                case 70:
                {
                    return iceD_opStringSeq(this, inS, current);
                }
                case 71:
                {
                    return iceD_opStringSeqReq(this, inS, current);
                }
                case 72:
                {
                    return iceD_opVarStruct(this, inS, current);
                }
                case 73:
                {
                    return iceD_opVarStructReq(this, inS, current);
                }
                case 74:
                {
                    return iceD_opVarStructSeq(this, inS, current);
                }
                case 75:
                {
                    return iceD_opVarStructSeqReq(this, inS, current);
                }
                case 76:
                {
                    return iceD_opVoid(this, inS, current);
                }
                case 77:
                {
                    return iceD_pingPong(this, inS, current);
                }
                case 78:
                {
                    return iceD_shutdown(this, inS, current);
                }
                case 79:
                {
                    return iceD_supportsCsharpSerializable(this, inS, current);
                }
                case 80:
                {
                    return iceD_supportsJavaSerializable(this, inS, current);
                }
                case 81:
                {
                    return iceD_supportsRequiredParams(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
