//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServerPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TypeId_56
    {
        public const string typeId = "::Test::CompactPDerived";
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class SBase : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string sb;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SBase()
        {
            this.sb = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SBase(string sb)
        {
            this.sb = sb;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::SBase";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(sb);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            sb = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class SBSKnownDerived : SBase
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string sbskd;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SBSKnownDerived() : base()
        {
            this.sbskd = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SBSKnownDerived(string sb, string sbskd) : base(sb)
        {
            this.sbskd = sbskd;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::SBSKnownDerived";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(sbskd);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            sbskd = istr_.readString();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class B : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string sb;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B pb;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B()
        {
            this.sb = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B(string sb, B pb)
        {
            this.sb = sb;
            this.pb = pb;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::B";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(sb);
            ostr_.writeValue(pb);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            sb = istr_.readString();
            istr_.readValue((B v) => { this.pb = v; });
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class D1 : B
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string sd1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B pd1;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D1() : base()
        {
            this.sd1 = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D1(string sb, B pb, string sd1, B pd1) : base(sb, pb)
        {
            this.sd1 = sd1;
            this.pd1 = pd1;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::D1";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(sd1);
            ostr_.writeValue(pd1);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            sd1 = istr_.readString();
            istr_.readValue((B v) => { this.pd1 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class SS1 : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B[] s;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SS1()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SS1(B[] s)
        {
            this.s = s;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::SS1";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            BSeqHelper.write(ostr_, s);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            s = BSeqHelper.read(istr_);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class SS2 : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B[] s;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SS2()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SS2(B[] s)
        {
            this.s = s;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::SS2";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            BSeqHelper.write(ostr_, s);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            s = BSeqHelper.read(istr_);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class SS3 : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SS1 c1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SS2 c2;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SS3()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SS3(SS1 c1, SS2 c2)
        {
            this.c1 = c1;
            this.c2 = c2;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::SS3");
            global::IceInternal.HashUtil.hashAdd(ref h_, c1);
            global::IceInternal.HashUtil.hashAdd(ref h_, c2);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            SS3 o = (SS3)other;
            if(this.c1 == null)
            {
                if(o.c1 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.c1.Equals(o.c1))
                {
                    return false;
                }
            }
            if(this.c2 == null)
            {
                if(o.c2 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.c2.Equals(o.c2))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator==(SS3 lhs, SS3 rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator!=(SS3 lhs, SS3 rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeValue(this.c1);
            ostr.writeValue(this.c2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            istr.readValue((SS1 v) => { this.c1 = v; });
            istr.readValue((SS2 v) => { this.c2 = v; });
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, SS3 v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static SS3 ice_read(global::Ice.InputStream istr)
        {
            var v = new SS3();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly SS3 _nullMarshalValue = new SS3();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class BaseException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string sbe;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B pb;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM()
        {
            this.sbe = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM(string sbe, B pb)
        {
            this.sbe = sbe;
            this.pb = pb;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseException(string sbe, B pb)
        {
            _initDM(sbe, pb);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public BaseException(string sbe, B pb, global::System.Exception ex) : base(ex)
        {
            _initDM(sbe, pb);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::BaseException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::BaseException", -1, true);
            ostr_.writeString(sbe);
            ostr_.writeValue(pb);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            sbe = istr_.readString();
            istr_.readValue((B v) => { this.pb = v; });
            istr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool iceUsesClasses()
        {
            return true;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class DerivedException : BaseException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string sde;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D1 pd1;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM()
        {
            this.sde = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public DerivedException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public DerivedException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM(string sde, D1 pd1)
        {
            this.sde = sde;
            this.pd1 = pd1;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public DerivedException(string sbe, B pb, string sde, D1 pd1) : base(sbe, pb)
        {
            _initDM(sde, pd1);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public DerivedException(string sbe, B pb, string sde, D1 pd1, global::System.Exception ex) : base(sbe, pb, ex)
        {
            _initDM(sde, pd1);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::DerivedException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::DerivedException", -1, false);
            ostr_.writeString(sde);
            ostr_.writeValue(pd1);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            sde = istr_.readString();
            istr_.readValue((D1 v) => { this.pd1 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class PBase : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int pi;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PBase()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PBase(int pi)
        {
            this.pi = pi;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::PBase";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(pi);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            pi = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Preserved : PBase
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string ps;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Preserved() : base()
        {
            this.ps = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Preserved(int pi, string ps) : base(pi)
        {
            this.ps = ps;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::Preserved";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(ps);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            ps = istr_.readString();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class PDerived : Preserved
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PBase pb;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PDerived() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PDerived(int pi, string ps, PBase pb) : base(pi, ps)
        {
            this.pb = pb;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::PDerived";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeValue(pb);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((PBase v) => { this.pb = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class CompactPDerived : Preserved
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PBase pb;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public CompactPDerived() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public CompactPDerived(int pi, string ps, PBase pb) : base(pi, ps)
        {
            this.pb = pb;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::CompactPDerived";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), 56, false);
            ostr_.writeValue(pb);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((PBase v) => { this.pb = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class PNode : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PNode next;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PNode()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PNode(PNode next)
        {
            this.next = next;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::PNode";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(next);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((PNode v) => { this.next = v; });
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class PreservedException : global::Ice.UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PreservedException()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PreservedException(global::System.Exception ex) : base(ex)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::PreservedException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::PreservedException", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface TestIntf : global::Ice.Object, TestIntfOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class SBSUnknownDerived : SBase
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string sbsud;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SBSUnknownDerived() : base()
        {
            this.sbsud = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SBSUnknownDerived(string sb, string sbsud) : base(sb)
        {
            this.sbsud = sbsud;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::SBSUnknownDerived";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(sbsud);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            sbsud = istr_.readString();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class SUnknown : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string su;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SUnknown cycle;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SUnknown()
        {
            this.su = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SUnknown(string su, SUnknown cycle)
        {
            this.su = su;
            this.cycle = cycle;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::SUnknown";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(su);
            ostr_.writeValue(cycle);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            su = istr_.readString();
            istr_.readValue((SUnknown v) => { this.cycle = v; });
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class D2 : B
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string sd2;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B pd2;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D2() : base()
        {
            this.sd2 = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D2(string sb, B pb, string sd2, B pd2) : base(sb, pb)
        {
            this.sd2 = sd2;
            this.pd2 = pd2;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::D2";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(sd2);
            ostr_.writeValue(pd2);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            sd2 = istr_.readString();
            istr_.readValue((B v) => { this.pd2 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class D4 : B
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B p1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B p2;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D4() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D4(string sb, B pb, B p1, B p2) : base(sb, pb)
        {
            this.p1 = p1;
            this.p2 = p2;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::D4";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeValue(p1);
            ostr_.writeValue(p2);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((B v) => { this.p1 = v; });
            istr_.readValue((B v) => { this.p2 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class UnknownDerivedException : BaseException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string sude;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D2 pd2;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM()
        {
            this.sude = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public UnknownDerivedException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public UnknownDerivedException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM(string sude, D2 pd2)
        {
            this.sude = sude;
            this.pd2 = pd2;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public UnknownDerivedException(string sbe, B pb, string sude, D2 pd2) : base(sbe, pb)
        {
            _initDM(sude, pd2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public UnknownDerivedException(string sbe, B pb, string sude, D2 pd2, global::System.Exception ex) : base(sbe, pb, ex)
        {
            _initDM(sude, pd2);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::UnknownDerivedException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::UnknownDerivedException", -1, false);
            ostr_.writeString(sude);
            ostr_.writeValue(pd2);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            sude = istr_.readString();
            istr_.readValue((D2 v) => { this.pd2 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class MyClass : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int i;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyClass()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyClass(int i)
        {
            this.i = i;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::MyClass";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(i);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            i = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class PSUnknown : Preserved
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string psu;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PNode graph;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public MyClass cl;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PSUnknown() : base()
        {
            this.psu = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PSUnknown(int pi, string ps, string psu, PNode graph, MyClass cl) : base(pi, ps)
        {
            this.psu = psu;
            this.graph = graph;
            this.cl = cl;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::PSUnknown";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(psu);
            ostr_.writeValue(graph);
            ostr_.writeValue(cl);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            psu = istr_.readString();
            istr_.readValue((PNode v) => { this.graph = v; });
            istr_.readValue((MyClass v) => { this.cl = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class PSUnknown2 : Preserved
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PBase pb;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PSUnknown2() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PSUnknown2(int pi, string ps, PBase pb) : base(pi, ps)
        {
            this.pb = pb;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::PSUnknown2";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeValue(pb);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((PBase v) => { this.pb = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class PSUnknownException : PreservedException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PSUnknown2 p;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PSUnknownException()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PSUnknownException(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM(PSUnknown2 p)
        {
            this.p = p;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PSUnknownException(PSUnknown2 p)
        {
            _initDM(p);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public PSUnknownException(PSUnknown2 p, global::System.Exception ex) : base(ex)
        {
            _initDM(p);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::PSUnknownException";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::PSUnknownException", -1, false);
            ostr_.writeValue(p);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((PSUnknown2 v) => { this.p = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool iceUsesClasses()
        {
            return true;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Hidden : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Forward f;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Hidden()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Hidden(Forward f)
        {
            this.f = f;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::Hidden";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(f);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((Forward v) => { this.f = v; });
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Forward : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Hidden h;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Forward()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Forward(Hidden h)
        {
            this.h = h;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::Forward";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(h);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((Hidden v) => { this.h = v; });
            istr_.endSlice();
        }

        #endregion
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_SBaseAsObject(global::Ice.Value ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_SBaseAsSBase(SBase ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_SBSKnownDerivedAsSBase(SBase ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_SBSKnownDerivedAsSBSKnownDerived(SBSKnownDerived ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_SBSUnknownDerivedAsSBase(SBase ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_SBSUnknownDerivedAsSBaseCompact(SBase ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_SUnknownAsObject(global::Ice.Value ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_checkSUnknown();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_oneElementCycle(B ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_twoElementCycle(B ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_D1AsB(B ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_D1AsD1(D1 ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_D2AsB(B ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_paramTest1(B p1, B p2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_paramTest2(B p2, B p1);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_paramTest3(B ret, B p1, B p2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_paramTest4(B ret, B p);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_returnTest1(B ret, B p1, B p2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_returnTest2(B ret, B p2, B p1);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_returnTest3(B ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_sequenceTest(SS3 ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_dictionaryTest(global::System.Collections.Generic.Dictionary<int, B> ret, global::System.Collections.Generic.Dictionary<int, B> bout);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_exchangePBase(PBase ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_PBSUnknownAsPreserved(Preserved ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_checkPBSUnknown();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_PBSUnknownAsPreservedWithGraph(Preserved ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_checkPBSUnknownWithGraph();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_PBSUnknown2AsPreservedWithGraph(Preserved ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_checkPBSUnknown2WithGraph();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_exchangePNode(PNode ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_throwBaseAsBase();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_throwDerivedAsBase();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_throwDerivedAsDerived();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_throwUnknownDerivedAsBase();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_throwPreservedException();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_useForward(Forward f);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_TestIntf_shutdown();
}

namespace Test
{
    public struct TestIntf_ParamTest1Result
    {
        public TestIntf_ParamTest1Result(B p1, B p2)
        {
            this.p1 = p1;
            this.p2 = p2;
        }

        public B p1;
        public B p2;
    }

    public struct TestIntf_ParamTest2Result
    {
        public TestIntf_ParamTest2Result(B p2, B p1)
        {
            this.p2 = p2;
            this.p1 = p1;
        }

        public B p2;
        public B p1;
    }

    public struct TestIntf_ParamTest3Result
    {
        public TestIntf_ParamTest3Result(B returnValue, B p1, B p2)
        {
            this.returnValue = returnValue;
            this.p1 = p1;
            this.p2 = p2;
        }

        public B returnValue;
        public B p1;
        public B p2;
    }

    public struct TestIntf_ParamTest4Result
    {
        public TestIntf_ParamTest4Result(B returnValue, B p)
        {
            this.returnValue = returnValue;
            this.p = p;
        }

        public B returnValue;
        public B p;
    }

    public struct TestIntf_ReturnTest1Result
    {
        public TestIntf_ReturnTest1Result(B returnValue, B p1, B p2)
        {
            this.returnValue = returnValue;
            this.p1 = p1;
            this.p2 = p2;
        }

        public B returnValue;
        public B p1;
        public B p2;
    }

    public struct TestIntf_ReturnTest2Result
    {
        public TestIntf_ReturnTest2Result(B returnValue, B p2, B p1)
        {
            this.returnValue = returnValue;
            this.p2 = p2;
            this.p1 = p1;
        }

        public B returnValue;
        public B p2;
        public B p1;
    }

    public struct TestIntf_DictionaryTestResult
    {
        public TestIntf_DictionaryTestResult(global::System.Collections.Generic.Dictionary<int, B> returnValue, global::System.Collections.Generic.Dictionary<int, B> bout)
        {
            this.returnValue = returnValue;
            this.bout = bout;
        }

        public global::System.Collections.Generic.Dictionary<int, B> returnValue;
        public global::System.Collections.Generic.Dictionary<int, B> bout;
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestIntfPrx : global::Ice.ObjectPrx
    {
        global::Ice.Value SBaseAsObject(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::Ice.Value> SBaseAsObjectAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        SBase SBaseAsSBase(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<SBase> SBaseAsSBaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        SBase SBSKnownDerivedAsSBase(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<SBase> SBSKnownDerivedAsSBaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        SBSKnownDerived SBSKnownDerivedAsSBSKnownDerived(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<SBSKnownDerived> SBSKnownDerivedAsSBSKnownDerivedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        SBase SBSUnknownDerivedAsSBase(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<SBase> SBSUnknownDerivedAsSBaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        SBase SBSUnknownDerivedAsSBaseCompact(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<SBase> SBSUnknownDerivedAsSBaseCompactAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.Value SUnknownAsObject(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::Ice.Value> SUnknownAsObjectAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void checkSUnknown(global::Ice.Value o, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task checkSUnknownAsync(global::Ice.Value o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        B oneElementCycle(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<B> oneElementCycleAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        B twoElementCycle(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<B> twoElementCycleAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        B D1AsB(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<B> D1AsBAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        D1 D1AsD1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<D1> D1AsD1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        B D2AsB(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<B> D2AsBAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void paramTest1(out B p1, out B p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_ParamTest1Result> paramTest1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void paramTest2(out B p2, out B p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_ParamTest2Result> paramTest2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        B paramTest3(out B p1, out B p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_ParamTest3Result> paramTest3Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        B paramTest4(out B p, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_ParamTest4Result> paramTest4Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        B returnTest1(out B p1, out B p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_ReturnTest1Result> returnTest1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        B returnTest2(out B p2, out B p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_ReturnTest2Result> returnTest2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        B returnTest3(B p1, B p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<B> returnTest3Async(B p1, B p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        SS3 sequenceTest(SS1 p1, SS2 p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<SS3> sequenceTestAsync(SS1 p1, SS2 p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::System.Collections.Generic.Dictionary<int, B> dictionaryTest(global::System.Collections.Generic.Dictionary<int, B> bin, out global::System.Collections.Generic.Dictionary<int, B> bout, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<TestIntf_DictionaryTestResult> dictionaryTestAsync(global::System.Collections.Generic.Dictionary<int, B> bin, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        PBase exchangePBase(PBase pb, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<PBase> exchangePBaseAsync(PBase pb, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        Preserved PBSUnknownAsPreserved(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Preserved> PBSUnknownAsPreservedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void checkPBSUnknown(Preserved p, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task checkPBSUnknownAsync(Preserved p, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        Preserved PBSUnknownAsPreservedWithGraph(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Preserved> PBSUnknownAsPreservedWithGraphAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void checkPBSUnknownWithGraph(Preserved p, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task checkPBSUnknownWithGraphAsync(Preserved p, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        Preserved PBSUnknown2AsPreservedWithGraph(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Preserved> PBSUnknown2AsPreservedWithGraphAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void checkPBSUnknown2WithGraph(Preserved p, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task checkPBSUnknown2WithGraphAsync(Preserved p, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        PNode exchangePNode(PNode pn, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<PNode> exchangePNodeAsync(PNode pn, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void throwBaseAsBase(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwBaseAsBaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void throwDerivedAsBase(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwDerivedAsBaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void throwDerivedAsDerived(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwDerivedAsDerivedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void throwUnknownDerivedAsBase(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwUnknownDerivedAsBaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void throwPreservedException(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwPreservedExceptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        /// <summary>
        /// Use of forward-declared class to verify that code is generated correctly.
        /// </summary>
        /// <param name="context">The Context map to send with the invocation.</param>

        void useForward(out Forward f, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        /// <summary>
        /// Use of forward-declared class to verify that code is generated correctly.
        /// </summary>
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<Forward> useForwardAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface TestIntfOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Ice.Value SBaseAsObject(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        SBase SBaseAsSBase(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        SBase SBSKnownDerivedAsSBase(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        SBSKnownDerived SBSKnownDerivedAsSBSKnownDerived(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        SBase SBSUnknownDerivedAsSBase(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        SBase SBSUnknownDerivedAsSBaseCompact(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Ice.Value SUnknownAsObject(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void checkSUnknown(global::Ice.Value o, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        B oneElementCycle(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        B twoElementCycle(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        B D1AsB(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        D1 D1AsD1(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        B D2AsB(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void paramTest1(out B p1, out B p2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void paramTest2(out B p2, out B p1, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        B paramTest3(out B p1, out B p2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        B paramTest4(out B p, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        B returnTest1(out B p1, out B p2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        B returnTest2(out B p2, out B p1, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        B returnTest3(B p1, B p2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        SS3 sequenceTest(SS1 p1, SS2 p2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<int, B> dictionaryTest(global::System.Collections.Generic.Dictionary<int, B> bin, out global::System.Collections.Generic.Dictionary<int, B> bout, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        PBase exchangePBase(PBase pb, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        Preserved PBSUnknownAsPreserved(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void checkPBSUnknown(Preserved p, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<Preserved> PBSUnknownAsPreservedWithGraphAsync(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void checkPBSUnknownWithGraph(Preserved p, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<Preserved> PBSUnknown2AsPreservedWithGraphAsync(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void checkPBSUnknown2WithGraph(Preserved p, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        PNode exchangePNode(PNode pn, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwBaseAsBase(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwDerivedAsBase(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwDerivedAsDerived(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwUnknownDerivedAsBase(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task throwPreservedExceptionAsync(global::Ice.Current current = null);

        /// <summary>
        /// Use of forward-declared class to verify that code is generated correctly.
        /// </summary>
        /// <param name="current">The Current object for the invocation.</param>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void useForward(out Forward f, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void shutdown(global::Ice.Current current = null);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, B[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static B[] read(global::Ice.InputStream istr)
        {
            B[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new B[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::IceInternal.Patcher.arrayReadValue<B>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BDictHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, B> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, B> e in v)
                {
                    ostr.writeInt(e.Key);
                    ostr.writeValue(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, B> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, B> r = new global::System.Collections.Generic.Dictionary<int, B>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                istr.readValue((B v) => { r[k] = v; });
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class PBaseSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, PBase[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static PBase[] read(global::Ice.InputStream istr)
        {
            PBase[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new PBase[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::IceInternal.Patcher.arrayReadValue<PBase>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TestIntfPrxHelper : global::Ice.ObjectPrxHelperBase, TestIntfPrx
    {
        public TestIntfPrxHelper()
        {
        }

        #region Synchronous operations

        public global::Ice.Value SBaseAsObject(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_SBaseAsObjectAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SBase SBaseAsSBase(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_SBaseAsSBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SBase SBSKnownDerivedAsSBase(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_SBSKnownDerivedAsSBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SBSKnownDerived SBSKnownDerivedAsSBSKnownDerived(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_SBSKnownDerivedAsSBSKnownDerivedAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SBase SBSUnknownDerivedAsSBase(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_SBSUnknownDerivedAsSBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SBase SBSUnknownDerivedAsSBaseCompact(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_SBSUnknownDerivedAsSBaseCompactAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.Value SUnknownAsObject(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_SUnknownAsObjectAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void checkSUnknown(global::Ice.Value o, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_checkSUnknownAsync(o, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public B oneElementCycle(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_oneElementCycleAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public B twoElementCycle(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_twoElementCycleAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public B D1AsB(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_D1AsBAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public D1 D1AsD1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_D1AsD1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public B D2AsB(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_D2AsBAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void paramTest1(out B p1, out B p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_paramTest1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                p1 = result_.p1;
                p2 = result_.p2;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void paramTest2(out B p2, out B p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_paramTest2Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                p1 = result_.p1;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public B paramTest3(out B p1, out B p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_paramTest3Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                p1 = result_.p1;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public B paramTest4(out B p, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_paramTest4Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                p = result_.p;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public B returnTest1(out B p1, out B p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_returnTest1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                p1 = result_.p1;
                p2 = result_.p2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public B returnTest2(out B p2, out B p1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_returnTest2Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
                p2 = result_.p2;
                p1 = result_.p1;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public B returnTest3(B p1, B p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_returnTest3Async(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SS3 sequenceTest(SS1 p1, SS2 p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_sequenceTestAsync(p1, p2, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<int, B> dictionaryTest(global::System.Collections.Generic.Dictionary<int, B> bin, out global::System.Collections.Generic.Dictionary<int, B> bout, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_dictionaryTestAsync(bin, context, null, global::System.Threading.CancellationToken.None, true).Result;
                bout = result_.bout;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public PBase exchangePBase(PBase pb, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_exchangePBaseAsync(pb, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Preserved PBSUnknownAsPreserved(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_PBSUnknownAsPreservedAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void checkPBSUnknown(Preserved p, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_checkPBSUnknownAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Preserved PBSUnknownAsPreservedWithGraph(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_PBSUnknownAsPreservedWithGraphAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void checkPBSUnknownWithGraph(Preserved p, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_checkPBSUnknownWithGraphAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Preserved PBSUnknown2AsPreservedWithGraph(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_PBSUnknown2AsPreservedWithGraphAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void checkPBSUnknown2WithGraph(Preserved p, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_checkPBSUnknown2WithGraphAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public PNode exchangePNode(PNode pn, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_exchangePNodeAsync(pn, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwBaseAsBase(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwBaseAsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwDerivedAsBase(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwDerivedAsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwDerivedAsDerived(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwDerivedAsDerivedAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwUnknownDerivedAsBase(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwUnknownDerivedAsBaseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwPreservedException(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwPreservedExceptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void useForward(out Forward f, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                f = _iceI_useForwardAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<global::Ice.Value> SBaseAsObjectAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_SBaseAsObjectAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.Value> _iceI_SBaseAsObjectAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_SBaseAsObject_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.Value>(progress, cancel);
            _iceI_SBaseAsObject(context, synchronous, completed);
            return completed.Task;
        }

        private const string _SBaseAsObject_name = "SBaseAsObject";

        private void _iceI_SBaseAsObject(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.Value>(completed);
            outAsync.invoke(
                _SBaseAsObject_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.Value ret = null;
                    istr.readValue((global::Ice.Value v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SBase> SBaseAsSBaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_SBaseAsSBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SBase> _iceI_SBaseAsSBaseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_SBaseAsSBase_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SBase>(progress, cancel);
            _iceI_SBaseAsSBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _SBaseAsSBase_name = "SBaseAsSBase";

        private void _iceI_SBaseAsSBase(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SBase>(completed);
            outAsync.invoke(
                _SBaseAsSBase_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    SBase ret = null;
                    istr.readValue((SBase v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SBase> SBSKnownDerivedAsSBaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_SBSKnownDerivedAsSBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SBase> _iceI_SBSKnownDerivedAsSBaseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_SBSKnownDerivedAsSBase_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SBase>(progress, cancel);
            _iceI_SBSKnownDerivedAsSBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _SBSKnownDerivedAsSBase_name = "SBSKnownDerivedAsSBase";

        private void _iceI_SBSKnownDerivedAsSBase(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SBase>(completed);
            outAsync.invoke(
                _SBSKnownDerivedAsSBase_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    SBase ret = null;
                    istr.readValue((SBase v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SBSKnownDerived> SBSKnownDerivedAsSBSKnownDerivedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_SBSKnownDerivedAsSBSKnownDerivedAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SBSKnownDerived> _iceI_SBSKnownDerivedAsSBSKnownDerivedAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_SBSKnownDerivedAsSBSKnownDerived_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SBSKnownDerived>(progress, cancel);
            _iceI_SBSKnownDerivedAsSBSKnownDerived(context, synchronous, completed);
            return completed.Task;
        }

        private const string _SBSKnownDerivedAsSBSKnownDerived_name = "SBSKnownDerivedAsSBSKnownDerived";

        private void _iceI_SBSKnownDerivedAsSBSKnownDerived(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SBSKnownDerived>(completed);
            outAsync.invoke(
                _SBSKnownDerivedAsSBSKnownDerived_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    SBSKnownDerived ret = null;
                    istr.readValue((SBSKnownDerived v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SBase> SBSUnknownDerivedAsSBaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_SBSUnknownDerivedAsSBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SBase> _iceI_SBSUnknownDerivedAsSBaseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_SBSUnknownDerivedAsSBase_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SBase>(progress, cancel);
            _iceI_SBSUnknownDerivedAsSBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _SBSUnknownDerivedAsSBase_name = "SBSUnknownDerivedAsSBase";

        private void _iceI_SBSUnknownDerivedAsSBase(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SBase>(completed);
            outAsync.invoke(
                _SBSUnknownDerivedAsSBase_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    SBase ret = null;
                    istr.readValue((SBase v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SBase> SBSUnknownDerivedAsSBaseCompactAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_SBSUnknownDerivedAsSBaseCompactAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SBase> _iceI_SBSUnknownDerivedAsSBaseCompactAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_SBSUnknownDerivedAsSBaseCompact_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SBase>(progress, cancel);
            _iceI_SBSUnknownDerivedAsSBaseCompact(context, synchronous, completed);
            return completed.Task;
        }

        private const string _SBSUnknownDerivedAsSBaseCompact_name = "SBSUnknownDerivedAsSBaseCompact";

        private void _iceI_SBSUnknownDerivedAsSBaseCompact(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SBase>(completed);
            outAsync.invoke(
                _SBSUnknownDerivedAsSBaseCompact_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.CompactFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    SBase ret = null;
                    istr.readValue((SBase v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Ice.Value> SUnknownAsObjectAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_SUnknownAsObjectAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Ice.Value> _iceI_SUnknownAsObjectAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_SUnknownAsObject_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.Value>(progress, cancel);
            _iceI_SUnknownAsObject(context, synchronous, completed);
            return completed.Task;
        }

        private const string _SUnknownAsObject_name = "SUnknownAsObject";

        private void _iceI_SUnknownAsObject(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Ice.Value>(completed);
            outAsync.invoke(
                _SUnknownAsObject_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Ice.Value ret = null;
                    istr.readValue((global::Ice.Value v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task checkSUnknownAsync(global::Ice.Value o, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_checkSUnknownAsync(o, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_checkSUnknownAsync(global::Ice.Value iceP_o, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_checkSUnknown(iceP_o, context, synchronous, completed);
            return completed.Task;
        }

        private const string _checkSUnknown_name = "checkSUnknown";

        private void _iceI_checkSUnknown(global::Ice.Value iceP_o, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _checkSUnknown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_o);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task<B> oneElementCycleAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_oneElementCycleAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<B> _iceI_oneElementCycleAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_oneElementCycle_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<B>(progress, cancel);
            _iceI_oneElementCycle(context, synchronous, completed);
            return completed.Task;
        }

        private const string _oneElementCycle_name = "oneElementCycle";

        private void _iceI_oneElementCycle(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<B>(completed);
            outAsync.invoke(
                _oneElementCycle_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    B ret = null;
                    istr.readValue((B v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<B> twoElementCycleAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_twoElementCycleAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<B> _iceI_twoElementCycleAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_twoElementCycle_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<B>(progress, cancel);
            _iceI_twoElementCycle(context, synchronous, completed);
            return completed.Task;
        }

        private const string _twoElementCycle_name = "twoElementCycle";

        private void _iceI_twoElementCycle(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<B>(completed);
            outAsync.invoke(
                _twoElementCycle_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    B ret = null;
                    istr.readValue((B v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<B> D1AsBAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_D1AsBAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<B> _iceI_D1AsBAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_D1AsB_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<B>(progress, cancel);
            _iceI_D1AsB(context, synchronous, completed);
            return completed.Task;
        }

        private const string _D1AsB_name = "D1AsB";

        private void _iceI_D1AsB(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<B>(completed);
            outAsync.invoke(
                _D1AsB_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    B ret = null;
                    istr.readValue((B v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<D1> D1AsD1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_D1AsD1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<D1> _iceI_D1AsD1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_D1AsD1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<D1>(progress, cancel);
            _iceI_D1AsD1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _D1AsD1_name = "D1AsD1";

        private void _iceI_D1AsD1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<D1>(completed);
            outAsync.invoke(
                _D1AsD1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    D1 ret = null;
                    istr.readValue((D1 v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<B> D2AsBAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_D2AsBAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<B> _iceI_D2AsBAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_D2AsB_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<B>(progress, cancel);
            _iceI_D2AsB(context, synchronous, completed);
            return completed.Task;
        }

        private const string _D2AsB_name = "D2AsB";

        private void _iceI_D2AsB(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<B>(completed);
            outAsync.invoke(
                _D2AsB_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    B ret = null;
                    istr.readValue((B v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_ParamTest1Result> paramTest1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_paramTest1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_ParamTest1Result> _iceI_paramTest1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_paramTest1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_ParamTest1Result>(progress, cancel);
            _iceI_paramTest1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _paramTest1_name = "paramTest1";

        private void _iceI_paramTest1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_ParamTest1Result>(completed);
            outAsync.invoke(
                _paramTest1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_ParamTest1Result ret = new TestIntf_ParamTest1Result();
                    istr.readValue((B v) => {ret.p1 = v; });
                    istr.readValue((B v) => {ret.p2 = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_ParamTest2Result> paramTest2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_paramTest2Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_ParamTest2Result> _iceI_paramTest2Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_paramTest2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_ParamTest2Result>(progress, cancel);
            _iceI_paramTest2(context, synchronous, completed);
            return completed.Task;
        }

        private const string _paramTest2_name = "paramTest2";

        private void _iceI_paramTest2(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_ParamTest2Result>(completed);
            outAsync.invoke(
                _paramTest2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_ParamTest2Result ret = new TestIntf_ParamTest2Result();
                    istr.readValue((B v) => {ret.p2 = v; });
                    istr.readValue((B v) => {ret.p1 = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_ParamTest3Result> paramTest3Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_paramTest3Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_ParamTest3Result> _iceI_paramTest3Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_paramTest3_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_ParamTest3Result>(progress, cancel);
            _iceI_paramTest3(context, synchronous, completed);
            return completed.Task;
        }

        private const string _paramTest3_name = "paramTest3";

        private void _iceI_paramTest3(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_ParamTest3Result>(completed);
            outAsync.invoke(
                _paramTest3_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_ParamTest3Result ret = new TestIntf_ParamTest3Result();
                    istr.readValue((B v) => {ret.p1 = v; });
                    istr.readValue((B v) => {ret.p2 = v; });
                    istr.readValue((B v) => {ret.returnValue = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_ParamTest4Result> paramTest4Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_paramTest4Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_ParamTest4Result> _iceI_paramTest4Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_paramTest4_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_ParamTest4Result>(progress, cancel);
            _iceI_paramTest4(context, synchronous, completed);
            return completed.Task;
        }

        private const string _paramTest4_name = "paramTest4";

        private void _iceI_paramTest4(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_ParamTest4Result>(completed);
            outAsync.invoke(
                _paramTest4_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_ParamTest4Result ret = new TestIntf_ParamTest4Result();
                    istr.readValue((B v) => {ret.p = v; });
                    istr.readValue((B v) => {ret.returnValue = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_ReturnTest1Result> returnTest1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_returnTest1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_ReturnTest1Result> _iceI_returnTest1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_returnTest1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_ReturnTest1Result>(progress, cancel);
            _iceI_returnTest1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _returnTest1_name = "returnTest1";

        private void _iceI_returnTest1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_ReturnTest1Result>(completed);
            outAsync.invoke(
                _returnTest1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_ReturnTest1Result ret = new TestIntf_ReturnTest1Result();
                    istr.readValue((B v) => {ret.p1 = v; });
                    istr.readValue((B v) => {ret.p2 = v; });
                    istr.readValue((B v) => {ret.returnValue = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_ReturnTest2Result> returnTest2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_returnTest2Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_ReturnTest2Result> _iceI_returnTest2Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_returnTest2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_ReturnTest2Result>(progress, cancel);
            _iceI_returnTest2(context, synchronous, completed);
            return completed.Task;
        }

        private const string _returnTest2_name = "returnTest2";

        private void _iceI_returnTest2(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_ReturnTest2Result>(completed);
            outAsync.invoke(
                _returnTest2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_ReturnTest2Result ret = new TestIntf_ReturnTest2Result();
                    istr.readValue((B v) => {ret.p2 = v; });
                    istr.readValue((B v) => {ret.p1 = v; });
                    istr.readValue((B v) => {ret.returnValue = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<B> returnTest3Async(B p1, B p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_returnTest3Async(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<B> _iceI_returnTest3Async(B iceP_p1, B iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_returnTest3_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<B>(progress, cancel);
            _iceI_returnTest3(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _returnTest3_name = "returnTest3";

        private void _iceI_returnTest3(B iceP_p1, B iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<B>(completed);
            outAsync.invoke(
                _returnTest3_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_p1);
                    ostr.writeValue(iceP_p2);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    B ret = null;
                    istr.readValue((B v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SS3> sequenceTestAsync(SS1 p1, SS2 p2, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_sequenceTestAsync(p1, p2, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SS3> _iceI_sequenceTestAsync(SS1 iceP_p1, SS2 iceP_p2, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_sequenceTest_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SS3>(progress, cancel);
            _iceI_sequenceTest(iceP_p1, iceP_p2, context, synchronous, completed);
            return completed.Task;
        }

        private const string _sequenceTest_name = "sequenceTest";

        private void _iceI_sequenceTest(SS1 iceP_p1, SS2 iceP_p2, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SS3>(completed);
            outAsync.invoke(
                _sequenceTest_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_p1);
                    ostr.writeValue(iceP_p2);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    SS3 ret = null;
                    ret = SS3.ice_read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<TestIntf_DictionaryTestResult> dictionaryTestAsync(global::System.Collections.Generic.Dictionary<int, B> bin, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_dictionaryTestAsync(bin, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<TestIntf_DictionaryTestResult> _iceI_dictionaryTestAsync(global::System.Collections.Generic.Dictionary<int, B> iceP_bin, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_dictionaryTest_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<TestIntf_DictionaryTestResult>(progress, cancel);
            _iceI_dictionaryTest(iceP_bin, context, synchronous, completed);
            return completed.Task;
        }

        private const string _dictionaryTest_name = "dictionaryTest";

        private void _iceI_dictionaryTest(global::System.Collections.Generic.Dictionary<int, B> iceP_bin, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<TestIntf_DictionaryTestResult>(completed);
            outAsync.invoke(
                _dictionaryTest_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BDictHelper.write(ostr, iceP_bin);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    TestIntf_DictionaryTestResult ret = new TestIntf_DictionaryTestResult();
                    ret.bout = BDictHelper.read(istr);
                    ret.returnValue = BDictHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<PBase> exchangePBaseAsync(PBase pb, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_exchangePBaseAsync(pb, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<PBase> _iceI_exchangePBaseAsync(PBase iceP_pb, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_exchangePBase_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<PBase>(progress, cancel);
            _iceI_exchangePBase(iceP_pb, context, synchronous, completed);
            return completed.Task;
        }

        private const string _exchangePBase_name = "exchangePBase";

        private void _iceI_exchangePBase(PBase iceP_pb, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<PBase>(completed);
            outAsync.invoke(
                _exchangePBase_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_pb);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    PBase ret = null;
                    istr.readValue((PBase v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Preserved> PBSUnknownAsPreservedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_PBSUnknownAsPreservedAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Preserved> _iceI_PBSUnknownAsPreservedAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_PBSUnknownAsPreserved_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Preserved>(progress, cancel);
            _iceI_PBSUnknownAsPreserved(context, synchronous, completed);
            return completed.Task;
        }

        private const string _PBSUnknownAsPreserved_name = "PBSUnknownAsPreserved";

        private void _iceI_PBSUnknownAsPreserved(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Preserved>(completed);
            outAsync.invoke(
                _PBSUnknownAsPreserved_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Preserved ret = null;
                    istr.readValue((Preserved v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task checkPBSUnknownAsync(Preserved p, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_checkPBSUnknownAsync(p, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_checkPBSUnknownAsync(Preserved iceP_p, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_checkPBSUnknown(iceP_p, context, synchronous, completed);
            return completed.Task;
        }

        private const string _checkPBSUnknown_name = "checkPBSUnknown";

        private void _iceI_checkPBSUnknown(Preserved iceP_p, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _checkPBSUnknown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_p);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task<Preserved> PBSUnknownAsPreservedWithGraphAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_PBSUnknownAsPreservedWithGraphAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Preserved> _iceI_PBSUnknownAsPreservedWithGraphAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_PBSUnknownAsPreservedWithGraph_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Preserved>(progress, cancel);
            _iceI_PBSUnknownAsPreservedWithGraph(context, synchronous, completed);
            return completed.Task;
        }

        private const string _PBSUnknownAsPreservedWithGraph_name = "PBSUnknownAsPreservedWithGraph";

        private void _iceI_PBSUnknownAsPreservedWithGraph(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Preserved>(completed);
            outAsync.invoke(
                _PBSUnknownAsPreservedWithGraph_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Preserved ret = null;
                    istr.readValue((Preserved v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task checkPBSUnknownWithGraphAsync(Preserved p, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_checkPBSUnknownWithGraphAsync(p, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_checkPBSUnknownWithGraphAsync(Preserved iceP_p, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_checkPBSUnknownWithGraph(iceP_p, context, synchronous, completed);
            return completed.Task;
        }

        private const string _checkPBSUnknownWithGraph_name = "checkPBSUnknownWithGraph";

        private void _iceI_checkPBSUnknownWithGraph(Preserved iceP_p, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _checkPBSUnknownWithGraph_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_p);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task<Preserved> PBSUnknown2AsPreservedWithGraphAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_PBSUnknown2AsPreservedWithGraphAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Preserved> _iceI_PBSUnknown2AsPreservedWithGraphAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_PBSUnknown2AsPreservedWithGraph_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Preserved>(progress, cancel);
            _iceI_PBSUnknown2AsPreservedWithGraph(context, synchronous, completed);
            return completed.Task;
        }

        private const string _PBSUnknown2AsPreservedWithGraph_name = "PBSUnknown2AsPreservedWithGraph";

        private void _iceI_PBSUnknown2AsPreservedWithGraph(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Preserved>(completed);
            outAsync.invoke(
                _PBSUnknown2AsPreservedWithGraph_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Preserved ret = null;
                    istr.readValue((Preserved v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task checkPBSUnknown2WithGraphAsync(Preserved p, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_checkPBSUnknown2WithGraphAsync(p, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_checkPBSUnknown2WithGraphAsync(Preserved iceP_p, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_checkPBSUnknown2WithGraph(iceP_p, context, synchronous, completed);
            return completed.Task;
        }

        private const string _checkPBSUnknown2WithGraph_name = "checkPBSUnknown2WithGraph";

        private void _iceI_checkPBSUnknown2WithGraph(Preserved iceP_p, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _checkPBSUnknown2WithGraph_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_p);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task<PNode> exchangePNodeAsync(PNode pn, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_exchangePNodeAsync(pn, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<PNode> _iceI_exchangePNodeAsync(PNode iceP_pn, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_exchangePNode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<PNode>(progress, cancel);
            _iceI_exchangePNode(iceP_pn, context, synchronous, completed);
            return completed.Task;
        }

        private const string _exchangePNode_name = "exchangePNode";

        private void _iceI_exchangePNode(PNode iceP_pn, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<PNode>(completed);
            outAsync.invoke(
                _exchangePNode_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_pn);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    PNode ret = null;
                    istr.readValue((PNode v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task throwBaseAsBaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwBaseAsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwBaseAsBaseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwBaseAsBase_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwBaseAsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwBaseAsBase_name = "throwBaseAsBase";

        private void _iceI_throwBaseAsBase(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwBaseAsBase_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(BaseException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwDerivedAsBaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwDerivedAsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwDerivedAsBaseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwDerivedAsBase_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwDerivedAsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwDerivedAsBase_name = "throwDerivedAsBase";

        private void _iceI_throwDerivedAsBase(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwDerivedAsBase_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(BaseException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwDerivedAsDerivedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwDerivedAsDerivedAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwDerivedAsDerivedAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwDerivedAsDerived_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwDerivedAsDerived(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwDerivedAsDerived_name = "throwDerivedAsDerived";

        private void _iceI_throwDerivedAsDerived(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwDerivedAsDerived_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(DerivedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwUnknownDerivedAsBaseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwUnknownDerivedAsBaseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwUnknownDerivedAsBaseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwUnknownDerivedAsBase_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwUnknownDerivedAsBase(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwUnknownDerivedAsBase_name = "throwUnknownDerivedAsBase";

        private void _iceI_throwUnknownDerivedAsBase(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwUnknownDerivedAsBase_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(BaseException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwPreservedExceptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwPreservedExceptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwPreservedExceptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwPreservedException_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwPreservedException(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwPreservedException_name = "throwPreservedException";

        private void _iceI_throwPreservedException(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwPreservedException_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(PreservedException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<Forward> useForwardAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_useForwardAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Forward> _iceI_useForwardAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_useForward_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Forward>(progress, cancel);
            _iceI_useForward(context, synchronous, completed);
            return completed.Task;
        }

        private const string _useForward_name = "useForward";

        private void _iceI_useForward(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Forward>(completed);
            outAsync.invoke(
                _useForward_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Forward iceP_f = null;
                    istr.readValue((Forward v) => {iceP_f = v; });
                    istr.readPendingValues();
                    return iceP_f;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.SlicedFormat,
                context,
                synchronous);
        }

        #endregion

        #region Checked and unchecked cast operations

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestIntfPrx r = b as TestIntfPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            TestIntfPrx r = b as TestIntfPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestIntfPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    TestIntfPrxHelper h = new TestIntfPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TestIntfPrx r = b as TestIntfPrx;
            if(r == null)
            {
                TestIntfPrxHelper h = new TestIntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TestIntfPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            TestIntfPrxHelper h = new TestIntfPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public static string ice_staticId() => "::Test::TestIntf";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TestIntfPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TestIntfPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TestIntfPrxHelper result = new TestIntfPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class TestIntfDisp_ : global::Ice.ObjectImpl, TestIntf
    {
        #region Slice operations

        public abstract global::Ice.Value SBaseAsObject(global::Ice.Current current = null);

        public abstract SBase SBaseAsSBase(global::Ice.Current current = null);

        public abstract SBase SBSKnownDerivedAsSBase(global::Ice.Current current = null);

        public abstract SBSKnownDerived SBSKnownDerivedAsSBSKnownDerived(global::Ice.Current current = null);

        public abstract SBase SBSUnknownDerivedAsSBase(global::Ice.Current current = null);

        public abstract SBase SBSUnknownDerivedAsSBaseCompact(global::Ice.Current current = null);

        public abstract global::Ice.Value SUnknownAsObject(global::Ice.Current current = null);

        public abstract void checkSUnknown(global::Ice.Value o, global::Ice.Current current = null);

        public abstract B oneElementCycle(global::Ice.Current current = null);

        public abstract B twoElementCycle(global::Ice.Current current = null);

        public abstract B D1AsB(global::Ice.Current current = null);

        public abstract D1 D1AsD1(global::Ice.Current current = null);

        public abstract B D2AsB(global::Ice.Current current = null);

        public abstract void paramTest1(out B p1, out B p2, global::Ice.Current current = null);

        public abstract void paramTest2(out B p2, out B p1, global::Ice.Current current = null);

        public abstract B paramTest3(out B p1, out B p2, global::Ice.Current current = null);

        public abstract B paramTest4(out B p, global::Ice.Current current = null);

        public abstract B returnTest1(out B p1, out B p2, global::Ice.Current current = null);

        public abstract B returnTest2(out B p2, out B p1, global::Ice.Current current = null);

        public abstract B returnTest3(B p1, B p2, global::Ice.Current current = null);

        public abstract SS3 sequenceTest(SS1 p1, SS2 p2, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<int, B> dictionaryTest(global::System.Collections.Generic.Dictionary<int, B> bin, out global::System.Collections.Generic.Dictionary<int, B> bout, global::Ice.Current current = null);

        public abstract PBase exchangePBase(PBase pb, global::Ice.Current current = null);

        public abstract Preserved PBSUnknownAsPreserved(global::Ice.Current current = null);

        public abstract void checkPBSUnknown(Preserved p, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<Preserved> PBSUnknownAsPreservedWithGraphAsync(global::Ice.Current current = null);

        public abstract void checkPBSUnknownWithGraph(Preserved p, global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<Preserved> PBSUnknown2AsPreservedWithGraphAsync(global::Ice.Current current = null);

        public abstract void checkPBSUnknown2WithGraph(Preserved p, global::Ice.Current current = null);

        public abstract PNode exchangePNode(PNode pn, global::Ice.Current current = null);

        public abstract void throwBaseAsBase(global::Ice.Current current = null);

        public abstract void throwDerivedAsBase(global::Ice.Current current = null);

        public abstract void throwDerivedAsDerived(global::Ice.Current current = null);

        public abstract void throwUnknownDerivedAsBase(global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task throwPreservedExceptionAsync(global::Ice.Current current = null);

        public abstract void useForward(out Forward f, global::Ice.Current current = null);

        public abstract void shutdown(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::TestIntf"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::TestIntf";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_SBaseAsObject(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.SBaseAsObject(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_SBaseAsSBase(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.SBaseAsSBase(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_SBSKnownDerivedAsSBase(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.SBSKnownDerivedAsSBase(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_SBSKnownDerivedAsSBSKnownDerived(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.SBSKnownDerivedAsSBSKnownDerived(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_SBSUnknownDerivedAsSBase(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.SBSUnknownDerivedAsSBase(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_SBSUnknownDerivedAsSBaseCompact(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.CompactFormat);
            var ret = obj.SBSUnknownDerivedAsSBaseCompact(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_SUnknownAsObject(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.SUnknownAsObject(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_checkSUnknown(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Value iceP_o;
            iceP_o = null;
            istr.readValue((global::Ice.Value v) => {iceP_o = v; });
            istr.readPendingValues();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            obj.checkSUnknown(iceP_o, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_oneElementCycle(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.oneElementCycle(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_twoElementCycle(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.twoElementCycle(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_D1AsB(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.D1AsB(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_D1AsD1(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.D1AsD1(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_D2AsB(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.D2AsB(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_paramTest1(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            B iceP_p1;
            B iceP_p2;
            obj.paramTest1(out iceP_p1, out iceP_p2, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_p1);
            ostr.writeValue(iceP_p2);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_paramTest2(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            B iceP_p2;
            B iceP_p1;
            obj.paramTest2(out iceP_p2, out iceP_p1, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_p2);
            ostr.writeValue(iceP_p1);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_paramTest3(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            B iceP_p1;
            B iceP_p2;
            var ret = obj.paramTest3(out iceP_p1, out iceP_p2, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_p1);
            ostr.writeValue(iceP_p2);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_paramTest4(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            B iceP_p;
            var ret = obj.paramTest4(out iceP_p, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_p);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_returnTest1(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            B iceP_p1;
            B iceP_p2;
            var ret = obj.returnTest1(out iceP_p1, out iceP_p2, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_p1);
            ostr.writeValue(iceP_p2);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_returnTest2(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            B iceP_p2;
            B iceP_p1;
            var ret = obj.returnTest2(out iceP_p2, out iceP_p1, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_p2);
            ostr.writeValue(iceP_p1);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_returnTest3(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            B iceP_p1;
            iceP_p1 = null;
            B iceP_p2;
            iceP_p2 = null;
            istr.readValue((B v) => {iceP_p1 = v; });
            istr.readValue((B v) => {iceP_p2 = v; });
            istr.readPendingValues();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.returnTest3(iceP_p1, iceP_p2, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_sequenceTest(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SS1 iceP_p1;
            iceP_p1 = null;
            SS2 iceP_p2;
            iceP_p2 = null;
            istr.readValue((SS1 v) => {iceP_p1 = v; });
            istr.readValue((SS2 v) => {iceP_p2 = v; });
            istr.readPendingValues();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.sequenceTest(iceP_p1, iceP_p2, current);
            var ostr = inS.startWriteParams();
            SS3.ice_write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_dictionaryTest(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<int, B> iceP_bin;
            iceP_bin = BDictHelper.read(istr);
            istr.readPendingValues();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            global::System.Collections.Generic.Dictionary<int, B> iceP_bout;
            var ret = obj.dictionaryTest(iceP_bin, out iceP_bout, current);
            var ostr = inS.startWriteParams();
            BDictHelper.write(ostr, iceP_bout);
            BDictHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_exchangePBase(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            PBase iceP_pb;
            iceP_pb = null;
            istr.readValue((PBase v) => {iceP_pb = v; });
            istr.readPendingValues();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.exchangePBase(iceP_pb, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_PBSUnknownAsPreserved(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.PBSUnknownAsPreserved(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_checkPBSUnknown(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Preserved iceP_p;
            iceP_p = null;
            istr.readValue((Preserved v) => {iceP_p = v; });
            istr.readPendingValues();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            obj.checkPBSUnknown(iceP_p, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_PBSUnknownAsPreservedWithGraph(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            return inS.setResultTask<Preserved>(obj.PBSUnknownAsPreservedWithGraphAsync(current),
                (ostr, ret) =>
                {
                    ostr.writeValue(ret);
                    ostr.writePendingValues();
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_checkPBSUnknownWithGraph(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Preserved iceP_p;
            iceP_p = null;
            istr.readValue((Preserved v) => {iceP_p = v; });
            istr.readPendingValues();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            obj.checkPBSUnknownWithGraph(iceP_p, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_PBSUnknown2AsPreservedWithGraph(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            return inS.setResultTask<Preserved>(obj.PBSUnknown2AsPreservedWithGraphAsync(current),
                (ostr, ret) =>
                {
                    ostr.writeValue(ret);
                    ostr.writePendingValues();
                });
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_checkPBSUnknown2WithGraph(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Preserved iceP_p;
            iceP_p = null;
            istr.readValue((Preserved v) => {iceP_p = v; });
            istr.readPendingValues();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            obj.checkPBSUnknown2WithGraph(iceP_p, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_exchangePNode(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            PNode iceP_pn;
            iceP_pn = null;
            istr.readValue((PNode v) => {iceP_pn = v; });
            istr.readPendingValues();
            inS.endReadParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            var ret = obj.exchangePNode(iceP_pn, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwBaseAsBase(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            obj.throwBaseAsBase(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwDerivedAsBase(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            obj.throwDerivedAsBase(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwDerivedAsDerived(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            obj.throwDerivedAsDerived(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwUnknownDerivedAsBase(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            obj.throwUnknownDerivedAsBase(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwPreservedException(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            return inS.setResultTask(obj.throwPreservedExceptionAsync(current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_useForward(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            Forward iceP_f;
            obj.useForward(out iceP_f, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_f);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(TestIntf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            inS.setFormat(global::Ice.FormatType.SlicedFormat);
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "D1AsB",
            "D1AsD1",
            "D2AsB",
            "PBSUnknown2AsPreservedWithGraph",
            "PBSUnknownAsPreserved",
            "PBSUnknownAsPreservedWithGraph",
            "SBSKnownDerivedAsSBSKnownDerived",
            "SBSKnownDerivedAsSBase",
            "SBSUnknownDerivedAsSBase",
            "SBSUnknownDerivedAsSBaseCompact",
            "SBaseAsObject",
            "SBaseAsSBase",
            "SUnknownAsObject",
            "checkPBSUnknown",
            "checkPBSUnknown2WithGraph",
            "checkPBSUnknownWithGraph",
            "checkSUnknown",
            "dictionaryTest",
            "exchangePBase",
            "exchangePNode",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "oneElementCycle",
            "paramTest1",
            "paramTest2",
            "paramTest3",
            "paramTest4",
            "returnTest1",
            "returnTest2",
            "returnTest3",
            "sequenceTest",
            "shutdown",
            "throwBaseAsBase",
            "throwDerivedAsBase",
            "throwDerivedAsDerived",
            "throwPreservedException",
            "throwUnknownDerivedAsBase",
            "twoElementCycle",
            "useForward"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_D1AsB(this, inS, current);
                }
                case 1:
                {
                    return iceD_D1AsD1(this, inS, current);
                }
                case 2:
                {
                    return iceD_D2AsB(this, inS, current);
                }
                case 3:
                {
                    return iceD_PBSUnknown2AsPreservedWithGraph(this, inS, current);
                }
                case 4:
                {
                    return iceD_PBSUnknownAsPreserved(this, inS, current);
                }
                case 5:
                {
                    return iceD_PBSUnknownAsPreservedWithGraph(this, inS, current);
                }
                case 6:
                {
                    return iceD_SBSKnownDerivedAsSBSKnownDerived(this, inS, current);
                }
                case 7:
                {
                    return iceD_SBSKnownDerivedAsSBase(this, inS, current);
                }
                case 8:
                {
                    return iceD_SBSUnknownDerivedAsSBase(this, inS, current);
                }
                case 9:
                {
                    return iceD_SBSUnknownDerivedAsSBaseCompact(this, inS, current);
                }
                case 10:
                {
                    return iceD_SBaseAsObject(this, inS, current);
                }
                case 11:
                {
                    return iceD_SBaseAsSBase(this, inS, current);
                }
                case 12:
                {
                    return iceD_SUnknownAsObject(this, inS, current);
                }
                case 13:
                {
                    return iceD_checkPBSUnknown(this, inS, current);
                }
                case 14:
                {
                    return iceD_checkPBSUnknown2WithGraph(this, inS, current);
                }
                case 15:
                {
                    return iceD_checkPBSUnknownWithGraph(this, inS, current);
                }
                case 16:
                {
                    return iceD_checkSUnknown(this, inS, current);
                }
                case 17:
                {
                    return iceD_dictionaryTest(this, inS, current);
                }
                case 18:
                {
                    return iceD_exchangePBase(this, inS, current);
                }
                case 19:
                {
                    return iceD_exchangePNode(this, inS, current);
                }
                case 20:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 21:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 22:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 23:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 24:
                {
                    return iceD_oneElementCycle(this, inS, current);
                }
                case 25:
                {
                    return iceD_paramTest1(this, inS, current);
                }
                case 26:
                {
                    return iceD_paramTest2(this, inS, current);
                }
                case 27:
                {
                    return iceD_paramTest3(this, inS, current);
                }
                case 28:
                {
                    return iceD_paramTest4(this, inS, current);
                }
                case 29:
                {
                    return iceD_returnTest1(this, inS, current);
                }
                case 30:
                {
                    return iceD_returnTest2(this, inS, current);
                }
                case 31:
                {
                    return iceD_returnTest3(this, inS, current);
                }
                case 32:
                {
                    return iceD_sequenceTest(this, inS, current);
                }
                case 33:
                {
                    return iceD_shutdown(this, inS, current);
                }
                case 34:
                {
                    return iceD_throwBaseAsBase(this, inS, current);
                }
                case 35:
                {
                    return iceD_throwDerivedAsBase(this, inS, current);
                }
                case 36:
                {
                    return iceD_throwDerivedAsDerived(this, inS, current);
                }
                case 37:
                {
                    return iceD_throwPreservedException(this, inS, current);
                }
                case 38:
                {
                    return iceD_throwUnknownDerivedAsBase(this, inS, current);
                }
                case 39:
                {
                    return iceD_twoElementCycle(this, inS, current);
                }
                case 40:
                {
                    return iceD_useForward(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
