//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TypeId_1
    {
        public const string typeId = "::Test::Compact";
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class TypeId_789
    {
        public const string typeId = "::Test::CompactExt";
    }
}

namespace Test
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class S : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string str;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public S()
        {
            this.str = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public S(string str)
        {
            this.str = str;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::S");
            global::IceInternal.HashUtil.hashAdd(ref h_, str);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            S o = (S)other;
            if(this.str == null)
            {
                if(o.str != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.str.Equals(o.str))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator==(S lhs, S rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator!=(S lhs, S rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.str);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.str = istr.readString();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, S v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static S ice_read(global::Ice.InputStream istr)
        {
            var v = new S();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly S _nullMarshalValue = new S();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class @Base : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public S theS;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string str;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @Base()
        {
            this.theS = new S();
            this.str = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public @Base(S theS, string str)
        {
            this.theS = theS;
            this.str = str;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::Base";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            S.ice_write(ostr_, theS);
            ostr_.writeString(str);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            theS = S.ice_read(istr_);
            str = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class A : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B theB;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C theC;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool preMarshalInvoked;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool postUnmarshalInvoked;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A(B theB, C theC, bool preMarshalInvoked, bool postUnmarshalInvoked)
        {
            this.theB = theB;
            this.theC = theC;
            this.preMarshalInvoked = preMarshalInvoked;
            this.postUnmarshalInvoked = postUnmarshalInvoked;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::A";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(theB);
            ostr_.writeValue(theC);
            ostr_.writeBool(preMarshalInvoked);
            ostr_.writeBool(postUnmarshalInvoked);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((B v) => { this.theB = v; });
            istr_.readValue((C v) => { this.theC = v; });
            preMarshalInvoked = istr_.readBool();
            postUnmarshalInvoked = istr_.readBool();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class B : A
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A theA;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B(B theB, C theC, bool preMarshalInvoked, bool postUnmarshalInvoked, A theA) : base(theB, theC, preMarshalInvoked, postUnmarshalInvoked)
        {
            this.theA = theA;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::B";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeValue(theA);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((A v) => { this.theA = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class C : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B theB;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool preMarshalInvoked;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool postUnmarshalInvoked;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C(B theB, bool preMarshalInvoked, bool postUnmarshalInvoked)
        {
            this.theB = theB;
            this.preMarshalInvoked = preMarshalInvoked;
            this.postUnmarshalInvoked = postUnmarshalInvoked;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::C";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(theB);
            ostr_.writeBool(preMarshalInvoked);
            ostr_.writeBool(postUnmarshalInvoked);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((B v) => { this.theB = v; });
            preMarshalInvoked = istr_.readBool();
            postUnmarshalInvoked = istr_.readBool();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class D : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A theA;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B theB;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public C theC;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool preMarshalInvoked;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public bool postUnmarshalInvoked;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D(A theA, B theB, C theC, bool preMarshalInvoked, bool postUnmarshalInvoked)
        {
            this.theA = theA;
            this.theB = theB;
            this.theC = theC;
            this.preMarshalInvoked = preMarshalInvoked;
            this.postUnmarshalInvoked = postUnmarshalInvoked;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::D";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(theA);
            ostr_.writeValue(theB);
            ostr_.writeValue(theC);
            ostr_.writeBool(preMarshalInvoked);
            ostr_.writeBool(postUnmarshalInvoked);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((A v) => { this.theA = v; });
            istr_.readValue((B v) => { this.theB = v; });
            istr_.readValue((C v) => { this.theC = v; });
            preMarshalInvoked = istr_.readBool();
            postUnmarshalInvoked = istr_.readBool();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class E : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected int i;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected string s;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public E()
        {
            this.s = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public E(int i, string s)
        {
            this.i = i;
            this.s = s;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::E";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(i);
            ostr_.writeString(s);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            i = istr_.readInt();
            s = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class F : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected E e1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public E e2;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public F()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public F(E e1, E e2)
        {
            this.e1 = e1;
            this.e2 = e2;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::F";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(e1);
            ostr_.writeValue(e2);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((E v) => { this.e1 = v; });
            istr_.readValue((E v) => { this.e2 = v; });
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class G : @Base
    {
        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public G() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public G(S theS, string str) : base(theS, str)
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::G";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface I : global::Ice.Object, IOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface J : global::Ice.Object, JOperations_, I
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Compact : global::Ice.Value
    {
        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Compact()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::Compact";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), 1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class CompactExtId
    {
        public const int value = 789;
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class CompactExt : Compact
    {
        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public CompactExt()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::CompactExt";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), 789, false);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    namespace Inner
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class A : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public global::Test.A theA;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public A()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public A(global::Test.A theA)
            {
                this.theA = theA;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Test::Inner::A";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeValue(theA);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.readValue((global::Test.A v) => { this.theA = v; });
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class Ex : global::Ice.UserException
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public string reason;

            #endregion

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            private void _initDM()
            {
                this.reason = "";
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public Ex()
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public Ex(global::System.Exception ex) : base(ex)
            {
                _initDM();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            private void _initDM(string reason)
            {
                this.reason = reason;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public Ex(string reason)
            {
                _initDM(reason);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public Ex(string reason, global::System.Exception ex) : base(ex)
            {
                _initDM(reason);
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            public override string ice_id()
            {
                return "::Test::Inner::Ex";
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Test::Inner::Ex", -1, true);
                ostr_.writeString(reason);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                reason = istr_.readString();
                istr_.endSlice();
            }

            #endregion
        }

        namespace Sub
        {
            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class A : global::Ice.Value
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public global::Test.Inner.A theA;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public A()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public A(global::Test.Inner.A theA)
                {
                    this.theA = theA;
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Test::Inner::Sub::A";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, true);
                    ostr_.writeValue(theA);
                    ostr_.endSlice();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    istr_.readValue((global::Test.Inner.A v) => { this.theA = v; });
                    istr_.endSlice();
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial class Ex : global::Ice.UserException
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public string reason;

                #endregion

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                private void _initDM()
                {
                    this.reason = "";
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public Ex()
                {
                    _initDM();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public Ex(global::System.Exception ex) : base(ex)
                {
                    _initDM();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                private void _initDM(string reason)
                {
                    this.reason = reason;
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public Ex(string reason)
                {
                    _initDM(reason);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public Ex(string reason, global::System.Exception ex) : base(ex)
                {
                    _initDM(reason);
                }

                #endregion

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                public override string ice_id()
                {
                    return "::Test::Inner::Sub::Ex";
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice("::Test::Inner::Sub::Ex", -1, true);
                    ostr_.writeString(reason);
                    ostr_.endSlice();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    reason = istr_.readString();
                    istr_.endSlice();
                }

                #endregion
            }
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class A1 : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string name;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A1()
        {
            this.name = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A1(string name)
        {
            this.name = name;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::A1";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(name);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class B1 : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A1 a1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A1 a2;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B1()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public B1(A1 a1, A1 a2)
        {
            this.a1 = a1;
            this.a2 = a2;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::B1";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(a1);
            ostr_.writeValue(a2);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((A1 v) => { this.a1 = v; });
            istr_.readValue((A1 v) => { this.a2 = v; });
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class D1 : B1
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A1 a3;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A1 a4;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D1() : base()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public D1(A1 a1, A1 a2, A1 a3, A1 a4) : base(a1, a2)
        {
            this.a3 = a3;
            this.a4 = a4;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::D1";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeValue(a3);
            ostr_.writeValue(a4);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((A1 v) => { this.a3 = v; });
            istr_.readValue((A1 v) => { this.a4 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class EBase : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A1 a1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A1 a2;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public EBase()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public EBase(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM(A1 a1, A1 a2)
        {
            this.a1 = a1;
            this.a2 = a2;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public EBase(A1 a1, A1 a2)
        {
            _initDM(a1, a2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public EBase(A1 a1, A1 a2, global::System.Exception ex) : base(ex)
        {
            _initDM(a1, a2);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::EBase";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::EBase", -1, true);
            ostr_.writeValue(a1);
            ostr_.writeValue(a2);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((A1 v) => { this.a1 = v; });
            istr_.readValue((A1 v) => { this.a2 = v; });
            istr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool iceUsesClasses()
        {
            return true;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class EDerived : EBase
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A1 a3;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public A1 a4;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public EDerived()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public EDerived(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM(A1 a3, A1 a4)
        {
            this.a3 = a3;
            this.a4 = a4;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public EDerived(A1 a1, A1 a2, A1 a3, A1 a4) : base(a1, a2)
        {
            _initDM(a3, a4);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public EDerived(A1 a1, A1 a2, A1 a3, A1 a4, global::System.Exception ex) : base(a1, a2, ex)
        {
            _initDM(a3, a4);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::EDerived";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::EDerived", -1, false);
            ostr_.writeValue(a3);
            ostr_.writeValue(a4);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((A1 v) => { this.a3 = v; });
            istr_.readValue((A1 v) => { this.a4 = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Recursive : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Recursive v;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Recursive()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Recursive(Recursive v)
        {
            this.v = v;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::Recursive";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(v);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((Recursive v) => { this.v = v; });
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class K : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::Ice.Value value;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public K()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public K(global::Ice.Value value)
        {
            this.value = value;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::K";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(value);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((global::Ice.Value v) => { this.value = v; });
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class L : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string data;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public L()
        {
            this.data = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public L(string data)
        {
            this.data = data;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::L";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(data);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            data = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class StructKey : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public int i;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public string s;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public StructKey()
        {
            this.s = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public StructKey(int i, string s)
        {
            this.i = i;
            this.s = s;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::StructKey");
            global::IceInternal.HashUtil.hashAdd(ref h_, i);
            global::IceInternal.HashUtil.hashAdd(ref h_, s);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            StructKey o = (StructKey)other;
            if(!this.i.Equals(o.i))
            {
                return false;
            }
            if(this.s == null)
            {
                if(o.s != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.s.Equals(o.s))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator==(StructKey lhs, StructKey rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator!=(StructKey lhs, StructKey rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.i);
            ostr.writeString(this.s);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.i = istr.readInt();
            this.s = istr.readString();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, StructKey v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static StructKey ice_read(global::Ice.InputStream istr)
        {
            var v = new StructKey();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly StructKey _nullMarshalValue = new StructKey();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class M : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public global::System.Collections.Generic.Dictionary<StructKey, L> v;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public M()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public M(global::System.Collections.Generic.Dictionary<StructKey, L> v)
        {
            this.v = v;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::M";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            LMapHelper.write(ostr_, v);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            v = LMapHelper.read(istr_);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class F3 : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public F1 f1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public F2Prx f2;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public F3()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public F3(F1 f1, F2Prx f2)
        {
            this.f1 = f1;
            this.f2 = f2;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::F3";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(f1);
            F2PrxHelper.write(ostr_, f2);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((F1 v) => { this.f1 = v; });
            f2 = F2PrxHelper.read(istr_);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Initial : global::Ice.Object, InitialOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Empty : global::Ice.Value
    {
        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Empty()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::Empty";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class AlsoEmpty : global::Ice.Value
    {
        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public AlsoEmpty()
        {
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::AlsoEmpty";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface UnexpectedObjectExceptionTest : global::Ice.Object, UnexpectedObjectExceptionTestOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class COneMember : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Empty e;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public COneMember()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public COneMember(Empty e)
        {
            this.e = e;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::COneMember";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(e);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((Empty v) => { this.e = v; });
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class CTwoMembers : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Empty e1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Empty e2;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public CTwoMembers()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public CTwoMembers(Empty e1, Empty e2)
        {
            this.e1 = e1;
            this.e2 = e2;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Test::CTwoMembers";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeValue(e1);
            ostr_.writeValue(e2);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((Empty v) => { this.e1 = v; });
            istr_.readValue((Empty v) => { this.e2 = v; });
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class EOneMember : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Empty e;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public EOneMember()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public EOneMember(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM(Empty e)
        {
            this.e = e;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public EOneMember(Empty e)
        {
            _initDM(e);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public EOneMember(Empty e, global::System.Exception ex) : base(ex)
        {
            _initDM(e);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::EOneMember";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::EOneMember", -1, true);
            ostr_.writeValue(e);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((Empty v) => { this.e = v; });
            istr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool iceUsesClasses()
        {
            return true;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ETwoMembers : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Empty e1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Empty e2;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ETwoMembers()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ETwoMembers(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        private void _initDM(Empty e1, Empty e2)
        {
            this.e1 = e1;
            this.e2 = e2;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ETwoMembers(Empty e1, Empty e2)
        {
            _initDM(e1, e2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public ETwoMembers(Empty e1, Empty e2, global::System.Exception ex) : base(ex)
        {
            _initDM(e1, e2);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override string ice_id()
        {
            return "::Test::ETwoMembers";
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Test::ETwoMembers", -1, true);
            ostr_.writeValue(e1);
            ostr_.writeValue(e2);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.readValue((Empty v) => { this.e1 = v; });
            istr_.readValue((Empty v) => { this.e2 = v; });
            istr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool iceUsesClasses()
        {
            return true;
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class SOneMember : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Empty e;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SOneMember()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public SOneMember(Empty e)
        {
            this.e = e;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::SOneMember");
            global::IceInternal.HashUtil.hashAdd(ref h_, e);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            SOneMember o = (SOneMember)other;
            if(this.e == null)
            {
                if(o.e != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.e.Equals(o.e))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator==(SOneMember lhs, SOneMember rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator!=(SOneMember lhs, SOneMember rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeValue(this.e);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            istr.readValue((Empty v) => { this.e = v; });
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, SOneMember v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static SOneMember ice_read(global::Ice.InputStream istr)
        {
            var v = new SOneMember();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly SOneMember _nullMarshalValue = new SOneMember();

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class STwoMembers : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Empty e1;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public Empty e2;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public STwoMembers()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public STwoMembers(Empty e1, Empty e2)
        {
            this.e1 = e1;
            this.e2 = e2;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Test::STwoMembers");
            global::IceInternal.HashUtil.hashAdd(ref h_, e1);
            global::IceInternal.HashUtil.hashAdd(ref h_, e2);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            STwoMembers o = (STwoMembers)other;
            if(this.e1 == null)
            {
                if(o.e1 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.e1.Equals(o.e1))
                {
                    return false;
                }
            }
            if(this.e2 == null)
            {
                if(o.e2 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.e2.Equals(o.e2))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator==(STwoMembers lhs, STwoMembers rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static bool operator!=(STwoMembers lhs, STwoMembers rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeValue(this.e1);
            ostr.writeValue(this.e2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            istr.readValue((Empty v) => { this.e1 = v; });
            istr.readValue((Empty v) => { this.e2 = v; });
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static void ice_write(global::Ice.OutputStream ostr, STwoMembers v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        public static STwoMembers ice_read(global::Ice.InputStream istr)
        {
            var v = new STwoMembers();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly STwoMembers _nullMarshalValue = new STwoMembers();

        #endregion
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_shutdown();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getB1(B ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getB2(B ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getC(C ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getD(D ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getE(E ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getF(F ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_setRecursive();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_supportsClassGraphDepthMax(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_setCycle();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_acceptsClassCycles(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getMB(B ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getAMDMB(B ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getAll(B b1, B b2, C theC, D theD);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getK(K ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_opValue(global::Ice.Value ret, global::Ice.Value v2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_opValueSeq(global::Ice.Value[] ret, global::Ice.Value[] v2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> ret, global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getD1(D1 ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_throwEDerived();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_setG();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_opBaseSeq(@Base[] ret, @Base[] outSeq);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getCompact(Compact ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getInnerA(global::Test.Inner.A ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_getInnerSubA(global::Test.Inner.Sub.A ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_throwInnerEx();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_throwInnerSubEx();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_opM(M ret, M v2);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_opF1(F1 ret, F1 f12);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_opF2(F2Prx ret, F2Prx f22);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_opF3(F3 ret, F3 f32);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_Initial_hasF3(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public delegate void Callback_UnexpectedObjectExceptionTest_op(Empty ret);
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public struct Initial_GetMBMarshaledResult : global::Ice.MarshaledResult
    {
        public Initial_GetMBMarshaledResult(B ret, global::Ice.Current current)
        {
            _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
            _ostr.writeValue(ret);
            _ostr.writePendingValues();
            _ostr.endEncapsulation();
        }

        public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
        {
            if(_ostr == null)
            {
                return new Initial_GetMBMarshaledResult(null, current).getOutputStream(current);
            }
            return _ostr;
        }

        private global::Ice.OutputStream _ostr;
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public struct Initial_GetAMDMBMarshaledResult : global::Ice.MarshaledResult
    {
        public Initial_GetAMDMBMarshaledResult(B ret, global::Ice.Current current)
        {
            _ostr = global::IceInternal.Incoming.createResponseOutputStream(current);
            _ostr.startEncapsulation(current.encoding, global::Ice.FormatType.DefaultFormat);
            _ostr.writeValue(ret);
            _ostr.writePendingValues();
            _ostr.endEncapsulation();
        }

        public global::Ice.OutputStream getOutputStream(global::Ice.Current current)
        {
            if(_ostr == null)
            {
                return new Initial_GetAMDMBMarshaledResult(null, current).getOutputStream(current);
            }
            return _ostr;
        }

        private global::Ice.OutputStream _ostr;
    }

    public struct Initial_GetAllResult
    {
        public Initial_GetAllResult(B b1, B b2, C theC, D theD)
        {
            this.b1 = b1;
            this.b2 = b2;
            this.theC = theC;
            this.theD = theD;
        }

        public B b1;
        public B b2;
        public C theC;
        public D theD;
    }

    public struct Initial_OpValueResult
    {
        public Initial_OpValueResult(global::Ice.Value returnValue, global::Ice.Value v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public global::Ice.Value returnValue;
        public global::Ice.Value v2;
    }

    public struct Initial_OpValueSeqResult
    {
        public Initial_OpValueSeqResult(global::Ice.Value[] returnValue, global::Ice.Value[] v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public global::Ice.Value[] returnValue;
        public global::Ice.Value[] v2;
    }

    public struct Initial_OpValueMapResult
    {
        public Initial_OpValueMapResult(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> returnValue, global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public global::System.Collections.Generic.Dictionary<string, global::Ice.Value> returnValue;
        public global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v2;
    }

    public struct Initial_OpBaseSeqResult
    {
        public Initial_OpBaseSeqResult(@Base[] returnValue, @Base[] outSeq)
        {
            this.returnValue = returnValue;
            this.outSeq = outSeq;
        }

        public @Base[] returnValue;
        public @Base[] outSeq;
    }

    public struct Initial_OpMResult
    {
        public Initial_OpMResult(M returnValue, M v2)
        {
            this.returnValue = returnValue;
            this.v2 = v2;
        }

        public M returnValue;
        public M v2;
    }

    public struct Initial_OpF1Result
    {
        public Initial_OpF1Result(F1 returnValue, F1 f12)
        {
            this.returnValue = returnValue;
            this.f12 = f12;
        }

        public F1 returnValue;
        public F1 f12;
    }

    public struct Initial_OpF2Result
    {
        public Initial_OpF2Result(F2Prx returnValue, F2Prx f22)
        {
            this.returnValue = returnValue;
            this.f22 = f22;
        }

        public F2Prx returnValue;
        public F2Prx f22;
    }

    public struct Initial_OpF3Result
    {
        public Initial_OpF3Result(F3 returnValue, F3 f32)
        {
            this.returnValue = returnValue;
            this.f32 = f32;
        }

        public F3 returnValue;
        public F3 f32;
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface IPrx : global::Ice.ObjectPrx
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface JPrx : IPrx
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface InitialPrx : global::Ice.ObjectPrx
    {
        void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_shutdown(global::Ice.AsyncResult asyncResult);

        B getB1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<B> getB1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getB1> begin_getB1(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getB1(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getB1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        B end_getB1(global::Ice.AsyncResult asyncResult);

        B getB2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<B> getB2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getB2> begin_getB2(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getB2(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getB2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        B end_getB2(global::Ice.AsyncResult asyncResult);

        C getC(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<C> getCAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getC> begin_getC(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getC(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getC(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        C end_getC(global::Ice.AsyncResult asyncResult);

        D getD(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<D> getDAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getD> begin_getD(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getD(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getD(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        D end_getD(global::Ice.AsyncResult asyncResult);

        E getE(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<E> getEAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getE> begin_getE(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getE(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getE(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        E end_getE(global::Ice.AsyncResult asyncResult);

        F getF(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<F> getFAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getF> begin_getF(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getF(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getF(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        F end_getF(global::Ice.AsyncResult asyncResult);

        void setRecursive(Recursive p, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task setRecursiveAsync(Recursive p, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_setRecursive> begin_setRecursive(Recursive p, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setRecursive(Recursive p, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setRecursive(Recursive p, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_setRecursive(global::Ice.AsyncResult asyncResult);

        bool supportsClassGraphDepthMax(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> supportsClassGraphDepthMaxAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_supportsClassGraphDepthMax> begin_supportsClassGraphDepthMax(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_supportsClassGraphDepthMax(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_supportsClassGraphDepthMax(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_supportsClassGraphDepthMax(global::Ice.AsyncResult asyncResult);

        void setCycle(Recursive r, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task setCycleAsync(Recursive r, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_setCycle> begin_setCycle(Recursive r, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setCycle(Recursive r, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setCycle(Recursive r, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_setCycle(global::Ice.AsyncResult asyncResult);

        bool acceptsClassCycles(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> acceptsClassCyclesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_acceptsClassCycles> begin_acceptsClassCycles(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_acceptsClassCycles(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_acceptsClassCycles(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_acceptsClassCycles(global::Ice.AsyncResult asyncResult);

        B getMB(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<B> getMBAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getMB> begin_getMB(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getMB(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getMB(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        B end_getMB(global::Ice.AsyncResult asyncResult);

        B getAMDMB(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<B> getAMDMBAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getAMDMB> begin_getAMDMB(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getAMDMB(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getAMDMB(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        B end_getAMDMB(global::Ice.AsyncResult asyncResult);

        void getAll(out B b1, out B b2, out C theC, out D theD, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Initial_GetAllResult> getAllAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getAll> begin_getAll(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getAll(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getAll(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_getAll(out B b1, out B b2, out C theC, out D theD, global::Ice.AsyncResult asyncResult);

        K getK(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<K> getKAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getK> begin_getK(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getK(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getK(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        K end_getK(global::Ice.AsyncResult asyncResult);

        global::Ice.Value opValue(global::Ice.Value v1, out global::Ice.Value v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Initial_OpValueResult> opValueAsync(global::Ice.Value v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_opValue> begin_opValue(global::Ice.Value v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opValue(global::Ice.Value v1, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opValue(global::Ice.Value v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.Value end_opValue(out global::Ice.Value v2, global::Ice.AsyncResult asyncResult);

        global::Ice.Value[] opValueSeq(global::Ice.Value[] v1, out global::Ice.Value[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Initial_OpValueSeqResult> opValueSeqAsync(global::Ice.Value[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_opValueSeq> begin_opValueSeq(global::Ice.Value[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opValueSeq(global::Ice.Value[] v1, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opValueSeq(global::Ice.Value[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.Value[] end_opValueSeq(out global::Ice.Value[] v2, global::Ice.AsyncResult asyncResult);

        global::System.Collections.Generic.Dictionary<string, global::Ice.Value> opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v1, out global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Initial_OpValueMapResult> opValueMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_opValueMap> begin_opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v1, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::System.Collections.Generic.Dictionary<string, global::Ice.Value> end_opValueMap(out global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v2, global::Ice.AsyncResult asyncResult);

        D1 getD1(D1 d1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<D1> getD1Async(D1 d1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getD1> begin_getD1(D1 d1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getD1(D1 d1, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getD1(D1 d1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        D1 end_getD1(global::Ice.AsyncResult asyncResult);

        void throwEDerived(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwEDerivedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_throwEDerived> begin_throwEDerived(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_throwEDerived(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_throwEDerived(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_throwEDerived(global::Ice.AsyncResult asyncResult);

        void setG(G theG, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task setGAsync(G theG, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_setG> begin_setG(G theG, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setG(G theG, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setG(G theG, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_setG(global::Ice.AsyncResult asyncResult);

        @Base[] opBaseSeq(@Base[] inSeq, out @Base[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Initial_OpBaseSeqResult> opBaseSeqAsync(@Base[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_opBaseSeq> begin_opBaseSeq(@Base[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opBaseSeq(@Base[] inSeq, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opBaseSeq(@Base[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        @Base[] end_opBaseSeq(out @Base[] outSeq, global::Ice.AsyncResult asyncResult);

        Compact getCompact(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Compact> getCompactAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getCompact> begin_getCompact(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getCompact(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getCompact(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        Compact end_getCompact(global::Ice.AsyncResult asyncResult);

        global::Test.Inner.A getInnerA(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::Test.Inner.A> getInnerAAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getInnerA> begin_getInnerA(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getInnerA(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getInnerA(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::Test.Inner.A end_getInnerA(global::Ice.AsyncResult asyncResult);

        global::Test.Inner.Sub.A getInnerSubA(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<global::Test.Inner.Sub.A> getInnerSubAAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_getInnerSubA> begin_getInnerSubA(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getInnerSubA(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getInnerSubA(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        global::Test.Inner.Sub.A end_getInnerSubA(global::Ice.AsyncResult asyncResult);

        void throwInnerEx(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwInnerExAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_throwInnerEx> begin_throwInnerEx(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_throwInnerEx(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_throwInnerEx(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_throwInnerEx(global::Ice.AsyncResult asyncResult);

        void throwInnerSubEx(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task throwInnerSubExAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_throwInnerSubEx> begin_throwInnerSubEx(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_throwInnerSubEx(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_throwInnerSubEx(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_throwInnerSubEx(global::Ice.AsyncResult asyncResult);

        M opM(M v1, out M v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Initial_OpMResult> opMAsync(M v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_opM> begin_opM(M v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opM(M v1, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opM(M v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        M end_opM(out M v2, global::Ice.AsyncResult asyncResult);

        F1 opF1(F1 f11, out F1 f12, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Initial_OpF1Result> opF1Async(F1 f11, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_opF1> begin_opF1(F1 f11, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opF1(F1 f11, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opF1(F1 f11, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        F1 end_opF1(out F1 f12, global::Ice.AsyncResult asyncResult);

        F2Prx opF2(F2Prx f21, out F2Prx f22, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Initial_OpF2Result> opF2Async(F2Prx f21, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_opF2> begin_opF2(F2Prx f21, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opF2(F2Prx f21, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opF2(F2Prx f21, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        F2Prx end_opF2(out F2Prx f22, global::Ice.AsyncResult asyncResult);

        F3 opF3(F3 f31, out F3 f32, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Initial_OpF3Result> opF3Async(F3 f31, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_opF3> begin_opF3(F3 f31, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opF3(F3 f31, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_opF3(F3 f31, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        F3 end_opF3(out F3 f32, global::Ice.AsyncResult asyncResult);

        bool hasF3(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> hasF3Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Initial_hasF3> begin_hasF3(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_hasF3(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_hasF3(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_hasF3(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface UnexpectedObjectExceptionTestPrx : global::Ice.ObjectPrx
    {
        Empty op(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Empty> opAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_UnexpectedObjectExceptionTest_op> begin_op(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_op(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_op(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        Empty end_op(global::Ice.AsyncResult asyncResult);
    }
}

namespace Test
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface IOperations_
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface JOperations_ : IOperations_
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface InitialOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void shutdown(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        B getB1(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        B getB2(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        C getC(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        D getD(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        E getE(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        F getF(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void setRecursive(Recursive p, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool supportsClassGraphDepthMax(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void setCycle(Recursive r, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool acceptsClassCycles(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        Initial_GetMBMarshaledResult getMB(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Threading.Tasks.Task<Initial_GetAMDMBMarshaledResult> getAMDMBAsync(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void getAll(out B b1, out B b2, out C theC, out D theD, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        K getK(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Ice.Value opValue(global::Ice.Value v1, out global::Ice.Value v2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Ice.Value[] opValueSeq(global::Ice.Value[] v1, out global::Ice.Value[] v2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::System.Collections.Generic.Dictionary<string, global::Ice.Value> opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v1, out global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        D1 getD1(D1 d1, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwEDerived(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void setG(G theG, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        @Base[] opBaseSeq(@Base[] inSeq, out @Base[] outSeq, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        Compact getCompact(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Test.Inner.A getInnerA(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        global::Test.Inner.Sub.A getInnerSubA(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwInnerEx(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        void throwInnerSubEx(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        M opM(M v1, out M v2, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        F1 opF1(F1 f11, out F1 f12, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        F2Prx opF2(F2Prx f21, out F2Prx f22, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        F3 opF3(F3 f31, out F3 f32, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        bool hasF3(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public interface UnexpectedObjectExceptionTestOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
        Empty op(global::Ice.Current current = null);
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class IPrxHelper : global::Ice.ObjectPrxHelperBase, IPrx
    {
        public IPrxHelper()
        {
        }

        #region Async Task operations

        #endregion

        #region Asynchronous operations

        #endregion

        #region Checked and unchecked cast operations

        public static IPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            IPrx r = b as IPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                IPrxHelper h = new IPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static IPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            IPrx r = b as IPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                IPrxHelper h = new IPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static IPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    IPrxHelper h = new IPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static IPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    IPrxHelper h = new IPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static IPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            IPrx r = b as IPrx;
            if(r == null)
            {
                IPrxHelper h = new IPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static IPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            IPrxHelper h = new IPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::I"
        };

        public static string ice_staticId() => "::Test::I";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, IPrx v)
        {
            ostr.writeProxy(v);
        }

        public static IPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                IPrxHelper result = new IPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class JPrxHelper : global::Ice.ObjectPrxHelperBase, JPrx
    {
        public JPrxHelper()
        {
        }

        #region Async Task operations

        #endregion

        #region Asynchronous operations

        #endregion

        #region Checked and unchecked cast operations

        public static JPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            JPrx r = b as JPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                JPrxHelper h = new JPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static JPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            JPrx r = b as JPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                JPrxHelper h = new JPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static JPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    JPrxHelper h = new JPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static JPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    JPrxHelper h = new JPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static JPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            JPrx r = b as JPrx;
            if(r == null)
            {
                JPrxHelper h = new JPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static JPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            JPrxHelper h = new JPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::I",
            "::Test::J"
        };

        public static string ice_staticId() => "::Test::J";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, JPrx v)
        {
            ostr.writeProxy(v);
        }

        public static JPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                JPrxHelper result = new JPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class BaseSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, @Base[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static @Base[] read(global::Ice.InputStream istr)
        {
            @Base[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new @Base[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::IceInternal.Patcher.arrayReadValue<@Base>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ValueSeqHelper
    {
        public static void write(global::Ice.OutputStream ostr, global::Ice.Value[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static global::Ice.Value[] read(global::Ice.InputStream istr)
        {
            global::Ice.Value[] v;
            int v_lenx = istr.readAndCheckSeqSize(1);
            v = new global::Ice.Value[v_lenx];
            for(int ix = 0; ix < v_lenx; ++ix)
            {
                istr.readValue(global::IceInternal.Patcher.arrayReadValue<global::Ice.Value>(v, ix));
            }
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class ValueMapHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, global::Ice.Value> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeValue(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, global::Ice.Value> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, global::Ice.Value> r = new global::System.Collections.Generic.Dictionary<string, global::Ice.Value>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                istr.readValue((global::Ice.Value v) => { r[k] = v; });
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class LMapHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<StructKey, L> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<StructKey, L> e in v)
                {
                    StructKey.ice_write(ostr, e.Key);
                    ostr.writeValue(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<StructKey, L> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<StructKey, L> r = new global::System.Collections.Generic.Dictionary<StructKey, L>();
            for(int i = 0; i < sz; ++i)
            {
                StructKey k;
                k = null;
                k = StructKey.ice_read(istr);
                istr.readValue((L v) => { r[k] = v; });
            }
            return r;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class InitialPrxHelper : global::Ice.ObjectPrxHelperBase, InitialPrx
    {
        public InitialPrxHelper()
        {
        }

        #region Synchronous operations

        public void shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public B getB1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getB1Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public B getB2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getB2Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public C getC(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getCAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public D getD(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public E getE(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getEAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public F getF(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getFAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setRecursive(Recursive p, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_setRecursiveAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool supportsClassGraphDepthMax(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_supportsClassGraphDepthMaxAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setCycle(Recursive r, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_setCycleAsync(r, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool acceptsClassCycles(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_acceptsClassCyclesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public B getMB(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getMBAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public B getAMDMB(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getAMDMBAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void getAll(out B b1, out B b2, out C theC, out D theD, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_getAllAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                b1 = result_.b1;
                b2 = result_.b2;
                theC = result_.theC;
                theD = result_.theD;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public K getK(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getKAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.Value opValue(global::Ice.Value v1, out global::Ice.Value v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opValueAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Ice.Value[] opValueSeq(global::Ice.Value[] v1, out global::Ice.Value[] v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opValueSeqAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, global::Ice.Value> opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v1, out global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opValueMapAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public D1 getD1(D1 d1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getD1Async(d1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwEDerived(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwEDerivedAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void setG(G theG, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_setGAsync(theG, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public @Base[] opBaseSeq(@Base[] inSeq, out @Base[] outSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opBaseSeqAsync(inSeq, context, null, global::System.Threading.CancellationToken.None, true).Result;
                outSeq = result_.outSeq;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Compact getCompact(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getCompactAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Test.Inner.A getInnerA(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getInnerAAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public global::Test.Inner.Sub.A getInnerSubA(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getInnerSubAAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwInnerEx(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwInnerExAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void throwInnerSubEx(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_throwInnerSubExAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public M opM(M v1, out M v2, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opMAsync(v1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                v2 = result_.v2;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public F1 opF1(F1 f11, out F1 f12, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opF1Async(f11, context, null, global::System.Threading.CancellationToken.None, true).Result;
                f12 = result_.f12;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public F2Prx opF2(F2Prx f21, out F2Prx f22, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opF2Async(f21, context, null, global::System.Threading.CancellationToken.None, true).Result;
                f22 = result_.f22;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public F3 opF3(F3 f31, out F3 f32, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opF3Async(f31, context, null, global::System.Threading.CancellationToken.None, true).Result;
                f32 = result_.f32;
                return result_.returnValue;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool hasF3(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_hasF3Async(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task shutdownAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<B> getB1Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getB1Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<B> _iceI_getB1Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getB1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<B>(progress, cancel);
            _iceI_getB1(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getB1_name = "getB1";

        private void _iceI_getB1(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<B>(completed);
            outAsync.invoke(
                _getB1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    B ret = null;
                    istr.readValue((B v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<B> getB2Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getB2Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<B> _iceI_getB2Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getB2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<B>(progress, cancel);
            _iceI_getB2(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getB2_name = "getB2";

        private void _iceI_getB2(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<B>(completed);
            outAsync.invoke(
                _getB2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    B ret = null;
                    istr.readValue((B v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<C> getCAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getCAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<C> _iceI_getCAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getC_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<C>(progress, cancel);
            _iceI_getC(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getC_name = "getC";

        private void _iceI_getC(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<C>(completed);
            outAsync.invoke(
                _getC_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    C ret = null;
                    istr.readValue((C v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<D> getDAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<D> _iceI_getDAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getD_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<D>(progress, cancel);
            _iceI_getD(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getD_name = "getD";

        private void _iceI_getD(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<D>(completed);
            outAsync.invoke(
                _getD_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    D ret = null;
                    istr.readValue((D v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<E> getEAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getEAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<E> _iceI_getEAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getE_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<E>(progress, cancel);
            _iceI_getE(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getE_name = "getE";

        private void _iceI_getE(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<E>(completed);
            outAsync.invoke(
                _getE_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    E ret = null;
                    istr.readValue((E v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<F> getFAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getFAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<F> _iceI_getFAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getF_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<F>(progress, cancel);
            _iceI_getF(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getF_name = "getF";

        private void _iceI_getF(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<F>(completed);
            outAsync.invoke(
                _getF_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    F ret = null;
                    istr.readValue((F v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task setRecursiveAsync(Recursive p, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setRecursiveAsync(p, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setRecursiveAsync(Recursive iceP_p, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setRecursive(iceP_p, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setRecursive_name = "setRecursive";

        private void _iceI_setRecursive(Recursive iceP_p, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setRecursive_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_p);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task<bool> supportsClassGraphDepthMaxAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_supportsClassGraphDepthMaxAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_supportsClassGraphDepthMaxAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_supportsClassGraphDepthMax_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_supportsClassGraphDepthMax(context, synchronous, completed);
            return completed.Task;
        }

        private const string _supportsClassGraphDepthMax_name = "supportsClassGraphDepthMax";

        private void _iceI_supportsClassGraphDepthMax(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _supportsClassGraphDepthMax_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task setCycleAsync(Recursive r, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setCycleAsync(r, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setCycleAsync(Recursive iceP_r, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setCycle(iceP_r, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setCycle_name = "setCycle";

        private void _iceI_setCycle(Recursive iceP_r, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setCycle_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_r);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task<bool> acceptsClassCyclesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_acceptsClassCyclesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_acceptsClassCyclesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_acceptsClassCycles_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_acceptsClassCycles(context, synchronous, completed);
            return completed.Task;
        }

        private const string _acceptsClassCycles_name = "acceptsClassCycles";

        private void _iceI_acceptsClassCycles(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _acceptsClassCycles_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<B> getMBAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getMBAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<B> _iceI_getMBAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getMB_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<B>(progress, cancel);
            _iceI_getMB(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getMB_name = "getMB";

        private void _iceI_getMB(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<B>(completed);
            outAsync.invoke(
                _getMB_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    B ret = null;
                    istr.readValue((B v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<B> getAMDMBAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getAMDMBAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<B> _iceI_getAMDMBAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getAMDMB_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<B>(progress, cancel);
            _iceI_getAMDMB(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getAMDMB_name = "getAMDMB";

        private void _iceI_getAMDMB(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<B>(completed);
            outAsync.invoke(
                _getAMDMB_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    B ret = null;
                    istr.readValue((B v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_GetAllResult> getAllAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getAllAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_GetAllResult> _iceI_getAllAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getAll_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_GetAllResult>(progress, cancel);
            _iceI_getAll(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getAll_name = "getAll";

        private void _iceI_getAll(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_GetAllResult>(completed);
            outAsync.invoke(
                _getAll_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Initial_GetAllResult ret = new Initial_GetAllResult();
                    istr.readValue((B v) => {ret.b1 = v; });
                    istr.readValue((B v) => {ret.b2 = v; });
                    istr.readValue((C v) => {ret.theC = v; });
                    istr.readValue((D v) => {ret.theD = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<K> getKAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getKAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<K> _iceI_getKAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getK_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<K>(progress, cancel);
            _iceI_getK(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getK_name = "getK";

        private void _iceI_getK(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<K>(completed);
            outAsync.invoke(
                _getK_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    K ret = null;
                    istr.readValue((K v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpValueResult> opValueAsync(global::Ice.Value v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opValueAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpValueResult> _iceI_opValueAsync(global::Ice.Value iceP_v1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opValue_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpValueResult>(progress, cancel);
            _iceI_opValue(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opValue_name = "opValue";

        private void _iceI_opValue(global::Ice.Value iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpValueResult>(completed);
            outAsync.invoke(
                _opValue_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_v1);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Initial_OpValueResult ret = new Initial_OpValueResult();
                    istr.readValue((global::Ice.Value v) => {ret.v2 = v; });
                    istr.readValue((global::Ice.Value v) => {ret.returnValue = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpValueSeqResult> opValueSeqAsync(global::Ice.Value[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opValueSeqAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpValueSeqResult> _iceI_opValueSeqAsync(global::Ice.Value[] iceP_v1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opValueSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpValueSeqResult>(progress, cancel);
            _iceI_opValueSeq(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opValueSeq_name = "opValueSeq";

        private void _iceI_opValueSeq(global::Ice.Value[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpValueSeqResult>(completed);
            outAsync.invoke(
                _opValueSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ValueSeqHelper.write(ostr, iceP_v1);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Initial_OpValueSeqResult ret = new Initial_OpValueSeqResult();
                    ret.v2 = ValueSeqHelper.read(istr);
                    ret.returnValue = ValueSeqHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpValueMapResult> opValueMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opValueMapAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpValueMapResult> _iceI_opValueMapAsync(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> iceP_v1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opValueMap_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpValueMapResult>(progress, cancel);
            _iceI_opValueMap(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opValueMap_name = "opValueMap";

        private void _iceI_opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpValueMapResult>(completed);
            outAsync.invoke(
                _opValueMap_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ValueMapHelper.write(ostr, iceP_v1);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Initial_OpValueMapResult ret = new Initial_OpValueMapResult();
                    ret.v2 = ValueMapHelper.read(istr);
                    ret.returnValue = ValueMapHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<D1> getD1Async(D1 d1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getD1Async(d1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<D1> _iceI_getD1Async(D1 iceP_d1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getD1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<D1>(progress, cancel);
            _iceI_getD1(iceP_d1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getD1_name = "getD1";

        private void _iceI_getD1(D1 iceP_d1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<D1>(completed);
            outAsync.invoke(
                _getD1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_d1);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    D1 ret = null;
                    istr.readValue((D1 v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task throwEDerivedAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwEDerivedAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwEDerivedAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwEDerived_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwEDerived(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwEDerived_name = "throwEDerived";

        private void _iceI_throwEDerived(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwEDerived_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(EDerived)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task setGAsync(G theG, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setGAsync(theG, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_setGAsync(G iceP_theG, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_setG(iceP_theG, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setG_name = "setG";

        private void _iceI_setG(G iceP_theG, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _setG_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_theG);
                    ostr.writePendingValues();
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpBaseSeqResult> opBaseSeqAsync(@Base[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opBaseSeqAsync(inSeq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpBaseSeqResult> _iceI_opBaseSeqAsync(@Base[] iceP_inSeq, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opBaseSeq_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpBaseSeqResult>(progress, cancel);
            _iceI_opBaseSeq(iceP_inSeq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opBaseSeq_name = "opBaseSeq";

        private void _iceI_opBaseSeq(@Base[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpBaseSeqResult>(completed);
            outAsync.invoke(
                _opBaseSeq_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BaseSeqHelper.write(ostr, iceP_inSeq);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Initial_OpBaseSeqResult ret = new Initial_OpBaseSeqResult();
                    ret.outSeq = BaseSeqHelper.read(istr);
                    ret.returnValue = BaseSeqHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Compact> getCompactAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getCompactAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Compact> _iceI_getCompactAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getCompact_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Compact>(progress, cancel);
            _iceI_getCompact(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getCompact_name = "getCompact";

        private void _iceI_getCompact(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Compact>(completed);
            outAsync.invoke(
                _getCompact_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Compact ret = null;
                    istr.readValue((Compact v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.Inner.A> getInnerAAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getInnerAAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.Inner.A> _iceI_getInnerAAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getInnerA_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Test.Inner.A>(progress, cancel);
            _iceI_getInnerA(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getInnerA_name = "getInnerA";

        private void _iceI_getInnerA(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.Inner.A>(completed);
            outAsync.invoke(
                _getInnerA_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Test.Inner.A ret = null;
                    istr.readValue((global::Test.Inner.A v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.Inner.Sub.A> getInnerSubAAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getInnerSubAAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.Inner.Sub.A> _iceI_getInnerSubAAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getInnerSubA_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Test.Inner.Sub.A>(progress, cancel);
            _iceI_getInnerSubA(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getInnerSubA_name = "getInnerSubA";

        private void _iceI_getInnerSubA(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.Inner.Sub.A>(completed);
            outAsync.invoke(
                _getInnerSubA_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    global::Test.Inner.Sub.A ret = null;
                    istr.readValue((global::Test.Inner.Sub.A v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task throwInnerExAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwInnerExAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwInnerExAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwInnerEx_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwInnerEx(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwInnerEx_name = "throwInnerEx";

        private void _iceI_throwInnerEx(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwInnerEx_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Test.Inner.Ex)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task throwInnerSubExAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_throwInnerSubExAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_throwInnerSubExAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_throwInnerSubEx_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_throwInnerSubEx(context, synchronous, completed);
            return completed.Task;
        }

        private const string _throwInnerSubEx_name = "throwInnerSubEx";

        private void _iceI_throwInnerSubEx(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _throwInnerSubEx_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(global::Test.Inner.Sub.Ex)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpMResult> opMAsync(M v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opMAsync(v1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpMResult> _iceI_opMAsync(M iceP_v1, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opM_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpMResult>(progress, cancel);
            _iceI_opM(iceP_v1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opM_name = "opM";

        private void _iceI_opM(M iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpMResult>(completed);
            outAsync.invoke(
                _opM_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_v1);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Initial_OpMResult ret = new Initial_OpMResult();
                    istr.readValue((M v) => {ret.v2 = v; });
                    istr.readValue((M v) => {ret.returnValue = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpF1Result> opF1Async(F1 f11, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opF1Async(f11, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpF1Result> _iceI_opF1Async(F1 iceP_f11, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opF1_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpF1Result>(progress, cancel);
            _iceI_opF1(iceP_f11, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opF1_name = "opF1";

        private void _iceI_opF1(F1 iceP_f11, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpF1Result>(completed);
            outAsync.invoke(
                _opF1_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_f11);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Initial_OpF1Result ret = new Initial_OpF1Result();
                    istr.readValue((F1 v) => {ret.f12 = v; });
                    istr.readValue((F1 v) => {ret.returnValue = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpF2Result> opF2Async(F2Prx f21, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opF2Async(f21, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpF2Result> _iceI_opF2Async(F2Prx iceP_f21, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opF2_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpF2Result>(progress, cancel);
            _iceI_opF2(iceP_f21, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opF2_name = "opF2";

        private void _iceI_opF2(F2Prx iceP_f21, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpF2Result>(completed);
            outAsync.invoke(
                _opF2_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    F2PrxHelper.write(ostr, iceP_f21);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Initial_OpF2Result ret = new Initial_OpF2Result();
                    ret.f22 = F2PrxHelper.read(istr);
                    ret.returnValue = F2PrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Initial_OpF3Result> opF3Async(F3 f31, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opF3Async(f31, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Initial_OpF3Result> _iceI_opF3Async(F3 iceP_f31, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opF3_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Initial_OpF3Result>(progress, cancel);
            _iceI_opF3(iceP_f31, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opF3_name = "opF3";

        private void _iceI_opF3(F3 iceP_f31, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Initial_OpF3Result>(completed);
            outAsync.invoke(
                _opF3_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_f31);
                    ostr.writePendingValues();
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Initial_OpF3Result ret = new Initial_OpF3Result();
                    istr.readValue((F3 v) => {ret.f32 = v; });
                    istr.readValue((F3 v) => {ret.returnValue = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> hasF3Async(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_hasF3Async(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_hasF3Async(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_hasF3_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_hasF3(context, synchronous, completed);
            return completed.Task;
        }

        private const string _hasF3_name = "hasF3";

        private void _iceI_hasF3(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _hasF3_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Initial_shutdown> begin_shutdown(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_shutdown(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_shutdown(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_shutdown(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(context, callback, cookie, false);
        }

        public void end_shutdown(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_shutdown> begin_shutdown(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_shutdown, object>(
                (Callback_Initial_shutdown cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _shutdown_name, cookie, completedCallback);
            _iceI_shutdown(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getB1> begin_getB1(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getB1(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getB1(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getB1(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getB1(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getB1(context, callback, cookie, false);
        }

        public B end_getB1(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getB1_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<B>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getB1> begin_getB1(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getB1_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getB1, B>(
                (Callback_Initial_getB1 cb, B ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getB1_name, cookie, completedCallback);
            _iceI_getB1(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getB2> begin_getB2(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getB2(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getB2(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getB2(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getB2(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getB2(context, callback, cookie, false);
        }

        public B end_getB2(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getB2_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<B>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getB2> begin_getB2(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getB2_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getB2, B>(
                (Callback_Initial_getB2 cb, B ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getB2_name, cookie, completedCallback);
            _iceI_getB2(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getC> begin_getC(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getC(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getC(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getC(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getC(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getC(context, callback, cookie, false);
        }

        public C end_getC(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getC_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<C>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getC> begin_getC(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getC_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getC, C>(
                (Callback_Initial_getC cb, C ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getC_name, cookie, completedCallback);
            _iceI_getC(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getD> begin_getD(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getD(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getD(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getD(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getD(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getD(context, callback, cookie, false);
        }

        public D end_getD(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getD_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<D>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getD> begin_getD(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getD_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getD, D>(
                (Callback_Initial_getD cb, D ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getD_name, cookie, completedCallback);
            _iceI_getD(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getE> begin_getE(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getE(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getE(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getE(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getE(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getE(context, callback, cookie, false);
        }

        public E end_getE(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getE_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<E>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getE> begin_getE(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getE_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getE, E>(
                (Callback_Initial_getE cb, E ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getE_name, cookie, completedCallback);
            _iceI_getE(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getF> begin_getF(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getF(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getF(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getF(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getF(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getF(context, callback, cookie, false);
        }

        public F end_getF(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getF_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<F>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getF> begin_getF(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getF_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getF, F>(
                (Callback_Initial_getF cb, F ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getF_name, cookie, completedCallback);
            _iceI_getF(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_setRecursive> begin_setRecursive(Recursive p, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setRecursive(p, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setRecursive(Recursive p, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setRecursive(p, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setRecursive(Recursive p, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setRecursive(p, context, callback, cookie, false);
        }

        public void end_setRecursive(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setRecursive_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_setRecursive> begin_setRecursive(Recursive iceP_p, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_setRecursive, object>(
                (Callback_Initial_setRecursive cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _setRecursive_name, cookie, completedCallback);
            _iceI_setRecursive(iceP_p, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_supportsClassGraphDepthMax> begin_supportsClassGraphDepthMax(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_supportsClassGraphDepthMax(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_supportsClassGraphDepthMax(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_supportsClassGraphDepthMax(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_supportsClassGraphDepthMax(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_supportsClassGraphDepthMax(context, callback, cookie, false);
        }

        public bool end_supportsClassGraphDepthMax(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _supportsClassGraphDepthMax_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_supportsClassGraphDepthMax> begin_supportsClassGraphDepthMax(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_supportsClassGraphDepthMax_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_supportsClassGraphDepthMax, bool>(
                (Callback_Initial_supportsClassGraphDepthMax cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _supportsClassGraphDepthMax_name, cookie, completedCallback);
            _iceI_supportsClassGraphDepthMax(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_setCycle> begin_setCycle(Recursive r, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setCycle(r, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setCycle(Recursive r, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setCycle(r, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setCycle(Recursive r, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setCycle(r, context, callback, cookie, false);
        }

        public void end_setCycle(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setCycle_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_setCycle> begin_setCycle(Recursive iceP_r, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_setCycle, object>(
                (Callback_Initial_setCycle cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _setCycle_name, cookie, completedCallback);
            _iceI_setCycle(iceP_r, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_acceptsClassCycles> begin_acceptsClassCycles(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_acceptsClassCycles(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_acceptsClassCycles(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_acceptsClassCycles(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_acceptsClassCycles(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_acceptsClassCycles(context, callback, cookie, false);
        }

        public bool end_acceptsClassCycles(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _acceptsClassCycles_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_acceptsClassCycles> begin_acceptsClassCycles(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_acceptsClassCycles_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_acceptsClassCycles, bool>(
                (Callback_Initial_acceptsClassCycles cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _acceptsClassCycles_name, cookie, completedCallback);
            _iceI_acceptsClassCycles(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getMB> begin_getMB(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getMB(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getMB(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getMB(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getMB(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getMB(context, callback, cookie, false);
        }

        public B end_getMB(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getMB_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<B>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getMB> begin_getMB(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getMB_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getMB, B>(
                (Callback_Initial_getMB cb, B ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getMB_name, cookie, completedCallback);
            _iceI_getMB(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getAMDMB> begin_getAMDMB(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getAMDMB(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getAMDMB(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getAMDMB(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getAMDMB(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getAMDMB(context, callback, cookie, false);
        }

        public B end_getAMDMB(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getAMDMB_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<B>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getAMDMB> begin_getAMDMB(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getAMDMB_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getAMDMB, B>(
                (Callback_Initial_getAMDMB cb, B ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getAMDMB_name, cookie, completedCallback);
            _iceI_getAMDMB(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getAll> begin_getAll(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getAll(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getAll(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getAll(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getAll(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getAll(context, callback, cookie, false);
        }

        public void end_getAll(out B b1, out B b2, out C theC, out D theD, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getAll_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Initial_GetAllResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            b1 = result_.b1;
            b2 = result_.b2;
            theC = result_.theC;
            theD = result_.theD;
        }

        private global::Ice.AsyncResult<Callback_Initial_getAll> begin_getAll(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getAll_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getAll, Initial_GetAllResult>(
                (Callback_Initial_getAll cb, Initial_GetAllResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.b1, ret.b2, ret.theC, ret.theD);
                    }
                },
                this, _getAll_name, cookie, completedCallback);
            _iceI_getAll(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getK> begin_getK(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getK(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getK(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getK(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getK(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getK(context, callback, cookie, false);
        }

        public K end_getK(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getK_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<K>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getK> begin_getK(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getK_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getK, K>(
                (Callback_Initial_getK cb, K ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getK_name, cookie, completedCallback);
            _iceI_getK(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_opValue> begin_opValue(global::Ice.Value v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opValue(v1, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opValue(global::Ice.Value v1, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opValue(v1, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opValue(global::Ice.Value v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opValue(v1, context, callback, cookie, false);
        }

        public global::Ice.Value end_opValue(out global::Ice.Value v2, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opValue_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Initial_OpValueResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            v2 = result_.v2;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_Initial_opValue> begin_opValue(global::Ice.Value iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opValue_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_opValue, Initial_OpValueResult>(
                (Callback_Initial_opValue cb, Initial_OpValueResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.v2);
                    }
                },
                this, _opValue_name, cookie, completedCallback);
            _iceI_opValue(iceP_v1, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_opValueSeq> begin_opValueSeq(global::Ice.Value[] v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opValueSeq(v1, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opValueSeq(global::Ice.Value[] v1, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opValueSeq(v1, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opValueSeq(global::Ice.Value[] v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opValueSeq(v1, context, callback, cookie, false);
        }

        public global::Ice.Value[] end_opValueSeq(out global::Ice.Value[] v2, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opValueSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Initial_OpValueSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            v2 = result_.v2;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_Initial_opValueSeq> begin_opValueSeq(global::Ice.Value[] iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opValueSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_opValueSeq, Initial_OpValueSeqResult>(
                (Callback_Initial_opValueSeq cb, Initial_OpValueSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.v2);
                    }
                },
                this, _opValueSeq_name, cookie, completedCallback);
            _iceI_opValueSeq(iceP_v1, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_opValueMap> begin_opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opValueMap(v1, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v1, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opValueMap(v1, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opValueMap(v1, context, callback, cookie, false);
        }

        public global::System.Collections.Generic.Dictionary<string, global::Ice.Value> end_opValueMap(out global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v2, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opValueMap_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Initial_OpValueMapResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            v2 = result_.v2;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_Initial_opValueMap> begin_opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opValueMap_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_opValueMap, Initial_OpValueMapResult>(
                (Callback_Initial_opValueMap cb, Initial_OpValueMapResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.v2);
                    }
                },
                this, _opValueMap_name, cookie, completedCallback);
            _iceI_opValueMap(iceP_v1, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getD1> begin_getD1(D1 d1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getD1(d1, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getD1(D1 d1, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getD1(d1, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getD1(D1 d1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getD1(d1, context, callback, cookie, false);
        }

        public D1 end_getD1(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getD1_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<D1>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getD1> begin_getD1(D1 iceP_d1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getD1_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getD1, D1>(
                (Callback_Initial_getD1 cb, D1 ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getD1_name, cookie, completedCallback);
            _iceI_getD1(iceP_d1, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_throwEDerived> begin_throwEDerived(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_throwEDerived(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_throwEDerived(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwEDerived(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_throwEDerived(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwEDerived(context, callback, cookie, false);
        }

        public void end_throwEDerived(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwEDerived_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_throwEDerived> begin_throwEDerived(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_throwEDerived_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_throwEDerived, object>(
                (Callback_Initial_throwEDerived cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _throwEDerived_name, cookie, completedCallback);
            _iceI_throwEDerived(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_setG> begin_setG(G theG, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setG(theG, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setG(G theG, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setG(theG, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setG(G theG, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setG(theG, context, callback, cookie, false);
        }

        public void end_setG(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setG_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_setG> begin_setG(G iceP_theG, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_setG, object>(
                (Callback_Initial_setG cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _setG_name, cookie, completedCallback);
            _iceI_setG(iceP_theG, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_opBaseSeq> begin_opBaseSeq(@Base[] inSeq, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opBaseSeq(inSeq, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opBaseSeq(@Base[] inSeq, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opBaseSeq(inSeq, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opBaseSeq(@Base[] inSeq, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opBaseSeq(inSeq, context, callback, cookie, false);
        }

        public @Base[] end_opBaseSeq(out @Base[] outSeq, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opBaseSeq_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Initial_OpBaseSeqResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            outSeq = result_.outSeq;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_Initial_opBaseSeq> begin_opBaseSeq(@Base[] iceP_inSeq, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opBaseSeq_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_opBaseSeq, Initial_OpBaseSeqResult>(
                (Callback_Initial_opBaseSeq cb, Initial_OpBaseSeqResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.outSeq);
                    }
                },
                this, _opBaseSeq_name, cookie, completedCallback);
            _iceI_opBaseSeq(iceP_inSeq, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getCompact> begin_getCompact(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getCompact(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getCompact(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getCompact(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getCompact(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getCompact(context, callback, cookie, false);
        }

        public Compact end_getCompact(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getCompact_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Compact>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getCompact> begin_getCompact(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getCompact_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getCompact, Compact>(
                (Callback_Initial_getCompact cb, Compact ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getCompact_name, cookie, completedCallback);
            _iceI_getCompact(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getInnerA> begin_getInnerA(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getInnerA(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getInnerA(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getInnerA(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getInnerA(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getInnerA(context, callback, cookie, false);
        }

        public global::Test.Inner.A end_getInnerA(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getInnerA_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Test.Inner.A>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getInnerA> begin_getInnerA(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getInnerA_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getInnerA, global::Test.Inner.A>(
                (Callback_Initial_getInnerA cb, global::Test.Inner.A ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getInnerA_name, cookie, completedCallback);
            _iceI_getInnerA(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_getInnerSubA> begin_getInnerSubA(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getInnerSubA(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getInnerSubA(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getInnerSubA(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getInnerSubA(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getInnerSubA(context, callback, cookie, false);
        }

        public global::Test.Inner.Sub.A end_getInnerSubA(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getInnerSubA_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Test.Inner.Sub.A>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_getInnerSubA> begin_getInnerSubA(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getInnerSubA_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_getInnerSubA, global::Test.Inner.Sub.A>(
                (Callback_Initial_getInnerSubA cb, global::Test.Inner.Sub.A ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getInnerSubA_name, cookie, completedCallback);
            _iceI_getInnerSubA(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_throwInnerEx> begin_throwInnerEx(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_throwInnerEx(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_throwInnerEx(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwInnerEx(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_throwInnerEx(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwInnerEx(context, callback, cookie, false);
        }

        public void end_throwInnerEx(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwInnerEx_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_throwInnerEx> begin_throwInnerEx(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_throwInnerEx_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_throwInnerEx, object>(
                (Callback_Initial_throwInnerEx cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _throwInnerEx_name, cookie, completedCallback);
            _iceI_throwInnerEx(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_throwInnerSubEx> begin_throwInnerSubEx(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_throwInnerSubEx(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_throwInnerSubEx(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwInnerSubEx(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_throwInnerSubEx(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_throwInnerSubEx(context, callback, cookie, false);
        }

        public void end_throwInnerSubEx(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _throwInnerSubEx_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_throwInnerSubEx> begin_throwInnerSubEx(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_throwInnerSubEx_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_throwInnerSubEx, object>(
                (Callback_Initial_throwInnerSubEx cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _throwInnerSubEx_name, cookie, completedCallback);
            _iceI_throwInnerSubEx(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_opM> begin_opM(M v1, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opM(v1, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opM(M v1, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opM(v1, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opM(M v1, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opM(v1, context, callback, cookie, false);
        }

        public M end_opM(out M v2, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opM_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Initial_OpMResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            v2 = result_.v2;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_Initial_opM> begin_opM(M iceP_v1, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opM_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_opM, Initial_OpMResult>(
                (Callback_Initial_opM cb, Initial_OpMResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.v2);
                    }
                },
                this, _opM_name, cookie, completedCallback);
            _iceI_opM(iceP_v1, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_opF1> begin_opF1(F1 f11, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opF1(f11, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opF1(F1 f11, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opF1(f11, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opF1(F1 f11, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opF1(f11, context, callback, cookie, false);
        }

        public F1 end_opF1(out F1 f12, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opF1_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Initial_OpF1Result>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            f12 = result_.f12;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_Initial_opF1> begin_opF1(F1 iceP_f11, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opF1_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_opF1, Initial_OpF1Result>(
                (Callback_Initial_opF1 cb, Initial_OpF1Result ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.f12);
                    }
                },
                this, _opF1_name, cookie, completedCallback);
            _iceI_opF1(iceP_f11, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_opF2> begin_opF2(F2Prx f21, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opF2(f21, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opF2(F2Prx f21, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opF2(f21, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opF2(F2Prx f21, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opF2(f21, context, callback, cookie, false);
        }

        public F2Prx end_opF2(out F2Prx f22, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opF2_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Initial_OpF2Result>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            f22 = result_.f22;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_Initial_opF2> begin_opF2(F2Prx iceP_f21, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opF2_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_opF2, Initial_OpF2Result>(
                (Callback_Initial_opF2 cb, Initial_OpF2Result ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.f22);
                    }
                },
                this, _opF2_name, cookie, completedCallback);
            _iceI_opF2(iceP_f21, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_opF3> begin_opF3(F3 f31, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_opF3(f31, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_opF3(F3 f31, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opF3(f31, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_opF3(F3 f31, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_opF3(f31, context, callback, cookie, false);
        }

        public F3 end_opF3(out F3 f32, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opF3_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Initial_OpF3Result>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            f32 = result_.f32;
            return result_.returnValue;
        }

        private global::Ice.AsyncResult<Callback_Initial_opF3> begin_opF3(F3 iceP_f31, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opF3_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_opF3, Initial_OpF3Result>(
                (Callback_Initial_opF3 cb, Initial_OpF3Result ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.f32);
                    }
                },
                this, _opF3_name, cookie, completedCallback);
            _iceI_opF3(iceP_f31, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Initial_hasF3> begin_hasF3(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_hasF3(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_hasF3(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_hasF3(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_hasF3(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_hasF3(context, callback, cookie, false);
        }

        public bool end_hasF3(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _hasF3_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Initial_hasF3> begin_hasF3(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_hasF3_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Initial_hasF3, bool>(
                (Callback_Initial_hasF3 cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _hasF3_name, cookie, completedCallback);
            _iceI_hasF3(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static InitialPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            InitialPrx r = b as InitialPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                InitialPrxHelper h = new InitialPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static InitialPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            InitialPrx r = b as InitialPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                InitialPrxHelper h = new InitialPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static InitialPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    InitialPrxHelper h = new InitialPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static InitialPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    InitialPrxHelper h = new InitialPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static InitialPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            InitialPrx r = b as InitialPrx;
            if(r == null)
            {
                InitialPrxHelper h = new InitialPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static InitialPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            InitialPrxHelper h = new InitialPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Initial"
        };

        public static string ice_staticId() => "::Test::Initial";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, InitialPrx v)
        {
            ostr.writeProxy(v);
        }

        public static InitialPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                InitialPrxHelper result = new InitialPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class UnexpectedObjectExceptionTestPrxHelper : global::Ice.ObjectPrxHelperBase, UnexpectedObjectExceptionTestPrx
    {
        public UnexpectedObjectExceptionTestPrxHelper()
        {
        }

        #region Synchronous operations

        public Empty op(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_opAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<Empty> opAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Empty> _iceI_opAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_op_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Empty>(progress, cancel);
            _iceI_op(context, synchronous, completed);
            return completed.Task;
        }

        private const string _op_name = "op";

        private void _iceI_op(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Empty>(completed);
            outAsync.invoke(
                _op_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Empty ret = null;
                    istr.readValue((Empty v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_UnexpectedObjectExceptionTest_op> begin_op(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_op(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_op(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_op(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_op(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_op(context, callback, cookie, false);
        }

        public Empty end_op(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _op_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Empty>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_UnexpectedObjectExceptionTest_op> begin_op(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_op_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_UnexpectedObjectExceptionTest_op, Empty>(
                (Callback_UnexpectedObjectExceptionTest_op cb, Empty ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _op_name, cookie, completedCallback);
            _iceI_op(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static UnexpectedObjectExceptionTestPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            UnexpectedObjectExceptionTestPrx r = b as UnexpectedObjectExceptionTestPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                UnexpectedObjectExceptionTestPrxHelper h = new UnexpectedObjectExceptionTestPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static UnexpectedObjectExceptionTestPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            UnexpectedObjectExceptionTestPrx r = b as UnexpectedObjectExceptionTestPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                UnexpectedObjectExceptionTestPrxHelper h = new UnexpectedObjectExceptionTestPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static UnexpectedObjectExceptionTestPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    UnexpectedObjectExceptionTestPrxHelper h = new UnexpectedObjectExceptionTestPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static UnexpectedObjectExceptionTestPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    UnexpectedObjectExceptionTestPrxHelper h = new UnexpectedObjectExceptionTestPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static UnexpectedObjectExceptionTestPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            UnexpectedObjectExceptionTestPrx r = b as UnexpectedObjectExceptionTestPrx;
            if(r == null)
            {
                UnexpectedObjectExceptionTestPrxHelper h = new UnexpectedObjectExceptionTestPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static UnexpectedObjectExceptionTestPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            UnexpectedObjectExceptionTestPrxHelper h = new UnexpectedObjectExceptionTestPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::UnexpectedObjectExceptionTest"
        };

        public static string ice_staticId() => "::Test::UnexpectedObjectExceptionTest";

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, UnexpectedObjectExceptionTestPrx v)
        {
            ostr.writeProxy(v);
        }

        public static UnexpectedObjectExceptionTestPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                UnexpectedObjectExceptionTestPrxHelper result = new UnexpectedObjectExceptionTestPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DOneMemberHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, COneMember> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, COneMember> e in v)
                {
                    ostr.writeInt(e.Key);
                    ostr.writeValue(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, COneMember> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, COneMember> r = new global::System.Collections.Generic.Dictionary<int, COneMember>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                istr.readValue((COneMember v) => { r[k] = v; });
            }
            return r;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public sealed class DTwoMembersHelper
    {
        public static void write(global::Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<int, CTwoMembers> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<int, CTwoMembers> e in v)
                {
                    ostr.writeInt(e.Key);
                    ostr.writeValue(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<int, CTwoMembers> read(global::Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<int, CTwoMembers> r = new global::System.Collections.Generic.Dictionary<int, CTwoMembers>();
            for(int i = 0; i < sz; ++i)
            {
                int k;
                k = istr.readInt();
                istr.readValue((CTwoMembers v) => { r[k] = v; });
            }
            return r;
        }
    }
}

namespace Test
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class IDisp_ : global::Ice.ObjectImpl, I
    {
        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::I"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::I";
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class JDisp_ : global::Ice.ObjectImpl, J
    {
        #region Inherited Slice operations

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::I",
            "::Test::J"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::J";
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class InitialDisp_ : global::Ice.ObjectImpl, Initial
    {
        #region Slice operations

        public abstract void shutdown(global::Ice.Current current = null);

        public abstract B getB1(global::Ice.Current current = null);

        public abstract B getB2(global::Ice.Current current = null);

        public abstract C getC(global::Ice.Current current = null);

        public abstract D getD(global::Ice.Current current = null);

        public abstract E getE(global::Ice.Current current = null);

        public abstract F getF(global::Ice.Current current = null);

        public abstract void setRecursive(Recursive p, global::Ice.Current current = null);

        public abstract bool supportsClassGraphDepthMax(global::Ice.Current current = null);

        public abstract void setCycle(Recursive r, global::Ice.Current current = null);

        public abstract bool acceptsClassCycles(global::Ice.Current current = null);

        public abstract Initial_GetMBMarshaledResult getMB(global::Ice.Current current = null);

        public abstract global::System.Threading.Tasks.Task<Initial_GetAMDMBMarshaledResult> getAMDMBAsync(global::Ice.Current current = null);

        public abstract void getAll(out B b1, out B b2, out C theC, out D theD, global::Ice.Current current = null);

        public abstract K getK(global::Ice.Current current = null);

        public abstract global::Ice.Value opValue(global::Ice.Value v1, out global::Ice.Value v2, global::Ice.Current current = null);

        public abstract global::Ice.Value[] opValueSeq(global::Ice.Value[] v1, out global::Ice.Value[] v2, global::Ice.Current current = null);

        public abstract global::System.Collections.Generic.Dictionary<string, global::Ice.Value> opValueMap(global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v1, out global::System.Collections.Generic.Dictionary<string, global::Ice.Value> v2, global::Ice.Current current = null);

        public abstract D1 getD1(D1 d1, global::Ice.Current current = null);

        public abstract void throwEDerived(global::Ice.Current current = null);

        public abstract void setG(G theG, global::Ice.Current current = null);

        public abstract @Base[] opBaseSeq(@Base[] inSeq, out @Base[] outSeq, global::Ice.Current current = null);

        public abstract Compact getCompact(global::Ice.Current current = null);

        public abstract global::Test.Inner.A getInnerA(global::Ice.Current current = null);

        public abstract global::Test.Inner.Sub.A getInnerSubA(global::Ice.Current current = null);

        public abstract void throwInnerEx(global::Ice.Current current = null);

        public abstract void throwInnerSubEx(global::Ice.Current current = null);

        public abstract M opM(M v1, out M v2, global::Ice.Current current = null);

        public abstract F1 opF1(F1 f11, out F1 f12, global::Ice.Current current = null);

        public abstract F2Prx opF2(F2Prx f21, out F2Prx f22, global::Ice.Current current = null);

        public abstract F3 opF3(F3 f31, out F3 f32, global::Ice.Current current = null);

        public abstract bool hasF3(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Initial"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::Initial";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_shutdown(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getB1(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getB1(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getB2(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getB2(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getC(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getC(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getD(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getD(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getE(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getE(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getF(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getF(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setRecursive(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Recursive iceP_p;
            iceP_p = null;
            istr.readValue((Recursive v) => {iceP_p = v; });
            istr.readPendingValues();
            inS.endReadParams();
            obj.setRecursive(iceP_p, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_supportsClassGraphDepthMax(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.supportsClassGraphDepthMax(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setCycle(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Recursive iceP_r;
            iceP_r = null;
            istr.readValue((Recursive v) => {iceP_r = v; });
            istr.readPendingValues();
            inS.endReadParams();
            obj.setCycle(iceP_r, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_acceptsClassCycles(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.acceptsClassCycles(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getMB(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setMarshaledResult(obj.getMB(current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getAMDMB(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            return inS.setMarshaledResultTask(obj.getAMDMBAsync(current));
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getAll(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            B iceP_b1;
            B iceP_b2;
            C iceP_theC;
            D iceP_theD;
            obj.getAll(out iceP_b1, out iceP_b2, out iceP_theC, out iceP_theD, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_b1);
            ostr.writeValue(iceP_b2);
            ostr.writeValue(iceP_theC);
            ostr.writeValue(iceP_theD);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getK(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getK(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opValue(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Value iceP_v1;
            iceP_v1 = null;
            istr.readValue((global::Ice.Value v) => {iceP_v1 = v; });
            istr.readPendingValues();
            inS.endReadParams();
            global::Ice.Value iceP_v2;
            var ret = obj.opValue(iceP_v1, out iceP_v2, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_v2);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opValueSeq(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::Ice.Value[] iceP_v1;
            iceP_v1 = ValueSeqHelper.read(istr);
            istr.readPendingValues();
            inS.endReadParams();
            global::Ice.Value[] iceP_v2;
            var ret = obj.opValueSeq(iceP_v1, out iceP_v2, current);
            var ostr = inS.startWriteParams();
            ValueSeqHelper.write(ostr, iceP_v2);
            ValueSeqHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opValueMap(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            global::System.Collections.Generic.Dictionary<string, global::Ice.Value> iceP_v1;
            iceP_v1 = ValueMapHelper.read(istr);
            istr.readPendingValues();
            inS.endReadParams();
            global::System.Collections.Generic.Dictionary<string, global::Ice.Value> iceP_v2;
            var ret = obj.opValueMap(iceP_v1, out iceP_v2, current);
            var ostr = inS.startWriteParams();
            ValueMapHelper.write(ostr, iceP_v2);
            ValueMapHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getD1(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            D1 iceP_d1;
            iceP_d1 = null;
            istr.readValue((D1 v) => {iceP_d1 = v; });
            istr.readPendingValues();
            inS.endReadParams();
            var ret = obj.getD1(iceP_d1, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwEDerived(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwEDerived(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setG(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            G iceP_theG;
            iceP_theG = null;
            istr.readValue((G v) => {iceP_theG = v; });
            istr.readPendingValues();
            inS.endReadParams();
            obj.setG(iceP_theG, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opBaseSeq(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            @Base[] iceP_inSeq;
            iceP_inSeq = BaseSeqHelper.read(istr);
            istr.readPendingValues();
            inS.endReadParams();
            @Base[] iceP_outSeq;
            var ret = obj.opBaseSeq(iceP_inSeq, out iceP_outSeq, current);
            var ostr = inS.startWriteParams();
            BaseSeqHelper.write(ostr, iceP_outSeq);
            BaseSeqHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getCompact(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getCompact(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getInnerA(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getInnerA(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getInnerSubA(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.getInnerSubA(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwInnerEx(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwInnerEx(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_throwInnerSubEx(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.throwInnerSubEx(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opM(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            M iceP_v1;
            iceP_v1 = null;
            istr.readValue((M v) => {iceP_v1 = v; });
            istr.readPendingValues();
            inS.endReadParams();
            M iceP_v2;
            var ret = obj.opM(iceP_v1, out iceP_v2, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_v2);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opF1(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            F1 iceP_f11;
            iceP_f11 = null;
            istr.readValue((F1 v) => {iceP_f11 = v; });
            istr.readPendingValues();
            inS.endReadParams();
            F1 iceP_f12;
            var ret = obj.opF1(iceP_f11, out iceP_f12, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_f12);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opF2(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            F2Prx iceP_f21;
            iceP_f21 = F2PrxHelper.read(istr);
            inS.endReadParams();
            F2Prx iceP_f22;
            var ret = obj.opF2(iceP_f21, out iceP_f22, current);
            var ostr = inS.startWriteParams();
            F2PrxHelper.write(ostr, iceP_f22);
            F2PrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opF3(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            F3 iceP_f31;
            iceP_f31 = null;
            istr.readValue((F3 v) => {iceP_f31 = v; });
            istr.readPendingValues();
            inS.endReadParams();
            F3 iceP_f32;
            var ret = obj.opF3(iceP_f31, out iceP_f32, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(iceP_f32);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_hasF3(Initial obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.hasF3(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "acceptsClassCycles",
            "getAMDMB",
            "getAll",
            "getB1",
            "getB2",
            "getC",
            "getCompact",
            "getD",
            "getD1",
            "getE",
            "getF",
            "getInnerA",
            "getInnerSubA",
            "getK",
            "getMB",
            "hasF3",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "opBaseSeq",
            "opF1",
            "opF2",
            "opF3",
            "opM",
            "opValue",
            "opValueMap",
            "opValueSeq",
            "setCycle",
            "setG",
            "setRecursive",
            "shutdown",
            "supportsClassGraphDepthMax",
            "throwEDerived",
            "throwInnerEx",
            "throwInnerSubEx"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_acceptsClassCycles(this, inS, current);
                }
                case 1:
                {
                    return iceD_getAMDMB(this, inS, current);
                }
                case 2:
                {
                    return iceD_getAll(this, inS, current);
                }
                case 3:
                {
                    return iceD_getB1(this, inS, current);
                }
                case 4:
                {
                    return iceD_getB2(this, inS, current);
                }
                case 5:
                {
                    return iceD_getC(this, inS, current);
                }
                case 6:
                {
                    return iceD_getCompact(this, inS, current);
                }
                case 7:
                {
                    return iceD_getD(this, inS, current);
                }
                case 8:
                {
                    return iceD_getD1(this, inS, current);
                }
                case 9:
                {
                    return iceD_getE(this, inS, current);
                }
                case 10:
                {
                    return iceD_getF(this, inS, current);
                }
                case 11:
                {
                    return iceD_getInnerA(this, inS, current);
                }
                case 12:
                {
                    return iceD_getInnerSubA(this, inS, current);
                }
                case 13:
                {
                    return iceD_getK(this, inS, current);
                }
                case 14:
                {
                    return iceD_getMB(this, inS, current);
                }
                case 15:
                {
                    return iceD_hasF3(this, inS, current);
                }
                case 16:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 17:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 18:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 19:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 20:
                {
                    return iceD_opBaseSeq(this, inS, current);
                }
                case 21:
                {
                    return iceD_opF1(this, inS, current);
                }
                case 22:
                {
                    return iceD_opF2(this, inS, current);
                }
                case 23:
                {
                    return iceD_opF3(this, inS, current);
                }
                case 24:
                {
                    return iceD_opM(this, inS, current);
                }
                case 25:
                {
                    return iceD_opValue(this, inS, current);
                }
                case 26:
                {
                    return iceD_opValueMap(this, inS, current);
                }
                case 27:
                {
                    return iceD_opValueSeq(this, inS, current);
                }
                case 28:
                {
                    return iceD_setCycle(this, inS, current);
                }
                case 29:
                {
                    return iceD_setG(this, inS, current);
                }
                case 30:
                {
                    return iceD_setRecursive(this, inS, current);
                }
                case 31:
                {
                    return iceD_shutdown(this, inS, current);
                }
                case 32:
                {
                    return iceD_supportsClassGraphDepthMax(this, inS, current);
                }
                case 33:
                {
                    return iceD_throwEDerived(this, inS, current);
                }
                case 34:
                {
                    return iceD_throwInnerEx(this, inS, current);
                }
                case 35:
                {
                    return iceD_throwInnerSubEx(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.8.0-alpha.0")]
    public abstract class UnexpectedObjectExceptionTestDisp_ : global::Ice.ObjectImpl, UnexpectedObjectExceptionTest
    {
        #region Slice operations

        public abstract Empty op(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::UnexpectedObjectExceptionTest"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return ice_staticId();
        }

        public static new string ice_staticId()
        {
            return "::Test::UnexpectedObjectExceptionTest";
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_op(UnexpectedObjectExceptionTest obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.op(current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "op"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_op(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
