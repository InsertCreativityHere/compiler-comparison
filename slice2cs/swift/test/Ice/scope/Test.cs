//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test
{
    public partial record struct S
    {
        public int v;

        partial void ice_initialize();

        public S(int v)
        {
            this.v = v;
            ice_initialize();
        }

        public S(Ice.InputStream istr)
        {
            this.v = istr.readInt();
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeInt(this.v);
        }

        public static void ice_write(Ice.OutputStream ostr, S v)
        {
            v.ice_writeMembers(ostr);
        }

        public static S ice_read(Ice.InputStream istr) => new(istr);
    }

    [Ice.SliceTypeId("::Test::C")]
    public partial class C : Ice.Value
    {
        public S s;

        partial void ice_initialize();

        public C(S s)
        {
            this.s = s;
            ice_initialize();
        }

        public C()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::C";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            s.ice_writeMembers(ostr_);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            s = new S(istr_);
            istr_.endSlice();
        }
    }

    public enum E1
    {
        v1,
        v2,
        v3
    }

    public sealed class E1Helper
    {
        public static void write(Ice.OutputStream ostr, E1 v)
        {
            ostr.writeEnum((int)v, 2);
        }

        public static E1 read(Ice.InputStream istr)
        {
            E1 v;
            v = (E1)istr.readEnum(2);
            return v;
        }
    }

    public sealed partial record class S1
    {
        public string s = "";

        partial void ice_initialize();

        public S1()
        {
            ice_initialize();
        }

        public S1(string s)
        {
            global::System.ArgumentNullException.ThrowIfNull(s);
            this.s = s;
            ice_initialize();
        }

        public S1(Ice.InputStream istr)
        {
            this.s = istr.readString();
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeString(this.s);
        }

        public static void ice_write(Ice.OutputStream ostr, S1 v)
        {
            v.ice_writeMembers(ostr);
        }

        public static S1 ice_read(Ice.InputStream istr) => new(istr);
    }

    [Ice.SliceTypeId("::Test::C1")]
    public partial class C1 : Ice.Value
    {
        public string s = "";

        partial void ice_initialize();

        public C1(string s)
        {
            global::System.ArgumentNullException.ThrowIfNull(s);
            this.s = s;
            ice_initialize();
        }

        public C1()
        {
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::C1";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(s);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            s = istr_.readString();
            istr_.endSlice();
        }
    }

    public sealed partial record class S2
    {
        public E1 E1;

        public S1 S1;

        public C1? C1;

        public S1[] S1Seq;

        public global::System.Collections.Generic.Dictionary<string, S1> S1Map;

        partial void ice_initialize();

        public S2(S1 S1, S1[] S1Seq, global::System.Collections.Generic.Dictionary<string, S1> S1Map)
        {
            global::System.ArgumentNullException.ThrowIfNull(S1);
            this.S1 = S1;
            global::System.ArgumentNullException.ThrowIfNull(S1Seq);
            this.S1Seq = S1Seq;
            global::System.ArgumentNullException.ThrowIfNull(S1Map);
            this.S1Map = S1Map;
            ice_initialize();
        }

        public S2(E1 E1, S1 S1, C1? C1, S1[] S1Seq, global::System.Collections.Generic.Dictionary<string, S1> S1Map)
        {
            this.E1 = E1;
            global::System.ArgumentNullException.ThrowIfNull(S1);
            this.S1 = S1;
            this.C1 = C1;
            global::System.ArgumentNullException.ThrowIfNull(S1Seq);
            this.S1Seq = S1Seq;
            global::System.ArgumentNullException.ThrowIfNull(S1Map);
            this.S1Map = S1Map;
            ice_initialize();
        }

        public S2(Ice.InputStream istr)
        {
            this.E1 = (E1)istr.readEnum(2);
            this.S1 = new S1(istr);
            istr.readValue((C1? v) => { this.C1 = v; });
            this.S1Seq = S1SeqHelper.read(istr);
            this.S1Map = S1MapHelper.read(istr);
            ice_initialize();
        }

        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeEnum((int)this.E1, 2);
            S1.ice_write(ostr, this.S1);
            ostr.writeValue(this.C1);
            S1SeqHelper.write(ostr, this.S1Seq);
            S1MapHelper.write(ostr, this.S1Map);
        }

        public static void ice_write(Ice.OutputStream ostr, S2 v)
        {
            v.ice_writeMembers(ostr);
        }

        public static S2 ice_read(Ice.InputStream istr) => new(istr);
    }

    [Ice.SliceTypeId("::Test::C2")]
    public partial class C2 : Ice.Value
    {
        public E1 E1;

        public S1 S1;

        public C1? C1;

        public S1[] S1Seq;

        public global::System.Collections.Generic.Dictionary<string, S1> S1Map;

        partial void ice_initialize();

        public C2(E1 E1, S1 S1, C1? C1, S1[] S1Seq, global::System.Collections.Generic.Dictionary<string, S1> S1Map)
        {
            this.E1 = E1;
            global::System.ArgumentNullException.ThrowIfNull(S1);
            this.S1 = S1;
            this.C1 = C1;
            global::System.ArgumentNullException.ThrowIfNull(S1Seq);
            this.S1Seq = S1Seq;
            global::System.ArgumentNullException.ThrowIfNull(S1Map);
            this.S1Map = S1Map;
            ice_initialize();
        }

        public C2(S1 S1, S1[] S1Seq, global::System.Collections.Generic.Dictionary<string, S1> S1Map)
        {
            global::System.ArgumentNullException.ThrowIfNull(S1);
            this.S1 = S1;
            global::System.ArgumentNullException.ThrowIfNull(S1Seq);
            this.S1Seq = S1Seq;
            global::System.ArgumentNullException.ThrowIfNull(S1Map);
            this.S1Map = S1Map;
            ice_initialize();
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public C2()
        {
            this.S1 = null!;
            this.S1Seq = null!;
            this.S1Map = null!;
            ice_initialize();
        }

        public static new string ice_staticId() => "::Test::C2";
        public override string ice_id() => ice_staticId();

        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeEnum((int)E1, 2);
            S1.ice_write(ostr_, S1);
            ostr_.writeValue(C1);
            S1SeqHelper.write(ostr_, S1Seq);
            S1MapHelper.write(ostr_, S1Map);
            ostr_.endSlice();
        }

        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            E1 = (E1)istr_.readEnum(2);
            S1 = new S1(istr_);
            istr_.readValue((C1? v) => { this.C1 = v; });
            S1Seq = S1SeqHelper.read(istr_);
            S1Map = S1MapHelper.read(istr_);
            istr_.endSlice();
        }
    }

    [Ice.SliceTypeId("::Test::I")]
    public partial interface I : Ice.Object
    {
        S opS(S s1, out S s2, Ice.Current current);

        S[] opSSeq(S[] s1, out S[] s2, Ice.Current current);

        global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, Ice.Current current);

        C? opC(C? c1, out C? c2, Ice.Current current);

        C?[] opCSeq(C?[] s1, out C?[] s2, Ice.Current current);

        global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, Ice.Current current);

        E1 opE1(E1 E1, Ice.Current current);

        S1 opS1(S1 S1, Ice.Current current);

        C1? opC1(C1? C1, Ice.Current current);

        S1[] opS1Seq(S1[] S1Seq, Ice.Current current);

        global::System.Collections.Generic.Dictionary<string, S1> opS1Map(global::System.Collections.Generic.Dictionary<string, S1> S1Map, Ice.Current current);

        void shutdown(Ice.Current current);
    }

    namespace Inner
    {
        public partial record struct S
        {
            public int v;

            partial void ice_initialize();

            public S(int v)
            {
                this.v = v;
                ice_initialize();
            }

            public S(Ice.InputStream istr)
            {
                this.v = istr.readInt();
                ice_initialize();
            }

            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeInt(this.v);
            }

            public static void ice_write(Ice.OutputStream ostr, S v)
            {
                v.ice_writeMembers(ostr);
            }

            public static S ice_read(Ice.InputStream istr) => new(istr);
        }

        namespace Inner2
        {
            public partial record struct S
            {
                public int v;

                partial void ice_initialize();

                public S(int v)
                {
                    this.v = v;
                    ice_initialize();
                }

                public S(Ice.InputStream istr)
                {
                    this.v = istr.readInt();
                    ice_initialize();
                }

                public void ice_writeMembers(Ice.OutputStream ostr)
                {
                    ostr.writeInt(this.v);
                }

                public static void ice_write(Ice.OutputStream ostr, S v)
                {
                    v.ice_writeMembers(ostr);
                }

                public static S ice_read(Ice.InputStream istr) => new(istr);
            }

            [Ice.SliceTypeId("::Test::Inner::Inner2::C")]
            public partial class C : Ice.Value
            {
                public S s;

                partial void ice_initialize();

                public C(S s)
                {
                    this.s = s;
                    ice_initialize();
                }

                public C()
                {
                    ice_initialize();
                }

                public static new string ice_staticId() => "::Test::Inner::Inner2::C";
                public override string ice_id() => ice_staticId();

                protected override void iceWriteImpl(Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, true);
                    s.ice_writeMembers(ostr_);
                    ostr_.endSlice();
                }

                protected override void iceReadImpl(Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    s = new S(istr_);
                    istr_.endSlice();
                }
            }

            [Ice.SliceTypeId("::Test::Inner::Inner2::I")]
            public partial interface I : Ice.Object
            {
                S opS(S s1, out S s2, Ice.Current current);

                S[] opSSeq(S[] s1, out S[] s2, Ice.Current current);

                global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, Ice.Current current);

                C? opC(C? c1, out C? c2, Ice.Current current);

                C?[] opCSeq(C?[] c1, out C?[] c2, Ice.Current current);

                global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, Ice.Current current);

                void shutdown(Ice.Current current);
            }
        }

        [Ice.SliceTypeId("::Test::Inner::C")]
        public partial class C : Ice.Value
        {
            public S s;

            partial void ice_initialize();

            public C(S s)
            {
                this.s = s;
                ice_initialize();
            }

            public C()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::Inner::C";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                s.ice_writeMembers(ostr_);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                s = new S(istr_);
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::Inner::I")]
        public partial interface I : Ice.Object
        {
            global::Test.Inner.Inner2.S opS(global::Test.Inner.Inner2.S s1, out global::Test.Inner.Inner2.S s2, Ice.Current current);

            global::Test.Inner.Inner2.S[] opSSeq(global::Test.Inner.Inner2.S[] s1, out global::Test.Inner.Inner2.S[] s2, Ice.Current current);

            global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s2, Ice.Current current);

            global::Test.Inner.Inner2.C? opC(global::Test.Inner.Inner2.C? c1, out global::Test.Inner.Inner2.C? c2, Ice.Current current);

            global::Test.Inner.Inner2.C?[] opCSeq(global::Test.Inner.Inner2.C?[] c1, out global::Test.Inner.Inner2.C?[] c2, Ice.Current current);

            global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> c2, Ice.Current current);

            void shutdown(Ice.Current current);
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            [Ice.SliceTypeId("::Inner::Test::Inner2::I")]
            public partial interface I : Ice.Object
            {
                global::Test.S opS(global::Test.S s1, out global::Test.S s2, Ice.Current current);

                global::Test.S[] opSSeq(global::Test.S[] s1, out global::Test.S[] s2, Ice.Current current);

                global::System.Collections.Generic.Dictionary<string, global::Test.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.S> s2, Ice.Current current);

                global::Test.C? opC(global::Test.C? c1, out global::Test.C? c2, Ice.Current current);

                global::Test.C?[] opCSeq(global::Test.C?[] c1, out global::Test.C?[] c2, Ice.Current current);

                global::System.Collections.Generic.Dictionary<string, global::Test.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.C?> c2, Ice.Current current);

                void shutdown(Ice.Current current);
            }
        }
    }
}

namespace Test
{
    public record struct I_OpSResult(S returnValue, S s2);

    public record struct I_OpSSeqResult(S[] returnValue, S[] s2);

    public record struct I_OpSMapResult(global::System.Collections.Generic.Dictionary<string, S> returnValue, global::System.Collections.Generic.Dictionary<string, S> s2);

    public record struct I_OpCResult(C? returnValue, C? c2);

    public record struct I_OpCSeqResult(C?[] returnValue, C?[] s2);

    public record struct I_OpCMapResult(global::System.Collections.Generic.Dictionary<string, C?> returnValue, global::System.Collections.Generic.Dictionary<string, C?> c2);

    namespace Inner
    {
        namespace Inner2
        {
            public record struct I_OpSResult(S returnValue, S s2);

            public record struct I_OpSSeqResult(S[] returnValue, S[] s2);

            public record struct I_OpSMapResult(global::System.Collections.Generic.Dictionary<string, S> returnValue, global::System.Collections.Generic.Dictionary<string, S> s2);

            public record struct I_OpCResult(C? returnValue, C? c2);

            public record struct I_OpCSeqResult(C?[] returnValue, C?[] c2);

            public record struct I_OpCMapResult(global::System.Collections.Generic.Dictionary<string, C?> returnValue, global::System.Collections.Generic.Dictionary<string, C?> c2);
        }

        public record struct I_OpSResult(global::Test.Inner.Inner2.S returnValue, global::Test.Inner.Inner2.S s2);

        public record struct I_OpSSeqResult(global::Test.Inner.Inner2.S[] returnValue, global::Test.Inner.Inner2.S[] s2);

        public record struct I_OpSMapResult(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> returnValue, global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s2);

        public record struct I_OpCResult(global::Test.Inner.Inner2.C? returnValue, global::Test.Inner.Inner2.C? c2);

        public record struct I_OpCSeqResult(global::Test.Inner.Inner2.C?[] returnValue, global::Test.Inner.Inner2.C?[] c2);

        public record struct I_OpCMapResult(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> returnValue, global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> c2);
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            public record struct I_OpSResult(global::Test.S returnValue, global::Test.S s2);

            public record struct I_OpSSeqResult(global::Test.S[] returnValue, global::Test.S[] s2);

            public record struct I_OpSMapResult(global::System.Collections.Generic.Dictionary<string, global::Test.S> returnValue, global::System.Collections.Generic.Dictionary<string, global::Test.S> s2);

            public record struct I_OpCResult(global::Test.C? returnValue, global::Test.C? c2);

            public record struct I_OpCSeqResult(global::Test.C?[] returnValue, global::Test.C?[] c2);

            public record struct I_OpCMapResult(global::System.Collections.Generic.Dictionary<string, global::Test.C?> returnValue, global::System.Collections.Generic.Dictionary<string, global::Test.C?> c2);
        }
    }
}

namespace Test
{
    public interface IPrx : Ice.ObjectPrx
    {
        S opS(S s1, out S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        S[] opSSeq(S[] s1, out S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        C? opC(C? c1, out C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        C?[] opCSeq(C?[] s1, out C?[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(C?[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        E1 opE1(E1 E1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<E1> opE1Async(E1 E1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        S1 opS1(S1 S1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<S1> opS1Async(S1 S1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        C1? opC1(C1? C1, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<C1?> opC1Async(C1? C1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        S1[] opS1Seq(S1[] S1Seq, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<S1[]> opS1SeqAsync(S1[] S1Seq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::System.Collections.Generic.Dictionary<string, S1> opS1Map(global::System.Collections.Generic.Dictionary<string, S1> S1Map, global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, S1>> opS1MapAsync(global::System.Collections.Generic.Dictionary<string, S1> S1Map, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }

    namespace Inner
    {
        namespace Inner2
        {
            public interface IPrx : Ice.ObjectPrx
            {
                S opS(S s1, out S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                S[] opSSeq(S[] s1, out S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                C? opC(C? c1, out C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                C?[] opCSeq(C?[] c1, out C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
            }
        }

        public interface IPrx : Ice.ObjectPrx
        {
            global::Test.Inner.Inner2.S opS(global::Test.Inner.Inner2.S s1, out global::Test.Inner.Inner2.S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(global::Test.Inner.Inner2.S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Test.Inner.Inner2.S[] opSSeq(global::Test.Inner.Inner2.S[] s1, out global::Test.Inner.Inner2.S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(global::Test.Inner.Inner2.S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Test.Inner.Inner2.C? opC(global::Test.Inner.Inner2.C? c1, out global::Test.Inner.Inner2.C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(global::Test.Inner.Inner2.C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::Test.Inner.Inner2.C?[] opCSeq(global::Test.Inner.Inner2.C?[] c1, out global::Test.Inner.Inner2.C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(global::Test.Inner.Inner2.C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

            void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            public interface IPrx : Ice.ObjectPrx
            {
                global::Test.S opS(global::Test.S s1, out global::Test.S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(global::Test.S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::Test.S[] opSSeq(global::Test.S[] s1, out global::Test.S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(global::Test.S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::System.Collections.Generic.Dictionary<string, global::Test.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::Test.C? opC(global::Test.C? c1, out global::Test.C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(global::Test.C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::Test.C?[] opCSeq(global::Test.C?[] c1, out global::Test.C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(global::Test.C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                global::System.Collections.Generic.Dictionary<string, global::Test.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

                void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

                global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
            }
        }
    }
}

namespace Test
{
    public sealed class SMapHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, S> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, S> e in v)
                {
                    ostr.writeString(e.Key);
                    e.Value.ice_writeMembers(ostr);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, S> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, S> r = new global::System.Collections.Generic.Dictionary<string, S>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                S v;
                v = new S(istr);
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class SSeqHelper
    {
        public static void write(Ice.OutputStream ostr, S[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static S[] read(Ice.InputStream istr)
        {
            S[] v;
            {
                int szx = istr.readAndCheckSeqSize(4);
                v = new S[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new S(istr);
                }
            }
            return v;
        }
    }

    public sealed class CMapHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, C?> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, C?> e in v)
                {
                    ostr.writeString(e.Key);
                    ostr.writeValue(e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, C?> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, C?> r = new global::System.Collections.Generic.Dictionary<string, C?>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                istr.readValue((C? v) => { r[k] = v; });
            }
            return r;
        }
    }

    public sealed class CSeqHelper
    {
        public static void write(Ice.OutputStream ostr, C?[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static C?[] read(Ice.InputStream istr)
        {
            C?[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new C?[szx];
                for (int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(Ice.Internal.Patcher.arrayReadValue<C>(v, ix));
                }
            }
            return v;
        }
    }

    public sealed class S1SeqHelper
    {
        public static void write(Ice.OutputStream ostr, S1[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    v[ix].ice_writeMembers(ostr);
                }
            }
        }

        public static S1[] read(Ice.InputStream istr)
        {
            S1[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new S1[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new S1(istr);
                }
            }
            return v;
        }
    }

    public sealed class S1MapHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, S1> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, S1> e in v)
                {
                    ostr.writeString(e.Key);
                    S1.ice_write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, S1> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, S1> r = new global::System.Collections.Generic.Dictionary<string, S1>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                S1 v;
                v = new S1(istr);
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class IPrxHelper : Ice.ObjectPrxHelperBase, IPrx
    {
        public S opS(S s1, out S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opSAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public S[] opSSeq(S[] s1, out S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opSSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opSMapAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public C? opC(C? c1, out C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opCAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                c2 = result_.c2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public C?[] opCSeq(C?[] s1, out C?[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opCSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                s2 = result_.s2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                var result_ = _iceI_opCMapAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                c2 = result_.c2;
                return result_.returnValue;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public E1 opE1(E1 E1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opE1Async(E1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public S1 opS1(S1 S1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opS1Async(S1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public C1? opC1(C1? C1, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opC1Async(C1, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public S1[] opS1Seq(S1[] S1Seq, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opS1SeqAsync(S1Seq, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Collections.Generic.Dictionary<string, S1> opS1Map(global::System.Collections.Generic.Dictionary<string, S1> S1Map, global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_opS1MapAsync(S1Map, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<I_OpSResult> _iceI_opSAsync(S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opS_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpSResult>(progress, cancel);
            _iceI_opS(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opS_name = "opS";

        private void _iceI_opS(S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<I_OpSResult>(completed);
            outAsync.invoke(
                _opS_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    iceP_s1.ice_writeMembers(ostr);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new I_OpSResult();
                    ret.s2 = new S(istr);
                    ret.returnValue = new S(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSSeqAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<I_OpSSeqResult> _iceI_opSSeqAsync(S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpSSeqResult>(progress, cancel);
            _iceI_opSSeq(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSSeq_name = "opSSeq";

        private void _iceI_opSSeq(S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<I_OpSSeqResult>(completed);
            outAsync.invoke(
                _opSSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    SSeqHelper.write(ostr, iceP_s1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new I_OpSSeqResult();
                    ret.s2 = SSeqHelper.read(istr);
                    ret.returnValue = SSeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opSMapAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<I_OpSMapResult> _iceI_opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opSMap_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpSMapResult>(progress, cancel);
            _iceI_opSMap(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opSMap_name = "opSMap";

        private void _iceI_opSMap(global::System.Collections.Generic.Dictionary<string, S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<I_OpSMapResult>(completed);
            outAsync.invoke(
                _opSMap_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    SMapHelper.write(ostr, iceP_s1);
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new I_OpSMapResult();
                    ret.s2 = SMapHelper.read(istr);
                    ret.returnValue = SMapHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opCAsync(c1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<I_OpCResult> _iceI_opCAsync(C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opC_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpCResult>(progress, cancel);
            _iceI_opC(iceP_c1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opC_name = "opC";

        private void _iceI_opC(C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<I_OpCResult>(completed);
            outAsync.invoke(
                _opC_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_c1);
                    ostr.writePendingValues();
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new I_OpCResult();
                    istr.readValue((C? v) => { ret.c2 = v; });
                    istr.readValue((C? v) => {ret.returnValue = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(C?[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opCSeqAsync(s1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<I_OpCSeqResult> _iceI_opCSeqAsync(C?[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opCSeq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpCSeqResult>(progress, cancel);
            _iceI_opCSeq(iceP_s1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opCSeq_name = "opCSeq";

        private void _iceI_opCSeq(C?[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<I_OpCSeqResult>(completed);
            outAsync.invoke(
                _opCSeq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    CSeqHelper.write(ostr, iceP_s1);
                    ostr.writePendingValues();
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new I_OpCSeqResult();
                    ret.s2 = CSeqHelper.read(istr);
                    ret.returnValue = CSeqHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opCMapAsync(c1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<I_OpCMapResult> _iceI_opCMapAsync(global::System.Collections.Generic.Dictionary<string, C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opCMap_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpCMapResult>(progress, cancel);
            _iceI_opCMap(iceP_c1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opCMap_name = "opCMap";

        private void _iceI_opCMap(global::System.Collections.Generic.Dictionary<string, C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<I_OpCMapResult>(completed);
            outAsync.invoke(
                _opCMap_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    CMapHelper.write(ostr, iceP_c1);
                    ostr.writePendingValues();
                },
                read: (Ice.InputStream istr) =>
                {
                    var ret = new I_OpCMapResult();
                    ret.c2 = CMapHelper.read(istr);
                    ret.returnValue = CMapHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<E1> opE1Async(E1 E1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opE1Async(E1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<E1> _iceI_opE1Async(E1 iceP_E1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opE1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<E1>(progress, cancel);
            _iceI_opE1(iceP_E1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opE1_name = "opE1";

        private void _iceI_opE1(E1 iceP_E1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<E1>(completed);
            outAsync.invoke(
                _opE1_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_E1, 2);
                },
                read: (Ice.InputStream istr) =>
                {
                    E1 ret;
                    ret = (E1)istr.readEnum(2);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<S1> opS1Async(S1 S1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opS1Async(S1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<S1> _iceI_opS1Async(S1 iceP_S1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opS1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<S1>(progress, cancel);
            _iceI_opS1(iceP_S1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opS1_name = "opS1";

        private void _iceI_opS1(S1 iceP_S1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<S1>(completed);
            outAsync.invoke(
                _opS1_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    S1.ice_write(ostr, iceP_S1);
                },
                read: (Ice.InputStream istr) =>
                {
                    S1 ret;
                    ret = new S1(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<C1?> opC1Async(C1? C1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opC1Async(C1, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<C1?> _iceI_opC1Async(C1? iceP_C1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opC1_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<C1?>(progress, cancel);
            _iceI_opC1(iceP_C1, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opC1_name = "opC1";

        private void _iceI_opC1(C1? iceP_C1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<C1?>(completed);
            outAsync.invoke(
                _opC1_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_C1);
                    ostr.writePendingValues();
                },
                read: (Ice.InputStream istr) =>
                {
                    C1? ret = null;
                    istr.readValue((C1? v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<S1[]> opS1SeqAsync(S1[] S1Seq, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opS1SeqAsync(S1Seq, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<S1[]> _iceI_opS1SeqAsync(S1[] iceP_S1Seq, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opS1Seq_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<S1[]>(progress, cancel);
            _iceI_opS1Seq(iceP_S1Seq, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opS1Seq_name = "opS1Seq";

        private void _iceI_opS1Seq(S1[] iceP_S1Seq, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<S1[]>(completed);
            outAsync.invoke(
                _opS1Seq_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    S1SeqHelper.write(ostr, iceP_S1Seq);
                },
                read: (Ice.InputStream istr) =>
                {
                    S1[] ret;
                    ret = S1SeqHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, S1>> opS1MapAsync(global::System.Collections.Generic.Dictionary<string, S1> S1Map, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_opS1MapAsync(S1Map, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::System.Collections.Generic.Dictionary<string, S1>> _iceI_opS1MapAsync(global::System.Collections.Generic.Dictionary<string, S1> iceP_S1Map, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opS1Map_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::System.Collections.Generic.Dictionary<string, S1>>(progress, cancel);
            _iceI_opS1Map(iceP_S1Map, context, synchronous, completed);
            return completed.Task;
        }

        private const string _opS1Map_name = "opS1Map";

        private void _iceI_opS1Map(global::System.Collections.Generic.Dictionary<string, S1> iceP_S1Map, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::System.Collections.Generic.Dictionary<string, S1>>(completed);
            outAsync.invoke(
                _opS1Map_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    S1MapHelper.write(ostr, iceP_S1Map);
                },
                read: (Ice.InputStream istr) =>
                {
                    global::System.Collections.Generic.Dictionary<string, S1> ret;
                    ret = S1MapHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public static IPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new IPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static IPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new IPrxHelper(b) : null;

        public static IPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static IPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new IPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static IPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::I"
        };

        public static string ice_staticId() => "::Test::I";

        public static void write(Ice.OutputStream ostr, IPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static IPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new IPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new IPrxHelper(reference);

        private IPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private IPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }

    public sealed class IMapHelper
    {
        public static void write(Ice.OutputStream ostr,
                                 global::System.Collections.Generic.Dictionary<string, IPrx?> v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Count);
                foreach(global::System.Collections.Generic.KeyValuePair<string, IPrx?> e in v)
                {
                    ostr.writeString(e.Key);
                    IPrxHelper.write(ostr, e.Value);
                }
            }
        }

        public static global::System.Collections.Generic.Dictionary<string, IPrx?> read(Ice.InputStream istr)
        {
            int sz = istr.readSize();
            global::System.Collections.Generic.Dictionary<string, IPrx?> r = new global::System.Collections.Generic.Dictionary<string, IPrx?>();
            for(int i = 0; i < sz; ++i)
            {
                string k;
                k = istr.readString();
                IPrx? v;
                v = IPrxHelper.read(istr);
                r[k] = v;
            }
            return r;
        }
    }

    public sealed class ISeqHelper
    {
        public static void write(Ice.OutputStream ostr, IPrx?[] v)
        {
            if (v is null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    IPrxHelper.write(ostr, v[ix]);
                }
            }
        }

        public static IPrx?[] read(Ice.InputStream istr)
        {
            IPrx?[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new IPrx?[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = IPrxHelper.read(istr);
                }
            }
            return v;
        }
    }

    namespace Inner
    {
        namespace Inner2
        {
            public sealed class SMapHelper
            {
                public static void write(Ice.OutputStream ostr,
                                         global::System.Collections.Generic.Dictionary<string, S> v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Count);
                        foreach(global::System.Collections.Generic.KeyValuePair<string, S> e in v)
                        {
                            ostr.writeString(e.Key);
                            e.Value.ice_writeMembers(ostr);
                        }
                    }
                }

                public static global::System.Collections.Generic.Dictionary<string, S> read(Ice.InputStream istr)
                {
                    int sz = istr.readSize();
                    global::System.Collections.Generic.Dictionary<string, S> r = new global::System.Collections.Generic.Dictionary<string, S>();
                    for(int i = 0; i < sz; ++i)
                    {
                        string k;
                        k = istr.readString();
                        S v;
                        v = new S(istr);
                        r[k] = v;
                    }
                    return r;
                }
            }

            public sealed class SSeqHelper
            {
                public static void write(Ice.OutputStream ostr, S[] v)
                {
                    if (v is null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            v[ix].ice_writeMembers(ostr);
                        }
                    }
                }

                public static S[] read(Ice.InputStream istr)
                {
                    S[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(4);
                        v = new S[szx];
                        for(int ix = 0; ix < szx; ++ix)
                        {
                            v[ix] = new S(istr);
                        }
                    }
                    return v;
                }
            }

            public sealed class CMapHelper
            {
                public static void write(Ice.OutputStream ostr,
                                         global::System.Collections.Generic.Dictionary<string, C?> v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Count);
                        foreach(global::System.Collections.Generic.KeyValuePair<string, C?> e in v)
                        {
                            ostr.writeString(e.Key);
                            ostr.writeValue(e.Value);
                        }
                    }
                }

                public static global::System.Collections.Generic.Dictionary<string, C?> read(Ice.InputStream istr)
                {
                    int sz = istr.readSize();
                    global::System.Collections.Generic.Dictionary<string, C?> r = new global::System.Collections.Generic.Dictionary<string, C?>();
                    for(int i = 0; i < sz; ++i)
                    {
                        string k;
                        k = istr.readString();
                        istr.readValue((C? v) => { r[k] = v; });
                    }
                    return r;
                }
            }

            public sealed class CSeqHelper
            {
                public static void write(Ice.OutputStream ostr, C?[] v)
                {
                    if (v is null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            ostr.writeValue(v[ix]);
                        }
                    }
                }

                public static C?[] read(Ice.InputStream istr)
                {
                    C?[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(1);
                        v = new C?[szx];
                        for (int ix = 0; ix < szx; ++ix)
                        {
                            istr.readValue(Ice.Internal.Patcher.arrayReadValue<C>(v, ix));
                        }
                    }
                    return v;
                }
            }

            public sealed class IPrxHelper : Ice.ObjectPrxHelperBase, IPrx
            {
                public S opS(S s1, out S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public S[] opSSeq(S[] s1, out S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSMapAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public C? opC(C? c1, out C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public C?[] opCSeq(C?[] c1, out C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCSeqAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCMapAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSResult> _iceI_opSAsync(S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opS_name);
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpSResult>(progress, cancel);
                    _iceI_opS(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opS_name = "opS";

                private void _iceI_opS(S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSResult>(completed);
                    outAsync.invoke(
                        _opS_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous,
                        write: (Ice.OutputStream ostr) =>
                        {
                            iceP_s1.ice_writeMembers(ostr);
                        },
                        read: (Ice.InputStream istr) =>
                        {
                            var ret = new I_OpSResult();
                            ret.s2 = new S(istr);
                            ret.returnValue = new S(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSSeqAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSSeqResult> _iceI_opSSeqAsync(S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opSSeq_name);
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpSSeqResult>(progress, cancel);
                    _iceI_opSSeq(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opSSeq_name = "opSSeq";

                private void _iceI_opSSeq(S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSSeqResult>(completed);
                    outAsync.invoke(
                        _opSSeq_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous,
                        write: (Ice.OutputStream ostr) =>
                        {
                            SSeqHelper.write(ostr, iceP_s1);
                        },
                        read: (Ice.InputStream istr) =>
                        {
                            var ret = new I_OpSSeqResult();
                            ret.s2 = SSeqHelper.read(istr);
                            ret.returnValue = SSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSMapAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSMapResult> _iceI_opSMapAsync(global::System.Collections.Generic.Dictionary<string, S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opSMap_name);
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpSMapResult>(progress, cancel);
                    _iceI_opSMap(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opSMap_name = "opSMap";

                private void _iceI_opSMap(global::System.Collections.Generic.Dictionary<string, S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSMapResult>(completed);
                    outAsync.invoke(
                        _opSMap_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous,
                        write: (Ice.OutputStream ostr) =>
                        {
                            SMapHelper.write(ostr, iceP_s1);
                        },
                        read: (Ice.InputStream istr) =>
                        {
                            var ret = new I_OpSMapResult();
                            ret.s2 = SMapHelper.read(istr);
                            ret.returnValue = SMapHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCResult> _iceI_opCAsync(C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opC_name);
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpCResult>(progress, cancel);
                    _iceI_opC(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opC_name = "opC";

                private void _iceI_opC(C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCResult>(completed);
                    outAsync.invoke(
                        _opC_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous,
                        write: (Ice.OutputStream ostr) =>
                        {
                            ostr.writeValue(iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (Ice.InputStream istr) =>
                        {
                            var ret = new I_OpCResult();
                            istr.readValue((C? v) => { ret.c2 = v; });
                            istr.readValue((C? v) => {ret.returnValue = v; });
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCSeqAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCSeqResult> _iceI_opCSeqAsync(C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opCSeq_name);
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpCSeqResult>(progress, cancel);
                    _iceI_opCSeq(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opCSeq_name = "opCSeq";

                private void _iceI_opCSeq(C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCSeqResult>(completed);
                    outAsync.invoke(
                        _opCSeq_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous,
                        write: (Ice.OutputStream ostr) =>
                        {
                            CSeqHelper.write(ostr, iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (Ice.InputStream istr) =>
                        {
                            var ret = new I_OpCSeqResult();
                            ret.c2 = CSeqHelper.read(istr);
                            ret.returnValue = CSeqHelper.read(istr);
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCMapAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCMapResult> _iceI_opCMapAsync(global::System.Collections.Generic.Dictionary<string, C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opCMap_name);
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpCMapResult>(progress, cancel);
                    _iceI_opCMap(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opCMap_name = "opCMap";

                private void _iceI_opCMap(global::System.Collections.Generic.Dictionary<string, C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCMapResult>(completed);
                    outAsync.invoke(
                        _opCMap_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous,
                        write: (Ice.OutputStream ostr) =>
                        {
                            CMapHelper.write(ostr, iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (Ice.InputStream istr) =>
                        {
                            var ret = new I_OpCMapResult();
                            ret.c2 = CMapHelper.read(istr);
                            ret.returnValue = CMapHelper.read(istr);
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_shutdownAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                    _iceI_shutdown(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _shutdown_name = "shutdown";

                private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<object>(completed);
                    outAsync.invoke(
                        _shutdown_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous);
                }

                public static IPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                    new IPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

                public static IPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                    b is not null && b.ice_isA(ice_staticId(), ctx) ? new IPrxHelper(b) : null;

                public static IPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                    checkedCast(b?.ice_facet(f), ctx);

                [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

                public static IPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                    b is not null ? new IPrxHelper(b) : null;

                [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

                public static IPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                    uncheckedCast(b?.ice_facet(f));

                private static readonly string[] _ids =
                {
                    "::Ice::Object",
                    "::Test::Inner::Inner2::I"
                };

                public static string ice_staticId() => "::Test::Inner::Inner2::I";

                public static void write(Ice.OutputStream ostr, IPrx? v)
                {
                    ostr.writeProxy(v);
                }

                public static IPrx? read(Ice.InputStream istr) =>
                    istr.readProxy() is Ice.ObjectPrx proxy ? new IPrxHelper(proxy) : null;

                protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new IPrxHelper(reference);

                private IPrxHelper(Ice.ObjectPrx proxy)
                    : base(proxy)
                {
                }

                private IPrxHelper(Ice.Internal.Reference reference)
                    : base(reference)
                {
                }
            }

            public sealed class IMapHelper
            {
                public static void write(Ice.OutputStream ostr,
                                         global::System.Collections.Generic.Dictionary<string, IPrx?> v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Count);
                        foreach(global::System.Collections.Generic.KeyValuePair<string, IPrx?> e in v)
                        {
                            ostr.writeString(e.Key);
                            IPrxHelper.write(ostr, e.Value);
                        }
                    }
                }

                public static global::System.Collections.Generic.Dictionary<string, IPrx?> read(Ice.InputStream istr)
                {
                    int sz = istr.readSize();
                    global::System.Collections.Generic.Dictionary<string, IPrx?> r = new global::System.Collections.Generic.Dictionary<string, IPrx?>();
                    for(int i = 0; i < sz; ++i)
                    {
                        string k;
                        k = istr.readString();
                        IPrx? v;
                        v = IPrxHelper.read(istr);
                        r[k] = v;
                    }
                    return r;
                }
            }

            public sealed class ISeqHelper
            {
                public static void write(Ice.OutputStream ostr, IPrx?[] v)
                {
                    if (v is null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            IPrxHelper.write(ostr, v[ix]);
                        }
                    }
                }

                public static IPrx?[] read(Ice.InputStream istr)
                {
                    IPrx?[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(2);
                        v = new IPrx?[szx];
                        for(int ix = 0; ix < szx; ++ix)
                        {
                            v[ix] = IPrxHelper.read(istr);
                        }
                    }
                    return v;
                }
            }
        }

        public sealed class SSeqHelper
        {
            public static void write(Ice.OutputStream ostr, global::Test.Inner.Inner2.S[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        v[ix].ice_writeMembers(ostr);
                    }
                }
            }

            public static global::Test.Inner.Inner2.S[] read(Ice.InputStream istr)
            {
                global::Test.Inner.Inner2.S[] v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new global::Test.Inner.Inner2.S[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new global::Test.Inner.Inner2.S(istr);
                    }
                }
                return v;
            }
        }

        public sealed class SMapHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, global::Test.Inner.Inner2.S> e in v)
                    {
                        ostr.writeString(e.Key);
                        e.Value.ice_writeMembers(ostr);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> r = new global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    global::Test.Inner.Inner2.S v;
                    v = new global::Test.Inner.Inner2.S(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        public sealed class CMapHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, global::Test.Inner.Inner2.C?> e in v)
                    {
                        ostr.writeString(e.Key);
                        ostr.writeValue(e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> r = new global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    istr.readValue((global::Test.Inner.Inner2.C? v) => { r[k] = v; });
                }
                return r;
            }
        }

        public sealed class CSeqHelper
        {
            public static void write(Ice.OutputStream ostr, global::Test.Inner.Inner2.C?[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static global::Test.Inner.Inner2.C?[] read(Ice.InputStream istr)
            {
                global::Test.Inner.Inner2.C?[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::Test.Inner.Inner2.C?[szx];
                    for (int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(Ice.Internal.Patcher.arrayReadValue<global::Test.Inner.Inner2.C>(v, ix));
                    }
                }
                return v;
            }
        }

        public sealed class IPrxHelper : Ice.ObjectPrxHelperBase, IPrx
        {
            public global::Test.Inner.Inner2.S opS(global::Test.Inner.Inner2.S s1, out global::Test.Inner.Inner2.S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    s2 = result_.s2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Test.Inner.Inner2.S[] opSSeq(global::Test.Inner.Inner2.S[] s1, out global::Test.Inner.Inner2.S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    s2 = result_.s2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opSMapAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    s2 = result_.s2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Test.Inner.Inner2.C? opC(global::Test.Inner.Inner2.C? c1, out global::Test.Inner.Inner2.C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opCAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    c2 = result_.c2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Test.Inner.Inner2.C?[] opCSeq(global::Test.Inner.Inner2.C?[] c1, out global::Test.Inner.Inner2.C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opCSeqAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    c2 = result_.c2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    var result_ = _iceI_opCMapAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    c2 = result_.c2;
                    return result_.returnValue;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(global::Test.Inner.Inner2.S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSAsync(s1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpSResult> _iceI_opSAsync(global::Test.Inner.Inner2.S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opS_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpSResult>(progress, cancel);
                _iceI_opS(iceP_s1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opS_name = "opS";

            private void _iceI_opS(global::Test.Inner.Inner2.S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpSResult>(completed);
                outAsync.invoke(
                    _opS_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        iceP_s1.ice_writeMembers(ostr);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new I_OpSResult();
                        ret.s2 = new global::Test.Inner.Inner2.S(istr);
                        ret.returnValue = new global::Test.Inner.Inner2.S(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(global::Test.Inner.Inner2.S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSSeqAsync(s1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpSSeqResult> _iceI_opSSeqAsync(global::Test.Inner.Inner2.S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSSeq_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpSSeqResult>(progress, cancel);
                _iceI_opSSeq(iceP_s1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSSeq_name = "opSSeq";

            private void _iceI_opSSeq(global::Test.Inner.Inner2.S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpSSeqResult>(completed);
                outAsync.invoke(
                    _opSSeq_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        global::Test.Inner.Inner2.SSeqHelper.write(ostr, iceP_s1);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new I_OpSSeqResult();
                        ret.s2 = global::Test.Inner.Inner2.SSeqHelper.read(istr);
                        ret.returnValue = global::Test.Inner.Inner2.SSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opSMapAsync(s1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpSMapResult> _iceI_opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opSMap_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpSMapResult>(progress, cancel);
                _iceI_opSMap(iceP_s1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opSMap_name = "opSMap";

            private void _iceI_opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpSMapResult>(completed);
                outAsync.invoke(
                    _opSMap_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        global::Test.Inner.Inner2.SMapHelper.write(ostr, iceP_s1);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new I_OpSMapResult();
                        ret.s2 = global::Test.Inner.Inner2.SMapHelper.read(istr);
                        ret.returnValue = global::Test.Inner.Inner2.SMapHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(global::Test.Inner.Inner2.C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCAsync(c1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpCResult> _iceI_opCAsync(global::Test.Inner.Inner2.C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opC_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpCResult>(progress, cancel);
                _iceI_opC(iceP_c1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opC_name = "opC";

            private void _iceI_opC(global::Test.Inner.Inner2.C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpCResult>(completed);
                outAsync.invoke(
                    _opC_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_c1);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new I_OpCResult();
                        istr.readValue((global::Test.Inner.Inner2.C? v) => { ret.c2 = v; });
                        istr.readValue((global::Test.Inner.Inner2.C? v) => {ret.returnValue = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(global::Test.Inner.Inner2.C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCSeqAsync(c1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpCSeqResult> _iceI_opCSeqAsync(global::Test.Inner.Inner2.C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCSeq_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpCSeqResult>(progress, cancel);
                _iceI_opCSeq(iceP_c1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCSeq_name = "opCSeq";

            private void _iceI_opCSeq(global::Test.Inner.Inner2.C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpCSeqResult>(completed);
                outAsync.invoke(
                    _opCSeq_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        global::Test.Inner.Inner2.CSeqHelper.write(ostr, iceP_c1);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new I_OpCSeqResult();
                        ret.c2 = global::Test.Inner.Inner2.CSeqHelper.read(istr);
                        ret.returnValue = global::Test.Inner.Inner2.CSeqHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_opCMapAsync(c1, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<I_OpCMapResult> _iceI_opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_opCMap_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpCMapResult>(progress, cancel);
                _iceI_opCMap(iceP_c1, context, synchronous, completed);
                return completed.Task;
            }

            private const string _opCMap_name = "opCMap";

            private void _iceI_opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<I_OpCMapResult>(completed);
                outAsync.invoke(
                    _opCMap_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        global::Test.Inner.Inner2.CMapHelper.write(ostr, iceP_c1);
                        ostr.writePendingValues();
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        var ret = new I_OpCMapResult();
                        ret.c2 = global::Test.Inner.Inner2.CMapHelper.read(istr);
                        ret.returnValue = global::Test.Inner.Inner2.CMapHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_shutdownAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_shutdown(context, synchronous, completed);
                return completed.Task;
            }

            private const string _shutdown_name = "shutdown";

            private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _shutdown_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous);
            }

            public static IPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new IPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static IPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new IPrxHelper(b) : null;

            public static IPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static IPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new IPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static IPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::Inner::I"
            };

            public static string ice_staticId() => "::Test::Inner::I";

            public static void write(Ice.OutputStream ostr, IPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static IPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new IPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new IPrxHelper(reference);

            private IPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private IPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        public sealed class IMapHelper
        {
            public static void write(Ice.OutputStream ostr,
                                     global::System.Collections.Generic.Dictionary<string, IPrx?> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    foreach(global::System.Collections.Generic.KeyValuePair<string, IPrx?> e in v)
                    {
                        ostr.writeString(e.Key);
                        IPrxHelper.write(ostr, e.Value);
                    }
                }
            }

            public static global::System.Collections.Generic.Dictionary<string, IPrx?> read(Ice.InputStream istr)
            {
                int sz = istr.readSize();
                global::System.Collections.Generic.Dictionary<string, IPrx?> r = new global::System.Collections.Generic.Dictionary<string, IPrx?>();
                for(int i = 0; i < sz; ++i)
                {
                    string k;
                    k = istr.readString();
                    IPrx? v;
                    v = IPrxHelper.read(istr);
                    r[k] = v;
                }
                return r;
            }
        }

        public sealed class ISeqHelper
        {
            public static void write(Ice.OutputStream ostr, IPrx?[] v)
            {
                if (v is null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        IPrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static IPrx?[] read(Ice.InputStream istr)
            {
                IPrx?[] v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new IPrx?[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = IPrxHelper.read(istr);
                    }
                }
                return v;
            }
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            public sealed class IPrxHelper : Ice.ObjectPrxHelperBase, IPrx
            {
                public global::Test.S opS(global::Test.S s1, out global::Test.S s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::Test.S[] opSSeq(global::Test.S[] s1, out global::Test.S[] s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSSeqAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::System.Collections.Generic.Dictionary<string, global::Test.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.S> s2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opSMapAsync(s1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        s2 = result_.s2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::Test.C? opC(global::Test.C? c1, out global::Test.C? c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::Test.C?[] opCSeq(global::Test.C?[] c1, out global::Test.C?[] c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCSeqAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::System.Collections.Generic.Dictionary<string, global::Test.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.C?> c2, global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        var result_ = _iceI_opCMapAsync(c1, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        c2 = result_.c2;
                        return result_.returnValue;
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
                {
                    try
                    {
                        _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                    }
                    catch (global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException!;
                    }
                }

                public global::System.Threading.Tasks.Task<I_OpSResult> opSAsync(global::Test.S s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSResult> _iceI_opSAsync(global::Test.S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opS_name);
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpSResult>(progress, cancel);
                    _iceI_opS(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opS_name = "opS";

                private void _iceI_opS(global::Test.S iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSResult>(completed);
                    outAsync.invoke(
                        _opS_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous,
                        write: (Ice.OutputStream ostr) =>
                        {
                            iceP_s1.ice_writeMembers(ostr);
                        },
                        read: (Ice.InputStream istr) =>
                        {
                            var ret = new I_OpSResult();
                            ret.s2 = new global::Test.S(istr);
                            ret.returnValue = new global::Test.S(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpSSeqResult> opSSeqAsync(global::Test.S[] s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSSeqAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSSeqResult> _iceI_opSSeqAsync(global::Test.S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opSSeq_name);
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpSSeqResult>(progress, cancel);
                    _iceI_opSSeq(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opSSeq_name = "opSSeq";

                private void _iceI_opSSeq(global::Test.S[] iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSSeqResult>(completed);
                    outAsync.invoke(
                        _opSSeq_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous,
                        write: (Ice.OutputStream ostr) =>
                        {
                            global::Test.SSeqHelper.write(ostr, iceP_s1);
                        },
                        read: (Ice.InputStream istr) =>
                        {
                            var ret = new I_OpSSeqResult();
                            ret.s2 = global::Test.SSeqHelper.read(istr);
                            ret.returnValue = global::Test.SSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpSMapResult> opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.S> s1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opSMapAsync(s1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpSMapResult> _iceI_opSMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opSMap_name);
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpSMapResult>(progress, cancel);
                    _iceI_opSMap(iceP_s1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opSMap_name = "opSMap";

                private void _iceI_opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.S> iceP_s1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpSMapResult>(completed);
                    outAsync.invoke(
                        _opSMap_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous,
                        write: (Ice.OutputStream ostr) =>
                        {
                            global::Test.SMapHelper.write(ostr, iceP_s1);
                        },
                        read: (Ice.InputStream istr) =>
                        {
                            var ret = new I_OpSMapResult();
                            ret.s2 = global::Test.SMapHelper.read(istr);
                            ret.returnValue = global::Test.SMapHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCResult> opCAsync(global::Test.C? c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCResult> _iceI_opCAsync(global::Test.C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opC_name);
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpCResult>(progress, cancel);
                    _iceI_opC(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opC_name = "opC";

                private void _iceI_opC(global::Test.C? iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCResult>(completed);
                    outAsync.invoke(
                        _opC_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous,
                        write: (Ice.OutputStream ostr) =>
                        {
                            ostr.writeValue(iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (Ice.InputStream istr) =>
                        {
                            var ret = new I_OpCResult();
                            istr.readValue((global::Test.C? v) => { ret.c2 = v; });
                            istr.readValue((global::Test.C? v) => {ret.returnValue = v; });
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCSeqResult> opCSeqAsync(global::Test.C?[] c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCSeqAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCSeqResult> _iceI_opCSeqAsync(global::Test.C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opCSeq_name);
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpCSeqResult>(progress, cancel);
                    _iceI_opCSeq(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opCSeq_name = "opCSeq";

                private void _iceI_opCSeq(global::Test.C?[] iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCSeqResult>(completed);
                    outAsync.invoke(
                        _opCSeq_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous,
                        write: (Ice.OutputStream ostr) =>
                        {
                            global::Test.CSeqHelper.write(ostr, iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (Ice.InputStream istr) =>
                        {
                            var ret = new I_OpCSeqResult();
                            ret.c2 = global::Test.CSeqHelper.read(istr);
                            ret.returnValue = global::Test.CSeqHelper.read(istr);
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<I_OpCMapResult> opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.C?> c1, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_opCMapAsync(c1, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<I_OpCMapResult> _iceI_opCMapAsync(global::System.Collections.Generic.Dictionary<string, global::Test.C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_opCMap_name);
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<I_OpCMapResult>(progress, cancel);
                    _iceI_opCMap(iceP_c1, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _opCMap_name = "opCMap";

                private void _iceI_opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.C?> iceP_c1, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<I_OpCMapResult>(completed);
                    outAsync.invoke(
                        _opCMap_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous,
                        write: (Ice.OutputStream ostr) =>
                        {
                            global::Test.CMapHelper.write(ostr, iceP_c1);
                            ostr.writePendingValues();
                        },
                        read: (Ice.InputStream istr) =>
                        {
                            var ret = new I_OpCMapResult();
                            ret.c2 = global::Test.CMapHelper.read(istr);
                            ret.returnValue = global::Test.CMapHelper.read(istr);
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
                {
                    return _iceI_shutdownAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
                    _iceI_shutdown(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _shutdown_name = "shutdown";

                private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<object>(completed);
                    outAsync.invoke(
                        _shutdown_name,
                        Ice.OperationMode.Normal,
                        null,
                        context,
                        synchronous);
                }

                public static IPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                    new IPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

                public static IPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                    b is not null && b.ice_isA(ice_staticId(), ctx) ? new IPrxHelper(b) : null;

                public static IPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                    checkedCast(b?.ice_facet(f), ctx);

                [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

                public static IPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                    b is not null ? new IPrxHelper(b) : null;

                [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

                public static IPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                    uncheckedCast(b?.ice_facet(f));

                private static readonly string[] _ids =
                {
                    "::Ice::Object",
                    "::Inner::Test::Inner2::I"
                };

                public static string ice_staticId() => "::Inner::Test::Inner2::I";

                public static void write(Ice.OutputStream ostr, IPrx? v)
                {
                    ostr.writeProxy(v);
                }

                public static IPrx? read(Ice.InputStream istr) =>
                    istr.readProxy() is Ice.ObjectPrx proxy ? new IPrxHelper(proxy) : null;

                protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new IPrxHelper(reference);

                private IPrxHelper(Ice.ObjectPrx proxy)
                    : base(proxy)
                {
                }

                private IPrxHelper(Ice.Internal.Reference reference)
                    : base(reference)
                {
                }
            }
        }
    }
}

namespace Test
{
    public abstract class IDisp_ : Ice.ObjectImpl, I
    {
        public abstract S opS(S s1, out S s2, Ice.Current current);

        public abstract S[] opSSeq(S[] s1, out S[] s2, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, Ice.Current current);

        public abstract C? opC(C? c1, out C? c2, Ice.Current current);

        public abstract C?[] opCSeq(C?[] s1, out C?[] s2, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, Ice.Current current);

        public abstract E1 opE1(E1 E1, Ice.Current current);

        public abstract S1 opS1(S1 S1, Ice.Current current);

        public abstract C1? opC1(C1? C1, Ice.Current current);

        public abstract S1[] opS1Seq(S1[] S1Seq, Ice.Current current);

        public abstract global::System.Collections.Generic.Dictionary<string, S1> opS1Map(global::System.Collections.Generic.Dictionary<string, S1> S1Map, Ice.Current current);

        public abstract void shutdown(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::I";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "opS" => I.iceD_opSAsync(this, request),
                "opSSeq" => I.iceD_opSSeqAsync(this, request),
                "opSMap" => I.iceD_opSMapAsync(this, request),
                "opC" => I.iceD_opCAsync(this, request),
                "opCSeq" => I.iceD_opCSeqAsync(this, request),
                "opCMap" => I.iceD_opCMapAsync(this, request),
                "opE1" => I.iceD_opE1Async(this, request),
                "opS1" => I.iceD_opS1Async(this, request),
                "opC1" => I.iceD_opC1Async(this, request),
                "opS1Seq" => I.iceD_opS1SeqAsync(this, request),
                "opS1Map" => I.iceD_opS1MapAsync(this, request),
                "shutdown" => I.iceD_shutdownAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }

    namespace Inner
    {
        namespace Inner2
        {
            public abstract class IDisp_ : Ice.ObjectImpl, I
            {
                public abstract S opS(S s1, out S s2, Ice.Current current);

                public abstract S[] opSSeq(S[] s1, out S[] s2, Ice.Current current);

                public abstract global::System.Collections.Generic.Dictionary<string, S> opSMap(global::System.Collections.Generic.Dictionary<string, S> s1, out global::System.Collections.Generic.Dictionary<string, S> s2, Ice.Current current);

                public abstract C? opC(C? c1, out C? c2, Ice.Current current);

                public abstract C?[] opCSeq(C?[] c1, out C?[] c2, Ice.Current current);

                public abstract global::System.Collections.Generic.Dictionary<string, C?> opCMap(global::System.Collections.Generic.Dictionary<string, C?> c1, out global::System.Collections.Generic.Dictionary<string, C?> c2, Ice.Current current);

                public abstract void shutdown(Ice.Current current);

                public override string ice_id(Ice.Current current) => ice_staticId();

                public static new string ice_staticId() => "::Test::Inner::Inner2::I";

                public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                    request.current.operation switch
                    {
                        "opS" => I.iceD_opSAsync(this, request),
                        "opSSeq" => I.iceD_opSSeqAsync(this, request),
                        "opSMap" => I.iceD_opSMapAsync(this, request),
                        "opC" => I.iceD_opCAsync(this, request),
                        "opCSeq" => I.iceD_opCSeqAsync(this, request),
                        "opCMap" => I.iceD_opCMapAsync(this, request),
                        "shutdown" => I.iceD_shutdownAsync(this, request),
                        "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                        "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                        "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                        "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                        _ => throw new Ice.OperationNotExistException()
                    };
            }
        }

        public abstract class IDisp_ : Ice.ObjectImpl, I
        {
            public abstract global::Test.Inner.Inner2.S opS(global::Test.Inner.Inner2.S s1, out global::Test.Inner.Inner2.S s2, Ice.Current current);

            public abstract global::Test.Inner.Inner2.S[] opSSeq(global::Test.Inner.Inner2.S[] s1, out global::Test.Inner.Inner2.S[] s2, Ice.Current current);

            public abstract global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> s2, Ice.Current current);

            public abstract global::Test.Inner.Inner2.C? opC(global::Test.Inner.Inner2.C? c1, out global::Test.Inner.Inner2.C? c2, Ice.Current current);

            public abstract global::Test.Inner.Inner2.C?[] opCSeq(global::Test.Inner.Inner2.C?[] c1, out global::Test.Inner.Inner2.C?[] c2, Ice.Current current);

            public abstract global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> c2, Ice.Current current);

            public abstract void shutdown(Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::Inner::I";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "opS" => I.iceD_opSAsync(this, request),
                    "opSSeq" => I.iceD_opSSeqAsync(this, request),
                    "opSMap" => I.iceD_opSMapAsync(this, request),
                    "opC" => I.iceD_opCAsync(this, request),
                    "opCSeq" => I.iceD_opCSeqAsync(this, request),
                    "opCMap" => I.iceD_opCMapAsync(this, request),
                    "shutdown" => I.iceD_shutdownAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            public abstract class IDisp_ : Ice.ObjectImpl, I
            {
                public abstract global::Test.S opS(global::Test.S s1, out global::Test.S s2, Ice.Current current);

                public abstract global::Test.S[] opSSeq(global::Test.S[] s1, out global::Test.S[] s2, Ice.Current current);

                public abstract global::System.Collections.Generic.Dictionary<string, global::Test.S> opSMap(global::System.Collections.Generic.Dictionary<string, global::Test.S> s1, out global::System.Collections.Generic.Dictionary<string, global::Test.S> s2, Ice.Current current);

                public abstract global::Test.C? opC(global::Test.C? c1, out global::Test.C? c2, Ice.Current current);

                public abstract global::Test.C?[] opCSeq(global::Test.C?[] c1, out global::Test.C?[] c2, Ice.Current current);

                public abstract global::System.Collections.Generic.Dictionary<string, global::Test.C?> opCMap(global::System.Collections.Generic.Dictionary<string, global::Test.C?> c1, out global::System.Collections.Generic.Dictionary<string, global::Test.C?> c2, Ice.Current current);

                public abstract void shutdown(Ice.Current current);

                public override string ice_id(Ice.Current current) => ice_staticId();

                public static new string ice_staticId() => "::Inner::Test::Inner2::I";

                public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                    request.current.operation switch
                    {
                        "opS" => I.iceD_opSAsync(this, request),
                        "opSSeq" => I.iceD_opSSeqAsync(this, request),
                        "opSMap" => I.iceD_opSMapAsync(this, request),
                        "opC" => I.iceD_opCAsync(this, request),
                        "opCSeq" => I.iceD_opCSeqAsync(this, request),
                        "opCMap" => I.iceD_opCMapAsync(this, request),
                        "shutdown" => I.iceD_shutdownAsync(this, request),
                        "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                        "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                        "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                        "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                        _ => throw new Ice.OperationNotExistException()
                    };
            }
        }
    }
}

namespace Test
{
    public partial interface I
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSAsync(
            I obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            S iceP_s1;
            iceP_s1 = new S(istr);
            istr.endEncapsulation();
            S iceP_s2;
            var ret = obj.opS(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            iceP_s2.ice_writeMembers(ostr);
            ret.ice_writeMembers(ostr);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSSeqAsync(
            I obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            S[] iceP_s1;
            iceP_s1 = SSeqHelper.read(istr);
            istr.endEncapsulation();
            S[] iceP_s2;
            var ret = obj.opSSeq(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            SSeqHelper.write(ostr, iceP_s2);
            SSeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSMapAsync(
            I obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, S> iceP_s1;
            iceP_s1 = SMapHelper.read(istr);
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<string, S> iceP_s2;
            var ret = obj.opSMap(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            SMapHelper.write(ostr, iceP_s2);
            SMapHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCAsync(
            I obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            C? iceP_c1 = null;
            istr.readValue((C? v) => { iceP_c1 = v; });
            istr.readPendingValues();
            istr.endEncapsulation();
            C? iceP_c2;
            var ret = obj.opC(iceP_c1, out iceP_c2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeValue(iceP_c2);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCSeqAsync(
            I obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            C?[] iceP_s1;
            iceP_s1 = CSeqHelper.read(istr);
            istr.readPendingValues();
            istr.endEncapsulation();
            C?[] iceP_s2;
            var ret = obj.opCSeq(iceP_s1, out iceP_s2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            CSeqHelper.write(ostr, iceP_s2);
            CSeqHelper.write(ostr, ret);
            ostr.writePendingValues();
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCMapAsync(
            I obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, C?> iceP_c1;
            iceP_c1 = CMapHelper.read(istr);
            istr.readPendingValues();
            istr.endEncapsulation();
            global::System.Collections.Generic.Dictionary<string, C?> iceP_c2;
            var ret = obj.opCMap(iceP_c1, out iceP_c2, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            CMapHelper.write(ostr, iceP_c2);
            CMapHelper.write(ostr, ret);
            ostr.writePendingValues();
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opE1Async(
            I obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            E1 iceP_E1;
            iceP_E1 = (E1)istr.readEnum(2);
            istr.endEncapsulation();
            var ret = obj.opE1(iceP_E1, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeEnum((int)ret, 2);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opS1Async(
            I obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            S1 iceP_S1;
            iceP_S1 = new S1(istr);
            istr.endEncapsulation();
            var ret = obj.opS1(iceP_S1, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            S1.ice_write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opC1Async(
            I obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            C1? iceP_C1 = null;
            istr.readValue((C1? v) => { iceP_C1 = v; });
            istr.readPendingValues();
            istr.endEncapsulation();
            var ret = obj.opC1(iceP_C1, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            ostr.writeValue(ret);
            ostr.writePendingValues();
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opS1SeqAsync(
            I obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            S1[] iceP_S1Seq;
            iceP_S1Seq = S1SeqHelper.read(istr);
            istr.endEncapsulation();
            var ret = obj.opS1Seq(iceP_S1Seq, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            S1SeqHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opS1MapAsync(
            I obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            var istr = request.inputStream;
            istr.startEncapsulation();
            global::System.Collections.Generic.Dictionary<string, S1> iceP_S1Map;
            iceP_S1Map = S1MapHelper.read(istr);
            istr.endEncapsulation();
            var ret = obj.opS1Map(iceP_S1Map, request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            S1MapHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
            I obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.shutdown(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }
    }

    namespace Inner
    {
        namespace Inner2
        {
            public partial interface I
            {
                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    S iceP_s1;
                    iceP_s1 = new S(istr);
                    istr.endEncapsulation();
                    S iceP_s2;
                    var ret = obj.opS(iceP_s1, out iceP_s2, request.current);
                    var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, null);
                    iceP_s2.ice_writeMembers(ostr);
                    ret.ice_writeMembers(ostr);
                    ostr.endEncapsulation();
                    return new(new Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSSeqAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    S[] iceP_s1;
                    iceP_s1 = SSeqHelper.read(istr);
                    istr.endEncapsulation();
                    S[] iceP_s2;
                    var ret = obj.opSSeq(iceP_s1, out iceP_s2, request.current);
                    var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, null);
                    SSeqHelper.write(ostr, iceP_s2);
                    SSeqHelper.write(ostr, ret);
                    ostr.endEncapsulation();
                    return new(new Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSMapAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, S> iceP_s1;
                    iceP_s1 = SMapHelper.read(istr);
                    istr.endEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, S> iceP_s2;
                    var ret = obj.opSMap(iceP_s1, out iceP_s2, request.current);
                    var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, null);
                    SMapHelper.write(ostr, iceP_s2);
                    SMapHelper.write(ostr, ret);
                    ostr.endEncapsulation();
                    return new(new Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    C? iceP_c1 = null;
                    istr.readValue((C? v) => { iceP_c1 = v; });
                    istr.readPendingValues();
                    istr.endEncapsulation();
                    C? iceP_c2;
                    var ret = obj.opC(iceP_c1, out iceP_c2, request.current);
                    var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, null);
                    ostr.writeValue(iceP_c2);
                    ostr.writeValue(ret);
                    ostr.writePendingValues();
                    ostr.endEncapsulation();
                    return new(new Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCSeqAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    C?[] iceP_c1;
                    iceP_c1 = CSeqHelper.read(istr);
                    istr.readPendingValues();
                    istr.endEncapsulation();
                    C?[] iceP_c2;
                    var ret = obj.opCSeq(iceP_c1, out iceP_c2, request.current);
                    var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, null);
                    CSeqHelper.write(ostr, iceP_c2);
                    CSeqHelper.write(ostr, ret);
                    ostr.writePendingValues();
                    ostr.endEncapsulation();
                    return new(new Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCMapAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, C?> iceP_c1;
                    iceP_c1 = CMapHelper.read(istr);
                    istr.readPendingValues();
                    istr.endEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, C?> iceP_c2;
                    var ret = obj.opCMap(iceP_c1, out iceP_c2, request.current);
                    var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, null);
                    CMapHelper.write(ostr, iceP_c2);
                    CMapHelper.write(ostr, ret);
                    ostr.writePendingValues();
                    ostr.endEncapsulation();
                    return new(new Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    request.inputStream.skipEmptyEncapsulation();
                    obj.shutdown(request.current);
                    return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
                }
            }
        }

        public partial interface I
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSAsync(
                I obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::Test.Inner.Inner2.S iceP_s1;
                iceP_s1 = new global::Test.Inner.Inner2.S(istr);
                istr.endEncapsulation();
                global::Test.Inner.Inner2.S iceP_s2;
                var ret = obj.opS(iceP_s1, out iceP_s2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                iceP_s2.ice_writeMembers(ostr);
                ret.ice_writeMembers(ostr);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSSeqAsync(
                I obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::Test.Inner.Inner2.S[] iceP_s1;
                iceP_s1 = global::Test.Inner.Inner2.SSeqHelper.read(istr);
                istr.endEncapsulation();
                global::Test.Inner.Inner2.S[] iceP_s2;
                var ret = obj.opSSeq(iceP_s1, out iceP_s2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                global::Test.Inner.Inner2.SSeqHelper.write(ostr, iceP_s2);
                global::Test.Inner.Inner2.SSeqHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSMapAsync(
                I obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> iceP_s1;
                iceP_s1 = global::Test.Inner.Inner2.SMapHelper.read(istr);
                istr.endEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.S> iceP_s2;
                var ret = obj.opSMap(iceP_s1, out iceP_s2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                global::Test.Inner.Inner2.SMapHelper.write(ostr, iceP_s2);
                global::Test.Inner.Inner2.SMapHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCAsync(
                I obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::Test.Inner.Inner2.C? iceP_c1 = null;
                istr.readValue((global::Test.Inner.Inner2.C? v) => { iceP_c1 = v; });
                istr.readPendingValues();
                istr.endEncapsulation();
                global::Test.Inner.Inner2.C? iceP_c2;
                var ret = obj.opC(iceP_c1, out iceP_c2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ostr.writeValue(iceP_c2);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCSeqAsync(
                I obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::Test.Inner.Inner2.C?[] iceP_c1;
                iceP_c1 = global::Test.Inner.Inner2.CSeqHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                global::Test.Inner.Inner2.C?[] iceP_c2;
                var ret = obj.opCSeq(iceP_c1, out iceP_c2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                global::Test.Inner.Inner2.CSeqHelper.write(ostr, iceP_c2);
                global::Test.Inner.Inner2.CSeqHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCMapAsync(
                I obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> iceP_c1;
                iceP_c1 = global::Test.Inner.Inner2.CMapHelper.read(istr);
                istr.readPendingValues();
                istr.endEncapsulation();
                global::System.Collections.Generic.Dictionary<string, global::Test.Inner.Inner2.C?> iceP_c2;
                var ret = obj.opCMap(iceP_c1, out iceP_c2, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                global::Test.Inner.Inner2.CMapHelper.write(ostr, iceP_c2);
                global::Test.Inner.Inner2.CMapHelper.write(ostr, ret);
                ostr.writePendingValues();
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }

            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
                I obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                request.inputStream.skipEmptyEncapsulation();
                obj.shutdown(request.current);
                return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
            }
        }
    }
}

namespace Inner
{
    namespace Test
    {
        namespace Inner2
        {
            public partial interface I
            {
                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::Test.S iceP_s1;
                    iceP_s1 = new global::Test.S(istr);
                    istr.endEncapsulation();
                    global::Test.S iceP_s2;
                    var ret = obj.opS(iceP_s1, out iceP_s2, request.current);
                    var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, null);
                    iceP_s2.ice_writeMembers(ostr);
                    ret.ice_writeMembers(ostr);
                    ostr.endEncapsulation();
                    return new(new Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSSeqAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::Test.S[] iceP_s1;
                    iceP_s1 = global::Test.SSeqHelper.read(istr);
                    istr.endEncapsulation();
                    global::Test.S[] iceP_s2;
                    var ret = obj.opSSeq(iceP_s1, out iceP_s2, request.current);
                    var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, null);
                    global::Test.SSeqHelper.write(ostr, iceP_s2);
                    global::Test.SSeqHelper.write(ostr, ret);
                    ostr.endEncapsulation();
                    return new(new Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opSMapAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, global::Test.S> iceP_s1;
                    iceP_s1 = global::Test.SMapHelper.read(istr);
                    istr.endEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, global::Test.S> iceP_s2;
                    var ret = obj.opSMap(iceP_s1, out iceP_s2, request.current);
                    var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, null);
                    global::Test.SMapHelper.write(ostr, iceP_s2);
                    global::Test.SMapHelper.write(ostr, ret);
                    ostr.endEncapsulation();
                    return new(new Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::Test.C? iceP_c1 = null;
                    istr.readValue((global::Test.C? v) => { iceP_c1 = v; });
                    istr.readPendingValues();
                    istr.endEncapsulation();
                    global::Test.C? iceP_c2;
                    var ret = obj.opC(iceP_c1, out iceP_c2, request.current);
                    var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, null);
                    ostr.writeValue(iceP_c2);
                    ostr.writeValue(ret);
                    ostr.writePendingValues();
                    ostr.endEncapsulation();
                    return new(new Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCSeqAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::Test.C?[] iceP_c1;
                    iceP_c1 = global::Test.CSeqHelper.read(istr);
                    istr.readPendingValues();
                    istr.endEncapsulation();
                    global::Test.C?[] iceP_c2;
                    var ret = obj.opCSeq(iceP_c1, out iceP_c2, request.current);
                    var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, null);
                    global::Test.CSeqHelper.write(ostr, iceP_c2);
                    global::Test.CSeqHelper.write(ostr, ret);
                    ostr.writePendingValues();
                    ostr.endEncapsulation();
                    return new(new Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_opCMapAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    var istr = request.inputStream;
                    istr.startEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, global::Test.C?> iceP_c1;
                    iceP_c1 = global::Test.CMapHelper.read(istr);
                    istr.readPendingValues();
                    istr.endEncapsulation();
                    global::System.Collections.Generic.Dictionary<string, global::Test.C?> iceP_c2;
                    var ret = obj.opCMap(iceP_c1, out iceP_c2, request.current);
                    var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                    ostr.startEncapsulation(request.current.encoding, null);
                    global::Test.CMapHelper.write(ostr, iceP_c2);
                    global::Test.CMapHelper.write(ostr, ret);
                    ostr.writePendingValues();
                    ostr.endEncapsulation();
                    return new(new Ice.OutgoingResponse(ostr));
                }

                protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
                    I obj,
                    Ice.IncomingRequest request)
                {
                    Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                    request.inputStream.skipEmptyEncapsulation();
                    obj.shutdown(request.current);
                    return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
                }
            }
        }
    }
}
