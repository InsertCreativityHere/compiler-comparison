// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#nullable enable

[assembly:Ice.Slice("Test.ice")]

#pragma warning disable CS1591 // Missing XML Comment
#pragma warning disable CS1573 // Parameter has no matching param tag in the XML comment
#pragma warning disable CS0612 // Type or member is obsolete
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0619 // Type or member is obsolete

namespace Test
{
    namespace MA
    {
        [Ice.SliceTypeId("::Test::MA::IA")]
        public partial interface IA : Ice.Object
        {
            IAPrx? iaop(IAPrx? p, Ice.Current current);
        }
    }

    namespace MB
    {
        [Ice.SliceTypeId("::Test::MB::IB1")]
        public partial interface IB1 : global::Test.MA.IA
        {
            IB1Prx? ib1op(IB1Prx? p, Ice.Current current);
        }

        [Ice.SliceTypeId("::Test::MB::IB2")]
        public partial interface IB2 : global::Test.MA.IA
        {
            IB2Prx? ib2op(IB2Prx? p, Ice.Current current);
        }
    }

    namespace MA
    {
        [Ice.SliceTypeId("::Test::MA::IC")]
        public partial interface IC : global::Test.MB.IB1, global::Test.MB.IB2
        {
            ICPrx? icop(ICPrx? p, Ice.Current current);
        }
    }

    [Ice.SliceTypeId("::Test::Initial")]
    public partial interface Initial : Ice.Object
    {
        void shutdown(Ice.Current current);

        global::Test.MA.IAPrx? iaop(Ice.Current current);

        global::Test.MB.IB1Prx? ib1op(Ice.Current current);

        global::Test.MB.IB2Prx? ib2op(Ice.Current current);

        global::Test.MA.ICPrx? icop(Ice.Current current);
    }

    namespace MC
    {
        [Ice.SliceTypeId("::Test::MC::A")]
        public partial class A : Ice.Value
        {
            public int aA;

            partial void ice_initialize();

            public A(int aA)
            {
                this.aA = aA;
                ice_initialize();
            }

            public A()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MC::A";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(aA);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                aA = istr_.readInt();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::MC::B")]
        public partial class B : A
        {
            public int bB;

            partial void ice_initialize();

            public B(int aA, int bB) : base(aA)
            {
                this.bB = bB;
                ice_initialize();
            }

            public B()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MC::B";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(bB);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                bB = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::MC::C")]
        public partial class C : B
        {
            public int cC;

            partial void ice_initialize();

            public C(int aA, int bB, int cC) : base(aA, bB)
            {
                this.cC = cC;
                ice_initialize();
            }

            public C()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MC::C";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(cC);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                cC = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::MC::D")]
        public partial class D : C
        {
            public int dD;

            partial void ice_initialize();

            public D(int aA, int bB, int cC, int dD) : base(aA, bB, cC)
            {
                this.dD = dD;
                ice_initialize();
            }

            public D()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MC::D";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(dD);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                dD = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }
    }

    namespace MD
    {
        [Ice.SliceTypeId("::Test::MD::A")]
        public partial class A : Ice.Value
        {
            public int aA;

            partial void ice_initialize();

            public A(int aA)
            {
                this.aA = aA;
                ice_initialize();
            }

            public A()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MD::A";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(aA);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                aA = istr_.readInt();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::MD::B")]
        public partial class B : A
        {
            public int bB;

            partial void ice_initialize();

            public B(int aA, int bB) : base(aA)
            {
                this.bB = bB;
                ice_initialize();
            }

            public B()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MD::B";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(bB);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                bB = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::MD::C")]
        public partial class C : B
        {
            public int cC;

            partial void ice_initialize();

            public C(int aA, int bB, int cC) : base(aA, bB)
            {
                this.cC = cC;
                ice_initialize();
            }

            public C()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MD::C";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(cC);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                cC = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::MD::D")]
        public partial class D : C
        {
            public int dD;

            partial void ice_initialize();

            public D(int aA, int bB, int cC, int dD) : base(aA, bB, cC)
            {
                this.dD = dD;
                ice_initialize();
            }

            public D()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MD::D";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(dD);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                dD = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }
    }

    namespace ME
    {
        [Ice.SliceTypeId("::Test::ME::A")]
        public partial class A : Ice.Value
        {
            public int aA;

            partial void ice_initialize();

            public A(int aA)
            {
                this.aA = aA;
                ice_initialize();
            }

            public A()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::ME::A";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(aA);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                aA = istr_.readInt();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::ME::B")]
        public partial class B : A
        {
            public int bB;

            partial void ice_initialize();

            public B(int aA, int bB) : base(aA)
            {
                this.bB = bB;
                ice_initialize();
            }

            public B()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::ME::B";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(bB);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                bB = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::ME::C")]
        public partial class C : B
        {
            public int cC;

            partial void ice_initialize();

            public C(int aA, int bB, int cC) : base(aA, bB)
            {
                this.cC = cC;
                ice_initialize();
            }

            public C()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::ME::C";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(cC);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                cC = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::ME::D")]
        public partial class D : C
        {
            public int dD;

            partial void ice_initialize();

            public D(int aA, int bB, int cC, int dD) : base(aA, bB, cC)
            {
                this.dD = dD;
                ice_initialize();
            }

            public D()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::ME::D";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(dD);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                dD = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }
    }

    namespace MF
    {
        [Ice.SliceTypeId("::Test::MF::A")]
        public partial class A : Ice.Value
        {
            public int aA;

            partial void ice_initialize();

            public A(int aA)
            {
                this.aA = aA;
                ice_initialize();
            }

            public A()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MF::A";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(aA);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                aA = istr_.readInt();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::MF::B")]
        public partial class B : A
        {
            public int bB;

            partial void ice_initialize();

            public B(int aA, int bB) : base(aA)
            {
                this.bB = bB;
                ice_initialize();
            }

            public B()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MF::B";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(bB);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                bB = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::MF::C")]
        public partial class C : B
        {
            public int cC;

            partial void ice_initialize();

            public C(int aA, int bB, int cC) : base(aA, bB)
            {
                this.cC = cC;
                ice_initialize();
            }

            public C()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MF::C";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(cC);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                cC = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::MF::D")]
        public partial class D : C
        {
            public int dD;

            partial void ice_initialize();

            public D(int aA, int bB, int cC, int dD) : base(aA, bB, cC)
            {
                this.dD = dD;
                ice_initialize();
            }

            public D()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MF::D";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(dD);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                dD = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }
    }

    namespace MG
    {
        [Ice.SliceTypeId("::Test::MG::A")]
        public partial class A : Ice.Value
        {
            public int aA;

            partial void ice_initialize();

            public A(int aA)
            {
                this.aA = aA;
                ice_initialize();
            }

            public A()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MG::A";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(aA);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                aA = istr_.readInt();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::MG::B")]
        public partial class B : A
        {
            public int bB;

            partial void ice_initialize();

            public B(int aA, int bB) : base(aA)
            {
                this.bB = bB;
                ice_initialize();
            }

            public B()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MG::B";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(bB);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                bB = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::MG::C")]
        public partial class C : B
        {
            public int cC;

            partial void ice_initialize();

            public C(int aA, int bB, int cC) : base(aA, bB)
            {
                this.cC = cC;
                ice_initialize();
            }

            public C()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MG::C";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(cC);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                cC = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::MG::D")]
        public partial class D : C
        {
            public int dD;

            partial void ice_initialize();

            public D(int aA, int bB, int cC, int dD) : base(aA, bB, cC)
            {
                this.dD = dD;
                ice_initialize();
            }

            public D()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MG::D";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(dD);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                dD = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }
    }

    namespace MH
    {
        [Ice.SliceTypeId("::Test::MH::A")]
        public partial class A : Ice.Value
        {
            public int aA;

            partial void ice_initialize();

            public A(int aA)
            {
                this.aA = aA;
                ice_initialize();
            }

            public A()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MH::A";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeInt(aA);
                ostr_.endSlice();
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                aA = istr_.readInt();
                istr_.endSlice();
            }
        }

        [Ice.SliceTypeId("::Test::MH::B")]
        public partial class B : A
        {
            public int bB;

            partial void ice_initialize();

            public B(int aA, int bB) : base(aA)
            {
                this.bB = bB;
                ice_initialize();
            }

            public B()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MH::B";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(bB);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                bB = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::MH::C")]
        public partial class C : B
        {
            public int cC;

            partial void ice_initialize();

            public C(int aA, int bB, int cC) : base(aA, bB)
            {
                this.cC = cC;
                ice_initialize();
            }

            public C()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MH::C";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(cC);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                cC = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }

        [Ice.SliceTypeId("::Test::MH::D")]
        public partial class D : C
        {
            public int dD;

            partial void ice_initialize();

            public D(int aA, int bB, int cC, int dD) : base(aA, bB, cC)
            {
                this.dD = dD;
                ice_initialize();
            }

            public D()
            {
                ice_initialize();
            }

            public static new string ice_staticId() => "::Test::MH::D";
            public override string ice_id() => ice_staticId();

            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(dD);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                dD = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }
        }
    }
}

namespace Test
{
    namespace MA
    {
        public interface IAPrx : Ice.ObjectPrx
        {
            IAPrx? iaop(IAPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<IAPrx?> iaopAsync(IAPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }

    namespace MB
    {
        public interface IB1Prx : global::Test.MA.IAPrx
        {
            IB1Prx? ib1op(IB1Prx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<IB1Prx?> ib1opAsync(IB1Prx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }

        public interface IB2Prx : global::Test.MA.IAPrx
        {
            IB2Prx? ib2op(IB2Prx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<IB2Prx?> ib2opAsync(IB2Prx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }

    namespace MA
    {
        public interface ICPrx : global::Test.MB.IB1Prx, global::Test.MB.IB2Prx
        {
            ICPrx? icop(ICPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null);

            global::System.Threading.Tasks.Task<ICPrx?> icopAsync(ICPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
        }
    }

    public interface InitialPrx : Ice.ObjectPrx
    {
        void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::Test.MA.IAPrx? iaop(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<global::Test.MA.IAPrx?> iaopAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::Test.MB.IB1Prx? ib1op(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<global::Test.MB.IB1Prx?> ib1opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::Test.MB.IB2Prx? ib2op(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<global::Test.MB.IB2Prx?> ib2opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);

        global::Test.MA.ICPrx? icop(global::System.Collections.Generic.Dictionary<string, string>? context = null);

        global::System.Threading.Tasks.Task<global::Test.MA.ICPrx?> icopAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default);
    }
}

namespace Test
{
    namespace MA
    {
        public sealed class IAPrxHelper : Ice.ObjectPrxHelperBase, IAPrx
        {
            public IAPrx? iaop(IAPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_iaopAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task<IAPrx?> iaopAsync(IAPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_iaopAsync(p, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<IAPrx?> _iceI_iaopAsync(IAPrx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_iaop_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<IAPrx?>(progress, cancel);
                _iceI_iaop(iceP_p, context, synchronous, completed);
                return completed.Task;
            }

            private const string _iaop_name = "iaop";

            private void _iceI_iaop(IAPrx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<IAPrx?>(completed);
                outAsync.invoke(
                    _iaop_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        IAPrxHelper.write(ostr, iceP_p);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        IAPrx? ret;
                        ret = IAPrxHelper.read(istr);
                        return ret;
                    });
            }

            public static IAPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new IAPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static IAPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new IAPrxHelper(b) : null;

            public static IAPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static IAPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new IAPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static IAPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MA::IA"
            };

            public static string ice_staticId() => "::Test::MA::IA";

            public static void write(Ice.OutputStream ostr, IAPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static IAPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new IAPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new IAPrxHelper(reference);

            private IAPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private IAPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }

    namespace MB
    {
        public sealed class IB1PrxHelper : Ice.ObjectPrxHelperBase, IB1Prx
        {
            public global::Test.MA.IAPrx? iaop(global::Test.MA.IAPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_iaopAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public IB1Prx? ib1op(IB1Prx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_ib1opAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task<global::Test.MA.IAPrx?> iaopAsync(global::Test.MA.IAPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_iaopAsync(p, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Test.MA.IAPrx?> _iceI_iaopAsync(global::Test.MA.IAPrx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_iaop_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MA.IAPrx?>(progress, cancel);
                _iceI_iaop(iceP_p, context, synchronous, completed);
                return completed.Task;
            }

            private const string _iaop_name = "iaop";

            private void _iceI_iaop(global::Test.MA.IAPrx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Test.MA.IAPrx?>(completed);
                outAsync.invoke(
                    _iaop_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        global::Test.MA.IAPrxHelper.write(ostr, iceP_p);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        global::Test.MA.IAPrx? ret;
                        ret = global::Test.MA.IAPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<IB1Prx?> ib1opAsync(IB1Prx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_ib1opAsync(p, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<IB1Prx?> _iceI_ib1opAsync(IB1Prx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_ib1op_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<IB1Prx?>(progress, cancel);
                _iceI_ib1op(iceP_p, context, synchronous, completed);
                return completed.Task;
            }

            private const string _ib1op_name = "ib1op";

            private void _iceI_ib1op(IB1Prx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<IB1Prx?>(completed);
                outAsync.invoke(
                    _ib1op_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        IB1PrxHelper.write(ostr, iceP_p);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        IB1Prx? ret;
                        ret = IB1PrxHelper.read(istr);
                        return ret;
                    });
            }

            public static IB1Prx createProxy(Ice.Communicator communicator, string proxyString) =>
                new IB1PrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static IB1Prx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new IB1PrxHelper(b) : null;

            public static IB1Prx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static IB1Prx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new IB1PrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static IB1Prx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MA::IA",
                "::Test::MB::IB1"
            };

            public static string ice_staticId() => "::Test::MB::IB1";

            public static void write(Ice.OutputStream ostr, IB1Prx? v)
            {
                ostr.writeProxy(v);
            }

            public static IB1Prx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new IB1PrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new IB1PrxHelper(reference);

            private IB1PrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private IB1PrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }

        public sealed class IB2PrxHelper : Ice.ObjectPrxHelperBase, IB2Prx
        {
            public global::Test.MA.IAPrx? iaop(global::Test.MA.IAPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_iaopAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public IB2Prx? ib2op(IB2Prx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_ib2opAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task<global::Test.MA.IAPrx?> iaopAsync(global::Test.MA.IAPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_iaopAsync(p, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Test.MA.IAPrx?> _iceI_iaopAsync(global::Test.MA.IAPrx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_iaop_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MA.IAPrx?>(progress, cancel);
                _iceI_iaop(iceP_p, context, synchronous, completed);
                return completed.Task;
            }

            private const string _iaop_name = "iaop";

            private void _iceI_iaop(global::Test.MA.IAPrx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Test.MA.IAPrx?>(completed);
                outAsync.invoke(
                    _iaop_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        global::Test.MA.IAPrxHelper.write(ostr, iceP_p);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        global::Test.MA.IAPrx? ret;
                        ret = global::Test.MA.IAPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<IB2Prx?> ib2opAsync(IB2Prx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_ib2opAsync(p, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<IB2Prx?> _iceI_ib2opAsync(IB2Prx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_ib2op_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<IB2Prx?>(progress, cancel);
                _iceI_ib2op(iceP_p, context, synchronous, completed);
                return completed.Task;
            }

            private const string _ib2op_name = "ib2op";

            private void _iceI_ib2op(IB2Prx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<IB2Prx?>(completed);
                outAsync.invoke(
                    _ib2op_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        IB2PrxHelper.write(ostr, iceP_p);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        IB2Prx? ret;
                        ret = IB2PrxHelper.read(istr);
                        return ret;
                    });
            }

            public static IB2Prx createProxy(Ice.Communicator communicator, string proxyString) =>
                new IB2PrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static IB2Prx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new IB2PrxHelper(b) : null;

            public static IB2Prx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static IB2Prx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new IB2PrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static IB2Prx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MA::IA",
                "::Test::MB::IB2"
            };

            public static string ice_staticId() => "::Test::MB::IB2";

            public static void write(Ice.OutputStream ostr, IB2Prx? v)
            {
                ostr.writeProxy(v);
            }

            public static IB2Prx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new IB2PrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new IB2PrxHelper(reference);

            private IB2PrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private IB2PrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }

    namespace MA
    {
        public sealed class ICPrxHelper : Ice.ObjectPrxHelperBase, ICPrx
        {
            public IAPrx? iaop(IAPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_iaopAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Test.MB.IB1Prx? ib1op(global::Test.MB.IB1Prx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_ib1opAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::Test.MB.IB2Prx? ib2op(global::Test.MB.IB2Prx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_ib2opAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public ICPrx? icop(ICPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null)
            {
                try
                {
                    return _iceI_icopAsync(p, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException!;
                }
            }

            public global::System.Threading.Tasks.Task<IAPrx?> iaopAsync(IAPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_iaopAsync(p, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<IAPrx?> _iceI_iaopAsync(IAPrx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_iaop_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<IAPrx?>(progress, cancel);
                _iceI_iaop(iceP_p, context, synchronous, completed);
                return completed.Task;
            }

            private const string _iaop_name = "iaop";

            private void _iceI_iaop(IAPrx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<IAPrx?>(completed);
                outAsync.invoke(
                    _iaop_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        IAPrxHelper.write(ostr, iceP_p);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        IAPrx? ret;
                        ret = IAPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Test.MB.IB1Prx?> ib1opAsync(global::Test.MB.IB1Prx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_ib1opAsync(p, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Test.MB.IB1Prx?> _iceI_ib1opAsync(global::Test.MB.IB1Prx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_ib1op_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MB.IB1Prx?>(progress, cancel);
                _iceI_ib1op(iceP_p, context, synchronous, completed);
                return completed.Task;
            }

            private const string _ib1op_name = "ib1op";

            private void _iceI_ib1op(global::Test.MB.IB1Prx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Test.MB.IB1Prx?>(completed);
                outAsync.invoke(
                    _ib1op_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        global::Test.MB.IB1PrxHelper.write(ostr, iceP_p);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        global::Test.MB.IB1Prx? ret;
                        ret = global::Test.MB.IB1PrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Test.MB.IB2Prx?> ib2opAsync(global::Test.MB.IB2Prx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_ib2opAsync(p, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Test.MB.IB2Prx?> _iceI_ib2opAsync(global::Test.MB.IB2Prx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_ib2op_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MB.IB2Prx?>(progress, cancel);
                _iceI_ib2op(iceP_p, context, synchronous, completed);
                return completed.Task;
            }

            private const string _ib2op_name = "ib2op";

            private void _iceI_ib2op(global::Test.MB.IB2Prx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Test.MB.IB2Prx?>(completed);
                outAsync.invoke(
                    _ib2op_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        global::Test.MB.IB2PrxHelper.write(ostr, iceP_p);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        global::Test.MB.IB2Prx? ret;
                        ret = global::Test.MB.IB2PrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<ICPrx?> icopAsync(ICPrx? p, global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
            {
                return _iceI_icopAsync(p, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<ICPrx?> _iceI_icopAsync(ICPrx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_icop_name);
                var completed = new Ice.Internal.OperationTaskCompletionCallback<ICPrx?>(progress, cancel);
                _iceI_icop(iceP_p, context, synchronous, completed);
                return completed.Task;
            }

            private const string _icop_name = "icop";

            private void _iceI_icop(ICPrx? iceP_p, global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<ICPrx?>(completed);
                outAsync.invoke(
                    _icop_name,
                    Ice.OperationMode.Normal,
                    null,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ICPrxHelper.write(ostr, iceP_p);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        ICPrx? ret;
                        ret = ICPrxHelper.read(istr);
                        return ret;
                    });
            }

            public static ICPrx createProxy(Ice.Communicator communicator, string proxyString) =>
                new ICPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

            public static ICPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                b is not null && b.ice_isA(ice_staticId(), ctx) ? new ICPrxHelper(b) : null;

            public static ICPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
                checkedCast(b?.ice_facet(f), ctx);

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ICPrx? uncheckedCast(Ice.ObjectPrx? b) =>
                b is not null ? new ICPrxHelper(b) : null;

            [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

            public static ICPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
                uncheckedCast(b?.ice_facet(f));

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Test::MA::IA",
                "::Test::MA::IC",
                "::Test::MB::IB1",
                "::Test::MB::IB2"
            };

            public static string ice_staticId() => "::Test::MA::IC";

            public static void write(Ice.OutputStream ostr, ICPrx? v)
            {
                ostr.writeProxy(v);
            }

            public static ICPrx? read(Ice.InputStream istr) =>
                istr.readProxy() is Ice.ObjectPrx proxy ? new ICPrxHelper(proxy) : null;

            protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new ICPrxHelper(reference);

            private ICPrxHelper(Ice.ObjectPrx proxy)
                : base(proxy)
            {
            }

            private ICPrxHelper(Ice.Internal.Reference reference)
                : base(reference)
            {
            }
        }
    }

    public sealed class InitialPrxHelper : Ice.ObjectPrxHelperBase, InitialPrx
    {
        public void shutdown(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                _iceI_shutdownAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Test.MA.IAPrx? iaop(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_iaopAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Test.MB.IB1Prx? ib1op(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_ib1opAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Test.MB.IB2Prx? ib2op(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_ib2opAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::Test.MA.ICPrx? icop(global::System.Collections.Generic.Dictionary<string, string>? context = null)
        {
            try
            {
                return _iceI_icopAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch (global::System.AggregateException ex_)
            {
                throw ex_.InnerException!;
            }
        }

        public global::System.Threading.Tasks.Task shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_shutdownAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new Ice.Internal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task<global::Test.MA.IAPrx?> iaopAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_iaopAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MA.IAPrx?> _iceI_iaopAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_iaop_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MA.IAPrx?>(progress, cancel);
            _iceI_iaop(context, synchronous, completed);
            return completed.Task;
        }

        private const string _iaop_name = "iaop";

        private void _iceI_iaop(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MA.IAPrx?>(completed);
            outAsync.invoke(
                _iaop_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::Test.MA.IAPrx? ret;
                    ret = global::Test.MA.IAPrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MB.IB1Prx?> ib1opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_ib1opAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MB.IB1Prx?> _iceI_ib1opAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_ib1op_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MB.IB1Prx?>(progress, cancel);
            _iceI_ib1op(context, synchronous, completed);
            return completed.Task;
        }

        private const string _ib1op_name = "ib1op";

        private void _iceI_ib1op(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MB.IB1Prx?>(completed);
            outAsync.invoke(
                _ib1op_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::Test.MB.IB1Prx? ret;
                    ret = global::Test.MB.IB1PrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MB.IB2Prx?> ib2opAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_ib2opAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MB.IB2Prx?> _iceI_ib2opAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_ib2op_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MB.IB2Prx?>(progress, cancel);
            _iceI_ib2op(context, synchronous, completed);
            return completed.Task;
        }

        private const string _ib2op_name = "ib2op";

        private void _iceI_ib2op(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MB.IB2Prx?>(completed);
            outAsync.invoke(
                _ib2op_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::Test.MB.IB2Prx? ret;
                    ret = global::Test.MB.IB2PrxHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<global::Test.MA.ICPrx?> icopAsync(global::System.Collections.Generic.Dictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default)
        {
            return _iceI_icopAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<global::Test.MA.ICPrx?> _iceI_icopAsync(global::System.Collections.Generic.Dictionary<string, string>? context, global::System.IProgress<bool>? progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_icop_name);
            var completed = new Ice.Internal.OperationTaskCompletionCallback<global::Test.MA.ICPrx?>(progress, cancel);
            _iceI_icop(context, synchronous, completed);
            return completed.Task;
        }

        private const string _icop_name = "icop";

        private void _iceI_icop(global::System.Collections.Generic.Dictionary<string, string>? context, bool synchronous, Ice.Internal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<global::Test.MA.ICPrx?>(completed);
            outAsync.invoke(
                _icop_name,
                Ice.OperationMode.Normal,
                null,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    global::Test.MA.ICPrx? ret;
                    ret = global::Test.MA.ICPrxHelper.read(istr);
                    return ret;
                });
        }

        public static InitialPrx createProxy(Ice.Communicator communicator, string proxyString) =>
            new InitialPrxHelper(Ice.ObjectPrxHelper.createProxy(communicator, proxyString));

        public static InitialPrx? checkedCast(Ice.ObjectPrx? b, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            b is not null && b.ice_isA(ice_staticId(), ctx) ? new InitialPrxHelper(b) : null;

        public static InitialPrx? checkedCast(Ice.ObjectPrx? b, string f, global::System.Collections.Generic.Dictionary<string, string>? ctx = null) =>
            checkedCast(b?.ice_facet(f), ctx);

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static InitialPrx? uncheckedCast(Ice.ObjectPrx? b) =>
            b is not null ? new InitialPrxHelper(b) : null;

        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(b))]

        public static InitialPrx? uncheckedCast(Ice.ObjectPrx? b, string f) =>
            uncheckedCast(b?.ice_facet(f));

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Test::Initial"
        };

        public static string ice_staticId() => "::Test::Initial";

        public static void write(Ice.OutputStream ostr, InitialPrx? v)
        {
            ostr.writeProxy(v);
        }

        public static InitialPrx? read(Ice.InputStream istr) =>
            istr.readProxy() is Ice.ObjectPrx proxy ? new InitialPrxHelper(proxy) : null;

        protected override Ice.ObjectPrxHelperBase iceNewInstance(Ice.Internal.Reference reference) => new InitialPrxHelper(reference);

        private InitialPrxHelper(Ice.ObjectPrx proxy)
            : base(proxy)
        {
        }

        private InitialPrxHelper(Ice.Internal.Reference reference)
            : base(reference)
        {
        }
    }
}

namespace Test
{
    namespace MA
    {
        public abstract class IADisp_ : Ice.ObjectImpl, IA
        {
            public abstract IAPrx? iaop(IAPrx? p, Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::MA::IA";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "iaop" => IA.iceD_iaopAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }

    namespace MB
    {
        public abstract class IB1Disp_ : Ice.ObjectImpl, IB1
        {
            public abstract global::Test.MA.IAPrx? iaop(global::Test.MA.IAPrx? p, Ice.Current current);

            public abstract IB1Prx? ib1op(IB1Prx? p, Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::MB::IB1";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "iaop" => global::Test.MA.IA.iceD_iaopAsync(this, request),
                    "ib1op" => IB1.iceD_ib1opAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }

        public abstract class IB2Disp_ : Ice.ObjectImpl, IB2
        {
            public abstract global::Test.MA.IAPrx? iaop(global::Test.MA.IAPrx? p, Ice.Current current);

            public abstract IB2Prx? ib2op(IB2Prx? p, Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::MB::IB2";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "iaop" => global::Test.MA.IA.iceD_iaopAsync(this, request),
                    "ib2op" => IB2.iceD_ib2opAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }

    namespace MA
    {
        public abstract class ICDisp_ : Ice.ObjectImpl, IC
        {
            public abstract IAPrx? iaop(IAPrx? p, Ice.Current current);

            public abstract global::Test.MB.IB1Prx? ib1op(global::Test.MB.IB1Prx? p, Ice.Current current);

            public abstract global::Test.MB.IB2Prx? ib2op(global::Test.MB.IB2Prx? p, Ice.Current current);

            public abstract ICPrx? icop(ICPrx? p, Ice.Current current);

            public override string ice_id(Ice.Current current) => ice_staticId();

            public static new string ice_staticId() => "::Test::MA::IC";

            public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
                request.current.operation switch
                {
                    "iaop" => IA.iceD_iaopAsync(this, request),
                    "ib1op" => global::Test.MB.IB1.iceD_ib1opAsync(this, request),
                    "ib2op" => global::Test.MB.IB2.iceD_ib2opAsync(this, request),
                    "icop" => IC.iceD_icopAsync(this, request),
                    "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                    "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                    "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                    "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                    _ => throw new Ice.OperationNotExistException()
                };
        }
    }

    public abstract class InitialDisp_ : Ice.ObjectImpl, Initial
    {
        public abstract void shutdown(Ice.Current current);

        public abstract global::Test.MA.IAPrx? iaop(Ice.Current current);

        public abstract global::Test.MB.IB1Prx? ib1op(Ice.Current current);

        public abstract global::Test.MB.IB2Prx? ib2op(Ice.Current current);

        public abstract global::Test.MA.ICPrx? icop(Ice.Current current);

        public override string ice_id(Ice.Current current) => ice_staticId();

        public static new string ice_staticId() => "::Test::Initial";

        public override global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> dispatchAsync(Ice.IncomingRequest request) =>
            request.current.operation switch
            {
                "shutdown" => Initial.iceD_shutdownAsync(this, request),
                "iaop" => Initial.iceD_iaopAsync(this, request),
                "ib1op" => Initial.iceD_ib1opAsync(this, request),
                "ib2op" => Initial.iceD_ib2opAsync(this, request),
                "icop" => Initial.iceD_icopAsync(this, request),
                "ice_id" => Ice.Object.iceD_ice_idAsync(this, request),
                "ice_ids" => Ice.Object.iceD_ice_idsAsync(this, request),
                "ice_isA" => Ice.Object.iceD_ice_isAAsync(this, request),
                "ice_ping" => Ice.Object.iceD_ice_pingAsync(this, request),
                _ => throw new Ice.OperationNotExistException()
            };
    }
}

namespace Test
{
    namespace MA
    {
        public partial interface IA
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_iaopAsync(
                IA obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                IAPrx? iceP_p;
                iceP_p = IAPrxHelper.read(istr);
                istr.endEncapsulation();
                var ret = obj.iaop(iceP_p, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                IAPrxHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }
        }
    }

    namespace MB
    {
        public partial interface IB1
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_ib1opAsync(
                IB1 obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                IB1Prx? iceP_p;
                iceP_p = IB1PrxHelper.read(istr);
                istr.endEncapsulation();
                var ret = obj.ib1op(iceP_p, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                IB1PrxHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }
        }

        public partial interface IB2
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_ib2opAsync(
                IB2 obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                IB2Prx? iceP_p;
                iceP_p = IB2PrxHelper.read(istr);
                istr.endEncapsulation();
                var ret = obj.ib2op(iceP_p, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                IB2PrxHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }
        }
    }

    namespace MA
    {
        public partial interface IC
        {
            protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_icopAsync(
                IC obj,
                Ice.IncomingRequest request)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
                var istr = request.inputStream;
                istr.startEncapsulation();
                ICPrx? iceP_p;
                iceP_p = ICPrxHelper.read(istr);
                istr.endEncapsulation();
                var ret = obj.icop(iceP_p, request.current);
                var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
                ostr.startEncapsulation(request.current.encoding, null);
                ICPrxHelper.write(ostr, ret);
                ostr.endEncapsulation();
                return new(new Ice.OutgoingResponse(ostr));
            }
        }
    }

    public partial interface Initial
    {
        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_shutdownAsync(
            Initial obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            obj.shutdown(request.current);
            return new(Ice.CurrentExtensions.createEmptyOutgoingResponse(request.current));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_iaopAsync(
            Initial obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.iaop(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            global::Test.MA.IAPrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_ib1opAsync(
            Initial obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.ib1op(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            global::Test.MB.IB1PrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_ib2opAsync(
            Initial obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.ib2op(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            global::Test.MB.IB2PrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }

        protected static global::System.Threading.Tasks.ValueTask<Ice.OutgoingResponse> iceD_icopAsync(
            Initial obj,
            Ice.IncomingRequest request)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, request.current.mode);
            request.inputStream.skipEmptyEncapsulation();
            var ret = obj.icop(request.current);
            var ostr = Ice.CurrentExtensions.startReplyStream(request.current);
            ostr.startEncapsulation(request.current.encoding, null);
            global::Test.MA.ICPrxHelper.write(ostr, ret);
            ostr.endEncapsulation();
            return new(new Ice.OutgoingResponse(ostr));
        }
    }
}
