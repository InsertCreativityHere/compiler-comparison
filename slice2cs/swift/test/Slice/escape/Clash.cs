//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Clash.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Clash
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Intf : global::Ice.Object, IntfOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class Cls : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public IntfPrx s;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public string context;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public int current;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public short response;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public string upCast;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public int typeId;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public short del;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public global::Ice.Optional<short> cookie;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public string ex;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public int result;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public string istr;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public string ostr;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public string inS;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public string @in;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public string proxy;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public Cls()
        {
            this.context = "";
            this.upCast = "";
            this.cookie = new global::Ice.Optional<short>();
            this.ex = "";
            this.istr = "";
            this.ostr = "";
            this.inS = "";
            this.@in = "";
            this.proxy = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public Cls(IntfPrx s, string context, int current, short response, string upCast, int typeId, short del, global::Ice.Optional<short> cookie, string ex, int result, string istr, string ostr, string inS, string @in, string proxy)
        {
            this.s = s;
            this.context = context;
            this.current = current;
            this.response = response;
            this.upCast = upCast;
            this.typeId = typeId;
            this.del = del;
            this.cookie = cookie;
            this.ex = ex;
            this.result = result;
            this.istr = istr;
            this.ostr = ostr;
            this.inS = inS;
            this.@in = @in;
            this.proxy = proxy;
            ice_initialize();
        }

        #endregion

        private const string _id = "::Clash::Cls";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            IntfPrxHelper.write(ostr_, s);
            ostr_.writeString(context);
            ostr_.writeInt(current);
            ostr_.writeShort(response);
            ostr_.writeString(upCast);
            ostr_.writeInt(typeId);
            ostr_.writeShort(del);
            ostr_.writeString(ex);
            ostr_.writeInt(result);
            ostr_.writeString(istr);
            ostr_.writeString(ostr);
            ostr_.writeString(inS);
            ostr_.writeString(@in);
            ostr_.writeString(proxy);
            ostr_.writeShort(1, cookie);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            s = IntfPrxHelper.read(istr_);
            context = istr_.readString();
            current = istr_.readInt();
            response = istr_.readShort();
            upCast = istr_.readString();
            typeId = istr_.readInt();
            del = istr_.readShort();
            ex = istr_.readString();
            result = istr_.readInt();
            istr = istr_.readString();
            ostr = istr_.readString();
            inS = istr_.readString();
            @in = istr_.readString();
            proxy = istr_.readString();
            cookie = istr_.readShort(1);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class St : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public string v;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public short istr;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public int ostr;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public int rhs;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public St()
        {
            this.v = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public St(string v, short istr, int ostr, int rhs)
        {
            this.v = v;
            this.istr = istr;
            this.ostr = ostr;
            this.rhs = rhs;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Clash::St");
            global::IceInternal.HashUtil.hashAdd(ref h_, v);
            global::IceInternal.HashUtil.hashAdd(ref h_, istr);
            global::IceInternal.HashUtil.hashAdd(ref h_, ostr);
            global::IceInternal.HashUtil.hashAdd(ref h_, rhs);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            St o = (St)other;
            if(this.v == null)
            {
                if(o.v != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.v.Equals(o.v))
                {
                    return false;
                }
            }
            if(!this.istr.Equals(o.istr))
            {
                return false;
            }
            if(!this.ostr.Equals(o.ostr))
            {
                return false;
            }
            if(!this.rhs.Equals(o.rhs))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator==(St lhs, St rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator!=(St lhs, St rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.v);
            ostr.writeShort(this.istr);
            ostr.writeInt(this.ostr);
            ostr.writeInt(this.rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.v = istr.readString();
            this.istr = istr.readShort();
            this.ostr = istr.readInt();
            this.rhs = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static void ice_write(global::Ice.OutputStream ostr, St v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static St ice_read(global::Ice.InputStream istr)
        {
            var v = new St();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly St _nullMarshalValue = new St();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Ex : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public short istr;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public int ostr;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        private void _initDM()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public Ex()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public Ex(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public Ex(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            this.istr = info.GetInt16("istr");
            this.ostr = info.GetInt32("ostr");
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        private void _initDM(short istr, int ostr)
        {
            this.istr = istr;
            this.ostr = ostr;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public Ex(short istr, int ostr)
        {
            _initDM(istr, ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public Ex(short istr, int ostr, global::System.Exception ex) : base(ex)
        {
            _initDM(istr, ostr);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override string ice_id()
        {
            return "::Clash::Ex";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Clash::Ex");
            global::IceInternal.HashUtil.hashAdd(ref h_, istr);
            global::IceInternal.HashUtil.hashAdd(ref h_, ostr);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            Ex o = other as Ex;
            if(o == null)
            {
                return false;
            }
            if(!this.istr.Equals(o.istr))
            {
                return false;
            }
            if(!this.ostr.Equals(o.ostr))
            {
                return false;
            }
            return true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override void GetObjectData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("istr", this.istr);
            info.AddValue("ostr", this.ostr);

            base.GetObjectData(info, context);
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator==(Ex lhs, Ex rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator!=(Ex lhs, Ex rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Clash::Ex", -1, true);
            ostr_.writeShort(istr);
            ostr_.writeInt(ostr);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr = istr_.readShort();
            ostr = istr_.readInt();
            istr_.endSlice();
        }

        #endregion
    }
}

namespace Clash
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Intf_context();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Intf_current();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Intf_response();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Intf_upCast();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Intf_typeId();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Intf_del();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Intf_cookie();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Intf_sync();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Intf_inS();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Intf_istr();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Intf_op();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Intf_opOut(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy);
}

namespace Clash
{
    public struct Intf_OpOutResult
    {
        public Intf_OpOutResult(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy)
        {
            this.context = context;
            this.current = current;
            this.response = response;
            this.ex = ex;
            this.sent = sent;
            this.cookie = cookie;
            this.sync = sync;
            this.result = result;
            this.istr = istr;
            this.ostr = ostr;
            this.proxy = proxy;
        }

        public string context;
        public string current;
        public string response;
        public string ex;
        public string sent;
        public string cookie;
        public string sync;
        public string result;
        public string istr;
        public string ostr;
        public global::Ice.Optional<string> proxy;
    }
}

namespace Clash
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface IntfPrx : global::Ice.ObjectPrx
    {
        void context(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task contextAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf_context> begin_context(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_context(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_context(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_context(global::Ice.AsyncResult asyncResult);

        void current(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task currentAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf_current> begin_current(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_current(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_current(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_current(global::Ice.AsyncResult asyncResult);

        void response(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task responseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf_response> begin_response(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_response(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_response(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_response(global::Ice.AsyncResult asyncResult);

        void upCast(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task upCastAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf_upCast> begin_upCast(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_upCast(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_upCast(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_upCast(global::Ice.AsyncResult asyncResult);

        void typeId(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task typeIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf_typeId> begin_typeId(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_typeId(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_typeId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_typeId(global::Ice.AsyncResult asyncResult);

        void del(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task delAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf_del> begin_del(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_del(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_del(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_del(global::Ice.AsyncResult asyncResult);

        void cookie(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task cookieAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf_cookie> begin_cookie(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_cookie(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_cookie(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_cookie(global::Ice.AsyncResult asyncResult);

        void sync(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task syncAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf_sync> begin_sync(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_sync(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_sync(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_sync(global::Ice.AsyncResult asyncResult);

        void inS(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task inSAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf_inS> begin_inS(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_inS(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_inS(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_inS(global::Ice.AsyncResult asyncResult);

        void istr(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task istrAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf_istr> begin_istr(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_istr(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_istr(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_istr(global::Ice.AsyncResult asyncResult);

        void op(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy, global::Ice.OptionalContext context_ = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task opAsync(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy, global::Ice.OptionalContext context_ = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf_op> begin_op(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy, global::Ice.OptionalContext context_ = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_op(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy, global::Ice.AsyncCallback callback, object cookie_);

        global::Ice.AsyncResult begin_op(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy, global::Ice.OptionalContext context_, global::Ice.AsyncCallback callback, object cookie_);

        void end_op(global::Ice.AsyncResult asyncResult);

        void opOut(out string context, out string current, out string response, out string ex, out string sent, out string cookie, out string sync, out string result, out string istr, out string ostr, out global::Ice.Optional<string> proxy, global::Ice.OptionalContext context_ = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Intf_OpOutResult> opOutAsync(global::Ice.OptionalContext context_ = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Intf_opOut> begin_opOut(global::Ice.OptionalContext context_ = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_opOut(global::Ice.AsyncCallback callback, object cookie_);

        global::Ice.AsyncResult begin_opOut(global::Ice.OptionalContext context_, global::Ice.AsyncCallback callback, object cookie_);

        void end_opOut(out string context, out string current, out string response, out string ex, out string sent, out string cookie, out string sync, out string result, out string istr, out string ostr, out global::Ice.Optional<string> proxy, global::Ice.AsyncResult asyncResult);
    }
}

namespace Clash
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface IntfOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void context(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void current(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void response(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void upCast(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void typeId(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void del(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void cookie(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void sync(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void inS(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void istr(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void op(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy, global::Ice.Current current_ = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void opOut(out string context, out string current, out string response, out string ex, out string sent, out string cookie, out string sync, out string result, out string istr, out string ostr, out global::Ice.Optional<string> proxy, global::Ice.Current current_ = null);
    }
}

namespace Clash
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    [global::System.Serializable]
    public sealed class IntfPrxHelper : global::Ice.ObjectPrxHelperBase, IntfPrx
    {
        public IntfPrxHelper()
        {
        }

        public IntfPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void context(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_contextAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void current(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_currentAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void response(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_responseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void upCast(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_upCastAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void typeId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_typeIdAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void del(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_delAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void cookie(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_cookieAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void sync(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_syncAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void inS(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_inSAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void istr(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_istrAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void op(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy, global::Ice.OptionalContext context_ = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_opAsync(context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, context_, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void opOut(out string context, out string current, out string response, out string ex, out string sent, out string cookie, out string sync, out string result, out string istr, out string ostr, out global::Ice.Optional<string> proxy, global::Ice.OptionalContext context_ = new global::Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_opOutAsync(context_, null, global::System.Threading.CancellationToken.None, true).Result;
                context = result_.context;
                current = result_.current;
                response = result_.response;
                ex = result_.ex;
                sent = result_.sent;
                cookie = result_.cookie;
                sync = result_.sync;
                result = result_.result;
                istr = result_.istr;
                ostr = result_.ostr;
                proxy = result_.proxy;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task contextAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_contextAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_contextAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_context(context, synchronous, completed);
            return completed.Task;
        }

        private const string _context_name = "context";

        private void _iceI_context(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _context_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task currentAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_currentAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_currentAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_current(context, synchronous, completed);
            return completed.Task;
        }

        private const string _current_name = "current";

        private void _iceI_current(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _current_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task responseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_responseAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_responseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_response(context, synchronous, completed);
            return completed.Task;
        }

        private const string _response_name = "response";

        private void _iceI_response(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _response_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task upCastAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_upCastAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_upCastAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_upCast(context, synchronous, completed);
            return completed.Task;
        }

        private const string _upCast_name = "upCast";

        private void _iceI_upCast(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _upCast_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task typeIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_typeIdAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_typeIdAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_typeId(context, synchronous, completed);
            return completed.Task;
        }

        private const string _typeId_name = "typeId";

        private void _iceI_typeId(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _typeId_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task delAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_delAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_delAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_del(context, synchronous, completed);
            return completed.Task;
        }

        private const string _del_name = "del";

        private void _iceI_del(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _del_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task cookieAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_cookieAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_cookieAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_cookie(context, synchronous, completed);
            return completed.Task;
        }

        private const string _cookie_name = "cookie";

        private void _iceI_cookie(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _cookie_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task syncAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_syncAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_syncAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_sync(context, synchronous, completed);
            return completed.Task;
        }

        private const string _sync_name = "sync";

        private void _iceI_sync(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _sync_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task inSAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_inSAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_inSAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_inS(context, synchronous, completed);
            return completed.Task;
        }

        private const string _inS_name = "inS";

        private void _iceI_inS(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _inS_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task istrAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_istrAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_istrAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_istr(context, synchronous, completed);
            return completed.Task;
        }

        private const string _istr_name = "istr";

        private void _iceI_istr(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _istr_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public global::System.Threading.Tasks.Task opAsync(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy, global::Ice.OptionalContext context_ = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opAsync(context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, context_, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_opAsync(string iceP_context, string iceP_current, string iceP_response, string iceP_ex, string iceP_sent, string iceP_cookie, string iceP_sync, string iceP_result, string iceP_istr, string iceP_ostr, global::Ice.Optional<string> iceP_proxy, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_op(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, context, synchronous, completed);
            return completed.Task;
        }

        private const string _op_name = "op";

        private void _iceI_op(string iceP_context, string iceP_current, string iceP_response, string iceP_ex, string iceP_sent, string iceP_cookie, string iceP_sync, string iceP_result, string iceP_istr, string iceP_ostr, global::Ice.Optional<string> iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _op_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_context);
                    ostr.writeString(iceP_current);
                    ostr.writeString(iceP_response);
                    ostr.writeString(iceP_ex);
                    ostr.writeString(iceP_sent);
                    ostr.writeString(iceP_cookie);
                    ostr.writeString(iceP_sync);
                    ostr.writeString(iceP_result);
                    ostr.writeString(iceP_istr);
                    ostr.writeString(iceP_ostr);
                    ostr.writeString(1, iceP_proxy);
                });
        }

        public global::System.Threading.Tasks.Task<Intf_OpOutResult> opOutAsync(global::Ice.OptionalContext context_ = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_opOutAsync(context_, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Intf_OpOutResult> _iceI_opOutAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_opOut_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Intf_OpOutResult>(progress, cancel);
            _iceI_opOut(context, synchronous, completed);
            return completed.Task;
        }

        private const string _opOut_name = "opOut";

        private void _iceI_opOut(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Intf_OpOutResult>(completed);
            outAsync.invoke(
                _opOut_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Intf_OpOutResult ret = new Intf_OpOutResult();
                    ret.context = istr.readString();
                    ret.current = istr.readString();
                    ret.response = istr.readString();
                    ret.ex = istr.readString();
                    ret.sent = istr.readString();
                    ret.cookie = istr.readString();
                    ret.sync = istr.readString();
                    ret.result = istr.readString();
                    ret.istr = istr.readString();
                    ret.ostr = istr.readString();
                    ret.proxy = istr.readString(1);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Intf_context> begin_context(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_context(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_context(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_context(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_context(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_context(context, callback, cookie, false);
        }

        public void end_context(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _context_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf_context> begin_context(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf_context, object>(
                (Callback_Intf_context cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _context_name, cookie, completedCallback);
            _iceI_context(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf_current> begin_current(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_current(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_current(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_current(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_current(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_current(context, callback, cookie, false);
        }

        public void end_current(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _current_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf_current> begin_current(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf_current, object>(
                (Callback_Intf_current cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _current_name, cookie, completedCallback);
            _iceI_current(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf_response> begin_response(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_response(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_response(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_response(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_response(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_response(context, callback, cookie, false);
        }

        public void end_response(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _response_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf_response> begin_response(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf_response, object>(
                (Callback_Intf_response cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _response_name, cookie, completedCallback);
            _iceI_response(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf_upCast> begin_upCast(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_upCast(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_upCast(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_upCast(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_upCast(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_upCast(context, callback, cookie, false);
        }

        public void end_upCast(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _upCast_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf_upCast> begin_upCast(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf_upCast, object>(
                (Callback_Intf_upCast cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _upCast_name, cookie, completedCallback);
            _iceI_upCast(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf_typeId> begin_typeId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_typeId(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_typeId(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_typeId(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_typeId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_typeId(context, callback, cookie, false);
        }

        public void end_typeId(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _typeId_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf_typeId> begin_typeId(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf_typeId, object>(
                (Callback_Intf_typeId cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _typeId_name, cookie, completedCallback);
            _iceI_typeId(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf_del> begin_del(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_del(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_del(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_del(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_del(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_del(context, callback, cookie, false);
        }

        public void end_del(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _del_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf_del> begin_del(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf_del, object>(
                (Callback_Intf_del cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _del_name, cookie, completedCallback);
            _iceI_del(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf_cookie> begin_cookie(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_cookie(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_cookie(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_cookie(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_cookie(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_cookie(context, callback, cookie, false);
        }

        public void end_cookie(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _cookie_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf_cookie> begin_cookie(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf_cookie, object>(
                (Callback_Intf_cookie cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _cookie_name, cookie, completedCallback);
            _iceI_cookie(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf_sync> begin_sync(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_sync(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_sync(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sync(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_sync(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sync(context, callback, cookie, false);
        }

        public void end_sync(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _sync_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf_sync> begin_sync(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf_sync, object>(
                (Callback_Intf_sync cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _sync_name, cookie, completedCallback);
            _iceI_sync(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf_inS> begin_inS(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_inS(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_inS(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_inS(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_inS(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_inS(context, callback, cookie, false);
        }

        public void end_inS(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _inS_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf_inS> begin_inS(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf_inS, object>(
                (Callback_Intf_inS cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _inS_name, cookie, completedCallback);
            _iceI_inS(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf_istr> begin_istr(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_istr(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_istr(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_istr(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_istr(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_istr(context, callback, cookie, false);
        }

        public void end_istr(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _istr_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf_istr> begin_istr(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf_istr, object>(
                (Callback_Intf_istr cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _istr_name, cookie, completedCallback);
            _iceI_istr(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf_op> begin_op(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy, global::Ice.OptionalContext context_ = new global::Ice.OptionalContext())
        {
            return begin_op(context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, context_, null, null, false);
        }

        public global::Ice.AsyncResult begin_op(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy, global::Ice.AsyncCallback callback, object cookie_)
        {
            return begin_op(context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, new global::Ice.OptionalContext(), callback, cookie_, false);
        }

        public global::Ice.AsyncResult begin_op(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy, global::Ice.OptionalContext context_, global::Ice.AsyncCallback callback, object cookie_)
        {
            return begin_op(context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, context_, callback, cookie_, false);
        }

        public void end_op(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _op_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Intf_op> begin_op(string iceP_context, string iceP_current, string iceP_response, string iceP_ex, string iceP_sent, string iceP_cookie, string iceP_sync, string iceP_result, string iceP_istr, string iceP_ostr, global::Ice.Optional<string> iceP_proxy, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf_op, object>(
                (Callback_Intf_op cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _op_name, cookie, completedCallback);
            _iceI_op(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Intf_opOut> begin_opOut(global::Ice.OptionalContext context_ = new global::Ice.OptionalContext())
        {
            return begin_opOut(context_, null, null, false);
        }

        public global::Ice.AsyncResult begin_opOut(global::Ice.AsyncCallback callback, object cookie_)
        {
            return begin_opOut(new global::Ice.OptionalContext(), callback, cookie_, false);
        }

        public global::Ice.AsyncResult begin_opOut(global::Ice.OptionalContext context_, global::Ice.AsyncCallback callback, object cookie_)
        {
            return begin_opOut(context_, callback, cookie_, false);
        }

        public void end_opOut(out string context, out string current, out string response, out string ex, out string sent, out string cookie, out string sync, out string result, out string istr, out string ostr, out global::Ice.Optional<string> proxy, global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _opOut_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Intf_OpOutResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            context = result_.context;
            current = result_.current;
            response = result_.response;
            ex = result_.ex;
            sent = result_.sent;
            cookie = result_.cookie;
            sync = result_.sync;
            result = result_.result;
            istr = result_.istr;
            ostr = result_.ostr;
            proxy = result_.proxy;
        }

        private global::Ice.AsyncResult<Callback_Intf_opOut> begin_opOut(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_opOut_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Intf_opOut, Intf_OpOutResult>(
                (Callback_Intf_opOut cb, Intf_OpOutResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.context, ret.current, ret.response, ret.ex, ret.sent, ret.cookie, ret.sync, ret.result, ret.istr, ret.ostr, ret.proxy);
                    }
                },
                this, _opOut_name, cookie, completedCallback);
            _iceI_opOut(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static IntfPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            IntfPrx r = b as IntfPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                IntfPrxHelper h = new IntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static IntfPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            IntfPrx r = b as IntfPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                IntfPrxHelper h = new IntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static IntfPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    IntfPrxHelper h = new IntfPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static IntfPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    IntfPrxHelper h = new IntfPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static IntfPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            IntfPrx r = b as IntfPrx;
            if(r == null)
            {
                IntfPrxHelper h = new IntfPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static IntfPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            IntfPrxHelper h = new IntfPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Clash::Intf",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, IntfPrx v)
        {
            ostr.writeProxy(v);
        }

        public static IntfPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                IntfPrxHelper result = new IntfPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Clash
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public abstract class IntfDisp_ : global::Ice.ObjectImpl, Intf
    {
        #region Slice operations

        public abstract void context(global::Ice.Current current = null);

        public abstract void current(global::Ice.Current current = null);

        public abstract void response(global::Ice.Current current = null);

        public abstract void upCast(global::Ice.Current current = null);

        public abstract void typeId(global::Ice.Current current = null);

        public abstract void del(global::Ice.Current current = null);

        public abstract void cookie(global::Ice.Current current = null);

        public abstract void sync(global::Ice.Current current = null);

        public abstract void inS(global::Ice.Current current = null);

        public abstract void istr(global::Ice.Current current = null);

        public abstract void op(string context, string current, string response, string ex, string sent, string cookie, string sync, string result, string istr, string ostr, global::Ice.Optional<string> proxy, global::Ice.Current current_ = null);

        public abstract void opOut(out string context, out string current, out string response, out string ex, out string sent, out string cookie, out string sync, out string result, out string istr, out string ostr, out global::Ice.Optional<string> proxy, global::Ice.Current current_ = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Clash::Intf",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_context(Intf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.context(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_current(Intf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.current(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_response(Intf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.response(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_upCast(Intf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.upCast(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_typeId(Intf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.typeId(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_del(Intf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.del(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_cookie(Intf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.cookie(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_sync(Intf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.sync(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_inS(Intf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.inS(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_istr(Intf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.istr(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_op(Intf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_context;
            string iceP_current;
            string iceP_response;
            string iceP_ex;
            string iceP_sent;
            string iceP_cookie;
            string iceP_sync;
            string iceP_result;
            string iceP_istr;
            string iceP_ostr;
            global::Ice.Optional<string> iceP_proxy;
            iceP_context = istr.readString();
            iceP_current = istr.readString();
            iceP_response = istr.readString();
            iceP_ex = istr.readString();
            iceP_sent = istr.readString();
            iceP_cookie = istr.readString();
            iceP_sync = istr.readString();
            iceP_result = istr.readString();
            iceP_istr = istr.readString();
            iceP_ostr = istr.readString();
            iceP_proxy = istr.readString(1);
            inS.endReadParams();
            obj.op(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_opOut(Intf obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            string iceP_context;
            string iceP_current;
            string iceP_response;
            string iceP_ex;
            string iceP_sent;
            string iceP_cookie;
            string iceP_sync;
            string iceP_result;
            string iceP_istr;
            string iceP_ostr;
            global::Ice.Optional<string> iceP_proxy;
            obj.opOut(out iceP_context, out iceP_current, out iceP_response, out iceP_ex, out iceP_sent, out iceP_cookie, out iceP_sync, out iceP_result, out iceP_istr, out iceP_ostr, out iceP_proxy, current);
            var ostr = inS.startWriteParams();
            ostr.writeString(iceP_context);
            ostr.writeString(iceP_current);
            ostr.writeString(iceP_response);
            ostr.writeString(iceP_ex);
            ostr.writeString(iceP_sent);
            ostr.writeString(iceP_cookie);
            ostr.writeString(iceP_sync);
            ostr.writeString(iceP_result);
            ostr.writeString(iceP_istr);
            ostr.writeString(iceP_ostr);
            ostr.writeString(1, iceP_proxy);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "context",
            "cookie",
            "current",
            "del",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "inS",
            "istr",
            "op",
            "opOut",
            "response",
            "sync",
            "typeId",
            "upCast"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_context(this, inS, current);
                }
                case 1:
                {
                    return iceD_cookie(this, inS, current);
                }
                case 2:
                {
                    return iceD_current(this, inS, current);
                }
                case 3:
                {
                    return iceD_del(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 8:
                {
                    return iceD_inS(this, inS, current);
                }
                case 9:
                {
                    return iceD_istr(this, inS, current);
                }
                case 10:
                {
                    return iceD_op(this, inS, current);
                }
                case 11:
                {
                    return iceD_opOut(this, inS, current);
                }
                case 12:
                {
                    return iceD_response(this, inS, current);
                }
                case 13:
                {
                    return iceD_sync(this, inS, current);
                }
                case 14:
                {
                    return iceD_typeId(this, inS, current);
                }
                case 15:
                {
                    return iceD_upCast(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
