//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice interface`Empty`.
public struct EmptyTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Empty"]
    public static let staticId = "::Test::Empty"
}

/// :nodoc:
public class A_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return A.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_A() -> Ice.UserExceptionTypeResolver {
        return A_TypeResolver()
    }
}

open class A: Ice.UserException {
    public var aMem: Swift.Int32 = 0

    public required init() {}

    public init(aMem: Swift.Int32) {
        self.aMem = aMem
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::A"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: A.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.aMem)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.aMem = try istr.read()
        try istr.endSlice()
    }
}

/// :nodoc:
public class B_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return B.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_B() -> Ice.UserExceptionTypeResolver {
        return B_TypeResolver()
    }
}

open class B: A {
    public var bMem: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aMem: Swift.Int32, bMem: Swift.Int32) {
        self.bMem = bMem
        super.init(aMem: aMem)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::B"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: B.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.bMem)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bMem = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class C_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return C.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_C() -> Ice.UserExceptionTypeResolver {
        return C_TypeResolver()
    }
}

open class C: B {
    public var cMem: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aMem: Swift.Int32, bMem: Swift.Int32, cMem: Swift.Int32) {
        self.cMem = cMem
        super.init(aMem: aMem, bMem: bMem)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::C"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: C.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.cMem)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.cMem = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class D_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return D.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_D() -> Ice.UserExceptionTypeResolver {
        return D_TypeResolver()
    }
}

open class D: Ice.UserException {
    public var dMem: Swift.Int32 = 0

    public required init() {}

    public init(dMem: Swift.Int32) {
        self.dMem = dMem
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::D"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: D.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.dMem)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.dMem = try istr.read()
        try istr.endSlice()
    }
}

/// :nodoc:
public class ModA_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return ModA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Mod_A() -> Ice.UserExceptionTypeResolver {
        return ModA_TypeResolver()
    }
}

open class ModA: A {
    public var a2Mem: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aMem: Swift.Int32, a2Mem: Swift.Int32) {
        self.a2Mem = a2Mem
        super.init(aMem: aMem)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::Mod::A"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: ModA.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.a2Mem)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.a2Mem = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// Traits for Slice interface`Thrower`.
public struct ThrowerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Thrower"]
    public static let staticId = "::Test::Thrower"
}

/// Traits for Slice interface`WrongOperation`.
public struct WrongOperationTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::WrongOperation"]
    public static let staticId = "::Test::WrongOperation"
}

/// EmptyPrx overview.
public protocol EmptyPrx: Ice.ObjectPrx {}

private final class EmptyPrxI: Ice.ObjectPrxI, EmptyPrx {
    public override class func ice_staticId() -> Swift.String {
        return EmptyTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ProxyParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: EmptyPrx.Protocol) throws -> EmptyPrx {
    try communicator.makeProxyImpl(proxyString) as EmptyPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `EmptyPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `EmptyPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: EmptyPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> EmptyPrx? {
    return try EmptyPrxI.checkedCast(prx: prx, facet: facet, context: context) as EmptyPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `EmptyPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `EmptyPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: EmptyPrx.Protocol, facet: Swift.String? = nil) -> EmptyPrx {
    return EmptyPrxI.uncheckedCast(prx: prx, facet: facet) as EmptyPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `EmptyPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: EmptyPrx.Protocol) -> Swift.String {
    return EmptyTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `EmptyPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `EmptyPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `EmptyPrx?` - The extracted proxy
    func read(_ type: EmptyPrx.Protocol) throws -> EmptyPrx? {
        return try read() as EmptyPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `EmptyPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `EmptyPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: EmptyPrx.Protocol) throws -> EmptyPrx? {
        return try read(tag: tag) as EmptyPrxI?
    }
}

/// EmptyPrx overview.
public extension EmptyPrx {}

/// ThrowerPrx overview.
///
/// ThrowerPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - supportsUndeclaredExceptions: 
///
///  - supportsUndeclaredExceptionsAsync: 
///
///  - supportsAssertException: 
///
///  - supportsAssertExceptionAsync: 
///
///  - throwAasA: 
///
///  - throwAasAAsync: 
///
///  - throwAorDasAorD: 
///
///  - throwAorDasAorDAsync: 
///
///  - throwBasA: 
///
///  - throwBasAAsync: 
///
///  - throwCasA: 
///
///  - throwCasAAsync: 
///
///  - throwBasB: 
///
///  - throwBasBAsync: 
///
///  - throwCasB: 
///
///  - throwCasBAsync: 
///
///  - throwCasC: 
///
///  - throwCasCAsync: 
///
///  - throwModA: 
///
///  - throwModAAsync: 
///
///  - throwUndeclaredA: 
///
///  - throwUndeclaredAAsync: 
///
///  - throwUndeclaredB: 
///
///  - throwUndeclaredBAsync: 
///
///  - throwUndeclaredC: 
///
///  - throwUndeclaredCAsync: 
///
///  - throwLocalException: 
///
///  - throwLocalExceptionAsync: 
///
///  - throwNonIceException: 
///
///  - throwNonIceExceptionAsync: 
///
///  - throwAssertException: 
///
///  - throwAssertExceptionAsync: 
///
///  - throwMemoryLimitException: 
///
///  - throwMemoryLimitExceptionAsync: 
///
///  - throwLocalExceptionIdempotent: 
///
///  - throwLocalExceptionIdempotentAsync: 
///
///  - throwAfterResponse: 
///
///  - throwAfterResponseAsync: 
///
///  - throwAfterException: 
///
///  - throwAfterExceptionAsync: 
///
///  - throwMarshalException: 
///
///  - throwMarshalExceptionAsync: 
public protocol ThrowerPrx: Ice.ObjectPrx {}

private final class ThrowerPrxI: Ice.ObjectPrxI, ThrowerPrx {
    public override class func ice_staticId() -> Swift.String {
        return ThrowerTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ProxyParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: ThrowerPrx.Protocol) throws -> ThrowerPrx {
    try communicator.makeProxyImpl(proxyString) as ThrowerPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `ThrowerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `ThrowerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: ThrowerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> ThrowerPrx? {
    return try ThrowerPrxI.checkedCast(prx: prx, facet: facet, context: context) as ThrowerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `ThrowerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `ThrowerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: ThrowerPrx.Protocol, facet: Swift.String? = nil) -> ThrowerPrx {
    return ThrowerPrxI.uncheckedCast(prx: prx, facet: facet) as ThrowerPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `ThrowerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: ThrowerPrx.Protocol) -> Swift.String {
    return ThrowerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `ThrowerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `ThrowerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ThrowerPrx?` - The extracted proxy
    func read(_ type: ThrowerPrx.Protocol) throws -> ThrowerPrx? {
        return try read() as ThrowerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `ThrowerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ThrowerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: ThrowerPrx.Protocol) throws -> ThrowerPrx? {
        return try read(tag: tag) as ThrowerPrxI?
    }
}

/// ThrowerPrx overview.
///
/// ThrowerPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - supportsUndeclaredExceptions: 
///
///  - supportsUndeclaredExceptionsAsync: 
///
///  - supportsAssertException: 
///
///  - supportsAssertExceptionAsync: 
///
///  - throwAasA: 
///
///  - throwAasAAsync: 
///
///  - throwAorDasAorD: 
///
///  - throwAorDasAorDAsync: 
///
///  - throwBasA: 
///
///  - throwBasAAsync: 
///
///  - throwCasA: 
///
///  - throwCasAAsync: 
///
///  - throwBasB: 
///
///  - throwBasBAsync: 
///
///  - throwCasB: 
///
///  - throwCasBAsync: 
///
///  - throwCasC: 
///
///  - throwCasCAsync: 
///
///  - throwModA: 
///
///  - throwModAAsync: 
///
///  - throwUndeclaredA: 
///
///  - throwUndeclaredAAsync: 
///
///  - throwUndeclaredB: 
///
///  - throwUndeclaredBAsync: 
///
///  - throwUndeclaredC: 
///
///  - throwUndeclaredCAsync: 
///
///  - throwLocalException: 
///
///  - throwLocalExceptionAsync: 
///
///  - throwNonIceException: 
///
///  - throwNonIceExceptionAsync: 
///
///  - throwAssertException: 
///
///  - throwAssertExceptionAsync: 
///
///  - throwMemoryLimitException: 
///
///  - throwMemoryLimitExceptionAsync: 
///
///  - throwLocalExceptionIdempotent: 
///
///  - throwLocalExceptionIdempotentAsync: 
///
///  - throwAfterResponse: 
///
///  - throwAfterResponseAsync: 
///
///  - throwAfterException: 
///
///  - throwAfterExceptionAsync: 
///
///  - throwMarshalException: 
///
///  - throwMarshalExceptionAsync: 
public extension ThrowerPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Bool`
    func supportsUndeclaredExceptions(context: Ice.Context? = nil) throws -> Swift.Bool {
        return try _impl._invoke(operation: "supportsUndeclaredExceptions",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Bool = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Bool>` - The result of the operation
    func supportsUndeclaredExceptionsAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Bool> {
        return _impl._invokeAsync(operation: "supportsUndeclaredExceptions",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Bool = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Bool`
    func supportsAssertException(context: Ice.Context? = nil) throws -> Swift.Bool {
        return try _impl._invoke(operation: "supportsAssertException",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Bool = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Bool>` - The result of the operation
    func supportsAssertExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Bool> {
        return _impl._invokeAsync(operation: "supportsAssertException",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Bool = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwAasA(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwAasA",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as A {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwAasAAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwAasA",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as A {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwAorDasAorD(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwAorDasAorD",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as D {
                                  throw error
                              } catch let error as A {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwAorDasAorDAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwAorDasAorD",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as D {
                                          throw error
                                      } catch let error as A {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwBasA(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwBasA",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                              ostr.write(iceP_b)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as A {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwBasAAsync(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwBasA",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                      ostr.write(iceP_b)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as A {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter c: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwCasA(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, c iceP_c: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwCasA",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                              ostr.write(iceP_b)
                              ostr.write(iceP_c)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as A {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter c: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwCasAAsync(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, c iceP_c: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwCasA",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                      ostr.write(iceP_b)
                                      ostr.write(iceP_c)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as A {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwBasB(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwBasB",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                              ostr.write(iceP_b)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as B {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwBasBAsync(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwBasB",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                      ostr.write(iceP_b)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as B {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter c: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwCasB(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, c iceP_c: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwCasB",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                              ostr.write(iceP_b)
                              ostr.write(iceP_c)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as B {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter c: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwCasBAsync(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, c iceP_c: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwCasB",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                      ostr.write(iceP_b)
                                      ostr.write(iceP_c)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as B {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter c: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwCasC(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, c iceP_c: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwCasC",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                              ostr.write(iceP_b)
                              ostr.write(iceP_c)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as C {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter c: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwCasCAsync(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, c iceP_c: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwCasC",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                      ostr.write(iceP_b)
                                      ostr.write(iceP_c)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as C {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter a2: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwModA(a iceP_a: Swift.Int32, a2 iceP_a2: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwModA",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                              ostr.write(iceP_a2)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as ModA {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter a2: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwModAAsync(a iceP_a: Swift.Int32, a2 iceP_a2: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwModA",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                      ostr.write(iceP_a2)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as ModA {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwUndeclaredA(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwUndeclaredA",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwUndeclaredAAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwUndeclaredA",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwUndeclaredB(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwUndeclaredB",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                              ostr.write(iceP_b)
                          },
                          context: context)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwUndeclaredBAsync(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwUndeclaredB",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                      ostr.write(iceP_b)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter c: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwUndeclaredC(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, c iceP_c: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwUndeclaredC",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                              ostr.write(iceP_b)
                              ostr.write(iceP_c)
                          },
                          context: context)
    }

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter c: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwUndeclaredCAsync(a iceP_a: Swift.Int32, b iceP_b: Swift.Int32, c iceP_c: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwUndeclaredC",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                      ostr.write(iceP_b)
                                      ostr.write(iceP_c)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwLocalException(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwLocalException",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwLocalExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwLocalException",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwNonIceException(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwNonIceException",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwNonIceExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwNonIceException",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwAssertException(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwAssertException",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwAssertExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwAssertException",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Ice.ByteSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Ice.ByteSeq`
    func throwMemoryLimitException(_ iceP_seq: Ice.ByteSeq, context: Ice.Context? = nil) throws -> Ice.ByteSeq {
        return try _impl._invoke(operation: "throwMemoryLimitException",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_seq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Ice.ByteSeq = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Ice.ByteSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Ice.ByteSeq>` - The result of the operation
    func throwMemoryLimitExceptionAsync(_ iceP_seq: Ice.ByteSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Ice.ByteSeq> {
        return _impl._invokeAsync(operation: "throwMemoryLimitException",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_seq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Ice.ByteSeq = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwLocalExceptionIdempotent(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwLocalExceptionIdempotent",
                          mode: .Idempotent,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwLocalExceptionIdempotentAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwLocalExceptionIdempotent",
                                  mode: .Idempotent,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwAfterResponse(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwAfterResponse",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwAfterResponseAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwAfterResponse",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func throwAfterException(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "throwAfterException",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as A {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func throwAfterExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "throwAfterException",
                                  mode: .Normal,
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as A {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: Swift.Int32, p: Swift.Int32)`:
    ///
    ///   - returnValue: `Swift.Int32`
    ///
    ///   - p: `Swift.Int32`
    func throwMarshalException(context: Ice.Context? = nil) throws -> (returnValue: Swift.Int32, p: Swift.Int32) {
        return try _impl._invoke(operation: "throwMarshalException",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_p: Swift.Int32 = try istr.read()
                                     let iceP_returnValue: Swift.Int32 = try istr.read()
                                     return (iceP_returnValue, iceP_p)
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: Swift.Int32, p: Swift.Int32)>` - The result of the operation
    func throwMarshalExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: Swift.Int32, p: Swift.Int32)> {
        return _impl._invokeAsync(operation: "throwMarshalException",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_p: Swift.Int32 = try istr.read()
                                      let iceP_returnValue: Swift.Int32 = try istr.read()
                                      return (iceP_returnValue, iceP_p)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// WrongOperationPrx overview.
///
/// WrongOperationPrx Methods:
///
///  - noSuchOperation: 
///
///  - noSuchOperationAsync: 
public protocol WrongOperationPrx: Ice.ObjectPrx {}

private final class WrongOperationPrxI: Ice.ObjectPrxI, WrongOperationPrx {
    public override class func ice_staticId() -> Swift.String {
        return WrongOperationTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ProxyParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: WrongOperationPrx.Protocol) throws -> WrongOperationPrx {
    try communicator.makeProxyImpl(proxyString) as WrongOperationPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `WrongOperationPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `WrongOperationPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: WrongOperationPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> WrongOperationPrx? {
    return try WrongOperationPrxI.checkedCast(prx: prx, facet: facet, context: context) as WrongOperationPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `WrongOperationPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `WrongOperationPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: WrongOperationPrx.Protocol, facet: Swift.String? = nil) -> WrongOperationPrx {
    return WrongOperationPrxI.uncheckedCast(prx: prx, facet: facet) as WrongOperationPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `WrongOperationPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: WrongOperationPrx.Protocol) -> Swift.String {
    return WrongOperationTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `WrongOperationPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `WrongOperationPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `WrongOperationPrx?` - The extracted proxy
    func read(_ type: WrongOperationPrx.Protocol) throws -> WrongOperationPrx? {
        return try read() as WrongOperationPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `WrongOperationPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `WrongOperationPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: WrongOperationPrx.Protocol) throws -> WrongOperationPrx? {
        return try read(tag: tag) as WrongOperationPrxI?
    }
}

/// WrongOperationPrx overview.
///
/// WrongOperationPrx Methods:
///
///  - noSuchOperation: 
///
///  - noSuchOperationAsync: 
public extension WrongOperationPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func noSuchOperation(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "noSuchOperation",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func noSuchOperationAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "noSuchOperation",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `Empty` servants.
public struct EmptyDisp: Ice.Dispatcher {
    public let servant: Empty
    private static let defaultObject = Ice.ObjectI<EmptyTraits>()

    public init(_ servant: Empty) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "ice_id":
            (servant as? Ice.Object ?? EmptyDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? EmptyDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? EmptyDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? EmptyDisp.defaultObject)._iceD_ice_ping(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol Empty {}


/// Dispatcher for `Thrower` servants.
public struct ThrowerDisp: Ice.Dispatcher {
    public let servant: Thrower
    private static let defaultObject = Ice.ObjectI<ThrowerTraits>()

    public init(_ servant: Thrower) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "ice_id":
            (servant as? Ice.Object ?? ThrowerDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? ThrowerDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? ThrowerDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? ThrowerDisp.defaultObject)._iceD_ice_ping(request)
        case "shutdown":
            servant._iceD_shutdown(request)
        case "supportsAssertException":
            servant._iceD_supportsAssertException(request)
        case "supportsUndeclaredExceptions":
            servant._iceD_supportsUndeclaredExceptions(request)
        case "throwAasA":
            servant._iceD_throwAasA(request)
        case "throwAfterException":
            servant._iceD_throwAfterException(request)
        case "throwAfterResponse":
            servant._iceD_throwAfterResponse(request)
        case "throwAorDasAorD":
            servant._iceD_throwAorDasAorD(request)
        case "throwAssertException":
            servant._iceD_throwAssertException(request)
        case "throwBasA":
            servant._iceD_throwBasA(request)
        case "throwBasB":
            servant._iceD_throwBasB(request)
        case "throwCasA":
            servant._iceD_throwCasA(request)
        case "throwCasB":
            servant._iceD_throwCasB(request)
        case "throwCasC":
            servant._iceD_throwCasC(request)
        case "throwLocalException":
            servant._iceD_throwLocalException(request)
        case "throwLocalExceptionIdempotent":
            servant._iceD_throwLocalExceptionIdempotent(request)
        case "throwMarshalException":
            servant._iceD_throwMarshalException(request)
        case "throwMemoryLimitException":
            servant._iceD_throwMemoryLimitException(request)
        case "throwModA":
            servant._iceD_throwModA(request)
        case "throwNonIceException":
            servant._iceD_throwNonIceException(request)
        case "throwUndeclaredA":
            servant._iceD_throwUndeclaredA(request)
        case "throwUndeclaredB":
            servant._iceD_throwUndeclaredB(request)
        case "throwUndeclaredC":
            servant._iceD_throwUndeclaredC(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol Thrower {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Bool`
    func supportsUndeclaredExceptions(current: Ice.Current) throws -> Swift.Bool

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Bool`
    func supportsAssertException(current: Ice.Current) throws -> Swift.Bool

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwAasA(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwAorDasAorD(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwBasA(a: Swift.Int32, b: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter c: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwCasA(a: Swift.Int32, b: Swift.Int32, c: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwBasB(a: Swift.Int32, b: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter c: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwCasB(a: Swift.Int32, b: Swift.Int32, c: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter c: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwCasC(a: Swift.Int32, b: Swift.Int32, c: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter a2: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwModA(a: Swift.Int32, a2: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwUndeclaredA(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwUndeclaredB(a: Swift.Int32, b: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter b: `Swift.Int32`
    ///
    /// - parameter c: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwUndeclaredC(a: Swift.Int32, b: Swift.Int32, c: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwLocalException(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwNonIceException(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwAssertException(current: Ice.Current) throws

    ///
    /// - parameter seq: `Ice.ByteSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Ice.ByteSeq`
    func throwMemoryLimitException(seq: Ice.ByteSeq, current: Ice.Current) throws -> Ice.ByteSeq

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwLocalExceptionIdempotent(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwAfterResponse(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func throwAfterException(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: Swift.Int32, p: Swift.Int32)`:
    ///
    ///   - returnValue: `Swift.Int32`
    ///
    ///   - p: `Swift.Int32`
    func throwMarshalException(current: Ice.Current) throws -> (returnValue: Swift.Int32, p: Swift.Int32)
}


/// Dispatcher for `WrongOperation` servants.
public struct WrongOperationDisp: Ice.Dispatcher {
    public let servant: WrongOperation
    private static let defaultObject = Ice.ObjectI<WrongOperationTraits>()

    public init(_ servant: WrongOperation) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "ice_id":
            (servant as? Ice.Object ?? WrongOperationDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? WrongOperationDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? WrongOperationDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? WrongOperationDisp.defaultObject)._iceD_ice_ping(request)
        case "noSuchOperation":
            servant._iceD_noSuchOperation(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol WrongOperation {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func noSuchOperation(current: Ice.Current) throws
}

/// Empty overview.
extension Empty {}

/// Thrower overview.
///
/// Thrower Methods:
///
///  - shutdown: 
///
///  - supportsUndeclaredExceptions: 
///
///  - supportsAssertException: 
///
///  - throwAasA: 
///
///  - throwAorDasAorD: 
///
///  - throwBasA: 
///
///  - throwCasA: 
///
///  - throwBasB: 
///
///  - throwCasB: 
///
///  - throwCasC: 
///
///  - throwModA: 
///
///  - throwUndeclaredA: 
///
///  - throwUndeclaredB: 
///
///  - throwUndeclaredC: 
///
///  - throwLocalException: 
///
///  - throwNonIceException: 
///
///  - throwAssertException: 
///
///  - throwMemoryLimitException: 
///
///  - throwLocalExceptionIdempotent: 
///
///  - throwAfterResponse: 
///
///  - throwAfterException: 
///
///  - throwMarshalException: 
extension Thrower {
    public func _iceD_shutdown(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.shutdown(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_supportsUndeclaredExceptions(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            let iceP_returnValue = try self.supportsUndeclaredExceptions(current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_supportsAssertException(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            let iceP_returnValue = try self.supportsAssertException(current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwAasA(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_a: Swift.Int32 = try istr.read()

            try self.throwAasA(a: iceP_a, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwAorDasAorD(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_a: Swift.Int32 = try istr.read()

            try self.throwAorDasAorD(a: iceP_a, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwBasA(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_a: Swift.Int32 = try istr.read()
            let iceP_b: Swift.Int32 = try istr.read()

            try self.throwBasA(a: iceP_a, b: iceP_b, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwCasA(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_a: Swift.Int32 = try istr.read()
            let iceP_b: Swift.Int32 = try istr.read()
            let iceP_c: Swift.Int32 = try istr.read()

            try self.throwCasA(a: iceP_a, b: iceP_b, c: iceP_c, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwBasB(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_a: Swift.Int32 = try istr.read()
            let iceP_b: Swift.Int32 = try istr.read()

            try self.throwBasB(a: iceP_a, b: iceP_b, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwCasB(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_a: Swift.Int32 = try istr.read()
            let iceP_b: Swift.Int32 = try istr.read()
            let iceP_c: Swift.Int32 = try istr.read()

            try self.throwCasB(a: iceP_a, b: iceP_b, c: iceP_c, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwCasC(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_a: Swift.Int32 = try istr.read()
            let iceP_b: Swift.Int32 = try istr.read()
            let iceP_c: Swift.Int32 = try istr.read()

            try self.throwCasC(a: iceP_a, b: iceP_b, c: iceP_c, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwModA(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_a: Swift.Int32 = try istr.read()
            let iceP_a2: Swift.Int32 = try istr.read()

            try self.throwModA(a: iceP_a, a2: iceP_a2, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwUndeclaredA(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_a: Swift.Int32 = try istr.read()

            try self.throwUndeclaredA(a: iceP_a, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwUndeclaredB(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_a: Swift.Int32 = try istr.read()
            let iceP_b: Swift.Int32 = try istr.read()

            try self.throwUndeclaredB(a: iceP_a, b: iceP_b, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwUndeclaredC(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_a: Swift.Int32 = try istr.read()
            let iceP_b: Swift.Int32 = try istr.read()
            let iceP_c: Swift.Int32 = try istr.read()

            try self.throwUndeclaredC(a: iceP_a, b: iceP_b, c: iceP_c, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwLocalException(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.throwLocalException(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwNonIceException(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.throwNonIceException(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwAssertException(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.throwAssertException(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwMemoryLimitException(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_seq: Ice.ByteSeq = try istr.read()

            let iceP_returnValue = try self.throwMemoryLimitException(seq: iceP_seq, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwLocalExceptionIdempotent(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.throwLocalExceptionIdempotent(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwAfterResponse(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.throwAfterResponse(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwAfterException(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.throwAfterException(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_throwMarshalException(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            let (iceP_returnValue, iceP_p) = try self.throwMarshalException(current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_p)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}

/// WrongOperation overview.
///
/// WrongOperation Methods:
///
///  - noSuchOperation: 
extension WrongOperation {
    public func _iceD_noSuchOperation(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.noSuchOperation(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}
