//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// Traits for Slice interface `UnexpectedObjectExceptionTest`.
public struct UnexpectedObjectExceptionTestTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::UnexpectedObjectExceptionTest"]
    public static let staticId = "::Test::UnexpectedObjectExceptionTest"
}

/// :nodoc:
public class EOneMember_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return EOneMember.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_EOneMember() -> Ice.UserExceptionTypeResolver {
        return EOneMember_TypeResolver()
    }
}

open class EOneMember: Ice.UserException, @unchecked Sendable {
    public var e: Empty? = nil

    public required init() {}

    public init(e: Empty?) {
        self.e = e
    }

    /// - Returns: The Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::EOneMember" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: EOneMember.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.e)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.read(Empty.self) { self.e = $0 }
        try istr.endSlice()
    }

    open override func _usesClasses() -> Swift.Bool {
        return true
    }
}

/// :nodoc:
public class ETwoMembers_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return ETwoMembers.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_ETwoMembers() -> Ice.UserExceptionTypeResolver {
        return ETwoMembers_TypeResolver()
    }
}

open class ETwoMembers: Ice.UserException, @unchecked Sendable {
    public var e1: Empty? = nil
    public var e2: Empty? = nil

    public required init() {}

    public init(e1: Empty?, e2: Empty?) {
        self.e1 = e1
        self.e2 = e2
    }

    /// - Returns: The Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::ETwoMembers" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: ETwoMembers.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.e1)
        ostr.write(self.e2)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.read(Empty.self) { self.e1 = $0 }
        try istr.read(Empty.self) { self.e2 = $0 }
        try istr.endSlice()
    }

    open override func _usesClasses() -> Swift.Bool {
        return true
    }
}

public class SOneMember {
    public var e: Empty? = nil

    public init() {}

    public init(e: Empty?) {
        self.e = e
    }
}

/// An `Ice.InputStream` extension to read `SOneMember` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `SOneMember` structured value from the stream.
    ///
    /// - Returns: The structured value read from the stream.
    func read() throws -> SOneMember {
        let v = SOneMember()
        try self.read(Empty.self) { v.e = $0 }
        return v
    }

    /// Read an optional `SOneMember?` structured value from the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> SOneMember? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as SOneMember
    }
}

/// An `Ice.OutputStream` extension to write `SOneMember` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `SOneMember` structured value to the stream.
    ///
    /// - Parameter v: The value to write to the stream.
    func write(_ v: SOneMember) {
        self.write(v.e)
    }

    /// Write an optional `SOneMember?` structured value to the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    /// - Parameter value: The value to write to the stream.
    func write(tag: Swift.Int32, value: SOneMember?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

public class STwoMembers {
    public var e1: Empty? = nil
    public var e2: Empty? = nil

    public init() {}

    public init(e1: Empty?, e2: Empty?) {
        self.e1 = e1
        self.e2 = e2
    }
}

/// An `Ice.InputStream` extension to read `STwoMembers` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `STwoMembers` structured value from the stream.
    ///
    /// - Returns: The structured value read from the stream.
    func read() throws -> STwoMembers {
        let v = STwoMembers()
        try self.read(Empty.self) { v.e1 = $0 }
        try self.read(Empty.self) { v.e2 = $0 }
        return v
    }

    /// Read an optional `STwoMembers?` structured value from the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> STwoMembers? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as STwoMembers
    }
}

/// An `Ice.OutputStream` extension to write `STwoMembers` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `STwoMembers` structured value to the stream.
    ///
    /// - Parameter v: The value to write to the stream.
    func write(_ v: STwoMembers) {
        self.write(v.e1)
        self.write(v.e2)
    }

    /// Write an optional `STwoMembers?` structured value to the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    /// - Parameter value: The value to write to the stream.
    func write(tag: Swift.Int32, value: STwoMembers?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

public typealias DOneMember = [Swift.Int32: COneMember?]

/// Helper class to read and write `DOneMember` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct DOneMemberHelper {
    /// Read a `DOneMember` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> DOneMember {
        let sz = try Swift.Int(istr.readSize())
        var v = DOneMember()
        let e = Ice.DictEntryArray<Swift.Int32, COneMember?>(size: sz)
        for i in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            v[key] = nil as COneMember?
            Swift.withUnsafeMutablePointer(to: &v[key, default:nil]) {
                e.values[i] = Ice.DictEntry<Swift.Int32, COneMember?>(key: key, value: $0)
            }
            try istr.read(COneMember.self) { e.values[i].value.pointee = $0 }
        }
        for i in 0..<sz {
            Swift.withUnsafeMutablePointer(to: &v[e.values[i].key, default:nil]) {
                e.values[i].value = $0
            }
        }
        return v
    }

    /// Read an optional `DOneMember?` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> DOneMember? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Write a `DOneMember` dictionary to the stream.
    ///
    /// - Parameter ostr: The stream to write to.
    /// - Parameter value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: DOneMember) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Write an optional `DOneMember?` dictionary to the stream.
    ///
    /// - Parameters:
    ///   - ostr: The stream to write to.
    ///   - tag: The numeric tag associated with the value.
    ///   - value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: DOneMember?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias DTwoMembers = [Swift.Int32: CTwoMembers?]

/// Helper class to read and write `DTwoMembers` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct DTwoMembersHelper {
    /// Read a `DTwoMembers` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> DTwoMembers {
        let sz = try Swift.Int(istr.readSize())
        var v = DTwoMembers()
        let e = Ice.DictEntryArray<Swift.Int32, CTwoMembers?>(size: sz)
        for i in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            v[key] = nil as CTwoMembers?
            Swift.withUnsafeMutablePointer(to: &v[key, default:nil]) {
                e.values[i] = Ice.DictEntry<Swift.Int32, CTwoMembers?>(key: key, value: $0)
            }
            try istr.read(CTwoMembers.self) { e.values[i].value.pointee = $0 }
        }
        for i in 0..<sz {
            Swift.withUnsafeMutablePointer(to: &v[e.values[i].key, default:nil]) {
                e.values[i].value = $0
            }
        }
        return v
    }

    /// Read an optional `DTwoMembers?` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> DTwoMembers? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Write a `DTwoMembers` dictionary to the stream.
    ///
    /// - Parameter ostr: The stream to write to.
    /// - Parameter value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: DTwoMembers) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Write an optional `DTwoMembers?` dictionary to the stream.
    ///
    /// - Parameters:
    ///   - ostr: The stream to write to.
    ///   - tag: The numeric tag associated with the value.
    ///   - value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: DTwoMembers?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public protocol UnexpectedObjectExceptionTestPrx: Ice.ObjectPrx {}

private final class UnexpectedObjectExceptionTestPrxI: Ice.ObjectPrxI, UnexpectedObjectExceptionTestPrx {
    public override class func ice_staticId() -> Swift.String {
        return UnexpectedObjectExceptionTestTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: UnexpectedObjectExceptionTestPrx.Protocol) throws -> UnexpectedObjectExceptionTestPrx {
    try communicator.makeProxyImpl(proxyString) as UnexpectedObjectExceptionTestPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: UnexpectedObjectExceptionTestPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> UnexpectedObjectExceptionTestPrx? {
    return try await UnexpectedObjectExceptionTestPrxI.checkedCast(prx: prx, facet: facet, context: context) as UnexpectedObjectExceptionTestPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: UnexpectedObjectExceptionTestPrx.Protocol, facet: Swift.String? = nil) -> UnexpectedObjectExceptionTestPrx {
    return UnexpectedObjectExceptionTestPrxI.uncheckedCast(prx: prx, facet: facet) as UnexpectedObjectExceptionTestPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: UnexpectedObjectExceptionTestPrx.Protocol) -> Swift.String {
    return UnexpectedObjectExceptionTestTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `UnexpectedObjectExceptionTestPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: UnexpectedObjectExceptionTestPrx.Protocol) throws -> UnexpectedObjectExceptionTestPrx? {
        return try read() as UnexpectedObjectExceptionTestPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: UnexpectedObjectExceptionTestPrx.Protocol) throws -> UnexpectedObjectExceptionTestPrx? {
        return try read(tag: tag) as UnexpectedObjectExceptionTestPrxI?
    }
}

public extension UnexpectedObjectExceptionTestPrx {
    func op(context: Ice.Context? = nil) async throws -> Empty? {
        return try await _impl._invoke(operation: "op",
                                       mode: .Normal,
                                       read: { istr in
                                           var iceP_returnValue: Empty?
                                           try istr.read(Empty.self) { iceP_returnValue = $0 }
                                           try istr.readPendingValues()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}

/// :nodoc:
public class Empty_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return Empty.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Empty() -> Ice.ValueTypeResolver {
        return Empty_TypeResolver()
    }
}

open class Empty: Ice.Value {
    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::Empty" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: Empty.ice_staticId(), compactId: -1, last: true)
        ostr.endSlice()
    }
}

/// :nodoc:
public class AlsoEmpty_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return AlsoEmpty.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_AlsoEmpty() -> Ice.ValueTypeResolver {
        return AlsoEmpty_TypeResolver()
    }
}

open class AlsoEmpty: Ice.Value {
    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::AlsoEmpty" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: AlsoEmpty.ice_staticId(), compactId: -1, last: true)
        ostr.endSlice()
    }
}

/// :nodoc:
public class COneMember_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return COneMember.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_COneMember() -> Ice.ValueTypeResolver {
        return COneMember_TypeResolver()
    }
}

open class COneMember: Ice.Value {
    public var e: Empty? = nil

    public required init() {}

    public init(e: Empty?) {
        self.e = e
    }

    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::COneMember" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.read(Empty.self) { self.e = $0 }
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: COneMember.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.e)
        ostr.endSlice()
    }
}

/// :nodoc:
public class CTwoMembers_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return CTwoMembers.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_CTwoMembers() -> Ice.ValueTypeResolver {
        return CTwoMembers_TypeResolver()
    }
}

open class CTwoMembers: Ice.Value {
    public var e1: Empty? = nil
    public var e2: Empty? = nil

    public required init() {}

    public init(e1: Empty?, e2: Empty?) {
        self.e1 = e1
        self.e2 = e2
    }

    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::CTwoMembers" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.read(Empty.self) { self.e1 = $0 }
        try istr.read(Empty.self) { self.e2 = $0 }
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CTwoMembers.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.e1)
        ostr.write(self.e2)
        ostr.endSlice()
    }
}


/// Dispatcher for `UnexpectedObjectExceptionTest` servants.
public struct UnexpectedObjectExceptionTestDisp: Ice.Dispatcher {
    public let servant: UnexpectedObjectExceptionTest
    private static let defaultObject = Ice.ObjectI<UnexpectedObjectExceptionTestTraits>()

    public init(_ servant: UnexpectedObjectExceptionTest) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? UnexpectedObjectExceptionTestDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? UnexpectedObjectExceptionTestDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? UnexpectedObjectExceptionTestDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? UnexpectedObjectExceptionTestDisp.defaultObject)._iceD_ice_ping(request)
        case "op":
            try await servant._iceD_op(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol UnexpectedObjectExceptionTest {
    func op(current: Ice.Current) async throws -> Empty?
}

extension UnexpectedObjectExceptionTest {
    public func _iceD_op(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.op(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }
}
