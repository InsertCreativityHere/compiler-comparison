//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import Test1
import Test2
import Test3

/// Traits for Slice interface`Initial`.
public struct InitialTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Initial"]
    public static let staticId = "::Test::Initial"
}

public protocol InitialPrx: Ice.ObjectPrx {}

private final class InitialPrxI: Ice.ObjectPrxI, InitialPrx {
    public override class func ice_staticId() -> Swift.String {
        return InitialTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: InitialPrx.Protocol) throws -> InitialPrx {
    try communicator.makeProxyImpl(proxyString) as InitialPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `InitialPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `InitialPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: InitialPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> InitialPrx? {
    return try await InitialPrxI.checkedCast(prx: prx, facet: facet, context: context) as InitialPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `InitialPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `InitialPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: InitialPrx.Protocol, facet: Swift.String? = nil) -> InitialPrx {
    return InitialPrxI.uncheckedCast(prx: prx, facet: facet) as InitialPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `InitialPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: InitialPrx.Protocol) -> Swift.String {
    return InitialTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `InitialPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `InitialPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `InitialPrx?` - The extracted proxy
    func read(_ type: InitialPrx.Protocol) throws -> InitialPrx? {
        return try read() as InitialPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `InitialPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `InitialPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: InitialPrx.Protocol) throws -> InitialPrx? {
        return try read(tag: tag) as InitialPrxI?
    }
}

public extension InitialPrx {
    func getTest1C2AsC1(context: Ice.Context? = nil) async throws -> Test1.C1? {
        return try await _impl._invoke(operation: "getTest1C2AsC1",
                                       mode: .Normal,
                                       read: { istr in
                                           var iceP_returnValue: Test1.C1?
                                           try istr.read(Test1.C1.self) { iceP_returnValue = $0 }
                                           try istr.readPendingValues()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func getTest1C2AsC2(context: Ice.Context? = nil) async throws -> Test1.C2? {
        return try await _impl._invoke(operation: "getTest1C2AsC2",
                                       mode: .Normal,
                                       read: { istr in
                                           var iceP_returnValue: Test1.C2?
                                           try istr.read(Test1.C2.self) { iceP_returnValue = $0 }
                                           try istr.readPendingValues()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func throwTest1E2AsE1(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "throwTest1E2AsE1",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Test1.E1 {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func throwTest1E2AsE2(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "throwTest1E2AsE2",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Test1.E2 {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func throwTest1Def(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "throwTest1Def",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Test1.def {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func getTest2C2AsC1(context: Ice.Context? = nil) async throws -> Test2.C1? {
        return try await _impl._invoke(operation: "getTest2C2AsC1",
                                       mode: .Normal,
                                       read: { istr in
                                           var iceP_returnValue: Test2.C1?
                                           try istr.read(Test2.C1.self) { iceP_returnValue = $0 }
                                           try istr.readPendingValues()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func getTest2C2AsC2(context: Ice.Context? = nil) async throws -> Test2.C2? {
        return try await _impl._invoke(operation: "getTest2C2AsC2",
                                       mode: .Normal,
                                       read: { istr in
                                           var iceP_returnValue: Test2.C2?
                                           try istr.read(Test2.C2.self) { iceP_returnValue = $0 }
                                           try istr.readPendingValues()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func throwTest2E2AsE1(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "throwTest2E2AsE1",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Test2.E1 {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func throwTest2E2AsE2(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "throwTest2E2AsE2",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Test2.E2 {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func getTest3C2AsC1(context: Ice.Context? = nil) async throws -> Test3.C1? {
        return try await _impl._invoke(operation: "getTest3C2AsC1",
                                       mode: .Normal,
                                       read: { istr in
                                           var iceP_returnValue: Test3.C1?
                                           try istr.read(Test3.C1.self) { iceP_returnValue = $0 }
                                           try istr.readPendingValues()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func getTest3C2AsC2(context: Ice.Context? = nil) async throws -> Test3.C2? {
        return try await _impl._invoke(operation: "getTest3C2AsC2",
                                       mode: .Normal,
                                       read: { istr in
                                           var iceP_returnValue: Test3.C2?
                                           try istr.read(Test3.C2.self) { iceP_returnValue = $0 }
                                           try istr.readPendingValues()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func throwTest3E2AsE1(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "throwTest3E2AsE1",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Test3.E1 {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func throwTest3E2AsE2(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "throwTest3E2AsE2",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Test3.E2 {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func shutdown(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "shutdown",
                                       mode: .Normal,
                                       context: context)
    }
}


/// Dispatcher for `Initial` servants.
public struct InitialDisp: Ice.Dispatcher {
    public let servant: Initial
    private static let defaultObject = Ice.ObjectI<InitialTraits>()

    public init(_ servant: Initial) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "getTest1C2AsC1":
            try await servant._iceD_getTest1C2AsC1(request)
        case "getTest1C2AsC2":
            try await servant._iceD_getTest1C2AsC2(request)
        case "getTest2C2AsC1":
            try await servant._iceD_getTest2C2AsC1(request)
        case "getTest2C2AsC2":
            try await servant._iceD_getTest2C2AsC2(request)
        case "getTest3C2AsC1":
            try await servant._iceD_getTest3C2AsC1(request)
        case "getTest3C2AsC2":
            try await servant._iceD_getTest3C2AsC2(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? InitialDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? InitialDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? InitialDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? InitialDisp.defaultObject)._iceD_ice_ping(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        case "throwTest1Def":
            try await servant._iceD_throwTest1Def(request)
        case "throwTest1E2AsE1":
            try await servant._iceD_throwTest1E2AsE1(request)
        case "throwTest1E2AsE2":
            try await servant._iceD_throwTest1E2AsE2(request)
        case "throwTest2E2AsE1":
            try await servant._iceD_throwTest2E2AsE1(request)
        case "throwTest2E2AsE2":
            try await servant._iceD_throwTest2E2AsE2(request)
        case "throwTest3E2AsE1":
            try await servant._iceD_throwTest3E2AsE1(request)
        case "throwTest3E2AsE2":
            try await servant._iceD_throwTest3E2AsE2(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol Initial {
    func getTest1C2AsC1(current: Ice.Current) async throws -> Test1.C1?

    func getTest1C2AsC2(current: Ice.Current) async throws -> Test1.C2?

    func throwTest1E2AsE1(current: Ice.Current) async throws

    func throwTest1E2AsE2(current: Ice.Current) async throws

    func throwTest1Def(current: Ice.Current) async throws

    func getTest2C2AsC1(current: Ice.Current) async throws -> Test2.C1?

    func getTest2C2AsC2(current: Ice.Current) async throws -> Test2.C2?

    func throwTest2E2AsE1(current: Ice.Current) async throws

    func throwTest2E2AsE2(current: Ice.Current) async throws

    func getTest3C2AsC1(current: Ice.Current) async throws -> Test3.C1?

    func getTest3C2AsC2(current: Ice.Current) async throws -> Test3.C2?

    func throwTest3E2AsE1(current: Ice.Current) async throws

    func throwTest3E2AsE2(current: Ice.Current) async throws

    func shutdown(current: Ice.Current) async throws
}

extension Initial {
    public func _iceD_getTest1C2AsC1(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getTest1C2AsC1(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    public func _iceD_getTest1C2AsC2(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getTest1C2AsC2(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    public func _iceD_throwTest1E2AsE1(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.throwTest1E2AsE1(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_throwTest1E2AsE2(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.throwTest1E2AsE2(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_throwTest1Def(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.throwTest1Def(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_getTest2C2AsC1(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getTest2C2AsC1(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    public func _iceD_getTest2C2AsC2(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getTest2C2AsC2(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    public func _iceD_throwTest2E2AsE1(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.throwTest2E2AsE1(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_throwTest2E2AsE2(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.throwTest2E2AsE2(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_getTest3C2AsC1(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getTest3C2AsC1(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    public func _iceD_getTest3C2AsC2(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getTest3C2AsC2(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    public func _iceD_throwTest3E2AsE1(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.throwTest3E2AsE1(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_throwTest3E2AsE2(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.throwTest3E2AsE2(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
