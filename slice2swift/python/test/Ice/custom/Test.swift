//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// By default, sequence is received as a string.
public typealias ByteString = Foundation.Data

public typealias ByteList = Foundation.Data

/// By default, a sequence is received as a list.
public typealias StringList = [Swift.String]

public typealias StringTuple = [Swift.String]

public typealias BoolSeq1 = [Swift.Bool]

public typealias BoolSeq2 = [Swift.Bool]

public typealias ByteSeq1 = Foundation.Data

public typealias ByteSeq2 = Foundation.Data

public typealias ShortSeq1 = [Swift.Int16]

public typealias ShortSeq2 = [Swift.Int16]

public typealias IntSeq1 = [Swift.Int32]

public typealias IntSeq2 = [Swift.Int32]

public typealias LongSeq1 = [Swift.Int64]

public typealias LongSeq2 = [Swift.Int64]

public typealias FloatSeq1 = [Swift.Float]

public typealias FloatSeq2 = [Swift.Float]

public typealias DoubleSeq1 = [Swift.Double]

public typealias DoubleSeq2 = [Swift.Double]

public struct S {
    public var b1: ByteString = ByteString()
    public var b2: ByteString = ByteString()
    public var b3: ByteList = ByteList()
    public var b4: ByteList = ByteList()
    public var s1: StringList = StringList()
    public var s2: StringList = StringList()
    public var s3: StringTuple = StringTuple()
    public var s4: StringTuple = StringTuple()

    public init() {}

    public init(b1: ByteString, b2: ByteString, b3: ByteList, b4: ByteList, s1: StringList, s2: StringList, s3: StringTuple, s4: StringTuple) {
        self.b1 = b1
        self.b2 = b2
        self.b3 = b3
        self.b4 = b4
        self.s1 = s1
        self.s2 = s2
        self.s3 = s3
        self.s4 = s4
    }
}

/// An `Ice.InputStream` extension to read `S` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `S` structured value from the stream.
    ///
    /// - returns: `S` - The structured value read from the stream.
    func read() throws -> S {
        var v = S()
        v.b1 = try self.read()
        v.b2 = try self.read()
        v.b3 = try self.read()
        v.b4 = try self.read()
        v.s1 = try self.read()
        v.s2 = try self.read()
        v.s3 = try self.read()
        v.s4 = try self.read()
        return v
    }

    /// Read an optional `S?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `S?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> S? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as S
    }
}

/// An `Ice.OutputStream` extension to write `S` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `S` structured value to the stream.
    ///
    /// - parameter _: `S` - The value to write to the stream.
    func write(_ v: S) {
        self.write(v.b1)
        self.write(v.b2)
        self.write(v.b3)
        self.write(v.b4)
        self.write(v.s1)
        self.write(v.s2)
        self.write(v.s3)
        self.write(v.s4)
    }

    /// Write an optional `S?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `S?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: S?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// Traits for Slice interface`Custom`.
public struct CustomTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Custom"]
    public static let staticId = "::Test::Custom"
}

/// CustomPrx overview.
///
/// CustomPrx Methods:
///
///  - opByteString1: 
///
///  - opByteString1Async: 
///
///  - opByteString2: 
///
///  - opByteString2Async: 
///
///  - opByteList1: 
///
///  - opByteList1Async: 
///
///  - opByteList2: 
///
///  - opByteList2Async: 
///
///  - opStringList1: 
///
///  - opStringList1Async: 
///
///  - opStringList2: 
///
///  - opStringList2Async: 
///
///  - opStringTuple1: 
///
///  - opStringTuple1Async: 
///
///  - opStringTuple2: 
///
///  - opStringTuple2Async: 
///
///  - sendS: 
///
///  - sendSAsync: 
///
///  - sendC: 
///
///  - sendCAsync: 
///
///  - opBoolSeq: 
///
///  - opBoolSeqAsync: 
///
///  - opByteSeq: 
///
///  - opByteSeqAsync: 
///
///  - opShortSeq: 
///
///  - opShortSeqAsync: 
///
///  - opIntSeq: 
///
///  - opIntSeqAsync: 
///
///  - opLongSeq: 
///
///  - opLongSeqAsync: 
///
///  - opFloatSeq: 
///
///  - opFloatSeqAsync: 
///
///  - opDoubleSeq: 
///
///  - opDoubleSeqAsync: 
///
///  - opBogusArrayNotExistsFactory: 
///
///  - opBogusArrayNotExistsFactoryAsync: 
///
///  - opBogusArrayThrowFactory: 
///
///  - opBogusArrayThrowFactoryAsync: 
///
///  - opBogusArrayType: 
///
///  - opBogusArrayTypeAsync: 
///
///  - opBogusArrayNoneFactory: 
///
///  - opBogusArrayNoneFactoryAsync: 
///
///  - opBogusArraySignatureFactory: 
///
///  - opBogusArraySignatureFactoryAsync: 
///
///  - opBogusArrayNoCallableFactory: 
///
///  - opBogusArrayNoCallableFactoryAsync: 
///
///  - opD: 
///
///  - opDAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol CustomPrx: Ice.ObjectPrx {}

private final class CustomPrxI: Ice.ObjectPrxI, CustomPrx {
    public override class func ice_staticId() -> Swift.String {
        return CustomTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: CustomPrx.Protocol) throws -> CustomPrx {
    try communicator.makeProxyImpl(proxyString) as CustomPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `CustomPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `CustomPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: CustomPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> CustomPrx? {
    return try CustomPrxI.checkedCast(prx: prx, facet: facet, context: context) as CustomPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `CustomPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `CustomPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: CustomPrx.Protocol, facet: Swift.String? = nil) -> CustomPrx {
    return CustomPrxI.uncheckedCast(prx: prx, facet: facet) as CustomPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `CustomPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: CustomPrx.Protocol) -> Swift.String {
    return CustomTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `CustomPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `CustomPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CustomPrx?` - The extracted proxy
    func read(_ type: CustomPrx.Protocol) throws -> CustomPrx? {
        return try read() as CustomPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `CustomPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CustomPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: CustomPrx.Protocol) throws -> CustomPrx? {
        return try read(tag: tag) as CustomPrxI?
    }
}

/// CustomPrx overview.
///
/// CustomPrx Methods:
///
///  - opByteString1: 
///
///  - opByteString1Async: 
///
///  - opByteString2: 
///
///  - opByteString2Async: 
///
///  - opByteList1: 
///
///  - opByteList1Async: 
///
///  - opByteList2: 
///
///  - opByteList2Async: 
///
///  - opStringList1: 
///
///  - opStringList1Async: 
///
///  - opStringList2: 
///
///  - opStringList2Async: 
///
///  - opStringTuple1: 
///
///  - opStringTuple1Async: 
///
///  - opStringTuple2: 
///
///  - opStringTuple2Async: 
///
///  - sendS: 
///
///  - sendSAsync: 
///
///  - sendC: 
///
///  - sendCAsync: 
///
///  - opBoolSeq: 
///
///  - opBoolSeqAsync: 
///
///  - opByteSeq: 
///
///  - opByteSeqAsync: 
///
///  - opShortSeq: 
///
///  - opShortSeqAsync: 
///
///  - opIntSeq: 
///
///  - opIntSeqAsync: 
///
///  - opLongSeq: 
///
///  - opLongSeqAsync: 
///
///  - opFloatSeq: 
///
///  - opFloatSeqAsync: 
///
///  - opDoubleSeq: 
///
///  - opDoubleSeqAsync: 
///
///  - opBogusArrayNotExistsFactory: 
///
///  - opBogusArrayNotExistsFactoryAsync: 
///
///  - opBogusArrayThrowFactory: 
///
///  - opBogusArrayThrowFactoryAsync: 
///
///  - opBogusArrayType: 
///
///  - opBogusArrayTypeAsync: 
///
///  - opBogusArrayNoneFactory: 
///
///  - opBogusArrayNoneFactoryAsync: 
///
///  - opBogusArraySignatureFactory: 
///
///  - opBogusArraySignatureFactoryAsync: 
///
///  - opBogusArrayNoCallableFactory: 
///
///  - opBogusArrayNoCallableFactoryAsync: 
///
///  - opD: 
///
///  - opDAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension CustomPrx {
    ///
    /// - parameter _: `ByteString`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteString, b2: ByteString)`:
    ///
    ///   - returnValue: `ByteString`
    ///
    ///   - b2: `ByteString`
    func opByteString1(_ iceP_b1: ByteString, context: Ice.Context? = nil) throws -> (returnValue: ByteString, b2: ByteString) {
        return try _impl._invoke(operation: "opByteString1",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_b1)
                                 },
                                 read: { istr in
                                     let iceP_b2: ByteString = try istr.read()
                                     let iceP_returnValue: ByteString = try istr.read()
                                     return (iceP_returnValue, iceP_b2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteString`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteString, b2: ByteString)` - The result of the operation
    func opByteString1Async(_ iceP_b1: ByteString, context: Ice.Context? = nil) async throws -> (returnValue: ByteString, b2: ByteString) {
        return try await _impl._invokeAsync(operation: "opByteString1",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_b1)
                                            },
                                            read: { istr in
                                                let iceP_b2: ByteString = try istr.read()
                                                let iceP_returnValue: ByteString = try istr.read()
                                                return (iceP_returnValue, iceP_b2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ByteString`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteString, b2: ByteString)`:
    ///
    ///   - returnValue: `ByteString`
    ///
    ///   - b2: `ByteString`
    func opByteString2(_ iceP_b1: ByteString, context: Ice.Context? = nil) throws -> (returnValue: ByteString, b2: ByteString) {
        return try _impl._invoke(operation: "opByteString2",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_b1)
                                 },
                                 read: { istr in
                                     let iceP_b2: ByteString = try istr.read()
                                     let iceP_returnValue: ByteString = try istr.read()
                                     return (iceP_returnValue, iceP_b2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteString`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteString, b2: ByteString)` - The result of the operation
    func opByteString2Async(_ iceP_b1: ByteString, context: Ice.Context? = nil) async throws -> (returnValue: ByteString, b2: ByteString) {
        return try await _impl._invokeAsync(operation: "opByteString2",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_b1)
                                            },
                                            read: { istr in
                                                let iceP_b2: ByteString = try istr.read()
                                                let iceP_returnValue: ByteString = try istr.read()
                                                return (iceP_returnValue, iceP_b2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ByteList`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteList, b2: ByteList)`:
    ///
    ///   - returnValue: `ByteList`
    ///
    ///   - b2: `ByteList`
    func opByteList1(_ iceP_b1: ByteList, context: Ice.Context? = nil) throws -> (returnValue: ByteList, b2: ByteList) {
        return try _impl._invoke(operation: "opByteList1",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_b1)
                                 },
                                 read: { istr in
                                     let iceP_b2: ByteList = try istr.read()
                                     let iceP_returnValue: ByteList = try istr.read()
                                     return (iceP_returnValue, iceP_b2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteList`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteList, b2: ByteList)` - The result of the operation
    func opByteList1Async(_ iceP_b1: ByteList, context: Ice.Context? = nil) async throws -> (returnValue: ByteList, b2: ByteList) {
        return try await _impl._invokeAsync(operation: "opByteList1",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_b1)
                                            },
                                            read: { istr in
                                                let iceP_b2: ByteList = try istr.read()
                                                let iceP_returnValue: ByteList = try istr.read()
                                                return (iceP_returnValue, iceP_b2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ByteList`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteList, b2: ByteList)`:
    ///
    ///   - returnValue: `ByteList`
    ///
    ///   - b2: `ByteList`
    func opByteList2(_ iceP_b1: ByteList, context: Ice.Context? = nil) throws -> (returnValue: ByteList, b2: ByteList) {
        return try _impl._invoke(operation: "opByteList2",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_b1)
                                 },
                                 read: { istr in
                                     let iceP_b2: ByteList = try istr.read()
                                     let iceP_returnValue: ByteList = try istr.read()
                                     return (iceP_returnValue, iceP_b2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteList`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteList, b2: ByteList)` - The result of the operation
    func opByteList2Async(_ iceP_b1: ByteList, context: Ice.Context? = nil) async throws -> (returnValue: ByteList, b2: ByteList) {
        return try await _impl._invokeAsync(operation: "opByteList2",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_b1)
                                            },
                                            read: { istr in
                                                let iceP_b2: ByteList = try istr.read()
                                                let iceP_returnValue: ByteList = try istr.read()
                                                return (iceP_returnValue, iceP_b2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `StringList`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringList, s2: StringList)`:
    ///
    ///   - returnValue: `StringList`
    ///
    ///   - s2: `StringList`
    func opStringList1(_ iceP_s1: StringList, context: Ice.Context? = nil) throws -> (returnValue: StringList, s2: StringList) {
        return try _impl._invoke(operation: "opStringList1",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_s1)
                                 },
                                 read: { istr in
                                     let iceP_s2: StringList = try istr.read()
                                     let iceP_returnValue: StringList = try istr.read()
                                     return (iceP_returnValue, iceP_s2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringList`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringList, s2: StringList)` - The result of the operation
    func opStringList1Async(_ iceP_s1: StringList, context: Ice.Context? = nil) async throws -> (returnValue: StringList, s2: StringList) {
        return try await _impl._invokeAsync(operation: "opStringList1",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_s1)
                                            },
                                            read: { istr in
                                                let iceP_s2: StringList = try istr.read()
                                                let iceP_returnValue: StringList = try istr.read()
                                                return (iceP_returnValue, iceP_s2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `StringList`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringList, s2: StringList)`:
    ///
    ///   - returnValue: `StringList`
    ///
    ///   - s2: `StringList`
    func opStringList2(_ iceP_s1: StringList, context: Ice.Context? = nil) throws -> (returnValue: StringList, s2: StringList) {
        return try _impl._invoke(operation: "opStringList2",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_s1)
                                 },
                                 read: { istr in
                                     let iceP_s2: StringList = try istr.read()
                                     let iceP_returnValue: StringList = try istr.read()
                                     return (iceP_returnValue, iceP_s2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringList`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringList, s2: StringList)` - The result of the operation
    func opStringList2Async(_ iceP_s1: StringList, context: Ice.Context? = nil) async throws -> (returnValue: StringList, s2: StringList) {
        return try await _impl._invokeAsync(operation: "opStringList2",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_s1)
                                            },
                                            read: { istr in
                                                let iceP_s2: StringList = try istr.read()
                                                let iceP_returnValue: StringList = try istr.read()
                                                return (iceP_returnValue, iceP_s2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `StringTuple`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringTuple, s2: StringTuple)`:
    ///
    ///   - returnValue: `StringTuple`
    ///
    ///   - s2: `StringTuple`
    func opStringTuple1(_ iceP_s1: StringTuple, context: Ice.Context? = nil) throws -> (returnValue: StringTuple, s2: StringTuple) {
        return try _impl._invoke(operation: "opStringTuple1",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_s1)
                                 },
                                 read: { istr in
                                     let iceP_s2: StringTuple = try istr.read()
                                     let iceP_returnValue: StringTuple = try istr.read()
                                     return (iceP_returnValue, iceP_s2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringTuple`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringTuple, s2: StringTuple)` - The result of the operation
    func opStringTuple1Async(_ iceP_s1: StringTuple, context: Ice.Context? = nil) async throws -> (returnValue: StringTuple, s2: StringTuple) {
        return try await _impl._invokeAsync(operation: "opStringTuple1",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_s1)
                                            },
                                            read: { istr in
                                                let iceP_s2: StringTuple = try istr.read()
                                                let iceP_returnValue: StringTuple = try istr.read()
                                                return (iceP_returnValue, iceP_s2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `StringTuple`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringTuple, s2: StringTuple)`:
    ///
    ///   - returnValue: `StringTuple`
    ///
    ///   - s2: `StringTuple`
    func opStringTuple2(_ iceP_s1: StringTuple, context: Ice.Context? = nil) throws -> (returnValue: StringTuple, s2: StringTuple) {
        return try _impl._invoke(operation: "opStringTuple2",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_s1)
                                 },
                                 read: { istr in
                                     let iceP_s2: StringTuple = try istr.read()
                                     let iceP_returnValue: StringTuple = try istr.read()
                                     return (iceP_returnValue, iceP_s2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringTuple`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringTuple, s2: StringTuple)` - The result of the operation
    func opStringTuple2Async(_ iceP_s1: StringTuple, context: Ice.Context? = nil) async throws -> (returnValue: StringTuple, s2: StringTuple) {
        return try await _impl._invokeAsync(operation: "opStringTuple2",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_s1)
                                            },
                                            read: { istr in
                                                let iceP_s2: StringTuple = try istr.read()
                                                let iceP_returnValue: StringTuple = try istr.read()
                                                return (iceP_returnValue, iceP_s2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `S`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func sendS(_ iceP_val: S, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "sendS",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_val)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `S`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `` - The result of the operation
    func sendSAsync(_ iceP_val: S, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "sendS",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_val)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `C?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func sendC(_ iceP_val: C?, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "sendC",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_val)
                              ostr.writePendingValues()
                          },
                          context: context)
    }

    ///
    /// - parameter _: `C?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `` - The result of the operation
    func sendCAsync(_ iceP_val: C?, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "sendC",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_val)
                                                ostr.writePendingValues()
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `BoolSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: BoolSeq1, v2: BoolSeq2)`:
    ///
    ///   - returnValue: `BoolSeq1`
    ///
    ///   - v2: `BoolSeq2`
    func opBoolSeq(_ iceP_v1: BoolSeq1, context: Ice.Context? = nil) throws -> (returnValue: BoolSeq1, v2: BoolSeq2) {
        return try _impl._invoke(operation: "opBoolSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_v1)
                                 },
                                 read: { istr in
                                     let iceP_v2: BoolSeq2 = try istr.read()
                                     let iceP_returnValue: BoolSeq1 = try istr.read()
                                     return (iceP_returnValue, iceP_v2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `BoolSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: BoolSeq1, v2: BoolSeq2)` - The result of the operation
    func opBoolSeqAsync(_ iceP_v1: BoolSeq1, context: Ice.Context? = nil) async throws -> (returnValue: BoolSeq1, v2: BoolSeq2) {
        return try await _impl._invokeAsync(operation: "opBoolSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_v1)
                                            },
                                            read: { istr in
                                                let iceP_v2: BoolSeq2 = try istr.read()
                                                let iceP_returnValue: BoolSeq1 = try istr.read()
                                                return (iceP_returnValue, iceP_v2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ByteSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteSeq1, v2: ByteSeq2)`:
    ///
    ///   - returnValue: `ByteSeq1`
    ///
    ///   - v2: `ByteSeq2`
    func opByteSeq(_ iceP_v1: ByteSeq1, context: Ice.Context? = nil) throws -> (returnValue: ByteSeq1, v2: ByteSeq2) {
        return try _impl._invoke(operation: "opByteSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_v1)
                                 },
                                 read: { istr in
                                     let iceP_v2: ByteSeq2 = try istr.read()
                                     let iceP_returnValue: ByteSeq1 = try istr.read()
                                     return (iceP_returnValue, iceP_v2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteSeq1, v2: ByteSeq2)` - The result of the operation
    func opByteSeqAsync(_ iceP_v1: ByteSeq1, context: Ice.Context? = nil) async throws -> (returnValue: ByteSeq1, v2: ByteSeq2) {
        return try await _impl._invokeAsync(operation: "opByteSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_v1)
                                            },
                                            read: { istr in
                                                let iceP_v2: ByteSeq2 = try istr.read()
                                                let iceP_returnValue: ByteSeq1 = try istr.read()
                                                return (iceP_returnValue, iceP_v2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ShortSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortSeq1, v2: ShortSeq2)`:
    ///
    ///   - returnValue: `ShortSeq1`
    ///
    ///   - v2: `ShortSeq2`
    func opShortSeq(_ iceP_v1: ShortSeq1, context: Ice.Context? = nil) throws -> (returnValue: ShortSeq1, v2: ShortSeq2) {
        return try _impl._invoke(operation: "opShortSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_v1)
                                 },
                                 read: { istr in
                                     let iceP_v2: ShortSeq2 = try istr.read()
                                     let iceP_returnValue: ShortSeq1 = try istr.read()
                                     return (iceP_returnValue, iceP_v2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortSeq1, v2: ShortSeq2)` - The result of the operation
    func opShortSeqAsync(_ iceP_v1: ShortSeq1, context: Ice.Context? = nil) async throws -> (returnValue: ShortSeq1, v2: ShortSeq2) {
        return try await _impl._invokeAsync(operation: "opShortSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_v1)
                                            },
                                            read: { istr in
                                                let iceP_v2: ShortSeq2 = try istr.read()
                                                let iceP_returnValue: ShortSeq1 = try istr.read()
                                                return (iceP_returnValue, iceP_v2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `IntSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntSeq1, v2: IntSeq2)`:
    ///
    ///   - returnValue: `IntSeq1`
    ///
    ///   - v2: `IntSeq2`
    func opIntSeq(_ iceP_v1: IntSeq1, context: Ice.Context? = nil) throws -> (returnValue: IntSeq1, v2: IntSeq2) {
        return try _impl._invoke(operation: "opIntSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_v1)
                                 },
                                 read: { istr in
                                     let iceP_v2: IntSeq2 = try istr.read()
                                     let iceP_returnValue: IntSeq1 = try istr.read()
                                     return (iceP_returnValue, iceP_v2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntSeq1, v2: IntSeq2)` - The result of the operation
    func opIntSeqAsync(_ iceP_v1: IntSeq1, context: Ice.Context? = nil) async throws -> (returnValue: IntSeq1, v2: IntSeq2) {
        return try await _impl._invokeAsync(operation: "opIntSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_v1)
                                            },
                                            read: { istr in
                                                let iceP_v2: IntSeq2 = try istr.read()
                                                let iceP_returnValue: IntSeq1 = try istr.read()
                                                return (iceP_returnValue, iceP_v2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `LongSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongSeq1, v2: LongSeq2)`:
    ///
    ///   - returnValue: `LongSeq1`
    ///
    ///   - v2: `LongSeq2`
    func opLongSeq(_ iceP_v1: LongSeq1, context: Ice.Context? = nil) throws -> (returnValue: LongSeq1, v2: LongSeq2) {
        return try _impl._invoke(operation: "opLongSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_v1)
                                 },
                                 read: { istr in
                                     let iceP_v2: LongSeq2 = try istr.read()
                                     let iceP_returnValue: LongSeq1 = try istr.read()
                                     return (iceP_returnValue, iceP_v2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LongSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongSeq1, v2: LongSeq2)` - The result of the operation
    func opLongSeqAsync(_ iceP_v1: LongSeq1, context: Ice.Context? = nil) async throws -> (returnValue: LongSeq1, v2: LongSeq2) {
        return try await _impl._invokeAsync(operation: "opLongSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_v1)
                                            },
                                            read: { istr in
                                                let iceP_v2: LongSeq2 = try istr.read()
                                                let iceP_returnValue: LongSeq1 = try istr.read()
                                                return (iceP_returnValue, iceP_v2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `FloatSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatSeq1, v2: FloatSeq2)`:
    ///
    ///   - returnValue: `FloatSeq1`
    ///
    ///   - v2: `FloatSeq2`
    func opFloatSeq(_ iceP_v1: FloatSeq1, context: Ice.Context? = nil) throws -> (returnValue: FloatSeq1, v2: FloatSeq2) {
        return try _impl._invoke(operation: "opFloatSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_v1)
                                 },
                                 read: { istr in
                                     let iceP_v2: FloatSeq2 = try istr.read()
                                     let iceP_returnValue: FloatSeq1 = try istr.read()
                                     return (iceP_returnValue, iceP_v2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `FloatSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatSeq1, v2: FloatSeq2)` - The result of the operation
    func opFloatSeqAsync(_ iceP_v1: FloatSeq1, context: Ice.Context? = nil) async throws -> (returnValue: FloatSeq1, v2: FloatSeq2) {
        return try await _impl._invokeAsync(operation: "opFloatSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_v1)
                                            },
                                            read: { istr in
                                                let iceP_v2: FloatSeq2 = try istr.read()
                                                let iceP_returnValue: FloatSeq1 = try istr.read()
                                                return (iceP_returnValue, iceP_v2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `DoubleSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleSeq1, v2: DoubleSeq2)`:
    ///
    ///   - returnValue: `DoubleSeq1`
    ///
    ///   - v2: `DoubleSeq2`
    func opDoubleSeq(_ iceP_v1: DoubleSeq1, context: Ice.Context? = nil) throws -> (returnValue: DoubleSeq1, v2: DoubleSeq2) {
        return try _impl._invoke(operation: "opDoubleSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_v1)
                                 },
                                 read: { istr in
                                     let iceP_v2: DoubleSeq2 = try istr.read()
                                     let iceP_returnValue: DoubleSeq1 = try istr.read()
                                     return (iceP_returnValue, iceP_v2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DoubleSeq1`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleSeq1, v2: DoubleSeq2)` - The result of the operation
    func opDoubleSeqAsync(_ iceP_v1: DoubleSeq1, context: Ice.Context? = nil) async throws -> (returnValue: DoubleSeq1, v2: DoubleSeq2) {
        return try await _impl._invokeAsync(operation: "opDoubleSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_v1)
                                            },
                                            read: { istr in
                                                let iceP_v2: DoubleSeq2 = try istr.read()
                                                let iceP_returnValue: DoubleSeq1 = try istr.read()
                                                return (iceP_returnValue, iceP_v2)
                                            },
                                            context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `BoolSeq1`
    func opBogusArrayNotExistsFactory(context: Ice.Context? = nil) throws -> BoolSeq1 {
        return try _impl._invoke(operation: "opBogusArrayNotExistsFactory",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: BoolSeq1 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `BoolSeq1` - The result of the operation
    func opBogusArrayNotExistsFactoryAsync(context: Ice.Context? = nil) async throws -> BoolSeq1 {
        return try await _impl._invokeAsync(operation: "opBogusArrayNotExistsFactory",
                                            mode: .Normal,
                                            read: { istr in
                                                let iceP_returnValue: BoolSeq1 = try istr.read()
                                                return iceP_returnValue
                                            },
                                            context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `BoolSeq1`
    func opBogusArrayThrowFactory(context: Ice.Context? = nil) throws -> BoolSeq1 {
        return try _impl._invoke(operation: "opBogusArrayThrowFactory",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: BoolSeq1 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `BoolSeq1` - The result of the operation
    func opBogusArrayThrowFactoryAsync(context: Ice.Context? = nil) async throws -> BoolSeq1 {
        return try await _impl._invokeAsync(operation: "opBogusArrayThrowFactory",
                                            mode: .Normal,
                                            read: { istr in
                                                let iceP_returnValue: BoolSeq1 = try istr.read()
                                                return iceP_returnValue
                                            },
                                            context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `BoolSeq1`
    func opBogusArrayType(context: Ice.Context? = nil) throws -> BoolSeq1 {
        return try _impl._invoke(operation: "opBogusArrayType",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: BoolSeq1 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `BoolSeq1` - The result of the operation
    func opBogusArrayTypeAsync(context: Ice.Context? = nil) async throws -> BoolSeq1 {
        return try await _impl._invokeAsync(operation: "opBogusArrayType",
                                            mode: .Normal,
                                            read: { istr in
                                                let iceP_returnValue: BoolSeq1 = try istr.read()
                                                return iceP_returnValue
                                            },
                                            context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `BoolSeq1`
    func opBogusArrayNoneFactory(context: Ice.Context? = nil) throws -> BoolSeq1 {
        return try _impl._invoke(operation: "opBogusArrayNoneFactory",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: BoolSeq1 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `BoolSeq1` - The result of the operation
    func opBogusArrayNoneFactoryAsync(context: Ice.Context? = nil) async throws -> BoolSeq1 {
        return try await _impl._invokeAsync(operation: "opBogusArrayNoneFactory",
                                            mode: .Normal,
                                            read: { istr in
                                                let iceP_returnValue: BoolSeq1 = try istr.read()
                                                return iceP_returnValue
                                            },
                                            context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `BoolSeq1`
    func opBogusArraySignatureFactory(context: Ice.Context? = nil) throws -> BoolSeq1 {
        return try _impl._invoke(operation: "opBogusArraySignatureFactory",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: BoolSeq1 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `BoolSeq1` - The result of the operation
    func opBogusArraySignatureFactoryAsync(context: Ice.Context? = nil) async throws -> BoolSeq1 {
        return try await _impl._invokeAsync(operation: "opBogusArraySignatureFactory",
                                            mode: .Normal,
                                            read: { istr in
                                                let iceP_returnValue: BoolSeq1 = try istr.read()
                                                return iceP_returnValue
                                            },
                                            context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `BoolSeq1`
    func opBogusArrayNoCallableFactory(context: Ice.Context? = nil) throws -> BoolSeq1 {
        return try _impl._invoke(operation: "opBogusArrayNoCallableFactory",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: BoolSeq1 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `BoolSeq1` - The result of the operation
    func opBogusArrayNoCallableFactoryAsync(context: Ice.Context? = nil) async throws -> BoolSeq1 {
        return try await _impl._invokeAsync(operation: "opBogusArrayNoCallableFactory",
                                            mode: .Normal,
                                            read: { istr in
                                                let iceP_returnValue: BoolSeq1 = try istr.read()
                                                return iceP_returnValue
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `D?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `D?`
    func opD(_ iceP_d: D?, context: Ice.Context? = nil) throws -> D? {
        return try _impl._invoke(operation: "opD",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_d)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     var iceP_returnValue: D?
                                     try istr.read(D.self) { iceP_returnValue = $0 }
                                     try istr.readPendingValues()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `D?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `D?` - The result of the operation
    func opDAsync(_ iceP_d: D?, context: Ice.Context? = nil) async throws -> D? {
        return try await _impl._invokeAsync(operation: "opD",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_d)
                                                ostr.writePendingValues()
                                            },
                                            read: { istr in
                                                var iceP_returnValue: D?
                                                try istr.read(D.self) { iceP_returnValue = $0 }
                                                try istr.readPendingValues()
                                                return iceP_returnValue
                                            },
                                            context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "shutdown",
                                            mode: .Normal,
                                            context: context)
    }
}

/// :nodoc:
public class C_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return C.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_C() -> Ice.ValueTypeResolver {
        return C_TypeResolver()
    }
}

open class C: Ice.Value {
    public var b1: ByteString = ByteString()
    public var b2: ByteString = ByteString()
    public var b3: ByteList = ByteList()
    public var b4: ByteList = ByteList()
    public var s1: StringList = StringList()
    public var s2: StringList = StringList()
    public var s3: StringTuple = StringTuple()
    public var s4: StringTuple = StringTuple()

    public required init() {}

    public init(b1: ByteString, b2: ByteString, b3: ByteList, b4: ByteList, s1: StringList, s2: StringList, s3: StringTuple, s4: StringTuple) {
        self.b1 = b1
        self.b2 = b2
        self.b3 = b3
        self.b4 = b4
        self.s1 = s1
        self.s2 = s2
        self.s3 = s3
        self.s4 = s4
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::C" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.b1 = try istr.read()
        self.b2 = try istr.read()
        self.b3 = try istr.read()
        self.b4 = try istr.read()
        self.s1 = try istr.read()
        self.s2 = try istr.read()
        self.s3 = try istr.read()
        self.s4 = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: C.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.b1)
        ostr.write(self.b2)
        ostr.write(self.b3)
        ostr.write(self.b4)
        ostr.write(self.s1)
        ostr.write(self.s2)
        ostr.write(self.s3)
        ostr.write(self.s4)
        ostr.endSlice()
    }
}

/// :nodoc:
public class D_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return D.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_D() -> Ice.ValueTypeResolver {
        return D_TypeResolver()
    }
}

open class D: Ice.Value {
    public var boolSeq: BoolSeq1? = nil
    public var byteSeq: ByteSeq1? = nil
    public var shortSeq: ShortSeq1? = nil
    public var intSeq: IntSeq1? = nil
    public var longSeq: LongSeq1? = nil
    public var floatSeq: FloatSeq1? = nil
    public var doubleSeq: DoubleSeq1? = nil

    public required init() {}

    public init(boolSeq: BoolSeq1?, byteSeq: ByteSeq1?, shortSeq: ShortSeq1?, intSeq: IntSeq1?, longSeq: LongSeq1?, floatSeq: FloatSeq1?, doubleSeq: DoubleSeq1?) {
        self.boolSeq = boolSeq
        self.byteSeq = byteSeq
        self.shortSeq = shortSeq
        self.intSeq = intSeq
        self.longSeq = longSeq
        self.floatSeq = floatSeq
        self.doubleSeq = doubleSeq
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::D" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.boolSeq = try istr.read(tag: 1)
        self.byteSeq = try istr.read(tag: 2)
        self.shortSeq = try istr.read(tag: 3)
        self.intSeq = try istr.read(tag: 4)
        self.longSeq = try istr.read(tag: 5)
        self.floatSeq = try istr.read(tag: 6)
        self.doubleSeq = try istr.read(tag: 7)
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: D.ice_staticId(), compactId: -1, last: true)
        ostr.write(tag: 1, value: self.boolSeq)
        ostr.write(tag: 2, value: self.byteSeq)
        ostr.write(tag: 3, value: self.shortSeq)
        ostr.write(tag: 4, value: self.intSeq)
        ostr.write(tag: 5, value: self.longSeq)
        ostr.write(tag: 6, value: self.floatSeq)
        ostr.write(tag: 7, value: self.doubleSeq)
        ostr.endSlice()
    }
}


/// Dispatcher for `Custom` servants.
public struct CustomDisp: Ice.Dispatcher {
    public let servant: Custom
    private static let defaultObject = Ice.ObjectI<CustomTraits>()

    public init(_ servant: Custom) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? CustomDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? CustomDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? CustomDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? CustomDisp.defaultObject)._iceD_ice_ping(request)
        case "opBogusArrayNoCallableFactory":
            try await servant._iceD_opBogusArrayNoCallableFactory(request)
        case "opBogusArrayNoneFactory":
            try await servant._iceD_opBogusArrayNoneFactory(request)
        case "opBogusArrayNotExistsFactory":
            try await servant._iceD_opBogusArrayNotExistsFactory(request)
        case "opBogusArraySignatureFactory":
            try await servant._iceD_opBogusArraySignatureFactory(request)
        case "opBogusArrayThrowFactory":
            try await servant._iceD_opBogusArrayThrowFactory(request)
        case "opBogusArrayType":
            try await servant._iceD_opBogusArrayType(request)
        case "opBoolSeq":
            try await servant._iceD_opBoolSeq(request)
        case "opByteList1":
            try await servant._iceD_opByteList1(request)
        case "opByteList2":
            try await servant._iceD_opByteList2(request)
        case "opByteSeq":
            try await servant._iceD_opByteSeq(request)
        case "opByteString1":
            try await servant._iceD_opByteString1(request)
        case "opByteString2":
            try await servant._iceD_opByteString2(request)
        case "opD":
            try await servant._iceD_opD(request)
        case "opDoubleSeq":
            try await servant._iceD_opDoubleSeq(request)
        case "opFloatSeq":
            try await servant._iceD_opFloatSeq(request)
        case "opIntSeq":
            try await servant._iceD_opIntSeq(request)
        case "opLongSeq":
            try await servant._iceD_opLongSeq(request)
        case "opShortSeq":
            try await servant._iceD_opShortSeq(request)
        case "opStringList1":
            try await servant._iceD_opStringList1(request)
        case "opStringList2":
            try await servant._iceD_opStringList2(request)
        case "opStringTuple1":
            try await servant._iceD_opStringTuple1(request)
        case "opStringTuple2":
            try await servant._iceD_opStringTuple2(request)
        case "sendC":
            try await servant._iceD_sendC(request)
        case "sendS":
            try await servant._iceD_sendS(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol Custom {
    ///
    /// - parameter b1: `ByteString`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteString, b2: ByteString)` - The result of the operation
    func opByteString1(b1: ByteString, current: Ice.Current) async throws -> (returnValue: ByteString, b2: ByteString)

    ///
    /// - parameter b1: `ByteString`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteString, b2: ByteString)` - The result of the operation
    func opByteString2(b1: ByteString, current: Ice.Current) async throws -> (returnValue: ByteString, b2: ByteString)

    ///
    /// - parameter b1: `ByteList`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteList, b2: ByteList)` - The result of the operation
    func opByteList1(b1: ByteList, current: Ice.Current) async throws -> (returnValue: ByteList, b2: ByteList)

    ///
    /// - parameter b1: `ByteList`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteList, b2: ByteList)` - The result of the operation
    func opByteList2(b1: ByteList, current: Ice.Current) async throws -> (returnValue: ByteList, b2: ByteList)

    ///
    /// - parameter s1: `StringList`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringList, s2: StringList)` - The result of the operation
    func opStringList1(s1: StringList, current: Ice.Current) async throws -> (returnValue: StringList, s2: StringList)

    ///
    /// - parameter s1: `StringList`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringList, s2: StringList)` - The result of the operation
    func opStringList2(s1: StringList, current: Ice.Current) async throws -> (returnValue: StringList, s2: StringList)

    ///
    /// - parameter s1: `StringTuple`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringTuple, s2: StringTuple)` - The result of the operation
    func opStringTuple1(s1: StringTuple, current: Ice.Current) async throws -> (returnValue: StringTuple, s2: StringTuple)

    ///
    /// - parameter s1: `StringTuple`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringTuple, s2: StringTuple)` - The result of the operation
    func opStringTuple2(s1: StringTuple, current: Ice.Current) async throws -> (returnValue: StringTuple, s2: StringTuple)

    ///
    /// - parameter val: `S`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func sendS(val: S, current: Ice.Current) async throws

    ///
    /// - parameter val: `C?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func sendC(val: C?, current: Ice.Current) async throws

    ///
    /// - parameter v1: `BoolSeq1`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: BoolSeq1, v2: BoolSeq2)` - The result of the operation
    func opBoolSeq(v1: BoolSeq1, current: Ice.Current) async throws -> (returnValue: BoolSeq1, v2: BoolSeq2)

    ///
    /// - parameter v1: `ByteSeq1`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteSeq1, v2: ByteSeq2)` - The result of the operation
    func opByteSeq(v1: ByteSeq1, current: Ice.Current) async throws -> (returnValue: ByteSeq1, v2: ByteSeq2)

    ///
    /// - parameter v1: `ShortSeq1`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortSeq1, v2: ShortSeq2)` - The result of the operation
    func opShortSeq(v1: ShortSeq1, current: Ice.Current) async throws -> (returnValue: ShortSeq1, v2: ShortSeq2)

    ///
    /// - parameter v1: `IntSeq1`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntSeq1, v2: IntSeq2)` - The result of the operation
    func opIntSeq(v1: IntSeq1, current: Ice.Current) async throws -> (returnValue: IntSeq1, v2: IntSeq2)

    ///
    /// - parameter v1: `LongSeq1`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LongSeq1, v2: LongSeq2)` - The result of the operation
    func opLongSeq(v1: LongSeq1, current: Ice.Current) async throws -> (returnValue: LongSeq1, v2: LongSeq2)

    ///
    /// - parameter v1: `FloatSeq1`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: FloatSeq1, v2: FloatSeq2)` - The result of the operation
    func opFloatSeq(v1: FloatSeq1, current: Ice.Current) async throws -> (returnValue: FloatSeq1, v2: FloatSeq2)

    ///
    /// - parameter v1: `DoubleSeq1`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DoubleSeq1, v2: DoubleSeq2)` - The result of the operation
    func opDoubleSeq(v1: DoubleSeq1, current: Ice.Current) async throws -> (returnValue: DoubleSeq1, v2: DoubleSeq2)

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `BoolSeq1` - The result of the operation
    func opBogusArrayNotExistsFactory(current: Ice.Current) async throws -> BoolSeq1

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `BoolSeq1` - The result of the operation
    func opBogusArrayThrowFactory(current: Ice.Current) async throws -> BoolSeq1

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `BoolSeq1` - The result of the operation
    func opBogusArrayType(current: Ice.Current) async throws -> BoolSeq1

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `BoolSeq1` - The result of the operation
    func opBogusArrayNoneFactory(current: Ice.Current) async throws -> BoolSeq1

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `BoolSeq1` - The result of the operation
    func opBogusArraySignatureFactory(current: Ice.Current) async throws -> BoolSeq1

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `BoolSeq1` - The result of the operation
    func opBogusArrayNoCallableFactory(current: Ice.Current) async throws -> BoolSeq1

    ///
    /// - parameter d: `D?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `D?` - The result of the operation
    func opD(d: D?, current: Ice.Current) async throws -> D?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func shutdown(current: Ice.Current) async throws
}

/// Custom overview.
///
/// Custom Methods:
///
///  - opByteString1: 
///
///  - opByteString2: 
///
///  - opByteList1: 
///
///  - opByteList2: 
///
///  - opStringList1: 
///
///  - opStringList2: 
///
///  - opStringTuple1: 
///
///  - opStringTuple2: 
///
///  - sendS: 
///
///  - sendC: 
///
///  - opBoolSeq: 
///
///  - opByteSeq: 
///
///  - opShortSeq: 
///
///  - opIntSeq: 
///
///  - opLongSeq: 
///
///  - opFloatSeq: 
///
///  - opDoubleSeq: 
///
///  - opBogusArrayNotExistsFactory: 
///
///  - opBogusArrayThrowFactory: 
///
///  - opBogusArrayType: 
///
///  - opBogusArrayNoneFactory: 
///
///  - opBogusArraySignatureFactory: 
///
///  - opBogusArrayNoCallableFactory: 
///
///  - opD: 
///
///  - shutdown: 
extension Custom {
    public func _iceD_opByteString1(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_b1: ByteString = try istr.read()
        let result = try await self.opByteString1(b1: iceP_b1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_b2) = value
            ostr.write(iceP_b2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opByteString2(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_b1: ByteString = try istr.read()
        let result = try await self.opByteString2(b1: iceP_b1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_b2) = value
            ostr.write(iceP_b2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opByteList1(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_b1: ByteList = try istr.read()
        let result = try await self.opByteList1(b1: iceP_b1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_b2) = value
            ostr.write(iceP_b2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opByteList2(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_b1: ByteList = try istr.read()
        let result = try await self.opByteList2(b1: iceP_b1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_b2) = value
            ostr.write(iceP_b2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opStringList1(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_s1: StringList = try istr.read()
        let result = try await self.opStringList1(s1: iceP_s1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_s2) = value
            ostr.write(iceP_s2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opStringList2(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_s1: StringList = try istr.read()
        let result = try await self.opStringList2(s1: iceP_s1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_s2) = value
            ostr.write(iceP_s2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opStringTuple1(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_s1: StringTuple = try istr.read()
        let result = try await self.opStringTuple1(s1: iceP_s1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_s2) = value
            ostr.write(iceP_s2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opStringTuple2(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_s1: StringTuple = try istr.read()
        let result = try await self.opStringTuple2(s1: iceP_s1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_s2) = value
            ostr.write(iceP_s2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_sendS(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_val: S = try istr.read()
        try await self.sendS(val: iceP_val, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_sendC(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        var iceP_val: C?
        try istr.read(C.self) { iceP_val = $0 }
        try istr.readPendingValues()
        try await self.sendC(val: iceP_val, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_opBoolSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: BoolSeq1 = try istr.read()
        let result = try await self.opBoolSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opByteSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: ByteSeq1 = try istr.read()
        let result = try await self.opByteSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opShortSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: ShortSeq1 = try istr.read()
        let result = try await self.opShortSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opIntSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: IntSeq1 = try istr.read()
        let result = try await self.opIntSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opLongSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: LongSeq1 = try istr.read()
        let result = try await self.opLongSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opFloatSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: FloatSeq1 = try istr.read()
        let result = try await self.opFloatSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opDoubleSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: DoubleSeq1 = try istr.read()
        let result = try await self.opDoubleSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opBogusArrayNotExistsFactory(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opBogusArrayNotExistsFactory(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opBogusArrayThrowFactory(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opBogusArrayThrowFactory(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opBogusArrayType(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opBogusArrayType(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opBogusArrayNoneFactory(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opBogusArrayNoneFactory(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opBogusArraySignatureFactory(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opBogusArraySignatureFactory(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opBogusArrayNoCallableFactory(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opBogusArrayNoCallableFactory(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opD(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        var iceP_d: D?
        try istr.read(D.self) { iceP_d = $0 }
        try istr.readPendingValues()
        let result = try await self.opD(d: iceP_d, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
