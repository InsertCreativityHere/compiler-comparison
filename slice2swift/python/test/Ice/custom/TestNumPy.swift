//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestNumPy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public typealias NumPyBoolSeq1 = [Swift.Bool]

public typealias NumPyBoolSeq2 = [Swift.Bool]

public typealias NumPyByteSeq1 = Foundation.Data

public typealias NumPyByteSeq2 = Foundation.Data

public typealias NumPyShortSeq1 = [Swift.Int16]

public typealias NumPyShortSeq2 = [Swift.Int16]

public typealias NumPyIntSeq1 = [Swift.Int32]

public typealias NumPyIntSeq2 = [Swift.Int32]

public typealias NumPyLongSeq1 = [Swift.Int64]

public typealias NumPyLongSeq2 = [Swift.Int64]

public typealias NumPyFloatSeq1 = [Swift.Float]

public typealias NumPyFloatSeq2 = [Swift.Float]

public typealias NumPyDoubleSeq1 = [Swift.Double]

public typealias NumPyDoubleSeq2 = [Swift.Double]

public typealias NumPyComplex128Seq = Foundation.Data

/// Traits for Slice interface`NumPyCustom`.
public struct NumPyCustomTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::NumPy::Custom"]
    public static let staticId = "::Test::NumPy::Custom"
}

public protocol NumPyCustomPrx: Ice.ObjectPrx {}

private final class NumPyCustomPrxI: Ice.ObjectPrxI, NumPyCustomPrx {
    public override class func ice_staticId() -> Swift.String {
        return NumPyCustomTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: NumPyCustomPrx.Protocol) throws -> NumPyCustomPrx {
    try communicator.makeProxyImpl(proxyString) as NumPyCustomPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `NumPyCustomPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `NumPyCustomPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: NumPyCustomPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> NumPyCustomPrx? {
    return try await NumPyCustomPrxI.checkedCast(prx: prx, facet: facet, context: context) as NumPyCustomPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `NumPyCustomPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `NumPyCustomPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: NumPyCustomPrx.Protocol, facet: Swift.String? = nil) -> NumPyCustomPrx {
    return NumPyCustomPrxI.uncheckedCast(prx: prx, facet: facet) as NumPyCustomPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `NumPyCustomPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: NumPyCustomPrx.Protocol) -> Swift.String {
    return NumPyCustomTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `NumPyCustomPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `NumPyCustomPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `NumPyCustomPrx?` - The extracted proxy
    func read(_ type: NumPyCustomPrx.Protocol) throws -> NumPyCustomPrx? {
        return try read() as NumPyCustomPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `NumPyCustomPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `NumPyCustomPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: NumPyCustomPrx.Protocol) throws -> NumPyCustomPrx? {
        return try read(tag: tag) as NumPyCustomPrxI?
    }
}

public extension NumPyCustomPrx {
    func opBoolSeq(_ iceP_v1: NumPyBoolSeq1, context: Ice.Context? = nil) async throws -> (returnValue: NumPyBoolSeq1, v2: NumPyBoolSeq2) {
        return try await _impl._invoke(operation: "opBoolSeq",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_v1)
                                       },
                                       read: { istr in
                                           let iceP_v2: NumPyBoolSeq2 = try istr.read()
                                           let iceP_returnValue: NumPyBoolSeq1 = try istr.read()
                                           return (iceP_returnValue, iceP_v2)
                                       },
                                       context: context)
    }

    func opByteSeq(_ iceP_v1: NumPyByteSeq1, context: Ice.Context? = nil) async throws -> (returnValue: NumPyByteSeq1, v2: NumPyByteSeq2) {
        return try await _impl._invoke(operation: "opByteSeq",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_v1)
                                       },
                                       read: { istr in
                                           let iceP_v2: NumPyByteSeq2 = try istr.read()
                                           let iceP_returnValue: NumPyByteSeq1 = try istr.read()
                                           return (iceP_returnValue, iceP_v2)
                                       },
                                       context: context)
    }

    func opShortSeq(_ iceP_v1: NumPyShortSeq1, context: Ice.Context? = nil) async throws -> (returnValue: NumPyShortSeq1, v2: NumPyShortSeq2) {
        return try await _impl._invoke(operation: "opShortSeq",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_v1)
                                       },
                                       read: { istr in
                                           let iceP_v2: NumPyShortSeq2 = try istr.read()
                                           let iceP_returnValue: NumPyShortSeq1 = try istr.read()
                                           return (iceP_returnValue, iceP_v2)
                                       },
                                       context: context)
    }

    func opIntSeq(_ iceP_v1: NumPyIntSeq1, context: Ice.Context? = nil) async throws -> (returnValue: NumPyIntSeq1, v2: NumPyIntSeq2) {
        return try await _impl._invoke(operation: "opIntSeq",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_v1)
                                       },
                                       read: { istr in
                                           let iceP_v2: NumPyIntSeq2 = try istr.read()
                                           let iceP_returnValue: NumPyIntSeq1 = try istr.read()
                                           return (iceP_returnValue, iceP_v2)
                                       },
                                       context: context)
    }

    func opLongSeq(_ iceP_v1: NumPyLongSeq1, context: Ice.Context? = nil) async throws -> (returnValue: NumPyLongSeq1, v2: NumPyLongSeq2) {
        return try await _impl._invoke(operation: "opLongSeq",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_v1)
                                       },
                                       read: { istr in
                                           let iceP_v2: NumPyLongSeq2 = try istr.read()
                                           let iceP_returnValue: NumPyLongSeq1 = try istr.read()
                                           return (iceP_returnValue, iceP_v2)
                                       },
                                       context: context)
    }

    func opFloatSeq(_ iceP_v1: NumPyFloatSeq1, context: Ice.Context? = nil) async throws -> (returnValue: NumPyFloatSeq1, v2: NumPyFloatSeq2) {
        return try await _impl._invoke(operation: "opFloatSeq",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_v1)
                                       },
                                       read: { istr in
                                           let iceP_v2: NumPyFloatSeq2 = try istr.read()
                                           let iceP_returnValue: NumPyFloatSeq1 = try istr.read()
                                           return (iceP_returnValue, iceP_v2)
                                       },
                                       context: context)
    }

    func opDoubleSeq(_ iceP_v1: NumPyDoubleSeq1, context: Ice.Context? = nil) async throws -> (returnValue: NumPyDoubleSeq1, v2: NumPyDoubleSeq2) {
        return try await _impl._invoke(operation: "opDoubleSeq",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_v1)
                                       },
                                       read: { istr in
                                           let iceP_v2: NumPyDoubleSeq2 = try istr.read()
                                           let iceP_returnValue: NumPyDoubleSeq1 = try istr.read()
                                           return (iceP_returnValue, iceP_v2)
                                       },
                                       context: context)
    }

    func opComplex128Seq(_ iceP_v1: NumPyComplex128Seq, context: Ice.Context? = nil) async throws -> NumPyComplex128Seq {
        return try await _impl._invoke(operation: "opComplex128Seq",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_v1)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: NumPyComplex128Seq = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func opBoolMatrix(context: Ice.Context? = nil) async throws -> NumPyBoolSeq1 {
        return try await _impl._invoke(operation: "opBoolMatrix",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: NumPyBoolSeq1 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func opByteMatrix(context: Ice.Context? = nil) async throws -> NumPyByteSeq1 {
        return try await _impl._invoke(operation: "opByteMatrix",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: NumPyByteSeq1 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func opShortMatrix(context: Ice.Context? = nil) async throws -> NumPyShortSeq1 {
        return try await _impl._invoke(operation: "opShortMatrix",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: NumPyShortSeq1 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func opIntMatrix(context: Ice.Context? = nil) async throws -> NumPyIntSeq1 {
        return try await _impl._invoke(operation: "opIntMatrix",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: NumPyIntSeq1 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func opLongMatrix(context: Ice.Context? = nil) async throws -> NumPyLongSeq1 {
        return try await _impl._invoke(operation: "opLongMatrix",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: NumPyLongSeq1 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func opFloatMatrix(context: Ice.Context? = nil) async throws -> NumPyFloatSeq1 {
        return try await _impl._invoke(operation: "opFloatMatrix",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: NumPyFloatSeq1 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func opDoubleMatrix(context: Ice.Context? = nil) async throws -> NumPyDoubleSeq1 {
        return try await _impl._invoke(operation: "opDoubleMatrix",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: NumPyDoubleSeq1 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func opBogusNumpyArrayType(context: Ice.Context? = nil) async throws -> NumPyBoolSeq1 {
        return try await _impl._invoke(operation: "opBogusNumpyArrayType",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: NumPyBoolSeq1 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func opD(_ iceP_d: NumPyD?, context: Ice.Context? = nil) async throws -> NumPyD? {
        return try await _impl._invoke(operation: "opD",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_d)
                                           ostr.writePendingValues()
                                       },
                                       read: { istr in
                                           var iceP_returnValue: NumPyD?
                                           try istr.read(NumPyD.self) { iceP_returnValue = $0 }
                                           try istr.readPendingValues()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func shutdown(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "shutdown",
                                       mode: .Normal,
                                       context: context)
    }
}

/// :nodoc:
public class NumPyD_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return NumPyD.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_NumPy_D() -> Ice.ValueTypeResolver {
        return NumPyD_TypeResolver()
    }
}

open class NumPyD: Ice.Value {
    public var boolSeq: NumPyBoolSeq1? = nil
    public var byteSeq: NumPyByteSeq1? = nil
    public var shortSeq: NumPyShortSeq1? = nil
    public var intSeq: NumPyIntSeq1? = nil
    public var longSeq: NumPyLongSeq1? = nil
    public var floatSeq: NumPyFloatSeq1? = nil
    public var doubleSeq: NumPyDoubleSeq1? = nil

    public required init() {}

    public init(boolSeq: NumPyBoolSeq1?, byteSeq: NumPyByteSeq1?, shortSeq: NumPyShortSeq1?, intSeq: NumPyIntSeq1?, longSeq: NumPyLongSeq1?, floatSeq: NumPyFloatSeq1?, doubleSeq: NumPyDoubleSeq1?) {
        self.boolSeq = boolSeq
        self.byteSeq = byteSeq
        self.shortSeq = shortSeq
        self.intSeq = intSeq
        self.longSeq = longSeq
        self.floatSeq = floatSeq
        self.doubleSeq = doubleSeq
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::NumPy::D" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.boolSeq = try istr.read(tag: 1)
        self.byteSeq = try istr.read(tag: 2)
        self.shortSeq = try istr.read(tag: 3)
        self.intSeq = try istr.read(tag: 4)
        self.longSeq = try istr.read(tag: 5)
        self.floatSeq = try istr.read(tag: 6)
        self.doubleSeq = try istr.read(tag: 7)
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: NumPyD.ice_staticId(), compactId: -1, last: true)
        ostr.write(tag: 1, value: self.boolSeq)
        ostr.write(tag: 2, value: self.byteSeq)
        ostr.write(tag: 3, value: self.shortSeq)
        ostr.write(tag: 4, value: self.intSeq)
        ostr.write(tag: 5, value: self.longSeq)
        ostr.write(tag: 6, value: self.floatSeq)
        ostr.write(tag: 7, value: self.doubleSeq)
        ostr.endSlice()
    }
}


/// Dispatcher for `NumPyCustom` servants.
public struct NumPyCustomDisp: Ice.Dispatcher {
    public let servant: NumPyCustom
    private static let defaultObject = Ice.ObjectI<NumPyCustomTraits>()

    public init(_ servant: NumPyCustom) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? NumPyCustomDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? NumPyCustomDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? NumPyCustomDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? NumPyCustomDisp.defaultObject)._iceD_ice_ping(request)
        case "opBogusNumpyArrayType":
            try await servant._iceD_opBogusNumpyArrayType(request)
        case "opBoolMatrix":
            try await servant._iceD_opBoolMatrix(request)
        case "opBoolSeq":
            try await servant._iceD_opBoolSeq(request)
        case "opByteMatrix":
            try await servant._iceD_opByteMatrix(request)
        case "opByteSeq":
            try await servant._iceD_opByteSeq(request)
        case "opComplex128Seq":
            try await servant._iceD_opComplex128Seq(request)
        case "opD":
            try await servant._iceD_opD(request)
        case "opDoubleMatrix":
            try await servant._iceD_opDoubleMatrix(request)
        case "opDoubleSeq":
            try await servant._iceD_opDoubleSeq(request)
        case "opFloatMatrix":
            try await servant._iceD_opFloatMatrix(request)
        case "opFloatSeq":
            try await servant._iceD_opFloatSeq(request)
        case "opIntMatrix":
            try await servant._iceD_opIntMatrix(request)
        case "opIntSeq":
            try await servant._iceD_opIntSeq(request)
        case "opLongMatrix":
            try await servant._iceD_opLongMatrix(request)
        case "opLongSeq":
            try await servant._iceD_opLongSeq(request)
        case "opShortMatrix":
            try await servant._iceD_opShortMatrix(request)
        case "opShortSeq":
            try await servant._iceD_opShortSeq(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol NumPyCustom {
    func opBoolSeq(v1: NumPyBoolSeq1, current: Ice.Current) async throws -> (returnValue: NumPyBoolSeq1, v2: NumPyBoolSeq2)

    func opByteSeq(v1: NumPyByteSeq1, current: Ice.Current) async throws -> (returnValue: NumPyByteSeq1, v2: NumPyByteSeq2)

    func opShortSeq(v1: NumPyShortSeq1, current: Ice.Current) async throws -> (returnValue: NumPyShortSeq1, v2: NumPyShortSeq2)

    func opIntSeq(v1: NumPyIntSeq1, current: Ice.Current) async throws -> (returnValue: NumPyIntSeq1, v2: NumPyIntSeq2)

    func opLongSeq(v1: NumPyLongSeq1, current: Ice.Current) async throws -> (returnValue: NumPyLongSeq1, v2: NumPyLongSeq2)

    func opFloatSeq(v1: NumPyFloatSeq1, current: Ice.Current) async throws -> (returnValue: NumPyFloatSeq1, v2: NumPyFloatSeq2)

    func opDoubleSeq(v1: NumPyDoubleSeq1, current: Ice.Current) async throws -> (returnValue: NumPyDoubleSeq1, v2: NumPyDoubleSeq2)

    func opComplex128Seq(v1: NumPyComplex128Seq, current: Ice.Current) async throws -> NumPyComplex128Seq

    func opBoolMatrix(current: Ice.Current) async throws -> NumPyBoolSeq1

    func opByteMatrix(current: Ice.Current) async throws -> NumPyByteSeq1

    func opShortMatrix(current: Ice.Current) async throws -> NumPyShortSeq1

    func opIntMatrix(current: Ice.Current) async throws -> NumPyIntSeq1

    func opLongMatrix(current: Ice.Current) async throws -> NumPyLongSeq1

    func opFloatMatrix(current: Ice.Current) async throws -> NumPyFloatSeq1

    func opDoubleMatrix(current: Ice.Current) async throws -> NumPyDoubleSeq1

    func opBogusNumpyArrayType(current: Ice.Current) async throws -> NumPyBoolSeq1

    func opD(d: NumPyD?, current: Ice.Current) async throws -> NumPyD?

    func shutdown(current: Ice.Current) async throws
}

extension NumPyCustom {
    public func _iceD_opBoolSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: NumPyBoolSeq1 = try istr.read()
        let result = try await self.opBoolSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opByteSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: NumPyByteSeq1 = try istr.read()
        let result = try await self.opByteSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opShortSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: NumPyShortSeq1 = try istr.read()
        let result = try await self.opShortSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opIntSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: NumPyIntSeq1 = try istr.read()
        let result = try await self.opIntSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opLongSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: NumPyLongSeq1 = try istr.read()
        let result = try await self.opLongSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opFloatSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: NumPyFloatSeq1 = try istr.read()
        let result = try await self.opFloatSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opDoubleSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: NumPyDoubleSeq1 = try istr.read()
        let result = try await self.opDoubleSeq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_v2) = value
            ostr.write(iceP_v2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opComplex128Seq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_v1: NumPyComplex128Seq = try istr.read()
        let result = try await self.opComplex128Seq(v1: iceP_v1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opBoolMatrix(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opBoolMatrix(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opByteMatrix(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opByteMatrix(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opShortMatrix(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opShortMatrix(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opIntMatrix(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opIntMatrix(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opLongMatrix(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opLongMatrix(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opFloatMatrix(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opFloatMatrix(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opDoubleMatrix(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opDoubleMatrix(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opBogusNumpyArrayType(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opBogusNumpyArrayType(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opD(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        var iceP_d: NumPyD?
        try istr.read(NumPyD.self) { iceP_d = $0 }
        try istr.readPendingValues()
        let result = try await self.opD(d: iceP_d, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
