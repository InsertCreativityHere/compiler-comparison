//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

@_documentation(visibility: internal)
public class D3_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return D3.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_D3() -> Ice.ValueTypeResolver {
        return D3_TypeResolver()
    }
}

open class D3: B {
    public var sd3: Swift.String = ""
    public var pd3: B? = nil

    public required init() {
        super.init()
    }

    public init(sb: Swift.String, pb: B?, sd3: Swift.String, pd3: B?) {
        self.sd3 = sd3
        self.pd3 = pd3
        super.init(sb: sb, pb: pb)
    }

    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::D3" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.sd3 = try istr.read()
        try istr.read(B.self) { self.pd3 = $0 }
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: D3.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.sd3)
        ostr.write(self.pd3)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

@_documentation(visibility: internal)
public class PCUnknown_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return PCUnknown.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_PCUnknown() -> Ice.ValueTypeResolver {
        return PCUnknown_TypeResolver()
    }
}

open class PCUnknown: PBase {
    public var pu: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(pi: Swift.Int32, pu: Swift.String) {
        self.pu = pu
        super.init(pi: pi)
    }

    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::PCUnknown" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.pu = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: PCUnknown.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.pu)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

@_documentation(visibility: internal)
public class PCDerived_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return PCDerived.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_PCDerived() -> Ice.ValueTypeResolver {
        return PCDerived_TypeResolver()
    }
}

open class PCDerived: PDerived {
    public var pbs: PBaseSeq = PBaseSeq()

    public required init() {
        super.init()
    }

    public init(pi: Swift.Int32, ps: Swift.String, pb: PBase?, pbs: PBaseSeq) {
        self.pbs = pbs
        super.init(pi: pi, ps: ps, pb: pb)
    }

    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::PCDerived" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.pbs = try PBaseSeqHelper.read(from: istr)
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: PCDerived.ice_staticId(), compactId: -1, last: false)
        PBaseSeqHelper.write(to: ostr, value: self.pbs)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

@_documentation(visibility: internal)
public class PCDerived2_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return PCDerived2.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_PCDerived2() -> Ice.ValueTypeResolver {
        return PCDerived2_TypeResolver()
    }
}

open class PCDerived2: PCDerived {
    public var pcd2: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(pi: Swift.Int32, ps: Swift.String, pb: PBase?, pbs: PBaseSeq, pcd2: Swift.Int32) {
        self.pcd2 = pcd2
        super.init(pi: pi, ps: ps, pb: pb, pbs: pbs)
    }

    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::PCDerived2" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.pcd2 = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: PCDerived2.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.pcd2)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

@_documentation(visibility: internal)
public class PCDerived3_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return PCDerived3.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_PCDerived3() -> Ice.ValueTypeResolver {
        return PCDerived3_TypeResolver()
    }
}

open class PCDerived3: PCDerived2 {
    public var pcd3: Ice.Value? = nil

    public required init() {
        super.init()
    }

    public init(pi: Swift.Int32, ps: Swift.String, pb: PBase?, pbs: PBaseSeq, pcd2: Swift.Int32, pcd3: Ice.Value?) {
        self.pcd3 = pcd3
        super.init(pi: pi, ps: ps, pb: pb, pbs: pbs, pcd2: pcd2)
    }

    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::PCDerived3" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.read() { self.pcd3 = $0 }
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: PCDerived3.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.pcd3)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

@_documentation(visibility: internal)
public class CompactPCDerived_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return CompactPCDerived.self
    }
}

public extension Ice.TypeIdResolver {
    @objc static func TypeId_57() -> Swift.String {
        return "::Test::CompactPCDerived"
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_CompactPCDerived() -> Ice.ValueTypeResolver {
        return CompactPCDerived_TypeResolver()
    }
}

open class CompactPCDerived: CompactPDerived {
    public var pbs: PBaseSeq = PBaseSeq()

    public required init() {
        super.init()
    }

    public init(pi: Swift.Int32, ps: Swift.String, pb: PBase?, pbs: PBaseSeq) {
        self.pbs = pbs
        super.init(pi: pi, ps: ps, pb: pb)
    }

    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::CompactPCDerived" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.pbs = try PBaseSeqHelper.read(from: istr)
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CompactPCDerived.ice_staticId(), compactId: 57, last: false)
        PBaseSeqHelper.write(to: ostr, value: self.pbs)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}
