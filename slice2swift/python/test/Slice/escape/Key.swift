//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public enum assert: Swift.UInt8 {
    /// `break`
    case `break` = 0
    public init() {
        self = .`break`
    }
}

/// An `Ice.InputStream` extension to read `assert` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `assert` - The enumarated value.
    func read() throws -> assert {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 0)
        guard let val = assert(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `assert` - The enumerated value.
    func read(tag: Swift.Int32) throws -> assert? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as assert
    }
}

/// An `Ice.OutputStream` extension to write `assert` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `assert` - The enumerator to write.
    func write(_ v: assert) {
        write(enum: v.rawValue, maxValue: 0)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `assert` - The enumerator to write.
    func write(tag: Swift.Int32, value: assert?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 0)
    }
}

public struct `continue`: Swift.Hashable {
    public var def: Swift.Int32 = 0

    public init() {}

    public init(def: Swift.Int32) {
        self.def = def
    }
}

/// An `Ice.InputStream` extension to read ``continue`` structured values from the stream.
public extension Ice.InputStream {
    /// Read a ``continue`` structured value from the stream.
    ///
    /// - returns: ``continue`` - The structured value read from the stream.
    func read() throws -> `continue` {
        var v = `continue`()
        v.def = try self.read()
        return v
    }

    /// Read an optional ``continue`?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: ``continue`?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> `continue`? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as `continue`
    }
}

/// An `Ice.OutputStream` extension to write ``continue`` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a ``continue`` structured value to the stream.
    ///
    /// - parameter _: ``continue`` - The value to write to the stream.
    func write(_ v: `continue`) {
        self.write(v.def)
    }

    /// Write an optional ``continue`?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: ``continue`?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: `continue`?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 4)
                write(v)
            }
        }
    }
}

/// Traits for Slice interface`del`.
public struct delTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::and::del"]
    public static let staticId = "::and::del"
}

/// Traits for Slice interface`exec`.
public struct execTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::and::exec"]
    public static let staticId = "::and::exec"
}

/// Traits for Slice interface``if``.
public struct ifTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::and::del", "::and::exec", "::and::if"]
    public static let staticId = "::and::if"
}

public typealias `import` = [assert]

/// Helper class to read and write ``import`` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct importHelper {
    /// Read a ``import`` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: ``import`` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> `import` {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = `import`()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: assert = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional ``import`?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: ``import`` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> `import`? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a ``import`` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: ``import`` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: `import`) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional ``import`?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: ``import`` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: `import`?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias `in` = [Swift.String: assert]

/// Helper class to read and write ``in`` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct inHelper {
    /// Read a ``in`` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: ``in`` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> `in` {
        let sz = try Swift.Int(istr.readSize())
        var v = `in`()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: assert = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional ``in`?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: ``in`` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> `in`? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a ``in`` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: ``in`` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: `in`) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional ``in`?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: ``in`` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: `in`?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// :nodoc:
public class is_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return `is`.self
    }
}

public extension Ice.ClassResolver {
    @objc static func and_is() -> Ice.UserExceptionTypeResolver {
        return is_TypeResolver()
    }
}

open class `is`: Ice.UserException, @unchecked Sendable {
    public var lambda: Swift.Int32 = 0

    public required init() {}

    public init(lambda: Swift.Int32) {
        self.lambda = lambda
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::and::is" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: `is`.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.lambda)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.lambda = try istr.read()
        try istr.endSlice()
    }
}

/// :nodoc:
public class not_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return not.self
    }
}

public extension Ice.ClassResolver {
    @objc static func and_not() -> Ice.UserExceptionTypeResolver {
        return not_TypeResolver()
    }
}

open class not: `is`, @unchecked Sendable {
    public var or: Swift.Int32 = 0
    public var pass: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(lambda: Swift.Int32, or: Swift.Int32, pass: Swift.Int32) {
        self.or = or
        self.pass = pass
        super.init(lambda: lambda)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::and::not" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: not.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.or)
        ostr.write(self.pass)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.or = try istr.read()
        self.pass = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// Traits for Slice interface`print`.
public struct printTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::and::print"]
    public static let staticId = "::and::print"
}
public let lambda: Swift.Int32 = 0


public enum EnumNone: Swift.UInt8 {
    /// `None`
    case `None` = 0
    public init() {
        self = .`None`
    }
}

/// An `Ice.InputStream` extension to read `EnumNone` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `EnumNone` - The enumarated value.
    func read() throws -> EnumNone {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 0)
        guard let val = EnumNone(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `EnumNone` - The enumerated value.
    func read(tag: Swift.Int32) throws -> EnumNone? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as EnumNone
    }
}

/// An `Ice.OutputStream` extension to write `EnumNone` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `EnumNone` - The enumerator to write.
    func write(_ v: EnumNone) {
        write(enum: v.rawValue, maxValue: 0)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `EnumNone` - The enumerator to write.
    func write(tag: Swift.Int32, value: EnumNone?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 0)
    }
}

/// delPrx overview.
///
/// delPrx Methods:
///
///  - elif: 
///
///  - elifAsync: 
public protocol delPrx: Ice.ObjectPrx {}

private final class delPrxI: Ice.ObjectPrxI, delPrx {
    public override class func ice_staticId() -> Swift.String {
        return delTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: delPrx.Protocol) throws -> delPrx {
    try communicator.makeProxyImpl(proxyString) as delPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `delPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `delPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: delPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> delPrx? {
    return try await delPrxI.checkedCast(prx: prx, facet: facet, context: context) as delPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `delPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `delPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: delPrx.Protocol, facet: Swift.String? = nil) -> delPrx {
    return delPrxI.uncheckedCast(prx: prx, facet: facet) as delPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `delPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: delPrx.Protocol) -> Swift.String {
    return delTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `delPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `delPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `delPrx?` - The extracted proxy
    func read(_ type: delPrx.Protocol) throws -> delPrx? {
        return try read() as delPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `delPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `delPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: delPrx.Protocol) throws -> delPrx? {
        return try read(tag: tag) as delPrxI?
    }
}

/// delPrx overview.
///
/// delPrx Methods:
///
///  - elif: 
///
///  - elifAsync: 
public extension delPrx {
    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func elif(_ iceP_else: Swift.Int32, context: Ice.Context? = nil) async throws -> Swift.Int32 {
        return try await _impl._invoke(operation: "elif",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_else)
                                       },
                                       read: { istr in
                                           let iceP_except: Swift.Int32 = try istr.read()
                                           return iceP_except
                                       },
                                       context: context)
    }
}

/// execPrx overview.
///
/// execPrx Methods:
///
///  - finally: 
///
///  - finallyAsync: 
public protocol execPrx: Ice.ObjectPrx {}

private final class execPrxI: Ice.ObjectPrxI, execPrx {
    public override class func ice_staticId() -> Swift.String {
        return execTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: execPrx.Protocol) throws -> execPrx {
    try communicator.makeProxyImpl(proxyString) as execPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `execPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `execPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: execPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> execPrx? {
    return try await execPrxI.checkedCast(prx: prx, facet: facet, context: context) as execPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `execPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `execPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: execPrx.Protocol, facet: Swift.String? = nil) -> execPrx {
    return execPrxI.uncheckedCast(prx: prx, facet: facet) as execPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `execPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: execPrx.Protocol) -> Swift.String {
    return execTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `execPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `execPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `execPrx?` - The extracted proxy
    func read(_ type: execPrx.Protocol) throws -> execPrx? {
        return try read() as execPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `execPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `execPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: execPrx.Protocol) throws -> execPrx? {
        return try read(tag: tag) as execPrxI?
    }
}

/// execPrx overview.
///
/// execPrx Methods:
///
///  - finally: 
///
///  - finallyAsync: 
public extension execPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func finally(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "finally",
                                       mode: .Normal,
                                       context: context)
    }
}

/// ifPrx overview.
public protocol ifPrx: execPrx, delPrx {}

private final class ifPrxI: Ice.ObjectPrxI, ifPrx {
    public override class func ice_staticId() -> Swift.String {
        return ifTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: ifPrx.Protocol) throws -> ifPrx {
    try communicator.makeProxyImpl(proxyString) as ifPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `ifPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `ifPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: ifPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> ifPrx? {
    return try await ifPrxI.checkedCast(prx: prx, facet: facet, context: context) as ifPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `ifPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `ifPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: ifPrx.Protocol, facet: Swift.String? = nil) -> ifPrx {
    return ifPrxI.uncheckedCast(prx: prx, facet: facet) as ifPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `ifPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: ifPrx.Protocol) -> Swift.String {
    return ifTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `ifPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `ifPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ifPrx?` - The extracted proxy
    func read(_ type: ifPrx.Protocol) throws -> ifPrx? {
        return try read() as ifPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `ifPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ifPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: ifPrx.Protocol) throws -> ifPrx? {
        return try read(tag: tag) as ifPrxI?
    }
}

/// ifPrx overview.
public extension ifPrx {}

/// printPrx overview.
///
/// printPrx Methods:
///
///  - raise: 
///
///  - raiseAsync: 
public protocol printPrx: Ice.ObjectPrx {}

private final class printPrxI: Ice.ObjectPrxI, printPrx {
    public override class func ice_staticId() -> Swift.String {
        return printTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: printPrx.Protocol) throws -> printPrx {
    try communicator.makeProxyImpl(proxyString) as printPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `printPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `printPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: printPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> printPrx? {
    return try await printPrxI.checkedCast(prx: prx, facet: facet, context: context) as printPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `printPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `printPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: printPrx.Protocol, facet: Swift.String? = nil) -> printPrx {
    return printPrxI.uncheckedCast(prx: prx, facet: facet) as printPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `printPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: printPrx.Protocol) -> Swift.String {
    return printTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `printPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `printPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `printPrx?` - The extracted proxy
    func read(_ type: printPrx.Protocol) throws -> printPrx? {
        return try read() as printPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `printPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `printPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: printPrx.Protocol) throws -> printPrx? {
        return try read(tag: tag) as printPrxI?
    }
}

/// printPrx overview.
///
/// printPrx Methods:
///
///  - raise: 
///
///  - raiseAsync: 
public extension printPrx {
    ///
    /// - parameter else: ``continue``
    ///
    /// - parameter return: ``for`?`
    ///
    /// - parameter while: `delPrx?`
    ///
    /// - parameter yield: `execPrx?`
    ///
    /// - parameter or: `ifPrx?`
    ///
    /// - parameter global: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `assert`
    func raise(else iceP_else: `continue`, return iceP_return: `for`?, while iceP_while: delPrx?, yield iceP_yield: execPrx?, or iceP_or: ifPrx?, global iceP_global: Swift.Int32, context: Ice.Context? = nil) async throws -> assert {
        return try await _impl._invoke(operation: "raise",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_else)
                                           ostr.write(iceP_return)
                                           ostr.write(iceP_while)
                                           ostr.write(iceP_yield)
                                           ostr.write(iceP_or)
                                           ostr.write(iceP_global)
                                           ostr.writePendingValues()
                                       },
                                       read: { istr in
                                           let iceP_returnValue: assert = try istr.read()
                                           return iceP_returnValue
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as is {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }
}

/// :nodoc:
public class for_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return `for`.self
    }
}

public extension Ice.ClassResolver {
    @objc static func and_for() -> Ice.ValueTypeResolver {
        return for_TypeResolver()
    }
}

open class `for`: Ice.Value {
    public var lambda: Swift.Int32 = 0
    public var from: execPrx? = nil
    public var global: Swift.Int32 = 0

    public required init() {}

    public init(lambda: Swift.Int32, from: execPrx?, global: Swift.Int32) {
        self.lambda = lambda
        self.from = from
        self.global = global
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::and::for" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.lambda = try istr.read()
        self.from = try istr.read(execPrx.self)
        self.global = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: `for`.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.lambda)
        ostr.write(self.from)
        ostr.write(self.global)
        ostr.endSlice()
    }
}


/// Dispatcher for `del` servants.
public struct delDisp: Ice.Dispatcher {
    public let servant: del
    private static let defaultObject = Ice.ObjectI<delTraits>()

    public init(_ servant: del) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "elif":
            try await servant._iceD_elif(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? delDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? delDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? delDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? delDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol del {
    ///
    /// - parameter else: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func elif(else: Swift.Int32, current: Ice.Current) async throws -> Swift.Int32
}


/// Dispatcher for `exec` servants.
public struct execDisp: Ice.Dispatcher {
    public let servant: exec
    private static let defaultObject = Ice.ObjectI<execTraits>()

    public init(_ servant: exec) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "finally":
            try await servant._iceD_finally(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? execDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? execDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? execDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? execDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol exec {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func finally(current: Ice.Current) async throws
}


/// Dispatcher for ``if`` servants.
public struct ifDisp: Ice.Dispatcher {
    public let servant: `if`
    private static let defaultObject = Ice.ObjectI<ifTraits>()

    public init(_ servant: `if`) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "elif":
            try await servant._iceD_elif(request)
        case "finally":
            try await servant._iceD_finally(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? ifDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? ifDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? ifDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? ifDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol `if`: exec, del {}


/// Dispatcher for `print` servants.
public struct printDisp: Ice.Dispatcher {
    public let servant: print
    private static let defaultObject = Ice.ObjectI<printTraits>()

    public init(_ servant: print) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? printDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? printDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? printDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? printDisp.defaultObject)._iceD_ice_ping(request)
        case "raise":
            try await servant._iceD_raise(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol print {
    ///
    /// - parameter else: ``continue``
    ///
    /// - parameter return: ``for`?`
    ///
    /// - parameter while: `delPrx?`
    ///
    /// - parameter yield: `execPrx?`
    ///
    /// - parameter or: `ifPrx?`
    ///
    /// - parameter global: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `assert`
    func raise(else: `continue`, return: `for`?, while: delPrx?, yield: execPrx?, or: ifPrx?, global: Swift.Int32, current: Ice.Current) async throws -> assert
}

/// del overview.
///
/// del Methods:
///
///  - elif: 
extension del {
    public func _iceD_elif(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_else: Swift.Int32 = try istr.read()
        let result = try await self.elif(else: iceP_else, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_except = value
            ostr.write(iceP_except)
        }
    }
}

/// exec overview.
///
/// exec Methods:
///
///  - finally: 
extension exec {
    public func _iceD_finally(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.finally(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// if overview.
extension `if` {}

/// print overview.
///
/// print Methods:
///
///  - raise: 
extension print {
    public func _iceD_raise(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_else: `continue` = try istr.read()
        var iceP_return: `for`?
        try istr.read(for.self) { iceP_return = $0 }
        let iceP_while: delPrx? = try istr.read(delPrx.self)
        let iceP_yield: execPrx? = try istr.read(execPrx.self)
        let iceP_or: ifPrx? = try istr.read(ifPrx.self)
        let iceP_global: Swift.Int32 = try istr.read()
        try istr.readPendingValues()
        let result = try await self.raise(else: iceP_else, return: iceP_return, while: iceP_while, yield: iceP_yield, or: iceP_or, global: iceP_global, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}
