//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// Traits for Slice class``Default``.
public struct DefaultTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Default"]
    public static let staticId = "::Test::Default"
}

/// Traits for Slice class`NoDefault`.
public struct NoDefaultTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::NoDefault"]
    public static let staticId = "::Test::NoDefault"
}

/// :nodoc:
public class Default_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return `Default`.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Default() -> Ice.ValueTypeResolver {
        return Default_TypeResolver()
    }
}

open class `Default`: Ice.Value {
    public var x: Swift.Int32 = 0
    public var y: Swift.Int32 = 0

    public required init() {}

    public init(x: Swift.Int32, y: Swift.Int32) {
        self.x = x
        self.y = y
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return DefaultTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return DefaultTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.x = try istr.read()
        self.y = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: DefaultTraits.staticId, compactId: -1, last: true)
        ostr.write(self.x)
        ostr.write(self.y)
        ostr.endSlice()
    }
}

/// :nodoc:
public class NoDefault_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return NoDefault.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_NoDefault() -> Ice.ValueTypeResolver {
        return NoDefault_TypeResolver()
    }
}

open class NoDefault: Ice.Value {
    public var x: Swift.Int32 = 10
    public var y: Swift.Int32 = 10

    public required init() {}

    public init(x: Swift.Int32, y: Swift.Int32) {
        self.x = x
        self.y = y
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return NoDefaultTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return NoDefaultTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.x = try istr.read()
        self.y = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: NoDefaultTraits.staticId, compactId: -1, last: true)
        ostr.write(self.x)
        ostr.write(self.y)
        ostr.endSlice()
    }
}
