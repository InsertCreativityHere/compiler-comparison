//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Controller.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

public typealias CommonBoolSeq = [Swift.Bool]

public typealias CommonStringSeq = [Swift.String]

/// Traits for Slice class`CommonConfig`.
public struct CommonConfigTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Common::Config"]
    public static let staticId = "::Test::Common::Config"
}

/// Traits for Slice class`CommonOptionOverrides`.
public struct CommonOptionOverridesTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Common::OptionOverrides"]
    public static let staticId = "::Test::Common::OptionOverrides"
}

/// :nodoc:
public class CommonTestCaseNotExistException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return CommonTestCaseNotExistException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Common_TestCaseNotExistException() -> Ice.UserExceptionTypeResolver {
        return CommonTestCaseNotExistException_TypeResolver()
    }
}

open class CommonTestCaseNotExistException: Ice.UserException {
    public var reason: Swift.String = ""

    public required init() {}

    public init(reason: Swift.String) {
        self.reason = reason
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::Common::TestCaseNotExistException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CommonTestCaseNotExistException.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.reason)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.reason = try istr.read()
        try istr.endSlice()
    }
}

/// :nodoc:
public class CommonTestCaseFailedException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return CommonTestCaseFailedException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Common_TestCaseFailedException() -> Ice.UserExceptionTypeResolver {
        return CommonTestCaseFailedException_TypeResolver()
    }
}

open class CommonTestCaseFailedException: Ice.UserException {
    public var output: Swift.String = ""

    public required init() {}

    public init(output: Swift.String) {
        self.output = output
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::Common::TestCaseFailedException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CommonTestCaseFailedException.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.output)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.output = try istr.read()
        try istr.endSlice()
    }
}

/// Traits for Slice interface`CommonTestCase`.
public struct CommonTestCaseTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Common::TestCase"]
    public static let staticId = "::Test::Common::TestCase"
}

/// Traits for Slice interface`CommonController`.
public struct CommonControllerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Common::Controller"]
    public static let staticId = "::Test::Common::Controller"
}

/// :nodoc:
public class CommonProcessFailedException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return CommonProcessFailedException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Common_ProcessFailedException() -> Ice.UserExceptionTypeResolver {
        return CommonProcessFailedException_TypeResolver()
    }
}

open class CommonProcessFailedException: Ice.UserException {
    public var reason: Swift.String = ""

    public required init() {}

    public init(reason: Swift.String) {
        self.reason = reason
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::Common::ProcessFailedException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CommonProcessFailedException.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.reason)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.reason = try istr.read()
        try istr.endSlice()
    }
}

/// Traits for Slice interface`CommonProcess`.
public struct CommonProcessTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Common::Process"]
    public static let staticId = "::Test::Common::Process"
}

/// Traits for Slice interface`CommonProcessController`.
public struct CommonProcessControllerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Common::ProcessController"]
    public static let staticId = "::Test::Common::ProcessController"
}

/// Traits for Slice interface`CommonBrowserProcessController`.
public struct CommonBrowserProcessControllerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Common::BrowserProcessController", "::Test::Common::ProcessController"]
    public static let staticId = "::Test::Common::BrowserProcessController"
}

/// Traits for Slice interface`CommonProcessControllerRegistry`.
public struct CommonProcessControllerRegistryTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Common::ProcessControllerRegistry"]
    public static let staticId = "::Test::Common::ProcessControllerRegistry"
}

/// CommonTestCasePrx overview.
///
/// CommonTestCasePrx Methods:
///
///  - startServerSide: 
///
///  - startServerSideAsync: 
///
///  - stopServerSide: 
///
///  - stopServerSideAsync: 
///
///  - runClientSide: 
///
///  - runClientSideAsync: 
///
///  - destroy: 
///
///  - destroyAsync: 
public protocol CommonTestCasePrx: Ice.ObjectPrx {}

private final class CommonTestCasePrxI: Ice.ObjectPrxI, CommonTestCasePrx {
    public override class func ice_staticId() -> Swift.String {
        return CommonTestCaseTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ProxyParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: CommonTestCasePrx.Protocol) throws -> CommonTestCasePrx {
    try communicator.makeProxyImpl(proxyString) as CommonTestCasePrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `CommonTestCasePrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `CommonTestCasePrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: CommonTestCasePrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> CommonTestCasePrx? {
    return try CommonTestCasePrxI.checkedCast(prx: prx, facet: facet, context: context) as CommonTestCasePrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `CommonTestCasePrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `CommonTestCasePrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: CommonTestCasePrx.Protocol, facet: Swift.String? = nil) -> CommonTestCasePrx {
    return CommonTestCasePrxI.uncheckedCast(prx: prx, facet: facet) as CommonTestCasePrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `CommonTestCasePrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: CommonTestCasePrx.Protocol) -> Swift.String {
    return CommonTestCaseTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `CommonTestCasePrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `CommonTestCasePrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CommonTestCasePrx?` - The extracted proxy
    func read(_ type: CommonTestCasePrx.Protocol) throws -> CommonTestCasePrx? {
        return try read() as CommonTestCasePrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `CommonTestCasePrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CommonTestCasePrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: CommonTestCasePrx.Protocol) throws -> CommonTestCasePrx? {
        return try read(tag: tag) as CommonTestCasePrxI?
    }
}

/// CommonTestCasePrx overview.
///
/// CommonTestCasePrx Methods:
///
///  - startServerSide: 
///
///  - startServerSideAsync: 
///
///  - stopServerSide: 
///
///  - stopServerSideAsync: 
///
///  - runClientSide: 
///
///  - runClientSideAsync: 
///
///  - destroy: 
///
///  - destroyAsync: 
public extension CommonTestCasePrx {
    ///
    /// - parameter _: `CommonConfig?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.String`
    func startServerSide(_ iceP_config: CommonConfig?, context: Ice.Context? = nil) throws -> Swift.String {
        return try _impl._invoke(operation: "startServerSide",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_config)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.String = try istr.read()
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as CommonTestCaseFailedException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `CommonConfig?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.String>` - The result of the operation
    func startServerSideAsync(_ iceP_config: CommonConfig?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.String> {
        return _impl._invokeAsync(operation: "startServerSide",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_config)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.String = try istr.read()
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as CommonTestCaseFailedException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.String`
    func stopServerSide(_ iceP_success: Swift.Bool, context: Ice.Context? = nil) throws -> Swift.String {
        return try _impl._invoke(operation: "stopServerSide",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_success)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.String = try istr.read()
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as CommonTestCaseFailedException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.String>` - The result of the operation
    func stopServerSideAsync(_ iceP_success: Swift.Bool, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.String> {
        return _impl._invokeAsync(operation: "stopServerSide",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_success)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.String = try istr.read()
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as CommonTestCaseFailedException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter host: `Swift.String`
    ///
    /// - parameter config: `CommonConfig?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.String`
    func runClientSide(host iceP_host: Swift.String, config iceP_config: CommonConfig?, context: Ice.Context? = nil) throws -> Swift.String {
        return try _impl._invoke(operation: "runClientSide",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_host)
                                     ostr.write(iceP_config)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.String = try istr.read()
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as CommonTestCaseFailedException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    ///
    /// - parameter host: `Swift.String`
    ///
    /// - parameter config: `CommonConfig?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.String>` - The result of the operation
    func runClientSideAsync(host iceP_host: Swift.String, config iceP_config: CommonConfig?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.String> {
        return _impl._invokeAsync(operation: "runClientSide",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_host)
                                      ostr.write(iceP_config)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.String = try istr.read()
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as CommonTestCaseFailedException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func destroy(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "destroy",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func destroyAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "destroy",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// CommonControllerPrx overview.
///
/// CommonControllerPrx Methods:
///
///  - runTestCase: 
///
///  - runTestCaseAsync: 
///
///  - getOptionOverrides: 
///
///  - getOptionOverridesAsync: 
///
///  - getTestSuites: 
///
///  - getTestSuitesAsync: 
///
///  - getHost: 
///
///  - getHostAsync: 
public protocol CommonControllerPrx: Ice.ObjectPrx {}

private final class CommonControllerPrxI: Ice.ObjectPrxI, CommonControllerPrx {
    public override class func ice_staticId() -> Swift.String {
        return CommonControllerTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ProxyParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: CommonControllerPrx.Protocol) throws -> CommonControllerPrx {
    try communicator.makeProxyImpl(proxyString) as CommonControllerPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `CommonControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `CommonControllerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: CommonControllerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> CommonControllerPrx? {
    return try CommonControllerPrxI.checkedCast(prx: prx, facet: facet, context: context) as CommonControllerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `CommonControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `CommonControllerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: CommonControllerPrx.Protocol, facet: Swift.String? = nil) -> CommonControllerPrx {
    return CommonControllerPrxI.uncheckedCast(prx: prx, facet: facet) as CommonControllerPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `CommonControllerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: CommonControllerPrx.Protocol) -> Swift.String {
    return CommonControllerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `CommonControllerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `CommonControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CommonControllerPrx?` - The extracted proxy
    func read(_ type: CommonControllerPrx.Protocol) throws -> CommonControllerPrx? {
        return try read() as CommonControllerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `CommonControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CommonControllerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: CommonControllerPrx.Protocol) throws -> CommonControllerPrx? {
        return try read(tag: tag) as CommonControllerPrxI?
    }
}

/// CommonControllerPrx overview.
///
/// CommonControllerPrx Methods:
///
///  - runTestCase: 
///
///  - runTestCaseAsync: 
///
///  - getOptionOverrides: 
///
///  - getOptionOverridesAsync: 
///
///  - getTestSuites: 
///
///  - getTestSuitesAsync: 
///
///  - getHost: 
///
///  - getHostAsync: 
public extension CommonControllerPrx {
    ///
    /// - parameter mapping: `Swift.String`
    ///
    /// - parameter testsuite: `Swift.String`
    ///
    /// - parameter testcase: `Swift.String`
    ///
    /// - parameter cross: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `CommonTestCasePrx?`
    func runTestCase(mapping iceP_mapping: Swift.String, testsuite iceP_testsuite: Swift.String, testcase iceP_testcase: Swift.String, cross iceP_cross: Swift.String, context: Ice.Context? = nil) throws -> CommonTestCasePrx? {
        return try _impl._invoke(operation: "runTestCase",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_mapping)
                                     ostr.write(iceP_testsuite)
                                     ostr.write(iceP_testcase)
                                     ostr.write(iceP_cross)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: CommonTestCasePrx? = try istr.read(CommonTestCasePrx.self)
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as CommonTestCaseNotExistException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    ///
    /// - parameter mapping: `Swift.String`
    ///
    /// - parameter testsuite: `Swift.String`
    ///
    /// - parameter testcase: `Swift.String`
    ///
    /// - parameter cross: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<CommonTestCasePrx?>` - The result of the operation
    func runTestCaseAsync(mapping iceP_mapping: Swift.String, testsuite iceP_testsuite: Swift.String, testcase iceP_testcase: Swift.String, cross iceP_cross: Swift.String, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<CommonTestCasePrx?> {
        return _impl._invokeAsync(operation: "runTestCase",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_mapping)
                                      ostr.write(iceP_testsuite)
                                      ostr.write(iceP_testcase)
                                      ostr.write(iceP_cross)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: CommonTestCasePrx? = try istr.read(CommonTestCasePrx.self)
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as CommonTestCaseNotExistException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `CommonOptionOverrides?`
    func getOptionOverrides(context: Ice.Context? = nil) throws -> CommonOptionOverrides? {
        return try _impl._invoke(operation: "getOptionOverrides",
                                 mode: .Normal,
                                 read: { istr in
                                     var iceP_returnValue: CommonOptionOverrides?
                                     try istr.read(CommonOptionOverrides.self) { iceP_returnValue = $0 }
                                     try istr.readPendingValues()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<CommonOptionOverrides?>` - The result of the operation
    func getOptionOverridesAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<CommonOptionOverrides?> {
        return _impl._invokeAsync(operation: "getOptionOverrides",
                                  mode: .Normal,
                                  read: { istr in
                                      var iceP_returnValue: CommonOptionOverrides?
                                      try istr.read(CommonOptionOverrides.self) { iceP_returnValue = $0 }
                                      try istr.readPendingValues()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `CommonStringSeq`
    func getTestSuites(_ iceP_mapping: Swift.String, context: Ice.Context? = nil) throws -> CommonStringSeq {
        return try _impl._invoke(operation: "getTestSuites",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_mapping)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: CommonStringSeq = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<CommonStringSeq>` - The result of the operation
    func getTestSuitesAsync(_ iceP_mapping: Swift.String, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<CommonStringSeq> {
        return _impl._invokeAsync(operation: "getTestSuites",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_mapping)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: CommonStringSeq = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter protocol: `Swift.String`
    ///
    /// - parameter ipv6: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.String`
    func getHost(protocol iceP_protocol: Swift.String, ipv6 iceP_ipv6: Swift.Bool, context: Ice.Context? = nil) throws -> Swift.String {
        return try _impl._invoke(operation: "getHost",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_protocol)
                                     ostr.write(iceP_ipv6)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.String = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter protocol: `Swift.String`
    ///
    /// - parameter ipv6: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.String>` - The result of the operation
    func getHostAsync(protocol iceP_protocol: Swift.String, ipv6 iceP_ipv6: Swift.Bool, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.String> {
        return _impl._invokeAsync(operation: "getHost",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_protocol)
                                      ostr.write(iceP_ipv6)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.String = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// CommonProcessPrx overview.
///
/// CommonProcessPrx Methods:
///
///  - waitReady: 
///
///  - waitReadyAsync: 
///
///  - waitSuccess: 
///
///  - waitSuccessAsync: 
///
///  - terminate: 
///
///  - terminateAsync: 
public protocol CommonProcessPrx: Ice.ObjectPrx {}

private final class CommonProcessPrxI: Ice.ObjectPrxI, CommonProcessPrx {
    public override class func ice_staticId() -> Swift.String {
        return CommonProcessTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ProxyParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: CommonProcessPrx.Protocol) throws -> CommonProcessPrx {
    try communicator.makeProxyImpl(proxyString) as CommonProcessPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `CommonProcessPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `CommonProcessPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: CommonProcessPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> CommonProcessPrx? {
    return try CommonProcessPrxI.checkedCast(prx: prx, facet: facet, context: context) as CommonProcessPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `CommonProcessPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `CommonProcessPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: CommonProcessPrx.Protocol, facet: Swift.String? = nil) -> CommonProcessPrx {
    return CommonProcessPrxI.uncheckedCast(prx: prx, facet: facet) as CommonProcessPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `CommonProcessPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: CommonProcessPrx.Protocol) -> Swift.String {
    return CommonProcessTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `CommonProcessPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `CommonProcessPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CommonProcessPrx?` - The extracted proxy
    func read(_ type: CommonProcessPrx.Protocol) throws -> CommonProcessPrx? {
        return try read() as CommonProcessPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `CommonProcessPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CommonProcessPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: CommonProcessPrx.Protocol) throws -> CommonProcessPrx? {
        return try read(tag: tag) as CommonProcessPrxI?
    }
}

/// CommonProcessPrx overview.
///
/// CommonProcessPrx Methods:
///
///  - waitReady: 
///
///  - waitReadyAsync: 
///
///  - waitSuccess: 
///
///  - waitSuccessAsync: 
///
///  - terminate: 
///
///  - terminateAsync: 
public extension CommonProcessPrx {
    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func waitReady(_ iceP_timeout: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "waitReady",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_timeout)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as CommonProcessFailedException {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func waitReadyAsync(_ iceP_timeout: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "waitReady",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_timeout)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as CommonProcessFailedException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func waitSuccess(_ iceP_timeout: Swift.Int32, context: Ice.Context? = nil) throws -> Swift.Int32 {
        return try _impl._invoke(operation: "waitSuccess",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_timeout)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int32 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as CommonProcessFailedException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Int32>` - The result of the operation
    func waitSuccessAsync(_ iceP_timeout: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Int32> {
        return _impl._invokeAsync(operation: "waitSuccess",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_timeout)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int32 = try istr.read()
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as CommonProcessFailedException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.String`
    func terminate(context: Ice.Context? = nil) throws -> Swift.String {
        return try _impl._invoke(operation: "terminate",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: Swift.String = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.String>` - The result of the operation
    func terminateAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.String> {
        return _impl._invokeAsync(operation: "terminate",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: Swift.String = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// CommonProcessControllerPrx overview.
///
/// CommonProcessControllerPrx Methods:
///
///  - start: 
///
///  - startAsync: 
///
///  - getHost: 
///
///  - getHostAsync: 
public protocol CommonProcessControllerPrx: Ice.ObjectPrx {}

private final class CommonProcessControllerPrxI: Ice.ObjectPrxI, CommonProcessControllerPrx {
    public override class func ice_staticId() -> Swift.String {
        return CommonProcessControllerTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ProxyParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: CommonProcessControllerPrx.Protocol) throws -> CommonProcessControllerPrx {
    try communicator.makeProxyImpl(proxyString) as CommonProcessControllerPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `CommonProcessControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `CommonProcessControllerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: CommonProcessControllerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> CommonProcessControllerPrx? {
    return try CommonProcessControllerPrxI.checkedCast(prx: prx, facet: facet, context: context) as CommonProcessControllerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `CommonProcessControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `CommonProcessControllerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: CommonProcessControllerPrx.Protocol, facet: Swift.String? = nil) -> CommonProcessControllerPrx {
    return CommonProcessControllerPrxI.uncheckedCast(prx: prx, facet: facet) as CommonProcessControllerPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `CommonProcessControllerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: CommonProcessControllerPrx.Protocol) -> Swift.String {
    return CommonProcessControllerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `CommonProcessControllerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `CommonProcessControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CommonProcessControllerPrx?` - The extracted proxy
    func read(_ type: CommonProcessControllerPrx.Protocol) throws -> CommonProcessControllerPrx? {
        return try read() as CommonProcessControllerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `CommonProcessControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CommonProcessControllerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: CommonProcessControllerPrx.Protocol) throws -> CommonProcessControllerPrx? {
        return try read(tag: tag) as CommonProcessControllerPrxI?
    }
}

/// CommonProcessControllerPrx overview.
///
/// CommonProcessControllerPrx Methods:
///
///  - start: 
///
///  - startAsync: 
///
///  - getHost: 
///
///  - getHostAsync: 
public extension CommonProcessControllerPrx {
    ///
    /// - parameter testsuite: `Swift.String`
    ///
    /// - parameter exe: `Swift.String`
    ///
    /// - parameter args: `CommonStringSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `CommonProcessPrx?`
    func start(testsuite iceP_testsuite: Swift.String, exe iceP_exe: Swift.String, args iceP_args: CommonStringSeq, context: Ice.Context? = nil) throws -> CommonProcessPrx? {
        return try _impl._invoke(operation: "start",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_testsuite)
                                     ostr.write(iceP_exe)
                                     ostr.write(iceP_args)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: CommonProcessPrx? = try istr.read(CommonProcessPrx.self)
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as CommonProcessFailedException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    ///
    /// - parameter testsuite: `Swift.String`
    ///
    /// - parameter exe: `Swift.String`
    ///
    /// - parameter args: `CommonStringSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<CommonProcessPrx?>` - The result of the operation
    func startAsync(testsuite iceP_testsuite: Swift.String, exe iceP_exe: Swift.String, args iceP_args: CommonStringSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<CommonProcessPrx?> {
        return _impl._invokeAsync(operation: "start",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_testsuite)
                                      ostr.write(iceP_exe)
                                      ostr.write(iceP_args)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: CommonProcessPrx? = try istr.read(CommonProcessPrx.self)
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as CommonProcessFailedException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter protocol: `Swift.String`
    ///
    /// - parameter ipv6: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.String`
    func getHost(protocol iceP_protocol: Swift.String, ipv6 iceP_ipv6: Swift.Bool, context: Ice.Context? = nil) throws -> Swift.String {
        return try _impl._invoke(operation: "getHost",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_protocol)
                                     ostr.write(iceP_ipv6)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.String = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter protocol: `Swift.String`
    ///
    /// - parameter ipv6: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.String>` - The result of the operation
    func getHostAsync(protocol iceP_protocol: Swift.String, ipv6 iceP_ipv6: Swift.Bool, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.String> {
        return _impl._invokeAsync(operation: "getHost",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_protocol)
                                      ostr.write(iceP_ipv6)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.String = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// CommonBrowserProcessControllerPrx overview.
///
/// CommonBrowserProcessControllerPrx Methods:
///
///  - redirect: 
///
///  - redirectAsync: 
public protocol CommonBrowserProcessControllerPrx: CommonProcessControllerPrx {}

private final class CommonBrowserProcessControllerPrxI: Ice.ObjectPrxI, CommonBrowserProcessControllerPrx {
    public override class func ice_staticId() -> Swift.String {
        return CommonBrowserProcessControllerTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ProxyParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: CommonBrowserProcessControllerPrx.Protocol) throws -> CommonBrowserProcessControllerPrx {
    try communicator.makeProxyImpl(proxyString) as CommonBrowserProcessControllerPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `CommonBrowserProcessControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `CommonBrowserProcessControllerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: CommonBrowserProcessControllerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> CommonBrowserProcessControllerPrx? {
    return try CommonBrowserProcessControllerPrxI.checkedCast(prx: prx, facet: facet, context: context) as CommonBrowserProcessControllerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `CommonBrowserProcessControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `CommonBrowserProcessControllerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: CommonBrowserProcessControllerPrx.Protocol, facet: Swift.String? = nil) -> CommonBrowserProcessControllerPrx {
    return CommonBrowserProcessControllerPrxI.uncheckedCast(prx: prx, facet: facet) as CommonBrowserProcessControllerPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `CommonBrowserProcessControllerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: CommonBrowserProcessControllerPrx.Protocol) -> Swift.String {
    return CommonBrowserProcessControllerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `CommonBrowserProcessControllerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `CommonBrowserProcessControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CommonBrowserProcessControllerPrx?` - The extracted proxy
    func read(_ type: CommonBrowserProcessControllerPrx.Protocol) throws -> CommonBrowserProcessControllerPrx? {
        return try read() as CommonBrowserProcessControllerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `CommonBrowserProcessControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CommonBrowserProcessControllerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: CommonBrowserProcessControllerPrx.Protocol) throws -> CommonBrowserProcessControllerPrx? {
        return try read(tag: tag) as CommonBrowserProcessControllerPrxI?
    }
}

/// CommonBrowserProcessControllerPrx overview.
///
/// CommonBrowserProcessControllerPrx Methods:
///
///  - redirect: 
///
///  - redirectAsync: 
public extension CommonBrowserProcessControllerPrx {
    ///
    /// - parameter _: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func redirect(_ iceP_url: Swift.String, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "redirect",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_url)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func redirectAsync(_ iceP_url: Swift.String, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "redirect",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_url)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// CommonProcessControllerRegistryPrx overview.
///
/// CommonProcessControllerRegistryPrx Methods:
///
///  - setProcessController: 
///
///  - setProcessControllerAsync: 
public protocol CommonProcessControllerRegistryPrx: Ice.ObjectPrx {}

private final class CommonProcessControllerRegistryPrxI: Ice.ObjectPrxI, CommonProcessControllerRegistryPrx {
    public override class func ice_staticId() -> Swift.String {
        return CommonProcessControllerRegistryTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ProxyParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: CommonProcessControllerRegistryPrx.Protocol) throws -> CommonProcessControllerRegistryPrx {
    try communicator.makeProxyImpl(proxyString) as CommonProcessControllerRegistryPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `CommonProcessControllerRegistryPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `CommonProcessControllerRegistryPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: CommonProcessControllerRegistryPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> CommonProcessControllerRegistryPrx? {
    return try CommonProcessControllerRegistryPrxI.checkedCast(prx: prx, facet: facet, context: context) as CommonProcessControllerRegistryPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `CommonProcessControllerRegistryPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `CommonProcessControllerRegistryPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: CommonProcessControllerRegistryPrx.Protocol, facet: Swift.String? = nil) -> CommonProcessControllerRegistryPrx {
    return CommonProcessControllerRegistryPrxI.uncheckedCast(prx: prx, facet: facet) as CommonProcessControllerRegistryPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `CommonProcessControllerRegistryPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: CommonProcessControllerRegistryPrx.Protocol) -> Swift.String {
    return CommonProcessControllerRegistryTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `CommonProcessControllerRegistryPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `CommonProcessControllerRegistryPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CommonProcessControllerRegistryPrx?` - The extracted proxy
    func read(_ type: CommonProcessControllerRegistryPrx.Protocol) throws -> CommonProcessControllerRegistryPrx? {
        return try read() as CommonProcessControllerRegistryPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `CommonProcessControllerRegistryPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `CommonProcessControllerRegistryPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: CommonProcessControllerRegistryPrx.Protocol) throws -> CommonProcessControllerRegistryPrx? {
        return try read(tag: tag) as CommonProcessControllerRegistryPrxI?
    }
}

/// CommonProcessControllerRegistryPrx overview.
///
/// CommonProcessControllerRegistryPrx Methods:
///
///  - setProcessController: 
///
///  - setProcessControllerAsync: 
public extension CommonProcessControllerRegistryPrx {
    ///
    /// - parameter _: `CommonProcessControllerPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func setProcessController(_ iceP_controller: CommonProcessControllerPrx?, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "setProcessController",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_controller)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `CommonProcessControllerPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func setProcessControllerAsync(_ iceP_controller: CommonProcessControllerPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "setProcessController",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_controller)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// :nodoc:
public class CommonConfig_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return CommonConfig.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Common_Config() -> Ice.ValueTypeResolver {
        return CommonConfig_TypeResolver()
    }
}

open class CommonConfig: Ice.Value {
    public var `protocol`: Swift.String? = nil
    public var mx: Swift.Bool? = nil
    public var serialize: Swift.Bool? = nil
    public var compress: Swift.Bool? = nil
    public var ipv6: Swift.Bool? = nil
    public var cprops: CommonStringSeq? = nil
    public var sprops: CommonStringSeq? = nil

    public required init() {}

    public init(`protocol`: Swift.String?, mx: Swift.Bool?, serialize: Swift.Bool?, compress: Swift.Bool?, ipv6: Swift.Bool?, cprops: CommonStringSeq?, sprops: CommonStringSeq?) {
        self.`protocol` = `protocol`
        self.mx = mx
        self.serialize = serialize
        self.compress = compress
        self.ipv6 = ipv6
        self.cprops = cprops
        self.sprops = sprops
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return CommonConfigTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return CommonConfigTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`protocol` = try istr.read(tag: 1)
        self.mx = try istr.read(tag: 2)
        self.serialize = try istr.read(tag: 3)
        self.compress = try istr.read(tag: 4)
        self.ipv6 = try istr.read(tag: 5)
        self.cprops = try istr.read(tag: 6)
        self.sprops = try istr.read(tag: 7)
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CommonConfigTraits.staticId, compactId: -1, last: true)
        ostr.write(tag: 1, value: self.`protocol`)
        ostr.write(tag: 2, value: self.mx)
        ostr.write(tag: 3, value: self.serialize)
        ostr.write(tag: 4, value: self.compress)
        ostr.write(tag: 5, value: self.ipv6)
        ostr.write(tag: 6, value: self.cprops)
        ostr.write(tag: 7, value: self.sprops)
        ostr.endSlice()
    }
}

/// :nodoc:
public class CommonOptionOverrides_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return CommonOptionOverrides.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Common_OptionOverrides() -> Ice.ValueTypeResolver {
        return CommonOptionOverrides_TypeResolver()
    }
}

open class CommonOptionOverrides: Ice.Value {
    public var `protocol`: CommonStringSeq? = nil
    public var mx: CommonBoolSeq? = nil
    public var serialize: CommonBoolSeq? = nil
    public var compress: CommonBoolSeq? = nil
    public var ipv6: CommonBoolSeq? = nil

    public required init() {}

    public init(`protocol`: CommonStringSeq?, mx: CommonBoolSeq?, serialize: CommonBoolSeq?, compress: CommonBoolSeq?, ipv6: CommonBoolSeq?) {
        self.`protocol` = `protocol`
        self.mx = mx
        self.serialize = serialize
        self.compress = compress
        self.ipv6 = ipv6
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return CommonOptionOverridesTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return CommonOptionOverridesTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`protocol` = try istr.read(tag: 1)
        self.mx = try istr.read(tag: 2)
        self.serialize = try istr.read(tag: 3)
        self.compress = try istr.read(tag: 4)
        self.ipv6 = try istr.read(tag: 5)
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CommonOptionOverridesTraits.staticId, compactId: -1, last: true)
        ostr.write(tag: 1, value: self.`protocol`)
        ostr.write(tag: 2, value: self.mx)
        ostr.write(tag: 3, value: self.serialize)
        ostr.write(tag: 4, value: self.compress)
        ostr.write(tag: 5, value: self.ipv6)
        ostr.endSlice()
    }
}


/// Dispatcher for `CommonTestCase` servants.
public struct CommonTestCaseDisp: Ice.Dispatcher {
    public let servant: CommonTestCase
    private static let defaultObject = Ice.ObjectI<CommonTestCaseTraits>()

    public init(_ servant: CommonTestCase) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "destroy":
            servant._iceD_destroy(request)
        case "ice_id":
            (servant as? Ice.Object ?? CommonTestCaseDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? CommonTestCaseDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? CommonTestCaseDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? CommonTestCaseDisp.defaultObject)._iceD_ice_ping(request)
        case "runClientSide":
            servant._iceD_runClientSide(request)
        case "startServerSide":
            servant._iceD_startServerSide(request)
        case "stopServerSide":
            servant._iceD_stopServerSide(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol CommonTestCase {
    ///
    /// - parameter config: `CommonConfig?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.String`
    func startServerSide(config: CommonConfig?, current: Ice.Current) throws -> Swift.String

    ///
    /// - parameter success: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.String`
    func stopServerSide(success: Swift.Bool, current: Ice.Current) throws -> Swift.String

    ///
    /// - parameter host: `Swift.String`
    ///
    /// - parameter config: `CommonConfig?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.String`
    func runClientSide(host: Swift.String, config: CommonConfig?, current: Ice.Current) throws -> Swift.String

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func destroy(current: Ice.Current) throws
}


/// Dispatcher for `CommonController` servants.
public struct CommonControllerDisp: Ice.Dispatcher {
    public let servant: CommonController
    private static let defaultObject = Ice.ObjectI<CommonControllerTraits>()

    public init(_ servant: CommonController) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "getHost":
            servant._iceD_getHost(request)
        case "getOptionOverrides":
            servant._iceD_getOptionOverrides(request)
        case "getTestSuites":
            servant._iceD_getTestSuites(request)
        case "ice_id":
            (servant as? Ice.Object ?? CommonControllerDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? CommonControllerDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? CommonControllerDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? CommonControllerDisp.defaultObject)._iceD_ice_ping(request)
        case "runTestCase":
            servant._iceD_runTestCase(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol CommonController {
    ///
    /// - parameter mapping: `Swift.String`
    ///
    /// - parameter testsuite: `Swift.String`
    ///
    /// - parameter testcase: `Swift.String`
    ///
    /// - parameter cross: `Swift.String`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `CommonTestCasePrx?`
    func runTestCase(mapping: Swift.String, testsuite: Swift.String, testcase: Swift.String, cross: Swift.String, current: Ice.Current) throws -> CommonTestCasePrx?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `CommonOptionOverrides?`
    func getOptionOverrides(current: Ice.Current) throws -> CommonOptionOverrides?

    ///
    /// - parameter mapping: `Swift.String`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `CommonStringSeq`
    func getTestSuites(mapping: Swift.String, current: Ice.Current) throws -> CommonStringSeq

    ///
    /// - parameter protocol: `Swift.String`
    ///
    /// - parameter ipv6: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.String`
    func getHost(protocol: Swift.String, ipv6: Swift.Bool, current: Ice.Current) throws -> Swift.String
}


/// Dispatcher for `CommonProcess` servants.
public struct CommonProcessDisp: Ice.Dispatcher {
    public let servant: CommonProcess
    private static let defaultObject = Ice.ObjectI<CommonProcessTraits>()

    public init(_ servant: CommonProcess) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "ice_id":
            (servant as? Ice.Object ?? CommonProcessDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? CommonProcessDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? CommonProcessDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? CommonProcessDisp.defaultObject)._iceD_ice_ping(request)
        case "terminate":
            servant._iceD_terminate(request)
        case "waitReady":
            servant._iceD_waitReady(request)
        case "waitSuccess":
            servant._iceD_waitSuccess(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol CommonProcess {
    ///
    /// - parameter timeout: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func waitReady(timeout: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter timeout: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func waitSuccess(timeout: Swift.Int32, current: Ice.Current) throws -> Swift.Int32

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.String`
    func terminate(current: Ice.Current) throws -> Swift.String
}


/// Dispatcher for `CommonProcessController` servants.
public struct CommonProcessControllerDisp: Ice.Dispatcher {
    public let servant: CommonProcessController
    private static let defaultObject = Ice.ObjectI<CommonProcessControllerTraits>()

    public init(_ servant: CommonProcessController) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "getHost":
            servant._iceD_getHost(request)
        case "ice_id":
            (servant as? Ice.Object ?? CommonProcessControllerDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? CommonProcessControllerDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? CommonProcessControllerDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? CommonProcessControllerDisp.defaultObject)._iceD_ice_ping(request)
        case "start":
            servant._iceD_start(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol CommonProcessController {
    ///
    /// - parameter testsuite: `Swift.String`
    ///
    /// - parameter exe: `Swift.String`
    ///
    /// - parameter args: `CommonStringSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `CommonProcessPrx?`
    func start(testsuite: Swift.String, exe: Swift.String, args: CommonStringSeq, current: Ice.Current) throws -> CommonProcessPrx?

    ///
    /// - parameter protocol: `Swift.String`
    ///
    /// - parameter ipv6: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.String`
    func getHost(protocol: Swift.String, ipv6: Swift.Bool, current: Ice.Current) throws -> Swift.String
}


/// Dispatcher for `CommonBrowserProcessController` servants.
public struct CommonBrowserProcessControllerDisp: Ice.Dispatcher {
    public let servant: CommonBrowserProcessController
    private static let defaultObject = Ice.ObjectI<CommonBrowserProcessControllerTraits>()

    public init(_ servant: CommonBrowserProcessController) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "getHost":
            servant._iceD_getHost(request)
        case "ice_id":
            (servant as? Ice.Object ?? CommonBrowserProcessControllerDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? CommonBrowserProcessControllerDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? CommonBrowserProcessControllerDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? CommonBrowserProcessControllerDisp.defaultObject)._iceD_ice_ping(request)
        case "redirect":
            servant._iceD_redirect(request)
        case "start":
            servant._iceD_start(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol CommonBrowserProcessController: CommonProcessController {
    ///
    /// - parameter url: `Swift.String`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func redirect(url: Swift.String, current: Ice.Current) throws
}


/// Dispatcher for `CommonProcessControllerRegistry` servants.
public struct CommonProcessControllerRegistryDisp: Ice.Dispatcher {
    public let servant: CommonProcessControllerRegistry
    private static let defaultObject = Ice.ObjectI<CommonProcessControllerRegistryTraits>()

    public init(_ servant: CommonProcessControllerRegistry) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "ice_id":
            (servant as? Ice.Object ?? CommonProcessControllerRegistryDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? CommonProcessControllerRegistryDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? CommonProcessControllerRegistryDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? CommonProcessControllerRegistryDisp.defaultObject)._iceD_ice_ping(request)
        case "setProcessController":
            servant._iceD_setProcessController(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol CommonProcessControllerRegistry {
    ///
    /// - parameter controller: `CommonProcessControllerPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func setProcessController(controller: CommonProcessControllerPrx?, current: Ice.Current) throws
}

/// CommonTestCase overview.
///
/// CommonTestCase Methods:
///
///  - startServerSide: 
///
///  - stopServerSide: 
///
///  - runClientSide: 
///
///  - destroy: 
extension CommonTestCase {
    public func _iceD_startServerSide(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            var iceP_config: CommonConfig?
            try istr.read(CommonConfig.self) { iceP_config = $0 }
            try istr.readPendingValues()

            let iceP_returnValue = try self.startServerSide(config: iceP_config, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_stopServerSide(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_success: Swift.Bool = try istr.read()

            let iceP_returnValue = try self.stopServerSide(success: iceP_success, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_runClientSide(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_host: Swift.String = try istr.read()
            var iceP_config: CommonConfig?
            try istr.read(CommonConfig.self) { iceP_config = $0 }
            try istr.readPendingValues()

            let iceP_returnValue = try self.runClientSide(host: iceP_host, config: iceP_config, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_destroy(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.destroy(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}

/// CommonController overview.
///
/// CommonController Methods:
///
///  - runTestCase: 
///
///  - getOptionOverrides: 
///
///  - getTestSuites: 
///
///  - getHost: 
extension CommonController {
    public func _iceD_runTestCase(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_mapping: Swift.String = try istr.read()
            let iceP_testsuite: Swift.String = try istr.read()
            let iceP_testcase: Swift.String = try istr.read()
            let iceP_cross: Swift.String = try istr.read()

            let iceP_returnValue = try self.runTestCase(mapping: iceP_mapping, testsuite: iceP_testsuite, testcase: iceP_testcase, cross: iceP_cross, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_getOptionOverrides(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            let iceP_returnValue = try self.getOptionOverrides(current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_getTestSuites(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_mapping: Swift.String = try istr.read()

            let iceP_returnValue = try self.getTestSuites(mapping: iceP_mapping, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_getHost(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_protocol: Swift.String = try istr.read()
            let iceP_ipv6: Swift.Bool = try istr.read()

            let iceP_returnValue = try self.getHost(protocol: iceP_protocol, ipv6: iceP_ipv6, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}

/// CommonProcess overview.
///
/// CommonProcess Methods:
///
///  - waitReady: 
///
///  - waitSuccess: 
///
///  - terminate: 
extension CommonProcess {
    public func _iceD_waitReady(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_timeout: Swift.Int32 = try istr.read()

            try self.waitReady(timeout: iceP_timeout, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_waitSuccess(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_timeout: Swift.Int32 = try istr.read()

            let iceP_returnValue = try self.waitSuccess(timeout: iceP_timeout, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_terminate(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            let iceP_returnValue = try self.terminate(current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}

/// CommonProcessController overview.
///
/// CommonProcessController Methods:
///
///  - start: 
///
///  - getHost: 
extension CommonProcessController {
    public func _iceD_start(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_testsuite: Swift.String = try istr.read()
            let iceP_exe: Swift.String = try istr.read()
            let iceP_args: CommonStringSeq = try istr.read()

            let iceP_returnValue = try self.start(testsuite: iceP_testsuite, exe: iceP_exe, args: iceP_args, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_getHost(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_protocol: Swift.String = try istr.read()
            let iceP_ipv6: Swift.Bool = try istr.read()

            let iceP_returnValue = try self.getHost(protocol: iceP_protocol, ipv6: iceP_ipv6, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}

/// CommonBrowserProcessController overview.
///
/// CommonBrowserProcessController Methods:
///
///  - redirect: 
extension CommonBrowserProcessController {
    public func _iceD_redirect(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_url: Swift.String = try istr.read()

            try self.redirect(url: iceP_url, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}

/// CommonProcessControllerRegistry overview.
///
/// CommonProcessControllerRegistry Methods:
///
///  - setProcessController: 
extension CommonProcessControllerRegistry {
    public func _iceD_setProcessController(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_controller: CommonProcessControllerPrx? = try istr.read(CommonProcessControllerPrx.self)

            try self.setProcessController(controller: iceP_controller, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}
