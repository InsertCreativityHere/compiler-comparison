//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Inherit.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

public struct Struct1: Swift.Hashable {
    public var isa: Swift.Int32 = 0
    public var retainCount: Swift.Int32 = 0

    public init() {}

    public init(isa: Swift.Int32, retainCount: Swift.Int32) {
        self.isa = isa
        self.retainCount = retainCount
    }
}

/// An `Ice.InputStream` extension to read `Struct1` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `Struct1` structured value from the stream.
    ///
    /// - returns: `Struct1` - The structured value read from the stream.
    func read() throws -> Struct1 {
        var v = Struct1()
        v.isa = try self.read()
        v.retainCount = try self.read()
        return v
    }

    /// Read an optional `Struct1?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `Struct1?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> Struct1? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as Struct1
    }
}

/// An `Ice.OutputStream` extension to write `Struct1` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `Struct1` structured value to the stream.
    ///
    /// - parameter _: `Struct1` - The value to write to the stream.
    func write(_ v: Struct1) {
        self.write(v.isa)
        self.write(v.retainCount)
    }

    /// Write an optional `Struct1?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `Struct1?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: Struct1?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 8)
                write(v)
            }
        }
    }
}

/// :nodoc:
public class Exception1_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return Exception1.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Exception1() -> Ice.UserExceptionTypeResolver {
        return Exception1_TypeResolver()
    }
}

open class Exception1: Ice.UserException {
    public var isa: Swift.Int32 = 0
    public var reason: Swift.Int32 = 0
    public var raise: Swift.Int32 = 0
    public var name: Swift.Int32 = 0
    public var callStackReturnAddresses: Swift.Int32 = 0
    public var userInfo: Swift.Int32 = 0
    public var reserved: Swift.Int32 = 0

    public required init() {}

    public init(isa: Swift.Int32, reason: Swift.Int32, raise: Swift.Int32, name: Swift.Int32, callStackReturnAddresses: Swift.Int32, userInfo: Swift.Int32, reserved: Swift.Int32) {
        self.isa = isa
        self.reason = reason
        self.raise = raise
        self.name = name
        self.callStackReturnAddresses = callStackReturnAddresses
        self.userInfo = userInfo
        self.reserved = reserved
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::Exception1"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: Exception1.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.isa)
        ostr.write(self.reason)
        ostr.write(self.raise)
        ostr.write(self.name)
        ostr.write(self.callStackReturnAddresses)
        ostr.write(self.userInfo)
        ostr.write(self.reserved)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.isa = try istr.read()
        self.reason = try istr.read()
        self.raise = try istr.read()
        self.name = try istr.read()
        self.callStackReturnAddresses = try istr.read()
        self.userInfo = try istr.read()
        self.reserved = try istr.read()
        try istr.endSlice()
    }
}

/// Traits for Slice class`Class1`.
public struct Class1Traits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Class1"]
    public static let staticId = "::Test::Class1"
}

/// Traits for Slice interface`Intf1`.
public struct Intf1Traits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Intf1"]
    public static let staticId = "::Test::Intf1"
}

/// Traits for Slice interface`Intf2`.
public struct Intf2Traits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Intf2"]
    public static let staticId = "::Test::Intf2"
}

/// Intf1Prx overview.
///
/// Intf1Prx Methods:
///
///  - isa: 
///
///  - isaAsync: 
///
///  - reason: 
///
///  - reasonAsync: 
///
///  - autorelease: 
///
///  - autoreleaseAsync: 
///
///  - classForCoder: 
///
///  - classForCoderAsync: 
///
///  - copy: 
///
///  - copyAsync: 
///
///  - dealloc: 
///
///  - deallocAsync: 
///
///  - description: 
///
///  - descriptionAsync: 
///
///  - hash: 
///
///  - hashAsync: 
///
///  - `init`: 
///
///  - initAsync: 
///
///  - isProxy: 
///
///  - isProxyAsync: 
///
///  - mutableCopy: 
///
///  - mutableCopyAsync: 
///
///  - release: 
///
///  - releaseAsync: 
///
///  - retain: 
///
///  - retainAsync: 
///
///  - retainCount: 
///
///  - retainCountAsync: 
///
///  - `self`: 
///
///  - selfAsync: 
///
///  - superclass: 
///
///  - superclassAsync: 
///
///  - zone: 
///
///  - zoneAsync: 
public protocol Intf1Prx: Ice.ObjectPrx {}

private final class Intf1PrxI: Ice.ObjectPrxI, Intf1Prx {
    public override class func ice_staticId() -> Swift.String {
        return Intf1Traits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `Intf1Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `Intf1Prx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: Intf1Prx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> Intf1Prx? {
    return try Intf1PrxI.checkedCast(prx: prx, facet: facet, context: context) as Intf1PrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `Intf1Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `Intf1Prx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: Intf1Prx.Protocol, facet: Swift.String? = nil) -> Intf1Prx {
    return Intf1PrxI.uncheckedCast(prx: prx, facet: facet) as Intf1PrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `Intf1Prx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: Intf1Prx.Protocol) -> Swift.String {
    return Intf1Traits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `Intf1Prx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `Intf1Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `Intf1Prx?` - The extracted proxy
    func read(_ type: Intf1Prx.Protocol) throws -> Intf1Prx? {
        return try read() as Intf1PrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `Intf1Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `Intf1Prx` - The extracted proxy.
    func read(tag: Swift.Int32, type: Intf1Prx.Protocol) throws -> Intf1Prx? {
        return try read(tag: tag) as Intf1PrxI?
    }
}

/// Intf1Prx overview.
///
/// Intf1Prx Methods:
///
///  - isa: 
///
///  - isaAsync: 
///
///  - reason: 
///
///  - reasonAsync: 
///
///  - autorelease: 
///
///  - autoreleaseAsync: 
///
///  - classForCoder: 
///
///  - classForCoderAsync: 
///
///  - copy: 
///
///  - copyAsync: 
///
///  - dealloc: 
///
///  - deallocAsync: 
///
///  - description: 
///
///  - descriptionAsync: 
///
///  - hash: 
///
///  - hashAsync: 
///
///  - `init`: 
///
///  - initAsync: 
///
///  - isProxy: 
///
///  - isProxyAsync: 
///
///  - mutableCopy: 
///
///  - mutableCopyAsync: 
///
///  - release: 
///
///  - releaseAsync: 
///
///  - retain: 
///
///  - retainAsync: 
///
///  - retainCount: 
///
///  - retainCountAsync: 
///
///  - `self`: 
///
///  - selfAsync: 
///
///  - superclass: 
///
///  - superclassAsync: 
///
///  - zone: 
///
///  - zoneAsync: 
public extension Intf1Prx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func isa(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "isa",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func isaAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "isa",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func reason(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "reason",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func reasonAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "reason",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func autorelease(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "autorelease",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func autoreleaseAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "autorelease",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func classForCoder(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "classForCoder",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func classForCoderAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "classForCoder",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func copy(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "copy",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func copyAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "copy",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func dealloc(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "dealloc",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func deallocAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "dealloc",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func description(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "description",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func descriptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "description",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func hash(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "hash",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func hashAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "hash",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func `init`(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "init",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func initAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "init",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func isProxy(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "isProxy",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func isProxyAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "isProxy",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func mutableCopy(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "mutableCopy",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func mutableCopyAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "mutableCopy",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func release(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "release",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func releaseAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "release",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func retain(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "retain",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func retainAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "retain",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func retainCount(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "retainCount",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func retainCountAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "retainCount",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func `self`(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "self",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func selfAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "self",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func superclass(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "superclass",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func superclassAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "superclass",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func zone(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "zone",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func zoneAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "zone",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// Intf2Prx overview.
///
/// Intf2Prx Methods:
///
///  - isa: 
///
///  - isaAsync: 
///
///  - reason: 
///
///  - reasonAsync: 
///
///  - autorelease: 
///
///  - autoreleaseAsync: 
///
///  - classForCoder: 
///
///  - classForCoderAsync: 
///
///  - copy: 
///
///  - copyAsync: 
///
///  - dealloc: 
///
///  - deallocAsync: 
///
///  - description: 
///
///  - descriptionAsync: 
///
///  - hash: 
///
///  - hashAsync: 
///
///  - `init`: 
///
///  - initAsync: 
///
///  - isProxy: 
///
///  - isProxyAsync: 
///
///  - mutableCopy: 
///
///  - mutableCopyAsync: 
///
///  - release: 
///
///  - releaseAsync: 
///
///  - retain: 
///
///  - retainAsync: 
///
///  - retainCount: 
///
///  - retainCountAsync: 
///
///  - `self`: 
///
///  - selfAsync: 
///
///  - superclass: 
///
///  - superclassAsync: 
///
///  - zone: 
///
///  - zoneAsync: 
public protocol Intf2Prx: Ice.ObjectPrx {}

private final class Intf2PrxI: Ice.ObjectPrxI, Intf2Prx {
    public override class func ice_staticId() -> Swift.String {
        return Intf2Traits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `Intf2Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `Intf2Prx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: Intf2Prx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> Intf2Prx? {
    return try Intf2PrxI.checkedCast(prx: prx, facet: facet, context: context) as Intf2PrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `Intf2Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `Intf2Prx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: Intf2Prx.Protocol, facet: Swift.String? = nil) -> Intf2Prx {
    return Intf2PrxI.uncheckedCast(prx: prx, facet: facet) as Intf2PrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `Intf2Prx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: Intf2Prx.Protocol) -> Swift.String {
    return Intf2Traits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `Intf2Prx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `Intf2Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `Intf2Prx?` - The extracted proxy
    func read(_ type: Intf2Prx.Protocol) throws -> Intf2Prx? {
        return try read() as Intf2PrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `Intf2Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `Intf2Prx` - The extracted proxy.
    func read(tag: Swift.Int32, type: Intf2Prx.Protocol) throws -> Intf2Prx? {
        return try read(tag: tag) as Intf2PrxI?
    }
}

/// Intf2Prx overview.
///
/// Intf2Prx Methods:
///
///  - isa: 
///
///  - isaAsync: 
///
///  - reason: 
///
///  - reasonAsync: 
///
///  - autorelease: 
///
///  - autoreleaseAsync: 
///
///  - classForCoder: 
///
///  - classForCoderAsync: 
///
///  - copy: 
///
///  - copyAsync: 
///
///  - dealloc: 
///
///  - deallocAsync: 
///
///  - description: 
///
///  - descriptionAsync: 
///
///  - hash: 
///
///  - hashAsync: 
///
///  - `init`: 
///
///  - initAsync: 
///
///  - isProxy: 
///
///  - isProxyAsync: 
///
///  - mutableCopy: 
///
///  - mutableCopyAsync: 
///
///  - release: 
///
///  - releaseAsync: 
///
///  - retain: 
///
///  - retainAsync: 
///
///  - retainCount: 
///
///  - retainCountAsync: 
///
///  - `self`: 
///
///  - selfAsync: 
///
///  - superclass: 
///
///  - superclassAsync: 
///
///  - zone: 
///
///  - zoneAsync: 
public extension Intf2Prx {
    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func isa(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "isa",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func isaAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "isa",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func reason(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "reason",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func reasonAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "reason",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func autorelease(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "autorelease",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func autoreleaseAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "autorelease",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func classForCoder(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "classForCoder",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func classForCoderAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "classForCoder",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func copy(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "copy",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func copyAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "copy",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func dealloc(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "dealloc",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func deallocAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "dealloc",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func description(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "description",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func descriptionAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "description",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func hash(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "hash",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func hashAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "hash",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func `init`(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "init",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func initAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "init",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func isProxy(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "isProxy",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func isProxyAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "isProxy",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func mutableCopy(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "mutableCopy",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func mutableCopyAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "mutableCopy",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func release(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "release",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func releaseAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "release",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func retain(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "retain",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func retainAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "retain",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func retainCount(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "retainCount",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func retainCountAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "retainCount",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func `self`(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "self",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func selfAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "self",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func superclass(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "superclass",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func superclassAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "superclass",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func zone(_ iceP_a: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "zone",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_a)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func zoneAsync(_ iceP_a: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "zone",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_a)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// :nodoc:
public class Class1_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return Class1.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Class1() -> Ice.ValueTypeResolver {
        return Class1_TypeResolver()
    }
}

open class Class1: Ice.Value {
    public var reason: Swift.Int32 = 0
    public var isa: Swift.Int32 = 0
    public var autorelease: Swift.Int32 = 0
    public var classForCoder: Swift.Int32 = 0
    public var copy: Swift.Int32 = 0
    public var dealloc: Swift.Int32 = 0
    public var description: Swift.Int32 = 0
    public var hash: Swift.Int32 = 0
    public var `init`: Swift.Int32 = 0
    public var isProxy: Swift.Int32 = 0
    public var mutableCopy: Swift.Int32 = 0
    public var release: Swift.Int32 = 0
    public var retain: Swift.Int32 = 0
    public var retainCount: Swift.Int32 = 0
    public var `self`: Swift.Int32 = 0
    public var superclass: Swift.Int32 = 0
    public var zone: Swift.Int32 = 0

    public required init() {}

    public init(reason: Swift.Int32, isa: Swift.Int32, autorelease: Swift.Int32, classForCoder: Swift.Int32, copy: Swift.Int32, dealloc: Swift.Int32, description: Swift.Int32, hash: Swift.Int32, `init`: Swift.Int32, isProxy: Swift.Int32, mutableCopy: Swift.Int32, release: Swift.Int32, retain: Swift.Int32, retainCount: Swift.Int32, `self`: Swift.Int32, superclass: Swift.Int32, zone: Swift.Int32) {
        self.reason = reason
        self.isa = isa
        self.autorelease = autorelease
        self.classForCoder = classForCoder
        self.copy = copy
        self.dealloc = dealloc
        self.description = description
        self.hash = hash
        self.`init` = `init`
        self.isProxy = isProxy
        self.mutableCopy = mutableCopy
        self.release = release
        self.retain = retain
        self.retainCount = retainCount
        self.`self` = `self`
        self.superclass = superclass
        self.zone = zone
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return Class1Traits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return Class1Traits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.reason = try istr.read()
        self.isa = try istr.read()
        self.autorelease = try istr.read()
        self.classForCoder = try istr.read()
        self.copy = try istr.read()
        self.dealloc = try istr.read()
        self.description = try istr.read()
        self.hash = try istr.read()
        self.`init` = try istr.read()
        self.isProxy = try istr.read()
        self.mutableCopy = try istr.read()
        self.release = try istr.read()
        self.retain = try istr.read()
        self.retainCount = try istr.read()
        self.`self` = try istr.read()
        self.superclass = try istr.read()
        self.zone = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: Class1Traits.staticId, compactId: -1, last: true)
        ostr.write(self.reason)
        ostr.write(self.isa)
        ostr.write(self.autorelease)
        ostr.write(self.classForCoder)
        ostr.write(self.copy)
        ostr.write(self.dealloc)
        ostr.write(self.description)
        ostr.write(self.hash)
        ostr.write(self.`init`)
        ostr.write(self.isProxy)
        ostr.write(self.mutableCopy)
        ostr.write(self.release)
        ostr.write(self.retain)
        ostr.write(self.retainCount)
        ostr.write(self.`self`)
        ostr.write(self.superclass)
        ostr.write(self.zone)
        ostr.endSlice()
    }
}


/// Dispatcher for `Intf1` servants.
public struct Intf1Disp: Ice.Disp {
    public let servant: Intf1
    private static let defaultObject = Ice.ObjectI<Intf1Traits>()

    public init(_ servant: Intf1) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "autorelease":
            return try servant._iceD_autorelease(incoming: request, current: current)
        case "classForCoder":
            return try servant._iceD_classForCoder(incoming: request, current: current)
        case "copy":
            return try servant._iceD_copy(incoming: request, current: current)
        case "dealloc":
            return try servant._iceD_dealloc(incoming: request, current: current)
        case "description":
            return try servant._iceD_description(incoming: request, current: current)
        case "hash":
            return try servant._iceD_hash(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? Intf1Disp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? Intf1Disp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? Intf1Disp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? Intf1Disp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "init":
            return try servant._iceD_init(incoming: request, current: current)
        case "isProxy":
            return try servant._iceD_isProxy(incoming: request, current: current)
        case "isa":
            return try servant._iceD_isa(incoming: request, current: current)
        case "mutableCopy":
            return try servant._iceD_mutableCopy(incoming: request, current: current)
        case "reason":
            return try servant._iceD_reason(incoming: request, current: current)
        case "release":
            return try servant._iceD_release(incoming: request, current: current)
        case "retain":
            return try servant._iceD_retain(incoming: request, current: current)
        case "retainCount":
            return try servant._iceD_retainCount(incoming: request, current: current)
        case "self":
            return try servant._iceD_self(incoming: request, current: current)
        case "superclass":
            return try servant._iceD_superclass(incoming: request, current: current)
        case "zone":
            return try servant._iceD_zone(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol Intf1 {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func isa(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func reason(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func autorelease(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func classForCoder(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func copy(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func dealloc(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func description(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func hash(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func `init`(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func isProxy(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func mutableCopy(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func release(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func retain(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func retainCount(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func `self`(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func superclass(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func zone(current: Ice.Current) throws
}


/// Dispatcher for `Intf2` servants.
public struct Intf2Disp: Ice.Disp {
    public let servant: Intf2
    private static let defaultObject = Ice.ObjectI<Intf2Traits>()

    public init(_ servant: Intf2) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "autorelease":
            return try servant._iceD_autorelease(incoming: request, current: current)
        case "classForCoder":
            return try servant._iceD_classForCoder(incoming: request, current: current)
        case "copy":
            return try servant._iceD_copy(incoming: request, current: current)
        case "dealloc":
            return try servant._iceD_dealloc(incoming: request, current: current)
        case "description":
            return try servant._iceD_description(incoming: request, current: current)
        case "hash":
            return try servant._iceD_hash(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? Intf2Disp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? Intf2Disp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? Intf2Disp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? Intf2Disp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "init":
            return try servant._iceD_init(incoming: request, current: current)
        case "isProxy":
            return try servant._iceD_isProxy(incoming: request, current: current)
        case "isa":
            return try servant._iceD_isa(incoming: request, current: current)
        case "mutableCopy":
            return try servant._iceD_mutableCopy(incoming: request, current: current)
        case "reason":
            return try servant._iceD_reason(incoming: request, current: current)
        case "release":
            return try servant._iceD_release(incoming: request, current: current)
        case "retain":
            return try servant._iceD_retain(incoming: request, current: current)
        case "retainCount":
            return try servant._iceD_retainCount(incoming: request, current: current)
        case "self":
            return try servant._iceD_self(incoming: request, current: current)
        case "superclass":
            return try servant._iceD_superclass(incoming: request, current: current)
        case "zone":
            return try servant._iceD_zone(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol Intf2 {
    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func isa(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func reason(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func autorelease(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func classForCoder(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func copy(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func dealloc(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func description(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func hash(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func `init`(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func isProxy(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func mutableCopy(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func release(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func retain(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func retainCount(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func `self`(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func superclass(a: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func zone(a: Swift.Int32, current: Ice.Current) throws
}

/// Intf1 overview.
///
/// Intf1 Methods:
///
///  - isa: 
///
///  - reason: 
///
///  - autorelease: 
///
///  - classForCoder: 
///
///  - copy: 
///
///  - dealloc: 
///
///  - description: 
///
///  - hash: 
///
///  - `init`: 
///
///  - isProxy: 
///
///  - mutableCopy: 
///
///  - release: 
///
///  - retain: 
///
///  - retainCount: 
///
///  - `self`: 
///
///  - superclass: 
///
///  - zone: 
public extension Intf1 {
    func _iceD_isa(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.isa(current: current)

        return inS.setResult()
    }

    func _iceD_reason(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.reason(current: current)

        return inS.setResult()
    }

    func _iceD_autorelease(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.autorelease(current: current)

        return inS.setResult()
    }

    func _iceD_classForCoder(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.classForCoder(current: current)

        return inS.setResult()
    }

    func _iceD_copy(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.copy(current: current)

        return inS.setResult()
    }

    func _iceD_dealloc(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.dealloc(current: current)

        return inS.setResult()
    }

    func _iceD_description(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.description(current: current)

        return inS.setResult()
    }

    func _iceD_hash(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.hash(current: current)

        return inS.setResult()
    }

    func _iceD_init(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.`init`(current: current)

        return inS.setResult()
    }

    func _iceD_isProxy(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.isProxy(current: current)

        return inS.setResult()
    }

    func _iceD_mutableCopy(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.mutableCopy(current: current)

        return inS.setResult()
    }

    func _iceD_release(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.release(current: current)

        return inS.setResult()
    }

    func _iceD_retain(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.retain(current: current)

        return inS.setResult()
    }

    func _iceD_retainCount(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.retainCount(current: current)

        return inS.setResult()
    }

    func _iceD_self(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.`self`(current: current)

        return inS.setResult()
    }

    func _iceD_superclass(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.superclass(current: current)

        return inS.setResult()
    }

    func _iceD_zone(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.zone(current: current)

        return inS.setResult()
    }
}

/// Intf2 overview.
///
/// Intf2 Methods:
///
///  - isa: 
///
///  - reason: 
///
///  - autorelease: 
///
///  - classForCoder: 
///
///  - copy: 
///
///  - dealloc: 
///
///  - description: 
///
///  - hash: 
///
///  - `init`: 
///
///  - isProxy: 
///
///  - mutableCopy: 
///
///  - release: 
///
///  - retain: 
///
///  - retainCount: 
///
///  - `self`: 
///
///  - superclass: 
///
///  - zone: 
public extension Intf2 {
    func _iceD_isa(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.isa(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_reason(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.reason(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_autorelease(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.autorelease(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_classForCoder(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.classForCoder(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_copy(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.copy(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_dealloc(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.dealloc(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_description(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.description(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_hash(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.hash(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_init(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.`init`(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_isProxy(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.isProxy(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_mutableCopy(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.mutableCopy(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_release(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.release(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_retain(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.retain(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_retainCount(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.retainCount(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_self(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.`self`(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_superclass(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.superclass(a: iceP_a, current: current)

        return inS.setResult()
    }

    func _iceD_zone(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_a: Swift.Int32 = try inS.read { istr in
            let iceP_a: Swift.Int32 = try istr.read()
            return iceP_a
        }

        try self.zone(a: iceP_a, current: current)

        return inS.setResult()
    }
}
