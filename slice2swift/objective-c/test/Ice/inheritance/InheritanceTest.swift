//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `InheritanceTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice interface`MAIA`.
public struct MAIATraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::IA"]
    public static let staticId = "::Test::MA::IA"
}

/// Traits for Slice interface`MBIB1`.
public struct MBIB1Traits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::IA", "::Test::MB::IB1"]
    public static let staticId = "::Test::MB::IB1"
}

/// Traits for Slice interface`MBIB2`.
public struct MBIB2Traits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::IA", "::Test::MB::IB2"]
    public static let staticId = "::Test::MB::IB2"
}

/// Traits for Slice interface`MAIC`.
public struct MAICTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::IA", "::Test::MA::IC", "::Test::MB::IB1", "::Test::MB::IB2"]
    public static let staticId = "::Test::MA::IC"
}

/// Traits for Slice interface`Initial`.
public struct InitialTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Initial"]
    public static let staticId = "::Test::Initial"
}

/// MAIAPrx overview.
///
/// MAIAPrx Methods:
///
///  - iaop: 
///
///  - iaopAsync: 
public protocol MAIAPrx: Ice.ObjectPrx {}

private final class MAIAPrxI: Ice.ObjectPrxI, MAIAPrx {
    public override class func ice_staticId() -> Swift.String {
        return MAIATraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MAIAPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MAIAPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MAIAPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MAIAPrx? {
    return try MAIAPrxI.checkedCast(prx: prx, facet: facet, context: context) as MAIAPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MAIAPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MAIAPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MAIAPrx.Protocol, facet: Swift.String? = nil) -> MAIAPrx {
    return MAIAPrxI.uncheckedCast(prx: prx, facet: facet) as MAIAPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MAIAPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MAIAPrx.Protocol) -> Swift.String {
    return MAIATraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MAIAPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MAIAPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MAIAPrx?` - The extracted proxy
    func read(_ type: MAIAPrx.Protocol) throws -> MAIAPrx? {
        return try read() as MAIAPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MAIAPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MAIAPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MAIAPrx.Protocol) throws -> MAIAPrx? {
        return try read(tag: tag) as MAIAPrxI?
    }
}

/// MAIAPrx overview.
///
/// MAIAPrx Methods:
///
///  - iaop: 
///
///  - iaopAsync: 
public extension MAIAPrx {
    ///
    /// - parameter _: `MAIAPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MAIAPrx?`
    func iaop(_ iceP_p: MAIAPrx?, context: Ice.Context? = nil) throws -> MAIAPrx? {
        return try _impl._invoke(operation: "iaop",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_p)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MAIAPrx? = try istr.read(MAIAPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `MAIAPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MAIAPrx?>` - The result of the operation
    func iaopAsync(_ iceP_p: MAIAPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MAIAPrx?> {
        return _impl._invokeAsync(operation: "iaop",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MAIAPrx? = try istr.read(MAIAPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// MBIB1Prx overview.
///
/// MBIB1Prx Methods:
///
///  - ib1op: 
///
///  - ib1opAsync: 
public protocol MBIB1Prx: MAIAPrx {}

private final class MBIB1PrxI: Ice.ObjectPrxI, MBIB1Prx {
    public override class func ice_staticId() -> Swift.String {
        return MBIB1Traits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MBIB1Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MBIB1Prx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MBIB1Prx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MBIB1Prx? {
    return try MBIB1PrxI.checkedCast(prx: prx, facet: facet, context: context) as MBIB1PrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MBIB1Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MBIB1Prx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MBIB1Prx.Protocol, facet: Swift.String? = nil) -> MBIB1Prx {
    return MBIB1PrxI.uncheckedCast(prx: prx, facet: facet) as MBIB1PrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MBIB1Prx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MBIB1Prx.Protocol) -> Swift.String {
    return MBIB1Traits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MBIB1Prx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MBIB1Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBIB1Prx?` - The extracted proxy
    func read(_ type: MBIB1Prx.Protocol) throws -> MBIB1Prx? {
        return try read() as MBIB1PrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MBIB1Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBIB1Prx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MBIB1Prx.Protocol) throws -> MBIB1Prx? {
        return try read(tag: tag) as MBIB1PrxI?
    }
}

/// MBIB1Prx overview.
///
/// MBIB1Prx Methods:
///
///  - ib1op: 
///
///  - ib1opAsync: 
public extension MBIB1Prx {
    ///
    /// - parameter _: `MBIB1Prx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MBIB1Prx?`
    func ib1op(_ iceP_p: MBIB1Prx?, context: Ice.Context? = nil) throws -> MBIB1Prx? {
        return try _impl._invoke(operation: "ib1op",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_p)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MBIB1Prx? = try istr.read(MBIB1Prx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `MBIB1Prx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MBIB1Prx?>` - The result of the operation
    func ib1opAsync(_ iceP_p: MBIB1Prx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MBIB1Prx?> {
        return _impl._invokeAsync(operation: "ib1op",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MBIB1Prx? = try istr.read(MBIB1Prx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// MBIB2Prx overview.
///
/// MBIB2Prx Methods:
///
///  - ib2op: 
///
///  - ib2opAsync: 
public protocol MBIB2Prx: MAIAPrx {}

private final class MBIB2PrxI: Ice.ObjectPrxI, MBIB2Prx {
    public override class func ice_staticId() -> Swift.String {
        return MBIB2Traits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MBIB2Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MBIB2Prx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MBIB2Prx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MBIB2Prx? {
    return try MBIB2PrxI.checkedCast(prx: prx, facet: facet, context: context) as MBIB2PrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MBIB2Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MBIB2Prx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MBIB2Prx.Protocol, facet: Swift.String? = nil) -> MBIB2Prx {
    return MBIB2PrxI.uncheckedCast(prx: prx, facet: facet) as MBIB2PrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MBIB2Prx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MBIB2Prx.Protocol) -> Swift.String {
    return MBIB2Traits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MBIB2Prx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MBIB2Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBIB2Prx?` - The extracted proxy
    func read(_ type: MBIB2Prx.Protocol) throws -> MBIB2Prx? {
        return try read() as MBIB2PrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MBIB2Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBIB2Prx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MBIB2Prx.Protocol) throws -> MBIB2Prx? {
        return try read(tag: tag) as MBIB2PrxI?
    }
}

/// MBIB2Prx overview.
///
/// MBIB2Prx Methods:
///
///  - ib2op: 
///
///  - ib2opAsync: 
public extension MBIB2Prx {
    ///
    /// - parameter _: `MBIB2Prx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MBIB2Prx?`
    func ib2op(_ iceP_p: MBIB2Prx?, context: Ice.Context? = nil) throws -> MBIB2Prx? {
        return try _impl._invoke(operation: "ib2op",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_p)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MBIB2Prx? = try istr.read(MBIB2Prx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `MBIB2Prx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MBIB2Prx?>` - The result of the operation
    func ib2opAsync(_ iceP_p: MBIB2Prx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MBIB2Prx?> {
        return _impl._invokeAsync(operation: "ib2op",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MBIB2Prx? = try istr.read(MBIB2Prx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// MAICPrx overview.
///
/// MAICPrx Methods:
///
///  - icop: 
///
///  - icopAsync: 
public protocol MAICPrx: MBIB1Prx, MBIB2Prx {}

private final class MAICPrxI: Ice.ObjectPrxI, MAICPrx {
    public override class func ice_staticId() -> Swift.String {
        return MAICTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MAICPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MAICPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MAICPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MAICPrx? {
    return try MAICPrxI.checkedCast(prx: prx, facet: facet, context: context) as MAICPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MAICPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MAICPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MAICPrx.Protocol, facet: Swift.String? = nil) -> MAICPrx {
    return MAICPrxI.uncheckedCast(prx: prx, facet: facet) as MAICPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MAICPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MAICPrx.Protocol) -> Swift.String {
    return MAICTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MAICPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MAICPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MAICPrx?` - The extracted proxy
    func read(_ type: MAICPrx.Protocol) throws -> MAICPrx? {
        return try read() as MAICPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MAICPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MAICPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MAICPrx.Protocol) throws -> MAICPrx? {
        return try read(tag: tag) as MAICPrxI?
    }
}

/// MAICPrx overview.
///
/// MAICPrx Methods:
///
///  - icop: 
///
///  - icopAsync: 
public extension MAICPrx {
    ///
    /// - parameter _: `MAICPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MAICPrx?`
    func icop(_ iceP_p: MAICPrx?, context: Ice.Context? = nil) throws -> MAICPrx? {
        return try _impl._invoke(operation: "icop",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_p)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MAICPrx? = try istr.read(MAICPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `MAICPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MAICPrx?>` - The result of the operation
    func icopAsync(_ iceP_p: MAICPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MAICPrx?> {
        return _impl._invokeAsync(operation: "icop",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MAICPrx? = try istr.read(MAICPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// InitialPrx overview.
///
/// InitialPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - iaop: 
///
///  - iaopAsync: 
///
///  - ib1op: 
///
///  - ib1opAsync: 
///
///  - ib2op: 
///
///  - ib2opAsync: 
///
///  - icop: 
///
///  - icopAsync: 
public protocol InitialPrx: Ice.ObjectPrx {}

private final class InitialPrxI: Ice.ObjectPrxI, InitialPrx {
    public override class func ice_staticId() -> Swift.String {
        return InitialTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `InitialPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `InitialPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: InitialPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> InitialPrx? {
    return try InitialPrxI.checkedCast(prx: prx, facet: facet, context: context) as InitialPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `InitialPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `InitialPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: InitialPrx.Protocol, facet: Swift.String? = nil) -> InitialPrx {
    return InitialPrxI.uncheckedCast(prx: prx, facet: facet) as InitialPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `InitialPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: InitialPrx.Protocol) -> Swift.String {
    return InitialTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `InitialPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `InitialPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `InitialPrx?` - The extracted proxy
    func read(_ type: InitialPrx.Protocol) throws -> InitialPrx? {
        return try read() as InitialPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `InitialPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `InitialPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: InitialPrx.Protocol) throws -> InitialPrx? {
        return try read(tag: tag) as InitialPrxI?
    }
}

/// InitialPrx overview.
///
/// InitialPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - iaop: 
///
///  - iaopAsync: 
///
///  - ib1op: 
///
///  - ib1opAsync: 
///
///  - ib2op: 
///
///  - ib2opAsync: 
///
///  - icop: 
///
///  - icopAsync: 
public extension InitialPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MAIAPrx?`
    func iaop(context: Ice.Context? = nil) throws -> MAIAPrx? {
        return try _impl._invoke(operation: "iaop",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: MAIAPrx? = try istr.read(MAIAPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MAIAPrx?>` - The result of the operation
    func iaopAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MAIAPrx?> {
        return _impl._invokeAsync(operation: "iaop",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: MAIAPrx? = try istr.read(MAIAPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MBIB1Prx?`
    func ib1op(context: Ice.Context? = nil) throws -> MBIB1Prx? {
        return try _impl._invoke(operation: "ib1op",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: MBIB1Prx? = try istr.read(MBIB1Prx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MBIB1Prx?>` - The result of the operation
    func ib1opAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MBIB1Prx?> {
        return _impl._invokeAsync(operation: "ib1op",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: MBIB1Prx? = try istr.read(MBIB1Prx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MBIB2Prx?`
    func ib2op(context: Ice.Context? = nil) throws -> MBIB2Prx? {
        return try _impl._invoke(operation: "ib2op",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: MBIB2Prx? = try istr.read(MBIB2Prx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MBIB2Prx?>` - The result of the operation
    func ib2opAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MBIB2Prx?> {
        return _impl._invokeAsync(operation: "ib2op",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: MBIB2Prx? = try istr.read(MBIB2Prx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MAICPrx?`
    func icop(context: Ice.Context? = nil) throws -> MAICPrx? {
        return try _impl._invoke(operation: "icop",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: MAICPrx? = try istr.read(MAICPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MAICPrx?>` - The result of the operation
    func icopAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MAICPrx?> {
        return _impl._invokeAsync(operation: "icop",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: MAICPrx? = try istr.read(MAICPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `MAIA` servants.
public struct MAIADisp: Ice.Disp {
    public let servant: MAIA
    private static let defaultObject = Ice.ObjectI<MAIATraits>()

    public init(_ servant: MAIA) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "iaop":
            return try servant._iceD_iaop(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MAIADisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MAIADisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MAIADisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MAIADisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MAIA {
    ///
    /// - parameter p: `MAIAPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MAIAPrx?`
    func iaop(p: MAIAPrx?, current: Ice.Current) throws -> MAIAPrx?
}


/// Dispatcher for `MBIB1` servants.
public struct MBIB1Disp: Ice.Disp {
    public let servant: MBIB1
    private static let defaultObject = Ice.ObjectI<MBIB1Traits>()

    public init(_ servant: MBIB1) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "iaop":
            return try servant._iceD_iaop(incoming: request, current: current)
        case "ib1op":
            return try servant._iceD_ib1op(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MBIB1Disp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MBIB1Disp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MBIB1Disp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MBIB1Disp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MBIB1: MAIA {
    ///
    /// - parameter p: `MBIB1Prx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MBIB1Prx?`
    func ib1op(p: MBIB1Prx?, current: Ice.Current) throws -> MBIB1Prx?
}


/// Dispatcher for `MBIB2` servants.
public struct MBIB2Disp: Ice.Disp {
    public let servant: MBIB2
    private static let defaultObject = Ice.ObjectI<MBIB2Traits>()

    public init(_ servant: MBIB2) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "iaop":
            return try servant._iceD_iaop(incoming: request, current: current)
        case "ib2op":
            return try servant._iceD_ib2op(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MBIB2Disp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MBIB2Disp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MBIB2Disp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MBIB2Disp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MBIB2: MAIA {
    ///
    /// - parameter p: `MBIB2Prx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MBIB2Prx?`
    func ib2op(p: MBIB2Prx?, current: Ice.Current) throws -> MBIB2Prx?
}


/// Dispatcher for `MAIC` servants.
public struct MAICDisp: Ice.Disp {
    public let servant: MAIC
    private static let defaultObject = Ice.ObjectI<MAICTraits>()

    public init(_ servant: MAIC) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "iaop":
            return try servant._iceD_iaop(incoming: request, current: current)
        case "ib1op":
            return try servant._iceD_ib1op(incoming: request, current: current)
        case "ib2op":
            return try servant._iceD_ib2op(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MAICDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MAICDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MAICDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MAICDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "icop":
            return try servant._iceD_icop(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MAIC: MBIB1, MBIB2 {
    ///
    /// - parameter p: `MAICPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MAICPrx?`
    func icop(p: MAICPrx?, current: Ice.Current) throws -> MAICPrx?
}


/// Dispatcher for `Initial` servants.
public struct InitialDisp: Ice.Disp {
    public let servant: Initial
    private static let defaultObject = Ice.ObjectI<InitialTraits>()

    public init(_ servant: Initial) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "iaop":
            return try servant._iceD_iaop(incoming: request, current: current)
        case "ib1op":
            return try servant._iceD_ib1op(incoming: request, current: current)
        case "ib2op":
            return try servant._iceD_ib2op(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? InitialDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? InitialDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? InitialDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? InitialDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "icop":
            return try servant._iceD_icop(incoming: request, current: current)
        case "shutdown":
            return try servant._iceD_shutdown(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol Initial {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MAIAPrx?`
    func iaop(current: Ice.Current) throws -> MAIAPrx?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MBIB1Prx?`
    func ib1op(current: Ice.Current) throws -> MBIB1Prx?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MBIB2Prx?`
    func ib2op(current: Ice.Current) throws -> MBIB2Prx?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MAICPrx?`
    func icop(current: Ice.Current) throws -> MAICPrx?
}

/// MAIA overview.
///
/// MAIA Methods:
///
///  - iaop: 
public extension MAIA {
    func _iceD_iaop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p: MAIAPrx? = try inS.read { istr in
            let iceP_p: MAIAPrx? = try istr.read(MAIAPrx.self)
            return iceP_p
        }

        let iceP_returnValue = try self.iaop(p: iceP_p, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// MBIB1 overview.
///
/// MBIB1 Methods:
///
///  - ib1op: 
public extension MBIB1 {
    func _iceD_ib1op(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p: MBIB1Prx? = try inS.read { istr in
            let iceP_p: MBIB1Prx? = try istr.read(MBIB1Prx.self)
            return iceP_p
        }

        let iceP_returnValue = try self.ib1op(p: iceP_p, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// MBIB2 overview.
///
/// MBIB2 Methods:
///
///  - ib2op: 
public extension MBIB2 {
    func _iceD_ib2op(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p: MBIB2Prx? = try inS.read { istr in
            let iceP_p: MBIB2Prx? = try istr.read(MBIB2Prx.self)
            return iceP_p
        }

        let iceP_returnValue = try self.ib2op(p: iceP_p, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// MAIC overview.
///
/// MAIC Methods:
///
///  - icop: 
public extension MAIC {
    func _iceD_icop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p: MAICPrx? = try inS.read { istr in
            let iceP_p: MAICPrx? = try istr.read(MAICPrx.self)
            return iceP_p
        }

        let iceP_returnValue = try self.icop(p: iceP_p, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// Initial overview.
///
/// Initial Methods:
///
///  - shutdown: 
///
///  - iaop: 
///
///  - ib1op: 
///
///  - ib2op: 
///
///  - icop: 
public extension Initial {
    func _iceD_shutdown(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.shutdown(current: current)

        return inS.setResult()
    }

    func _iceD_iaop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.iaop(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_ib1op(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.ib1op(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_ib2op(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.ib2op(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_icop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.icop(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}
