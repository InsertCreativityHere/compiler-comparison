//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `ObjectsDerived.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// Traits for Slice class `Derived`.
public struct DerivedTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Base", "::Test::Derived"]
    public static let staticId = "::Test::Derived"
}

/// :nodoc:
public class Derived_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return Derived.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Derived() -> Ice.ValueTypeResolver {
        return Derived_TypeResolver()
    }
}

open class Derived: Base {
    public var b: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(theS: S, str: Swift.String, b: Swift.String) {
        self.b = b
        super.init(theS: theS, str: str)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return DerivedTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return DerivedTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.b = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: DerivedTraits.staticId, compactId: -1, last: false)
        ostr.write(self.b)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}
