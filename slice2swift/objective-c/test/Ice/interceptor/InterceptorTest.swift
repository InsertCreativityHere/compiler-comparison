//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `InterceptorTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// :nodoc:
public class InvalidInputException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return InvalidInputException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_InvalidInputException() -> Ice.UserExceptionTypeResolver {
        return InvalidInputException_TypeResolver()
    }
}

open class InvalidInputException: Ice.UserException {
    public var reason: Swift.String = ""

    public required init() {}

    public init(reason: Swift.String) {
        self.reason = reason
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::InvalidInputException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: InvalidInputException.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.reason)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.reason = try istr.read()
        try istr.endSlice()
    }
}

open class RetryException: Ice.LocalException {
    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::RetryException"
    }

    /// Returns a string representation of this exception
    ///
    /// - returns: `Swift.String` - The string representaton of this exception.
    open override func ice_print() -> Swift.String {
        return _RetryExceptionDescription
    }
}

/// Traits for Slice interface `MyObject`.
public struct MyObjectTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MyObject"]
    public static let staticId = "::Test::MyObject"
}

/// MyObjectPrx overview.
///
/// MyObjectPrx Methods:
///
///  - add: 
///
///  - addAsync: 
///
///  - addWithRetry: 
///
///  - addWithRetryAsync: 
///
///  - badAdd: 
///
///  - badAddAsync: 
///
///  - notExistAdd: 
///
///  - notExistAddAsync: 
///
///  - badSystemAdd: 
///
///  - badSystemAddAsync: 
public protocol MyObjectPrx: Ice.ObjectPrx {}

private final class MyObjectPrxI: Ice.ObjectPrxI, MyObjectPrx {
    public override class func ice_staticId() -> Swift.String {
        return MyObjectTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MyObjectPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MyObjectPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MyObjectPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MyObjectPrx? {
    return try MyObjectPrxI.checkedCast(prx: prx, facet: facet, context: context) as MyObjectPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MyObjectPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MyObjectPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MyObjectPrx.Protocol, facet: Swift.String? = nil) -> MyObjectPrx {
    return MyObjectPrxI.uncheckedCast(prx: prx, facet: facet) as MyObjectPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MyObjectPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MyObjectPrx.Protocol) -> Swift.String {
    return MyObjectTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MyObjectPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MyObjectPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MyObjectPrx?` - The extracted proxy
    func read(_ type: MyObjectPrx.Protocol) throws -> MyObjectPrx? {
        return try read() as MyObjectPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MyObjectPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MyObjectPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MyObjectPrx.Protocol) throws -> MyObjectPrx? {
        return try read(tag: tag) as MyObjectPrxI?
    }
}

/// MyObjectPrx overview.
///
/// MyObjectPrx Methods:
///
///  - add: 
///
///  - addAsync: 
///
///  - addWithRetry: 
///
///  - addWithRetryAsync: 
///
///  - badAdd: 
///
///  - badAddAsync: 
///
///  - notExistAdd: 
///
///  - notExistAddAsync: 
///
///  - badSystemAdd: 
///
///  - badSystemAddAsync: 
public extension MyObjectPrx {
    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func add(x iceP_x: Swift.Int32, y iceP_y: Swift.Int32, context: Ice.Context? = nil) throws -> Swift.Int32 {
        return try _impl._invoke(operation: "add",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_x)
                                     ostr.write(iceP_y)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int32 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Int32>` - The result of the operation
    func addAsync(x iceP_x: Swift.Int32, y iceP_y: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Int32> {
        return _impl._invokeAsync(operation: "add",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_x)
                                      ostr.write(iceP_y)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int32 = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func addWithRetry(x iceP_x: Swift.Int32, y iceP_y: Swift.Int32, context: Ice.Context? = nil) throws -> Swift.Int32 {
        return try _impl._invoke(operation: "addWithRetry",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_x)
                                     ostr.write(iceP_y)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int32 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Int32>` - The result of the operation
    func addWithRetryAsync(x iceP_x: Swift.Int32, y iceP_y: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Int32> {
        return _impl._invokeAsync(operation: "addWithRetry",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_x)
                                      ostr.write(iceP_y)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int32 = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func badAdd(x iceP_x: Swift.Int32, y iceP_y: Swift.Int32, context: Ice.Context? = nil) throws -> Swift.Int32 {
        return try _impl._invoke(operation: "badAdd",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_x)
                                     ostr.write(iceP_y)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int32 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as InvalidInputException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Int32>` - The result of the operation
    func badAddAsync(x iceP_x: Swift.Int32, y iceP_y: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Int32> {
        return _impl._invokeAsync(operation: "badAdd",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_x)
                                      ostr.write(iceP_y)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int32 = try istr.read()
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as InvalidInputException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func notExistAdd(x iceP_x: Swift.Int32, y iceP_y: Swift.Int32, context: Ice.Context? = nil) throws -> Swift.Int32 {
        return try _impl._invoke(operation: "notExistAdd",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_x)
                                     ostr.write(iceP_y)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int32 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Int32>` - The result of the operation
    func notExistAddAsync(x iceP_x: Swift.Int32, y iceP_y: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Int32> {
        return _impl._invokeAsync(operation: "notExistAdd",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_x)
                                      ostr.write(iceP_y)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int32 = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func badSystemAdd(x iceP_x: Swift.Int32, y iceP_y: Swift.Int32, context: Ice.Context? = nil) throws -> Swift.Int32 {
        return try _impl._invoke(operation: "badSystemAdd",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_x)
                                     ostr.write(iceP_y)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int32 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Int32>` - The result of the operation
    func badSystemAddAsync(x iceP_x: Swift.Int32, y iceP_y: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Int32> {
        return _impl._invokeAsync(operation: "badSystemAdd",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_x)
                                      ostr.write(iceP_y)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int32 = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `MyObject` servants.
public struct MyObjectDisp: Ice.Disp {
    public let servant: MyObject
    private static let defaultObject = Ice.ObjectI<MyObjectTraits>()

    public init(_ servant: MyObject) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "add":
            return try servant._iceD_add(incoming: request, current: current)
        case "addWithRetry":
            return try servant._iceD_addWithRetry(incoming: request, current: current)
        case "badAdd":
            return try servant._iceD_badAdd(incoming: request, current: current)
        case "badSystemAdd":
            return try servant._iceD_badSystemAdd(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MyObjectDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MyObjectDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MyObjectDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MyObjectDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "notExistAdd":
            return try servant._iceD_notExistAdd(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MyObject {
    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func add(x: Swift.Int32, y: Swift.Int32, current: Ice.Current) throws -> Swift.Int32

    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func addWithRetry(x: Swift.Int32, y: Swift.Int32, current: Ice.Current) throws -> Swift.Int32

    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func badAdd(x: Swift.Int32, y: Swift.Int32, current: Ice.Current) throws -> Swift.Int32

    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func notExistAdd(x: Swift.Int32, y: Swift.Int32, current: Ice.Current) throws -> Swift.Int32

    ///
    /// - parameter x: `Swift.Int32`
    ///
    /// - parameter y: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func badSystemAdd(x: Swift.Int32, y: Swift.Int32, current: Ice.Current) throws -> Swift.Int32
}

/// MyObject overview.
///
/// MyObject Methods:
///
///  - add: 
///
///  - addWithRetry: 
///
///  - badAdd: 
///
///  - notExistAdd: 
///
///  - badSystemAdd: 
public extension MyObject {
    func _iceD_add(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_x, iceP_y): (Swift.Int32, Swift.Int32) = try inS.read { istr in
            let iceP_x: Swift.Int32 = try istr.read()
            let iceP_y: Swift.Int32 = try istr.read()
            return (iceP_x, iceP_y)
        }

        let iceP_returnValue = try self.add(x: iceP_x, y: iceP_y, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_addWithRetry(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_x, iceP_y): (Swift.Int32, Swift.Int32) = try inS.read { istr in
            let iceP_x: Swift.Int32 = try istr.read()
            let iceP_y: Swift.Int32 = try istr.read()
            return (iceP_x, iceP_y)
        }

        let iceP_returnValue = try self.addWithRetry(x: iceP_x, y: iceP_y, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_badAdd(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_x, iceP_y): (Swift.Int32, Swift.Int32) = try inS.read { istr in
            let iceP_x: Swift.Int32 = try istr.read()
            let iceP_y: Swift.Int32 = try istr.read()
            return (iceP_x, iceP_y)
        }

        let iceP_returnValue = try self.badAdd(x: iceP_x, y: iceP_y, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_notExistAdd(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_x, iceP_y): (Swift.Int32, Swift.Int32) = try inS.read { istr in
            let iceP_x: Swift.Int32 = try istr.read()
            let iceP_y: Swift.Int32 = try istr.read()
            return (iceP_x, iceP_y)
        }

        let iceP_returnValue = try self.notExistAdd(x: iceP_x, y: iceP_y, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_badSystemAdd(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_x, iceP_y): (Swift.Int32, Swift.Int32) = try inS.read { istr in
            let iceP_x: Swift.Int32 = try istr.read()
            let iceP_y: Swift.Int32 = try istr.read()
            return (iceP_x, iceP_y)
        }

        let iceP_returnValue = try self.badSystemAdd(x: iceP_x, y: iceP_y, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}
