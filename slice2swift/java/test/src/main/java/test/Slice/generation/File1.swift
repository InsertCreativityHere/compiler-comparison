//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `File1.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// Traits for Slice interface`Interface1`.
public struct Interface1Traits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Interface1"]
    public static let staticId = "::Test::Interface1"
}

public protocol Interface1Prx: Ice.ObjectPrx {}

private final class Interface1PrxI: Ice.ObjectPrxI, Interface1Prx {
    public override class func ice_staticId() -> Swift.String {
        return Interface1Traits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: Interface1Prx.Protocol) throws -> Interface1Prx {
    try communicator.makeProxyImpl(proxyString) as Interface1PrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `Interface1Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `Interface1Prx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: Interface1Prx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> Interface1Prx? {
    return try await Interface1PrxI.checkedCast(prx: prx, facet: facet, context: context) as Interface1PrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `Interface1Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `Interface1Prx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: Interface1Prx.Protocol, facet: Swift.String? = nil) -> Interface1Prx {
    return Interface1PrxI.uncheckedCast(prx: prx, facet: facet) as Interface1PrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `Interface1Prx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: Interface1Prx.Protocol) -> Swift.String {
    return Interface1Traits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `Interface1Prx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `Interface1Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `Interface1Prx?` - The extracted proxy
    func read(_ type: Interface1Prx.Protocol) throws -> Interface1Prx? {
        return try read() as Interface1PrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `Interface1Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `Interface1Prx` - The extracted proxy.
    func read(tag: Swift.Int32, type: Interface1Prx.Protocol) throws -> Interface1Prx? {
        return try read(tag: tag) as Interface1PrxI?
    }
}

public extension Interface1Prx {
    func method(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "method",
                                       mode: .Normal,
                                       context: context)
    }
}

/// :nodoc:
public class Class1_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return Class1.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test2_Class1() -> Ice.ValueTypeResolver {
        return Class1_TypeResolver()
    }
}

open class Class1: Ice.Value {
    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test2::Class1" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: Class1.ice_staticId(), compactId: -1, last: true)
        ostr.endSlice()
    }
}


/// Dispatcher for `Interface1` servants.
public struct Interface1Disp: Ice.Dispatcher {
    public let servant: Interface1
    private static let defaultObject = Ice.ObjectI<Interface1Traits>()

    public init(_ servant: Interface1) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? Interface1Disp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? Interface1Disp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? Interface1Disp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? Interface1Disp.defaultObject)._iceD_ice_ping(request)
        case "method":
            try await servant._iceD_method(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol Interface1 {
    func method(current: Ice.Current) async throws
}

extension Interface1 {
    public func _iceD_method(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.method(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
