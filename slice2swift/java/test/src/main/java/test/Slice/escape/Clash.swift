//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Clash.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice interface`Intf`.
public struct IntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Clash::Intf", "::Ice::Object"]
    public static let staticId = "::Clash::Intf"
}

/// Traits for Slice class`Cls`.
public struct ClsTraits: Ice.SliceTraits {
    public static let staticIds = ["::Clash::Cls", "::Ice::Object"]
    public static let staticId = "::Clash::Cls"
}

public struct St: Swift.Hashable {
    public var v: Swift.String = ""
    public var istr: Swift.Int16 = 0
    public var ostr: Swift.Int32 = 0
    public var rhs: Swift.Int32 = 0
    public var hashCode: Swift.String = ""
    public var clone: Swift.Int32 = 0

    public init() {}

    public init(v: Swift.String, istr: Swift.Int16, ostr: Swift.Int32, rhs: Swift.Int32, hashCode: Swift.String, clone: Swift.Int32) {
        self.v = v
        self.istr = istr
        self.ostr = ostr
        self.rhs = rhs
        self.hashCode = hashCode
        self.clone = clone
    }
}

/// An `Ice.InputStream` extension to read `St` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `St` structured value from the stream.
    ///
    /// - returns: `St` - The structured value read from the stream.
    func read() throws -> St {
        var v = St()
        v.v = try self.read()
        v.istr = try self.read()
        v.ostr = try self.read()
        v.rhs = try self.read()
        v.hashCode = try self.read()
        v.clone = try self.read()
        return v
    }

    /// Read an optional `St?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `St?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> St? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as St
    }
}

/// An `Ice.OutputStream` extension to write `St` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `St` structured value to the stream.
    ///
    /// - parameter _: `St` - The value to write to the stream.
    func write(_ v: St) {
        self.write(v.v)
        self.write(v.istr)
        self.write(v.ostr)
        self.write(v.rhs)
        self.write(v.hashCode)
        self.write(v.clone)
    }

    /// Write an optional `St?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `St?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: St?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// :nodoc:
public class Ex_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return Ex.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Clash_Ex() -> Ice.UserExceptionTypeResolver {
        return Ex_TypeResolver()
    }
}

open class Ex: Ice.UserException {
    public var istr: Swift.Int16 = 0
    public var ostr: Swift.Int32 = 0
    public var cause: Swift.String = ""

    public required init() {}

    public init(istr: Swift.Int16, ostr: Swift.Int32, cause: Swift.String) {
        self.istr = istr
        self.ostr = ostr
        self.cause = cause
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Clash::Ex"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: Ex.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.istr)
        ostr.write(self.ostr)
        ostr.write(self.cause)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.istr = try istr.read()
        self.ostr = try istr.read()
        self.cause = try istr.read()
        try istr.endSlice()
    }
}

/// IntfPrx overview.
///
/// IntfPrx Methods:
///
///  - context: 
///
///  - contextAsync: 
///
///  - current: 
///
///  - currentAsync: 
///
///  - response: 
///
///  - responseAsync: 
///
///  - typeId: 
///
///  - typeIdAsync: 
///
///  - del: 
///
///  - delAsync: 
///
///  - cookie: 
///
///  - cookieAsync: 
///
///  - sync: 
///
///  - syncAsync: 
///
///  - inS: 
///
///  - inSAsync: 
///
///  - istr: 
///
///  - istrAsync: 
///
///  - obj: 
///
///  - objAsync: 
///
///  - op: 
///
///  - opAsync: 
///
///  - opOut: 
///
///  - opOutAsync: 
public protocol IntfPrx: Ice.ObjectPrx {}

private final class IntfPrxI: Ice.ObjectPrxI, IntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return IntfTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `IntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `IntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: IntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> IntfPrx? {
    return try IntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as IntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `IntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `IntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: IntfPrx.Protocol, facet: Swift.String? = nil) -> IntfPrx {
    return IntfPrxI.uncheckedCast(prx: prx, facet: facet) as IntfPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `IntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: IntfPrx.Protocol) -> Swift.String {
    return IntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `IntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `IntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `IntfPrx?` - The extracted proxy
    func read(_ type: IntfPrx.Protocol) throws -> IntfPrx? {
        return try read() as IntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `IntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `IntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: IntfPrx.Protocol) throws -> IntfPrx? {
        return try read(tag: tag) as IntfPrxI?
    }
}

/// IntfPrx overview.
///
/// IntfPrx Methods:
///
///  - context: 
///
///  - contextAsync: 
///
///  - current: 
///
///  - currentAsync: 
///
///  - response: 
///
///  - responseAsync: 
///
///  - typeId: 
///
///  - typeIdAsync: 
///
///  - del: 
///
///  - delAsync: 
///
///  - cookie: 
///
///  - cookieAsync: 
///
///  - sync: 
///
///  - syncAsync: 
///
///  - inS: 
///
///  - inSAsync: 
///
///  - istr: 
///
///  - istrAsync: 
///
///  - obj: 
///
///  - objAsync: 
///
///  - op: 
///
///  - opAsync: 
///
///  - opOut: 
///
///  - opOutAsync: 
public extension IntfPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func context(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "context",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func contextAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "context",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func current(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "current",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func currentAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "current",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func response(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "response",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func responseAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "response",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func typeId(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "typeId",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func typeIdAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "typeId",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func del(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "del",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func delAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "del",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func cookie(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "cookie",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func cookieAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "cookie",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func sync(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "sync",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func syncAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "sync",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func inS(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "inS",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func inSAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "inS",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func istr(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "istr",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func istrAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "istr",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func obj(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "obj",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func objAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "obj",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Swift.String`
    ///
    /// - parameter current: `Swift.String`
    ///
    /// - parameter response: `Swift.String`
    ///
    /// - parameter ex: `Swift.String`
    ///
    /// - parameter sent: `Swift.String`
    ///
    /// - parameter cookie: `Swift.String`
    ///
    /// - parameter sync: `Swift.String`
    ///
    /// - parameter result: `Swift.String`
    ///
    /// - parameter istr: `Swift.String`
    ///
    /// - parameter ostr: `Swift.String`
    ///
    /// - parameter proxy: `Swift.String?`
    ///
    /// - parameter obj: `Swift.Int32?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func op(context iceP_context: Swift.String, current iceP_current: Swift.String, response iceP_response: Swift.String, ex iceP_ex: Swift.String, sent iceP_sent: Swift.String, cookie iceP_cookie: Swift.String, sync iceP_sync: Swift.String, result iceP_result: Swift.String, istr iceP_istr: Swift.String, ostr iceP_ostr: Swift.String, proxy iceP_proxy: Swift.String? = nil, obj iceP_obj: Swift.Int32? = nil, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "op",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_context)
                              ostr.write(iceP_current)
                              ostr.write(iceP_response)
                              ostr.write(iceP_ex)
                              ostr.write(iceP_sent)
                              ostr.write(iceP_cookie)
                              ostr.write(iceP_sync)
                              ostr.write(iceP_result)
                              ostr.write(iceP_istr)
                              ostr.write(iceP_ostr)
                              ostr.write(tag: 1, value: iceP_proxy)
                              ostr.write(tag: 2, value: iceP_obj)
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Swift.String`
    ///
    /// - parameter current: `Swift.String`
    ///
    /// - parameter response: `Swift.String`
    ///
    /// - parameter ex: `Swift.String`
    ///
    /// - parameter sent: `Swift.String`
    ///
    /// - parameter cookie: `Swift.String`
    ///
    /// - parameter sync: `Swift.String`
    ///
    /// - parameter result: `Swift.String`
    ///
    /// - parameter istr: `Swift.String`
    ///
    /// - parameter ostr: `Swift.String`
    ///
    /// - parameter proxy: `Swift.String?`
    ///
    /// - parameter obj: `Swift.Int32?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func opAsync(context iceP_context: Swift.String, current iceP_current: Swift.String, response iceP_response: Swift.String, ex iceP_ex: Swift.String, sent iceP_sent: Swift.String, cookie iceP_cookie: Swift.String, sync iceP_sync: Swift.String, result iceP_result: Swift.String, istr iceP_istr: Swift.String, ostr iceP_ostr: Swift.String, proxy iceP_proxy: Swift.String? = nil, obj iceP_obj: Swift.Int32? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "op",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_context)
                                      ostr.write(iceP_current)
                                      ostr.write(iceP_response)
                                      ostr.write(iceP_ex)
                                      ostr.write(iceP_sent)
                                      ostr.write(iceP_cookie)
                                      ostr.write(iceP_sync)
                                      ostr.write(iceP_result)
                                      ostr.write(iceP_istr)
                                      ostr.write(iceP_ostr)
                                      ostr.write(tag: 1, value: iceP_proxy)
                                      ostr.write(tag: 2, value: iceP_obj)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(context: Swift.String, current: Swift.String, response: Swift.String, ex: Swift.String, sent: Swift.String, cookie: Swift.String, sync: Swift.String, result: Swift.String, istr: Swift.String, ostr: Swift.String, proxy: Swift.String?, obj: Swift.Int32?)`:
    ///
    ///   - context: `Swift.String`
    ///
    ///   - current: `Swift.String`
    ///
    ///   - response: `Swift.String`
    ///
    ///   - ex: `Swift.String`
    ///
    ///   - sent: `Swift.String`
    ///
    ///   - cookie: `Swift.String`
    ///
    ///   - sync: `Swift.String`
    ///
    ///   - result: `Swift.String`
    ///
    ///   - istr: `Swift.String`
    ///
    ///   - ostr: `Swift.String`
    ///
    ///   - proxy: `Swift.String?`
    ///
    ///   - obj: `Swift.Int32?`
    func opOut(context: Ice.Context? = nil) throws -> (context: Swift.String, current: Swift.String, response: Swift.String, ex: Swift.String, sent: Swift.String, cookie: Swift.String, sync: Swift.String, result: Swift.String, istr: Swift.String, ostr: Swift.String, proxy: Swift.String?, obj: Swift.Int32?) {
        return try _impl._invoke(operation: "opOut",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_context: Swift.String = try istr.read()
                                     let iceP_current: Swift.String = try istr.read()
                                     let iceP_response: Swift.String = try istr.read()
                                     let iceP_ex: Swift.String = try istr.read()
                                     let iceP_sent: Swift.String = try istr.read()
                                     let iceP_cookie: Swift.String = try istr.read()
                                     let iceP_sync: Swift.String = try istr.read()
                                     let iceP_result: Swift.String = try istr.read()
                                     let iceP_istr: Swift.String = try istr.read()
                                     let iceP_ostr: Swift.String = try istr.read()
                                     let iceP_proxy: Swift.String? = try istr.read(tag: 1)
                                     let iceP_obj: Swift.Int32? = try istr.read(tag: 2)
                                     return (iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, iceP_obj)
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(context: Swift.String, current: Swift.String, response: Swift.String, ex: Swift.String, sent: Swift.String, cookie: Swift.String, sync: Swift.String, result: Swift.String, istr: Swift.String, ostr: Swift.String, proxy: Swift.String?, obj: Swift.Int32?)>` - The result of the operation
    func opOutAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(context: Swift.String, current: Swift.String, response: Swift.String, ex: Swift.String, sent: Swift.String, cookie: Swift.String, sync: Swift.String, result: Swift.String, istr: Swift.String, ostr: Swift.String, proxy: Swift.String?, obj: Swift.Int32?)> {
        return _impl._invokeAsync(operation: "opOut",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_context: Swift.String = try istr.read()
                                      let iceP_current: Swift.String = try istr.read()
                                      let iceP_response: Swift.String = try istr.read()
                                      let iceP_ex: Swift.String = try istr.read()
                                      let iceP_sent: Swift.String = try istr.read()
                                      let iceP_cookie: Swift.String = try istr.read()
                                      let iceP_sync: Swift.String = try istr.read()
                                      let iceP_result: Swift.String = try istr.read()
                                      let iceP_istr: Swift.String = try istr.read()
                                      let iceP_ostr: Swift.String = try istr.read()
                                      let iceP_proxy: Swift.String? = try istr.read(tag: 1)
                                      let iceP_obj: Swift.Int32? = try istr.read(tag: 2)
                                      return (iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, iceP_obj)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// :nodoc:
public class Cls_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return Cls.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Clash_Cls() -> Ice.ValueTypeResolver {
        return Cls_TypeResolver()
    }
}

open class Cls: Ice.Value {
    public var s: IntfPrx? = nil
    public var context: Swift.String = ""
    public var current: Swift.Int32 = 0
    public var response: Swift.Int16 = 0
    public var typeId: Swift.Int32 = 0
    public var del: Swift.Int16 = 0
    public var cookie: Swift.Int16? = nil
    public var ex: Swift.String = ""
    public var result: Swift.Int32 = 0
    public var istr: Swift.String = ""
    public var ostr: Swift.String = ""
    public var inS: Swift.String = ""
    public var `in`: Swift.String = ""
    public var proxy: Swift.String = ""
    public var obj: Swift.Int32 = 0
    public var getCookie: Swift.Int32 = 0
    public var clone: Swift.String = ""

    public required init() {}

    public init(s: IntfPrx?, context: Swift.String, current: Swift.Int32, response: Swift.Int16, typeId: Swift.Int32, del: Swift.Int16, cookie: Swift.Int16?, ex: Swift.String, result: Swift.Int32, istr: Swift.String, ostr: Swift.String, inS: Swift.String, `in`: Swift.String, proxy: Swift.String, obj: Swift.Int32, getCookie: Swift.Int32, clone: Swift.String) {
        self.s = s
        self.context = context
        self.current = current
        self.response = response
        self.typeId = typeId
        self.del = del
        self.cookie = cookie
        self.ex = ex
        self.result = result
        self.istr = istr
        self.ostr = ostr
        self.inS = inS
        self.`in` = `in`
        self.proxy = proxy
        self.obj = obj
        self.getCookie = getCookie
        self.clone = clone
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return ClsTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return ClsTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.s = try istr.read(IntfPrx.self)
        self.context = try istr.read()
        self.current = try istr.read()
        self.response = try istr.read()
        self.typeId = try istr.read()
        self.del = try istr.read()
        self.ex = try istr.read()
        self.result = try istr.read()
        self.istr = try istr.read()
        self.ostr = try istr.read()
        self.inS = try istr.read()
        self.`in` = try istr.read()
        self.proxy = try istr.read()
        self.obj = try istr.read()
        self.getCookie = try istr.read()
        self.clone = try istr.read()
        self.cookie = try istr.read(tag: 1)
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: ClsTraits.staticId, compactId: -1, last: true)
        ostr.write(self.s)
        ostr.write(self.context)
        ostr.write(self.current)
        ostr.write(self.response)
        ostr.write(self.typeId)
        ostr.write(self.del)
        ostr.write(self.ex)
        ostr.write(self.result)
        ostr.write(self.istr)
        ostr.write(self.ostr)
        ostr.write(self.inS)
        ostr.write(self.`in`)
        ostr.write(self.proxy)
        ostr.write(self.obj)
        ostr.write(self.getCookie)
        ostr.write(self.clone)
        ostr.write(tag: 1, value: self.cookie)
        ostr.endSlice()
    }
}


/// Dispatcher for `Intf` servants.
public struct IntfDisp: Ice.Disp {
    public let servant: Intf
    private static let defaultObject = Ice.ObjectI<IntfTraits>()

    public init(_ servant: Intf) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "context":
            return try servant._iceD_context(incoming: request, current: current)
        case "cookie":
            return try servant._iceD_cookie(incoming: request, current: current)
        case "current":
            return try servant._iceD_current(incoming: request, current: current)
        case "del":
            return try servant._iceD_del(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? IntfDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? IntfDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? IntfDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? IntfDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "inS":
            return try servant._iceD_inS(incoming: request, current: current)
        case "istr":
            return try servant._iceD_istr(incoming: request, current: current)
        case "obj":
            return try servant._iceD_obj(incoming: request, current: current)
        case "op":
            return try servant._iceD_op(incoming: request, current: current)
        case "opOut":
            return try servant._iceD_opOut(incoming: request, current: current)
        case "response":
            return try servant._iceD_response(incoming: request, current: current)
        case "sync":
            return try servant._iceD_sync(incoming: request, current: current)
        case "typeId":
            return try servant._iceD_typeId(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol Intf {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func context(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func current(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func response(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func typeId(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func del(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func cookie(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func sync(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func inS(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func istr(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func obj(current: Ice.Current) throws

    ///
    /// - parameter context: `Swift.String`
    ///
    /// - parameter current: `Swift.String`
    ///
    /// - parameter response: `Swift.String`
    ///
    /// - parameter ex: `Swift.String`
    ///
    /// - parameter sent: `Swift.String`
    ///
    /// - parameter cookie: `Swift.String`
    ///
    /// - parameter sync: `Swift.String`
    ///
    /// - parameter result: `Swift.String`
    ///
    /// - parameter istr: `Swift.String`
    ///
    /// - parameter ostr: `Swift.String`
    ///
    /// - parameter proxy: `Swift.String?`
    ///
    /// - parameter obj: `Swift.Int32?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func op(context: Swift.String, current: Swift.String, response: Swift.String, ex: Swift.String, sent: Swift.String, cookie: Swift.String, sync: Swift.String, result: Swift.String, istr: Swift.String, ostr: Swift.String, proxy: Swift.String?, obj: Swift.Int32?, current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(context: Swift.String, current: Swift.String, response: Swift.String, ex: Swift.String, sent: Swift.String, cookie: Swift.String, sync: Swift.String, result: Swift.String, istr: Swift.String, ostr: Swift.String, proxy: Swift.String?, obj: Swift.Int32?)`:
    ///
    ///   - context: `Swift.String`
    ///
    ///   - current: `Swift.String`
    ///
    ///   - response: `Swift.String`
    ///
    ///   - ex: `Swift.String`
    ///
    ///   - sent: `Swift.String`
    ///
    ///   - cookie: `Swift.String`
    ///
    ///   - sync: `Swift.String`
    ///
    ///   - result: `Swift.String`
    ///
    ///   - istr: `Swift.String`
    ///
    ///   - ostr: `Swift.String`
    ///
    ///   - proxy: `Swift.String?`
    ///
    ///   - obj: `Swift.Int32?`
    func opOut(current: Ice.Current) throws -> (context: Swift.String, current: Swift.String, response: Swift.String, ex: Swift.String, sent: Swift.String, cookie: Swift.String, sync: Swift.String, result: Swift.String, istr: Swift.String, ostr: Swift.String, proxy: Swift.String?, obj: Swift.Int32?)
}

/// Intf overview.
///
/// Intf Methods:
///
///  - context: 
///
///  - current: 
///
///  - response: 
///
///  - typeId: 
///
///  - del: 
///
///  - cookie: 
///
///  - sync: 
///
///  - inS: 
///
///  - istr: 
///
///  - obj: 
///
///  - op: 
///
///  - opOut: 
public extension Intf {
    func _iceD_context(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.context(current: current)

        return inS.setResult()
    }

    func _iceD_current(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.current(current: current)

        return inS.setResult()
    }

    func _iceD_response(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.response(current: current)

        return inS.setResult()
    }

    func _iceD_typeId(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.typeId(current: current)

        return inS.setResult()
    }

    func _iceD_del(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.del(current: current)

        return inS.setResult()
    }

    func _iceD_cookie(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.cookie(current: current)

        return inS.setResult()
    }

    func _iceD_sync(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.sync(current: current)

        return inS.setResult()
    }

    func _iceD_inS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.inS(current: current)

        return inS.setResult()
    }

    func _iceD_istr(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.istr(current: current)

        return inS.setResult()
    }

    func _iceD_obj(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.obj(current: current)

        return inS.setResult()
    }

    func _iceD_op(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, iceP_obj): (Swift.String, Swift.String, Swift.String, Swift.String, Swift.String, Swift.String, Swift.String, Swift.String, Swift.String, Swift.String, Swift.String?, Swift.Int32?) = try inS.read { istr in
            let iceP_context: Swift.String = try istr.read()
            let iceP_current: Swift.String = try istr.read()
            let iceP_response: Swift.String = try istr.read()
            let iceP_ex: Swift.String = try istr.read()
            let iceP_sent: Swift.String = try istr.read()
            let iceP_cookie: Swift.String = try istr.read()
            let iceP_sync: Swift.String = try istr.read()
            let iceP_result: Swift.String = try istr.read()
            let iceP_istr: Swift.String = try istr.read()
            let iceP_ostr: Swift.String = try istr.read()
            let iceP_proxy: Swift.String? = try istr.read(tag: 1)
            let iceP_obj: Swift.Int32? = try istr.read(tag: 2)
            return (iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, iceP_obj)
        }

        try self.op(context: iceP_context, current: iceP_current, response: iceP_response, ex: iceP_ex, sent: iceP_sent, cookie: iceP_cookie, sync: iceP_sync, result: iceP_result, istr: iceP_istr, ostr: iceP_ostr, proxy: iceP_proxy, obj: iceP_obj, current: current)

        return inS.setResult()
    }

    func _iceD_opOut(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let (iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, iceP_obj) = try self.opOut(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_context)
            ostr.write(iceP_current)
            ostr.write(iceP_response)
            ostr.write(iceP_ex)
            ostr.write(iceP_sent)
            ostr.write(iceP_cookie)
            ostr.write(iceP_sync)
            ostr.write(iceP_result)
            ostr.write(iceP_istr)
            ostr.write(iceP_ostr)
            ostr.write(tag: 1, value: iceP_proxy)
            ostr.write(tag: 2, value: iceP_obj)
        }
    }
}
