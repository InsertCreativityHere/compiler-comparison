//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public struct A: Swift.Hashable {
    public var i: Swift.Int32 = 0

    public init() {}

    public init(i: Swift.Int32) {
        self.i = i
    }
}

/// An `Ice.InputStream` extension to read `A` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `A` structured value from the stream.
    ///
    /// - returns: `A` - The structured value read from the stream.
    func read() throws -> A {
        var v = A()
        v.i = try self.read()
        return v
    }

    /// Read an optional `A?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `A?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> A? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as A
    }
}

/// An `Ice.OutputStream` extension to write `A` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `A` structured value to the stream.
    ///
    /// - parameter _: `A` - The value to write to the stream.
    func write(_ v: A) {
        self.write(v.i)
    }

    /// Write an optional `A?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `A?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: A?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 4)
                write(v)
            }
        }
    }
}

public typealias ASeq = [A]

/// Helper class to read and write `ASeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ASeqHelper {
    /// Read a `ASeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ASeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ASeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = ASeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: A = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `ASeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ASeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ASeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `ASeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ASeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ASeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ASeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ASeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ASeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias AArray = [A]

/// Helper class to read and write `AArray` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct AArrayHelper {
    /// Read a `AArray` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `AArray` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> AArray {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = AArray()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: A = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `AArray?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `AArray` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> AArray? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `AArray` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `AArray` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: AArray) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `AArray?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `AArray` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: AArray?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias AList = [A]

/// Helper class to read and write `AList` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct AListHelper {
    /// Read a `AList` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `AList` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> AList {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = AList()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: A = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `AList?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `AList` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> AList? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `AList` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `AList` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: AList) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `AList?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `AList` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: AList?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias BoolSeq = [Swift.Bool]

public typealias ByteSeq = Foundation.Data

public typealias ShortSeq = [Swift.Int16]

public typealias IntSeq = [Swift.Int32]

public typealias LongSeq = [Swift.Int64]

public typealias FloatSeq = [Swift.Float]

public typealias DoubleSeq = [Swift.Double]

public typealias StringSeq = [Swift.String]

public typealias ByteBuffer = Foundation.Data

public typealias ShortBuffer = [Swift.Int16]

public typealias IntBuffer = [Swift.Int32]

public typealias LongBuffer = [Swift.Int64]

public typealias FloatBuffer = [Swift.Float]

public typealias DoubleBuffer = [Swift.Double]

public enum E: Swift.UInt8 {
    /// E1
    case E1 = 0
    /// E2
    case E2 = 1
    /// E3
    case E3 = 2
    public init() {
        self = .E1
    }
}

/// An `Ice.InputStream` extension to read `E` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `E` - The enumarated value.
    func read() throws -> E {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 2)
        guard let val = E(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `E` - The enumerated value.
    func read(tag: Swift.Int32) throws -> E? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as E
    }
}

/// An `Ice.OutputStream` extension to write `E` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `E` - The enumerator to write.
    func write(_ v: E) {
        write(enum: v.rawValue, maxValue: 2)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `E` - The enumerator to write.
    func write(tag: Swift.Int32, value: E?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 2)
    }
}

public typealias ESeq = [E]

/// Helper class to read and write `ESeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ESeqHelper {
    /// Read a `ESeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ESeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ESeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = ESeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: E = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `ESeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ESeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ESeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ESeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ESeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ESeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ESeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ESeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ESeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public struct S: Swift.Hashable {
    public var en: E = .E1

    public init() {}

    public init(en: E) {
        self.en = en
    }
}

/// An `Ice.InputStream` extension to read `S` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `S` structured value from the stream.
    ///
    /// - returns: `S` - The structured value read from the stream.
    func read() throws -> S {
        var v = S()
        v.en = try self.read()
        return v
    }

    /// Read an optional `S?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `S?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> S? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as S
    }
}

/// An `Ice.OutputStream` extension to write `S` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `S` structured value to the stream.
    ///
    /// - parameter _: `S` - The value to write to the stream.
    func write(_ v: S) {
        self.write(v.en)
    }

    /// Write an optional `S?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `S?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: S?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

public typealias SSeq = [S]

/// Helper class to read and write `SSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SSeqHelper {
    /// Read a `SSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `SSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = SSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: S = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `SSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `SSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `SSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `SSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: SSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias D = [Swift.Int32: Swift.String]

/// Helper class to read and write `D` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct DHelper {
    /// Read a `D` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `D` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> D {
        let sz = try Swift.Int(istr.readSize())
        var v = D()
        for _ in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            let value: Swift.String = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `D?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `D` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> D? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `D` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `D` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: D) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `D?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `D` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: D?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias DSeq = [D]

/// Helper class to read and write `DSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct DSeqHelper {
    /// Read a `DSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `DSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> DSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = DSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: D = try DHelper.read(from: istr)
            v.append(j)
        }
        return v
    }
    /// Read an optional `DSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `DSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> DSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `DSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `DSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: DSeq) {
        ostr.write(size: v.count)
        for item in v {
            DHelper.write(to: ostr, value: item)
        }
    }

    /// Wite an optional `DSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `DSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: DSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias StringSeqSeq = [StringSeq]

/// Helper class to read and write `StringSeqSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct StringSeqSeqHelper {
    /// Read a `StringSeqSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `StringSeqSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> StringSeqSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = StringSeqSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: StringSeq = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `StringSeqSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `StringSeqSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> StringSeqSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `StringSeqSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `StringSeqSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: StringSeqSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `StringSeqSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `StringSeqSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: StringSeqSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice interface`TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - opASeq: 
///
///  - opASeqAsync: 
///
///  - opAArray: 
///
///  - opAArrayAsync: 
///
///  - opAList: 
///
///  - opAListAsync: 
///
///  - opBoolSeq: 
///
///  - opBoolSeqAsync: 
///
///  - opByteSeq: 
///
///  - opByteSeqAsync: 
///
///  - opShortSeq: 
///
///  - opShortSeqAsync: 
///
///  - opIntSeq: 
///
///  - opIntSeqAsync: 
///
///  - opLongSeq: 
///
///  - opLongSeqAsync: 
///
///  - opFloatSeq: 
///
///  - opFloatSeqAsync: 
///
///  - opDoubleSeq: 
///
///  - opDoubleSeqAsync: 
///
///  - opStringSeq: 
///
///  - opStringSeqAsync: 
///
///  - opESeq: 
///
///  - opESeqAsync: 
///
///  - opSSeq: 
///
///  - opSSeqAsync: 
///
///  - opDSeq: 
///
///  - opDSeqAsync: 
///
///  - opStringSeqSeq: 
///
///  - opStringSeqSeqAsync: 
///
///  - opByteBufferSeq: 
///
///  - opByteBufferSeqAsync: 
///
///  - opShortBufferSeq: 
///
///  - opShortBufferSeqAsync: 
///
///  - opIntBufferSeq: 
///
///  - opIntBufferSeqAsync: 
///
///  - opLongBufferSeq: 
///
///  - opLongBufferSeqAsync: 
///
///  - opFloatBufferSeq: 
///
///  - opFloatBufferSeqAsync: 
///
///  - opDoubleBufferSeq: 
///
///  - opDoubleBufferSeqAsync: 
///
///  - opOptASeq: 
///
///  - opOptASeqAsync: 
///
///  - opOptAArray: 
///
///  - opOptAArrayAsync: 
///
///  - opOptAList: 
///
///  - opOptAListAsync: 
///
///  - opOptBoolSeq: 
///
///  - opOptBoolSeqAsync: 
///
///  - opOptByteSeq: 
///
///  - opOptByteSeqAsync: 
///
///  - opOptShortSeq: 
///
///  - opOptShortSeqAsync: 
///
///  - opOptIntSeq: 
///
///  - opOptIntSeqAsync: 
///
///  - opOptLongSeq: 
///
///  - opOptLongSeqAsync: 
///
///  - opOptFloatSeq: 
///
///  - opOptFloatSeqAsync: 
///
///  - opOptDoubleSeq: 
///
///  - opOptDoubleSeqAsync: 
///
///  - opOptStringSeq: 
///
///  - opOptStringSeqAsync: 
///
///  - opOptESeq: 
///
///  - opOptESeqAsync: 
///
///  - opOptSSeq: 
///
///  - opOptSSeqAsync: 
///
///  - opOptDSeq: 
///
///  - opOptDSeqAsync: 
///
///  - opOptStringSeqSeq: 
///
///  - opOptStringSeqSeqAsync: 
///
///  - opOptByteBufferSeq: 
///
///  - opOptByteBufferSeqAsync: 
///
///  - opOptShortBufferSeq: 
///
///  - opOptShortBufferSeqAsync: 
///
///  - opOptIntBufferSeq: 
///
///  - opOptIntBufferSeqAsync: 
///
///  - opOptLongBufferSeq: 
///
///  - opOptLongBufferSeqAsync: 
///
///  - opOptFloatBufferSeq: 
///
///  - opOptFloatBufferSeqAsync: 
///
///  - opOptDoubleBufferSeq: 
///
///  - opOptDoubleBufferSeqAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol TestIntfPrx: Ice.ObjectPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestIntfPrx.Protocol) throws -> TestIntfPrx {
    try communicator.makeProxyImpl(proxyString) as TestIntfPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestIntfPrx? {
    return try TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - opASeq: 
///
///  - opASeqAsync: 
///
///  - opAArray: 
///
///  - opAArrayAsync: 
///
///  - opAList: 
///
///  - opAListAsync: 
///
///  - opBoolSeq: 
///
///  - opBoolSeqAsync: 
///
///  - opByteSeq: 
///
///  - opByteSeqAsync: 
///
///  - opShortSeq: 
///
///  - opShortSeqAsync: 
///
///  - opIntSeq: 
///
///  - opIntSeqAsync: 
///
///  - opLongSeq: 
///
///  - opLongSeqAsync: 
///
///  - opFloatSeq: 
///
///  - opFloatSeqAsync: 
///
///  - opDoubleSeq: 
///
///  - opDoubleSeqAsync: 
///
///  - opStringSeq: 
///
///  - opStringSeqAsync: 
///
///  - opESeq: 
///
///  - opESeqAsync: 
///
///  - opSSeq: 
///
///  - opSSeqAsync: 
///
///  - opDSeq: 
///
///  - opDSeqAsync: 
///
///  - opStringSeqSeq: 
///
///  - opStringSeqSeqAsync: 
///
///  - opByteBufferSeq: 
///
///  - opByteBufferSeqAsync: 
///
///  - opShortBufferSeq: 
///
///  - opShortBufferSeqAsync: 
///
///  - opIntBufferSeq: 
///
///  - opIntBufferSeqAsync: 
///
///  - opLongBufferSeq: 
///
///  - opLongBufferSeqAsync: 
///
///  - opFloatBufferSeq: 
///
///  - opFloatBufferSeqAsync: 
///
///  - opDoubleBufferSeq: 
///
///  - opDoubleBufferSeqAsync: 
///
///  - opOptASeq: 
///
///  - opOptASeqAsync: 
///
///  - opOptAArray: 
///
///  - opOptAArrayAsync: 
///
///  - opOptAList: 
///
///  - opOptAListAsync: 
///
///  - opOptBoolSeq: 
///
///  - opOptBoolSeqAsync: 
///
///  - opOptByteSeq: 
///
///  - opOptByteSeqAsync: 
///
///  - opOptShortSeq: 
///
///  - opOptShortSeqAsync: 
///
///  - opOptIntSeq: 
///
///  - opOptIntSeqAsync: 
///
///  - opOptLongSeq: 
///
///  - opOptLongSeqAsync: 
///
///  - opOptFloatSeq: 
///
///  - opOptFloatSeqAsync: 
///
///  - opOptDoubleSeq: 
///
///  - opOptDoubleSeqAsync: 
///
///  - opOptStringSeq: 
///
///  - opOptStringSeqAsync: 
///
///  - opOptESeq: 
///
///  - opOptESeqAsync: 
///
///  - opOptSSeq: 
///
///  - opOptSSeqAsync: 
///
///  - opOptDSeq: 
///
///  - opOptDSeqAsync: 
///
///  - opOptStringSeqSeq: 
///
///  - opOptStringSeqSeqAsync: 
///
///  - opOptByteBufferSeq: 
///
///  - opOptByteBufferSeqAsync: 
///
///  - opOptShortBufferSeq: 
///
///  - opOptShortBufferSeqAsync: 
///
///  - opOptIntBufferSeq: 
///
///  - opOptIntBufferSeqAsync: 
///
///  - opOptLongBufferSeq: 
///
///  - opOptLongBufferSeqAsync: 
///
///  - opOptFloatBufferSeq: 
///
///  - opOptFloatBufferSeqAsync: 
///
///  - opOptDoubleBufferSeq: 
///
///  - opOptDoubleBufferSeqAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension TestIntfPrx {
    ///
    /// - parameter _: `ASeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ASeq, outSeq: ASeq)`:
    ///
    ///   - returnValue: `ASeq`
    ///
    ///   - outSeq: `ASeq`
    func opASeq(_ iceP_inSeq: ASeq, context: Ice.Context? = nil) throws -> (returnValue: ASeq, outSeq: ASeq) {
        return try _impl._invoke(operation: "opASeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ASeqHelper.write(to: ostr, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: ASeq = try ASeqHelper.read(from: istr)
                                     let iceP_returnValue: ASeq = try ASeqHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ASeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ASeq, outSeq: ASeq)` - The result of the operation
    func opASeqAsync(_ iceP_inSeq: ASeq, context: Ice.Context? = nil) async throws -> (returnValue: ASeq, outSeq: ASeq) {
        return try await _impl._invokeAsync(operation: "opASeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ASeqHelper.write(to: ostr, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: ASeq = try ASeqHelper.read(from: istr)
                                                let iceP_returnValue: ASeq = try ASeqHelper.read(from: istr)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `AArray`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AArray, outSeq: AArray)`:
    ///
    ///   - returnValue: `AArray`
    ///
    ///   - outSeq: `AArray`
    func opAArray(_ iceP_inSeq: AArray, context: Ice.Context? = nil) throws -> (returnValue: AArray, outSeq: AArray) {
        return try _impl._invoke(operation: "opAArray",
                                 mode: .Normal,
                                 write: { ostr in
                                     AArrayHelper.write(to: ostr, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: AArray = try AArrayHelper.read(from: istr)
                                     let iceP_returnValue: AArray = try AArrayHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AArray`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AArray, outSeq: AArray)` - The result of the operation
    func opAArrayAsync(_ iceP_inSeq: AArray, context: Ice.Context? = nil) async throws -> (returnValue: AArray, outSeq: AArray) {
        return try await _impl._invokeAsync(operation: "opAArray",
                                            mode: .Normal,
                                            write: { ostr in
                                                AArrayHelper.write(to: ostr, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: AArray = try AArrayHelper.read(from: istr)
                                                let iceP_returnValue: AArray = try AArrayHelper.read(from: istr)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `AList`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AList, outSeq: AList)`:
    ///
    ///   - returnValue: `AList`
    ///
    ///   - outSeq: `AList`
    func opAList(_ iceP_inSeq: AList, context: Ice.Context? = nil) throws -> (returnValue: AList, outSeq: AList) {
        return try _impl._invoke(operation: "opAList",
                                 mode: .Normal,
                                 write: { ostr in
                                     AListHelper.write(to: ostr, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: AList = try AListHelper.read(from: istr)
                                     let iceP_returnValue: AList = try AListHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AList`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AList, outSeq: AList)` - The result of the operation
    func opAListAsync(_ iceP_inSeq: AList, context: Ice.Context? = nil) async throws -> (returnValue: AList, outSeq: AList) {
        return try await _impl._invokeAsync(operation: "opAList",
                                            mode: .Normal,
                                            write: { ostr in
                                                AListHelper.write(to: ostr, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: AList = try AListHelper.read(from: istr)
                                                let iceP_returnValue: AList = try AListHelper.read(from: istr)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `BoolSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: BoolSeq, outSeq: BoolSeq)`:
    ///
    ///   - returnValue: `BoolSeq`
    ///
    ///   - outSeq: `BoolSeq`
    func opBoolSeq(_ iceP_inSeq: BoolSeq, context: Ice.Context? = nil) throws -> (returnValue: BoolSeq, outSeq: BoolSeq) {
        return try _impl._invoke(operation: "opBoolSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: BoolSeq = try istr.read()
                                     let iceP_returnValue: BoolSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `BoolSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: BoolSeq, outSeq: BoolSeq)` - The result of the operation
    func opBoolSeqAsync(_ iceP_inSeq: BoolSeq, context: Ice.Context? = nil) async throws -> (returnValue: BoolSeq, outSeq: BoolSeq) {
        return try await _impl._invokeAsync(operation: "opBoolSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: BoolSeq = try istr.read()
                                                let iceP_returnValue: BoolSeq = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ByteSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteSeq, outSeq: ByteSeq)`:
    ///
    ///   - returnValue: `ByteSeq`
    ///
    ///   - outSeq: `ByteSeq`
    func opByteSeq(_ iceP_inSeq: ByteSeq, context: Ice.Context? = nil) throws -> (returnValue: ByteSeq, outSeq: ByteSeq) {
        return try _impl._invoke(operation: "opByteSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: ByteSeq = try istr.read()
                                     let iceP_returnValue: ByteSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteSeq, outSeq: ByteSeq)` - The result of the operation
    func opByteSeqAsync(_ iceP_inSeq: ByteSeq, context: Ice.Context? = nil) async throws -> (returnValue: ByteSeq, outSeq: ByteSeq) {
        return try await _impl._invokeAsync(operation: "opByteSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: ByteSeq = try istr.read()
                                                let iceP_returnValue: ByteSeq = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ShortSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortSeq, outSeq: ShortSeq)`:
    ///
    ///   - returnValue: `ShortSeq`
    ///
    ///   - outSeq: `ShortSeq`
    func opShortSeq(_ iceP_inSeq: ShortSeq, context: Ice.Context? = nil) throws -> (returnValue: ShortSeq, outSeq: ShortSeq) {
        return try _impl._invoke(operation: "opShortSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: ShortSeq = try istr.read()
                                     let iceP_returnValue: ShortSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortSeq, outSeq: ShortSeq)` - The result of the operation
    func opShortSeqAsync(_ iceP_inSeq: ShortSeq, context: Ice.Context? = nil) async throws -> (returnValue: ShortSeq, outSeq: ShortSeq) {
        return try await _impl._invokeAsync(operation: "opShortSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: ShortSeq = try istr.read()
                                                let iceP_returnValue: ShortSeq = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `IntSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntSeq, outSeq: IntSeq)`:
    ///
    ///   - returnValue: `IntSeq`
    ///
    ///   - outSeq: `IntSeq`
    func opIntSeq(_ iceP_inSeq: IntSeq, context: Ice.Context? = nil) throws -> (returnValue: IntSeq, outSeq: IntSeq) {
        return try _impl._invoke(operation: "opIntSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: IntSeq = try istr.read()
                                     let iceP_returnValue: IntSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntSeq, outSeq: IntSeq)` - The result of the operation
    func opIntSeqAsync(_ iceP_inSeq: IntSeq, context: Ice.Context? = nil) async throws -> (returnValue: IntSeq, outSeq: IntSeq) {
        return try await _impl._invokeAsync(operation: "opIntSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: IntSeq = try istr.read()
                                                let iceP_returnValue: IntSeq = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `LongSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongSeq, outSeq: LongSeq)`:
    ///
    ///   - returnValue: `LongSeq`
    ///
    ///   - outSeq: `LongSeq`
    func opLongSeq(_ iceP_inSeq: LongSeq, context: Ice.Context? = nil) throws -> (returnValue: LongSeq, outSeq: LongSeq) {
        return try _impl._invoke(operation: "opLongSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: LongSeq = try istr.read()
                                     let iceP_returnValue: LongSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LongSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongSeq, outSeq: LongSeq)` - The result of the operation
    func opLongSeqAsync(_ iceP_inSeq: LongSeq, context: Ice.Context? = nil) async throws -> (returnValue: LongSeq, outSeq: LongSeq) {
        return try await _impl._invokeAsync(operation: "opLongSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: LongSeq = try istr.read()
                                                let iceP_returnValue: LongSeq = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `FloatSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatSeq, outSeq: FloatSeq)`:
    ///
    ///   - returnValue: `FloatSeq`
    ///
    ///   - outSeq: `FloatSeq`
    func opFloatSeq(_ iceP_inSeq: FloatSeq, context: Ice.Context? = nil) throws -> (returnValue: FloatSeq, outSeq: FloatSeq) {
        return try _impl._invoke(operation: "opFloatSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: FloatSeq = try istr.read()
                                     let iceP_returnValue: FloatSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `FloatSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatSeq, outSeq: FloatSeq)` - The result of the operation
    func opFloatSeqAsync(_ iceP_inSeq: FloatSeq, context: Ice.Context? = nil) async throws -> (returnValue: FloatSeq, outSeq: FloatSeq) {
        return try await _impl._invokeAsync(operation: "opFloatSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: FloatSeq = try istr.read()
                                                let iceP_returnValue: FloatSeq = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `DoubleSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleSeq, outSeq: DoubleSeq)`:
    ///
    ///   - returnValue: `DoubleSeq`
    ///
    ///   - outSeq: `DoubleSeq`
    func opDoubleSeq(_ iceP_inSeq: DoubleSeq, context: Ice.Context? = nil) throws -> (returnValue: DoubleSeq, outSeq: DoubleSeq) {
        return try _impl._invoke(operation: "opDoubleSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: DoubleSeq = try istr.read()
                                     let iceP_returnValue: DoubleSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DoubleSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleSeq, outSeq: DoubleSeq)` - The result of the operation
    func opDoubleSeqAsync(_ iceP_inSeq: DoubleSeq, context: Ice.Context? = nil) async throws -> (returnValue: DoubleSeq, outSeq: DoubleSeq) {
        return try await _impl._invokeAsync(operation: "opDoubleSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: DoubleSeq = try istr.read()
                                                let iceP_returnValue: DoubleSeq = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `StringSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeq, outSeq: StringSeq)`:
    ///
    ///   - returnValue: `StringSeq`
    ///
    ///   - outSeq: `StringSeq`
    func opStringSeq(_ iceP_inSeq: StringSeq, context: Ice.Context? = nil) throws -> (returnValue: StringSeq, outSeq: StringSeq) {
        return try _impl._invoke(operation: "opStringSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: StringSeq = try istr.read()
                                     let iceP_returnValue: StringSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeq, outSeq: StringSeq)` - The result of the operation
    func opStringSeqAsync(_ iceP_inSeq: StringSeq, context: Ice.Context? = nil) async throws -> (returnValue: StringSeq, outSeq: StringSeq) {
        return try await _impl._invokeAsync(operation: "opStringSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: StringSeq = try istr.read()
                                                let iceP_returnValue: StringSeq = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ESeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ESeq, outSeq: ESeq)`:
    ///
    ///   - returnValue: `ESeq`
    ///
    ///   - outSeq: `ESeq`
    func opESeq(_ iceP_inSeq: ESeq, context: Ice.Context? = nil) throws -> (returnValue: ESeq, outSeq: ESeq) {
        return try _impl._invoke(operation: "opESeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ESeqHelper.write(to: ostr, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: ESeq = try ESeqHelper.read(from: istr)
                                     let iceP_returnValue: ESeq = try ESeqHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ESeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ESeq, outSeq: ESeq)` - The result of the operation
    func opESeqAsync(_ iceP_inSeq: ESeq, context: Ice.Context? = nil) async throws -> (returnValue: ESeq, outSeq: ESeq) {
        return try await _impl._invokeAsync(operation: "opESeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ESeqHelper.write(to: ostr, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: ESeq = try ESeqHelper.read(from: istr)
                                                let iceP_returnValue: ESeq = try ESeqHelper.read(from: istr)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `SSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SSeq, outSeq: SSeq)`:
    ///
    ///   - returnValue: `SSeq`
    ///
    ///   - outSeq: `SSeq`
    func opSSeq(_ iceP_inSeq: SSeq, context: Ice.Context? = nil) throws -> (returnValue: SSeq, outSeq: SSeq) {
        return try _impl._invoke(operation: "opSSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     SSeqHelper.write(to: ostr, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: SSeq = try SSeqHelper.read(from: istr)
                                     let iceP_returnValue: SSeq = try SSeqHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SSeq, outSeq: SSeq)` - The result of the operation
    func opSSeqAsync(_ iceP_inSeq: SSeq, context: Ice.Context? = nil) async throws -> (returnValue: SSeq, outSeq: SSeq) {
        return try await _impl._invokeAsync(operation: "opSSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                SSeqHelper.write(to: ostr, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: SSeq = try SSeqHelper.read(from: istr)
                                                let iceP_returnValue: SSeq = try SSeqHelper.read(from: istr)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `DSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DSeq, outSeq: DSeq)`:
    ///
    ///   - returnValue: `DSeq`
    ///
    ///   - outSeq: `DSeq`
    func opDSeq(_ iceP_inSeq: DSeq, context: Ice.Context? = nil) throws -> (returnValue: DSeq, outSeq: DSeq) {
        return try _impl._invoke(operation: "opDSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     DSeqHelper.write(to: ostr, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: DSeq = try DSeqHelper.read(from: istr)
                                     let iceP_returnValue: DSeq = try DSeqHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DSeq, outSeq: DSeq)` - The result of the operation
    func opDSeqAsync(_ iceP_inSeq: DSeq, context: Ice.Context? = nil) async throws -> (returnValue: DSeq, outSeq: DSeq) {
        return try await _impl._invokeAsync(operation: "opDSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                DSeqHelper.write(to: ostr, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: DSeq = try DSeqHelper.read(from: istr)
                                                let iceP_returnValue: DSeq = try DSeqHelper.read(from: istr)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `StringSeqSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeqSeq, outSeq: StringSeqSeq)`:
    ///
    ///   - returnValue: `StringSeqSeq`
    ///
    ///   - outSeq: `StringSeqSeq`
    func opStringSeqSeq(_ iceP_inSeq: StringSeqSeq, context: Ice.Context? = nil) throws -> (returnValue: StringSeqSeq, outSeq: StringSeqSeq) {
        return try _impl._invoke(operation: "opStringSeqSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     StringSeqSeqHelper.write(to: ostr, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: StringSeqSeq = try StringSeqSeqHelper.read(from: istr)
                                     let iceP_returnValue: StringSeqSeq = try StringSeqSeqHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringSeqSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeqSeq, outSeq: StringSeqSeq)` - The result of the operation
    func opStringSeqSeqAsync(_ iceP_inSeq: StringSeqSeq, context: Ice.Context? = nil) async throws -> (returnValue: StringSeqSeq, outSeq: StringSeqSeq) {
        return try await _impl._invokeAsync(operation: "opStringSeqSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                StringSeqSeqHelper.write(to: ostr, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: StringSeqSeq = try StringSeqSeqHelper.read(from: istr)
                                                let iceP_returnValue: StringSeqSeq = try StringSeqSeqHelper.read(from: istr)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ByteBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteBuffer, outSeq: ByteBuffer)`:
    ///
    ///   - returnValue: `ByteBuffer`
    ///
    ///   - outSeq: `ByteBuffer`
    func opByteBufferSeq(_ iceP_inSeq: ByteBuffer, context: Ice.Context? = nil) throws -> (returnValue: ByteBuffer, outSeq: ByteBuffer) {
        return try _impl._invoke(operation: "opByteBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: ByteBuffer = try istr.read()
                                     let iceP_returnValue: ByteBuffer = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteBuffer, outSeq: ByteBuffer)` - The result of the operation
    func opByteBufferSeqAsync(_ iceP_inSeq: ByteBuffer, context: Ice.Context? = nil) async throws -> (returnValue: ByteBuffer, outSeq: ByteBuffer) {
        return try await _impl._invokeAsync(operation: "opByteBufferSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: ByteBuffer = try istr.read()
                                                let iceP_returnValue: ByteBuffer = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ShortBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortBuffer, outSeq: ShortBuffer)`:
    ///
    ///   - returnValue: `ShortBuffer`
    ///
    ///   - outSeq: `ShortBuffer`
    func opShortBufferSeq(_ iceP_inSeq: ShortBuffer, context: Ice.Context? = nil) throws -> (returnValue: ShortBuffer, outSeq: ShortBuffer) {
        return try _impl._invoke(operation: "opShortBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: ShortBuffer = try istr.read()
                                     let iceP_returnValue: ShortBuffer = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortBuffer, outSeq: ShortBuffer)` - The result of the operation
    func opShortBufferSeqAsync(_ iceP_inSeq: ShortBuffer, context: Ice.Context? = nil) async throws -> (returnValue: ShortBuffer, outSeq: ShortBuffer) {
        return try await _impl._invokeAsync(operation: "opShortBufferSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: ShortBuffer = try istr.read()
                                                let iceP_returnValue: ShortBuffer = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `IntBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntBuffer, outSeq: IntBuffer)`:
    ///
    ///   - returnValue: `IntBuffer`
    ///
    ///   - outSeq: `IntBuffer`
    func opIntBufferSeq(_ iceP_inSeq: IntBuffer, context: Ice.Context? = nil) throws -> (returnValue: IntBuffer, outSeq: IntBuffer) {
        return try _impl._invoke(operation: "opIntBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: IntBuffer = try istr.read()
                                     let iceP_returnValue: IntBuffer = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntBuffer, outSeq: IntBuffer)` - The result of the operation
    func opIntBufferSeqAsync(_ iceP_inSeq: IntBuffer, context: Ice.Context? = nil) async throws -> (returnValue: IntBuffer, outSeq: IntBuffer) {
        return try await _impl._invokeAsync(operation: "opIntBufferSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: IntBuffer = try istr.read()
                                                let iceP_returnValue: IntBuffer = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `LongBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongBuffer, outSeq: LongBuffer)`:
    ///
    ///   - returnValue: `LongBuffer`
    ///
    ///   - outSeq: `LongBuffer`
    func opLongBufferSeq(_ iceP_inSeq: LongBuffer, context: Ice.Context? = nil) throws -> (returnValue: LongBuffer, outSeq: LongBuffer) {
        return try _impl._invoke(operation: "opLongBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: LongBuffer = try istr.read()
                                     let iceP_returnValue: LongBuffer = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LongBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongBuffer, outSeq: LongBuffer)` - The result of the operation
    func opLongBufferSeqAsync(_ iceP_inSeq: LongBuffer, context: Ice.Context? = nil) async throws -> (returnValue: LongBuffer, outSeq: LongBuffer) {
        return try await _impl._invokeAsync(operation: "opLongBufferSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: LongBuffer = try istr.read()
                                                let iceP_returnValue: LongBuffer = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `FloatBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatBuffer, outSeq: FloatBuffer)`:
    ///
    ///   - returnValue: `FloatBuffer`
    ///
    ///   - outSeq: `FloatBuffer`
    func opFloatBufferSeq(_ iceP_inSeq: FloatBuffer, context: Ice.Context? = nil) throws -> (returnValue: FloatBuffer, outSeq: FloatBuffer) {
        return try _impl._invoke(operation: "opFloatBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: FloatBuffer = try istr.read()
                                     let iceP_returnValue: FloatBuffer = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `FloatBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatBuffer, outSeq: FloatBuffer)` - The result of the operation
    func opFloatBufferSeqAsync(_ iceP_inSeq: FloatBuffer, context: Ice.Context? = nil) async throws -> (returnValue: FloatBuffer, outSeq: FloatBuffer) {
        return try await _impl._invokeAsync(operation: "opFloatBufferSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: FloatBuffer = try istr.read()
                                                let iceP_returnValue: FloatBuffer = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `DoubleBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleBuffer, outSeq: DoubleBuffer)`:
    ///
    ///   - returnValue: `DoubleBuffer`
    ///
    ///   - outSeq: `DoubleBuffer`
    func opDoubleBufferSeq(_ iceP_inSeq: DoubleBuffer, context: Ice.Context? = nil) throws -> (returnValue: DoubleBuffer, outSeq: DoubleBuffer) {
        return try _impl._invoke(operation: "opDoubleBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: DoubleBuffer = try istr.read()
                                     let iceP_returnValue: DoubleBuffer = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DoubleBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleBuffer, outSeq: DoubleBuffer)` - The result of the operation
    func opDoubleBufferSeqAsync(_ iceP_inSeq: DoubleBuffer, context: Ice.Context? = nil) async throws -> (returnValue: DoubleBuffer, outSeq: DoubleBuffer) {
        return try await _impl._invokeAsync(operation: "opDoubleBufferSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_outSeq: DoubleBuffer = try istr.read()
                                                let iceP_returnValue: DoubleBuffer = try istr.read()
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ASeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ASeq?, outSeq: ASeq?)`:
    ///
    ///   - returnValue: `ASeq?`
    ///
    ///   - outSeq: `ASeq?`
    func opOptASeq(_ iceP_inSeq: ASeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: ASeq?, outSeq: ASeq?) {
        return try _impl._invoke(operation: "opOptASeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ASeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ASeq? = try ASeqHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: ASeq? = try ASeqHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ASeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ASeq?, outSeq: ASeq?)` - The result of the operation
    func opOptASeqAsync(_ iceP_inSeq: ASeq? = nil, context: Ice.Context? = nil) async throws -> (returnValue: ASeq?, outSeq: ASeq?) {
        return try await _impl._invokeAsync(operation: "opOptASeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ASeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: ASeq? = try ASeqHelper.read(from: istr, tag: 1)
                                                let iceP_outSeq: ASeq? = try ASeqHelper.read(from: istr, tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `AArray?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AArray?, outSeq: AArray?)`:
    ///
    ///   - returnValue: `AArray?`
    ///
    ///   - outSeq: `AArray?`
    func opOptAArray(_ iceP_inSeq: AArray? = nil, context: Ice.Context? = nil) throws -> (returnValue: AArray?, outSeq: AArray?) {
        return try _impl._invoke(operation: "opOptAArray",
                                 mode: .Normal,
                                 write: { ostr in
                                     AArrayHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: AArray? = try AArrayHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: AArray? = try AArrayHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AArray?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AArray?, outSeq: AArray?)` - The result of the operation
    func opOptAArrayAsync(_ iceP_inSeq: AArray? = nil, context: Ice.Context? = nil) async throws -> (returnValue: AArray?, outSeq: AArray?) {
        return try await _impl._invokeAsync(operation: "opOptAArray",
                                            mode: .Normal,
                                            write: { ostr in
                                                AArrayHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: AArray? = try AArrayHelper.read(from: istr, tag: 1)
                                                let iceP_outSeq: AArray? = try AArrayHelper.read(from: istr, tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `AList?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AList?, outSeq: AList?)`:
    ///
    ///   - returnValue: `AList?`
    ///
    ///   - outSeq: `AList?`
    func opOptAList(_ iceP_inSeq: AList? = nil, context: Ice.Context? = nil) throws -> (returnValue: AList?, outSeq: AList?) {
        return try _impl._invoke(operation: "opOptAList",
                                 mode: .Normal,
                                 write: { ostr in
                                     AListHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: AList? = try AListHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: AList? = try AListHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AList?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AList?, outSeq: AList?)` - The result of the operation
    func opOptAListAsync(_ iceP_inSeq: AList? = nil, context: Ice.Context? = nil) async throws -> (returnValue: AList?, outSeq: AList?) {
        return try await _impl._invokeAsync(operation: "opOptAList",
                                            mode: .Normal,
                                            write: { ostr in
                                                AListHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: AList? = try AListHelper.read(from: istr, tag: 1)
                                                let iceP_outSeq: AList? = try AListHelper.read(from: istr, tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `BoolSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: BoolSeq?, outSeq: BoolSeq?)`:
    ///
    ///   - returnValue: `BoolSeq?`
    ///
    ///   - outSeq: `BoolSeq?`
    func opOptBoolSeq(_ iceP_inSeq: BoolSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: BoolSeq?, outSeq: BoolSeq?) {
        return try _impl._invoke(operation: "opOptBoolSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: BoolSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: BoolSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `BoolSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: BoolSeq?, outSeq: BoolSeq?)` - The result of the operation
    func opOptBoolSeqAsync(_ iceP_inSeq: BoolSeq? = nil, context: Ice.Context? = nil) async throws -> (returnValue: BoolSeq?, outSeq: BoolSeq?) {
        return try await _impl._invokeAsync(operation: "opOptBoolSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: BoolSeq? = try istr.read(tag: 1)
                                                let iceP_outSeq: BoolSeq? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ByteSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteSeq?, outSeq: ByteSeq?)`:
    ///
    ///   - returnValue: `ByteSeq?`
    ///
    ///   - outSeq: `ByteSeq?`
    func opOptByteSeq(_ iceP_inSeq: ByteSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: ByteSeq?, outSeq: ByteSeq?) {
        return try _impl._invoke(operation: "opOptByteSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ByteSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: ByteSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteSeq?, outSeq: ByteSeq?)` - The result of the operation
    func opOptByteSeqAsync(_ iceP_inSeq: ByteSeq? = nil, context: Ice.Context? = nil) async throws -> (returnValue: ByteSeq?, outSeq: ByteSeq?) {
        return try await _impl._invokeAsync(operation: "opOptByteSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: ByteSeq? = try istr.read(tag: 1)
                                                let iceP_outSeq: ByteSeq? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ShortSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortSeq?, outSeq: ShortSeq?)`:
    ///
    ///   - returnValue: `ShortSeq?`
    ///
    ///   - outSeq: `ShortSeq?`
    func opOptShortSeq(_ iceP_inSeq: ShortSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: ShortSeq?, outSeq: ShortSeq?) {
        return try _impl._invoke(operation: "opOptShortSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ShortSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: ShortSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortSeq?, outSeq: ShortSeq?)` - The result of the operation
    func opOptShortSeqAsync(_ iceP_inSeq: ShortSeq? = nil, context: Ice.Context? = nil) async throws -> (returnValue: ShortSeq?, outSeq: ShortSeq?) {
        return try await _impl._invokeAsync(operation: "opOptShortSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: ShortSeq? = try istr.read(tag: 1)
                                                let iceP_outSeq: ShortSeq? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `IntSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntSeq?, outSeq: IntSeq?)`:
    ///
    ///   - returnValue: `IntSeq?`
    ///
    ///   - outSeq: `IntSeq?`
    func opOptIntSeq(_ iceP_inSeq: IntSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: IntSeq?, outSeq: IntSeq?) {
        return try _impl._invoke(operation: "opOptIntSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: IntSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: IntSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntSeq?, outSeq: IntSeq?)` - The result of the operation
    func opOptIntSeqAsync(_ iceP_inSeq: IntSeq? = nil, context: Ice.Context? = nil) async throws -> (returnValue: IntSeq?, outSeq: IntSeq?) {
        return try await _impl._invokeAsync(operation: "opOptIntSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: IntSeq? = try istr.read(tag: 1)
                                                let iceP_outSeq: IntSeq? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `LongSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongSeq?, outSeq: LongSeq?)`:
    ///
    ///   - returnValue: `LongSeq?`
    ///
    ///   - outSeq: `LongSeq?`
    func opOptLongSeq(_ iceP_inSeq: LongSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: LongSeq?, outSeq: LongSeq?) {
        return try _impl._invoke(operation: "opOptLongSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: LongSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: LongSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LongSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongSeq?, outSeq: LongSeq?)` - The result of the operation
    func opOptLongSeqAsync(_ iceP_inSeq: LongSeq? = nil, context: Ice.Context? = nil) async throws -> (returnValue: LongSeq?, outSeq: LongSeq?) {
        return try await _impl._invokeAsync(operation: "opOptLongSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: LongSeq? = try istr.read(tag: 1)
                                                let iceP_outSeq: LongSeq? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `FloatSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatSeq?, outSeq: FloatSeq?)`:
    ///
    ///   - returnValue: `FloatSeq?`
    ///
    ///   - outSeq: `FloatSeq?`
    func opOptFloatSeq(_ iceP_inSeq: FloatSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: FloatSeq?, outSeq: FloatSeq?) {
        return try _impl._invoke(operation: "opOptFloatSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: FloatSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: FloatSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `FloatSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatSeq?, outSeq: FloatSeq?)` - The result of the operation
    func opOptFloatSeqAsync(_ iceP_inSeq: FloatSeq? = nil, context: Ice.Context? = nil) async throws -> (returnValue: FloatSeq?, outSeq: FloatSeq?) {
        return try await _impl._invokeAsync(operation: "opOptFloatSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: FloatSeq? = try istr.read(tag: 1)
                                                let iceP_outSeq: FloatSeq? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `DoubleSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleSeq?, outSeq: DoubleSeq?)`:
    ///
    ///   - returnValue: `DoubleSeq?`
    ///
    ///   - outSeq: `DoubleSeq?`
    func opOptDoubleSeq(_ iceP_inSeq: DoubleSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: DoubleSeq?, outSeq: DoubleSeq?) {
        return try _impl._invoke(operation: "opOptDoubleSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: DoubleSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: DoubleSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DoubleSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleSeq?, outSeq: DoubleSeq?)` - The result of the operation
    func opOptDoubleSeqAsync(_ iceP_inSeq: DoubleSeq? = nil, context: Ice.Context? = nil) async throws -> (returnValue: DoubleSeq?, outSeq: DoubleSeq?) {
        return try await _impl._invokeAsync(operation: "opOptDoubleSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: DoubleSeq? = try istr.read(tag: 1)
                                                let iceP_outSeq: DoubleSeq? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `StringSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeq?, outSeq: StringSeq?)`:
    ///
    ///   - returnValue: `StringSeq?`
    ///
    ///   - outSeq: `StringSeq?`
    func opOptStringSeq(_ iceP_inSeq: StringSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: StringSeq?, outSeq: StringSeq?) {
        return try _impl._invoke(operation: "opOptStringSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: StringSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: StringSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeq?, outSeq: StringSeq?)` - The result of the operation
    func opOptStringSeqAsync(_ iceP_inSeq: StringSeq? = nil, context: Ice.Context? = nil) async throws -> (returnValue: StringSeq?, outSeq: StringSeq?) {
        return try await _impl._invokeAsync(operation: "opOptStringSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: StringSeq? = try istr.read(tag: 1)
                                                let iceP_outSeq: StringSeq? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ESeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ESeq?, outSeq: ESeq?)`:
    ///
    ///   - returnValue: `ESeq?`
    ///
    ///   - outSeq: `ESeq?`
    func opOptESeq(_ iceP_inSeq: ESeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: ESeq?, outSeq: ESeq?) {
        return try _impl._invoke(operation: "opOptESeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ESeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ESeq? = try ESeqHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: ESeq? = try ESeqHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ESeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ESeq?, outSeq: ESeq?)` - The result of the operation
    func opOptESeqAsync(_ iceP_inSeq: ESeq? = nil, context: Ice.Context? = nil) async throws -> (returnValue: ESeq?, outSeq: ESeq?) {
        return try await _impl._invokeAsync(operation: "opOptESeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ESeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: ESeq? = try ESeqHelper.read(from: istr, tag: 1)
                                                let iceP_outSeq: ESeq? = try ESeqHelper.read(from: istr, tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `SSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SSeq?, outSeq: SSeq?)`:
    ///
    ///   - returnValue: `SSeq?`
    ///
    ///   - outSeq: `SSeq?`
    func opOptSSeq(_ iceP_inSeq: SSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: SSeq?, outSeq: SSeq?) {
        return try _impl._invoke(operation: "opOptSSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     SSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: SSeq? = try SSeqHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: SSeq? = try SSeqHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SSeq?, outSeq: SSeq?)` - The result of the operation
    func opOptSSeqAsync(_ iceP_inSeq: SSeq? = nil, context: Ice.Context? = nil) async throws -> (returnValue: SSeq?, outSeq: SSeq?) {
        return try await _impl._invokeAsync(operation: "opOptSSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                SSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: SSeq? = try SSeqHelper.read(from: istr, tag: 1)
                                                let iceP_outSeq: SSeq? = try SSeqHelper.read(from: istr, tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `DSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DSeq?, outSeq: DSeq?)`:
    ///
    ///   - returnValue: `DSeq?`
    ///
    ///   - outSeq: `DSeq?`
    func opOptDSeq(_ iceP_inSeq: DSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: DSeq?, outSeq: DSeq?) {
        return try _impl._invoke(operation: "opOptDSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     DSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: DSeq? = try DSeqHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: DSeq? = try DSeqHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DSeq?, outSeq: DSeq?)` - The result of the operation
    func opOptDSeqAsync(_ iceP_inSeq: DSeq? = nil, context: Ice.Context? = nil) async throws -> (returnValue: DSeq?, outSeq: DSeq?) {
        return try await _impl._invokeAsync(operation: "opOptDSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                DSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: DSeq? = try DSeqHelper.read(from: istr, tag: 1)
                                                let iceP_outSeq: DSeq? = try DSeqHelper.read(from: istr, tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `StringSeqSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeqSeq?, outSeq: StringSeqSeq?)`:
    ///
    ///   - returnValue: `StringSeqSeq?`
    ///
    ///   - outSeq: `StringSeqSeq?`
    func opOptStringSeqSeq(_ iceP_inSeq: StringSeqSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: StringSeqSeq?, outSeq: StringSeqSeq?) {
        return try _impl._invoke(operation: "opOptStringSeqSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     StringSeqSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: StringSeqSeq? = try StringSeqSeqHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: StringSeqSeq? = try StringSeqSeqHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringSeqSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeqSeq?, outSeq: StringSeqSeq?)` - The result of the operation
    func opOptStringSeqSeqAsync(_ iceP_inSeq: StringSeqSeq? = nil, context: Ice.Context? = nil) async throws -> (returnValue: StringSeqSeq?, outSeq: StringSeqSeq?) {
        return try await _impl._invokeAsync(operation: "opOptStringSeqSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                StringSeqSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: StringSeqSeq? = try StringSeqSeqHelper.read(from: istr, tag: 1)
                                                let iceP_outSeq: StringSeqSeq? = try StringSeqSeqHelper.read(from: istr, tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ByteBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteBuffer?, outSeq: ByteBuffer?)`:
    ///
    ///   - returnValue: `ByteBuffer?`
    ///
    ///   - outSeq: `ByteBuffer?`
    func opOptByteBufferSeq(_ iceP_inSeq: ByteBuffer? = nil, context: Ice.Context? = nil) throws -> (returnValue: ByteBuffer?, outSeq: ByteBuffer?) {
        return try _impl._invoke(operation: "opOptByteBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ByteBuffer? = try istr.read(tag: 1)
                                     let iceP_outSeq: ByteBuffer? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteBuffer?, outSeq: ByteBuffer?)` - The result of the operation
    func opOptByteBufferSeqAsync(_ iceP_inSeq: ByteBuffer? = nil, context: Ice.Context? = nil) async throws -> (returnValue: ByteBuffer?, outSeq: ByteBuffer?) {
        return try await _impl._invokeAsync(operation: "opOptByteBufferSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: ByteBuffer? = try istr.read(tag: 1)
                                                let iceP_outSeq: ByteBuffer? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `ShortBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortBuffer?, outSeq: ShortBuffer?)`:
    ///
    ///   - returnValue: `ShortBuffer?`
    ///
    ///   - outSeq: `ShortBuffer?`
    func opOptShortBufferSeq(_ iceP_inSeq: ShortBuffer? = nil, context: Ice.Context? = nil) throws -> (returnValue: ShortBuffer?, outSeq: ShortBuffer?) {
        return try _impl._invoke(operation: "opOptShortBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ShortBuffer? = try istr.read(tag: 1)
                                     let iceP_outSeq: ShortBuffer? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortBuffer?, outSeq: ShortBuffer?)` - The result of the operation
    func opOptShortBufferSeqAsync(_ iceP_inSeq: ShortBuffer? = nil, context: Ice.Context? = nil) async throws -> (returnValue: ShortBuffer?, outSeq: ShortBuffer?) {
        return try await _impl._invokeAsync(operation: "opOptShortBufferSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: ShortBuffer? = try istr.read(tag: 1)
                                                let iceP_outSeq: ShortBuffer? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `IntBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntBuffer?, outSeq: IntBuffer?)`:
    ///
    ///   - returnValue: `IntBuffer?`
    ///
    ///   - outSeq: `IntBuffer?`
    func opOptIntBufferSeq(_ iceP_inSeq: IntBuffer? = nil, context: Ice.Context? = nil) throws -> (returnValue: IntBuffer?, outSeq: IntBuffer?) {
        return try _impl._invoke(operation: "opOptIntBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: IntBuffer? = try istr.read(tag: 1)
                                     let iceP_outSeq: IntBuffer? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntBuffer?, outSeq: IntBuffer?)` - The result of the operation
    func opOptIntBufferSeqAsync(_ iceP_inSeq: IntBuffer? = nil, context: Ice.Context? = nil) async throws -> (returnValue: IntBuffer?, outSeq: IntBuffer?) {
        return try await _impl._invokeAsync(operation: "opOptIntBufferSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: IntBuffer? = try istr.read(tag: 1)
                                                let iceP_outSeq: IntBuffer? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `LongBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongBuffer?, outSeq: LongBuffer?)`:
    ///
    ///   - returnValue: `LongBuffer?`
    ///
    ///   - outSeq: `LongBuffer?`
    func opOptLongBufferSeq(_ iceP_inSeq: LongBuffer? = nil, context: Ice.Context? = nil) throws -> (returnValue: LongBuffer?, outSeq: LongBuffer?) {
        return try _impl._invoke(operation: "opOptLongBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: LongBuffer? = try istr.read(tag: 1)
                                     let iceP_outSeq: LongBuffer? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LongBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongBuffer?, outSeq: LongBuffer?)` - The result of the operation
    func opOptLongBufferSeqAsync(_ iceP_inSeq: LongBuffer? = nil, context: Ice.Context? = nil) async throws -> (returnValue: LongBuffer?, outSeq: LongBuffer?) {
        return try await _impl._invokeAsync(operation: "opOptLongBufferSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: LongBuffer? = try istr.read(tag: 1)
                                                let iceP_outSeq: LongBuffer? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `FloatBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatBuffer?, outSeq: FloatBuffer?)`:
    ///
    ///   - returnValue: `FloatBuffer?`
    ///
    ///   - outSeq: `FloatBuffer?`
    func opOptFloatBufferSeq(_ iceP_inSeq: FloatBuffer? = nil, context: Ice.Context? = nil) throws -> (returnValue: FloatBuffer?, outSeq: FloatBuffer?) {
        return try _impl._invoke(operation: "opOptFloatBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: FloatBuffer? = try istr.read(tag: 1)
                                     let iceP_outSeq: FloatBuffer? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `FloatBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatBuffer?, outSeq: FloatBuffer?)` - The result of the operation
    func opOptFloatBufferSeqAsync(_ iceP_inSeq: FloatBuffer? = nil, context: Ice.Context? = nil) async throws -> (returnValue: FloatBuffer?, outSeq: FloatBuffer?) {
        return try await _impl._invokeAsync(operation: "opOptFloatBufferSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: FloatBuffer? = try istr.read(tag: 1)
                                                let iceP_outSeq: FloatBuffer? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter _: `DoubleBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleBuffer?, outSeq: DoubleBuffer?)`:
    ///
    ///   - returnValue: `DoubleBuffer?`
    ///
    ///   - outSeq: `DoubleBuffer?`
    func opOptDoubleBufferSeq(_ iceP_inSeq: DoubleBuffer? = nil, context: Ice.Context? = nil) throws -> (returnValue: DoubleBuffer?, outSeq: DoubleBuffer?) {
        return try _impl._invoke(operation: "opOptDoubleBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: DoubleBuffer? = try istr.read(tag: 1)
                                     let iceP_outSeq: DoubleBuffer? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DoubleBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleBuffer?, outSeq: DoubleBuffer?)` - The result of the operation
    func opOptDoubleBufferSeqAsync(_ iceP_inSeq: DoubleBuffer? = nil, context: Ice.Context? = nil) async throws -> (returnValue: DoubleBuffer?, outSeq: DoubleBuffer?) {
        return try await _impl._invokeAsync(operation: "opOptDoubleBufferSeq",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 2, value: iceP_inSeq)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: DoubleBuffer? = try istr.read(tag: 1)
                                                let iceP_outSeq: DoubleBuffer? = try istr.read(tag: 3)
                                                return (iceP_returnValue, iceP_outSeq)
                                            },
                                            context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "shutdown",
                                            mode: .Normal,
                                            context: context)
    }
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Dispatcher {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(request)
        case "opAArray":
            try await servant._iceD_opAArray(request)
        case "opAList":
            try await servant._iceD_opAList(request)
        case "opASeq":
            try await servant._iceD_opASeq(request)
        case "opBoolSeq":
            try await servant._iceD_opBoolSeq(request)
        case "opByteBufferSeq":
            try await servant._iceD_opByteBufferSeq(request)
        case "opByteSeq":
            try await servant._iceD_opByteSeq(request)
        case "opDSeq":
            try await servant._iceD_opDSeq(request)
        case "opDoubleBufferSeq":
            try await servant._iceD_opDoubleBufferSeq(request)
        case "opDoubleSeq":
            try await servant._iceD_opDoubleSeq(request)
        case "opESeq":
            try await servant._iceD_opESeq(request)
        case "opFloatBufferSeq":
            try await servant._iceD_opFloatBufferSeq(request)
        case "opFloatSeq":
            try await servant._iceD_opFloatSeq(request)
        case "opIntBufferSeq":
            try await servant._iceD_opIntBufferSeq(request)
        case "opIntSeq":
            try await servant._iceD_opIntSeq(request)
        case "opLongBufferSeq":
            try await servant._iceD_opLongBufferSeq(request)
        case "opLongSeq":
            try await servant._iceD_opLongSeq(request)
        case "opOptAArray":
            try await servant._iceD_opOptAArray(request)
        case "opOptAList":
            try await servant._iceD_opOptAList(request)
        case "opOptASeq":
            try await servant._iceD_opOptASeq(request)
        case "opOptBoolSeq":
            try await servant._iceD_opOptBoolSeq(request)
        case "opOptByteBufferSeq":
            try await servant._iceD_opOptByteBufferSeq(request)
        case "opOptByteSeq":
            try await servant._iceD_opOptByteSeq(request)
        case "opOptDSeq":
            try await servant._iceD_opOptDSeq(request)
        case "opOptDoubleBufferSeq":
            try await servant._iceD_opOptDoubleBufferSeq(request)
        case "opOptDoubleSeq":
            try await servant._iceD_opOptDoubleSeq(request)
        case "opOptESeq":
            try await servant._iceD_opOptESeq(request)
        case "opOptFloatBufferSeq":
            try await servant._iceD_opOptFloatBufferSeq(request)
        case "opOptFloatSeq":
            try await servant._iceD_opOptFloatSeq(request)
        case "opOptIntBufferSeq":
            try await servant._iceD_opOptIntBufferSeq(request)
        case "opOptIntSeq":
            try await servant._iceD_opOptIntSeq(request)
        case "opOptLongBufferSeq":
            try await servant._iceD_opOptLongBufferSeq(request)
        case "opOptLongSeq":
            try await servant._iceD_opOptLongSeq(request)
        case "opOptSSeq":
            try await servant._iceD_opOptSSeq(request)
        case "opOptShortBufferSeq":
            try await servant._iceD_opOptShortBufferSeq(request)
        case "opOptShortSeq":
            try await servant._iceD_opOptShortSeq(request)
        case "opOptStringSeq":
            try await servant._iceD_opOptStringSeq(request)
        case "opOptStringSeqSeq":
            try await servant._iceD_opOptStringSeqSeq(request)
        case "opSSeq":
            try await servant._iceD_opSSeq(request)
        case "opShortBufferSeq":
            try await servant._iceD_opShortBufferSeq(request)
        case "opShortSeq":
            try await servant._iceD_opShortSeq(request)
        case "opStringSeq":
            try await servant._iceD_opStringSeq(request)
        case "opStringSeqSeq":
            try await servant._iceD_opStringSeqSeq(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol TestIntf {
    ///
    /// - parameter inSeq: `ASeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ASeq, outSeq: ASeq)`:
    ///
    ///   - returnValue: `ASeq`
    ///
    ///   - outSeq: `ASeq`
    func opASeq(inSeq: ASeq, current: Ice.Current) throws -> (returnValue: ASeq, outSeq: ASeq)

    ///
    /// - parameter inSeq: `AArray`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AArray, outSeq: AArray)`:
    ///
    ///   - returnValue: `AArray`
    ///
    ///   - outSeq: `AArray`
    func opAArray(inSeq: AArray, current: Ice.Current) throws -> (returnValue: AArray, outSeq: AArray)

    ///
    /// - parameter inSeq: `AList`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AList, outSeq: AList)`:
    ///
    ///   - returnValue: `AList`
    ///
    ///   - outSeq: `AList`
    func opAList(inSeq: AList, current: Ice.Current) throws -> (returnValue: AList, outSeq: AList)

    ///
    /// - parameter inSeq: `BoolSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: BoolSeq, outSeq: BoolSeq)`:
    ///
    ///   - returnValue: `BoolSeq`
    ///
    ///   - outSeq: `BoolSeq`
    func opBoolSeq(inSeq: BoolSeq, current: Ice.Current) throws -> (returnValue: BoolSeq, outSeq: BoolSeq)

    ///
    /// - parameter inSeq: `ByteSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteSeq, outSeq: ByteSeq)`:
    ///
    ///   - returnValue: `ByteSeq`
    ///
    ///   - outSeq: `ByteSeq`
    func opByteSeq(inSeq: ByteSeq, current: Ice.Current) throws -> (returnValue: ByteSeq, outSeq: ByteSeq)

    ///
    /// - parameter inSeq: `ShortSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortSeq, outSeq: ShortSeq)`:
    ///
    ///   - returnValue: `ShortSeq`
    ///
    ///   - outSeq: `ShortSeq`
    func opShortSeq(inSeq: ShortSeq, current: Ice.Current) throws -> (returnValue: ShortSeq, outSeq: ShortSeq)

    ///
    /// - parameter inSeq: `IntSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntSeq, outSeq: IntSeq)`:
    ///
    ///   - returnValue: `IntSeq`
    ///
    ///   - outSeq: `IntSeq`
    func opIntSeq(inSeq: IntSeq, current: Ice.Current) throws -> (returnValue: IntSeq, outSeq: IntSeq)

    ///
    /// - parameter inSeq: `LongSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LongSeq, outSeq: LongSeq)`:
    ///
    ///   - returnValue: `LongSeq`
    ///
    ///   - outSeq: `LongSeq`
    func opLongSeq(inSeq: LongSeq, current: Ice.Current) throws -> (returnValue: LongSeq, outSeq: LongSeq)

    ///
    /// - parameter inSeq: `FloatSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: FloatSeq, outSeq: FloatSeq)`:
    ///
    ///   - returnValue: `FloatSeq`
    ///
    ///   - outSeq: `FloatSeq`
    func opFloatSeq(inSeq: FloatSeq, current: Ice.Current) throws -> (returnValue: FloatSeq, outSeq: FloatSeq)

    ///
    /// - parameter inSeq: `DoubleSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DoubleSeq, outSeq: DoubleSeq)`:
    ///
    ///   - returnValue: `DoubleSeq`
    ///
    ///   - outSeq: `DoubleSeq`
    func opDoubleSeq(inSeq: DoubleSeq, current: Ice.Current) throws -> (returnValue: DoubleSeq, outSeq: DoubleSeq)

    ///
    /// - parameter inSeq: `StringSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringSeq, outSeq: StringSeq)`:
    ///
    ///   - returnValue: `StringSeq`
    ///
    ///   - outSeq: `StringSeq`
    func opStringSeq(inSeq: StringSeq, current: Ice.Current) throws -> (returnValue: StringSeq, outSeq: StringSeq)

    ///
    /// - parameter inSeq: `ESeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ESeq, outSeq: ESeq)`:
    ///
    ///   - returnValue: `ESeq`
    ///
    ///   - outSeq: `ESeq`
    func opESeq(inSeq: ESeq, current: Ice.Current) throws -> (returnValue: ESeq, outSeq: ESeq)

    ///
    /// - parameter inSeq: `SSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SSeq, outSeq: SSeq)`:
    ///
    ///   - returnValue: `SSeq`
    ///
    ///   - outSeq: `SSeq`
    func opSSeq(inSeq: SSeq, current: Ice.Current) throws -> (returnValue: SSeq, outSeq: SSeq)

    ///
    /// - parameter inSeq: `DSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DSeq, outSeq: DSeq)`:
    ///
    ///   - returnValue: `DSeq`
    ///
    ///   - outSeq: `DSeq`
    func opDSeq(inSeq: DSeq, current: Ice.Current) throws -> (returnValue: DSeq, outSeq: DSeq)

    ///
    /// - parameter inSeq: `StringSeqSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringSeqSeq, outSeq: StringSeqSeq)`:
    ///
    ///   - returnValue: `StringSeqSeq`
    ///
    ///   - outSeq: `StringSeqSeq`
    func opStringSeqSeq(inSeq: StringSeqSeq, current: Ice.Current) throws -> (returnValue: StringSeqSeq, outSeq: StringSeqSeq)

    ///
    /// - parameter inSeq: `ByteBuffer`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteBuffer, outSeq: ByteBuffer)`:
    ///
    ///   - returnValue: `ByteBuffer`
    ///
    ///   - outSeq: `ByteBuffer`
    func opByteBufferSeq(inSeq: ByteBuffer, current: Ice.Current) throws -> (returnValue: ByteBuffer, outSeq: ByteBuffer)

    ///
    /// - parameter inSeq: `ShortBuffer`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortBuffer, outSeq: ShortBuffer)`:
    ///
    ///   - returnValue: `ShortBuffer`
    ///
    ///   - outSeq: `ShortBuffer`
    func opShortBufferSeq(inSeq: ShortBuffer, current: Ice.Current) throws -> (returnValue: ShortBuffer, outSeq: ShortBuffer)

    ///
    /// - parameter inSeq: `IntBuffer`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntBuffer, outSeq: IntBuffer)`:
    ///
    ///   - returnValue: `IntBuffer`
    ///
    ///   - outSeq: `IntBuffer`
    func opIntBufferSeq(inSeq: IntBuffer, current: Ice.Current) throws -> (returnValue: IntBuffer, outSeq: IntBuffer)

    ///
    /// - parameter inSeq: `LongBuffer`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LongBuffer, outSeq: LongBuffer)`:
    ///
    ///   - returnValue: `LongBuffer`
    ///
    ///   - outSeq: `LongBuffer`
    func opLongBufferSeq(inSeq: LongBuffer, current: Ice.Current) throws -> (returnValue: LongBuffer, outSeq: LongBuffer)

    ///
    /// - parameter inSeq: `FloatBuffer`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: FloatBuffer, outSeq: FloatBuffer)`:
    ///
    ///   - returnValue: `FloatBuffer`
    ///
    ///   - outSeq: `FloatBuffer`
    func opFloatBufferSeq(inSeq: FloatBuffer, current: Ice.Current) throws -> (returnValue: FloatBuffer, outSeq: FloatBuffer)

    ///
    /// - parameter inSeq: `DoubleBuffer`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DoubleBuffer, outSeq: DoubleBuffer)`:
    ///
    ///   - returnValue: `DoubleBuffer`
    ///
    ///   - outSeq: `DoubleBuffer`
    func opDoubleBufferSeq(inSeq: DoubleBuffer, current: Ice.Current) throws -> (returnValue: DoubleBuffer, outSeq: DoubleBuffer)

    ///
    /// - parameter inSeq: `ASeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ASeq?, outSeq: ASeq?)`:
    ///
    ///   - returnValue: `ASeq?`
    ///
    ///   - outSeq: `ASeq?`
    func opOptASeq(inSeq: ASeq?, current: Ice.Current) throws -> (returnValue: ASeq?, outSeq: ASeq?)

    ///
    /// - parameter inSeq: `AArray?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AArray?, outSeq: AArray?)`:
    ///
    ///   - returnValue: `AArray?`
    ///
    ///   - outSeq: `AArray?`
    func opOptAArray(inSeq: AArray?, current: Ice.Current) throws -> (returnValue: AArray?, outSeq: AArray?)

    ///
    /// - parameter inSeq: `AList?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AList?, outSeq: AList?)`:
    ///
    ///   - returnValue: `AList?`
    ///
    ///   - outSeq: `AList?`
    func opOptAList(inSeq: AList?, current: Ice.Current) throws -> (returnValue: AList?, outSeq: AList?)

    ///
    /// - parameter inSeq: `BoolSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: BoolSeq?, outSeq: BoolSeq?)`:
    ///
    ///   - returnValue: `BoolSeq?`
    ///
    ///   - outSeq: `BoolSeq?`
    func opOptBoolSeq(inSeq: BoolSeq?, current: Ice.Current) throws -> (returnValue: BoolSeq?, outSeq: BoolSeq?)

    ///
    /// - parameter inSeq: `ByteSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteSeq?, outSeq: ByteSeq?)`:
    ///
    ///   - returnValue: `ByteSeq?`
    ///
    ///   - outSeq: `ByteSeq?`
    func opOptByteSeq(inSeq: ByteSeq?, current: Ice.Current) throws -> (returnValue: ByteSeq?, outSeq: ByteSeq?)

    ///
    /// - parameter inSeq: `ShortSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortSeq?, outSeq: ShortSeq?)`:
    ///
    ///   - returnValue: `ShortSeq?`
    ///
    ///   - outSeq: `ShortSeq?`
    func opOptShortSeq(inSeq: ShortSeq?, current: Ice.Current) throws -> (returnValue: ShortSeq?, outSeq: ShortSeq?)

    ///
    /// - parameter inSeq: `IntSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntSeq?, outSeq: IntSeq?)`:
    ///
    ///   - returnValue: `IntSeq?`
    ///
    ///   - outSeq: `IntSeq?`
    func opOptIntSeq(inSeq: IntSeq?, current: Ice.Current) throws -> (returnValue: IntSeq?, outSeq: IntSeq?)

    ///
    /// - parameter inSeq: `LongSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LongSeq?, outSeq: LongSeq?)`:
    ///
    ///   - returnValue: `LongSeq?`
    ///
    ///   - outSeq: `LongSeq?`
    func opOptLongSeq(inSeq: LongSeq?, current: Ice.Current) throws -> (returnValue: LongSeq?, outSeq: LongSeq?)

    ///
    /// - parameter inSeq: `FloatSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: FloatSeq?, outSeq: FloatSeq?)`:
    ///
    ///   - returnValue: `FloatSeq?`
    ///
    ///   - outSeq: `FloatSeq?`
    func opOptFloatSeq(inSeq: FloatSeq?, current: Ice.Current) throws -> (returnValue: FloatSeq?, outSeq: FloatSeq?)

    ///
    /// - parameter inSeq: `DoubleSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DoubleSeq?, outSeq: DoubleSeq?)`:
    ///
    ///   - returnValue: `DoubleSeq?`
    ///
    ///   - outSeq: `DoubleSeq?`
    func opOptDoubleSeq(inSeq: DoubleSeq?, current: Ice.Current) throws -> (returnValue: DoubleSeq?, outSeq: DoubleSeq?)

    ///
    /// - parameter inSeq: `StringSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringSeq?, outSeq: StringSeq?)`:
    ///
    ///   - returnValue: `StringSeq?`
    ///
    ///   - outSeq: `StringSeq?`
    func opOptStringSeq(inSeq: StringSeq?, current: Ice.Current) throws -> (returnValue: StringSeq?, outSeq: StringSeq?)

    ///
    /// - parameter inSeq: `ESeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ESeq?, outSeq: ESeq?)`:
    ///
    ///   - returnValue: `ESeq?`
    ///
    ///   - outSeq: `ESeq?`
    func opOptESeq(inSeq: ESeq?, current: Ice.Current) throws -> (returnValue: ESeq?, outSeq: ESeq?)

    ///
    /// - parameter inSeq: `SSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SSeq?, outSeq: SSeq?)`:
    ///
    ///   - returnValue: `SSeq?`
    ///
    ///   - outSeq: `SSeq?`
    func opOptSSeq(inSeq: SSeq?, current: Ice.Current) throws -> (returnValue: SSeq?, outSeq: SSeq?)

    ///
    /// - parameter inSeq: `DSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DSeq?, outSeq: DSeq?)`:
    ///
    ///   - returnValue: `DSeq?`
    ///
    ///   - outSeq: `DSeq?`
    func opOptDSeq(inSeq: DSeq?, current: Ice.Current) throws -> (returnValue: DSeq?, outSeq: DSeq?)

    ///
    /// - parameter inSeq: `StringSeqSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringSeqSeq?, outSeq: StringSeqSeq?)`:
    ///
    ///   - returnValue: `StringSeqSeq?`
    ///
    ///   - outSeq: `StringSeqSeq?`
    func opOptStringSeqSeq(inSeq: StringSeqSeq?, current: Ice.Current) throws -> (returnValue: StringSeqSeq?, outSeq: StringSeqSeq?)

    ///
    /// - parameter inSeq: `ByteBuffer?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteBuffer?, outSeq: ByteBuffer?)`:
    ///
    ///   - returnValue: `ByteBuffer?`
    ///
    ///   - outSeq: `ByteBuffer?`
    func opOptByteBufferSeq(inSeq: ByteBuffer?, current: Ice.Current) throws -> (returnValue: ByteBuffer?, outSeq: ByteBuffer?)

    ///
    /// - parameter inSeq: `ShortBuffer?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortBuffer?, outSeq: ShortBuffer?)`:
    ///
    ///   - returnValue: `ShortBuffer?`
    ///
    ///   - outSeq: `ShortBuffer?`
    func opOptShortBufferSeq(inSeq: ShortBuffer?, current: Ice.Current) throws -> (returnValue: ShortBuffer?, outSeq: ShortBuffer?)

    ///
    /// - parameter inSeq: `IntBuffer?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntBuffer?, outSeq: IntBuffer?)`:
    ///
    ///   - returnValue: `IntBuffer?`
    ///
    ///   - outSeq: `IntBuffer?`
    func opOptIntBufferSeq(inSeq: IntBuffer?, current: Ice.Current) throws -> (returnValue: IntBuffer?, outSeq: IntBuffer?)

    ///
    /// - parameter inSeq: `LongBuffer?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LongBuffer?, outSeq: LongBuffer?)`:
    ///
    ///   - returnValue: `LongBuffer?`
    ///
    ///   - outSeq: `LongBuffer?`
    func opOptLongBufferSeq(inSeq: LongBuffer?, current: Ice.Current) throws -> (returnValue: LongBuffer?, outSeq: LongBuffer?)

    ///
    /// - parameter inSeq: `FloatBuffer?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: FloatBuffer?, outSeq: FloatBuffer?)`:
    ///
    ///   - returnValue: `FloatBuffer?`
    ///
    ///   - outSeq: `FloatBuffer?`
    func opOptFloatBufferSeq(inSeq: FloatBuffer?, current: Ice.Current) throws -> (returnValue: FloatBuffer?, outSeq: FloatBuffer?)

    ///
    /// - parameter inSeq: `DoubleBuffer?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DoubleBuffer?, outSeq: DoubleBuffer?)`:
    ///
    ///   - returnValue: `DoubleBuffer?`
    ///
    ///   - outSeq: `DoubleBuffer?`
    func opOptDoubleBufferSeq(inSeq: DoubleBuffer?, current: Ice.Current) throws -> (returnValue: DoubleBuffer?, outSeq: DoubleBuffer?)

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws
}

/// TestIntf overview.
///
/// TestIntf Methods:
///
///  - opASeq: 
///
///  - opAArray: 
///
///  - opAList: 
///
///  - opBoolSeq: 
///
///  - opByteSeq: 
///
///  - opShortSeq: 
///
///  - opIntSeq: 
///
///  - opLongSeq: 
///
///  - opFloatSeq: 
///
///  - opDoubleSeq: 
///
///  - opStringSeq: 
///
///  - opESeq: 
///
///  - opSSeq: 
///
///  - opDSeq: 
///
///  - opStringSeqSeq: 
///
///  - opByteBufferSeq: 
///
///  - opShortBufferSeq: 
///
///  - opIntBufferSeq: 
///
///  - opLongBufferSeq: 
///
///  - opFloatBufferSeq: 
///
///  - opDoubleBufferSeq: 
///
///  - opOptASeq: 
///
///  - opOptAArray: 
///
///  - opOptAList: 
///
///  - opOptBoolSeq: 
///
///  - opOptByteSeq: 
///
///  - opOptShortSeq: 
///
///  - opOptIntSeq: 
///
///  - opOptLongSeq: 
///
///  - opOptFloatSeq: 
///
///  - opOptDoubleSeq: 
///
///  - opOptStringSeq: 
///
///  - opOptESeq: 
///
///  - opOptSSeq: 
///
///  - opOptDSeq: 
///
///  - opOptStringSeqSeq: 
///
///  - opOptByteBufferSeq: 
///
///  - opOptShortBufferSeq: 
///
///  - opOptIntBufferSeq: 
///
///  - opOptLongBufferSeq: 
///
///  - opOptFloatBufferSeq: 
///
///  - opOptDoubleBufferSeq: 
///
///  - shutdown: 
extension TestIntf {
    public func _iceD_opASeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: ASeq = try ASeqHelper.read(from: istr)

        let (iceP_returnValue, iceP_outSeq) = try self.opASeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ASeqHelper.write(to: ostr, value: iceP_outSeq)
        ASeqHelper.write(to: ostr, value: iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opAArray(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: AArray = try AArrayHelper.read(from: istr)

        let (iceP_returnValue, iceP_outSeq) = try self.opAArray(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        AArrayHelper.write(to: ostr, value: iceP_outSeq)
        AArrayHelper.write(to: ostr, value: iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opAList(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: AList = try AListHelper.read(from: istr)

        let (iceP_returnValue, iceP_outSeq) = try self.opAList(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        AListHelper.write(to: ostr, value: iceP_outSeq)
        AListHelper.write(to: ostr, value: iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opBoolSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: BoolSeq = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opBoolSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opByteSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: ByteSeq = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opByteSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opShortSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: ShortSeq = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opShortSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opIntSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: IntSeq = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opIntSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opLongSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: LongSeq = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opLongSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opFloatSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: FloatSeq = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opFloatSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opDoubleSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: DoubleSeq = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opDoubleSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opStringSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: StringSeq = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opStringSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opESeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: ESeq = try ESeqHelper.read(from: istr)

        let (iceP_returnValue, iceP_outSeq) = try self.opESeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ESeqHelper.write(to: ostr, value: iceP_outSeq)
        ESeqHelper.write(to: ostr, value: iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opSSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: SSeq = try SSeqHelper.read(from: istr)

        let (iceP_returnValue, iceP_outSeq) = try self.opSSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        SSeqHelper.write(to: ostr, value: iceP_outSeq)
        SSeqHelper.write(to: ostr, value: iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opDSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: DSeq = try DSeqHelper.read(from: istr)

        let (iceP_returnValue, iceP_outSeq) = try self.opDSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        DSeqHelper.write(to: ostr, value: iceP_outSeq)
        DSeqHelper.write(to: ostr, value: iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opStringSeqSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: StringSeqSeq = try StringSeqSeqHelper.read(from: istr)

        let (iceP_returnValue, iceP_outSeq) = try self.opStringSeqSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        StringSeqSeqHelper.write(to: ostr, value: iceP_outSeq)
        StringSeqSeqHelper.write(to: ostr, value: iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opByteBufferSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: ByteBuffer = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opByteBufferSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opShortBufferSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: ShortBuffer = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opShortBufferSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opIntBufferSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: IntBuffer = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opIntBufferSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opLongBufferSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: LongBuffer = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opLongBufferSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opFloatBufferSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: FloatBuffer = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opFloatBufferSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opDoubleBufferSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: DoubleBuffer = try istr.read()

        let (iceP_returnValue, iceP_outSeq) = try self.opDoubleBufferSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(iceP_outSeq)
        ostr.write(iceP_returnValue)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptASeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: ASeq? = try ASeqHelper.read(from: istr, tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptASeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ASeqHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
        ASeqHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptAArray(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: AArray? = try AArrayHelper.read(from: istr, tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptAArray(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        AArrayHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
        AArrayHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptAList(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: AList? = try AListHelper.read(from: istr, tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptAList(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        AListHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
        AListHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptBoolSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: BoolSeq? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptBoolSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptByteSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: ByteSeq? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptByteSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptShortSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: ShortSeq? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptShortSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptIntSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: IntSeq? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptIntSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptLongSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: LongSeq? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptLongSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptFloatSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: FloatSeq? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptFloatSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptDoubleSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: DoubleSeq? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptDoubleSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptStringSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: StringSeq? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptStringSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptESeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: ESeq? = try ESeqHelper.read(from: istr, tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptESeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ESeqHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
        ESeqHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptSSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: SSeq? = try SSeqHelper.read(from: istr, tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptSSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        SSeqHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
        SSeqHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptDSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: DSeq? = try DSeqHelper.read(from: istr, tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptDSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        DSeqHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
        DSeqHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptStringSeqSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: StringSeqSeq? = try StringSeqSeqHelper.read(from: istr, tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptStringSeqSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        StringSeqSeqHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
        StringSeqSeqHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptByteBufferSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: ByteBuffer? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptByteBufferSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptShortBufferSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: ShortBuffer? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptShortBufferSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptIntBufferSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: IntBuffer? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptIntBufferSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptLongBufferSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: LongBuffer? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptLongBufferSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptFloatBufferSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: FloatBuffer? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptFloatBufferSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_opOptDoubleBufferSeq(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_inSeq: DoubleBuffer? = try istr.read(tag: 2)

        let (iceP_returnValue, iceP_outSeq) = try self.opOptDoubleBufferSeq(inSeq: iceP_inSeq, current: request.current)
        let ostr = request.current.startReplyStream()
        ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
        ostr.write(tag: 1, value: iceP_returnValue)
        ostr.write(tag: 3, value: iceP_outSeq)
        ostr.endEncapsulation()
        return Ice.OutgoingResponse(ostr)
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()

        try self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
