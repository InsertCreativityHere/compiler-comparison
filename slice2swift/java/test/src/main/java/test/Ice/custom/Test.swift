//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice class `C`.
public struct CTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::C"]
    public static let staticId = "::Test::C"
}

public typealias CSeq = [C?]

/// Helper class to read and write `CSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct CSeqHelper {
    /// Read a `CSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `CSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> CSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = CSeq(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read(C.self) { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `CSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> CSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `CSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `CSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: CSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `CSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `CSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: CSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias CArray = [C?]

/// Helper class to read and write `CArray` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct CArrayHelper {
    /// Read a `CArray` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `CArray` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> CArray {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = CArray(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read(C.self) { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `CArray?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CArray` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> CArray? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `CArray` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `CArray` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: CArray) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `CArray?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `CArray` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: CArray?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias CList = [C?]

/// Helper class to read and write `CList` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct CListHelper {
    /// Read a `CList` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `CList` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> CList {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = CList(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read(C.self) { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `CList?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CList` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> CList? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `CList` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `CList` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: CList) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `CList?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `CList` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: CList?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias BoolSeq = [Swift.Bool]

public typealias ByteSeq = Foundation.Data

public typealias ShortSeq = [Swift.Int16]

public typealias IntSeq = [Swift.Int32]

public typealias LongSeq = [Swift.Int64]

public typealias FloatSeq = [Swift.Float]

public typealias DoubleSeq = [Swift.Double]

public typealias StringSeq = [Swift.String]

public typealias ByteBuffer = Foundation.Data

public typealias ShortBuffer = [Swift.Int16]

public typealias IntBuffer = [Swift.Int32]

public typealias LongBuffer = [Swift.Int64]

public typealias FloatBuffer = [Swift.Float]

public typealias DoubleBuffer = [Swift.Double]

public enum E: Swift.UInt8 {
    /// E1
    case E1 = 0
    /// E2
    case E2 = 1
    /// E3
    case E3 = 2
    public init() {
        self = .E1
    }
}

/// An `Ice.InputStream` extension to read `E` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `E` - The enumarated value.
    func read() throws -> E {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 2)
        guard let val = E(rawValue: rawValue) else {
            throw Ice.MarshalException(reason: "invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `E` - The enumerated value.
    func read(tag: Swift.Int32) throws -> E? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as E
    }
}

/// An `Ice.OutputStream` extension to write `E` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `E` - The enumerator to write.
    func write(_ v: E) {
        write(enum: v.rawValue, maxValue: 2)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `E` - The enumerator to write.
    func write(tag: Swift.Int32, value: E?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 2)
    }
}

public typealias ESeq = [E]

/// Helper class to read and write `ESeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ESeqHelper {
    /// Read a `ESeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ESeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ESeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = ESeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: E = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `ESeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ESeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ESeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ESeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ESeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ESeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ESeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ESeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ESeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public struct S: Swift.Hashable {
    public var en: E = .E1

    public init() {}

    public init(en: E) {
        self.en = en
    }
}

/// An `Ice.InputStream` extension to read `S` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `S` structured value from the stream.
    ///
    /// - returns: `S` - The structured value read from the stream.
    func read() throws -> S {
        var v = S()
        v.en = try self.read()
        return v
    }

    /// Read an optional `S?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `S?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> S? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as S
    }
}

/// An `Ice.OutputStream` extension to write `S` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `S` structured value to the stream.
    ///
    /// - parameter _: `S` - The value to write to the stream.
    func write(_ v: S) {
        self.write(v.en)
    }

    /// Write an optional `S?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `S?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: S?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

public typealias SSeq = [S]

/// Helper class to read and write `SSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SSeqHelper {
    /// Read a `SSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `SSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = SSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: S = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `SSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `SSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `SSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `SSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: SSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias D = [Swift.Int32: Swift.String]

/// Helper class to read and write `D` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct DHelper {
    /// Read a `D` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `D` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> D {
        let sz = try Swift.Int(istr.readSize())
        var v = D()
        for _ in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            let value: Swift.String = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `D?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `D` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> D? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `D` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `D` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: D) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `D?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `D` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: D?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias DSeq = [D]

/// Helper class to read and write `DSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct DSeqHelper {
    /// Read a `DSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `DSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> DSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = DSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: D = try DHelper.read(from: istr)
            v.append(j)
        }
        return v
    }
    /// Read an optional `DSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `DSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> DSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `DSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `DSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: DSeq) {
        ostr.write(size: v.count)
        for item in v {
            DHelper.write(to: ostr, value: item)
        }
    }

    /// Wite an optional `DSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `DSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: DSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias StringSeqSeq = [StringSeq]

/// Helper class to read and write `StringSeqSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct StringSeqSeqHelper {
    /// Read a `StringSeqSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `StringSeqSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> StringSeqSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = StringSeqSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: StringSeq = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `StringSeqSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `StringSeqSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> StringSeqSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `StringSeqSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `StringSeqSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: StringSeqSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `StringSeqSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `StringSeqSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: StringSeqSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice interface `TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - opCSeq: 
///
///  - opCSeqAsync: 
///
///  - opCArray: 
///
///  - opCArrayAsync: 
///
///  - opCList: 
///
///  - opCListAsync: 
///
///  - opBoolSeq: 
///
///  - opBoolSeqAsync: 
///
///  - opByteSeq: 
///
///  - opByteSeqAsync: 
///
///  - opShortSeq: 
///
///  - opShortSeqAsync: 
///
///  - opIntSeq: 
///
///  - opIntSeqAsync: 
///
///  - opLongSeq: 
///
///  - opLongSeqAsync: 
///
///  - opFloatSeq: 
///
///  - opFloatSeqAsync: 
///
///  - opDoubleSeq: 
///
///  - opDoubleSeqAsync: 
///
///  - opStringSeq: 
///
///  - opStringSeqAsync: 
///
///  - opESeq: 
///
///  - opESeqAsync: 
///
///  - opSSeq: 
///
///  - opSSeqAsync: 
///
///  - opDSeq: 
///
///  - opDSeqAsync: 
///
///  - opStringSeqSeq: 
///
///  - opStringSeqSeqAsync: 
///
///  - opByteBufferSeq: 
///
///  - opByteBufferSeqAsync: 
///
///  - opShortBufferSeq: 
///
///  - opShortBufferSeqAsync: 
///
///  - opIntBufferSeq: 
///
///  - opIntBufferSeqAsync: 
///
///  - opLongBufferSeq: 
///
///  - opLongBufferSeqAsync: 
///
///  - opFloatBufferSeq: 
///
///  - opFloatBufferSeqAsync: 
///
///  - opDoubleBufferSeq: 
///
///  - opDoubleBufferSeqAsync: 
///
///  - opOptCSeq: 
///
///  - opOptCSeqAsync: 
///
///  - opOptCArray: 
///
///  - opOptCArrayAsync: 
///
///  - opOptCList: 
///
///  - opOptCListAsync: 
///
///  - opOptBoolSeq: 
///
///  - opOptBoolSeqAsync: 
///
///  - opOptByteSeq: 
///
///  - opOptByteSeqAsync: 
///
///  - opOptShortSeq: 
///
///  - opOptShortSeqAsync: 
///
///  - opOptIntSeq: 
///
///  - opOptIntSeqAsync: 
///
///  - opOptLongSeq: 
///
///  - opOptLongSeqAsync: 
///
///  - opOptFloatSeq: 
///
///  - opOptFloatSeqAsync: 
///
///  - opOptDoubleSeq: 
///
///  - opOptDoubleSeqAsync: 
///
///  - opOptStringSeq: 
///
///  - opOptStringSeqAsync: 
///
///  - opOptESeq: 
///
///  - opOptESeqAsync: 
///
///  - opOptSSeq: 
///
///  - opOptSSeqAsync: 
///
///  - opOptDSeq: 
///
///  - opOptDSeqAsync: 
///
///  - opOptStringSeqSeq: 
///
///  - opOptStringSeqSeqAsync: 
///
///  - opOptByteBufferSeq: 
///
///  - opOptByteBufferSeqAsync: 
///
///  - opOptShortBufferSeq: 
///
///  - opOptShortBufferSeqAsync: 
///
///  - opOptIntBufferSeq: 
///
///  - opOptIntBufferSeqAsync: 
///
///  - opOptLongBufferSeq: 
///
///  - opOptLongBufferSeqAsync: 
///
///  - opOptFloatBufferSeq: 
///
///  - opOptFloatBufferSeqAsync: 
///
///  - opOptDoubleBufferSeq: 
///
///  - opOptDoubleBufferSeqAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol TestIntfPrx: Ice.ObjectPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestIntfPrx? {
    return try TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - opCSeq: 
///
///  - opCSeqAsync: 
///
///  - opCArray: 
///
///  - opCArrayAsync: 
///
///  - opCList: 
///
///  - opCListAsync: 
///
///  - opBoolSeq: 
///
///  - opBoolSeqAsync: 
///
///  - opByteSeq: 
///
///  - opByteSeqAsync: 
///
///  - opShortSeq: 
///
///  - opShortSeqAsync: 
///
///  - opIntSeq: 
///
///  - opIntSeqAsync: 
///
///  - opLongSeq: 
///
///  - opLongSeqAsync: 
///
///  - opFloatSeq: 
///
///  - opFloatSeqAsync: 
///
///  - opDoubleSeq: 
///
///  - opDoubleSeqAsync: 
///
///  - opStringSeq: 
///
///  - opStringSeqAsync: 
///
///  - opESeq: 
///
///  - opESeqAsync: 
///
///  - opSSeq: 
///
///  - opSSeqAsync: 
///
///  - opDSeq: 
///
///  - opDSeqAsync: 
///
///  - opStringSeqSeq: 
///
///  - opStringSeqSeqAsync: 
///
///  - opByteBufferSeq: 
///
///  - opByteBufferSeqAsync: 
///
///  - opShortBufferSeq: 
///
///  - opShortBufferSeqAsync: 
///
///  - opIntBufferSeq: 
///
///  - opIntBufferSeqAsync: 
///
///  - opLongBufferSeq: 
///
///  - opLongBufferSeqAsync: 
///
///  - opFloatBufferSeq: 
///
///  - opFloatBufferSeqAsync: 
///
///  - opDoubleBufferSeq: 
///
///  - opDoubleBufferSeqAsync: 
///
///  - opOptCSeq: 
///
///  - opOptCSeqAsync: 
///
///  - opOptCArray: 
///
///  - opOptCArrayAsync: 
///
///  - opOptCList: 
///
///  - opOptCListAsync: 
///
///  - opOptBoolSeq: 
///
///  - opOptBoolSeqAsync: 
///
///  - opOptByteSeq: 
///
///  - opOptByteSeqAsync: 
///
///  - opOptShortSeq: 
///
///  - opOptShortSeqAsync: 
///
///  - opOptIntSeq: 
///
///  - opOptIntSeqAsync: 
///
///  - opOptLongSeq: 
///
///  - opOptLongSeqAsync: 
///
///  - opOptFloatSeq: 
///
///  - opOptFloatSeqAsync: 
///
///  - opOptDoubleSeq: 
///
///  - opOptDoubleSeqAsync: 
///
///  - opOptStringSeq: 
///
///  - opOptStringSeqAsync: 
///
///  - opOptESeq: 
///
///  - opOptESeqAsync: 
///
///  - opOptSSeq: 
///
///  - opOptSSeqAsync: 
///
///  - opOptDSeq: 
///
///  - opOptDSeqAsync: 
///
///  - opOptStringSeqSeq: 
///
///  - opOptStringSeqSeqAsync: 
///
///  - opOptByteBufferSeq: 
///
///  - opOptByteBufferSeqAsync: 
///
///  - opOptShortBufferSeq: 
///
///  - opOptShortBufferSeqAsync: 
///
///  - opOptIntBufferSeq: 
///
///  - opOptIntBufferSeqAsync: 
///
///  - opOptLongBufferSeq: 
///
///  - opOptLongBufferSeqAsync: 
///
///  - opOptFloatBufferSeq: 
///
///  - opOptFloatBufferSeqAsync: 
///
///  - opOptDoubleBufferSeq: 
///
///  - opOptDoubleBufferSeqAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension TestIntfPrx {
    ///
    /// - parameter _: `CSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: CSeq, outSeq: CSeq)`:
    ///
    ///   - returnValue: `CSeq`
    ///
    ///   - outSeq: `CSeq`
    func opCSeq(_ iceP_inSeq: CSeq, context: Ice.Context? = nil) throws -> (returnValue: CSeq, outSeq: CSeq) {
        return try _impl._invoke(operation: "opCSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     CSeqHelper.write(to: ostr, value: iceP_inSeq)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     let iceP_outSeq: CSeq = try CSeqHelper.read(from: istr)
                                     let iceP_returnValue: CSeq = try CSeqHelper.read(from: istr)
                                     try istr.readPendingValues()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `CSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: CSeq, outSeq: CSeq)>` - The result of the operation
    func opCSeqAsync(_ iceP_inSeq: CSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: CSeq, outSeq: CSeq)> {
        return _impl._invokeAsync(operation: "opCSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      CSeqHelper.write(to: ostr, value: iceP_inSeq)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      let iceP_outSeq: CSeq = try CSeqHelper.read(from: istr)
                                      let iceP_returnValue: CSeq = try CSeqHelper.read(from: istr)
                                      try istr.readPendingValues()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `CArray`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: CArray, outSeq: CArray)`:
    ///
    ///   - returnValue: `CArray`
    ///
    ///   - outSeq: `CArray`
    func opCArray(_ iceP_inSeq: CArray, context: Ice.Context? = nil) throws -> (returnValue: CArray, outSeq: CArray) {
        return try _impl._invoke(operation: "opCArray",
                                 mode: .Normal,
                                 write: { ostr in
                                     CArrayHelper.write(to: ostr, value: iceP_inSeq)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     let iceP_outSeq: CArray = try CArrayHelper.read(from: istr)
                                     let iceP_returnValue: CArray = try CArrayHelper.read(from: istr)
                                     try istr.readPendingValues()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `CArray`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: CArray, outSeq: CArray)>` - The result of the operation
    func opCArrayAsync(_ iceP_inSeq: CArray, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: CArray, outSeq: CArray)> {
        return _impl._invokeAsync(operation: "opCArray",
                                  mode: .Normal,
                                  write: { ostr in
                                      CArrayHelper.write(to: ostr, value: iceP_inSeq)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      let iceP_outSeq: CArray = try CArrayHelper.read(from: istr)
                                      let iceP_returnValue: CArray = try CArrayHelper.read(from: istr)
                                      try istr.readPendingValues()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `CList`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: CList, outSeq: CList)`:
    ///
    ///   - returnValue: `CList`
    ///
    ///   - outSeq: `CList`
    func opCList(_ iceP_inSeq: CList, context: Ice.Context? = nil) throws -> (returnValue: CList, outSeq: CList) {
        return try _impl._invoke(operation: "opCList",
                                 mode: .Normal,
                                 write: { ostr in
                                     CListHelper.write(to: ostr, value: iceP_inSeq)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     let iceP_outSeq: CList = try CListHelper.read(from: istr)
                                     let iceP_returnValue: CList = try CListHelper.read(from: istr)
                                     try istr.readPendingValues()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `CList`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: CList, outSeq: CList)>` - The result of the operation
    func opCListAsync(_ iceP_inSeq: CList, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: CList, outSeq: CList)> {
        return _impl._invokeAsync(operation: "opCList",
                                  mode: .Normal,
                                  write: { ostr in
                                      CListHelper.write(to: ostr, value: iceP_inSeq)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      let iceP_outSeq: CList = try CListHelper.read(from: istr)
                                      let iceP_returnValue: CList = try CListHelper.read(from: istr)
                                      try istr.readPendingValues()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `BoolSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: BoolSeq, outSeq: BoolSeq)`:
    ///
    ///   - returnValue: `BoolSeq`
    ///
    ///   - outSeq: `BoolSeq`
    func opBoolSeq(_ iceP_inSeq: BoolSeq, context: Ice.Context? = nil) throws -> (returnValue: BoolSeq, outSeq: BoolSeq) {
        return try _impl._invoke(operation: "opBoolSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: BoolSeq = try istr.read()
                                     let iceP_returnValue: BoolSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `BoolSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: BoolSeq, outSeq: BoolSeq)>` - The result of the operation
    func opBoolSeqAsync(_ iceP_inSeq: BoolSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: BoolSeq, outSeq: BoolSeq)> {
        return _impl._invokeAsync(operation: "opBoolSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: BoolSeq = try istr.read()
                                      let iceP_returnValue: BoolSeq = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ByteSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteSeq, outSeq: ByteSeq)`:
    ///
    ///   - returnValue: `ByteSeq`
    ///
    ///   - outSeq: `ByteSeq`
    func opByteSeq(_ iceP_inSeq: ByteSeq, context: Ice.Context? = nil) throws -> (returnValue: ByteSeq, outSeq: ByteSeq) {
        return try _impl._invoke(operation: "opByteSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: ByteSeq = try istr.read()
                                     let iceP_returnValue: ByteSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ByteSeq, outSeq: ByteSeq)>` - The result of the operation
    func opByteSeqAsync(_ iceP_inSeq: ByteSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ByteSeq, outSeq: ByteSeq)> {
        return _impl._invokeAsync(operation: "opByteSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: ByteSeq = try istr.read()
                                      let iceP_returnValue: ByteSeq = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ShortSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortSeq, outSeq: ShortSeq)`:
    ///
    ///   - returnValue: `ShortSeq`
    ///
    ///   - outSeq: `ShortSeq`
    func opShortSeq(_ iceP_inSeq: ShortSeq, context: Ice.Context? = nil) throws -> (returnValue: ShortSeq, outSeq: ShortSeq) {
        return try _impl._invoke(operation: "opShortSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: ShortSeq = try istr.read()
                                     let iceP_returnValue: ShortSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ShortSeq, outSeq: ShortSeq)>` - The result of the operation
    func opShortSeqAsync(_ iceP_inSeq: ShortSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ShortSeq, outSeq: ShortSeq)> {
        return _impl._invokeAsync(operation: "opShortSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: ShortSeq = try istr.read()
                                      let iceP_returnValue: ShortSeq = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `IntSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntSeq, outSeq: IntSeq)`:
    ///
    ///   - returnValue: `IntSeq`
    ///
    ///   - outSeq: `IntSeq`
    func opIntSeq(_ iceP_inSeq: IntSeq, context: Ice.Context? = nil) throws -> (returnValue: IntSeq, outSeq: IntSeq) {
        return try _impl._invoke(operation: "opIntSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: IntSeq = try istr.read()
                                     let iceP_returnValue: IntSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: IntSeq, outSeq: IntSeq)>` - The result of the operation
    func opIntSeqAsync(_ iceP_inSeq: IntSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: IntSeq, outSeq: IntSeq)> {
        return _impl._invokeAsync(operation: "opIntSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: IntSeq = try istr.read()
                                      let iceP_returnValue: IntSeq = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LongSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongSeq, outSeq: LongSeq)`:
    ///
    ///   - returnValue: `LongSeq`
    ///
    ///   - outSeq: `LongSeq`
    func opLongSeq(_ iceP_inSeq: LongSeq, context: Ice.Context? = nil) throws -> (returnValue: LongSeq, outSeq: LongSeq) {
        return try _impl._invoke(operation: "opLongSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: LongSeq = try istr.read()
                                     let iceP_returnValue: LongSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LongSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LongSeq, outSeq: LongSeq)>` - The result of the operation
    func opLongSeqAsync(_ iceP_inSeq: LongSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LongSeq, outSeq: LongSeq)> {
        return _impl._invokeAsync(operation: "opLongSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: LongSeq = try istr.read()
                                      let iceP_returnValue: LongSeq = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `FloatSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatSeq, outSeq: FloatSeq)`:
    ///
    ///   - returnValue: `FloatSeq`
    ///
    ///   - outSeq: `FloatSeq`
    func opFloatSeq(_ iceP_inSeq: FloatSeq, context: Ice.Context? = nil) throws -> (returnValue: FloatSeq, outSeq: FloatSeq) {
        return try _impl._invoke(operation: "opFloatSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: FloatSeq = try istr.read()
                                     let iceP_returnValue: FloatSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `FloatSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: FloatSeq, outSeq: FloatSeq)>` - The result of the operation
    func opFloatSeqAsync(_ iceP_inSeq: FloatSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: FloatSeq, outSeq: FloatSeq)> {
        return _impl._invokeAsync(operation: "opFloatSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: FloatSeq = try istr.read()
                                      let iceP_returnValue: FloatSeq = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `DoubleSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleSeq, outSeq: DoubleSeq)`:
    ///
    ///   - returnValue: `DoubleSeq`
    ///
    ///   - outSeq: `DoubleSeq`
    func opDoubleSeq(_ iceP_inSeq: DoubleSeq, context: Ice.Context? = nil) throws -> (returnValue: DoubleSeq, outSeq: DoubleSeq) {
        return try _impl._invoke(operation: "opDoubleSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: DoubleSeq = try istr.read()
                                     let iceP_returnValue: DoubleSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DoubleSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: DoubleSeq, outSeq: DoubleSeq)>` - The result of the operation
    func opDoubleSeqAsync(_ iceP_inSeq: DoubleSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: DoubleSeq, outSeq: DoubleSeq)> {
        return _impl._invokeAsync(operation: "opDoubleSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: DoubleSeq = try istr.read()
                                      let iceP_returnValue: DoubleSeq = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `StringSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeq, outSeq: StringSeq)`:
    ///
    ///   - returnValue: `StringSeq`
    ///
    ///   - outSeq: `StringSeq`
    func opStringSeq(_ iceP_inSeq: StringSeq, context: Ice.Context? = nil) throws -> (returnValue: StringSeq, outSeq: StringSeq) {
        return try _impl._invoke(operation: "opStringSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: StringSeq = try istr.read()
                                     let iceP_returnValue: StringSeq = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: StringSeq, outSeq: StringSeq)>` - The result of the operation
    func opStringSeqAsync(_ iceP_inSeq: StringSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: StringSeq, outSeq: StringSeq)> {
        return _impl._invokeAsync(operation: "opStringSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: StringSeq = try istr.read()
                                      let iceP_returnValue: StringSeq = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ESeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ESeq, outSeq: ESeq)`:
    ///
    ///   - returnValue: `ESeq`
    ///
    ///   - outSeq: `ESeq`
    func opESeq(_ iceP_inSeq: ESeq, context: Ice.Context? = nil) throws -> (returnValue: ESeq, outSeq: ESeq) {
        return try _impl._invoke(operation: "opESeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ESeqHelper.write(to: ostr, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: ESeq = try ESeqHelper.read(from: istr)
                                     let iceP_returnValue: ESeq = try ESeqHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ESeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ESeq, outSeq: ESeq)>` - The result of the operation
    func opESeqAsync(_ iceP_inSeq: ESeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ESeq, outSeq: ESeq)> {
        return _impl._invokeAsync(operation: "opESeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ESeqHelper.write(to: ostr, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: ESeq = try ESeqHelper.read(from: istr)
                                      let iceP_returnValue: ESeq = try ESeqHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SSeq, outSeq: SSeq)`:
    ///
    ///   - returnValue: `SSeq`
    ///
    ///   - outSeq: `SSeq`
    func opSSeq(_ iceP_inSeq: SSeq, context: Ice.Context? = nil) throws -> (returnValue: SSeq, outSeq: SSeq) {
        return try _impl._invoke(operation: "opSSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     SSeqHelper.write(to: ostr, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: SSeq = try SSeqHelper.read(from: istr)
                                     let iceP_returnValue: SSeq = try SSeqHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SSeq, outSeq: SSeq)>` - The result of the operation
    func opSSeqAsync(_ iceP_inSeq: SSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SSeq, outSeq: SSeq)> {
        return _impl._invokeAsync(operation: "opSSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      SSeqHelper.write(to: ostr, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: SSeq = try SSeqHelper.read(from: istr)
                                      let iceP_returnValue: SSeq = try SSeqHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `DSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DSeq, outSeq: DSeq)`:
    ///
    ///   - returnValue: `DSeq`
    ///
    ///   - outSeq: `DSeq`
    func opDSeq(_ iceP_inSeq: DSeq, context: Ice.Context? = nil) throws -> (returnValue: DSeq, outSeq: DSeq) {
        return try _impl._invoke(operation: "opDSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     DSeqHelper.write(to: ostr, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: DSeq = try DSeqHelper.read(from: istr)
                                     let iceP_returnValue: DSeq = try DSeqHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: DSeq, outSeq: DSeq)>` - The result of the operation
    func opDSeqAsync(_ iceP_inSeq: DSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: DSeq, outSeq: DSeq)> {
        return _impl._invokeAsync(operation: "opDSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      DSeqHelper.write(to: ostr, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: DSeq = try DSeqHelper.read(from: istr)
                                      let iceP_returnValue: DSeq = try DSeqHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `StringSeqSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeqSeq, outSeq: StringSeqSeq)`:
    ///
    ///   - returnValue: `StringSeqSeq`
    ///
    ///   - outSeq: `StringSeqSeq`
    func opStringSeqSeq(_ iceP_inSeq: StringSeqSeq, context: Ice.Context? = nil) throws -> (returnValue: StringSeqSeq, outSeq: StringSeqSeq) {
        return try _impl._invoke(operation: "opStringSeqSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     StringSeqSeqHelper.write(to: ostr, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: StringSeqSeq = try StringSeqSeqHelper.read(from: istr)
                                     let iceP_returnValue: StringSeqSeq = try StringSeqSeqHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringSeqSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: StringSeqSeq, outSeq: StringSeqSeq)>` - The result of the operation
    func opStringSeqSeqAsync(_ iceP_inSeq: StringSeqSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: StringSeqSeq, outSeq: StringSeqSeq)> {
        return _impl._invokeAsync(operation: "opStringSeqSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      StringSeqSeqHelper.write(to: ostr, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: StringSeqSeq = try StringSeqSeqHelper.read(from: istr)
                                      let iceP_returnValue: StringSeqSeq = try StringSeqSeqHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ByteBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteBuffer, outSeq: ByteBuffer)`:
    ///
    ///   - returnValue: `ByteBuffer`
    ///
    ///   - outSeq: `ByteBuffer`
    func opByteBufferSeq(_ iceP_inSeq: ByteBuffer, context: Ice.Context? = nil) throws -> (returnValue: ByteBuffer, outSeq: ByteBuffer) {
        return try _impl._invoke(operation: "opByteBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: ByteBuffer = try istr.read()
                                     let iceP_returnValue: ByteBuffer = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ByteBuffer, outSeq: ByteBuffer)>` - The result of the operation
    func opByteBufferSeqAsync(_ iceP_inSeq: ByteBuffer, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ByteBuffer, outSeq: ByteBuffer)> {
        return _impl._invokeAsync(operation: "opByteBufferSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: ByteBuffer = try istr.read()
                                      let iceP_returnValue: ByteBuffer = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ShortBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortBuffer, outSeq: ShortBuffer)`:
    ///
    ///   - returnValue: `ShortBuffer`
    ///
    ///   - outSeq: `ShortBuffer`
    func opShortBufferSeq(_ iceP_inSeq: ShortBuffer, context: Ice.Context? = nil) throws -> (returnValue: ShortBuffer, outSeq: ShortBuffer) {
        return try _impl._invoke(operation: "opShortBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: ShortBuffer = try istr.read()
                                     let iceP_returnValue: ShortBuffer = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ShortBuffer, outSeq: ShortBuffer)>` - The result of the operation
    func opShortBufferSeqAsync(_ iceP_inSeq: ShortBuffer, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ShortBuffer, outSeq: ShortBuffer)> {
        return _impl._invokeAsync(operation: "opShortBufferSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: ShortBuffer = try istr.read()
                                      let iceP_returnValue: ShortBuffer = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `IntBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntBuffer, outSeq: IntBuffer)`:
    ///
    ///   - returnValue: `IntBuffer`
    ///
    ///   - outSeq: `IntBuffer`
    func opIntBufferSeq(_ iceP_inSeq: IntBuffer, context: Ice.Context? = nil) throws -> (returnValue: IntBuffer, outSeq: IntBuffer) {
        return try _impl._invoke(operation: "opIntBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: IntBuffer = try istr.read()
                                     let iceP_returnValue: IntBuffer = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: IntBuffer, outSeq: IntBuffer)>` - The result of the operation
    func opIntBufferSeqAsync(_ iceP_inSeq: IntBuffer, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: IntBuffer, outSeq: IntBuffer)> {
        return _impl._invokeAsync(operation: "opIntBufferSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: IntBuffer = try istr.read()
                                      let iceP_returnValue: IntBuffer = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LongBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongBuffer, outSeq: LongBuffer)`:
    ///
    ///   - returnValue: `LongBuffer`
    ///
    ///   - outSeq: `LongBuffer`
    func opLongBufferSeq(_ iceP_inSeq: LongBuffer, context: Ice.Context? = nil) throws -> (returnValue: LongBuffer, outSeq: LongBuffer) {
        return try _impl._invoke(operation: "opLongBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: LongBuffer = try istr.read()
                                     let iceP_returnValue: LongBuffer = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LongBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LongBuffer, outSeq: LongBuffer)>` - The result of the operation
    func opLongBufferSeqAsync(_ iceP_inSeq: LongBuffer, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LongBuffer, outSeq: LongBuffer)> {
        return _impl._invokeAsync(operation: "opLongBufferSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: LongBuffer = try istr.read()
                                      let iceP_returnValue: LongBuffer = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `FloatBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatBuffer, outSeq: FloatBuffer)`:
    ///
    ///   - returnValue: `FloatBuffer`
    ///
    ///   - outSeq: `FloatBuffer`
    func opFloatBufferSeq(_ iceP_inSeq: FloatBuffer, context: Ice.Context? = nil) throws -> (returnValue: FloatBuffer, outSeq: FloatBuffer) {
        return try _impl._invoke(operation: "opFloatBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: FloatBuffer = try istr.read()
                                     let iceP_returnValue: FloatBuffer = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `FloatBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: FloatBuffer, outSeq: FloatBuffer)>` - The result of the operation
    func opFloatBufferSeqAsync(_ iceP_inSeq: FloatBuffer, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: FloatBuffer, outSeq: FloatBuffer)> {
        return _impl._invokeAsync(operation: "opFloatBufferSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: FloatBuffer = try istr.read()
                                      let iceP_returnValue: FloatBuffer = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `DoubleBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleBuffer, outSeq: DoubleBuffer)`:
    ///
    ///   - returnValue: `DoubleBuffer`
    ///
    ///   - outSeq: `DoubleBuffer`
    func opDoubleBufferSeq(_ iceP_inSeq: DoubleBuffer, context: Ice.Context? = nil) throws -> (returnValue: DoubleBuffer, outSeq: DoubleBuffer) {
        return try _impl._invoke(operation: "opDoubleBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_outSeq: DoubleBuffer = try istr.read()
                                     let iceP_returnValue: DoubleBuffer = try istr.read()
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DoubleBuffer`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: DoubleBuffer, outSeq: DoubleBuffer)>` - The result of the operation
    func opDoubleBufferSeqAsync(_ iceP_inSeq: DoubleBuffer, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: DoubleBuffer, outSeq: DoubleBuffer)> {
        return _impl._invokeAsync(operation: "opDoubleBufferSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_outSeq: DoubleBuffer = try istr.read()
                                      let iceP_returnValue: DoubleBuffer = try istr.read()
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `CSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: CSeq?, outSeq: CSeq?)`:
    ///
    ///   - returnValue: `CSeq?`
    ///
    ///   - outSeq: `CSeq?`
    func opOptCSeq(_ iceP_inSeq: CSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: CSeq?, outSeq: CSeq?) {
        return try _impl._invoke(operation: "opOptCSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     CSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: CSeq? = try CSeqHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: CSeq? = try CSeqHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `CSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: CSeq?, outSeq: CSeq?)>` - The result of the operation
    func opOptCSeqAsync(_ iceP_inSeq: CSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: CSeq?, outSeq: CSeq?)> {
        return _impl._invokeAsync(operation: "opOptCSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      CSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: CSeq? = try CSeqHelper.read(from: istr, tag: 1)
                                      let iceP_outSeq: CSeq? = try CSeqHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `CArray?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: CArray?, outSeq: CArray?)`:
    ///
    ///   - returnValue: `CArray?`
    ///
    ///   - outSeq: `CArray?`
    func opOptCArray(_ iceP_inSeq: CArray? = nil, context: Ice.Context? = nil) throws -> (returnValue: CArray?, outSeq: CArray?) {
        return try _impl._invoke(operation: "opOptCArray",
                                 mode: .Normal,
                                 write: { ostr in
                                     CArrayHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: CArray? = try CArrayHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: CArray? = try CArrayHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `CArray?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: CArray?, outSeq: CArray?)>` - The result of the operation
    func opOptCArrayAsync(_ iceP_inSeq: CArray? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: CArray?, outSeq: CArray?)> {
        return _impl._invokeAsync(operation: "opOptCArray",
                                  mode: .Normal,
                                  write: { ostr in
                                      CArrayHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: CArray? = try CArrayHelper.read(from: istr, tag: 1)
                                      let iceP_outSeq: CArray? = try CArrayHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `CList?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: CList?, outSeq: CList?)`:
    ///
    ///   - returnValue: `CList?`
    ///
    ///   - outSeq: `CList?`
    func opOptCList(_ iceP_inSeq: CList? = nil, context: Ice.Context? = nil) throws -> (returnValue: CList?, outSeq: CList?) {
        return try _impl._invoke(operation: "opOptCList",
                                 mode: .Normal,
                                 write: { ostr in
                                     CListHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: CList? = try CListHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: CList? = try CListHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `CList?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: CList?, outSeq: CList?)>` - The result of the operation
    func opOptCListAsync(_ iceP_inSeq: CList? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: CList?, outSeq: CList?)> {
        return _impl._invokeAsync(operation: "opOptCList",
                                  mode: .Normal,
                                  write: { ostr in
                                      CListHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: CList? = try CListHelper.read(from: istr, tag: 1)
                                      let iceP_outSeq: CList? = try CListHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `BoolSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: BoolSeq?, outSeq: BoolSeq?)`:
    ///
    ///   - returnValue: `BoolSeq?`
    ///
    ///   - outSeq: `BoolSeq?`
    func opOptBoolSeq(_ iceP_inSeq: BoolSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: BoolSeq?, outSeq: BoolSeq?) {
        return try _impl._invoke(operation: "opOptBoolSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: BoolSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: BoolSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `BoolSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: BoolSeq?, outSeq: BoolSeq?)>` - The result of the operation
    func opOptBoolSeqAsync(_ iceP_inSeq: BoolSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: BoolSeq?, outSeq: BoolSeq?)> {
        return _impl._invokeAsync(operation: "opOptBoolSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: BoolSeq? = try istr.read(tag: 1)
                                      let iceP_outSeq: BoolSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ByteSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteSeq?, outSeq: ByteSeq?)`:
    ///
    ///   - returnValue: `ByteSeq?`
    ///
    ///   - outSeq: `ByteSeq?`
    func opOptByteSeq(_ iceP_inSeq: ByteSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: ByteSeq?, outSeq: ByteSeq?) {
        return try _impl._invoke(operation: "opOptByteSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ByteSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: ByteSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ByteSeq?, outSeq: ByteSeq?)>` - The result of the operation
    func opOptByteSeqAsync(_ iceP_inSeq: ByteSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ByteSeq?, outSeq: ByteSeq?)> {
        return _impl._invokeAsync(operation: "opOptByteSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: ByteSeq? = try istr.read(tag: 1)
                                      let iceP_outSeq: ByteSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ShortSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortSeq?, outSeq: ShortSeq?)`:
    ///
    ///   - returnValue: `ShortSeq?`
    ///
    ///   - outSeq: `ShortSeq?`
    func opOptShortSeq(_ iceP_inSeq: ShortSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: ShortSeq?, outSeq: ShortSeq?) {
        return try _impl._invoke(operation: "opOptShortSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ShortSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: ShortSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ShortSeq?, outSeq: ShortSeq?)>` - The result of the operation
    func opOptShortSeqAsync(_ iceP_inSeq: ShortSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ShortSeq?, outSeq: ShortSeq?)> {
        return _impl._invokeAsync(operation: "opOptShortSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: ShortSeq? = try istr.read(tag: 1)
                                      let iceP_outSeq: ShortSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `IntSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntSeq?, outSeq: IntSeq?)`:
    ///
    ///   - returnValue: `IntSeq?`
    ///
    ///   - outSeq: `IntSeq?`
    func opOptIntSeq(_ iceP_inSeq: IntSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: IntSeq?, outSeq: IntSeq?) {
        return try _impl._invoke(operation: "opOptIntSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: IntSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: IntSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: IntSeq?, outSeq: IntSeq?)>` - The result of the operation
    func opOptIntSeqAsync(_ iceP_inSeq: IntSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: IntSeq?, outSeq: IntSeq?)> {
        return _impl._invokeAsync(operation: "opOptIntSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: IntSeq? = try istr.read(tag: 1)
                                      let iceP_outSeq: IntSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LongSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongSeq?, outSeq: LongSeq?)`:
    ///
    ///   - returnValue: `LongSeq?`
    ///
    ///   - outSeq: `LongSeq?`
    func opOptLongSeq(_ iceP_inSeq: LongSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: LongSeq?, outSeq: LongSeq?) {
        return try _impl._invoke(operation: "opOptLongSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: LongSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: LongSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LongSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LongSeq?, outSeq: LongSeq?)>` - The result of the operation
    func opOptLongSeqAsync(_ iceP_inSeq: LongSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LongSeq?, outSeq: LongSeq?)> {
        return _impl._invokeAsync(operation: "opOptLongSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: LongSeq? = try istr.read(tag: 1)
                                      let iceP_outSeq: LongSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `FloatSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatSeq?, outSeq: FloatSeq?)`:
    ///
    ///   - returnValue: `FloatSeq?`
    ///
    ///   - outSeq: `FloatSeq?`
    func opOptFloatSeq(_ iceP_inSeq: FloatSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: FloatSeq?, outSeq: FloatSeq?) {
        return try _impl._invoke(operation: "opOptFloatSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: FloatSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: FloatSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `FloatSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: FloatSeq?, outSeq: FloatSeq?)>` - The result of the operation
    func opOptFloatSeqAsync(_ iceP_inSeq: FloatSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: FloatSeq?, outSeq: FloatSeq?)> {
        return _impl._invokeAsync(operation: "opOptFloatSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: FloatSeq? = try istr.read(tag: 1)
                                      let iceP_outSeq: FloatSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `DoubleSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleSeq?, outSeq: DoubleSeq?)`:
    ///
    ///   - returnValue: `DoubleSeq?`
    ///
    ///   - outSeq: `DoubleSeq?`
    func opOptDoubleSeq(_ iceP_inSeq: DoubleSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: DoubleSeq?, outSeq: DoubleSeq?) {
        return try _impl._invoke(operation: "opOptDoubleSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: DoubleSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: DoubleSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DoubleSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: DoubleSeq?, outSeq: DoubleSeq?)>` - The result of the operation
    func opOptDoubleSeqAsync(_ iceP_inSeq: DoubleSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: DoubleSeq?, outSeq: DoubleSeq?)> {
        return _impl._invokeAsync(operation: "opOptDoubleSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: DoubleSeq? = try istr.read(tag: 1)
                                      let iceP_outSeq: DoubleSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `StringSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeq?, outSeq: StringSeq?)`:
    ///
    ///   - returnValue: `StringSeq?`
    ///
    ///   - outSeq: `StringSeq?`
    func opOptStringSeq(_ iceP_inSeq: StringSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: StringSeq?, outSeq: StringSeq?) {
        return try _impl._invoke(operation: "opOptStringSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: StringSeq? = try istr.read(tag: 1)
                                     let iceP_outSeq: StringSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: StringSeq?, outSeq: StringSeq?)>` - The result of the operation
    func opOptStringSeqAsync(_ iceP_inSeq: StringSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: StringSeq?, outSeq: StringSeq?)> {
        return _impl._invokeAsync(operation: "opOptStringSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: StringSeq? = try istr.read(tag: 1)
                                      let iceP_outSeq: StringSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ESeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ESeq?, outSeq: ESeq?)`:
    ///
    ///   - returnValue: `ESeq?`
    ///
    ///   - outSeq: `ESeq?`
    func opOptESeq(_ iceP_inSeq: ESeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: ESeq?, outSeq: ESeq?) {
        return try _impl._invoke(operation: "opOptESeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ESeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ESeq? = try ESeqHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: ESeq? = try ESeqHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ESeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ESeq?, outSeq: ESeq?)>` - The result of the operation
    func opOptESeqAsync(_ iceP_inSeq: ESeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ESeq?, outSeq: ESeq?)> {
        return _impl._invokeAsync(operation: "opOptESeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ESeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: ESeq? = try ESeqHelper.read(from: istr, tag: 1)
                                      let iceP_outSeq: ESeq? = try ESeqHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SSeq?, outSeq: SSeq?)`:
    ///
    ///   - returnValue: `SSeq?`
    ///
    ///   - outSeq: `SSeq?`
    func opOptSSeq(_ iceP_inSeq: SSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: SSeq?, outSeq: SSeq?) {
        return try _impl._invoke(operation: "opOptSSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     SSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: SSeq? = try SSeqHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: SSeq? = try SSeqHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SSeq?, outSeq: SSeq?)>` - The result of the operation
    func opOptSSeqAsync(_ iceP_inSeq: SSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SSeq?, outSeq: SSeq?)> {
        return _impl._invokeAsync(operation: "opOptSSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      SSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: SSeq? = try SSeqHelper.read(from: istr, tag: 1)
                                      let iceP_outSeq: SSeq? = try SSeqHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `DSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DSeq?, outSeq: DSeq?)`:
    ///
    ///   - returnValue: `DSeq?`
    ///
    ///   - outSeq: `DSeq?`
    func opOptDSeq(_ iceP_inSeq: DSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: DSeq?, outSeq: DSeq?) {
        return try _impl._invoke(operation: "opOptDSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     DSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: DSeq? = try DSeqHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: DSeq? = try DSeqHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: DSeq?, outSeq: DSeq?)>` - The result of the operation
    func opOptDSeqAsync(_ iceP_inSeq: DSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: DSeq?, outSeq: DSeq?)> {
        return _impl._invokeAsync(operation: "opOptDSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      DSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: DSeq? = try DSeqHelper.read(from: istr, tag: 1)
                                      let iceP_outSeq: DSeq? = try DSeqHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `StringSeqSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeqSeq?, outSeq: StringSeqSeq?)`:
    ///
    ///   - returnValue: `StringSeqSeq?`
    ///
    ///   - outSeq: `StringSeqSeq?`
    func opOptStringSeqSeq(_ iceP_inSeq: StringSeqSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: StringSeqSeq?, outSeq: StringSeqSeq?) {
        return try _impl._invoke(operation: "opOptStringSeqSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     StringSeqSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: StringSeqSeq? = try StringSeqSeqHelper.read(from: istr, tag: 1)
                                     let iceP_outSeq: StringSeqSeq? = try StringSeqSeqHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringSeqSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: StringSeqSeq?, outSeq: StringSeqSeq?)>` - The result of the operation
    func opOptStringSeqSeqAsync(_ iceP_inSeq: StringSeqSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: StringSeqSeq?, outSeq: StringSeqSeq?)> {
        return _impl._invokeAsync(operation: "opOptStringSeqSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      StringSeqSeqHelper.write(to: ostr, tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: StringSeqSeq? = try StringSeqSeqHelper.read(from: istr, tag: 1)
                                      let iceP_outSeq: StringSeqSeq? = try StringSeqSeqHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ByteBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteBuffer?, outSeq: ByteBuffer?)`:
    ///
    ///   - returnValue: `ByteBuffer?`
    ///
    ///   - outSeq: `ByteBuffer?`
    func opOptByteBufferSeq(_ iceP_inSeq: ByteBuffer? = nil, context: Ice.Context? = nil) throws -> (returnValue: ByteBuffer?, outSeq: ByteBuffer?) {
        return try _impl._invoke(operation: "opOptByteBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ByteBuffer? = try istr.read(tag: 1)
                                     let iceP_outSeq: ByteBuffer? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ByteBuffer?, outSeq: ByteBuffer?)>` - The result of the operation
    func opOptByteBufferSeqAsync(_ iceP_inSeq: ByteBuffer? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ByteBuffer?, outSeq: ByteBuffer?)> {
        return _impl._invokeAsync(operation: "opOptByteBufferSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: ByteBuffer? = try istr.read(tag: 1)
                                      let iceP_outSeq: ByteBuffer? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ShortBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortBuffer?, outSeq: ShortBuffer?)`:
    ///
    ///   - returnValue: `ShortBuffer?`
    ///
    ///   - outSeq: `ShortBuffer?`
    func opOptShortBufferSeq(_ iceP_inSeq: ShortBuffer? = nil, context: Ice.Context? = nil) throws -> (returnValue: ShortBuffer?, outSeq: ShortBuffer?) {
        return try _impl._invoke(operation: "opOptShortBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ShortBuffer? = try istr.read(tag: 1)
                                     let iceP_outSeq: ShortBuffer? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ShortBuffer?, outSeq: ShortBuffer?)>` - The result of the operation
    func opOptShortBufferSeqAsync(_ iceP_inSeq: ShortBuffer? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ShortBuffer?, outSeq: ShortBuffer?)> {
        return _impl._invokeAsync(operation: "opOptShortBufferSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: ShortBuffer? = try istr.read(tag: 1)
                                      let iceP_outSeq: ShortBuffer? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `IntBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntBuffer?, outSeq: IntBuffer?)`:
    ///
    ///   - returnValue: `IntBuffer?`
    ///
    ///   - outSeq: `IntBuffer?`
    func opOptIntBufferSeq(_ iceP_inSeq: IntBuffer? = nil, context: Ice.Context? = nil) throws -> (returnValue: IntBuffer?, outSeq: IntBuffer?) {
        return try _impl._invoke(operation: "opOptIntBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: IntBuffer? = try istr.read(tag: 1)
                                     let iceP_outSeq: IntBuffer? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: IntBuffer?, outSeq: IntBuffer?)>` - The result of the operation
    func opOptIntBufferSeqAsync(_ iceP_inSeq: IntBuffer? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: IntBuffer?, outSeq: IntBuffer?)> {
        return _impl._invokeAsync(operation: "opOptIntBufferSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: IntBuffer? = try istr.read(tag: 1)
                                      let iceP_outSeq: IntBuffer? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LongBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongBuffer?, outSeq: LongBuffer?)`:
    ///
    ///   - returnValue: `LongBuffer?`
    ///
    ///   - outSeq: `LongBuffer?`
    func opOptLongBufferSeq(_ iceP_inSeq: LongBuffer? = nil, context: Ice.Context? = nil) throws -> (returnValue: LongBuffer?, outSeq: LongBuffer?) {
        return try _impl._invoke(operation: "opOptLongBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: LongBuffer? = try istr.read(tag: 1)
                                     let iceP_outSeq: LongBuffer? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LongBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LongBuffer?, outSeq: LongBuffer?)>` - The result of the operation
    func opOptLongBufferSeqAsync(_ iceP_inSeq: LongBuffer? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LongBuffer?, outSeq: LongBuffer?)> {
        return _impl._invokeAsync(operation: "opOptLongBufferSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: LongBuffer? = try istr.read(tag: 1)
                                      let iceP_outSeq: LongBuffer? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `FloatBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatBuffer?, outSeq: FloatBuffer?)`:
    ///
    ///   - returnValue: `FloatBuffer?`
    ///
    ///   - outSeq: `FloatBuffer?`
    func opOptFloatBufferSeq(_ iceP_inSeq: FloatBuffer? = nil, context: Ice.Context? = nil) throws -> (returnValue: FloatBuffer?, outSeq: FloatBuffer?) {
        return try _impl._invoke(operation: "opOptFloatBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: FloatBuffer? = try istr.read(tag: 1)
                                     let iceP_outSeq: FloatBuffer? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `FloatBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: FloatBuffer?, outSeq: FloatBuffer?)>` - The result of the operation
    func opOptFloatBufferSeqAsync(_ iceP_inSeq: FloatBuffer? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: FloatBuffer?, outSeq: FloatBuffer?)> {
        return _impl._invokeAsync(operation: "opOptFloatBufferSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: FloatBuffer? = try istr.read(tag: 1)
                                      let iceP_outSeq: FloatBuffer? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `DoubleBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleBuffer?, outSeq: DoubleBuffer?)`:
    ///
    ///   - returnValue: `DoubleBuffer?`
    ///
    ///   - outSeq: `DoubleBuffer?`
    func opOptDoubleBufferSeq(_ iceP_inSeq: DoubleBuffer? = nil, context: Ice.Context? = nil) throws -> (returnValue: DoubleBuffer?, outSeq: DoubleBuffer?) {
        return try _impl._invoke(operation: "opOptDoubleBufferSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_inSeq)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: DoubleBuffer? = try istr.read(tag: 1)
                                     let iceP_outSeq: DoubleBuffer? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_outSeq)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DoubleBuffer?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: DoubleBuffer?, outSeq: DoubleBuffer?)>` - The result of the operation
    func opOptDoubleBufferSeqAsync(_ iceP_inSeq: DoubleBuffer? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: DoubleBuffer?, outSeq: DoubleBuffer?)> {
        return _impl._invokeAsync(operation: "opOptDoubleBufferSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_inSeq)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: DoubleBuffer? = try istr.read(tag: 1)
                                      let iceP_outSeq: DoubleBuffer? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_outSeq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// :nodoc:
public class C_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return C.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_C() -> Ice.ValueTypeResolver {
        return C_TypeResolver()
    }
}

open class C: Ice.Value {
    public required init() {}

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return CTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return CTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CTraits.staticId, compactId: -1, last: true)
        ostr.endSlice()
    }
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Disp {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "ice_id":
            return try (servant as? Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "opBoolSeq":
            return try servant._iceD_opBoolSeq(incoming: request, current: current)
        case "opByteBufferSeq":
            return try servant._iceD_opByteBufferSeq(incoming: request, current: current)
        case "opByteSeq":
            return try servant._iceD_opByteSeq(incoming: request, current: current)
        case "opCArray":
            return try servant._iceD_opCArray(incoming: request, current: current)
        case "opCList":
            return try servant._iceD_opCList(incoming: request, current: current)
        case "opCSeq":
            return try servant._iceD_opCSeq(incoming: request, current: current)
        case "opDSeq":
            return try servant._iceD_opDSeq(incoming: request, current: current)
        case "opDoubleBufferSeq":
            return try servant._iceD_opDoubleBufferSeq(incoming: request, current: current)
        case "opDoubleSeq":
            return try servant._iceD_opDoubleSeq(incoming: request, current: current)
        case "opESeq":
            return try servant._iceD_opESeq(incoming: request, current: current)
        case "opFloatBufferSeq":
            return try servant._iceD_opFloatBufferSeq(incoming: request, current: current)
        case "opFloatSeq":
            return try servant._iceD_opFloatSeq(incoming: request, current: current)
        case "opIntBufferSeq":
            return try servant._iceD_opIntBufferSeq(incoming: request, current: current)
        case "opIntSeq":
            return try servant._iceD_opIntSeq(incoming: request, current: current)
        case "opLongBufferSeq":
            return try servant._iceD_opLongBufferSeq(incoming: request, current: current)
        case "opLongSeq":
            return try servant._iceD_opLongSeq(incoming: request, current: current)
        case "opOptBoolSeq":
            return try servant._iceD_opOptBoolSeq(incoming: request, current: current)
        case "opOptByteBufferSeq":
            return try servant._iceD_opOptByteBufferSeq(incoming: request, current: current)
        case "opOptByteSeq":
            return try servant._iceD_opOptByteSeq(incoming: request, current: current)
        case "opOptCArray":
            return try servant._iceD_opOptCArray(incoming: request, current: current)
        case "opOptCList":
            return try servant._iceD_opOptCList(incoming: request, current: current)
        case "opOptCSeq":
            return try servant._iceD_opOptCSeq(incoming: request, current: current)
        case "opOptDSeq":
            return try servant._iceD_opOptDSeq(incoming: request, current: current)
        case "opOptDoubleBufferSeq":
            return try servant._iceD_opOptDoubleBufferSeq(incoming: request, current: current)
        case "opOptDoubleSeq":
            return try servant._iceD_opOptDoubleSeq(incoming: request, current: current)
        case "opOptESeq":
            return try servant._iceD_opOptESeq(incoming: request, current: current)
        case "opOptFloatBufferSeq":
            return try servant._iceD_opOptFloatBufferSeq(incoming: request, current: current)
        case "opOptFloatSeq":
            return try servant._iceD_opOptFloatSeq(incoming: request, current: current)
        case "opOptIntBufferSeq":
            return try servant._iceD_opOptIntBufferSeq(incoming: request, current: current)
        case "opOptIntSeq":
            return try servant._iceD_opOptIntSeq(incoming: request, current: current)
        case "opOptLongBufferSeq":
            return try servant._iceD_opOptLongBufferSeq(incoming: request, current: current)
        case "opOptLongSeq":
            return try servant._iceD_opOptLongSeq(incoming: request, current: current)
        case "opOptSSeq":
            return try servant._iceD_opOptSSeq(incoming: request, current: current)
        case "opOptShortBufferSeq":
            return try servant._iceD_opOptShortBufferSeq(incoming: request, current: current)
        case "opOptShortSeq":
            return try servant._iceD_opOptShortSeq(incoming: request, current: current)
        case "opOptStringSeq":
            return try servant._iceD_opOptStringSeq(incoming: request, current: current)
        case "opOptStringSeqSeq":
            return try servant._iceD_opOptStringSeqSeq(incoming: request, current: current)
        case "opSSeq":
            return try servant._iceD_opSSeq(incoming: request, current: current)
        case "opShortBufferSeq":
            return try servant._iceD_opShortBufferSeq(incoming: request, current: current)
        case "opShortSeq":
            return try servant._iceD_opShortSeq(incoming: request, current: current)
        case "opStringSeq":
            return try servant._iceD_opStringSeq(incoming: request, current: current)
        case "opStringSeqSeq":
            return try servant._iceD_opStringSeqSeq(incoming: request, current: current)
        case "shutdown":
            return try servant._iceD_shutdown(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol TestIntf {
    ///
    /// - parameter inSeq: `CSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: CSeq, outSeq: CSeq)`:
    ///
    ///   - returnValue: `CSeq`
    ///
    ///   - outSeq: `CSeq`
    func opCSeq(inSeq: CSeq, current: Ice.Current) throws -> (returnValue: CSeq, outSeq: CSeq)

    ///
    /// - parameter inSeq: `CArray`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: CArray, outSeq: CArray)`:
    ///
    ///   - returnValue: `CArray`
    ///
    ///   - outSeq: `CArray`
    func opCArray(inSeq: CArray, current: Ice.Current) throws -> (returnValue: CArray, outSeq: CArray)

    ///
    /// - parameter inSeq: `CList`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: CList, outSeq: CList)`:
    ///
    ///   - returnValue: `CList`
    ///
    ///   - outSeq: `CList`
    func opCList(inSeq: CList, current: Ice.Current) throws -> (returnValue: CList, outSeq: CList)

    ///
    /// - parameter inSeq: `BoolSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: BoolSeq, outSeq: BoolSeq)`:
    ///
    ///   - returnValue: `BoolSeq`
    ///
    ///   - outSeq: `BoolSeq`
    func opBoolSeq(inSeq: BoolSeq, current: Ice.Current) throws -> (returnValue: BoolSeq, outSeq: BoolSeq)

    ///
    /// - parameter inSeq: `ByteSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteSeq, outSeq: ByteSeq)`:
    ///
    ///   - returnValue: `ByteSeq`
    ///
    ///   - outSeq: `ByteSeq`
    func opByteSeq(inSeq: ByteSeq, current: Ice.Current) throws -> (returnValue: ByteSeq, outSeq: ByteSeq)

    ///
    /// - parameter inSeq: `ShortSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortSeq, outSeq: ShortSeq)`:
    ///
    ///   - returnValue: `ShortSeq`
    ///
    ///   - outSeq: `ShortSeq`
    func opShortSeq(inSeq: ShortSeq, current: Ice.Current) throws -> (returnValue: ShortSeq, outSeq: ShortSeq)

    ///
    /// - parameter inSeq: `IntSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntSeq, outSeq: IntSeq)`:
    ///
    ///   - returnValue: `IntSeq`
    ///
    ///   - outSeq: `IntSeq`
    func opIntSeq(inSeq: IntSeq, current: Ice.Current) throws -> (returnValue: IntSeq, outSeq: IntSeq)

    ///
    /// - parameter inSeq: `LongSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LongSeq, outSeq: LongSeq)`:
    ///
    ///   - returnValue: `LongSeq`
    ///
    ///   - outSeq: `LongSeq`
    func opLongSeq(inSeq: LongSeq, current: Ice.Current) throws -> (returnValue: LongSeq, outSeq: LongSeq)

    ///
    /// - parameter inSeq: `FloatSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: FloatSeq, outSeq: FloatSeq)`:
    ///
    ///   - returnValue: `FloatSeq`
    ///
    ///   - outSeq: `FloatSeq`
    func opFloatSeq(inSeq: FloatSeq, current: Ice.Current) throws -> (returnValue: FloatSeq, outSeq: FloatSeq)

    ///
    /// - parameter inSeq: `DoubleSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DoubleSeq, outSeq: DoubleSeq)`:
    ///
    ///   - returnValue: `DoubleSeq`
    ///
    ///   - outSeq: `DoubleSeq`
    func opDoubleSeq(inSeq: DoubleSeq, current: Ice.Current) throws -> (returnValue: DoubleSeq, outSeq: DoubleSeq)

    ///
    /// - parameter inSeq: `StringSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringSeq, outSeq: StringSeq)`:
    ///
    ///   - returnValue: `StringSeq`
    ///
    ///   - outSeq: `StringSeq`
    func opStringSeq(inSeq: StringSeq, current: Ice.Current) throws -> (returnValue: StringSeq, outSeq: StringSeq)

    ///
    /// - parameter inSeq: `ESeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ESeq, outSeq: ESeq)`:
    ///
    ///   - returnValue: `ESeq`
    ///
    ///   - outSeq: `ESeq`
    func opESeq(inSeq: ESeq, current: Ice.Current) throws -> (returnValue: ESeq, outSeq: ESeq)

    ///
    /// - parameter inSeq: `SSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SSeq, outSeq: SSeq)`:
    ///
    ///   - returnValue: `SSeq`
    ///
    ///   - outSeq: `SSeq`
    func opSSeq(inSeq: SSeq, current: Ice.Current) throws -> (returnValue: SSeq, outSeq: SSeq)

    ///
    /// - parameter inSeq: `DSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DSeq, outSeq: DSeq)`:
    ///
    ///   - returnValue: `DSeq`
    ///
    ///   - outSeq: `DSeq`
    func opDSeq(inSeq: DSeq, current: Ice.Current) throws -> (returnValue: DSeq, outSeq: DSeq)

    ///
    /// - parameter inSeq: `StringSeqSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringSeqSeq, outSeq: StringSeqSeq)`:
    ///
    ///   - returnValue: `StringSeqSeq`
    ///
    ///   - outSeq: `StringSeqSeq`
    func opStringSeqSeq(inSeq: StringSeqSeq, current: Ice.Current) throws -> (returnValue: StringSeqSeq, outSeq: StringSeqSeq)

    ///
    /// - parameter inSeq: `ByteBuffer`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteBuffer, outSeq: ByteBuffer)`:
    ///
    ///   - returnValue: `ByteBuffer`
    ///
    ///   - outSeq: `ByteBuffer`
    func opByteBufferSeq(inSeq: ByteBuffer, current: Ice.Current) throws -> (returnValue: ByteBuffer, outSeq: ByteBuffer)

    ///
    /// - parameter inSeq: `ShortBuffer`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortBuffer, outSeq: ShortBuffer)`:
    ///
    ///   - returnValue: `ShortBuffer`
    ///
    ///   - outSeq: `ShortBuffer`
    func opShortBufferSeq(inSeq: ShortBuffer, current: Ice.Current) throws -> (returnValue: ShortBuffer, outSeq: ShortBuffer)

    ///
    /// - parameter inSeq: `IntBuffer`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntBuffer, outSeq: IntBuffer)`:
    ///
    ///   - returnValue: `IntBuffer`
    ///
    ///   - outSeq: `IntBuffer`
    func opIntBufferSeq(inSeq: IntBuffer, current: Ice.Current) throws -> (returnValue: IntBuffer, outSeq: IntBuffer)

    ///
    /// - parameter inSeq: `LongBuffer`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LongBuffer, outSeq: LongBuffer)`:
    ///
    ///   - returnValue: `LongBuffer`
    ///
    ///   - outSeq: `LongBuffer`
    func opLongBufferSeq(inSeq: LongBuffer, current: Ice.Current) throws -> (returnValue: LongBuffer, outSeq: LongBuffer)

    ///
    /// - parameter inSeq: `FloatBuffer`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: FloatBuffer, outSeq: FloatBuffer)`:
    ///
    ///   - returnValue: `FloatBuffer`
    ///
    ///   - outSeq: `FloatBuffer`
    func opFloatBufferSeq(inSeq: FloatBuffer, current: Ice.Current) throws -> (returnValue: FloatBuffer, outSeq: FloatBuffer)

    ///
    /// - parameter inSeq: `DoubleBuffer`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DoubleBuffer, outSeq: DoubleBuffer)`:
    ///
    ///   - returnValue: `DoubleBuffer`
    ///
    ///   - outSeq: `DoubleBuffer`
    func opDoubleBufferSeq(inSeq: DoubleBuffer, current: Ice.Current) throws -> (returnValue: DoubleBuffer, outSeq: DoubleBuffer)

    ///
    /// - parameter inSeq: `CSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: CSeq?, outSeq: CSeq?)`:
    ///
    ///   - returnValue: `CSeq?`
    ///
    ///   - outSeq: `CSeq?`
    func opOptCSeq(inSeq: CSeq?, current: Ice.Current) throws -> (returnValue: CSeq?, outSeq: CSeq?)

    ///
    /// - parameter inSeq: `CArray?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: CArray?, outSeq: CArray?)`:
    ///
    ///   - returnValue: `CArray?`
    ///
    ///   - outSeq: `CArray?`
    func opOptCArray(inSeq: CArray?, current: Ice.Current) throws -> (returnValue: CArray?, outSeq: CArray?)

    ///
    /// - parameter inSeq: `CList?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: CList?, outSeq: CList?)`:
    ///
    ///   - returnValue: `CList?`
    ///
    ///   - outSeq: `CList?`
    func opOptCList(inSeq: CList?, current: Ice.Current) throws -> (returnValue: CList?, outSeq: CList?)

    ///
    /// - parameter inSeq: `BoolSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: BoolSeq?, outSeq: BoolSeq?)`:
    ///
    ///   - returnValue: `BoolSeq?`
    ///
    ///   - outSeq: `BoolSeq?`
    func opOptBoolSeq(inSeq: BoolSeq?, current: Ice.Current) throws -> (returnValue: BoolSeq?, outSeq: BoolSeq?)

    ///
    /// - parameter inSeq: `ByteSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteSeq?, outSeq: ByteSeq?)`:
    ///
    ///   - returnValue: `ByteSeq?`
    ///
    ///   - outSeq: `ByteSeq?`
    func opOptByteSeq(inSeq: ByteSeq?, current: Ice.Current) throws -> (returnValue: ByteSeq?, outSeq: ByteSeq?)

    ///
    /// - parameter inSeq: `ShortSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortSeq?, outSeq: ShortSeq?)`:
    ///
    ///   - returnValue: `ShortSeq?`
    ///
    ///   - outSeq: `ShortSeq?`
    func opOptShortSeq(inSeq: ShortSeq?, current: Ice.Current) throws -> (returnValue: ShortSeq?, outSeq: ShortSeq?)

    ///
    /// - parameter inSeq: `IntSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntSeq?, outSeq: IntSeq?)`:
    ///
    ///   - returnValue: `IntSeq?`
    ///
    ///   - outSeq: `IntSeq?`
    func opOptIntSeq(inSeq: IntSeq?, current: Ice.Current) throws -> (returnValue: IntSeq?, outSeq: IntSeq?)

    ///
    /// - parameter inSeq: `LongSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LongSeq?, outSeq: LongSeq?)`:
    ///
    ///   - returnValue: `LongSeq?`
    ///
    ///   - outSeq: `LongSeq?`
    func opOptLongSeq(inSeq: LongSeq?, current: Ice.Current) throws -> (returnValue: LongSeq?, outSeq: LongSeq?)

    ///
    /// - parameter inSeq: `FloatSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: FloatSeq?, outSeq: FloatSeq?)`:
    ///
    ///   - returnValue: `FloatSeq?`
    ///
    ///   - outSeq: `FloatSeq?`
    func opOptFloatSeq(inSeq: FloatSeq?, current: Ice.Current) throws -> (returnValue: FloatSeq?, outSeq: FloatSeq?)

    ///
    /// - parameter inSeq: `DoubleSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DoubleSeq?, outSeq: DoubleSeq?)`:
    ///
    ///   - returnValue: `DoubleSeq?`
    ///
    ///   - outSeq: `DoubleSeq?`
    func opOptDoubleSeq(inSeq: DoubleSeq?, current: Ice.Current) throws -> (returnValue: DoubleSeq?, outSeq: DoubleSeq?)

    ///
    /// - parameter inSeq: `StringSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringSeq?, outSeq: StringSeq?)`:
    ///
    ///   - returnValue: `StringSeq?`
    ///
    ///   - outSeq: `StringSeq?`
    func opOptStringSeq(inSeq: StringSeq?, current: Ice.Current) throws -> (returnValue: StringSeq?, outSeq: StringSeq?)

    ///
    /// - parameter inSeq: `ESeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ESeq?, outSeq: ESeq?)`:
    ///
    ///   - returnValue: `ESeq?`
    ///
    ///   - outSeq: `ESeq?`
    func opOptESeq(inSeq: ESeq?, current: Ice.Current) throws -> (returnValue: ESeq?, outSeq: ESeq?)

    ///
    /// - parameter inSeq: `SSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SSeq?, outSeq: SSeq?)`:
    ///
    ///   - returnValue: `SSeq?`
    ///
    ///   - outSeq: `SSeq?`
    func opOptSSeq(inSeq: SSeq?, current: Ice.Current) throws -> (returnValue: SSeq?, outSeq: SSeq?)

    ///
    /// - parameter inSeq: `DSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DSeq?, outSeq: DSeq?)`:
    ///
    ///   - returnValue: `DSeq?`
    ///
    ///   - outSeq: `DSeq?`
    func opOptDSeq(inSeq: DSeq?, current: Ice.Current) throws -> (returnValue: DSeq?, outSeq: DSeq?)

    ///
    /// - parameter inSeq: `StringSeqSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringSeqSeq?, outSeq: StringSeqSeq?)`:
    ///
    ///   - returnValue: `StringSeqSeq?`
    ///
    ///   - outSeq: `StringSeqSeq?`
    func opOptStringSeqSeq(inSeq: StringSeqSeq?, current: Ice.Current) throws -> (returnValue: StringSeqSeq?, outSeq: StringSeqSeq?)

    ///
    /// - parameter inSeq: `ByteBuffer?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteBuffer?, outSeq: ByteBuffer?)`:
    ///
    ///   - returnValue: `ByteBuffer?`
    ///
    ///   - outSeq: `ByteBuffer?`
    func opOptByteBufferSeq(inSeq: ByteBuffer?, current: Ice.Current) throws -> (returnValue: ByteBuffer?, outSeq: ByteBuffer?)

    ///
    /// - parameter inSeq: `ShortBuffer?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortBuffer?, outSeq: ShortBuffer?)`:
    ///
    ///   - returnValue: `ShortBuffer?`
    ///
    ///   - outSeq: `ShortBuffer?`
    func opOptShortBufferSeq(inSeq: ShortBuffer?, current: Ice.Current) throws -> (returnValue: ShortBuffer?, outSeq: ShortBuffer?)

    ///
    /// - parameter inSeq: `IntBuffer?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntBuffer?, outSeq: IntBuffer?)`:
    ///
    ///   - returnValue: `IntBuffer?`
    ///
    ///   - outSeq: `IntBuffer?`
    func opOptIntBufferSeq(inSeq: IntBuffer?, current: Ice.Current) throws -> (returnValue: IntBuffer?, outSeq: IntBuffer?)

    ///
    /// - parameter inSeq: `LongBuffer?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LongBuffer?, outSeq: LongBuffer?)`:
    ///
    ///   - returnValue: `LongBuffer?`
    ///
    ///   - outSeq: `LongBuffer?`
    func opOptLongBufferSeq(inSeq: LongBuffer?, current: Ice.Current) throws -> (returnValue: LongBuffer?, outSeq: LongBuffer?)

    ///
    /// - parameter inSeq: `FloatBuffer?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: FloatBuffer?, outSeq: FloatBuffer?)`:
    ///
    ///   - returnValue: `FloatBuffer?`
    ///
    ///   - outSeq: `FloatBuffer?`
    func opOptFloatBufferSeq(inSeq: FloatBuffer?, current: Ice.Current) throws -> (returnValue: FloatBuffer?, outSeq: FloatBuffer?)

    ///
    /// - parameter inSeq: `DoubleBuffer?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DoubleBuffer?, outSeq: DoubleBuffer?)`:
    ///
    ///   - returnValue: `DoubleBuffer?`
    ///
    ///   - outSeq: `DoubleBuffer?`
    func opOptDoubleBufferSeq(inSeq: DoubleBuffer?, current: Ice.Current) throws -> (returnValue: DoubleBuffer?, outSeq: DoubleBuffer?)

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws
}

/// TestIntf overview.
///
/// TestIntf Methods:
///
///  - opCSeq: 
///
///  - opCArray: 
///
///  - opCList: 
///
///  - opBoolSeq: 
///
///  - opByteSeq: 
///
///  - opShortSeq: 
///
///  - opIntSeq: 
///
///  - opLongSeq: 
///
///  - opFloatSeq: 
///
///  - opDoubleSeq: 
///
///  - opStringSeq: 
///
///  - opESeq: 
///
///  - opSSeq: 
///
///  - opDSeq: 
///
///  - opStringSeqSeq: 
///
///  - opByteBufferSeq: 
///
///  - opShortBufferSeq: 
///
///  - opIntBufferSeq: 
///
///  - opLongBufferSeq: 
///
///  - opFloatBufferSeq: 
///
///  - opDoubleBufferSeq: 
///
///  - opOptCSeq: 
///
///  - opOptCArray: 
///
///  - opOptCList: 
///
///  - opOptBoolSeq: 
///
///  - opOptByteSeq: 
///
///  - opOptShortSeq: 
///
///  - opOptIntSeq: 
///
///  - opOptLongSeq: 
///
///  - opOptFloatSeq: 
///
///  - opOptDoubleSeq: 
///
///  - opOptStringSeq: 
///
///  - opOptESeq: 
///
///  - opOptSSeq: 
///
///  - opOptDSeq: 
///
///  - opOptStringSeqSeq: 
///
///  - opOptByteBufferSeq: 
///
///  - opOptShortBufferSeq: 
///
///  - opOptIntBufferSeq: 
///
///  - opOptLongBufferSeq: 
///
///  - opOptFloatBufferSeq: 
///
///  - opOptDoubleBufferSeq: 
///
///  - shutdown: 
public extension TestIntf {
    func _iceD_opCSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: CSeq = try inS.read { istr in
            let iceP_inSeq: CSeq = try CSeqHelper.read(from: istr)
            try istr.readPendingValues()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opCSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            CSeqHelper.write(to: ostr, value: iceP_outSeq)
            CSeqHelper.write(to: ostr, value: iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    func _iceD_opCArray(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: CArray = try inS.read { istr in
            let iceP_inSeq: CArray = try CArrayHelper.read(from: istr)
            try istr.readPendingValues()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opCArray(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            CArrayHelper.write(to: ostr, value: iceP_outSeq)
            CArrayHelper.write(to: ostr, value: iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    func _iceD_opCList(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: CList = try inS.read { istr in
            let iceP_inSeq: CList = try CListHelper.read(from: istr)
            try istr.readPendingValues()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opCList(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            CListHelper.write(to: ostr, value: iceP_outSeq)
            CListHelper.write(to: ostr, value: iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    func _iceD_opBoolSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: BoolSeq = try inS.read { istr in
            let iceP_inSeq: BoolSeq = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opBoolSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opByteSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: ByteSeq = try inS.read { istr in
            let iceP_inSeq: ByteSeq = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opByteSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opShortSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: ShortSeq = try inS.read { istr in
            let iceP_inSeq: ShortSeq = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opShortSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opIntSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: IntSeq = try inS.read { istr in
            let iceP_inSeq: IntSeq = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opIntSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opLongSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: LongSeq = try inS.read { istr in
            let iceP_inSeq: LongSeq = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opLongSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opFloatSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: FloatSeq = try inS.read { istr in
            let iceP_inSeq: FloatSeq = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opFloatSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opDoubleSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: DoubleSeq = try inS.read { istr in
            let iceP_inSeq: DoubleSeq = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opDoubleSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opStringSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: StringSeq = try inS.read { istr in
            let iceP_inSeq: StringSeq = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opStringSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opESeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: ESeq = try inS.read { istr in
            let iceP_inSeq: ESeq = try ESeqHelper.read(from: istr)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opESeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ESeqHelper.write(to: ostr, value: iceP_outSeq)
            ESeqHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opSSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: SSeq = try inS.read { istr in
            let iceP_inSeq: SSeq = try SSeqHelper.read(from: istr)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opSSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            SSeqHelper.write(to: ostr, value: iceP_outSeq)
            SSeqHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opDSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: DSeq = try inS.read { istr in
            let iceP_inSeq: DSeq = try DSeqHelper.read(from: istr)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opDSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            DSeqHelper.write(to: ostr, value: iceP_outSeq)
            DSeqHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opStringSeqSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: StringSeqSeq = try inS.read { istr in
            let iceP_inSeq: StringSeqSeq = try StringSeqSeqHelper.read(from: istr)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opStringSeqSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            StringSeqSeqHelper.write(to: ostr, value: iceP_outSeq)
            StringSeqSeqHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opByteBufferSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: ByteBuffer = try inS.read { istr in
            let iceP_inSeq: ByteBuffer = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opByteBufferSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opShortBufferSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: ShortBuffer = try inS.read { istr in
            let iceP_inSeq: ShortBuffer = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opShortBufferSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opIntBufferSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: IntBuffer = try inS.read { istr in
            let iceP_inSeq: IntBuffer = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opIntBufferSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opLongBufferSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: LongBuffer = try inS.read { istr in
            let iceP_inSeq: LongBuffer = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opLongBufferSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opFloatBufferSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: FloatBuffer = try inS.read { istr in
            let iceP_inSeq: FloatBuffer = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opFloatBufferSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opDoubleBufferSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: DoubleBuffer = try inS.read { istr in
            let iceP_inSeq: DoubleBuffer = try istr.read()
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opDoubleBufferSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_outSeq)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opOptCSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: CSeq? = try inS.read { istr in
            let iceP_inSeq: CSeq? = try CSeqHelper.read(from: istr, tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptCSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            CSeqHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            CSeqHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptCArray(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: CArray? = try inS.read { istr in
            let iceP_inSeq: CArray? = try CArrayHelper.read(from: istr, tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptCArray(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            CArrayHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            CArrayHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptCList(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: CList? = try inS.read { istr in
            let iceP_inSeq: CList? = try CListHelper.read(from: istr, tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptCList(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            CListHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            CListHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptBoolSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: BoolSeq? = try inS.read { istr in
            let iceP_inSeq: BoolSeq? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptBoolSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptByteSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: ByteSeq? = try inS.read { istr in
            let iceP_inSeq: ByteSeq? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptByteSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptShortSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: ShortSeq? = try inS.read { istr in
            let iceP_inSeq: ShortSeq? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptShortSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptIntSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: IntSeq? = try inS.read { istr in
            let iceP_inSeq: IntSeq? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptIntSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptLongSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: LongSeq? = try inS.read { istr in
            let iceP_inSeq: LongSeq? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptLongSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptFloatSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: FloatSeq? = try inS.read { istr in
            let iceP_inSeq: FloatSeq? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptFloatSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptDoubleSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: DoubleSeq? = try inS.read { istr in
            let iceP_inSeq: DoubleSeq? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptDoubleSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptStringSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: StringSeq? = try inS.read { istr in
            let iceP_inSeq: StringSeq? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptStringSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptESeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: ESeq? = try inS.read { istr in
            let iceP_inSeq: ESeq? = try ESeqHelper.read(from: istr, tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptESeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ESeqHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            ESeqHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptSSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: SSeq? = try inS.read { istr in
            let iceP_inSeq: SSeq? = try SSeqHelper.read(from: istr, tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptSSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            SSeqHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            SSeqHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptDSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: DSeq? = try inS.read { istr in
            let iceP_inSeq: DSeq? = try DSeqHelper.read(from: istr, tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptDSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            DSeqHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            DSeqHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptStringSeqSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: StringSeqSeq? = try inS.read { istr in
            let iceP_inSeq: StringSeqSeq? = try StringSeqSeqHelper.read(from: istr, tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptStringSeqSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            StringSeqSeqHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            StringSeqSeqHelper.write(to: ostr, tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptByteBufferSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: ByteBuffer? = try inS.read { istr in
            let iceP_inSeq: ByteBuffer? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptByteBufferSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptShortBufferSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: ShortBuffer? = try inS.read { istr in
            let iceP_inSeq: ShortBuffer? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptShortBufferSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptIntBufferSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: IntBuffer? = try inS.read { istr in
            let iceP_inSeq: IntBuffer? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptIntBufferSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptLongBufferSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: LongBuffer? = try inS.read { istr in
            let iceP_inSeq: LongBuffer? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptLongBufferSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptFloatBufferSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: FloatBuffer? = try inS.read { istr in
            let iceP_inSeq: FloatBuffer? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptFloatBufferSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_opOptDoubleBufferSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_inSeq: DoubleBuffer? = try inS.read { istr in
            let iceP_inSeq: DoubleBuffer? = try istr.read(tag: 2)
            return iceP_inSeq
        }

        let (iceP_returnValue, iceP_outSeq) = try self.opOptDoubleBufferSeq(inSeq: iceP_inSeq, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_outSeq)
        }
    }

    func _iceD_shutdown(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.shutdown(current: current)

        return inS.setResult()
    }
}
