//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// :nodoc:
public class TestIntfUserException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return TestIntfUserException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_TestIntfUserException() -> Ice.UserExceptionTypeResolver {
        return TestIntfUserException_TypeResolver()
    }
}

open class TestIntfUserException: Ice.UserException {
    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::TestIntfUserException" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: TestIntfUserException.ice_staticId(), compactId: -1, last: true)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }
}

/// :nodoc:
public class TestImpossibleException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return TestImpossibleException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_TestImpossibleException() -> Ice.UserExceptionTypeResolver {
        return TestImpossibleException_TypeResolver()
    }
}

open class TestImpossibleException: Ice.UserException {
    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::TestImpossibleException" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: TestImpossibleException.ice_staticId(), compactId: -1, last: true)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }
}

/// Traits for Slice interface`TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

/// Traits for Slice interface`TestActivation`.
public struct TestActivationTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestActivation"]
    public static let staticId = "::Test::TestActivation"
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - requestFailedException: 
///
///  - requestFailedExceptionAsync: 
///
///  - unknownUserException: 
///
///  - unknownUserExceptionAsync: 
///
///  - unknownLocalException: 
///
///  - unknownLocalExceptionAsync: 
///
///  - unknownException: 
///
///  - unknownExceptionAsync: 
///
///  - localException: 
///
///  - localExceptionAsync: 
///
///  - javaException: 
///
///  - javaExceptionAsync: 
///
///  - unknownExceptionWithServantException: 
///
///  - unknownExceptionWithServantExceptionAsync: 
///
///  - impossibleException: 
///
///  - impossibleExceptionAsync: 
///
///  - intfUserException: 
///
///  - intfUserExceptionAsync: 
///
///  - asyncResponse: 
///
///  - asyncResponseAsync: 
///
///  - asyncException: 
///
///  - asyncExceptionAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol TestIntfPrx: Ice.ObjectPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestIntfPrx.Protocol) throws -> TestIntfPrx {
    try communicator.makeProxyImpl(proxyString) as TestIntfPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestIntfPrx? {
    return try TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - requestFailedException: 
///
///  - requestFailedExceptionAsync: 
///
///  - unknownUserException: 
///
///  - unknownUserExceptionAsync: 
///
///  - unknownLocalException: 
///
///  - unknownLocalExceptionAsync: 
///
///  - unknownException: 
///
///  - unknownExceptionAsync: 
///
///  - localException: 
///
///  - localExceptionAsync: 
///
///  - javaException: 
///
///  - javaExceptionAsync: 
///
///  - unknownExceptionWithServantException: 
///
///  - unknownExceptionWithServantExceptionAsync: 
///
///  - impossibleException: 
///
///  - impossibleExceptionAsync: 
///
///  - intfUserException: 
///
///  - intfUserExceptionAsync: 
///
///  - asyncResponse: 
///
///  - asyncResponseAsync: 
///
///  - asyncException: 
///
///  - asyncExceptionAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension TestIntfPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func requestFailedException(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "requestFailedException",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func requestFailedExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "requestFailedException",
                                            mode: .Normal,
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func unknownUserException(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "unknownUserException",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func unknownUserExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "unknownUserException",
                                            mode: .Normal,
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func unknownLocalException(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "unknownLocalException",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func unknownLocalExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "unknownLocalException",
                                            mode: .Normal,
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func unknownException(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "unknownException",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func unknownExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "unknownException",
                                            mode: .Normal,
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func localException(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "localException",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func localExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "localException",
                                            mode: .Normal,
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func javaException(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "javaException",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func javaExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "javaException",
                                            mode: .Normal,
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func unknownExceptionWithServantException(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "unknownExceptionWithServantException",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func unknownExceptionWithServantExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "unknownExceptionWithServantException",
                                            mode: .Normal,
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.String`
    func impossibleException(_ iceP_throw: Swift.Bool, context: Ice.Context? = nil) throws -> Swift.String {
        return try _impl._invoke(operation: "impossibleException",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_throw)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.String = try istr.read()
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as TestImpossibleException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `Swift.String` - The result of the operation
    func impossibleExceptionAsync(_ iceP_throw: Swift.Bool, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.String {
        return try await _impl._invokeAsync(operation: "impossibleException",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_throw)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: Swift.String = try istr.read()
                                                return iceP_returnValue
                                            },
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as TestImpossibleException {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.String`
    func intfUserException(_ iceP_throw: Swift.Bool, context: Ice.Context? = nil) throws -> Swift.String {
        return try _impl._invoke(operation: "intfUserException",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_throw)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.String = try istr.read()
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as TestIntfUserException {
                                         throw error
                                     } catch let error as TestImpossibleException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `Swift.String` - The result of the operation
    func intfUserExceptionAsync(_ iceP_throw: Swift.Bool, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.String {
        return try await _impl._invokeAsync(operation: "intfUserException",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_throw)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: Swift.String = try istr.read()
                                                return iceP_returnValue
                                            },
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as TestIntfUserException {
                                                    throw error
                                                } catch let error as TestImpossibleException {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func asyncResponse(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "asyncResponse",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as TestIntfUserException {
                                  throw error
                              } catch let error as TestImpossibleException {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func asyncResponseAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "asyncResponse",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as TestIntfUserException {
                                                    throw error
                                                } catch let error as TestImpossibleException {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func asyncException(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "asyncException",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as TestIntfUserException {
                                  throw error
                              } catch let error as TestImpossibleException {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func asyncExceptionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "asyncException",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as TestIntfUserException {
                                                    throw error
                                                } catch let error as TestImpossibleException {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "shutdown",
                                            mode: .Normal,
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }
}

/// TestActivationPrx overview.
///
/// TestActivationPrx Methods:
///
///  - activateServantLocator: 
///
///  - activateServantLocatorAsync: 
public protocol TestActivationPrx: Ice.ObjectPrx {}

private final class TestActivationPrxI: Ice.ObjectPrxI, TestActivationPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestActivationTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestActivationPrx.Protocol) throws -> TestActivationPrx {
    try communicator.makeProxyImpl(proxyString) as TestActivationPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestActivationPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestActivationPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestActivationPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestActivationPrx? {
    return try TestActivationPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestActivationPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestActivationPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestActivationPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestActivationPrx.Protocol, facet: Swift.String? = nil) -> TestActivationPrx {
    return TestActivationPrxI.uncheckedCast(prx: prx, facet: facet) as TestActivationPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `TestActivationPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestActivationPrx.Protocol) -> Swift.String {
    return TestActivationTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestActivationPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestActivationPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestActivationPrx?` - The extracted proxy
    func read(_ type: TestActivationPrx.Protocol) throws -> TestActivationPrx? {
        return try read() as TestActivationPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestActivationPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestActivationPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestActivationPrx.Protocol) throws -> TestActivationPrx? {
        return try read(tag: tag) as TestActivationPrxI?
    }
}

/// TestActivationPrx overview.
///
/// TestActivationPrx Methods:
///
///  - activateServantLocator: 
///
///  - activateServantLocatorAsync: 
public extension TestActivationPrx {
    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func activateServantLocator(_ iceP_activate: Swift.Bool, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "activateServantLocator",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_activate)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func activateServantLocatorAsync(_ iceP_activate: Swift.Bool, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "activateServantLocator",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_activate)
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Dispatcher {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "asyncException":
            try await servant._iceD_asyncException(request)
        case "asyncResponse":
            try await servant._iceD_asyncResponse(request)
        case "ice_id":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(request)
        case "impossibleException":
            try await servant._iceD_impossibleException(request)
        case "intfUserException":
            try await servant._iceD_intfUserException(request)
        case "javaException":
            try await servant._iceD_javaException(request)
        case "localException":
            try await servant._iceD_localException(request)
        case "requestFailedException":
            try await servant._iceD_requestFailedException(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        case "unknownException":
            try await servant._iceD_unknownException(request)
        case "unknownExceptionWithServantException":
            try await servant._iceD_unknownExceptionWithServantException(request)
        case "unknownLocalException":
            try await servant._iceD_unknownLocalException(request)
        case "unknownUserException":
            try await servant._iceD_unknownUserException(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol TestIntf {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func requestFailedExceptionAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func unknownUserExceptionAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func unknownLocalExceptionAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func unknownExceptionAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func localExceptionAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func javaExceptionAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func unknownExceptionWithServantExceptionAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter throw: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.String` - The result of the operation
    func impossibleExceptionAsync(throw: Swift.Bool, current: Ice.Current) async throws -> Swift.String

    ///
    /// - parameter throw: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.String` - The result of the operation
    func intfUserExceptionAsync(throw: Swift.Bool, current: Ice.Current) async throws -> Swift.String

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func asyncResponseAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func asyncExceptionAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func shutdownAsync(current: Ice.Current) async throws -> Swift.Void
}


/// Dispatcher for `TestActivation` servants.
public struct TestActivationDisp: Ice.Dispatcher {
    public let servant: TestActivation
    private static let defaultObject = Ice.ObjectI<TestActivationTraits>()

    public init(_ servant: TestActivation) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "activateServantLocator":
            try await servant._iceD_activateServantLocator(request)
        case "ice_id":
            try (servant as? Ice.Object ?? TestActivationDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try (servant as? Ice.Object ?? TestActivationDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try (servant as? Ice.Object ?? TestActivationDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try (servant as? Ice.Object ?? TestActivationDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol TestActivation {
    ///
    /// - parameter activate: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func activateServantLocator(activate: Swift.Bool, current: Ice.Current) throws
}

/// TestIntf overview.
///
/// TestIntf Methods:
///
///  - requestFailedException: 
///
///  - unknownUserException: 
///
///  - unknownLocalException: 
///
///  - unknownException: 
///
///  - localException: 
///
///  - javaException: 
///
///  - unknownExceptionWithServantException: 
///
///  - impossibleException: 
///
///  - intfUserException: 
///
///  - asyncResponse: 
///
///  - asyncException: 
///
///  - shutdown: 
extension TestIntf {
    public func _iceD_requestFailedException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.requestFailedExceptionAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownUserException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownUserExceptionAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownLocalException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownLocalExceptionAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownExceptionAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_localException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.localExceptionAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_javaException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.javaExceptionAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownExceptionWithServantException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownExceptionWithServantExceptionAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_impossibleException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_throw: Swift.Bool = try istr.read()
        let result = try await self.impossibleExceptionAsync(
            throw: iceP_throw, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType:.DefaultFormat) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_intfUserException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_throw: Swift.Bool = try istr.read()
        let result = try await self.intfUserExceptionAsync(
            throw: iceP_throw, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType:.DefaultFormat) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_asyncResponse(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.asyncResponseAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_asyncException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.asyncExceptionAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdownAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// TestActivation overview.
///
/// TestActivation Methods:
///
///  - activateServantLocator: 
extension TestActivation {
    public func _iceD_activateServantLocator(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_activate: Swift.Bool = try istr.read()

        try self.activateServantLocator(activate: iceP_activate, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
