//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// Traits for Slice interface `MyClass`.
public struct MyClassTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MyClass"]
    public static let staticId = "::Test::MyClass"
}

/// Traits for Slice interface `MyDerivedClass`.
public struct MyDerivedClassTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MyClass", "::Test::MyDerivedClass"]
    public static let staticId = "::Test::MyDerivedClass"
}

/// Traits for Slice interface `MyOtherDerivedClass`.
public struct MyOtherDerivedClassTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MyClass", "::Test::MyOtherDerivedClass"]
    public static let staticId = "::Test::MyOtherDerivedClass"
}

/// Traits for Slice interface `DiamondClass`.
public struct DiamondClassTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::DiamondClass", "::Test::MyClass", "::Test::MyDerivedClass", "::Test::MyOtherDerivedClass"]
    public static let staticId = "::Test::DiamondClass"
}

public protocol MyClassPrx: Ice.ObjectPrx {}

private final class MyClassPrxI: Ice.ObjectPrxI, MyClassPrx {
    public override class func ice_staticId() -> Swift.String {
        return MyClassTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: MyClassPrx.Protocol) throws -> MyClassPrx {
    try communicator.makeProxyImpl(proxyString) as MyClassPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MyClassPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> MyClassPrx? {
    return try await MyClassPrxI.checkedCast(prx: prx, facet: facet, context: context) as MyClassPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: MyClassPrx.Protocol, facet: Swift.String? = nil) -> MyClassPrx {
    return MyClassPrxI.uncheckedCast(prx: prx, facet: facet) as MyClassPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: MyClassPrx.Protocol) -> Swift.String {
    return MyClassTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `MyClassPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: MyClassPrx.Protocol) throws -> MyClassPrx? {
        return try read() as MyClassPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: MyClassPrx.Protocol) throws -> MyClassPrx? {
        return try read(tag: tag) as MyClassPrxI?
    }
}

public extension MyClassPrx {
    func shutdown(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "shutdown",
                                       mode: .Normal,
                                       context: context)
    }

    func getContext(context: Ice.Context? = nil) async throws -> Ice.Context {
        return try await _impl._invoke(operation: "getContext",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: Ice.Context = try Ice.ContextHelper.read(from: istr)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}

public protocol MyDerivedClassPrx: MyClassPrx {}

private final class MyDerivedClassPrxI: Ice.ObjectPrxI, MyDerivedClassPrx {
    public override class func ice_staticId() -> Swift.String {
        return MyDerivedClassTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: MyDerivedClassPrx.Protocol) throws -> MyDerivedClassPrx {
    try communicator.makeProxyImpl(proxyString) as MyDerivedClassPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MyDerivedClassPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> MyDerivedClassPrx? {
    return try await MyDerivedClassPrxI.checkedCast(prx: prx, facet: facet, context: context) as MyDerivedClassPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: MyDerivedClassPrx.Protocol, facet: Swift.String? = nil) -> MyDerivedClassPrx {
    return MyDerivedClassPrxI.uncheckedCast(prx: prx, facet: facet) as MyDerivedClassPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: MyDerivedClassPrx.Protocol) -> Swift.String {
    return MyDerivedClassTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `MyDerivedClassPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: MyDerivedClassPrx.Protocol) throws -> MyDerivedClassPrx? {
        return try read() as MyDerivedClassPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: MyDerivedClassPrx.Protocol) throws -> MyDerivedClassPrx? {
        return try read(tag: tag) as MyDerivedClassPrxI?
    }
}

public extension MyDerivedClassPrx {
    func echo(_ iceP_obj: Ice.ObjectPrx?, context: Ice.Context? = nil) async throws -> Ice.ObjectPrx? {
        return try await _impl._invoke(operation: "echo",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_obj)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: Ice.ObjectPrx? = try istr.read(Ice.ObjectPrx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}

public protocol MyOtherDerivedClassPrx: MyClassPrx {}

private final class MyOtherDerivedClassPrxI: Ice.ObjectPrxI, MyOtherDerivedClassPrx {
    public override class func ice_staticId() -> Swift.String {
        return MyOtherDerivedClassTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: MyOtherDerivedClassPrx.Protocol) throws -> MyOtherDerivedClassPrx {
    try communicator.makeProxyImpl(proxyString) as MyOtherDerivedClassPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MyOtherDerivedClassPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> MyOtherDerivedClassPrx? {
    return try await MyOtherDerivedClassPrxI.checkedCast(prx: prx, facet: facet, context: context) as MyOtherDerivedClassPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: MyOtherDerivedClassPrx.Protocol, facet: Swift.String? = nil) -> MyOtherDerivedClassPrx {
    return MyOtherDerivedClassPrxI.uncheckedCast(prx: prx, facet: facet) as MyOtherDerivedClassPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: MyOtherDerivedClassPrx.Protocol) -> Swift.String {
    return MyOtherDerivedClassTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `MyOtherDerivedClassPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: MyOtherDerivedClassPrx.Protocol) throws -> MyOtherDerivedClassPrx? {
        return try read() as MyOtherDerivedClassPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: MyOtherDerivedClassPrx.Protocol) throws -> MyOtherDerivedClassPrx? {
        return try read(tag: tag) as MyOtherDerivedClassPrxI?
    }
}

public extension MyOtherDerivedClassPrx {}

public protocol DiamondClassPrx: MyDerivedClassPrx, MyOtherDerivedClassPrx {}

private final class DiamondClassPrxI: Ice.ObjectPrxI, DiamondClassPrx {
    public override class func ice_staticId() -> Swift.String {
        return DiamondClassTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: DiamondClassPrx.Protocol) throws -> DiamondClassPrx {
    try communicator.makeProxyImpl(proxyString) as DiamondClassPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: DiamondClassPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> DiamondClassPrx? {
    return try await DiamondClassPrxI.checkedCast(prx: prx, facet: facet, context: context) as DiamondClassPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: DiamondClassPrx.Protocol, facet: Swift.String? = nil) -> DiamondClassPrx {
    return DiamondClassPrxI.uncheckedCast(prx: prx, facet: facet) as DiamondClassPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: DiamondClassPrx.Protocol) -> Swift.String {
    return DiamondClassTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `DiamondClassPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: DiamondClassPrx.Protocol) throws -> DiamondClassPrx? {
        return try read() as DiamondClassPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: DiamondClassPrx.Protocol) throws -> DiamondClassPrx? {
        return try read(tag: tag) as DiamondClassPrxI?
    }
}

public extension DiamondClassPrx {}


/// Dispatcher for `MyClass` servants.
public struct MyClassDisp: Ice.Dispatcher {
    public let servant: MyClass
    private static let defaultObject = Ice.ObjectI<MyClassTraits>()

    public init(_ servant: MyClass) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "getContext":
            try await servant._iceD_getContext(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? MyClassDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? MyClassDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? MyClassDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? MyClassDisp.defaultObject)._iceD_ice_ping(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol MyClass {
    func shutdown(current: Ice.Current) async throws

    func getContext(current: Ice.Current) async throws -> Ice.Context
}


/// Dispatcher for `MyDerivedClass` servants.
public struct MyDerivedClassDisp: Ice.Dispatcher {
    public let servant: MyDerivedClass
    private static let defaultObject = Ice.ObjectI<MyDerivedClassTraits>()

    public init(_ servant: MyDerivedClass) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "echo":
            try await servant._iceD_echo(request)
        case "getContext":
            try await servant._iceD_getContext(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? MyDerivedClassDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? MyDerivedClassDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? MyDerivedClassDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? MyDerivedClassDisp.defaultObject)._iceD_ice_ping(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol MyDerivedClass: MyClass {
    func echo(obj: Ice.ObjectPrx?, current: Ice.Current) async throws -> Ice.ObjectPrx?
}


/// Dispatcher for `MyOtherDerivedClass` servants.
public struct MyOtherDerivedClassDisp: Ice.Dispatcher {
    public let servant: MyOtherDerivedClass
    private static let defaultObject = Ice.ObjectI<MyOtherDerivedClassTraits>()

    public init(_ servant: MyOtherDerivedClass) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "getContext":
            try await servant._iceD_getContext(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? MyOtherDerivedClassDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? MyOtherDerivedClassDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? MyOtherDerivedClassDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? MyOtherDerivedClassDisp.defaultObject)._iceD_ice_ping(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol MyOtherDerivedClass: MyClass {}


/// Dispatcher for `DiamondClass` servants.
public struct DiamondClassDisp: Ice.Dispatcher {
    public let servant: DiamondClass
    private static let defaultObject = Ice.ObjectI<DiamondClassTraits>()

    public init(_ servant: DiamondClass) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "echo":
            try await servant._iceD_echo(request)
        case "getContext":
            try await servant._iceD_getContext(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? DiamondClassDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? DiamondClassDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? DiamondClassDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? DiamondClassDisp.defaultObject)._iceD_ice_ping(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol DiamondClass: MyDerivedClass, MyOtherDerivedClass {}

extension MyClass {
    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_getContext(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getContext(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            Ice.ContextHelper.write(to: ostr, value: iceP_returnValue)
        }
    }
}

extension MyDerivedClass {
    public func _iceD_echo(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_obj: Ice.ObjectPrx? = try istr.read(Ice.ObjectPrx.self)
        let result = try await self.echo(obj: iceP_obj, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}

extension MyOtherDerivedClass {}

extension DiamondClass {}
