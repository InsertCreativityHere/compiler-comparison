//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public typealias SerialSmall = Foundation.Data

public typealias SerialLarge = Foundation.Data

public typealias SerialStruct = Foundation.Data

/// Traits for Slice interface `MyClass`.
public struct MyClassTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MyClass"]
    public static let staticId = "::Test::MyClass"
}

public typealias SLS = [SerialLarge]

/// Helper class to read and write `SLS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SLSHelper {
    /// Read a `SLS` sequence from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    ///
    /// - Returns: The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SLS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = SLS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: SerialLarge = try istr.read()
            v.append(j)
        }
        return v
    }

    /// Read an optional `SLS?` sequence from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SLS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Write a `SLS` sequence to the stream.
    ///
    /// - Parameter ostr: The stream to write to.
    /// - Parameter value: The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SLS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Write an optional `SLS?` sequence to the stream.
    ///
    /// - Parameters:
    ///   - ostr: The stream to write to.
    ///   - tag: The numeric tag associated with the value.
    ///   - value: The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: SLS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias SLSS = [SLS]

/// Helper class to read and write `SLSS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SLSSHelper {
    /// Read a `SLSS` sequence from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    ///
    /// - Returns: The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SLSS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = SLSS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: SLS = try SLSHelper.read(from: istr)
            v.append(j)
        }
        return v
    }

    /// Read an optional `SLSS?` sequence from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SLSS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Write a `SLSS` sequence to the stream.
    ///
    /// - Parameter ostr: The stream to write to.
    /// - Parameter value: The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SLSS) {
        ostr.write(size: v.count)
        for item in v {
            SLSHelper.write(to: ostr, value: item)
        }
    }

    /// Write an optional `SLSS?` sequence to the stream.
    ///
    /// - Parameters:
    ///   - ostr: The stream to write to.
    ///   - tag: The numeric tag associated with the value.
    ///   - value: The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: SLSS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias SLD = [Swift.Int32: SerialLarge]

/// Helper class to read and write `SLD` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SLDHelper {
    /// Read a `SLD` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SLD {
        let sz = try Swift.Int(istr.readSize())
        var v = SLD()
        for _ in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            let value: SerialLarge = try istr.read()
            v[key] = value
        }
        return v
    }

    /// Read an optional `SLD?` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SLD? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Write a `SLD` dictionary to the stream.
    ///
    /// - Parameter ostr: The stream to write to.
    /// - Parameter value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SLD) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Write an optional `SLD?` dictionary to the stream.
    ///
    /// - Parameters:
    ///   - ostr: The stream to write to.
    ///   - tag: The numeric tag associated with the value.
    ///   - value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: SLD?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias SLSD = [Swift.Int32: SLS]

/// Helper class to read and write `SLSD` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SLSDHelper {
    /// Read a `SLSD` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SLSD {
        let sz = try Swift.Int(istr.readSize())
        var v = SLSD()
        for _ in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            let value: SLS = try SLSHelper.read(from: istr)
            v[key] = value
        }
        return v
    }

    /// Read an optional `SLSD?` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SLSD? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Write a `SLSD` dictionary to the stream.
    ///
    /// - Parameter ostr: The stream to write to.
    /// - Parameter value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SLSD) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            SLSHelper.write(to: ostr, value: value)
        }
    }

    /// Write an optional `SLSD?` dictionary to the stream.
    ///
    /// - Parameters:
    ///   - ostr: The stream to write to.
    ///   - tag: The numeric tag associated with the value.
    ///   - value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: SLSD?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public struct Foo {
    public var SLmem: SerialLarge = SerialLarge()
    public var SLSmem: SLS = SLS()

    public init() {}

    public init(SLmem: SerialLarge, SLSmem: SLS) {
        self.SLmem = SLmem
        self.SLSmem = SLSmem
    }
}

/// An `Ice.InputStream` extension to read `Foo` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `Foo` structured value from the stream.
    ///
    /// - Returns: The structured value read from the stream.
    func read() throws -> Foo {
        var v = Foo()
        v.SLmem = try self.read()
        v.SLSmem = try SLSHelper.read(from: self)
        return v
    }

    /// Read an optional `Foo?` structured value from the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> Foo? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as Foo
    }
}

/// An `Ice.OutputStream` extension to write `Foo` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `Foo` structured value to the stream.
    ///
    /// - Parameter v: The value to write to the stream.
    func write(_ v: Foo) {
        self.write(v.SLmem)
        SLSHelper.write(to: self, value: v.SLSmem)
    }

    /// Write an optional `Foo?` structured value to the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    /// - Parameter value: The value to write to the stream.
    func write(tag: Swift.Int32, value: Foo?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

@_documentation(visibility: internal)
public class Bar_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return Bar.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Bar() -> Ice.UserExceptionTypeResolver {
        return Bar_TypeResolver()
    }
}

open class Bar: Ice.UserException, @unchecked Sendable {
    public var SLmem: SerialLarge = SerialLarge()
    public var SLSmem: SLS = SLS()

    public required init() {}

    public init(SLmem: SerialLarge, SLSmem: SLS) {
        self.SLmem = SLmem
        self.SLSmem = SLSmem
    }

    /// - Returns: The Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::Bar" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: Bar.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.SLmem)
        SLSHelper.write(to: ostr, value: self.SLSmem)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.SLmem = try istr.read()
        self.SLSmem = try SLSHelper.read(from: istr)
        try istr.endSlice()
    }
}

public protocol MyClassPrx: Ice.ObjectPrx {}

private final class MyClassPrxI: Ice.ObjectPrxI, MyClassPrx {
    public override class func ice_staticId() -> Swift.String {
        return MyClassTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: MyClassPrx.Protocol) throws -> MyClassPrx {
    try communicator.makeProxyImpl(proxyString) as MyClassPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MyClassPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> MyClassPrx? {
    return try await MyClassPrxI.checkedCast(prx: prx, facet: facet, context: context) as MyClassPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: MyClassPrx.Protocol, facet: Swift.String? = nil) -> MyClassPrx {
    return MyClassPrxI.uncheckedCast(prx: prx, facet: facet) as MyClassPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: MyClassPrx.Protocol) -> Swift.String {
    return MyClassTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `MyClassPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: MyClassPrx.Protocol) throws -> MyClassPrx? {
        return try read() as MyClassPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: MyClassPrx.Protocol) throws -> MyClassPrx? {
        return try read(tag: tag) as MyClassPrxI?
    }
}

public extension MyClassPrx {
    func shutdown(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "shutdown",
                                       mode: .Normal,
                                       context: context)
    }

    func opSerialSmallJava(_ iceP_i: SerialSmall, context: Ice.Context? = nil) async throws -> (returnValue: SerialSmall, o: SerialSmall) {
        return try await _impl._invoke(operation: "opSerialSmallJava",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_i)
                                       },
                                       read: { istr in
                                           let iceP_o: SerialSmall = try istr.read()
                                           let iceP_returnValue: SerialSmall = try istr.read()
                                           return (iceP_returnValue, iceP_o)
                                       },
                                       context: context)
    }

    func opSerialLargeJava(_ iceP_i: SerialLarge, context: Ice.Context? = nil) async throws -> (returnValue: SerialLarge, o: SerialLarge) {
        return try await _impl._invoke(operation: "opSerialLargeJava",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_i)
                                       },
                                       read: { istr in
                                           let iceP_o: SerialLarge = try istr.read()
                                           let iceP_returnValue: SerialLarge = try istr.read()
                                           return (iceP_returnValue, iceP_o)
                                       },
                                       context: context)
    }

    func opSerialStructJava(_ iceP_i: SerialStruct, context: Ice.Context? = nil) async throws -> (returnValue: SerialStruct, o: SerialStruct) {
        return try await _impl._invoke(operation: "opSerialStructJava",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_i)
                                       },
                                       read: { istr in
                                           let iceP_o: SerialStruct = try istr.read()
                                           let iceP_returnValue: SerialStruct = try istr.read()
                                           return (iceP_returnValue, iceP_o)
                                       },
                                       context: context)
    }
}

@_documentation(visibility: internal)
public class Baz_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return Baz.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Baz() -> Ice.ValueTypeResolver {
        return Baz_TypeResolver()
    }
}

open class Baz: Ice.Value {
    public var SLmem: SerialLarge = SerialLarge()
    public var SLSmem: SLS = SLS()

    public required init() {}

    public init(SLmem: SerialLarge, SLSmem: SLS) {
        self.SLmem = SLmem
        self.SLSmem = SLSmem
    }

    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::Baz" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.SLmem = try istr.read()
        self.SLSmem = try SLSHelper.read(from: istr)
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: Baz.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.SLmem)
        SLSHelper.write(to: ostr, value: self.SLSmem)
        ostr.endSlice()
    }
}


/// Dispatcher for `MyClass` servants.
public struct MyClassDisp: Ice.Dispatcher {
    public let servant: MyClass
    private static let defaultObject = Ice.ObjectI<MyClassTraits>()

    public init(_ servant: MyClass) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? MyClassDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? MyClassDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? MyClassDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? MyClassDisp.defaultObject)._iceD_ice_ping(request)
        case "opSerialLargeJava":
            try await servant._iceD_opSerialLargeJava(request)
        case "opSerialSmallJava":
            try await servant._iceD_opSerialSmallJava(request)
        case "opSerialStructJava":
            try await servant._iceD_opSerialStructJava(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol MyClass {
    func shutdown(current: Ice.Current) async throws

    func opSerialSmallJava(i: SerialSmall, current: Ice.Current) async throws -> (returnValue: SerialSmall, o: SerialSmall)

    func opSerialLargeJava(i: SerialLarge, current: Ice.Current) async throws -> (returnValue: SerialLarge, o: SerialLarge)

    func opSerialStructJava(i: SerialStruct, current: Ice.Current) async throws -> (returnValue: SerialStruct, o: SerialStruct)
}

extension MyClass {
    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_opSerialSmallJava(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_i: SerialSmall = try istr.read()
        let result = try await self.opSerialSmallJava(i: iceP_i, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_o) = value
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opSerialLargeJava(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_i: SerialLarge = try istr.read()
        let result = try await self.opSerialLargeJava(i: iceP_i, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_o) = value
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opSerialStructJava(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_i: SerialStruct = try istr.read()
        let result = try await self.opSerialStructJava(i: iceP_i, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_o) = value
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }
}
