//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// :nodoc:
public class CannotCreateSessionException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return CannotCreateSessionException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Glacier2_CannotCreateSessionException() -> Ice.UserExceptionTypeResolver {
        return CannotCreateSessionException_TypeResolver()
    }
}

/// This exception is raised if an attempt to create a new session failed.
open class CannotCreateSessionException: Ice.UserException, @unchecked Sendable {
    /// The reason why session creation has failed.
    public var reason: Swift.String = ""

    public required init() {}

    public init(reason: Swift.String) {
        self.reason = reason
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Glacier2::CannotCreateSessionException" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CannotCreateSessionException.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.reason)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.reason = try istr.read()
        try istr.endSlice()
    }
}

/// Traits for Slice interface`Session`.
public struct SessionTraits: Ice.SliceTraits {
    public static let staticIds = ["::Glacier2::Session", "::Ice::Object"]
    public static let staticId = "::Glacier2::Session"
}

/// Traits for Slice interface`StringSet`.
public struct StringSetTraits: Ice.SliceTraits {
    public static let staticIds = ["::Glacier2::StringSet", "::Ice::Object"]
    public static let staticId = "::Glacier2::StringSet"
}

/// Traits for Slice interface`IdentitySet`.
public struct IdentitySetTraits: Ice.SliceTraits {
    public static let staticIds = ["::Glacier2::IdentitySet", "::Ice::Object"]
    public static let staticId = "::Glacier2::IdentitySet"
}

/// Traits for Slice interface`SessionControl`.
public struct SessionControlTraits: Ice.SliceTraits {
    public static let staticIds = ["::Glacier2::SessionControl", "::Ice::Object"]
    public static let staticId = "::Glacier2::SessionControl"
}

/// Traits for Slice interface`SessionManager`.
public struct SessionManagerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Glacier2::SessionManager", "::Ice::Object"]
    public static let staticId = "::Glacier2::SessionManager"
}

/// Traits for Slice interface`SSLSessionManager`.
public struct SSLSessionManagerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Glacier2::SSLSessionManager", "::Ice::Object"]
    public static let staticId = "::Glacier2::SSLSessionManager"
}

/// A client-visible session object, which is tied to the lifecycle of a Router.
///
/// SessionPrx Methods:
///
///  - destroy: Destroy the session.
///
///  - destroyAsync: Destroy the session.
public protocol SessionPrx: Ice.ObjectPrx {}

private final class SessionPrxI: Ice.ObjectPrxI, SessionPrx {
    public override class func ice_staticId() -> Swift.String {
        return SessionTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: SessionPrx.Protocol) throws -> SessionPrx {
    try communicator.makeProxyImpl(proxyString) as SessionPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `SessionPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `SessionPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: SessionPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> SessionPrx? {
    return try await SessionPrxI.checkedCast(prx: prx, facet: facet, context: context) as SessionPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `SessionPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `SessionPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: SessionPrx.Protocol, facet: Swift.String? = nil) -> SessionPrx {
    return SessionPrxI.uncheckedCast(prx: prx, facet: facet) as SessionPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `SessionPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: SessionPrx.Protocol) -> Swift.String {
    return SessionTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `SessionPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `SessionPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SessionPrx?` - The extracted proxy
    func read(_ type: SessionPrx.Protocol) throws -> SessionPrx? {
        return try read() as SessionPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `SessionPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SessionPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: SessionPrx.Protocol) throws -> SessionPrx? {
        return try read(tag: tag) as SessionPrxI?
    }
}

/// A client-visible session object, which is tied to the lifecycle of a Router.
///
/// SessionPrx Methods:
///
///  - destroy: Destroy the session.
///
///  - destroyAsync: Destroy the session.
public extension SessionPrx {
    /// Destroy the session. This is called automatically when the router is destroyed.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func destroy(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "destroy",
                                       mode: .Normal,
                                       context: context)
    }
}

/// An object for managing the set of identity constraints for specific parts of object identity on a
/// Session.
///
/// StringSetPrx Methods:
///
///  - add: Add a sequence of strings to this set of constraints.
///
///  - addAsync: Add a sequence of strings to this set of constraints.
///
///  - remove: Remove a sequence of strings from this set of constraints.
///
///  - removeAsync: Remove a sequence of strings from this set of constraints.
///
///  - `get`: Returns a sequence of strings describing the constraints in this set.
///
///  - getAsync: Returns a sequence of strings describing the constraints in this set.
public protocol StringSetPrx: Ice.ObjectPrx {}

private final class StringSetPrxI: Ice.ObjectPrxI, StringSetPrx {
    public override class func ice_staticId() -> Swift.String {
        return StringSetTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: StringSetPrx.Protocol) throws -> StringSetPrx {
    try communicator.makeProxyImpl(proxyString) as StringSetPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `StringSetPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `StringSetPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: StringSetPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> StringSetPrx? {
    return try await StringSetPrxI.checkedCast(prx: prx, facet: facet, context: context) as StringSetPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `StringSetPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `StringSetPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: StringSetPrx.Protocol, facet: Swift.String? = nil) -> StringSetPrx {
    return StringSetPrxI.uncheckedCast(prx: prx, facet: facet) as StringSetPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `StringSetPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: StringSetPrx.Protocol) -> Swift.String {
    return StringSetTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `StringSetPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `StringSetPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `StringSetPrx?` - The extracted proxy
    func read(_ type: StringSetPrx.Protocol) throws -> StringSetPrx? {
        return try read() as StringSetPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `StringSetPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `StringSetPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: StringSetPrx.Protocol) throws -> StringSetPrx? {
        return try read(tag: tag) as StringSetPrxI?
    }
}

/// An object for managing the set of identity constraints for specific parts of object identity on a
/// Session.
///
/// StringSetPrx Methods:
///
///  - add: Add a sequence of strings to this set of constraints.
///
///  - addAsync: Add a sequence of strings to this set of constraints.
///
///  - remove: Remove a sequence of strings from this set of constraints.
///
///  - removeAsync: Remove a sequence of strings from this set of constraints.
///
///  - `get`: Returns a sequence of strings describing the constraints in this set.
///
///  - getAsync: Returns a sequence of strings describing the constraints in this set.
public extension StringSetPrx {
    /// Add a sequence of strings to this set of constraints. Order is not preserved and duplicates are implicitly
    /// removed.
    ///
    /// - parameter _: `Ice.StringSeq` The sequence of strings to be added.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func add(_ iceP_additions: Ice.StringSeq, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "add",
                                       mode: .Idempotent,
                                       write: { ostr in
                                           ostr.write(iceP_additions)
                                       },
                                       context: context)
    }

    /// Remove a sequence of strings from this set of constraints. No errors are returned if an entry is not found.
    ///
    /// - parameter _: `Ice.StringSeq` The sequence of strings to be removed.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func remove(_ iceP_deletions: Ice.StringSeq, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "remove",
                                       mode: .Idempotent,
                                       write: { ostr in
                                           ostr.write(iceP_deletions)
                                       },
                                       context: context)
    }

    /// Returns a sequence of strings describing the constraints in this set.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Ice.StringSeq` - The sequence of strings for this set.
    func `get`(context: Ice.Context? = nil) async throws -> Ice.StringSeq {
        return try await _impl._invoke(operation: "get",
                                       mode: .Idempotent,
                                       read: { istr in
                                           let iceP_returnValue: Ice.StringSeq = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}

/// An object for managing the set of object identity constraints on a Session.
///
/// IdentitySetPrx Methods:
///
///  - add: Add a sequence of Ice identities to this set of constraints.
///
///  - addAsync: Add a sequence of Ice identities to this set of constraints.
///
///  - remove: Remove a sequence of identities from this set of constraints.
///
///  - removeAsync: Remove a sequence of identities from this set of constraints.
///
///  - `get`: Returns a sequence of identities describing the constraints in this set.
///
///  - getAsync: Returns a sequence of identities describing the constraints in this set.
public protocol IdentitySetPrx: Ice.ObjectPrx {}

private final class IdentitySetPrxI: Ice.ObjectPrxI, IdentitySetPrx {
    public override class func ice_staticId() -> Swift.String {
        return IdentitySetTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: IdentitySetPrx.Protocol) throws -> IdentitySetPrx {
    try communicator.makeProxyImpl(proxyString) as IdentitySetPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `IdentitySetPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `IdentitySetPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: IdentitySetPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> IdentitySetPrx? {
    return try await IdentitySetPrxI.checkedCast(prx: prx, facet: facet, context: context) as IdentitySetPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `IdentitySetPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `IdentitySetPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: IdentitySetPrx.Protocol, facet: Swift.String? = nil) -> IdentitySetPrx {
    return IdentitySetPrxI.uncheckedCast(prx: prx, facet: facet) as IdentitySetPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `IdentitySetPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: IdentitySetPrx.Protocol) -> Swift.String {
    return IdentitySetTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `IdentitySetPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `IdentitySetPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `IdentitySetPrx?` - The extracted proxy
    func read(_ type: IdentitySetPrx.Protocol) throws -> IdentitySetPrx? {
        return try read() as IdentitySetPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `IdentitySetPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `IdentitySetPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: IdentitySetPrx.Protocol) throws -> IdentitySetPrx? {
        return try read(tag: tag) as IdentitySetPrxI?
    }
}

/// An object for managing the set of object identity constraints on a Session.
///
/// IdentitySetPrx Methods:
///
///  - add: Add a sequence of Ice identities to this set of constraints.
///
///  - addAsync: Add a sequence of Ice identities to this set of constraints.
///
///  - remove: Remove a sequence of identities from this set of constraints.
///
///  - removeAsync: Remove a sequence of identities from this set of constraints.
///
///  - `get`: Returns a sequence of identities describing the constraints in this set.
///
///  - getAsync: Returns a sequence of identities describing the constraints in this set.
public extension IdentitySetPrx {
    /// Add a sequence of Ice identities to this set of constraints. Order is not preserved and duplicates are
    /// implicitly removed.
    ///
    /// - parameter _: `Ice.IdentitySeq` The sequence of Ice identities to be added.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func add(_ iceP_additions: Ice.IdentitySeq, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "add",
                                       mode: .Idempotent,
                                       write: { ostr in
                                           Ice.IdentitySeqHelper.write(to: ostr, value: iceP_additions)
                                       },
                                       context: context)
    }

    /// Remove a sequence of identities from this set of constraints. No errors are returned if an entry is not
    /// found.
    ///
    /// - parameter _: `Ice.IdentitySeq` The sequence of Ice identities to be removed.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func remove(_ iceP_deletions: Ice.IdentitySeq, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "remove",
                                       mode: .Idempotent,
                                       write: { ostr in
                                           Ice.IdentitySeqHelper.write(to: ostr, value: iceP_deletions)
                                       },
                                       context: context)
    }

    /// Returns a sequence of identities describing the constraints in this set.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Ice.IdentitySeq` - The sequence of Ice identities for this set.
    func `get`(context: Ice.Context? = nil) async throws -> Ice.IdentitySeq {
        return try await _impl._invoke(operation: "get",
                                       mode: .Idempotent,
                                       read: { istr in
                                           let iceP_returnValue: Ice.IdentitySeq = try Ice.IdentitySeqHelper.read(from: istr)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}

/// An administrative session control object, which is tied to the lifecycle of a Session.
///
/// SessionControlPrx Methods:
///
///  - categories: Access the object that manages the allowable categories for object identities for this session.
///
///  - categoriesAsync: Access the object that manages the allowable categories for object identities for this session.
///
///  - adapterIds: Access the object that manages the allowable adapter identities for objects for this session.
///
///  - adapterIdsAsync: Access the object that manages the allowable adapter identities for objects for this session.
///
///  - identities: Access the object that manages the allowable object identities for this session.
///
///  - identitiesAsync: Access the object that manages the allowable object identities for this session.
///
///  - getSessionTimeout: Get the session timeout.
///
///  - getSessionTimeoutAsync: Get the session timeout.
///
///  - destroy: Destroy the associated session.
///
///  - destroyAsync: Destroy the associated session.
public protocol SessionControlPrx: Ice.ObjectPrx {}

private final class SessionControlPrxI: Ice.ObjectPrxI, SessionControlPrx {
    public override class func ice_staticId() -> Swift.String {
        return SessionControlTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: SessionControlPrx.Protocol) throws -> SessionControlPrx {
    try communicator.makeProxyImpl(proxyString) as SessionControlPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `SessionControlPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `SessionControlPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: SessionControlPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> SessionControlPrx? {
    return try await SessionControlPrxI.checkedCast(prx: prx, facet: facet, context: context) as SessionControlPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `SessionControlPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `SessionControlPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: SessionControlPrx.Protocol, facet: Swift.String? = nil) -> SessionControlPrx {
    return SessionControlPrxI.uncheckedCast(prx: prx, facet: facet) as SessionControlPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `SessionControlPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: SessionControlPrx.Protocol) -> Swift.String {
    return SessionControlTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `SessionControlPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `SessionControlPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SessionControlPrx?` - The extracted proxy
    func read(_ type: SessionControlPrx.Protocol) throws -> SessionControlPrx? {
        return try read() as SessionControlPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `SessionControlPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SessionControlPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: SessionControlPrx.Protocol) throws -> SessionControlPrx? {
        return try read(tag: tag) as SessionControlPrxI?
    }
}

/// An administrative session control object, which is tied to the lifecycle of a Session.
///
/// SessionControlPrx Methods:
///
///  - categories: Access the object that manages the allowable categories for object identities for this session.
///
///  - categoriesAsync: Access the object that manages the allowable categories for object identities for this session.
///
///  - adapterIds: Access the object that manages the allowable adapter identities for objects for this session.
///
///  - adapterIdsAsync: Access the object that manages the allowable adapter identities for objects for this session.
///
///  - identities: Access the object that manages the allowable object identities for this session.
///
///  - identitiesAsync: Access the object that manages the allowable object identities for this session.
///
///  - getSessionTimeout: Get the session timeout.
///
///  - getSessionTimeoutAsync: Get the session timeout.
///
///  - destroy: Destroy the associated session.
///
///  - destroyAsync: Destroy the associated session.
public extension SessionControlPrx {
    /// Access the object that manages the allowable categories for object identities for this session.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `StringSetPrx?` - A StringSet object. The returned proxy is never null.
    func categories(context: Ice.Context? = nil) async throws -> StringSetPrx? {
        return try await _impl._invoke(operation: "categories",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: StringSetPrx? = try istr.read(StringSetPrx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    /// Access the object that manages the allowable adapter identities for objects for this session.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `StringSetPrx?` - A StringSet object. The returned proxy is never null.
    func adapterIds(context: Ice.Context? = nil) async throws -> StringSetPrx? {
        return try await _impl._invoke(operation: "adapterIds",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: StringSetPrx? = try istr.read(StringSetPrx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    /// Access the object that manages the allowable object identities for this session.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `IdentitySetPrx?` - An IdentitySet object. The returned proxy is never null.
    func identities(context: Ice.Context? = nil) async throws -> IdentitySetPrx? {
        return try await _impl._invoke(operation: "identities",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: IdentitySetPrx? = try istr.read(IdentitySetPrx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    /// Get the session timeout.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32` - The timeout.
    func getSessionTimeout(context: Ice.Context? = nil) async throws -> Swift.Int32 {
        return try await _impl._invoke(operation: "getSessionTimeout",
                                       mode: .Idempotent,
                                       read: { istr in
                                           let iceP_returnValue: Swift.Int32 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    /// Destroy the associated session.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func destroy(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "destroy",
                                       mode: .Normal,
                                       context: context)
    }
}

/// The session manager for username/password authenticated users that is responsible for managing Session
/// objects. New session objects are created by the Router object calling on an application-provided
/// session manager. If no session manager is provided by the application, no client-visible sessions are passed to
/// the client.
///
/// SessionManagerPrx Methods:
///
///  - create: Create a new session.
///
///  - createAsync: Create a new session.
public protocol SessionManagerPrx: Ice.ObjectPrx {}

private final class SessionManagerPrxI: Ice.ObjectPrxI, SessionManagerPrx {
    public override class func ice_staticId() -> Swift.String {
        return SessionManagerTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: SessionManagerPrx.Protocol) throws -> SessionManagerPrx {
    try communicator.makeProxyImpl(proxyString) as SessionManagerPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `SessionManagerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `SessionManagerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: SessionManagerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> SessionManagerPrx? {
    return try await SessionManagerPrxI.checkedCast(prx: prx, facet: facet, context: context) as SessionManagerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `SessionManagerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `SessionManagerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: SessionManagerPrx.Protocol, facet: Swift.String? = nil) -> SessionManagerPrx {
    return SessionManagerPrxI.uncheckedCast(prx: prx, facet: facet) as SessionManagerPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `SessionManagerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: SessionManagerPrx.Protocol) -> Swift.String {
    return SessionManagerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `SessionManagerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `SessionManagerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SessionManagerPrx?` - The extracted proxy
    func read(_ type: SessionManagerPrx.Protocol) throws -> SessionManagerPrx? {
        return try read() as SessionManagerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `SessionManagerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SessionManagerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: SessionManagerPrx.Protocol) throws -> SessionManagerPrx? {
        return try read(tag: tag) as SessionManagerPrxI?
    }
}

/// The session manager for username/password authenticated users that is responsible for managing Session
/// objects. New session objects are created by the Router object calling on an application-provided
/// session manager. If no session manager is provided by the application, no client-visible sessions are passed to
/// the client.
///
/// SessionManagerPrx Methods:
///
///  - create: Create a new session.
///
///  - createAsync: Create a new session.
public extension SessionManagerPrx {
    /// Create a new session. The implementation must return a non-null proxy or raise
    /// CannotCreateSessionException if the session cannot be created.
    ///
    /// - parameter userId: `Swift.String` The user id for the session.
    ///
    /// - parameter control: `SessionControlPrx?` A proxy to the session control object. The control proxy is null if Glacier2.Server.Endpoints
    /// are not configured.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `SessionPrx?` - A proxy to the newly created session.
    ///
    /// - throws:
    ///
    ///   - CannotCreateSessionException - Raised if the session cannot be created.
    func create(userId iceP_userId: Swift.String, control iceP_control: SessionControlPrx?, context: Ice.Context? = nil) async throws -> SessionPrx? {
        return try await _impl._invoke(operation: "create",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_userId)
                                           ostr.write(iceP_control)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: SessionPrx? = try istr.read(SessionPrx.self)
                                           return iceP_returnValue
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as CannotCreateSessionException {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }
}

/// The session manager for SSL authenticated users that is responsible for managing Session objects. New
/// session objects are created by the Router object calling on an application-provided session manager. If
/// no session manager is provided by the application, no client-visible sessions are passed to the client.
///
/// SSLSessionManagerPrx Methods:
///
///  - create: Create a new session.
///
///  - createAsync: Create a new session.
public protocol SSLSessionManagerPrx: Ice.ObjectPrx {}

private final class SSLSessionManagerPrxI: Ice.ObjectPrxI, SSLSessionManagerPrx {
    public override class func ice_staticId() -> Swift.String {
        return SSLSessionManagerTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: SSLSessionManagerPrx.Protocol) throws -> SSLSessionManagerPrx {
    try communicator.makeProxyImpl(proxyString) as SSLSessionManagerPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `SSLSessionManagerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `SSLSessionManagerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: SSLSessionManagerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> SSLSessionManagerPrx? {
    return try await SSLSessionManagerPrxI.checkedCast(prx: prx, facet: facet, context: context) as SSLSessionManagerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `SSLSessionManagerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `SSLSessionManagerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: SSLSessionManagerPrx.Protocol, facet: Swift.String? = nil) -> SSLSessionManagerPrx {
    return SSLSessionManagerPrxI.uncheckedCast(prx: prx, facet: facet) as SSLSessionManagerPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `SSLSessionManagerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: SSLSessionManagerPrx.Protocol) -> Swift.String {
    return SSLSessionManagerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `SSLSessionManagerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `SSLSessionManagerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SSLSessionManagerPrx?` - The extracted proxy
    func read(_ type: SSLSessionManagerPrx.Protocol) throws -> SSLSessionManagerPrx? {
        return try read() as SSLSessionManagerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `SSLSessionManagerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SSLSessionManagerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: SSLSessionManagerPrx.Protocol) throws -> SSLSessionManagerPrx? {
        return try read(tag: tag) as SSLSessionManagerPrxI?
    }
}

/// The session manager for SSL authenticated users that is responsible for managing Session objects. New
/// session objects are created by the Router object calling on an application-provided session manager. If
/// no session manager is provided by the application, no client-visible sessions are passed to the client.
///
/// SSLSessionManagerPrx Methods:
///
///  - create: Create a new session.
///
///  - createAsync: Create a new session.
public extension SSLSessionManagerPrx {
    /// Create a new session.
    ///
    /// - parameter info: `SSLInfo` The SSL info.
    ///
    /// - parameter control: `SessionControlPrx?` A proxy to the session control object.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `SessionPrx?` - A proxy to the newly created session.
    ///
    /// - throws:
    ///
    ///   - CannotCreateSessionException - Raised if the session cannot be created.
    func create(info iceP_info: SSLInfo, control iceP_control: SessionControlPrx?, context: Ice.Context? = nil) async throws -> SessionPrx? {
        return try await _impl._invoke(operation: "create",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_info)
                                           ostr.write(iceP_control)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: SessionPrx? = try istr.read(SessionPrx.self)
                                           return iceP_returnValue
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as CannotCreateSessionException {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }
}


/// Dispatcher for `Session` servants.
public struct SessionDisp: Ice.Dispatcher {
    public let servant: Session
    private static let defaultObject = Ice.ObjectI<SessionTraits>()

    public init(_ servant: Session) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "destroy":
            try await servant._iceD_destroy(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? SessionDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? SessionDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? SessionDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? SessionDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// A client-visible session object, which is tied to the lifecycle of a Router.
public protocol Session {
    /// Destroy the session. This is called automatically when the router is destroyed.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func destroy(current: Ice.Current) async throws
}


/// Dispatcher for `StringSet` servants.
public struct StringSetDisp: Ice.Dispatcher {
    public let servant: StringSet
    private static let defaultObject = Ice.ObjectI<StringSetTraits>()

    public init(_ servant: StringSet) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "add":
            try await servant._iceD_add(request)
        case "get":
            try await servant._iceD_get(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? StringSetDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? StringSetDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? StringSetDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? StringSetDisp.defaultObject)._iceD_ice_ping(request)
        case "remove":
            try await servant._iceD_remove(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// An object for managing the set of identity constraints for specific parts of object identity on a
/// Session.
public protocol StringSet {
    /// Add a sequence of strings to this set of constraints. Order is not preserved and duplicates are implicitly
    /// removed.
    ///
    /// - parameter additions: `Ice.StringSeq` The sequence of strings to be added.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func add(additions: Ice.StringSeq, current: Ice.Current) async throws

    /// Remove a sequence of strings from this set of constraints. No errors are returned if an entry is not found.
    ///
    /// - parameter deletions: `Ice.StringSeq` The sequence of strings to be removed.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func remove(deletions: Ice.StringSeq, current: Ice.Current) async throws

    /// Returns a sequence of strings describing the constraints in this set.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Ice.StringSeq` - The sequence of strings for this set.
    func `get`(current: Ice.Current) async throws -> Ice.StringSeq
}


/// Dispatcher for `IdentitySet` servants.
public struct IdentitySetDisp: Ice.Dispatcher {
    public let servant: IdentitySet
    private static let defaultObject = Ice.ObjectI<IdentitySetTraits>()

    public init(_ servant: IdentitySet) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "add":
            try await servant._iceD_add(request)
        case "get":
            try await servant._iceD_get(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? IdentitySetDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? IdentitySetDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? IdentitySetDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? IdentitySetDisp.defaultObject)._iceD_ice_ping(request)
        case "remove":
            try await servant._iceD_remove(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// An object for managing the set of object identity constraints on a Session.
public protocol IdentitySet {
    /// Add a sequence of Ice identities to this set of constraints. Order is not preserved and duplicates are
    /// implicitly removed.
    ///
    /// - parameter additions: `Ice.IdentitySeq` The sequence of Ice identities to be added.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func add(additions: Ice.IdentitySeq, current: Ice.Current) async throws

    /// Remove a sequence of identities from this set of constraints. No errors are returned if an entry is not
    /// found.
    ///
    /// - parameter deletions: `Ice.IdentitySeq` The sequence of Ice identities to be removed.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func remove(deletions: Ice.IdentitySeq, current: Ice.Current) async throws

    /// Returns a sequence of identities describing the constraints in this set.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Ice.IdentitySeq` - The sequence of Ice identities for this set.
    func `get`(current: Ice.Current) async throws -> Ice.IdentitySeq
}


/// Dispatcher for `SessionControl` servants.
public struct SessionControlDisp: Ice.Dispatcher {
    public let servant: SessionControl
    private static let defaultObject = Ice.ObjectI<SessionControlTraits>()

    public init(_ servant: SessionControl) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "adapterIds":
            try await servant._iceD_adapterIds(request)
        case "categories":
            try await servant._iceD_categories(request)
        case "destroy":
            try await servant._iceD_destroy(request)
        case "getSessionTimeout":
            try await servant._iceD_getSessionTimeout(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? SessionControlDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? SessionControlDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? SessionControlDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? SessionControlDisp.defaultObject)._iceD_ice_ping(request)
        case "identities":
            try await servant._iceD_identities(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// An administrative session control object, which is tied to the lifecycle of a Session.
public protocol SessionControl {
    /// Access the object that manages the allowable categories for object identities for this session.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `StringSetPrx?` - A StringSet object. The returned proxy is never null.
    func categories(current: Ice.Current) async throws -> StringSetPrx?

    /// Access the object that manages the allowable adapter identities for objects for this session.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `StringSetPrx?` - A StringSet object. The returned proxy is never null.
    func adapterIds(current: Ice.Current) async throws -> StringSetPrx?

    /// Access the object that manages the allowable object identities for this session.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `IdentitySetPrx?` - An IdentitySet object. The returned proxy is never null.
    func identities(current: Ice.Current) async throws -> IdentitySetPrx?

    /// Get the session timeout.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32` - The timeout.
    func getSessionTimeout(current: Ice.Current) async throws -> Swift.Int32

    /// Destroy the associated session.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func destroy(current: Ice.Current) async throws
}


/// Dispatcher for `SessionManager` servants.
public struct SessionManagerDisp: Ice.Dispatcher {
    public let servant: SessionManager
    private static let defaultObject = Ice.ObjectI<SessionManagerTraits>()

    public init(_ servant: SessionManager) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "create":
            try await servant._iceD_create(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? SessionManagerDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? SessionManagerDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? SessionManagerDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? SessionManagerDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// The session manager for username/password authenticated users that is responsible for managing Session
/// objects. New session objects are created by the Router object calling on an application-provided
/// session manager. If no session manager is provided by the application, no client-visible sessions are passed to
/// the client.
public protocol SessionManager {
    /// Create a new session. The implementation must return a non-null proxy or raise
    /// CannotCreateSessionException if the session cannot be created.
    ///
    /// - parameter userId: `Swift.String` The user id for the session.
    ///
    /// - parameter control: `SessionControlPrx?` A proxy to the session control object. The control proxy is null if Glacier2.Server.Endpoints
    /// are not configured.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `SessionPrx?` - A proxy to the newly created session.
    ///
    /// - throws:
    ///
    ///   - CannotCreateSessionException - Raised if the session cannot be created.
    func create(userId: Swift.String, control: SessionControlPrx?, current: Ice.Current) async throws -> SessionPrx?
}


/// Dispatcher for `SSLSessionManager` servants.
public struct SSLSessionManagerDisp: Ice.Dispatcher {
    public let servant: SSLSessionManager
    private static let defaultObject = Ice.ObjectI<SSLSessionManagerTraits>()

    public init(_ servant: SSLSessionManager) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "create":
            try await servant._iceD_create(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? SSLSessionManagerDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? SSLSessionManagerDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? SSLSessionManagerDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? SSLSessionManagerDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// The session manager for SSL authenticated users that is responsible for managing Session objects. New
/// session objects are created by the Router object calling on an application-provided session manager. If
/// no session manager is provided by the application, no client-visible sessions are passed to the client.
public protocol SSLSessionManager {
    /// Create a new session.
    ///
    /// - parameter info: `SSLInfo` The SSL info.
    ///
    /// - parameter control: `SessionControlPrx?` A proxy to the session control object.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `SessionPrx?` - A proxy to the newly created session.
    ///
    /// - throws:
    ///
    ///   - CannotCreateSessionException - Raised if the session cannot be created.
    func create(info: SSLInfo, control: SessionControlPrx?, current: Ice.Current) async throws -> SessionPrx?
}

/// A client-visible session object, which is tied to the lifecycle of a Router.
///
/// Session Methods:
///
///  - destroy: Destroy the session.
extension Session {
    public func _iceD_destroy(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.destroy(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// An object for managing the set of identity constraints for specific parts of object identity on a
/// Session.
///
/// StringSet Methods:
///
///  - add: Add a sequence of strings to this set of constraints.
///
///  - remove: Remove a sequence of strings from this set of constraints.
///
///  - `get`: Returns a sequence of strings describing the constraints in this set.
extension StringSet {
    public func _iceD_add(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_additions: Ice.StringSeq = try istr.read()
        try await self.add(additions: iceP_additions, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_remove(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_deletions: Ice.StringSeq = try istr.read()
        try await self.remove(deletions: iceP_deletions, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_get(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.`get`(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}

/// An object for managing the set of object identity constraints on a Session.
///
/// IdentitySet Methods:
///
///  - add: Add a sequence of Ice identities to this set of constraints.
///
///  - remove: Remove a sequence of identities from this set of constraints.
///
///  - `get`: Returns a sequence of identities describing the constraints in this set.
extension IdentitySet {
    public func _iceD_add(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_additions: Ice.IdentitySeq = try Ice.IdentitySeqHelper.read(from: istr)
        try await self.add(additions: iceP_additions, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_remove(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_deletions: Ice.IdentitySeq = try Ice.IdentitySeqHelper.read(from: istr)
        try await self.remove(deletions: iceP_deletions, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_get(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.`get`(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            Ice.IdentitySeqHelper.write(to: ostr, value: iceP_returnValue)
        }
    }
}

/// An administrative session control object, which is tied to the lifecycle of a Session.
///
/// SessionControl Methods:
///
///  - categories: Access the object that manages the allowable categories for object identities for this session.
///
///  - adapterIds: Access the object that manages the allowable adapter identities for objects for this session.
///
///  - identities: Access the object that manages the allowable object identities for this session.
///
///  - getSessionTimeout: Get the session timeout.
///
///  - destroy: Destroy the associated session.
extension SessionControl {
    public func _iceD_categories(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.categories(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_adapterIds(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.adapterIds(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_identities(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.identities(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_getSessionTimeout(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getSessionTimeout(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_destroy(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.destroy(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// The session manager for username/password authenticated users that is responsible for managing Session
/// objects. New session objects are created by the Router object calling on an application-provided
/// session manager. If no session manager is provided by the application, no client-visible sessions are passed to
/// the client.
///
/// SessionManager Methods:
///
///  - create: Create a new session.
extension SessionManager {
    public func _iceD_create(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_userId: Swift.String = try istr.read()
        let iceP_control: SessionControlPrx? = try istr.read(SessionControlPrx.self)
        let result = try await self.create(userId: iceP_userId, control: iceP_control, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}

/// The session manager for SSL authenticated users that is responsible for managing Session objects. New
/// session objects are created by the Router object calling on an application-provided session manager. If
/// no session manager is provided by the application, no client-visible sessions are passed to the client.
///
/// SSLSessionManager Methods:
///
///  - create: Create a new session.
extension SSLSessionManager {
    public func _iceD_create(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_info: SSLInfo = try istr.read()
        let iceP_control: SessionControlPrx? = try istr.read(SessionControlPrx.self)
        let result = try await self.create(info: iceP_info, control: iceP_control, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}
