//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Sample.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// The sample event matches the operation used by the DataWriter to update the data element. It also provides
/// information on what to expect from the sample. A sample with the Add or Update event always provide a value
/// while a sample with the Remove type doesn't.
public enum SampleEvent: Swift.UInt8 {
    /// Add The element has been added.
    case Add = 0
    /// Update The element has been updated.
    case Update = 1
    /// PartialUpdate The element has been partially updated.
    case PartialUpdate = 2
    /// Remove The element has been removed.
    case Remove = 3
    public init() {
        self = .Add
    }
}

/// An `Ice.InputStream` extension to read `SampleEvent` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `SampleEvent` - The enumarated value.
    func read() throws -> SampleEvent {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 3)
        guard let val = SampleEvent(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SampleEvent` - The enumerated value.
    func read(tag: Swift.Int32) throws -> SampleEvent? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as SampleEvent
    }
}

/// An `Ice.OutputStream` extension to write `SampleEvent` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `SampleEvent` - The enumerator to write.
    func write(_ v: SampleEvent) {
        write(enum: v.rawValue, maxValue: 3)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `SampleEvent` - The enumerator to write.
    func write(tag: Swift.Int32, value: SampleEvent?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 3)
    }
}

/// A sequence of sample event.
public typealias SampleEventSeq = [SampleEvent]

/// Helper class to read and write `SampleEventSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SampleEventSeqHelper {
    /// Read a `SampleEventSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `SampleEventSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SampleEventSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = SampleEventSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: SampleEvent = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `SampleEventSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SampleEventSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SampleEventSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `SampleEventSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `SampleEventSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SampleEventSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `SampleEventSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SampleEventSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: SampleEventSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}
