//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceLocatorDiscovery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice interface`LookupReply`.
public struct LookupReplyTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceLocatorDiscovery::LookupReply"]
    public static let staticId = "::IceLocatorDiscovery::LookupReply"
}

/// Traits for Slice interface`Lookup`.
public struct LookupTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceLocatorDiscovery::Lookup"]
    public static let staticId = "::IceLocatorDiscovery::Lookup"
}

/// The Ice lookup reply interface must be implemented by clients which are searching for Ice locators. Ice locator
/// implementations invoke on this interface to provide their locator proxy.
///
/// LookupReplyPrx Methods:
///
///  - foundLocator: This method is called by the implementation of the Lookup interface to reply to a findLocator request.
///
///  - foundLocatorAsync: This method is called by the implementation of the Lookup interface to reply to a findLocator request.
public protocol LookupReplyPrx: Ice.ObjectPrx {}

private final class LookupReplyPrxI: Ice.ObjectPrxI, LookupReplyPrx {
    public override class func ice_staticId() -> Swift.String {
        return LookupReplyTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `LookupReplyPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `LookupReplyPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: LookupReplyPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> LookupReplyPrx? {
    return try LookupReplyPrxI.checkedCast(prx: prx, facet: facet, context: context) as LookupReplyPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `LookupReplyPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `LookupReplyPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: LookupReplyPrx.Protocol, facet: Swift.String? = nil) -> LookupReplyPrx {
    return LookupReplyPrxI.uncheckedCast(prx: prx, facet: facet) as LookupReplyPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `LookupReplyPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: LookupReplyPrx.Protocol) -> Swift.String {
    return LookupReplyTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `LookupReplyPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `LookupReplyPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `LookupReplyPrx?` - The extracted proxy
    func read(_ type: LookupReplyPrx.Protocol) throws -> LookupReplyPrx? {
        return try read() as LookupReplyPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `LookupReplyPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `LookupReplyPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: LookupReplyPrx.Protocol) throws -> LookupReplyPrx? {
        return try read(tag: tag) as LookupReplyPrxI?
    }
}

/// The Ice lookup reply interface must be implemented by clients which are searching for Ice locators. Ice locator
/// implementations invoke on this interface to provide their locator proxy.
///
/// LookupReplyPrx Methods:
///
///  - foundLocator: This method is called by the implementation of the Lookup interface to reply to a findLocator request.
///
///  - foundLocatorAsync: This method is called by the implementation of the Lookup interface to reply to a findLocator request.
public extension LookupReplyPrx {
    /// This method is called by the implementation of the Lookup interface to reply to a findLocator request.
    ///
    /// - parameter _: `Ice.LocatorPrx?` The proxy of the locator.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func foundLocator(_ iceP_prx: Ice.LocatorPrx?, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "foundLocator",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_prx)
                          },
                          context: context)
    }

    /// This method is called by the implementation of the Lookup interface to reply to a findLocator request.
    ///
    /// - parameter _: `Ice.LocatorPrx?` The proxy of the locator.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func foundLocatorAsync(_ iceP_prx: Ice.LocatorPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "foundLocator",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_prx)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// The Ice lookup interface is implemented by Ice locator implementations and can be used by clients to find
/// available Ice locators on the network.
/// Ice locator implementations provide a well-known `Ice/LocatorLookup' object accessible through UDP multicast.
/// Clients typically make a multicast findLocator request to find the locator proxy.
///
/// LookupPrx Methods:
///
///  - findLocator: Find a locator proxy with the given instance name.
///
///  - findLocatorAsync: Find a locator proxy with the given instance name.
public protocol LookupPrx: Ice.ObjectPrx {}

private final class LookupPrxI: Ice.ObjectPrxI, LookupPrx {
    public override class func ice_staticId() -> Swift.String {
        return LookupTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `LookupPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `LookupPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: LookupPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> LookupPrx? {
    return try LookupPrxI.checkedCast(prx: prx, facet: facet, context: context) as LookupPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `LookupPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `LookupPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: LookupPrx.Protocol, facet: Swift.String? = nil) -> LookupPrx {
    return LookupPrxI.uncheckedCast(prx: prx, facet: facet) as LookupPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `LookupPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: LookupPrx.Protocol) -> Swift.String {
    return LookupTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `LookupPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `LookupPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `LookupPrx?` - The extracted proxy
    func read(_ type: LookupPrx.Protocol) throws -> LookupPrx? {
        return try read() as LookupPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `LookupPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `LookupPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: LookupPrx.Protocol) throws -> LookupPrx? {
        return try read(tag: tag) as LookupPrxI?
    }
}

/// The Ice lookup interface is implemented by Ice locator implementations and can be used by clients to find
/// available Ice locators on the network.
/// Ice locator implementations provide a well-known `Ice/LocatorLookup' object accessible through UDP multicast.
/// Clients typically make a multicast findLocator request to find the locator proxy.
///
/// LookupPrx Methods:
///
///  - findLocator: Find a locator proxy with the given instance name.
///
///  - findLocatorAsync: Find a locator proxy with the given instance name.
public extension LookupPrx {
    /// Find a locator proxy with the given instance name.
    ///
    /// - parameter instanceName: `Swift.String` Restrict the search to Ice registries configured with the given instance name. If
    /// empty, all the available registries will reply.
    ///
    /// - parameter reply: `LookupReplyPrx?` The reply object to use to send the reply.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func findLocator(instanceName iceP_instanceName: Swift.String, reply iceP_reply: LookupReplyPrx?, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "findLocator",
                          mode: .Idempotent,
                          write: { ostr in
                              ostr.write(iceP_instanceName)
                              ostr.write(iceP_reply)
                          },
                          context: context)
    }

    /// Find a locator proxy with the given instance name.
    ///
    /// - parameter instanceName: `Swift.String` Restrict the search to Ice registries configured with the given instance name. If
    /// empty, all the available registries will reply.
    ///
    /// - parameter reply: `LookupReplyPrx?` The reply object to use to send the reply.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func findLocatorAsync(instanceName iceP_instanceName: Swift.String, reply iceP_reply: LookupReplyPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "findLocator",
                                  mode: .Idempotent,
                                  write: { ostr in
                                      ostr.write(iceP_instanceName)
                                      ostr.write(iceP_reply)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `LookupReply` servants.
public struct LookupReplyDisp: Ice.Disp {
    public let servant: LookupReply
    private static let defaultObject = Ice.ObjectI<LookupReplyTraits>()

    public init(_ servant: LookupReply) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "foundLocator":
            return try servant._iceD_foundLocator(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? LookupReplyDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? LookupReplyDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? LookupReplyDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? LookupReplyDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

/// The Ice lookup reply interface must be implemented by clients which are searching for Ice locators. Ice locator
/// implementations invoke on this interface to provide their locator proxy.
public protocol LookupReply {
    /// This method is called by the implementation of the Lookup interface to reply to a findLocator request.
    ///
    /// - parameter prx: `Ice.LocatorPrx?` The proxy of the locator.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func foundLocator(prx: Ice.LocatorPrx?, current: Ice.Current) throws
}


/// Dispatcher for `Lookup` servants.
public struct LookupDisp: Ice.Disp {
    public let servant: Lookup
    private static let defaultObject = Ice.ObjectI<LookupTraits>()

    public init(_ servant: Lookup) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "findLocator":
            return try servant._iceD_findLocator(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? LookupDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? LookupDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? LookupDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? LookupDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

/// The Ice lookup interface is implemented by Ice locator implementations and can be used by clients to find
/// available Ice locators on the network.
/// Ice locator implementations provide a well-known `Ice/LocatorLookup' object accessible through UDP multicast.
/// Clients typically make a multicast findLocator request to find the locator proxy.
public protocol Lookup {
    /// Find a locator proxy with the given instance name.
    ///
    /// - parameter instanceName: `Swift.String` Restrict the search to Ice registries configured with the given instance name. If
    /// empty, all the available registries will reply.
    ///
    /// - parameter reply: `LookupReplyPrx?` The reply object to use to send the reply.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func findLocator(instanceName: Swift.String, reply: LookupReplyPrx?, current: Ice.Current) throws
}

/// The Ice lookup reply interface must be implemented by clients which are searching for Ice locators. Ice locator
/// implementations invoke on this interface to provide their locator proxy.
///
/// LookupReply Methods:
///
///  - foundLocator: This method is called by the implementation of the Lookup interface to reply to a findLocator request.
public extension LookupReply {
    func _iceD_foundLocator(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_prx: Ice.LocatorPrx? = try inS.read { istr in
            let iceP_prx: Ice.LocatorPrx? = try istr.read(Ice.LocatorPrx.self)
            return iceP_prx
        }

        try self.foundLocator(prx: iceP_prx, current: current)

        return inS.setResult()
    }
}

/// The Ice lookup interface is implemented by Ice locator implementations and can be used by clients to find
/// available Ice locators on the network.
/// Ice locator implementations provide a well-known `Ice/LocatorLookup' object accessible through UDP multicast.
/// Clients typically make a multicast findLocator request to find the locator proxy.
///
/// Lookup Methods:
///
///  - findLocator: Find a locator proxy with the given instance name.
public extension Lookup {
    func _iceD_findLocator(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_instanceName, iceP_reply): (Swift.String, LookupReplyPrx?) = try inS.read { istr in
            let iceP_instanceName: Swift.String = try istr.read()
            let iceP_reply: LookupReplyPrx? = try istr.read(LookupReplyPrx.self)
            return (iceP_instanceName, iceP_reply)
        }

        try self.findLocator(instanceName: iceP_instanceName, reply: iceP_reply, current: current)

        return inS.setResult()
    }
}
