//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// This exception is a general failure notification. It is thrown for errors such as a service encountering an error
/// during initialization, or the service manager being unable to load a service executable.
open class FailureException: Ice.LocalException {
    /// The reason for the failure.
    public var reason: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(reason: Swift.String, file: Swift.String = #file, line: Swift.Int = #line) {
        self.reason = reason
        super.init(file: file, line: line)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::IceBox::FailureException"
    }

    /// Returns a string representation of this exception
    ///
    /// - returns: `Swift.String` - The string representaton of this exception.
    open override func ice_print() -> Swift.String {
        return _FailureExceptionDescription
    }
}

/// An application service managed by a ServiceManager.
public protocol Service:  Swift.AnyObject {
    /// Start the service. The given communicator is created by the ServiceManager for use by the service. This
    /// communicator may also be used by other services, depending on the service configuration.
    /// The ServiceManager owns this communicator, and is responsible for destroying it.
    ///
    /// - parameter name: `Swift.String` The service's name, as determined by the configuration.
    ///
    /// - parameter communicator: `Ice.Communicator?` A communicator for use by the service.
    ///
    /// - parameter args: `Ice.StringSeq` The service arguments that were not converted into properties.
    ///
    /// - throws:
    ///
    ///   - FailureException - Raised if start failed.
    func start(name: Swift.String, communicator: Ice.Communicator?, args: Ice.StringSeq) throws

    /// Stop the service.
    func stop() throws
}
