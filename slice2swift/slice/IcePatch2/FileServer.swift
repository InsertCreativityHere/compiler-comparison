//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `FileServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// A sequence of byte sequences. Each element is the checksum for a partition.
public typealias ByteSeqSeq = [Ice.ByteSeq]

/// Helper class to read and write `ByteSeqSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ByteSeqSeqHelper {
    /// Read a `ByteSeqSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ByteSeqSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ByteSeqSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = ByteSeqSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: Ice.ByteSeq = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `ByteSeqSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ByteSeqSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ByteSeqSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ByteSeqSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ByteSeqSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ByteSeqSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ByteSeqSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ByteSeqSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ByteSeqSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// :nodoc:
public class PartitionOutOfRangeException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return PartitionOutOfRangeException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IcePatch2_PartitionOutOfRangeException() -> Ice.UserExceptionTypeResolver {
        return PartitionOutOfRangeException_TypeResolver()
    }
}

/// A partition argument was not in the range 0-255.
open class PartitionOutOfRangeException: Ice.UserException {
    public required init() {}

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::IcePatch2::PartitionOutOfRangeException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: PartitionOutOfRangeException.ice_staticId(), compactId: -1, last: true)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }
}

/// :nodoc:
public class FileAccessException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return FileAccessException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IcePatch2_FileAccessException() -> Ice.UserExceptionTypeResolver {
        return FileAccessException_TypeResolver()
    }
}

/// This exception is raised if a file's contents cannot be read.
open class FileAccessException: Ice.UserException {
    /// An explanation of the reason for the failure.
    public var reason: Swift.String = ""

    public required init() {}

    public init(reason: Swift.String) {
        self.reason = reason
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::IcePatch2::FileAccessException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: FileAccessException.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.reason)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.reason = try istr.read()
        try istr.endSlice()
    }
}

/// :nodoc:
public class FileSizeRangeException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return FileSizeRangeException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IcePatch2_FileSizeRangeException() -> Ice.UserExceptionTypeResolver {
        return FileSizeRangeException_TypeResolver()
    }
}

/// This exception is raised if an operation tries to use a file whose size is larger than 2.1 GB. Use the "large"
/// versions of the operations instead.
open class FileSizeRangeException: FileAccessException {
    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::IcePatch2::FileSizeRangeException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: FileSizeRangeException.ice_staticId(), compactId: -1, last: false)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// Traits for Slice interface `FileServer`.
public struct FileServerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IcePatch2::FileServer"]
    public static let staticId = "::IcePatch2::FileServer"
}

/// The interface that provides access to files.
///
/// FileServerPrx Methods:
///
///  - getFileInfoSeq: Return file information for the specified partition.
///
///  - getFileInfoSeqAsync: Return file information for the specified partition.
///
///  - getLargeFileInfoSeq: Returns file information for the specified partition.
///
///  - getLargeFileInfoSeqAsync: Returns file information for the specified partition.
///
///  - getChecksumSeq: Return the checksums for all partitions.
///
///  - getChecksumSeqAsync: Return the checksums for all partitions.
///
///  - getChecksum: Return the master checksum for all partitions.
///
///  - getChecksumAsync: Return the master checksum for all partitions.
///
///  - getFileCompressed: Read the specified file.
///
///  - getFileCompressedAsync: Read the specified file.
///
///  - getLargeFileCompressed: Read the specified file.
///
///  - getLargeFileCompressedAsync: Read the specified file.
public protocol FileServerPrx: Ice.ObjectPrx {}

private final class FileServerPrxI: Ice.ObjectPrxI, FileServerPrx {
    public override class func ice_staticId() -> Swift.String {
        return FileServerTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `FileServerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `FileServerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: FileServerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> FileServerPrx? {
    return try FileServerPrxI.checkedCast(prx: prx, facet: facet, context: context) as FileServerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `FileServerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `FileServerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: FileServerPrx.Protocol, facet: Swift.String? = nil) -> FileServerPrx {
    return FileServerPrxI.uncheckedCast(prx: prx, facet: facet) as FileServerPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `FileServerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: FileServerPrx.Protocol) -> Swift.String {
    return FileServerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `FileServerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `FileServerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `FileServerPrx?` - The extracted proxy
    func read(_ type: FileServerPrx.Protocol) throws -> FileServerPrx? {
        return try read() as FileServerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `FileServerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `FileServerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: FileServerPrx.Protocol) throws -> FileServerPrx? {
        return try read(tag: tag) as FileServerPrxI?
    }
}

/// The interface that provides access to files.
///
/// FileServerPrx Methods:
///
///  - getFileInfoSeq: Return file information for the specified partition.
///
///  - getFileInfoSeqAsync: Return file information for the specified partition.
///
///  - getLargeFileInfoSeq: Returns file information for the specified partition.
///
///  - getLargeFileInfoSeqAsync: Returns file information for the specified partition.
///
///  - getChecksumSeq: Return the checksums for all partitions.
///
///  - getChecksumSeqAsync: Return the checksums for all partitions.
///
///  - getChecksum: Return the master checksum for all partitions.
///
///  - getChecksumAsync: Return the master checksum for all partitions.
///
///  - getFileCompressed: Read the specified file.
///
///  - getFileCompressedAsync: Read the specified file.
///
///  - getLargeFileCompressed: Read the specified file.
///
///  - getLargeFileCompressedAsync: Read the specified file.
public extension FileServerPrx {
    /// Return file information for the specified partition.  This operation is deprecated and
    /// only present for compatibility with old Ice clients (older than version 3.6).
    ///
    ///  ## Deprecated
    /// getFileInfoSeq() is deprecated, use getLargeFileInfoSeq() instead.
    ///
    /// - parameter _: `Swift.Int32` The partition number in the range 0-255.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `FileInfoSeq` - A sequence containing information about the files in the specified partition.
    ///
    /// - throws:
    ///
    ///   - FileSizeRangeException - If a file is larger than 2.1GB.
    ///
    ///   - PartitionOutOfRangeException - If the partition number is out of range.
    func getFileInfoSeq(_ iceP_partition: Swift.Int32, context: Ice.Context? = nil) throws -> FileInfoSeq {
        return try _impl._invoke(operation: "getFileInfoSeq",
                                 mode: .Nonmutating,
                                 write: { ostr in
                                     ostr.write(iceP_partition)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: FileInfoSeq = try FileInfoSeqHelper.read(from: istr)
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as FileSizeRangeException {
                                         throw error
                                     } catch let error as PartitionOutOfRangeException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    /// Return file information for the specified partition.  This operation is deprecated and
    /// only present for compatibility with old Ice clients (older than version 3.6).
    ///
    ///  ## Deprecated
    /// getFileInfoSeq() is deprecated, use getLargeFileInfoSeq() instead.
    ///
    /// - parameter _: `Swift.Int32` The partition number in the range 0-255.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<FileInfoSeq>` - The result of the operation
    func getFileInfoSeqAsync(_ iceP_partition: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<FileInfoSeq> {
        return _impl._invokeAsync(operation: "getFileInfoSeq",
                                  mode: .Nonmutating,
                                  write: { ostr in
                                      ostr.write(iceP_partition)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: FileInfoSeq = try FileInfoSeqHelper.read(from: istr)
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as FileSizeRangeException {
                                          throw error
                                      } catch let error as PartitionOutOfRangeException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Returns file information for the specified partition.
    ///
    /// - parameter _: `Swift.Int32` The partition number in the range 0-255.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `LargeFileInfoSeq` - A sequence containing information about the files in the specified partition.
    ///
    /// - throws:
    ///
    ///   - PartitionOutOfRangeException - If the partition number is out of range.
    func getLargeFileInfoSeq(_ iceP_partition: Swift.Int32, context: Ice.Context? = nil) throws -> LargeFileInfoSeq {
        return try _impl._invoke(operation: "getLargeFileInfoSeq",
                                 mode: .Nonmutating,
                                 write: { ostr in
                                     ostr.write(iceP_partition)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: LargeFileInfoSeq = try LargeFileInfoSeqHelper.read(from: istr)
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as PartitionOutOfRangeException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    /// Returns file information for the specified partition.
    ///
    /// - parameter _: `Swift.Int32` The partition number in the range 0-255.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<LargeFileInfoSeq>` - The result of the operation
    func getLargeFileInfoSeqAsync(_ iceP_partition: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<LargeFileInfoSeq> {
        return _impl._invokeAsync(operation: "getLargeFileInfoSeq",
                                  mode: .Nonmutating,
                                  write: { ostr in
                                      ostr.write(iceP_partition)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: LargeFileInfoSeq = try LargeFileInfoSeqHelper.read(from: istr)
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as PartitionOutOfRangeException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Return the checksums for all partitions.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `ByteSeqSeq` - A sequence containing 256 checksums. Partitions with a checksum that differs from the previous checksum
    /// for the same partition contain updated files. Partitions with a checksum that is identical to the previous
    /// checksum do not contain updated files.
    func getChecksumSeq(context: Ice.Context? = nil) throws -> ByteSeqSeq {
        return try _impl._invoke(operation: "getChecksumSeq",
                                 mode: .Nonmutating,
                                 read: { istr in
                                     let iceP_returnValue: ByteSeqSeq = try ByteSeqSeqHelper.read(from: istr)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    /// Return the checksums for all partitions.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<ByteSeqSeq>` - The result of the operation
    func getChecksumSeqAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<ByteSeqSeq> {
        return _impl._invokeAsync(operation: "getChecksumSeq",
                                  mode: .Nonmutating,
                                  read: { istr in
                                      let iceP_returnValue: ByteSeqSeq = try ByteSeqSeqHelper.read(from: istr)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Return the master checksum for all partitions. If this checksum is the same as for a previous run, the entire
    /// file set is up-to-date.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Ice.ByteSeq` - The master checksum for the file set.
    func getChecksum(context: Ice.Context? = nil) throws -> Ice.ByteSeq {
        return try _impl._invoke(operation: "getChecksum",
                                 mode: .Nonmutating,
                                 read: { istr in
                                     let iceP_returnValue: Ice.ByteSeq = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    /// Return the master checksum for all partitions. If this checksum is the same as for a previous run, the entire
    /// file set is up-to-date.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Ice.ByteSeq>` - The result of the operation
    func getChecksumAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Ice.ByteSeq> {
        return _impl._invokeAsync(operation: "getChecksum",
                                  mode: .Nonmutating,
                                  read: { istr in
                                      let iceP_returnValue: Ice.ByteSeq = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Read the specified file. This operation may only return fewer bytes than requested in case there was an end-of-file
    /// condition.  This operation is deprecated and only present for compatibility with old Ice
    /// clients (older than version 3.6).
    ///
    ///  ## Deprecated
    /// getFileCompressed() is deprecated, use getLargeFileCompressed() instead.
    ///
    /// - parameter path: `Swift.String` The pathname (relative to the data directory) for the file to be read.
    ///
    /// - parameter pos: `Swift.Int32` The file offset at which to begin reading.
    ///
    /// - parameter num: `Swift.Int32` The number of bytes to be read.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Ice.ByteSeq` - A sequence containing the compressed file contents.
    ///
    /// - throws:
    ///
    ///   - FileAccessException - If an error occurred while trying to read the file.
    ///
    ///   - FileSizeRangeException - If a file is larger than 2.1GB.
    func getFileCompressed(path iceP_path: Swift.String, pos iceP_pos: Swift.Int32, num iceP_num: Swift.Int32, context: Ice.Context? = nil) throws -> Ice.ByteSeq {
        return try _impl._invoke(operation: "getFileCompressed",
                                 mode: .Nonmutating,
                                 write: { ostr in
                                     ostr.write(iceP_path)
                                     ostr.write(iceP_pos)
                                     ostr.write(iceP_num)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Ice.ByteSeq = try istr.read()
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as FileAccessException {
                                         throw error
                                     } catch let error as FileSizeRangeException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    /// Read the specified file. This operation may only return fewer bytes than requested in case there was an end-of-file
    /// condition.  This operation is deprecated and only present for compatibility with old Ice
    /// clients (older than version 3.6).
    ///
    ///  ## Deprecated
    /// getFileCompressed() is deprecated, use getLargeFileCompressed() instead.
    ///
    /// - parameter path: `Swift.String` The pathname (relative to the data directory) for the file to be read.
    ///
    /// - parameter pos: `Swift.Int32` The file offset at which to begin reading.
    ///
    /// - parameter num: `Swift.Int32` The number of bytes to be read.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Ice.ByteSeq>` - The result of the operation
    func getFileCompressedAsync(path iceP_path: Swift.String, pos iceP_pos: Swift.Int32, num iceP_num: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Ice.ByteSeq> {
        return _impl._invokeAsync(operation: "getFileCompressed",
                                  mode: .Nonmutating,
                                  write: { ostr in
                                      ostr.write(iceP_path)
                                      ostr.write(iceP_pos)
                                      ostr.write(iceP_num)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Ice.ByteSeq = try istr.read()
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as FileAccessException {
                                          throw error
                                      } catch let error as FileSizeRangeException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    /// Read the specified file. This operation may only return fewer bytes than requested in case there was an
    /// end-of-file condition.
    ///
    /// - parameter path: `Swift.String` The pathname (relative to the data directory) for the file to be read.
    ///
    /// - parameter pos: `Swift.Int64` The file offset at which to begin reading.
    ///
    /// - parameter num: `Swift.Int32` The number of bytes to be read.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Ice.ByteSeq` - A sequence containing the compressed file contents.
    ///
    /// - throws:
    ///
    ///   - FileAccessException - If an error occurred while trying to read the file.
    func getLargeFileCompressed(path iceP_path: Swift.String, pos iceP_pos: Swift.Int64, num iceP_num: Swift.Int32, context: Ice.Context? = nil) throws -> Ice.ByteSeq {
        return try _impl._invoke(operation: "getLargeFileCompressed",
                                 mode: .Nonmutating,
                                 write: { ostr in
                                     ostr.write(iceP_path)
                                     ostr.write(iceP_pos)
                                     ostr.write(iceP_num)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Ice.ByteSeq = try istr.read()
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as FileAccessException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    /// Read the specified file. This operation may only return fewer bytes than requested in case there was an
    /// end-of-file condition.
    ///
    /// - parameter path: `Swift.String` The pathname (relative to the data directory) for the file to be read.
    ///
    /// - parameter pos: `Swift.Int64` The file offset at which to begin reading.
    ///
    /// - parameter num: `Swift.Int32` The number of bytes to be read.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Ice.ByteSeq>` - The result of the operation
    func getLargeFileCompressedAsync(path iceP_path: Swift.String, pos iceP_pos: Swift.Int64, num iceP_num: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Ice.ByteSeq> {
        return _impl._invokeAsync(operation: "getLargeFileCompressed",
                                  mode: .Nonmutating,
                                  write: { ostr in
                                      ostr.write(iceP_path)
                                      ostr.write(iceP_pos)
                                      ostr.write(iceP_num)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Ice.ByteSeq = try istr.read()
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as FileAccessException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `FileServer` servants.
public struct FileServerDisp: Ice.Disp {
    public let servant: FileServer
    private static let defaultObject = Ice.ObjectI<FileServerTraits>()

    public init(_ servant: FileServer) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "getChecksum":
            return try servant._iceD_getChecksum(incoming: request, current: current)
        case "getChecksumSeq":
            return try servant._iceD_getChecksumSeq(incoming: request, current: current)
        case "getFileCompressed":
            return try servant._iceD_getFileCompressed(incoming: request, current: current)
        case "getFileInfoSeq":
            return try servant._iceD_getFileInfoSeq(incoming: request, current: current)
        case "getLargeFileCompressed":
            return try servant._iceD_getLargeFileCompressed(incoming: request, current: current)
        case "getLargeFileInfoSeq":
            return try servant._iceD_getLargeFileInfoSeq(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? FileServerDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? FileServerDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? FileServerDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? FileServerDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

/// The interface that provides access to files.
public protocol FileServer {
    /// Return file information for the specified partition.  This operation is deprecated and
    /// only present for compatibility with old Ice clients (older than version 3.6).
    ///
    ///  ## Deprecated
    /// getFileInfoSeq() is deprecated, use getLargeFileInfoSeq() instead.
    ///
    /// - parameter partition: `Swift.Int32` The partition number in the range 0-255.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `FileInfoSeq` - A sequence containing information about the files in the specified partition.
    ///
    /// - throws:
    ///
    ///   - FileSizeRangeException - If a file is larger than 2.1GB.
    ///
    ///   - PartitionOutOfRangeException - If the partition number is out of range.
    func getFileInfoSeq(partition: Swift.Int32, current: Ice.Current) throws -> FileInfoSeq

    /// Returns file information for the specified partition.
    ///
    /// - parameter partition: `Swift.Int32` The partition number in the range 0-255.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `LargeFileInfoSeq` - A sequence containing information about the files in the specified partition.
    ///
    /// - throws:
    ///
    ///   - PartitionOutOfRangeException - If the partition number is out of range.
    func getLargeFileInfoSeq(partition: Swift.Int32, current: Ice.Current) throws -> LargeFileInfoSeq

    /// Return the checksums for all partitions.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `ByteSeqSeq` - A sequence containing 256 checksums. Partitions with a checksum that differs from the previous checksum
    /// for the same partition contain updated files. Partitions with a checksum that is identical to the previous
    /// checksum do not contain updated files.
    func getChecksumSeq(current: Ice.Current) throws -> ByteSeqSeq

    /// Return the master checksum for all partitions. If this checksum is the same as for a previous run, the entire
    /// file set is up-to-date.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Ice.ByteSeq` - The master checksum for the file set.
    func getChecksum(current: Ice.Current) throws -> Ice.ByteSeq

    /// Read the specified file. This operation may only return fewer bytes than requested in case there was an end-of-file
    /// condition.  This operation is deprecated and only present for compatibility with old Ice
    /// clients (older than version 3.6).
    ///
    ///  ## Deprecated
    /// getFileCompressed() is deprecated, use getLargeFileCompressed() instead.
    ///
    /// - parameter path: `Swift.String` The pathname (relative to the data directory) for the file to be read.
    ///
    /// - parameter pos: `Swift.Int32` The file offset at which to begin reading.
    ///
    /// - parameter num: `Swift.Int32` The number of bytes to be read.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `PromiseKit.Promise<Ice.ByteSeq>` - The result of the operation
    func getFileCompressedAsync(path: Swift.String, pos: Swift.Int32, num: Swift.Int32, current: Ice.Current) -> PromiseKit.Promise<Ice.ByteSeq>

    /// Read the specified file. This operation may only return fewer bytes than requested in case there was an
    /// end-of-file condition.
    ///
    /// - parameter path: `Swift.String` The pathname (relative to the data directory) for the file to be read.
    ///
    /// - parameter pos: `Swift.Int64` The file offset at which to begin reading.
    ///
    /// - parameter num: `Swift.Int32` The number of bytes to be read.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `PromiseKit.Promise<Ice.ByteSeq>` - The result of the operation
    func getLargeFileCompressedAsync(path: Swift.String, pos: Swift.Int64, num: Swift.Int32, current: Ice.Current) -> PromiseKit.Promise<Ice.ByteSeq>
}

/// The interface that provides access to files.
///
/// FileServer Methods:
///
///  - getFileInfoSeq: Return file information for the specified partition.
///
///  - getLargeFileInfoSeq: Returns file information for the specified partition.
///
///  - getChecksumSeq: Return the checksums for all partitions.
///
///  - getChecksum: Return the master checksum for all partitions.
///
///  - getFileCompressed: Read the specified file.
///
///  - getLargeFileCompressed: Read the specified file.
public extension FileServer {
    func _iceD_getFileInfoSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_partition: Swift.Int32 = try inS.read { istr in
            let iceP_partition: Swift.Int32 = try istr.read()
            return iceP_partition
        }

        let iceP_returnValue = try self.getFileInfoSeq(partition: iceP_partition, current: current)

        return inS.setResult{ ostr in
            FileInfoSeqHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_getLargeFileInfoSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_partition: Swift.Int32 = try inS.read { istr in
            let iceP_partition: Swift.Int32 = try istr.read()
            return iceP_partition
        }

        let iceP_returnValue = try self.getLargeFileInfoSeq(partition: iceP_partition, current: current)

        return inS.setResult{ ostr in
            LargeFileInfoSeqHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_getChecksumSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.getChecksumSeq(current: current)

        return inS.setResult{ ostr in
            ByteSeqSeqHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_getChecksum(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.getChecksum(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_getFileCompressed(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_path, iceP_pos, iceP_num): (Swift.String, Swift.Int32, Swift.Int32) = try inS.read { istr in
            let iceP_path: Swift.String = try istr.read()
            let iceP_pos: Swift.Int32 = try istr.read()
            let iceP_num: Swift.Int32 = try istr.read()
            return (iceP_path, iceP_pos, iceP_num)
        }

        return inS.setResultPromise(getFileCompressedAsync(path: iceP_path, pos: iceP_pos, num: iceP_num, current: current)) { (ostr, retVals) in
            let iceP_returnValue = retVals
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_getLargeFileCompressed(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_path, iceP_pos, iceP_num): (Swift.String, Swift.Int64, Swift.Int32) = try inS.read { istr in
            let iceP_path: Swift.String = try istr.read()
            let iceP_pos: Swift.Int64 = try istr.read()
            let iceP_num: Swift.Int32 = try istr.read()
            return (iceP_path, iceP_pos, iceP_num)
        }

        return inS.setResultPromise(getLargeFileCompressedAsync(path: iceP_path, pos: iceP_pos, num: iceP_num, current: current)) { (ostr, retVals) in
            let iceP_returnValue = retVals
            ostr.write(iceP_returnValue)
        }
    }
}
