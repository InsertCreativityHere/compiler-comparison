//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `UserAccountMapper.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

@_documentation(visibility: internal)
public class UserAccountNotFoundException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return UserAccountNotFoundException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_UserAccountNotFoundException() -> Ice.UserExceptionTypeResolver {
        return UserAccountNotFoundException_TypeResolver()
    }
}

/// This exception is raised if a user account for a given session identifier can't be found.
open class UserAccountNotFoundException: Ice.UserException, @unchecked Sendable {
    /// - Returns: The Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::IceGrid::UserAccountNotFoundException" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: UserAccountNotFoundException.ice_staticId(), compactId: -1, last: true)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }
}

/// Traits for Slice interface `UserAccountMapper`.
public struct UserAccountMapperTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::UserAccountMapper"]
    public static let staticId = "::IceGrid::UserAccountMapper"
}

/// A user account mapper object is used by IceGrid nodes to map session identifiers to user accounts.
///
/// UserAccountMapperPrx Methods:
///  - getUserAccount: Get the name of the user account for the given user.
///  - getUserAccountAsync: Get the name of the user account for the given user.
public protocol UserAccountMapperPrx: Ice.ObjectPrx {}

private final class UserAccountMapperPrxI: Ice.ObjectPrxI, UserAccountMapperPrx {
    public override class func ice_staticId() -> Swift.String {
        return UserAccountMapperTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: UserAccountMapperPrx.Protocol) throws -> UserAccountMapperPrx {
    try communicator.makeProxyImpl(proxyString) as UserAccountMapperPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: UserAccountMapperPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> UserAccountMapperPrx? {
    return try await UserAccountMapperPrxI.checkedCast(prx: prx, facet: facet, context: context) as UserAccountMapperPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: UserAccountMapperPrx.Protocol, facet: Swift.String? = nil) -> UserAccountMapperPrx {
    return UserAccountMapperPrxI.uncheckedCast(prx: prx, facet: facet) as UserAccountMapperPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: UserAccountMapperPrx.Protocol) -> Swift.String {
    return UserAccountMapperTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `UserAccountMapperPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: UserAccountMapperPrx.Protocol) throws -> UserAccountMapperPrx? {
        return try read() as UserAccountMapperPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: UserAccountMapperPrx.Protocol) throws -> UserAccountMapperPrx? {
        return try read(tag: tag) as UserAccountMapperPrxI?
    }
}

/// A user account mapper object is used by IceGrid nodes to map session identifiers to user accounts.
///
/// UserAccountMapperPrx Methods:
///  - getUserAccount: Get the name of the user account for the given user.
///  - getUserAccountAsync: Get the name of the user account for the given user.
public extension UserAccountMapperPrx {
    /// Get the name of the user account for the given user. This is used by IceGrid nodes to figure out the user
    /// account to use to run servers.
    ///
    /// - Parameters:
    ///   - iceP_user: The value of the server descriptor's user attribute. If this attribute is not
    /// defined, and the server's activation mode is session, the default value of user
    /// is the session identifier.
    ///   - context: Optional request context.
    ///
    /// - Returns: The user account name.
    ///
    /// - Throws:
    ///   - UserAccountNotFoundException Raised if no user account is found for the given user.
    func getUserAccount(_ iceP_user: Swift.String, context: Ice.Context? = nil) async throws -> Swift.String {
        return try await _impl._invoke(operation: "getUserAccount",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_user)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: Swift.String = try istr.read()
                                           return iceP_returnValue
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as UserAccountNotFoundException {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }
}


/// Dispatcher for `UserAccountMapper` servants.
public struct UserAccountMapperDisp: Ice.Dispatcher {
    public let servant: UserAccountMapper
    private static let defaultObject = Ice.ObjectI<UserAccountMapperTraits>()

    public init(_ servant: UserAccountMapper) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "getUserAccount":
            try await servant._iceD_getUserAccount(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? UserAccountMapperDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? UserAccountMapperDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? UserAccountMapperDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? UserAccountMapperDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// A user account mapper object is used by IceGrid nodes to map session identifiers to user accounts.
public protocol UserAccountMapper {
    /// Get the name of the user account for the given user. This is used by IceGrid nodes to figure out the user
    /// account to use to run servers.
    ///
    /// - Parameters:
    ///   - user: The value of the server descriptor's user attribute. If this attribute is not
    /// defined, and the server's activation mode is session, the default value of user
    /// is the session identifier.
    ///   - current: The Current object for the dispatch.
    ///
    /// - Returns: The user account name.
    ///
    /// - Throws:
    ///   - UserAccountNotFoundException Raised if no user account is found for the given user.
    func getUserAccount(user: Swift.String, current: Ice.Current) async throws -> Swift.String
}

/// A user account mapper object is used by IceGrid nodes to map session identifiers to user accounts.
///
/// UserAccountMapper Methods:
///  - getUserAccount: Get the name of the user account for the given user.
extension UserAccountMapper {
    public func _iceD_getUserAccount(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_user: Swift.String = try istr.read()
        let result = try await self.getUserAccount(user: iceP_user, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}
