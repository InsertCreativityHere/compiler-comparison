//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `FileParser.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// :nodoc:
public class ParseException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return ParseException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceGrid_ParseException() -> Ice.UserExceptionTypeResolver {
        return ParseException_TypeResolver()
    }
}

/// This exception is raised if an error occurs during parsing.
open class ParseException: Ice.UserException, @unchecked Sendable {
    /// The reason for the failure.
    public var reason: Swift.String = ""

    public required init() {}

    public init(reason: Swift.String) {
        self.reason = reason
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::IceGrid::ParseException" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: ParseException.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.reason)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.reason = try istr.read()
        try istr.endSlice()
    }
}

/// Traits for Slice interface`FileParser`.
public struct FileParserTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceGrid::FileParser"]
    public static let staticId = "::IceGrid::FileParser"
}

/// icegridadmin provides a {@link FileParser} object to transform XML files into
/// {@link ApplicationDescriptor} objects.
///
/// FileParserPrx Methods:
///
///  - parse: Parse a file.
///
///  - parseAsync: Parse a file.
public protocol FileParserPrx: Ice.ObjectPrx {}

private final class FileParserPrxI: Ice.ObjectPrxI, FileParserPrx {
    public override class func ice_staticId() -> Swift.String {
        return FileParserTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: FileParserPrx.Protocol) throws -> FileParserPrx {
    try communicator.makeProxyImpl(proxyString) as FileParserPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `FileParserPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `FileParserPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: FileParserPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> FileParserPrx? {
    return try await FileParserPrxI.checkedCast(prx: prx, facet: facet, context: context) as FileParserPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `FileParserPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `FileParserPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: FileParserPrx.Protocol, facet: Swift.String? = nil) -> FileParserPrx {
    return FileParserPrxI.uncheckedCast(prx: prx, facet: facet) as FileParserPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `FileParserPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: FileParserPrx.Protocol) -> Swift.String {
    return FileParserTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `FileParserPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `FileParserPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `FileParserPrx?` - The extracted proxy
    func read(_ type: FileParserPrx.Protocol) throws -> FileParserPrx? {
        return try read() as FileParserPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `FileParserPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `FileParserPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: FileParserPrx.Protocol) throws -> FileParserPrx? {
        return try read(tag: tag) as FileParserPrxI?
    }
}

/// icegridadmin provides a {@link FileParser} object to transform XML files into
/// {@link ApplicationDescriptor} objects.
///
/// FileParserPrx Methods:
///
///  - parse: Parse a file.
///
///  - parseAsync: Parse a file.
public extension FileParserPrx {
    /// Parse a file.
    ///
    /// - parameter xmlFile: `Swift.String` Full pathname to the file.
    ///
    /// - parameter adminProxy: `AdminPrx?` An Admin proxy, used only to retrieve default templates when needed. May be null.
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `ApplicationDescriptor` - The application descriptor.
    ///
    /// - throws:
    ///
    ///   - ParseException - Raised if an error occurred during parsing.
    func parse(xmlFile iceP_xmlFile: Swift.String, adminProxy iceP_adminProxy: AdminPrx?, context: Ice.Context? = nil) async throws -> ApplicationDescriptor {
        return try await _impl._invoke(operation: "parse",
                                       mode: .Idempotent,
                                       write: { ostr in
                                           ostr.write(iceP_xmlFile)
                                           ostr.write(iceP_adminProxy)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: ApplicationDescriptor = try istr.read()
                                           try istr.readPendingValues()
                                           return iceP_returnValue
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as ParseException {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }
}


/// Dispatcher for `FileParser` servants.
public struct FileParserDisp: Ice.Dispatcher {
    public let servant: FileParser
    private static let defaultObject = Ice.ObjectI<FileParserTraits>()

    public init(_ servant: FileParser) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? FileParserDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? FileParserDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? FileParserDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? FileParserDisp.defaultObject)._iceD_ice_ping(request)
        case "parse":
            try await servant._iceD_parse(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// icegridadmin provides a {@link FileParser} object to transform XML files into
/// {@link ApplicationDescriptor} objects.
public protocol FileParser {
    /// Parse a file.
    ///
    /// - parameter xmlFile: `Swift.String` Full pathname to the file.
    ///
    /// - parameter adminProxy: `AdminPrx?` An Admin proxy, used only to retrieve default templates when needed. May be null.
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `ApplicationDescriptor` - The application descriptor.
    ///
    /// - throws:
    ///
    ///   - ParseException - Raised if an error occurred during parsing.
    func parse(xmlFile: Swift.String, adminProxy: AdminPrx?, current: Ice.Current) async throws -> ApplicationDescriptor
}

/// icegridadmin provides a {@link FileParser} object to transform XML files into
/// {@link ApplicationDescriptor} objects.
///
/// FileParser Methods:
///
///  - parse: Parse a file.
extension FileParser {
    public func _iceD_parse(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_xmlFile: Swift.String = try istr.read()
        let iceP_adminProxy: AdminPrx? = try istr.read(AdminPrx.self)
        let result = try await self.parse(xmlFile: iceP_xmlFile, adminProxy: iceP_adminProxy, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }
}
