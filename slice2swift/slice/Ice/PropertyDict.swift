//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `PropertyDict.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation

/// A simple collection of properties, represented as a dictionary of key/value pairs. Both key and value are
/// strings.
public typealias PropertyDict = [Swift.String: Swift.String]

/// Helper class to read and write `PropertyDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct PropertyDictHelper {
    /// Read a `PropertyDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `PropertyDict` - The dictionary read from the stream.
    public static func read(from istr: InputStream) throws -> PropertyDict {
        let sz = try Swift.Int(istr.readSize())
        var v = PropertyDict()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: Swift.String = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `PropertyDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `PropertyDict` - The dictionary read from the stream.
    public static func read(from istr: InputStream, tag: Swift.Int32) throws -> PropertyDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `PropertyDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `PropertyDict` - The dictionary value to write to the stream.
    public static func write(to ostr: OutputStream, value v: PropertyDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `PropertyDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `PropertyDict` - The dictionary value to write to the stream.
    public static func write(to ostr: OutputStream, tag: Swift.Int32, value v: PropertyDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}
