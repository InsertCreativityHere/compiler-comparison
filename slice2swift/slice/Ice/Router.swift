//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation

/// Traits for Slice interface `Router`.
public struct RouterTraits: SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Ice::Router"]
    public static let staticId = "::Ice::Router"
}

/// Traits for Slice interface `RouterFinder`.
public struct RouterFinderTraits: SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Ice::RouterFinder"]
    public static let staticId = "::Ice::RouterFinder"
}

/// The Ice router interface. Routers can be set either globally though the Communicator, or with
/// ice_router on specific proxies.
///
/// RouterPrx Methods:
///  - getClientProxy: Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router. If a null proxy is returned, the client will forward requests to the router's endpoints.
///  - getClientProxyAsync: Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router. If a null proxy is returned, the client will forward requests to the router's endpoints.
///  - getServerProxy: Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
///  - getServerProxyAsync: Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
///  - addProxies: Add new proxy information to the router's routing table.
///  - addProxiesAsync: Add new proxy information to the router's routing table.
public protocol RouterPrx: ObjectPrx {}

internal final class RouterPrxI: ObjectPrxI, RouterPrx {
    public override class func ice_staticId() -> Swift.String {
        return RouterTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: RouterPrx.Protocol) throws -> RouterPrx {
    try communicator.makeProxyImpl(proxyString) as RouterPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: ObjectPrx, type: RouterPrx.Protocol, facet: Swift.String? = nil, context: Context? = nil) async throws -> RouterPrx? {
    return try await RouterPrxI.checkedCast(prx: prx, facet: facet, context: context) as RouterPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: ObjectPrx, type: RouterPrx.Protocol, facet: Swift.String? = nil) -> RouterPrx {
    return RouterPrxI.uncheckedCast(prx: prx, facet: facet) as RouterPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: RouterPrx.Protocol) -> Swift.String {
    return RouterTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `RouterPrx`.
public extension InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: RouterPrx.Protocol) throws -> RouterPrx? {
        return try read() as RouterPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: RouterPrx.Protocol) throws -> RouterPrx? {
        return try read(tag: tag) as RouterPrxI?
    }
}

/// The Ice router interface. Routers can be set either globally though the Communicator, or with
/// ice_router on specific proxies.
///
/// RouterPrx Methods:
///  - getClientProxy: Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router. If a null proxy is returned, the client will forward requests to the router's endpoints.
///  - getClientProxyAsync: Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router. If a null proxy is returned, the client will forward requests to the router's endpoints.
///  - getServerProxy: Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
///  - getServerProxyAsync: Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
///  - addProxies: Add new proxy information to the router's routing table.
///  - addProxiesAsync: Add new proxy information to the router's routing table.
public extension RouterPrx {
    /// Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
    /// If a null proxy is returned, the client will forward requests to the router's endpoints.
    ///
    /// - Parameter context: Optional request context.
    ///
    /// - Returns:
    ///   - returnValue: The router's client proxy.
    ///   - hasRoutingTable: Indicates whether or not the router supports a routing table. If it is supported, the
    /// Ice runtime will call addProxies to populate the routing table. This out parameter is only supported
    /// starting with Ice 3.7.
    /// The Ice runtime assumes the router has a routing table if the hasRoutingTable is not set.
    func getClientProxy(context: Context? = nil) async throws -> (returnValue: ObjectPrx?, hasRoutingTable: Swift.Bool?) {
        return try await _impl._invoke(operation: "getClientProxy",
                                       mode: .Idempotent,
                                       read: { istr in
                                           let iceP_returnValue: ObjectPrx? = try istr.read(ObjectPrx.self)
                                           let iceP_hasRoutingTable: Swift.Bool? = try istr.read(tag: 1)
                                           return (iceP_returnValue, iceP_hasRoutingTable)
                                       },
                                       context: context)
    }

    /// Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
    ///
    /// - Parameter context: Optional request context.
    ///
    /// - Returns: The router's server proxy.
    func getServerProxy(context: Context? = nil) async throws -> ObjectPrx? {
        return try await _impl._invoke(operation: "getServerProxy",
                                       mode: .Idempotent,
                                       read: { istr in
                                           let iceP_returnValue: ObjectPrx? = try istr.read(ObjectPrx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    /// Add new proxy information to the router's routing table.
    ///
    /// - Parameters:
    ///   - iceP_proxies: The proxies to add. Adding a null proxy is an error.
    ///   - context: Optional request context.
    ///
    /// - Returns: Proxies discarded by the router. These proxies are all non-null.
    func addProxies(_ iceP_proxies: ObjectProxySeq, context: Context? = nil) async throws -> ObjectProxySeq {
        return try await _impl._invoke(operation: "addProxies",
                                       mode: .Idempotent,
                                       write: { ostr in
                                           ObjectProxySeqHelper.write(to: ostr, value: iceP_proxies)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: ObjectProxySeq = try ObjectProxySeqHelper.read(from: istr)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}

/// This interface should be implemented by services implementing the Ice::Router interface. It should be advertised
/// through an Ice object with the identity `Ice/RouterFinder'. This allows clients to retrieve the router proxy
/// with just the endpoint information of the service.
///
/// RouterFinderPrx Methods:
///  - getRouter: Get the router proxy implemented by the process hosting this finder object.
///  - getRouterAsync: Get the router proxy implemented by the process hosting this finder object.
public protocol RouterFinderPrx: ObjectPrx {}

internal final class RouterFinderPrxI: ObjectPrxI, RouterFinderPrx {
    public override class func ice_staticId() -> Swift.String {
        return RouterFinderTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: RouterFinderPrx.Protocol) throws -> RouterFinderPrx {
    try communicator.makeProxyImpl(proxyString) as RouterFinderPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: ObjectPrx, type: RouterFinderPrx.Protocol, facet: Swift.String? = nil, context: Context? = nil) async throws -> RouterFinderPrx? {
    return try await RouterFinderPrxI.checkedCast(prx: prx, facet: facet, context: context) as RouterFinderPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: ObjectPrx, type: RouterFinderPrx.Protocol, facet: Swift.String? = nil) -> RouterFinderPrx {
    return RouterFinderPrxI.uncheckedCast(prx: prx, facet: facet) as RouterFinderPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: RouterFinderPrx.Protocol) -> Swift.String {
    return RouterFinderTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `RouterFinderPrx`.
public extension InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: RouterFinderPrx.Protocol) throws -> RouterFinderPrx? {
        return try read() as RouterFinderPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: RouterFinderPrx.Protocol) throws -> RouterFinderPrx? {
        return try read(tag: tag) as RouterFinderPrxI?
    }
}

/// This interface should be implemented by services implementing the Ice::Router interface. It should be advertised
/// through an Ice object with the identity `Ice/RouterFinder'. This allows clients to retrieve the router proxy
/// with just the endpoint information of the service.
///
/// RouterFinderPrx Methods:
///  - getRouter: Get the router proxy implemented by the process hosting this finder object.
///  - getRouterAsync: Get the router proxy implemented by the process hosting this finder object.
public extension RouterFinderPrx {
    /// Get the router proxy implemented by the process hosting this finder object. The proxy might point to several
    /// replicas. This proxy is never null.
    ///
    /// - Parameter context: Optional request context.
    ///
    /// - Returns: The router proxy.
    func getRouter(context: Context? = nil) async throws -> RouterPrx? {
        return try await _impl._invoke(operation: "getRouter",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: RouterPrx? = try istr.read(RouterPrx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}


/// Dispatcher for `Router` servants.
public struct RouterDisp: Ice.Dispatcher {
    public let servant: Router
    private static let defaultObject = ObjectI<RouterTraits>()

    public init(_ servant: Router) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "addProxies":
            try await servant._iceD_addProxies(request)
        case "getClientProxy":
            try await servant._iceD_getClientProxy(request)
        case "getServerProxy":
            try await servant._iceD_getServerProxy(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? RouterDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? RouterDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? RouterDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? RouterDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// The Ice router interface. Routers can be set either globally though the Communicator, or with
/// ice_router on specific proxies.
public protocol Router {
    /// Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
    /// If a null proxy is returned, the client will forward requests to the router's endpoints.
    ///
    /// - Parameter current: The Current object for the dispatch.
    ///
    /// - Returns:
    ///   - returnValue: The router's client proxy.
    ///   - hasRoutingTable: Indicates whether or not the router supports a routing table. If it is supported, the
    /// Ice runtime will call addProxies to populate the routing table. This out parameter is only supported
    /// starting with Ice 3.7.
    /// The Ice runtime assumes the router has a routing table if the hasRoutingTable is not set.
    func getClientProxy(current: Current) async throws -> (returnValue: ObjectPrx?, hasRoutingTable: Swift.Bool?)

    /// Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
    ///
    /// - Parameter current: The Current object for the dispatch.
    ///
    /// - Returns: The router's server proxy.
    func getServerProxy(current: Current) async throws -> ObjectPrx?

    /// Add new proxy information to the router's routing table.
    ///
    /// - Parameters:
    ///   - proxies: The proxies to add. Adding a null proxy is an error.
    ///   - current: The Current object for the dispatch.
    ///
    /// - Returns: Proxies discarded by the router. These proxies are all non-null.
    func addProxies(proxies: ObjectProxySeq, current: Current) async throws -> ObjectProxySeq
}


/// Dispatcher for `RouterFinder` servants.
public struct RouterFinderDisp: Ice.Dispatcher {
    public let servant: RouterFinder
    private static let defaultObject = ObjectI<RouterFinderTraits>()

    public init(_ servant: RouterFinder) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "getRouter":
            try await servant._iceD_getRouter(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? RouterFinderDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? RouterFinderDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? RouterFinderDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? RouterFinderDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// This interface should be implemented by services implementing the Ice::Router interface. It should be advertised
/// through an Ice object with the identity `Ice/RouterFinder'. This allows clients to retrieve the router proxy
/// with just the endpoint information of the service.
public protocol RouterFinder {
    /// Get the router proxy implemented by the process hosting this finder object. The proxy might point to several
    /// replicas. This proxy is never null.
    ///
    /// - Parameter current: The Current object for the dispatch.
    ///
    /// - Returns: The router proxy.
    func getRouter(current: Current) async throws -> RouterPrx?
}

/// The Ice router interface. Routers can be set either globally though the Communicator, or with
/// ice_router on specific proxies.
///
/// Router Methods:
///  - getClientProxy: Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router. If a null proxy is returned, the client will forward requests to the router's endpoints.
///  - getServerProxy: Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
///  - addProxies: Add new proxy information to the router's routing table.
extension Router {
    public func _iceD_getClientProxy(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getClientProxy(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_hasRoutingTable) = value
            ostr.write(iceP_returnValue)
            ostr.write(tag: 1, value: iceP_hasRoutingTable)
        }
    }

    public func _iceD_getServerProxy(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getServerProxy(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_addProxies(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_proxies: ObjectProxySeq = try ObjectProxySeqHelper.read(from: istr)
        let result = try await self.addProxies(proxies: iceP_proxies, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ObjectProxySeqHelper.write(to: ostr, value: iceP_returnValue)
        }
    }
}

/// This interface should be implemented by services implementing the Ice::Router interface. It should be advertised
/// through an Ice object with the identity `Ice/RouterFinder'. This allows clients to retrieve the router proxy
/// with just the endpoint information of the service.
///
/// RouterFinder Methods:
///  - getRouter: Get the router proxy implemented by the process hosting this finder object.
extension RouterFinder {
    public func _iceD_getRouter(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getRouter(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}
