//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Process.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation

/// Traits for Slice interface `Process`.
public struct ProcessTraits: SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Ice::Process"]
    public static let staticId = "::Ice::Process"
}

/// An administrative interface for process management. Managed servers must implement this interface.
/// A servant implementing this interface is a potential target for denial-of-service attacks,
/// therefore proper security precautions should be taken. For example, the servant can use a UUID to make its
/// identity harder to guess, and be registered in an object adapter with a secured endpoint.
///
/// ProcessPrx Methods:
///  - shutdown: Initiate a graceful shut-down.
///  - shutdownAsync: Initiate a graceful shut-down.
///  - writeMessage: Write a message on the process' stdout or stderr.
///  - writeMessageAsync: Write a message on the process' stdout or stderr.
public protocol ProcessPrx: ObjectPrx {}

internal final class ProcessPrxI: ObjectPrxI, ProcessPrx {
    public override class func ice_staticId() -> Swift.String {
        return ProcessTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: ProcessPrx.Protocol) throws -> ProcessPrx {
    try communicator.makeProxyImpl(proxyString) as ProcessPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: ObjectPrx, type: ProcessPrx.Protocol, facet: Swift.String? = nil, context: Context? = nil) async throws -> ProcessPrx? {
    return try await ProcessPrxI.checkedCast(prx: prx, facet: facet, context: context) as ProcessPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: ObjectPrx, type: ProcessPrx.Protocol, facet: Swift.String? = nil) -> ProcessPrx {
    return ProcessPrxI.uncheckedCast(prx: prx, facet: facet) as ProcessPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: ProcessPrx.Protocol) -> Swift.String {
    return ProcessTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `ProcessPrx`.
public extension InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: ProcessPrx.Protocol) throws -> ProcessPrx? {
        return try read() as ProcessPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: ProcessPrx.Protocol) throws -> ProcessPrx? {
        return try read(tag: tag) as ProcessPrxI?
    }
}

/// An administrative interface for process management. Managed servers must implement this interface.
/// A servant implementing this interface is a potential target for denial-of-service attacks,
/// therefore proper security precautions should be taken. For example, the servant can use a UUID to make its
/// identity harder to guess, and be registered in an object adapter with a secured endpoint.
///
/// ProcessPrx Methods:
///  - shutdown: Initiate a graceful shut-down.
///  - shutdownAsync: Initiate a graceful shut-down.
///  - writeMessage: Write a message on the process' stdout or stderr.
///  - writeMessageAsync: Write a message on the process' stdout or stderr.
public extension ProcessPrx {
    /// Initiate a graceful shut-down.
    ///
    /// - Parameter context: Optional request context.
    func shutdown(context: Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "shutdown",
                                       mode: .Normal,
                                       context: context)
    }

    /// Write a message on the process' stdout or stderr.
    ///
    /// - Parameters:
    ///   - iceP_message: The message.
    ///   - iceP_fd: 1 for stdout, 2 for stderr.
    ///   - context: Optional request context.
    func writeMessage(message iceP_message: Swift.String, fd iceP_fd: Swift.Int32, context: Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "writeMessage",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_message)
                                           ostr.write(iceP_fd)
                                       },
                                       context: context)
    }
}


/// Dispatcher for `Process` servants.
public struct ProcessDisp: Ice.Dispatcher {
    public let servant: Process
    private static let defaultObject = ObjectI<ProcessTraits>()

    public init(_ servant: Process) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? ProcessDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? ProcessDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? ProcessDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? ProcessDisp.defaultObject)._iceD_ice_ping(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        case "writeMessage":
            try await servant._iceD_writeMessage(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// An administrative interface for process management. Managed servers must implement this interface.
/// A servant implementing this interface is a potential target for denial-of-service attacks,
/// therefore proper security precautions should be taken. For example, the servant can use a UUID to make its
/// identity harder to guess, and be registered in an object adapter with a secured endpoint.
public protocol Process {
    /// Initiate a graceful shut-down.
    ///
    /// - Parameter current: The Current object for the dispatch.
    func shutdown(current: Current) async throws

    /// Write a message on the process' stdout or stderr.
    ///
    /// - Parameters:
    ///   - message: The message.
    ///   - fd: 1 for stdout, 2 for stderr.
    ///   - current: The Current object for the dispatch.
    func writeMessage(message: Swift.String, fd: Swift.Int32, current: Current) async throws
}

/// An administrative interface for process management. Managed servers must implement this interface.
/// A servant implementing this interface is a potential target for denial-of-service attacks,
/// therefore proper security precautions should be taken. For example, the servant can use a UUID to make its
/// identity harder to guess, and be registered in an object adapter with a secured endpoint.
///
/// Process Methods:
///  - shutdown: Initiate a graceful shut-down.
///  - writeMessage: Write a message on the process' stdout or stderr.
extension Process {
    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_writeMessage(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_message: Swift.String = try istr.read()
        let iceP_fd: Swift.Int32 = try istr.read()
        try await self.writeMessage(message: iceP_message, fd: iceP_fd, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
