//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice interface`Server`.
public struct ServerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Server"]
    public static let staticId = "::Test::Server"
}

public typealias Properties = [Swift.String: Swift.String]

/// Helper class to read and write `Properties` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct PropertiesHelper {
    /// Read a `Properties` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `Properties` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> Properties {
        let sz = try Swift.Int(istr.readSize())
        var v = Properties()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: Swift.String = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `Properties?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `Properties` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> Properties? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `Properties` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `Properties` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: Properties) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `Properties?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `Properties` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: Properties?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice interface`ServerFactory`.
public struct ServerFactoryTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::ServerFactory"]
    public static let staticId = "::Test::ServerFactory"
}

/// ServerPrx overview.
///
/// ServerPrx Methods:
///
///  - noCert: 
///
///  - noCertAsync: 
///
///  - checkCert: 
///
///  - checkCertAsync: 
///
///  - checkCipher: 
///
///  - checkCipherAsync: 
public protocol ServerPrx: Ice.ObjectPrx {}

private final class ServerPrxI: Ice.ObjectPrxI, ServerPrx {
    public override class func ice_staticId() -> Swift.String {
        return ServerTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `ServerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `ServerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: ServerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> ServerPrx? {
    return try ServerPrxI.checkedCast(prx: prx, facet: facet, context: context) as ServerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `ServerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `ServerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: ServerPrx.Protocol, facet: Swift.String? = nil) -> ServerPrx {
    return ServerPrxI.uncheckedCast(prx: prx, facet: facet) as ServerPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `ServerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: ServerPrx.Protocol) -> Swift.String {
    return ServerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `ServerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `ServerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ServerPrx?` - The extracted proxy
    func read(_ type: ServerPrx.Protocol) throws -> ServerPrx? {
        return try read() as ServerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `ServerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ServerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: ServerPrx.Protocol) throws -> ServerPrx? {
        return try read(tag: tag) as ServerPrxI?
    }
}

/// ServerPrx overview.
///
/// ServerPrx Methods:
///
///  - noCert: 
///
///  - noCertAsync: 
///
///  - checkCert: 
///
///  - checkCertAsync: 
///
///  - checkCipher: 
///
///  - checkCipherAsync: 
public extension ServerPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func noCert(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "noCert",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func noCertAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "noCert",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter subjectDN: `Swift.String`
    ///
    /// - parameter issuerDN: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func checkCert(subjectDN iceP_subjectDN: Swift.String, issuerDN iceP_issuerDN: Swift.String, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "checkCert",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_subjectDN)
                              ostr.write(iceP_issuerDN)
                          },
                          context: context)
    }

    ///
    /// - parameter subjectDN: `Swift.String`
    ///
    /// - parameter issuerDN: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func checkCertAsync(subjectDN iceP_subjectDN: Swift.String, issuerDN iceP_issuerDN: Swift.String, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "checkCert",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_subjectDN)
                                      ostr.write(iceP_issuerDN)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func checkCipher(_ iceP_cipher: Swift.String, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "checkCipher",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_cipher)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func checkCipherAsync(_ iceP_cipher: Swift.String, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "checkCipher",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_cipher)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// ServerFactoryPrx overview.
///
/// ServerFactoryPrx Methods:
///
///  - createServer: 
///
///  - createServerAsync: 
///
///  - destroyServer: 
///
///  - destroyServerAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol ServerFactoryPrx: Ice.ObjectPrx {}

private final class ServerFactoryPrxI: Ice.ObjectPrxI, ServerFactoryPrx {
    public override class func ice_staticId() -> Swift.String {
        return ServerFactoryTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `ServerFactoryPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `ServerFactoryPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: ServerFactoryPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> ServerFactoryPrx? {
    return try ServerFactoryPrxI.checkedCast(prx: prx, facet: facet, context: context) as ServerFactoryPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `ServerFactoryPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `ServerFactoryPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: ServerFactoryPrx.Protocol, facet: Swift.String? = nil) -> ServerFactoryPrx {
    return ServerFactoryPrxI.uncheckedCast(prx: prx, facet: facet) as ServerFactoryPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `ServerFactoryPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: ServerFactoryPrx.Protocol) -> Swift.String {
    return ServerFactoryTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `ServerFactoryPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `ServerFactoryPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ServerFactoryPrx?` - The extracted proxy
    func read(_ type: ServerFactoryPrx.Protocol) throws -> ServerFactoryPrx? {
        return try read() as ServerFactoryPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `ServerFactoryPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ServerFactoryPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: ServerFactoryPrx.Protocol) throws -> ServerFactoryPrx? {
        return try read(tag: tag) as ServerFactoryPrxI?
    }
}

/// ServerFactoryPrx overview.
///
/// ServerFactoryPrx Methods:
///
///  - createServer: 
///
///  - createServerAsync: 
///
///  - destroyServer: 
///
///  - destroyServerAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension ServerFactoryPrx {
    ///
    /// - parameter _: `Properties`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `ServerPrx?`
    func createServer(_ iceP_props: Properties, context: Ice.Context? = nil) throws -> ServerPrx? {
        return try _impl._invoke(operation: "createServer",
                                 mode: .Normal,
                                 write: { ostr in
                                     PropertiesHelper.write(to: ostr, value: iceP_props)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ServerPrx? = try istr.read(ServerPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Properties`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<ServerPrx?>` - The result of the operation
    func createServerAsync(_ iceP_props: Properties, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<ServerPrx?> {
        return _impl._invokeAsync(operation: "createServer",
                                  mode: .Normal,
                                  write: { ostr in
                                      PropertiesHelper.write(to: ostr, value: iceP_props)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: ServerPrx? = try istr.read(ServerPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ServerPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func destroyServer(_ iceP_srv: ServerPrx?, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "destroyServer",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_srv)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `ServerPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func destroyServerAsync(_ iceP_srv: ServerPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "destroyServer",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_srv)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `Server` servants.
public struct ServerDisp: Ice.Disp {
    public let servant: Server
    private static let defaultObject = Ice.ObjectI<ServerTraits>()

    public init(_ servant: Server) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "checkCert":
            return try servant._iceD_checkCert(incoming: request, current: current)
        case "checkCipher":
            return try servant._iceD_checkCipher(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? ServerDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? ServerDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? ServerDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? ServerDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "noCert":
            return try servant._iceD_noCert(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol Server {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func noCert(current: Ice.Current) throws

    ///
    /// - parameter subjectDN: `Swift.String`
    ///
    /// - parameter issuerDN: `Swift.String`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func checkCert(subjectDN: Swift.String, issuerDN: Swift.String, current: Ice.Current) throws

    ///
    /// - parameter cipher: `Swift.String`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func checkCipher(cipher: Swift.String, current: Ice.Current) throws
}


/// Dispatcher for `ServerFactory` servants.
public struct ServerFactoryDisp: Ice.Disp {
    public let servant: ServerFactory
    private static let defaultObject = Ice.ObjectI<ServerFactoryTraits>()

    public init(_ servant: ServerFactory) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "createServer":
            return try servant._iceD_createServer(incoming: request, current: current)
        case "destroyServer":
            return try servant._iceD_destroyServer(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? ServerFactoryDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? ServerFactoryDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? ServerFactoryDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? ServerFactoryDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "shutdown":
            return try servant._iceD_shutdown(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol ServerFactory {
    ///
    /// - parameter props: `Properties`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `ServerPrx?`
    func createServer(props: Properties, current: Ice.Current) throws -> ServerPrx?

    ///
    /// - parameter srv: `ServerPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func destroyServer(srv: ServerPrx?, current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws
}

/// Server overview.
///
/// Server Methods:
///
///  - noCert: 
///
///  - checkCert: 
///
///  - checkCipher: 
public extension Server {
    func _iceD_noCert(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.noCert(current: current)

        return inS.setResult()
    }

    func _iceD_checkCert(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_subjectDN, iceP_issuerDN): (Swift.String, Swift.String) = try inS.read { istr in
            let iceP_subjectDN: Swift.String = try istr.read()
            let iceP_issuerDN: Swift.String = try istr.read()
            return (iceP_subjectDN, iceP_issuerDN)
        }

        try self.checkCert(subjectDN: iceP_subjectDN, issuerDN: iceP_issuerDN, current: current)

        return inS.setResult()
    }

    func _iceD_checkCipher(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_cipher: Swift.String = try inS.read { istr in
            let iceP_cipher: Swift.String = try istr.read()
            return iceP_cipher
        }

        try self.checkCipher(cipher: iceP_cipher, current: current)

        return inS.setResult()
    }
}

/// ServerFactory overview.
///
/// ServerFactory Methods:
///
///  - createServer: 
///
///  - destroyServer: 
///
///  - shutdown: 
public extension ServerFactory {
    func _iceD_createServer(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_props: Properties = try inS.read { istr in
            let iceP_props: Properties = try PropertiesHelper.read(from: istr)
            return iceP_props
        }

        let iceP_returnValue = try self.createServer(props: iceP_props, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_destroyServer(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_srv: ServerPrx? = try inS.read { istr in
            let iceP_srv: ServerPrx? = try istr.read(ServerPrx.self)
            return iceP_srv
        }

        try self.destroyServer(srv: iceP_srv, current: current)

        return inS.setResult()
    }

    func _iceD_shutdown(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.shutdown(current: current)

        return inS.setResult()
    }
}
