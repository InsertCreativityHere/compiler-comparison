//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public typealias ByteSeq = Foundation.Data

public typealias ShortSeq = [Swift.Int16]

public typealias StringSeq = [Swift.String]

/// Traits for Slice interface`TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - opByteSpan: 
///
///  - opByteSpanAsync: 
///
///  - opShortSpan: 
///
///  - opShortSpanAsync: 
///
///  - opStringSpan: 
///
///  - opStringSpanAsync: 
///
///  - opOptionalByteSpan: 
///
///  - opOptionalByteSpanAsync: 
///
///  - opOptionalShortSpan: 
///
///  - opOptionalShortSpanAsync: 
///
///  - opOptionalStringSpan: 
///
///  - opOptionalStringSpanAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol TestIntfPrx: Ice.ObjectPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestIntfPrx.Protocol) throws -> TestIntfPrx {
    try communicator.makeProxyImpl(proxyString) as TestIntfPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestIntfPrx? {
    return try TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - opByteSpan: 
///
///  - opByteSpanAsync: 
///
///  - opShortSpan: 
///
///  - opShortSpanAsync: 
///
///  - opStringSpan: 
///
///  - opStringSpanAsync: 
///
///  - opOptionalByteSpan: 
///
///  - opOptionalByteSpanAsync: 
///
///  - opOptionalShortSpan: 
///
///  - opOptionalShortSpanAsync: 
///
///  - opOptionalStringSpan: 
///
///  - opOptionalStringSpanAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension TestIntfPrx {
    ///
    /// - parameter _: `ByteSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteSeq, dataOut: ByteSeq)`:
    ///
    ///   - returnValue: `ByteSeq`
    ///
    ///   - dataOut: `ByteSeq`
    func opByteSpan(_ iceP_dataIn: ByteSeq, context: Ice.Context? = nil) throws -> (returnValue: ByteSeq, dataOut: ByteSeq) {
        return try _impl._invoke(operation: "opByteSpan",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_dataIn)
                                 },
                                 read: { istr in
                                     let iceP_dataOut: ByteSeq = try istr.read()
                                     let iceP_returnValue: ByteSeq = try istr.read()
                                     return (iceP_returnValue, iceP_dataOut)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `(returnValue: ByteSeq, dataOut: ByteSeq)` - The result of the operation
    func opByteSpanAsync(_ iceP_dataIn: ByteSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> (returnValue: ByteSeq, dataOut: ByteSeq) {
        return try await _impl._invokeAsync(operation: "opByteSpan",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_dataIn)
                                            },
                                            read: { istr in
                                                let iceP_dataOut: ByteSeq = try istr.read()
                                                let iceP_returnValue: ByteSeq = try istr.read()
                                                return (iceP_returnValue, iceP_dataOut)
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter _: `ShortSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortSeq, dataOut: ShortSeq)`:
    ///
    ///   - returnValue: `ShortSeq`
    ///
    ///   - dataOut: `ShortSeq`
    func opShortSpan(_ iceP_dataIn: ShortSeq, context: Ice.Context? = nil) throws -> (returnValue: ShortSeq, dataOut: ShortSeq) {
        return try _impl._invoke(operation: "opShortSpan",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_dataIn)
                                 },
                                 read: { istr in
                                     let iceP_dataOut: ShortSeq = try istr.read()
                                     let iceP_returnValue: ShortSeq = try istr.read()
                                     return (iceP_returnValue, iceP_dataOut)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `(returnValue: ShortSeq, dataOut: ShortSeq)` - The result of the operation
    func opShortSpanAsync(_ iceP_dataIn: ShortSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> (returnValue: ShortSeq, dataOut: ShortSeq) {
        return try await _impl._invokeAsync(operation: "opShortSpan",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_dataIn)
                                            },
                                            read: { istr in
                                                let iceP_dataOut: ShortSeq = try istr.read()
                                                let iceP_returnValue: ShortSeq = try istr.read()
                                                return (iceP_returnValue, iceP_dataOut)
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter _: `StringSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeq, dataOut: StringSeq)`:
    ///
    ///   - returnValue: `StringSeq`
    ///
    ///   - dataOut: `StringSeq`
    func opStringSpan(_ iceP_dataIn: StringSeq, context: Ice.Context? = nil) throws -> (returnValue: StringSeq, dataOut: StringSeq) {
        return try _impl._invoke(operation: "opStringSpan",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_dataIn)
                                 },
                                 read: { istr in
                                     let iceP_dataOut: StringSeq = try istr.read()
                                     let iceP_returnValue: StringSeq = try istr.read()
                                     return (iceP_returnValue, iceP_dataOut)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `(returnValue: StringSeq, dataOut: StringSeq)` - The result of the operation
    func opStringSpanAsync(_ iceP_dataIn: StringSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> (returnValue: StringSeq, dataOut: StringSeq) {
        return try await _impl._invokeAsync(operation: "opStringSpan",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_dataIn)
                                            },
                                            read: { istr in
                                                let iceP_dataOut: StringSeq = try istr.read()
                                                let iceP_returnValue: StringSeq = try istr.read()
                                                return (iceP_returnValue, iceP_dataOut)
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter _: `ByteSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteSeq?, dataOut: ByteSeq?)`:
    ///
    ///   - returnValue: `ByteSeq?`
    ///
    ///   - dataOut: `ByteSeq?`
    func opOptionalByteSpan(_ iceP_dataIn: ByteSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: ByteSeq?, dataOut: ByteSeq?) {
        return try _impl._invoke(operation: "opOptionalByteSpan",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 1, value: iceP_dataIn)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ByteSeq? = try istr.read(tag: 10)
                                     let iceP_dataOut: ByteSeq? = try istr.read(tag: 11)
                                     return (iceP_returnValue, iceP_dataOut)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `(returnValue: ByteSeq?, dataOut: ByteSeq?)` - The result of the operation
    func opOptionalByteSpanAsync(_ iceP_dataIn: ByteSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> (returnValue: ByteSeq?, dataOut: ByteSeq?) {
        return try await _impl._invokeAsync(operation: "opOptionalByteSpan",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 1, value: iceP_dataIn)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: ByteSeq? = try istr.read(tag: 10)
                                                let iceP_dataOut: ByteSeq? = try istr.read(tag: 11)
                                                return (iceP_returnValue, iceP_dataOut)
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter _: `ShortSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortSeq?, dataOut: ShortSeq?)`:
    ///
    ///   - returnValue: `ShortSeq?`
    ///
    ///   - dataOut: `ShortSeq?`
    func opOptionalShortSpan(_ iceP_dataIn: ShortSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: ShortSeq?, dataOut: ShortSeq?) {
        return try _impl._invoke(operation: "opOptionalShortSpan",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 1, value: iceP_dataIn)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ShortSeq? = try istr.read(tag: 10)
                                     let iceP_dataOut: ShortSeq? = try istr.read(tag: 11)
                                     return (iceP_returnValue, iceP_dataOut)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `(returnValue: ShortSeq?, dataOut: ShortSeq?)` - The result of the operation
    func opOptionalShortSpanAsync(_ iceP_dataIn: ShortSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> (returnValue: ShortSeq?, dataOut: ShortSeq?) {
        return try await _impl._invokeAsync(operation: "opOptionalShortSpan",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 1, value: iceP_dataIn)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: ShortSeq? = try istr.read(tag: 10)
                                                let iceP_dataOut: ShortSeq? = try istr.read(tag: 11)
                                                return (iceP_returnValue, iceP_dataOut)
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter _: `StringSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeq?, dataOut: StringSeq?)`:
    ///
    ///   - returnValue: `StringSeq?`
    ///
    ///   - dataOut: `StringSeq?`
    func opOptionalStringSpan(_ iceP_dataIn: StringSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: StringSeq?, dataOut: StringSeq?) {
        return try _impl._invoke(operation: "opOptionalStringSpan",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 1, value: iceP_dataIn)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: StringSeq? = try istr.read(tag: 10)
                                     let iceP_dataOut: StringSeq? = try istr.read(tag: 11)
                                     return (iceP_returnValue, iceP_dataOut)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `(returnValue: StringSeq?, dataOut: StringSeq?)` - The result of the operation
    func opOptionalStringSpanAsync(_ iceP_dataIn: StringSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> (returnValue: StringSeq?, dataOut: StringSeq?) {
        return try await _impl._invokeAsync(operation: "opOptionalStringSpan",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(tag: 1, value: iceP_dataIn)
                                            },
                                            read: { istr in
                                                let iceP_returnValue: StringSeq? = try istr.read(tag: 10)
                                                let iceP_dataOut: StringSeq? = try istr.read(tag: 11)
                                                return (iceP_returnValue, iceP_dataOut)
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "shutdown",
                                            mode: .Normal,
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Dispatcher {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(request)
        case "opByteSpan":
            try await servant._iceD_opByteSpan(request)
        case "opOptionalByteSpan":
            try await servant._iceD_opOptionalByteSpan(request)
        case "opOptionalShortSpan":
            try await servant._iceD_opOptionalShortSpan(request)
        case "opOptionalStringSpan":
            try await servant._iceD_opOptionalStringSpan(request)
        case "opShortSpan":
            try await servant._iceD_opShortSpan(request)
        case "opStringSpan":
            try await servant._iceD_opStringSpan(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol TestIntf {
    ///
    /// - parameter dataIn: `ByteSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteSeq, dataOut: ByteSeq)` - The result of the operation
    func opByteSpanAsync(dataIn: ByteSeq, current: Ice.Current) async throws -> (returnValue: ByteSeq, dataOut: ByteSeq)

    ///
    /// - parameter dataIn: `ShortSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortSeq, dataOut: ShortSeq)` - The result of the operation
    func opShortSpanAsync(dataIn: ShortSeq, current: Ice.Current) async throws -> (returnValue: ShortSeq, dataOut: ShortSeq)

    ///
    /// - parameter dataIn: `StringSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringSeq, dataOut: StringSeq)` - The result of the operation
    func opStringSpanAsync(dataIn: StringSeq, current: Ice.Current) async throws -> (returnValue: StringSeq, dataOut: StringSeq)

    ///
    /// - parameter dataIn: `ByteSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteSeq?, dataOut: ByteSeq?)` - The result of the operation
    func opOptionalByteSpanAsync(dataIn: ByteSeq?, current: Ice.Current) async throws -> (returnValue: ByteSeq?, dataOut: ByteSeq?)

    ///
    /// - parameter dataIn: `ShortSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortSeq?, dataOut: ShortSeq?)` - The result of the operation
    func opOptionalShortSpanAsync(dataIn: ShortSeq?, current: Ice.Current) async throws -> (returnValue: ShortSeq?, dataOut: ShortSeq?)

    ///
    /// - parameter dataIn: `StringSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringSeq?, dataOut: StringSeq?)` - The result of the operation
    func opOptionalStringSpanAsync(dataIn: StringSeq?, current: Ice.Current) async throws -> (returnValue: StringSeq?, dataOut: StringSeq?)

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func shutdownAsync(current: Ice.Current) async throws -> Swift.Void
}

/// TestIntf overview.
///
/// TestIntf Methods:
///
///  - opByteSpan: 
///
///  - opShortSpan: 
///
///  - opStringSpan: 
///
///  - opOptionalByteSpan: 
///
///  - opOptionalShortSpan: 
///
///  - opOptionalStringSpan: 
///
///  - shutdown: 
extension TestIntf {
    public func _iceD_opByteSpan(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_dataIn: ByteSeq = try istr.read()
        let result = try await self.opByteSpanAsync(
            dataIn: iceP_dataIn, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType:.DefaultFormat) { ostr, value in 
            let (iceP_returnValue, iceP_dataOut) = value
            ostr.write(iceP_dataOut)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opShortSpan(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_dataIn: ShortSeq = try istr.read()
        let result = try await self.opShortSpanAsync(
            dataIn: iceP_dataIn, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType:.DefaultFormat) { ostr, value in 
            let (iceP_returnValue, iceP_dataOut) = value
            ostr.write(iceP_dataOut)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opStringSpan(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_dataIn: StringSeq = try istr.read()
        let result = try await self.opStringSpanAsync(
            dataIn: iceP_dataIn, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType:.DefaultFormat) { ostr, value in 
            let (iceP_returnValue, iceP_dataOut) = value
            ostr.write(iceP_dataOut)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opOptionalByteSpan(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_dataIn: ByteSeq? = try istr.read(tag: 1)
        let result = try await self.opOptionalByteSpanAsync(
            dataIn: iceP_dataIn, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType:.DefaultFormat) { ostr, value in 
            let (iceP_returnValue, iceP_dataOut) = value
            ostr.write(tag: 10, value: iceP_returnValue)
            ostr.write(tag: 11, value: iceP_dataOut)
        }
    }

    public func _iceD_opOptionalShortSpan(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_dataIn: ShortSeq? = try istr.read(tag: 1)
        let result = try await self.opOptionalShortSpanAsync(
            dataIn: iceP_dataIn, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType:.DefaultFormat) { ostr, value in 
            let (iceP_returnValue, iceP_dataOut) = value
            ostr.write(tag: 10, value: iceP_returnValue)
            ostr.write(tag: 11, value: iceP_dataOut)
        }
    }

    public func _iceD_opOptionalStringSpan(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_dataIn: StringSeq? = try istr.read(tag: 1)
        let result = try await self.opOptionalStringSpanAsync(
            dataIn: iceP_dataIn, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType:.DefaultFormat) { ostr, value in 
            let (iceP_returnValue, iceP_dataOut) = value
            ostr.write(tag: 10, value: iceP_returnValue)
            ostr.write(tag: 11, value: iceP_dataOut)
        }
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdownAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
