//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// Traits for Slice interface`Clock`.
public struct ClockTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Clock"]
    public static let staticId = "::Test::Clock"
}

public protocol ClockPrx: Ice.ObjectPrx {}

private final class ClockPrxI: Ice.ObjectPrxI, ClockPrx {
    public override class func ice_staticId() -> Swift.String {
        return ClockTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: ClockPrx.Protocol) throws -> ClockPrx {
    try communicator.makeProxyImpl(proxyString) as ClockPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `ClockPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `ClockPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: ClockPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> ClockPrx? {
    return try await ClockPrxI.checkedCast(prx: prx, facet: facet, context: context) as ClockPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `ClockPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `ClockPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: ClockPrx.Protocol, facet: Swift.String? = nil) -> ClockPrx {
    return ClockPrxI.uncheckedCast(prx: prx, facet: facet) as ClockPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `ClockPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: ClockPrx.Protocol) -> Swift.String {
    return ClockTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `ClockPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `ClockPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ClockPrx?` - The extracted proxy
    func read(_ type: ClockPrx.Protocol) throws -> ClockPrx? {
        return try read() as ClockPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `ClockPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ClockPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: ClockPrx.Protocol) throws -> ClockPrx? {
        return try read(tag: tag) as ClockPrxI?
    }
}

public extension ClockPrx {
    func tick(_ iceP_time: Swift.String, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "tick",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_time)
                                       },
                                       context: context)
    }
}


/// Dispatcher for `Clock` servants.
public struct ClockDisp: Ice.Dispatcher {
    public let servant: Clock
    private static let defaultObject = Ice.ObjectI<ClockTraits>()

    public init(_ servant: Clock) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? ClockDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? ClockDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? ClockDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? ClockDisp.defaultObject)._iceD_ice_ping(request)
        case "tick":
            try await servant._iceD_tick(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol Clock {
    func tick(time: Swift.String, current: Ice.Current) async throws
}

extension Clock {
    public func _iceD_tick(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_time: Swift.String = try istr.read()
        try await self.tick(time: iceP_time, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
