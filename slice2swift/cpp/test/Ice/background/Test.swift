//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice interface `Background`.
public struct BackgroundTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Background"]
    public static let staticId = "::Test::Background"
}

/// Traits for Slice interface `BackgroundController`.
public struct BackgroundControllerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::BackgroundController"]
    public static let staticId = "::Test::BackgroundController"
}

/// BackgroundPrx overview.
///
/// BackgroundPrx Methods:
///
///  - op: 
///
///  - opAsync: 
///
///  - opWithPayload: 
///
///  - opWithPayloadAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol BackgroundPrx: Ice.ObjectPrx {}

private final class BackgroundPrxI: Ice.ObjectPrxI, BackgroundPrx {
    public override class func ice_staticId() -> Swift.String {
        return BackgroundTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `BackgroundPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `BackgroundPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: BackgroundPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> BackgroundPrx? {
    return try BackgroundPrxI.checkedCast(prx: prx, facet: facet, context: context) as BackgroundPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `BackgroundPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `BackgroundPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: BackgroundPrx.Protocol, facet: Swift.String? = nil) -> BackgroundPrx {
    return BackgroundPrxI.uncheckedCast(prx: prx, facet: facet) as BackgroundPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `BackgroundPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: BackgroundPrx.Protocol) -> Swift.String {
    return BackgroundTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `BackgroundPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `BackgroundPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `BackgroundPrx?` - The extracted proxy
    func read(_ type: BackgroundPrx.Protocol) throws -> BackgroundPrx? {
        return try read() as BackgroundPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `BackgroundPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `BackgroundPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: BackgroundPrx.Protocol) throws -> BackgroundPrx? {
        return try read(tag: tag) as BackgroundPrxI?
    }
}

/// BackgroundPrx overview.
///
/// BackgroundPrx Methods:
///
///  - op: 
///
///  - opAsync: 
///
///  - opWithPayload: 
///
///  - opWithPayloadAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension BackgroundPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func op(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "op",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func opAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "op",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Ice.ByteSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func opWithPayload(_ iceP_seq: Ice.ByteSeq, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "opWithPayload",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_seq)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Ice.ByteSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func opWithPayloadAsync(_ iceP_seq: Ice.ByteSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "opWithPayload",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_seq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// BackgroundControllerPrx overview.
///
/// BackgroundControllerPrx Methods:
///
///  - pauseCall: 
///
///  - pauseCallAsync: 
///
///  - resumeCall: 
///
///  - resumeCallAsync: 
///
///  - holdAdapter: 
///
///  - holdAdapterAsync: 
///
///  - resumeAdapter: 
///
///  - resumeAdapterAsync: 
///
///  - initializeSocketOperation: 
///
///  - initializeSocketOperationAsync: 
///
///  - initializeException: 
///
///  - initializeExceptionAsync: 
///
///  - readReady: 
///
///  - readReadyAsync: 
///
///  - readException: 
///
///  - readExceptionAsync: 
///
///  - writeReady: 
///
///  - writeReadyAsync: 
///
///  - writeException: 
///
///  - writeExceptionAsync: 
///
///  - buffered: 
///
///  - bufferedAsync: 
public protocol BackgroundControllerPrx: Ice.ObjectPrx {}

private final class BackgroundControllerPrxI: Ice.ObjectPrxI, BackgroundControllerPrx {
    public override class func ice_staticId() -> Swift.String {
        return BackgroundControllerTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `BackgroundControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `BackgroundControllerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: BackgroundControllerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> BackgroundControllerPrx? {
    return try BackgroundControllerPrxI.checkedCast(prx: prx, facet: facet, context: context) as BackgroundControllerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `BackgroundControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `BackgroundControllerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: BackgroundControllerPrx.Protocol, facet: Swift.String? = nil) -> BackgroundControllerPrx {
    return BackgroundControllerPrxI.uncheckedCast(prx: prx, facet: facet) as BackgroundControllerPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `BackgroundControllerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: BackgroundControllerPrx.Protocol) -> Swift.String {
    return BackgroundControllerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `BackgroundControllerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `BackgroundControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `BackgroundControllerPrx?` - The extracted proxy
    func read(_ type: BackgroundControllerPrx.Protocol) throws -> BackgroundControllerPrx? {
        return try read() as BackgroundControllerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `BackgroundControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `BackgroundControllerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: BackgroundControllerPrx.Protocol) throws -> BackgroundControllerPrx? {
        return try read(tag: tag) as BackgroundControllerPrxI?
    }
}

/// BackgroundControllerPrx overview.
///
/// BackgroundControllerPrx Methods:
///
///  - pauseCall: 
///
///  - pauseCallAsync: 
///
///  - resumeCall: 
///
///  - resumeCallAsync: 
///
///  - holdAdapter: 
///
///  - holdAdapterAsync: 
///
///  - resumeAdapter: 
///
///  - resumeAdapterAsync: 
///
///  - initializeSocketOperation: 
///
///  - initializeSocketOperationAsync: 
///
///  - initializeException: 
///
///  - initializeExceptionAsync: 
///
///  - readReady: 
///
///  - readReadyAsync: 
///
///  - readException: 
///
///  - readExceptionAsync: 
///
///  - writeReady: 
///
///  - writeReadyAsync: 
///
///  - writeException: 
///
///  - writeExceptionAsync: 
///
///  - buffered: 
///
///  - bufferedAsync: 
public extension BackgroundControllerPrx {
    ///
    /// - parameter _: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func pauseCall(_ iceP_call: Swift.String, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "pauseCall",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_call)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func pauseCallAsync(_ iceP_call: Swift.String, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "pauseCall",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_call)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func resumeCall(_ iceP_call: Swift.String, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "resumeCall",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_call)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func resumeCallAsync(_ iceP_call: Swift.String, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "resumeCall",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_call)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func holdAdapter(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "holdAdapter",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func holdAdapterAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "holdAdapter",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func resumeAdapter(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "resumeAdapter",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func resumeAdapterAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "resumeAdapter",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func initializeSocketOperation(_ iceP_status: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "initializeSocketOperation",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_status)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func initializeSocketOperationAsync(_ iceP_status: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "initializeSocketOperation",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_status)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func initializeException(_ iceP_enable: Swift.Bool, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "initializeException",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_enable)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func initializeExceptionAsync(_ iceP_enable: Swift.Bool, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "initializeException",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_enable)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func readReady(_ iceP_enable: Swift.Bool, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "readReady",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_enable)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func readReadyAsync(_ iceP_enable: Swift.Bool, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "readReady",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_enable)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func readException(_ iceP_enable: Swift.Bool, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "readException",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_enable)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func readExceptionAsync(_ iceP_enable: Swift.Bool, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "readException",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_enable)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func writeReady(_ iceP_enable: Swift.Bool, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "writeReady",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_enable)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func writeReadyAsync(_ iceP_enable: Swift.Bool, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "writeReady",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_enable)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func writeException(_ iceP_enable: Swift.Bool, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "writeException",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_enable)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func writeExceptionAsync(_ iceP_enable: Swift.Bool, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "writeException",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_enable)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func buffered(_ iceP_enable: Swift.Bool, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "buffered",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_enable)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func bufferedAsync(_ iceP_enable: Swift.Bool, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "buffered",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_enable)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `Background` servants.
public struct BackgroundDisp: Ice.Disp {
    public let servant: Background
    private static let defaultObject = Ice.ObjectI<BackgroundTraits>()

    public init(_ servant: Background) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "ice_id":
            return try (servant as? Object ?? BackgroundDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? BackgroundDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? BackgroundDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? BackgroundDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "op":
            return try servant._iceD_op(incoming: request, current: current)
        case "opWithPayload":
            return try servant._iceD_opWithPayload(incoming: request, current: current)
        case "shutdown":
            return try servant._iceD_shutdown(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol Background {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func op(current: Ice.Current) throws

    ///
    /// - parameter seq: `Ice.ByteSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func opWithPayload(seq: Ice.ByteSeq, current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws
}


/// Dispatcher for `BackgroundController` servants.
public struct BackgroundControllerDisp: Ice.Disp {
    public let servant: BackgroundController
    private static let defaultObject = Ice.ObjectI<BackgroundControllerTraits>()

    public init(_ servant: BackgroundController) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "buffered":
            return try servant._iceD_buffered(incoming: request, current: current)
        case "holdAdapter":
            return try servant._iceD_holdAdapter(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? BackgroundControllerDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? BackgroundControllerDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? BackgroundControllerDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? BackgroundControllerDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "initializeException":
            return try servant._iceD_initializeException(incoming: request, current: current)
        case "initializeSocketOperation":
            return try servant._iceD_initializeSocketOperation(incoming: request, current: current)
        case "pauseCall":
            return try servant._iceD_pauseCall(incoming: request, current: current)
        case "readException":
            return try servant._iceD_readException(incoming: request, current: current)
        case "readReady":
            return try servant._iceD_readReady(incoming: request, current: current)
        case "resumeAdapter":
            return try servant._iceD_resumeAdapter(incoming: request, current: current)
        case "resumeCall":
            return try servant._iceD_resumeCall(incoming: request, current: current)
        case "writeException":
            return try servant._iceD_writeException(incoming: request, current: current)
        case "writeReady":
            return try servant._iceD_writeReady(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol BackgroundController {
    ///
    /// - parameter call: `Swift.String`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func pauseCall(call: Swift.String, current: Ice.Current) throws

    ///
    /// - parameter call: `Swift.String`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func resumeCall(call: Swift.String, current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func holdAdapter(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func resumeAdapter(current: Ice.Current) throws

    ///
    /// - parameter status: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func initializeSocketOperation(status: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter enable: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func initializeException(enable: Swift.Bool, current: Ice.Current) throws

    ///
    /// - parameter enable: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func readReady(enable: Swift.Bool, current: Ice.Current) throws

    ///
    /// - parameter enable: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func readException(enable: Swift.Bool, current: Ice.Current) throws

    ///
    /// - parameter enable: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func writeReady(enable: Swift.Bool, current: Ice.Current) throws

    ///
    /// - parameter enable: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func writeException(enable: Swift.Bool, current: Ice.Current) throws

    ///
    /// - parameter enable: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func buffered(enable: Swift.Bool, current: Ice.Current) throws
}

/// Background overview.
///
/// Background Methods:
///
///  - op: 
///
///  - opWithPayload: 
///
///  - shutdown: 
public extension Background {
    func _iceD_op(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.op(current: current)

        return inS.setResult()
    }

    func _iceD_opWithPayload(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_seq: Ice.ByteSeq = try inS.read { istr in
            let iceP_seq: Ice.ByteSeq = try istr.read()
            return iceP_seq
        }

        try self.opWithPayload(seq: iceP_seq, current: current)

        return inS.setResult()
    }

    func _iceD_shutdown(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.shutdown(current: current)

        return inS.setResult()
    }
}

/// BackgroundController overview.
///
/// BackgroundController Methods:
///
///  - pauseCall: 
///
///  - resumeCall: 
///
///  - holdAdapter: 
///
///  - resumeAdapter: 
///
///  - initializeSocketOperation: 
///
///  - initializeException: 
///
///  - readReady: 
///
///  - readException: 
///
///  - writeReady: 
///
///  - writeException: 
///
///  - buffered: 
public extension BackgroundController {
    func _iceD_pauseCall(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_call: Swift.String = try inS.read { istr in
            let iceP_call: Swift.String = try istr.read()
            return iceP_call
        }

        try self.pauseCall(call: iceP_call, current: current)

        return inS.setResult()
    }

    func _iceD_resumeCall(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_call: Swift.String = try inS.read { istr in
            let iceP_call: Swift.String = try istr.read()
            return iceP_call
        }

        try self.resumeCall(call: iceP_call, current: current)

        return inS.setResult()
    }

    func _iceD_holdAdapter(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.holdAdapter(current: current)

        return inS.setResult()
    }

    func _iceD_resumeAdapter(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.resumeAdapter(current: current)

        return inS.setResult()
    }

    func _iceD_initializeSocketOperation(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_status: Swift.Int32 = try inS.read { istr in
            let iceP_status: Swift.Int32 = try istr.read()
            return iceP_status
        }

        try self.initializeSocketOperation(status: iceP_status, current: current)

        return inS.setResult()
    }

    func _iceD_initializeException(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_enable: Swift.Bool = try inS.read { istr in
            let iceP_enable: Swift.Bool = try istr.read()
            return iceP_enable
        }

        try self.initializeException(enable: iceP_enable, current: current)

        return inS.setResult()
    }

    func _iceD_readReady(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_enable: Swift.Bool = try inS.read { istr in
            let iceP_enable: Swift.Bool = try istr.read()
            return iceP_enable
        }

        try self.readReady(enable: iceP_enable, current: current)

        return inS.setResult()
    }

    func _iceD_readException(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_enable: Swift.Bool = try inS.read { istr in
            let iceP_enable: Swift.Bool = try istr.read()
            return iceP_enable
        }

        try self.readException(enable: iceP_enable, current: current)

        return inS.setResult()
    }

    func _iceD_writeReady(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_enable: Swift.Bool = try inS.read { istr in
            let iceP_enable: Swift.Bool = try istr.read()
            return iceP_enable
        }

        try self.writeReady(enable: iceP_enable, current: current)

        return inS.setResult()
    }

    func _iceD_writeException(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_enable: Swift.Bool = try inS.read { istr in
            let iceP_enable: Swift.Bool = try istr.read()
            return iceP_enable
        }

        try self.writeException(enable: iceP_enable, current: current)

        return inS.setResult()
    }

    func _iceD_buffered(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_enable: Swift.Bool = try inS.read { istr in
            let iceP_enable: Swift.Bool = try istr.read()
            return iceP_enable
        }

        try self.buffered(enable: iceP_enable, current: current)

        return inS.setResult()
    }
}
