//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice interface`PingReply`.
public struct PingReplyTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::PingReply"]
    public static let staticId = "::Test::PingReply"
}

public typealias ByteSeq = Foundation.Data

/// Traits for Slice interface`TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

/// PingReplyPrx overview.
///
/// PingReplyPrx Methods:
///
///  - reply: 
///
///  - replyAsync: 
public protocol PingReplyPrx: Ice.ObjectPrx {}

private final class PingReplyPrxI: Ice.ObjectPrxI, PingReplyPrx {
    public override class func ice_staticId() -> Swift.String {
        return PingReplyTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ProxyParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: PingReplyPrx.Protocol) throws -> PingReplyPrx {
    try communicator.makeProxyImpl(proxyString) as PingReplyPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `PingReplyPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `PingReplyPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: PingReplyPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> PingReplyPrx? {
    return try PingReplyPrxI.checkedCast(prx: prx, facet: facet, context: context) as PingReplyPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `PingReplyPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `PingReplyPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: PingReplyPrx.Protocol, facet: Swift.String? = nil) -> PingReplyPrx {
    return PingReplyPrxI.uncheckedCast(prx: prx, facet: facet) as PingReplyPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `PingReplyPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: PingReplyPrx.Protocol) -> Swift.String {
    return PingReplyTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `PingReplyPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `PingReplyPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `PingReplyPrx?` - The extracted proxy
    func read(_ type: PingReplyPrx.Protocol) throws -> PingReplyPrx? {
        return try read() as PingReplyPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `PingReplyPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `PingReplyPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: PingReplyPrx.Protocol) throws -> PingReplyPrx? {
        return try read(tag: tag) as PingReplyPrxI?
    }
}

/// PingReplyPrx overview.
///
/// PingReplyPrx Methods:
///
///  - reply: 
///
///  - replyAsync: 
public extension PingReplyPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func reply(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "reply",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func replyAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "reply",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - ping: 
///
///  - pingAsync: 
///
///  - sendByteSeq: 
///
///  - sendByteSeqAsync: 
///
///  - pingBiDir: 
///
///  - pingBiDirAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol TestIntfPrx: Ice.ObjectPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ProxyParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestIntfPrx.Protocol) throws -> TestIntfPrx {
    try communicator.makeProxyImpl(proxyString) as TestIntfPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestIntfPrx? {
    return try TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - ping: 
///
///  - pingAsync: 
///
///  - sendByteSeq: 
///
///  - sendByteSeqAsync: 
///
///  - pingBiDir: 
///
///  - pingBiDirAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension TestIntfPrx {
    ///
    /// - parameter _: `PingReplyPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func ping(_ iceP_reply: PingReplyPrx?, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "ping",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_reply)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `PingReplyPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func pingAsync(_ iceP_reply: PingReplyPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "ping",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_reply)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter seq: `ByteSeq`
    ///
    /// - parameter reply: `PingReplyPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func sendByteSeq(seq iceP_seq: ByteSeq, reply iceP_reply: PingReplyPrx?, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "sendByteSeq",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_seq)
                              ostr.write(iceP_reply)
                          },
                          context: context)
    }

    ///
    /// - parameter seq: `ByteSeq`
    ///
    /// - parameter reply: `PingReplyPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func sendByteSeqAsync(seq iceP_seq: ByteSeq, reply iceP_reply: PingReplyPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "sendByteSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_seq)
                                      ostr.write(iceP_reply)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Ice.Identity`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func pingBiDir(_ iceP_reply: Ice.Identity, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "pingBiDir",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_reply)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Ice.Identity`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func pingBiDirAsync(_ iceP_reply: Ice.Identity, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "pingBiDir",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_reply)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `PingReply` servants.
public struct PingReplyDisp: Ice.Dispatcher {
    public let servant: PingReply
    private static let defaultObject = Ice.ObjectI<PingReplyTraits>()

    public init(_ servant: PingReply) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "ice_id":
            (servant as? Ice.Object ?? PingReplyDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? PingReplyDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? PingReplyDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? PingReplyDisp.defaultObject)._iceD_ice_ping(request)
        case "reply":
            servant._iceD_reply(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol PingReply {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func reply(current: Ice.Current) throws
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Dispatcher {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "ice_id":
            (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(request)
        case "ping":
            servant._iceD_ping(request)
        case "pingBiDir":
            servant._iceD_pingBiDir(request)
        case "sendByteSeq":
            servant._iceD_sendByteSeq(request)
        case "shutdown":
            servant._iceD_shutdown(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol TestIntf {
    ///
    /// - parameter reply: `PingReplyPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func ping(reply: PingReplyPrx?, current: Ice.Current) throws

    ///
    /// - parameter seq: `ByteSeq`
    ///
    /// - parameter reply: `PingReplyPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func sendByteSeq(seq: ByteSeq, reply: PingReplyPrx?, current: Ice.Current) throws

    ///
    /// - parameter reply: `Ice.Identity`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func pingBiDir(reply: Ice.Identity, current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws
}

/// PingReply overview.
///
/// PingReply Methods:
///
///  - reply: 
extension PingReply {
    public func _iceD_reply(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.reply(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}

/// TestIntf overview.
///
/// TestIntf Methods:
///
///  - ping: 
///
///  - sendByteSeq: 
///
///  - pingBiDir: 
///
///  - shutdown: 
extension TestIntf {
    public func _iceD_ping(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_reply: PingReplyPrx? = try istr.read(PingReplyPrx.self)

            try self.ping(reply: iceP_reply, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_sendByteSeq(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_seq: ByteSeq = try istr.read()
            let iceP_reply: PingReplyPrx? = try istr.read(PingReplyPrx.self)

            try self.sendByteSeq(seq: iceP_seq, reply: iceP_reply, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_pingBiDir(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_reply: Ice.Identity = try istr.read()

            try self.pingBiDir(reply: iceP_reply, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.shutdown(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}
