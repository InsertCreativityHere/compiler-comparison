//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// :nodoc:
public class UserError_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return UserError.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_UserError() -> Ice.UserExceptionTypeResolver {
        return UserError_TypeResolver()
    }
}

open class UserError: Ice.UserException {
    public var message: Swift.String = ""

    public required init() {}

    public init(message: Swift.String) {
        self.message = message
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::UserError" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: UserError.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.message)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.message = try istr.read()
        try istr.endSlice()
    }
}

/// Traits for Slice interface`MyInterface`.
public struct MyInterfaceTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MyInterface"]
    public static let staticId = "::Test::MyInterface"
}

/// MyInterfacePrx overview.
///
/// MyInterfacePrx Methods:
///
///  - op: 
///
///  - opAsync: 
public protocol MyInterfacePrx: Ice.ObjectPrx {}

private final class MyInterfacePrxI: Ice.ObjectPrxI, MyInterfacePrx {
    public override class func ice_staticId() -> Swift.String {
        return MyInterfaceTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: MyInterfacePrx.Protocol) throws -> MyInterfacePrx {
    try communicator.makeProxyImpl(proxyString) as MyInterfacePrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MyInterfacePrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MyInterfacePrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MyInterfacePrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MyInterfacePrx? {
    return try MyInterfacePrxI.checkedCast(prx: prx, facet: facet, context: context) as MyInterfacePrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MyInterfacePrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MyInterfacePrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MyInterfacePrx.Protocol, facet: Swift.String? = nil) -> MyInterfacePrx {
    return MyInterfacePrxI.uncheckedCast(prx: prx, facet: facet) as MyInterfacePrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `MyInterfacePrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: MyInterfacePrx.Protocol) -> Swift.String {
    return MyInterfaceTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MyInterfacePrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MyInterfacePrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MyInterfacePrx?` - The extracted proxy
    func read(_ type: MyInterfacePrx.Protocol) throws -> MyInterfacePrx? {
        return try read() as MyInterfacePrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MyInterfacePrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MyInterfacePrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MyInterfacePrx.Protocol) throws -> MyInterfacePrx? {
        return try read(tag: tag) as MyInterfacePrxI?
    }
}

/// MyInterfacePrx overview.
///
/// MyInterfacePrx Methods:
///
///  - op: 
///
///  - opAsync: 
public extension MyInterfacePrx {
    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func op(_ iceP_throwIt: Swift.Bool, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "op",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_throwIt)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as UserError {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `` - The result of the operation
    func opAsync(_ iceP_throwIt: Swift.Bool, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "op",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_throwIt)
                                            },
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as UserError {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context)
    }
}


/// Dispatcher for `MyInterface` servants.
public struct MyInterfaceDisp: Ice.Dispatcher {
    public let servant: MyInterface
    private static let defaultObject = Ice.ObjectI<MyInterfaceTraits>()

    public init(_ servant: MyInterface) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try (servant as? Ice.Object ?? MyInterfaceDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try (servant as? Ice.Object ?? MyInterfaceDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try (servant as? Ice.Object ?? MyInterfaceDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try (servant as? Ice.Object ?? MyInterfaceDisp.defaultObject)._iceD_ice_ping(request)
        case "op":
            try await servant._iceD_op(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol MyInterface {
    ///
    /// - parameter throwIt: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func op(throwIt: Swift.Bool, current: Ice.Current) throws
}

/// MyInterface overview.
///
/// MyInterface Methods:
///
///  - op: 
extension MyInterface {
    public func _iceD_op(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_throwIt: Swift.Bool = try istr.read()

        try self.op(throwIt: iceP_throwIt, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
