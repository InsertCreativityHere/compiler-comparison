//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `WstringAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public typealias WstringSeq = [Swift.String]

public typealias WstringWStringDict = [Swift.String: Swift.String]

/// Helper class to read and write `WstringWStringDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct WstringWStringDictHelper {
    /// Read a `WstringWStringDict` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> WstringWStringDict {
        let sz = try Swift.Int(istr.readSize())
        var v = WstringWStringDict()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: Swift.String = try istr.read()
            v[key] = value
        }
        return v
    }

    /// Read an optional `WstringWStringDict?` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> WstringWStringDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Write a `WstringWStringDict` dictionary to the stream.
    ///
    /// - Parameter ostr: The stream to write to.
    /// - Parameter value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: WstringWStringDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Write an optional `WstringWStringDict?` dictionary to the stream.
    ///
    /// - Parameters:
    ///   - ostr: The stream to write to.
    ///   - tag: The numeric tag associated with the value.
    ///   - value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: WstringWStringDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public struct WstringStruct: Swift.Hashable {
    public var s: Swift.String = ""

    public init() {}

    public init(s: Swift.String) {
        self.s = s
    }
}

/// An `Ice.InputStream` extension to read `WstringStruct` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `WstringStruct` structured value from the stream.
    ///
    /// - Returns: The structured value read from the stream.
    func read() throws -> WstringStruct {
        var v = WstringStruct()
        v.s = try self.read()
        return v
    }

    /// Read an optional `WstringStruct?` structured value from the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> WstringStruct? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as WstringStruct
    }
}

/// An `Ice.OutputStream` extension to write `WstringStruct` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `WstringStruct` structured value to the stream.
    ///
    /// - Parameter v: The value to write to the stream.
    func write(_ v: WstringStruct) {
        self.write(v.s)
    }

    /// Write an optional `WstringStruct?` structured value to the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    /// - Parameter value: The value to write to the stream.
    func write(tag: Swift.Int32, value: WstringStruct?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// :nodoc:
public class WstringException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return WstringException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test1_WstringException() -> Ice.UserExceptionTypeResolver {
        return WstringException_TypeResolver()
    }
}

open class WstringException: Ice.UserException, @unchecked Sendable {
    public var reason: Swift.String = ""

    public required init() {}

    public init(reason: Swift.String) {
        self.reason = reason
    }

    /// - Returns: The Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test1::WstringException" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: WstringException.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.reason)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.reason = try istr.read()
        try istr.endSlice()
    }
}

/// Traits for Slice interface `WstringClass`.
public struct WstringClassTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test1::WstringClass"]
    public static let staticId = "::Test1::WstringClass"
}

public typealias WstringSeq = [Swift.String]

public typealias WstringWStringDict = [Swift.String: Swift.String]

/// Helper class to read and write `WstringWStringDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct WstringWStringDictHelper {
    /// Read a `WstringWStringDict` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> WstringWStringDict {
        let sz = try Swift.Int(istr.readSize())
        var v = WstringWStringDict()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: Swift.String = try istr.read()
            v[key] = value
        }
        return v
    }

    /// Read an optional `WstringWStringDict?` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> WstringWStringDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Write a `WstringWStringDict` dictionary to the stream.
    ///
    /// - Parameter ostr: The stream to write to.
    /// - Parameter value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: WstringWStringDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Write an optional `WstringWStringDict?` dictionary to the stream.
    ///
    /// - Parameters:
    ///   - ostr: The stream to write to.
    ///   - tag: The numeric tag associated with the value.
    ///   - value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: WstringWStringDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public struct WstringStruct: Swift.Hashable {
    public var s: Swift.String = ""

    public init() {}

    public init(s: Swift.String) {
        self.s = s
    }
}

/// An `Ice.InputStream` extension to read `WstringStruct` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `WstringStruct` structured value from the stream.
    ///
    /// - Returns: The structured value read from the stream.
    func read() throws -> WstringStruct {
        var v = WstringStruct()
        v.s = try self.read()
        return v
    }

    /// Read an optional `WstringStruct?` structured value from the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> WstringStruct? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as WstringStruct
    }
}

/// An `Ice.OutputStream` extension to write `WstringStruct` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `WstringStruct` structured value to the stream.
    ///
    /// - Parameter v: The value to write to the stream.
    func write(_ v: WstringStruct) {
        self.write(v.s)
    }

    /// Write an optional `WstringStruct?` structured value to the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    /// - Parameter value: The value to write to the stream.
    func write(tag: Swift.Int32, value: WstringStruct?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// :nodoc:
public class WstringException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return WstringException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test2_WstringException() -> Ice.UserExceptionTypeResolver {
        return WstringException_TypeResolver()
    }
}

open class WstringException: Ice.UserException, @unchecked Sendable {
    public var reason: Swift.String = ""

    public required init() {}

    public init(reason: Swift.String) {
        self.reason = reason
    }

    /// - Returns: The Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test2::WstringException" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: WstringException.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.reason)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.reason = try istr.read()
        try istr.endSlice()
    }
}

/// Traits for Slice interface `WstringClass`.
public struct WstringClassTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test2::WstringClass"]
    public static let staticId = "::Test2::WstringClass"
}

public protocol WstringClassPrx: Ice.ObjectPrx {}

private final class WstringClassPrxI: Ice.ObjectPrxI, WstringClassPrx {
    public override class func ice_staticId() -> Swift.String {
        return WstringClassTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: WstringClassPrx.Protocol) throws -> WstringClassPrx {
    try communicator.makeProxyImpl(proxyString) as WstringClassPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: WstringClassPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> WstringClassPrx? {
    return try await WstringClassPrxI.checkedCast(prx: prx, facet: facet, context: context) as WstringClassPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: WstringClassPrx.Protocol, facet: Swift.String? = nil) -> WstringClassPrx {
    return WstringClassPrxI.uncheckedCast(prx: prx, facet: facet) as WstringClassPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: WstringClassPrx.Protocol) -> Swift.String {
    return WstringClassTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `WstringClassPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: WstringClassPrx.Protocol) throws -> WstringClassPrx? {
        return try read() as WstringClassPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: WstringClassPrx.Protocol) throws -> WstringClassPrx? {
        return try read(tag: tag) as WstringClassPrxI?
    }
}

public extension WstringClassPrx {
    func opString(_ iceP_s1: Swift.String, context: Ice.Context? = nil) async throws -> (returnValue: Swift.String, s2: Swift.String) {
        return try await _impl._invoke(operation: "opString",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_s1)
                                       },
                                       read: { istr in
                                           let iceP_s2: Swift.String = try istr.read()
                                           let iceP_returnValue: Swift.String = try istr.read()
                                           return (iceP_returnValue, iceP_s2)
                                       },
                                       context: context)
    }

    func opStruct(_ iceP_s1: WstringStruct, context: Ice.Context? = nil) async throws -> (returnValue: WstringStruct, s2: WstringStruct) {
        return try await _impl._invoke(operation: "opStruct",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_s1)
                                       },
                                       read: { istr in
                                           let iceP_s2: WstringStruct = try istr.read()
                                           let iceP_returnValue: WstringStruct = try istr.read()
                                           return (iceP_returnValue, iceP_s2)
                                       },
                                       context: context)
    }

    func throwExcept(_ iceP_reason: Swift.String, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "throwExcept",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_reason)
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as WstringException {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }
}

public protocol WstringClassPrx: Ice.ObjectPrx {}

private final class WstringClassPrxI: Ice.ObjectPrxI, WstringClassPrx {
    public override class func ice_staticId() -> Swift.String {
        return WstringClassTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: WstringClassPrx.Protocol) throws -> WstringClassPrx {
    try communicator.makeProxyImpl(proxyString) as WstringClassPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: WstringClassPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> WstringClassPrx? {
    return try await WstringClassPrxI.checkedCast(prx: prx, facet: facet, context: context) as WstringClassPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: WstringClassPrx.Protocol, facet: Swift.String? = nil) -> WstringClassPrx {
    return WstringClassPrxI.uncheckedCast(prx: prx, facet: facet) as WstringClassPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: WstringClassPrx.Protocol) -> Swift.String {
    return WstringClassTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `WstringClassPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: WstringClassPrx.Protocol) throws -> WstringClassPrx? {
        return try read() as WstringClassPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: WstringClassPrx.Protocol) throws -> WstringClassPrx? {
        return try read(tag: tag) as WstringClassPrxI?
    }
}

public extension WstringClassPrx {
    func opString(_ iceP_s1: Swift.String, context: Ice.Context? = nil) async throws -> (returnValue: Swift.String, s2: Swift.String) {
        return try await _impl._invoke(operation: "opString",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_s1)
                                       },
                                       read: { istr in
                                           let iceP_s2: Swift.String = try istr.read()
                                           let iceP_returnValue: Swift.String = try istr.read()
                                           return (iceP_returnValue, iceP_s2)
                                       },
                                       context: context)
    }

    func opStruct(_ iceP_s1: WstringStruct, context: Ice.Context? = nil) async throws -> (returnValue: WstringStruct, s2: WstringStruct) {
        return try await _impl._invoke(operation: "opStruct",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_s1)
                                       },
                                       read: { istr in
                                           let iceP_s2: WstringStruct = try istr.read()
                                           let iceP_returnValue: WstringStruct = try istr.read()
                                           return (iceP_returnValue, iceP_s2)
                                       },
                                       context: context)
    }

    func throwExcept(_ iceP_reason: Swift.String, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "throwExcept",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_reason)
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as WstringException {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }
}


/// Dispatcher for `WstringClass` servants.
public struct WstringClassDisp: Ice.Dispatcher {
    public let servant: WstringClass
    private static let defaultObject = Ice.ObjectI<WstringClassTraits>()

    public init(_ servant: WstringClass) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? WstringClassDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? WstringClassDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? WstringClassDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? WstringClassDisp.defaultObject)._iceD_ice_ping(request)
        case "opString":
            try await servant._iceD_opString(request)
        case "opStruct":
            try await servant._iceD_opStruct(request)
        case "throwExcept":
            try await servant._iceD_throwExcept(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol WstringClass {
    func opString(s1: Swift.String, current: Ice.Current) async throws -> (returnValue: Swift.String, s2: Swift.String)

    func opStruct(s1: WstringStruct, current: Ice.Current) async throws -> (returnValue: WstringStruct, s2: WstringStruct)

    func throwExcept(reason: Swift.String, current: Ice.Current) async throws
}


/// Dispatcher for `WstringClass` servants.
public struct WstringClassDisp: Ice.Dispatcher {
    public let servant: WstringClass
    private static let defaultObject = Ice.ObjectI<WstringClassTraits>()

    public init(_ servant: WstringClass) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? WstringClassDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? WstringClassDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? WstringClassDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? WstringClassDisp.defaultObject)._iceD_ice_ping(request)
        case "opString":
            try await servant._iceD_opString(request)
        case "opStruct":
            try await servant._iceD_opStruct(request)
        case "throwExcept":
            try await servant._iceD_throwExcept(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol WstringClass {
    func opString(s1: Swift.String, current: Ice.Current) async throws -> (returnValue: Swift.String, s2: Swift.String)

    func opStruct(s1: WstringStruct, current: Ice.Current) async throws -> (returnValue: WstringStruct, s2: WstringStruct)

    func throwExcept(reason: Swift.String, current: Ice.Current) async throws
}

extension WstringClass {
    public func _iceD_opString(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_s1: Swift.String = try istr.read()
        let result = try await self.opString(s1: iceP_s1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_s2) = value
            ostr.write(iceP_s2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opStruct(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_s1: WstringStruct = try istr.read()
        let result = try await self.opStruct(s1: iceP_s1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_s2) = value
            ostr.write(iceP_s2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_throwExcept(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_reason: Swift.String = try istr.read()
        try await self.throwExcept(reason: iceP_reason, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

extension WstringClass {
    public func _iceD_opString(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_s1: Swift.String = try istr.read()
        let result = try await self.opString(s1: iceP_s1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_s2) = value
            ostr.write(iceP_s2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opStruct(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_s1: WstringStruct = try istr.read()
        let result = try await self.opStruct(s1: iceP_s1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_s2) = value
            ostr.write(iceP_s2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_throwExcept(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_reason: Swift.String = try istr.read()
        try await self.throwExcept(reason: iceP_reason, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
