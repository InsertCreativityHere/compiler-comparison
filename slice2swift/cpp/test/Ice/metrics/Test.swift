//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// :nodoc:
public class UserEx_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return UserEx.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_UserEx() -> Ice.UserExceptionTypeResolver {
        return UserEx_TypeResolver()
    }
}

open class UserEx: Ice.UserException, @unchecked Sendable {
    /// - Returns: The Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::UserEx" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: UserEx.ice_staticId(), compactId: -1, last: true)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }
}

public typealias ByteSeq = Foundation.Data

/// Traits for Slice interface `Metrics`.
public struct MetricsTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Metrics"]
    public static let staticId = "::Test::Metrics"
}

/// Traits for Slice interface `Controller`.
public struct ControllerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Controller"]
    public static let staticId = "::Test::Controller"
}

public protocol MetricsPrx: Ice.ObjectPrx {}

private final class MetricsPrxI: Ice.ObjectPrxI, MetricsPrx {
    public override class func ice_staticId() -> Swift.String {
        return MetricsTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: MetricsPrx.Protocol) throws -> MetricsPrx {
    try communicator.makeProxyImpl(proxyString) as MetricsPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MetricsPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> MetricsPrx? {
    return try await MetricsPrxI.checkedCast(prx: prx, facet: facet, context: context) as MetricsPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: MetricsPrx.Protocol, facet: Swift.String? = nil) -> MetricsPrx {
    return MetricsPrxI.uncheckedCast(prx: prx, facet: facet) as MetricsPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: MetricsPrx.Protocol) -> Swift.String {
    return MetricsTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `MetricsPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: MetricsPrx.Protocol) throws -> MetricsPrx? {
        return try read() as MetricsPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: MetricsPrx.Protocol) throws -> MetricsPrx? {
        return try read(tag: tag) as MetricsPrxI?
    }
}

public extension MetricsPrx {
    func op(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "op",
                                       mode: .Normal,
                                       context: context)
    }

    func fail(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "fail",
                                       mode: .Idempotent,
                                       context: context)
    }

    func opWithUserException(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "opWithUserException",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as UserEx {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func opWithRequestFailedException(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "opWithRequestFailedException",
                                       mode: .Normal,
                                       context: context)
    }

    func opWithLocalException(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "opWithLocalException",
                                       mode: .Normal,
                                       context: context)
    }

    func opWithUnknownException(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "opWithUnknownException",
                                       mode: .Normal,
                                       context: context)
    }

    func opByteS(_ iceP_bs: ByteSeq, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "opByteS",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_bs)
                                       },
                                       context: context)
    }

    func getAdmin(context: Ice.Context? = nil) async throws -> Ice.ObjectPrx? {
        return try await _impl._invoke(operation: "getAdmin",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: Ice.ObjectPrx? = try istr.read(Ice.ObjectPrx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func shutdown(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "shutdown",
                                       mode: .Normal,
                                       context: context)
    }
}

public protocol ControllerPrx: Ice.ObjectPrx {}

private final class ControllerPrxI: Ice.ObjectPrxI, ControllerPrx {
    public override class func ice_staticId() -> Swift.String {
        return ControllerTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: ControllerPrx.Protocol) throws -> ControllerPrx {
    try communicator.makeProxyImpl(proxyString) as ControllerPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: ControllerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> ControllerPrx? {
    return try await ControllerPrxI.checkedCast(prx: prx, facet: facet, context: context) as ControllerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: ControllerPrx.Protocol, facet: Swift.String? = nil) -> ControllerPrx {
    return ControllerPrxI.uncheckedCast(prx: prx, facet: facet) as ControllerPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: ControllerPrx.Protocol) -> Swift.String {
    return ControllerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `ControllerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: ControllerPrx.Protocol) throws -> ControllerPrx? {
        return try read() as ControllerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: ControllerPrx.Protocol) throws -> ControllerPrx? {
        return try read(tag: tag) as ControllerPrxI?
    }
}

public extension ControllerPrx {
    func hold(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "hold",
                                       mode: .Normal,
                                       context: context)
    }

    func resume(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "resume",
                                       mode: .Normal,
                                       context: context)
    }
}


/// Dispatcher for `Metrics` servants.
public struct MetricsDisp: Ice.Dispatcher {
    public let servant: Metrics
    private static let defaultObject = Ice.ObjectI<MetricsTraits>()

    public init(_ servant: Metrics) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "fail":
            try await servant._iceD_fail(request)
        case "getAdmin":
            try await servant._iceD_getAdmin(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? MetricsDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? MetricsDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? MetricsDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? MetricsDisp.defaultObject)._iceD_ice_ping(request)
        case "op":
            try await servant._iceD_op(request)
        case "opByteS":
            try await servant._iceD_opByteS(request)
        case "opWithLocalException":
            try await servant._iceD_opWithLocalException(request)
        case "opWithRequestFailedException":
            try await servant._iceD_opWithRequestFailedException(request)
        case "opWithUnknownException":
            try await servant._iceD_opWithUnknownException(request)
        case "opWithUserException":
            try await servant._iceD_opWithUserException(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol Metrics {
    func op(current: Ice.Current) async throws

    func fail(current: Ice.Current) async throws

    func opWithUserException(current: Ice.Current) async throws

    func opWithRequestFailedException(current: Ice.Current) async throws

    func opWithLocalException(current: Ice.Current) async throws

    func opWithUnknownException(current: Ice.Current) async throws

    func opByteS(bs: ByteSeq, current: Ice.Current) async throws

    func getAdmin(current: Ice.Current) async throws -> Ice.ObjectPrx?

    func shutdown(current: Ice.Current) async throws
}


/// Dispatcher for `Controller` servants.
public struct ControllerDisp: Ice.Dispatcher {
    public let servant: Controller
    private static let defaultObject = Ice.ObjectI<ControllerTraits>()

    public init(_ servant: Controller) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "hold":
            try await servant._iceD_hold(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? ControllerDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? ControllerDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? ControllerDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? ControllerDisp.defaultObject)._iceD_ice_ping(request)
        case "resume":
            try await servant._iceD_resume(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol Controller {
    func hold(current: Ice.Current) async throws

    func resume(current: Ice.Current) async throws
}

extension Metrics {
    public func _iceD_op(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.op(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_fail(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.fail(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_opWithUserException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.opWithUserException(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_opWithRequestFailedException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.opWithRequestFailedException(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_opWithLocalException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.opWithLocalException(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_opWithUnknownException(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.opWithUnknownException(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_opByteS(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_bs: ByteSeq = try istr.read()
        try await self.opByteS(bs: iceP_bs, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_getAdmin(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getAdmin(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

extension Controller {
    public func _iceD_hold(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.hold(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_resume(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.resume(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
