//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// Traits for Slice interface`DelayedTestIntf`.
public struct DelayedTestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::DelayedTestIntf"]
    public static let staticId = "::Test::DelayedTestIntf"
}

/// Traits for Slice interface`TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::DelayedTestIntf", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

/// Traits for Slice interface`TestIntfBidir`.
public struct TestIntfBidirTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntfBidir"]
    public static let staticId = "::Test::TestIntfBidir"
}

/// DelayedTestIntfPrx overview.
///
/// DelayedTestIntfPrx Methods:
///
///  - sleep: 
///
///  - sleepAsync: 
public protocol DelayedTestIntfPrx: Ice.ObjectPrx {}

private final class DelayedTestIntfPrxI: Ice.ObjectPrxI, DelayedTestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return DelayedTestIntfTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: DelayedTestIntfPrx.Protocol) throws -> DelayedTestIntfPrx {
    try communicator.makeProxyImpl(proxyString) as DelayedTestIntfPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `DelayedTestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `DelayedTestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: DelayedTestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> DelayedTestIntfPrx? {
    return try DelayedTestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as DelayedTestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `DelayedTestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `DelayedTestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: DelayedTestIntfPrx.Protocol, facet: Swift.String? = nil) -> DelayedTestIntfPrx {
    return DelayedTestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as DelayedTestIntfPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `DelayedTestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: DelayedTestIntfPrx.Protocol) -> Swift.String {
    return DelayedTestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `DelayedTestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `DelayedTestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `DelayedTestIntfPrx?` - The extracted proxy
    func read(_ type: DelayedTestIntfPrx.Protocol) throws -> DelayedTestIntfPrx? {
        return try read() as DelayedTestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `DelayedTestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `DelayedTestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: DelayedTestIntfPrx.Protocol) throws -> DelayedTestIntfPrx? {
        return try read(tag: tag) as DelayedTestIntfPrxI?
    }
}

/// DelayedTestIntfPrx overview.
///
/// DelayedTestIntfPrx Methods:
///
///  - sleep: 
///
///  - sleepAsync: 
public extension DelayedTestIntfPrx {
    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func sleep(_ iceP_ms: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "sleep",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_ms)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `` - The result of the operation
    func sleepAsync(_ iceP_ms: Swift.Int32, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "sleep",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_ms)
                                            },
                                            context: context)
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol TestIntfPrx: DelayedTestIntfPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestIntfPrx.Protocol) throws -> TestIntfPrx {
    try communicator.makeProxyImpl(proxyString) as TestIntfPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestIntfPrx? {
    return try TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension TestIntfPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "shutdown",
                                            mode: .Normal,
                                            context: context)
    }
}

/// TestIntfBidirPrx overview.
///
/// TestIntfBidirPrx Methods:
///
///  - makeSleep: 
///
///  - makeSleepAsync: 
public protocol TestIntfBidirPrx: Ice.ObjectPrx {}

private final class TestIntfBidirPrxI: Ice.ObjectPrxI, TestIntfBidirPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfBidirTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestIntfBidirPrx.Protocol) throws -> TestIntfBidirPrx {
    try communicator.makeProxyImpl(proxyString) as TestIntfBidirPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfBidirPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfBidirPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfBidirPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestIntfBidirPrx? {
    return try TestIntfBidirPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfBidirPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfBidirPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfBidirPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfBidirPrx.Protocol, facet: Swift.String? = nil) -> TestIntfBidirPrx {
    return TestIntfBidirPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfBidirPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `TestIntfBidirPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestIntfBidirPrx.Protocol) -> Swift.String {
    return TestIntfBidirTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfBidirPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfBidirPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfBidirPrx?` - The extracted proxy
    func read(_ type: TestIntfBidirPrx.Protocol) throws -> TestIntfBidirPrx? {
        return try read() as TestIntfBidirPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfBidirPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfBidirPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfBidirPrx.Protocol) throws -> TestIntfBidirPrx? {
        return try read(tag: tag) as TestIntfBidirPrxI?
    }
}

/// TestIntfBidirPrx overview.
///
/// TestIntfBidirPrx Methods:
///
///  - makeSleep: 
///
///  - makeSleepAsync: 
public extension TestIntfBidirPrx {
    ///
    /// - parameter aborted: `Swift.Bool`
    ///
    /// - parameter ms: `Swift.Int32`
    ///
    /// - parameter target: `DelayedTestIntfPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func makeSleep(aborted iceP_aborted: Swift.Bool, ms iceP_ms: Swift.Int32, target iceP_target: DelayedTestIntfPrx?, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "makeSleep",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_aborted)
                              ostr.write(iceP_ms)
                              ostr.write(iceP_target)
                          },
                          context: context)
    }

    ///
    /// - parameter aborted: `Swift.Bool`
    ///
    /// - parameter ms: `Swift.Int32`
    ///
    /// - parameter target: `DelayedTestIntfPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `` - The result of the operation
    func makeSleepAsync(aborted iceP_aborted: Swift.Bool, ms iceP_ms: Swift.Int32, target iceP_target: DelayedTestIntfPrx?, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "makeSleep",
                                            mode: .Normal,
                                            write: { ostr in
                                                ostr.write(iceP_aborted)
                                                ostr.write(iceP_ms)
                                                ostr.write(iceP_target)
                                            },
                                            context: context)
    }
}


/// Dispatcher for `DelayedTestIntf` servants.
public struct DelayedTestIntfDisp: Ice.Dispatcher {
    public let servant: DelayedTestIntf
    private static let defaultObject = Ice.ObjectI<DelayedTestIntfTraits>()

    public init(_ servant: DelayedTestIntf) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? DelayedTestIntfDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? DelayedTestIntfDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? DelayedTestIntfDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? DelayedTestIntfDisp.defaultObject)._iceD_ice_ping(request)
        case "sleep":
            try await servant._iceD_sleep(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol DelayedTestIntf {
    ///
    /// - parameter ms: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func sleep(ms: Swift.Int32, current: Ice.Current) async throws
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Dispatcher {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        case "sleep":
            try await servant._iceD_sleep(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol TestIntf: DelayedTestIntf {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func shutdown(current: Ice.Current) async throws
}


/// Dispatcher for `TestIntfBidir` servants.
public struct TestIntfBidirDisp: Ice.Dispatcher {
    public let servant: TestIntfBidir
    private static let defaultObject = Ice.ObjectI<TestIntfBidirTraits>()

    public init(_ servant: TestIntfBidir) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? TestIntfBidirDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? TestIntfBidirDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? TestIntfBidirDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? TestIntfBidirDisp.defaultObject)._iceD_ice_ping(request)
        case "makeSleep":
            try await servant._iceD_makeSleep(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol TestIntfBidir {
    ///
    /// - parameter aborted: `Swift.Bool`
    ///
    /// - parameter ms: `Swift.Int32`
    ///
    /// - parameter target: `DelayedTestIntfPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func makeSleep(aborted: Swift.Bool, ms: Swift.Int32, target: DelayedTestIntfPrx?, current: Ice.Current) async throws
}

/// DelayedTestIntf overview.
///
/// DelayedTestIntf Methods:
///
///  - sleep: 
extension DelayedTestIntf {
    public func _iceD_sleep(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_ms: Swift.Int32 = try istr.read()
        try await self.sleep(ms: iceP_ms, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// TestIntf overview.
///
/// TestIntf Methods:
///
///  - shutdown: 
extension TestIntf {
    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// TestIntfBidir overview.
///
/// TestIntfBidir Methods:
///
///  - makeSleep: 
extension TestIntfBidir {
    public func _iceD_makeSleep(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_aborted: Swift.Bool = try istr.read()
        let iceP_ms: Swift.Int32 = try istr.read()
        let iceP_target: DelayedTestIntfPrx? = try istr.read(DelayedTestIntfPrx.self)
        try await self.makeSleep(aborted: iceP_aborted, ms: iceP_ms, target: iceP_target, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
