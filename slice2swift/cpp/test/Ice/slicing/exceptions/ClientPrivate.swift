//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// Traits for Slice class `PreservedClass`.
public struct PreservedClassTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::BaseClass", "::Test::PreservedClass"]
    public static let staticId = "::Test::PreservedClass"
}

/// :nodoc:
public class Preserved1_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return Preserved1.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Preserved1() -> Ice.UserExceptionTypeResolver {
        return Preserved1_TypeResolver()
    }
}

open class Preserved1: KnownPreservedDerived {
    public var p1: BaseClass? = nil

    public required init() {
        super.init()
    }

    public init(b: Swift.String, kp: Swift.String, kpd: Swift.String, p1: BaseClass?) {
        self.p1 = p1
        super.init(b: b, kp: kp, kpd: kpd)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::Preserved1"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: Preserved1.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.p1)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.read(BaseClass.self) { self.p1 = $0 }
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _usesClasses() -> Swift.Bool {
        return true
    }
}

/// :nodoc:
public class Preserved2_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return Preserved2.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Preserved2() -> Ice.UserExceptionTypeResolver {
        return Preserved2_TypeResolver()
    }
}

open class Preserved2: Preserved1 {
    public var p2: BaseClass? = nil

    public required init() {
        super.init()
    }

    public init(b: Swift.String, kp: Swift.String, kpd: Swift.String, p1: BaseClass?, p2: BaseClass?) {
        self.p2 = p2
        super.init(b: b, kp: kp, kpd: kpd, p1: p1)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::Preserved2"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: Preserved2.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.p2)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.read(BaseClass.self) { self.p2 = $0 }
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class PreservedClass_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return PreservedClass.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_PreservedClass() -> Ice.ValueTypeResolver {
        return PreservedClass_TypeResolver()
    }
}

open class PreservedClass: BaseClass {
    public var pc: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(bc: Swift.String, pc: Swift.String) {
        self.pc = pc
        super.init(bc: bc)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return PreservedClassTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return PreservedClassTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.pc = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: PreservedClassTraits.staticId, compactId: -1, last: false)
        ostr.write(self.pc)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}
