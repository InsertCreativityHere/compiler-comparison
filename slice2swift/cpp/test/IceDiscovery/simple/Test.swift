//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// Traits for Slice interface`TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

/// Traits for Slice interface`Controller`.
public struct ControllerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Controller"]
    public static let staticId = "::Test::Controller"
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - getAdapterId: 
///
///  - getAdapterIdAsync: 
public protocol TestIntfPrx: Ice.ObjectPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestIntfPrx.Protocol) throws -> TestIntfPrx {
    try communicator.makeProxyImpl(proxyString) as TestIntfPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> TestIntfPrx? {
    return try await TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - getAdapterId: 
///
///  - getAdapterIdAsync: 
public extension TestIntfPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.String`
    func getAdapterId(context: Ice.Context? = nil) async throws -> Swift.String {
        return try await _impl._invoke(operation: "getAdapterId",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: Swift.String = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}

/// ControllerPrx overview.
///
/// ControllerPrx Methods:
///
///  - activateObjectAdapter: 
///
///  - activateObjectAdapterAsync: 
///
///  - deactivateObjectAdapter: 
///
///  - deactivateObjectAdapterAsync: 
///
///  - addObject: 
///
///  - addObjectAsync: 
///
///  - removeObject: 
///
///  - removeObjectAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol ControllerPrx: Ice.ObjectPrx {}

private final class ControllerPrxI: Ice.ObjectPrxI, ControllerPrx {
    public override class func ice_staticId() -> Swift.String {
        return ControllerTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: ControllerPrx.Protocol) throws -> ControllerPrx {
    try communicator.makeProxyImpl(proxyString) as ControllerPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `ControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `ControllerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: ControllerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> ControllerPrx? {
    return try await ControllerPrxI.checkedCast(prx: prx, facet: facet, context: context) as ControllerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `ControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `ControllerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: ControllerPrx.Protocol, facet: Swift.String? = nil) -> ControllerPrx {
    return ControllerPrxI.uncheckedCast(prx: prx, facet: facet) as ControllerPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `ControllerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: ControllerPrx.Protocol) -> Swift.String {
    return ControllerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `ControllerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `ControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ControllerPrx?` - The extracted proxy
    func read(_ type: ControllerPrx.Protocol) throws -> ControllerPrx? {
        return try read() as ControllerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `ControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ControllerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: ControllerPrx.Protocol) throws -> ControllerPrx? {
        return try read(tag: tag) as ControllerPrxI?
    }
}

/// ControllerPrx overview.
///
/// ControllerPrx Methods:
///
///  - activateObjectAdapter: 
///
///  - activateObjectAdapterAsync: 
///
///  - deactivateObjectAdapter: 
///
///  - deactivateObjectAdapterAsync: 
///
///  - addObject: 
///
///  - addObjectAsync: 
///
///  - removeObject: 
///
///  - removeObjectAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension ControllerPrx {
    ///
    /// - parameter name: `Swift.String`
    ///
    /// - parameter adapterId: `Swift.String`
    ///
    /// - parameter replicaGroupId: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func activateObjectAdapter(name iceP_name: Swift.String, adapterId iceP_adapterId: Swift.String, replicaGroupId iceP_replicaGroupId: Swift.String, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "activateObjectAdapter",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_name)
                                           ostr.write(iceP_adapterId)
                                           ostr.write(iceP_replicaGroupId)
                                       },
                                       context: context)
    }

    ///
    /// - parameter _: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func deactivateObjectAdapter(_ iceP_name: Swift.String, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "deactivateObjectAdapter",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_name)
                                       },
                                       context: context)
    }

    ///
    /// - parameter oaName: `Swift.String`
    ///
    /// - parameter id: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func addObject(oaName iceP_oaName: Swift.String, id iceP_id: Swift.String, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "addObject",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_oaName)
                                           ostr.write(iceP_id)
                                       },
                                       context: context)
    }

    ///
    /// - parameter oaName: `Swift.String`
    ///
    /// - parameter id: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func removeObject(oaName iceP_oaName: Swift.String, id iceP_id: Swift.String, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "removeObject",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_oaName)
                                           ostr.write(iceP_id)
                                       },
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "shutdown",
                                       mode: .Normal,
                                       context: context)
    }
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Dispatcher {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "getAdapterId":
            try await servant._iceD_getAdapterId(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol TestIntf {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.String`
    func getAdapterId(current: Ice.Current) async throws -> Swift.String
}


/// Dispatcher for `Controller` servants.
public struct ControllerDisp: Ice.Dispatcher {
    public let servant: Controller
    private static let defaultObject = Ice.ObjectI<ControllerTraits>()

    public init(_ servant: Controller) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "activateObjectAdapter":
            try await servant._iceD_activateObjectAdapter(request)
        case "addObject":
            try await servant._iceD_addObject(request)
        case "deactivateObjectAdapter":
            try await servant._iceD_deactivateObjectAdapter(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? ControllerDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? ControllerDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? ControllerDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? ControllerDisp.defaultObject)._iceD_ice_ping(request)
        case "removeObject":
            try await servant._iceD_removeObject(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol Controller {
    ///
    /// - parameter name: `Swift.String`
    ///
    /// - parameter adapterId: `Swift.String`
    ///
    /// - parameter replicaGroupId: `Swift.String`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func activateObjectAdapter(name: Swift.String, adapterId: Swift.String, replicaGroupId: Swift.String, current: Ice.Current) async throws

    ///
    /// - parameter name: `Swift.String`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func deactivateObjectAdapter(name: Swift.String, current: Ice.Current) async throws

    ///
    /// - parameter oaName: `Swift.String`
    ///
    /// - parameter id: `Swift.String`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func addObject(oaName: Swift.String, id: Swift.String, current: Ice.Current) async throws

    ///
    /// - parameter oaName: `Swift.String`
    ///
    /// - parameter id: `Swift.String`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func removeObject(oaName: Swift.String, id: Swift.String, current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) async throws
}

/// TestIntf overview.
///
/// TestIntf Methods:
///
///  - getAdapterId: 
extension TestIntf {
    public func _iceD_getAdapterId(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getAdapterId(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}

/// Controller overview.
///
/// Controller Methods:
///
///  - activateObjectAdapter: 
///
///  - deactivateObjectAdapter: 
///
///  - addObject: 
///
///  - removeObject: 
///
///  - shutdown: 
extension Controller {
    public func _iceD_activateObjectAdapter(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_name: Swift.String = try istr.read()
        let iceP_adapterId: Swift.String = try istr.read()
        let iceP_replicaGroupId: Swift.String = try istr.read()
        try await self.activateObjectAdapter(name: iceP_name, adapterId: iceP_adapterId, replicaGroupId: iceP_replicaGroupId, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_deactivateObjectAdapter(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_name: Swift.String = try istr.read()
        try await self.deactivateObjectAdapter(name: iceP_name, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_addObject(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_oaName: Swift.String = try istr.read()
        let iceP_id: Swift.String = try istr.read()
        try await self.addObject(oaName: iceP_oaName, id: iceP_id, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_removeObject(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_oaName: Swift.String = try istr.read()
        let iceP_id: Swift.String = try istr.read()
        try await self.removeObject(oaName: iceP_oaName, id: iceP_id, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
