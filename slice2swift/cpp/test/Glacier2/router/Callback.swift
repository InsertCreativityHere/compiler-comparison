//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Callback.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// :nodoc:
public class CallbackException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return CallbackException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_CallbackException() -> Ice.UserExceptionTypeResolver {
        return CallbackException_TypeResolver()
    }
}

open class CallbackException: Ice.UserException, @unchecked Sendable {
    public var someValue: Swift.Double = 0.0
    public var someString: Swift.String = ""

    public required init() {}

    public init(someValue: Swift.Double, someString: Swift.String) {
        self.someValue = someValue
        self.someString = someString
    }

    /// - Returns: The Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::CallbackException" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CallbackException.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.someValue)
        ostr.write(self.someString)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.someValue = try istr.read()
        self.someString = try istr.read()
        try istr.endSlice()
    }
}

/// Traits for Slice interface `CallbackReceiver`.
public struct CallbackReceiverTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::CallbackReceiver"]
    public static let staticId = "::Test::CallbackReceiver"
}

/// Traits for Slice interface `Callback`.
public struct CallbackTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Callback"]
    public static let staticId = "::Test::Callback"
}

public protocol CallbackReceiverPrx: Ice.ObjectPrx {}

private final class CallbackReceiverPrxI: Ice.ObjectPrxI, CallbackReceiverPrx {
    public override class func ice_staticId() -> Swift.String {
        return CallbackReceiverTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: CallbackReceiverPrx.Protocol) throws -> CallbackReceiverPrx {
    try communicator.makeProxyImpl(proxyString) as CallbackReceiverPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: CallbackReceiverPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> CallbackReceiverPrx? {
    return try await CallbackReceiverPrxI.checkedCast(prx: prx, facet: facet, context: context) as CallbackReceiverPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: CallbackReceiverPrx.Protocol, facet: Swift.String? = nil) -> CallbackReceiverPrx {
    return CallbackReceiverPrxI.uncheckedCast(prx: prx, facet: facet) as CallbackReceiverPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: CallbackReceiverPrx.Protocol) -> Swift.String {
    return CallbackReceiverTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `CallbackReceiverPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: CallbackReceiverPrx.Protocol) throws -> CallbackReceiverPrx? {
        return try read() as CallbackReceiverPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: CallbackReceiverPrx.Protocol) throws -> CallbackReceiverPrx? {
        return try read(tag: tag) as CallbackReceiverPrxI?
    }
}

public extension CallbackReceiverPrx {
    func callback(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "callback",
                                       mode: .Normal,
                                       context: context)
    }

    func callbackEx(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "callbackEx",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as CallbackException {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func concurrentCallback(_ iceP_number: Swift.Int32, context: Ice.Context? = nil) async throws -> Swift.Int32 {
        return try await _impl._invoke(operation: "concurrentCallback",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_number)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: Swift.Int32 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func waitCallback(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "waitCallback",
                                       mode: .Normal,
                                       context: context)
    }

    func callbackWithPayload(_ iceP_payload: Ice.ByteSeq, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "callbackWithPayload",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_payload)
                                       },
                                       context: context)
    }
}

public protocol CallbackPrx: Ice.ObjectPrx {}

private final class CallbackPrxI: Ice.ObjectPrxI, CallbackPrx {
    public override class func ice_staticId() -> Swift.String {
        return CallbackTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: CallbackPrx.Protocol) throws -> CallbackPrx {
    try communicator.makeProxyImpl(proxyString) as CallbackPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: CallbackPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> CallbackPrx? {
    return try await CallbackPrxI.checkedCast(prx: prx, facet: facet, context: context) as CallbackPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: CallbackPrx.Protocol, facet: Swift.String? = nil) -> CallbackPrx {
    return CallbackPrxI.uncheckedCast(prx: prx, facet: facet) as CallbackPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: CallbackPrx.Protocol) -> Swift.String {
    return CallbackTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `CallbackPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: CallbackPrx.Protocol) throws -> CallbackPrx? {
        return try read() as CallbackPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: CallbackPrx.Protocol) throws -> CallbackPrx? {
        return try read(tag: tag) as CallbackPrxI?
    }
}

public extension CallbackPrx {
    func initiateCallback(_ iceP_proxy: CallbackReceiverPrx?, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "initiateCallback",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_proxy)
                                       },
                                       context: context)
    }

    func initiateCallbackEx(_ iceP_proxy: CallbackReceiverPrx?, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "initiateCallbackEx",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_proxy)
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as CallbackException {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func initiateConcurrentCallback(number iceP_number: Swift.Int32, proxy iceP_proxy: CallbackReceiverPrx?, context: Ice.Context? = nil) async throws -> Swift.Int32 {
        return try await _impl._invoke(operation: "initiateConcurrentCallback",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_number)
                                           ostr.write(iceP_proxy)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: Swift.Int32 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func initiateWaitCallback(_ iceP_proxy: CallbackReceiverPrx?, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "initiateWaitCallback",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_proxy)
                                       },
                                       context: context)
    }

    func initiateCallbackWithPayload(_ iceP_proxy: CallbackReceiverPrx?, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "initiateCallbackWithPayload",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_proxy)
                                       },
                                       context: context)
    }

    func shutdown(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "shutdown",
                                       mode: .Normal,
                                       context: context)
    }
}


/// Dispatcher for `CallbackReceiver` servants.
public struct CallbackReceiverDisp: Ice.Dispatcher {
    public let servant: CallbackReceiver
    private static let defaultObject = Ice.ObjectI<CallbackReceiverTraits>()

    public init(_ servant: CallbackReceiver) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "callback":
            try await servant._iceD_callback(request)
        case "callbackEx":
            try await servant._iceD_callbackEx(request)
        case "callbackWithPayload":
            try await servant._iceD_callbackWithPayload(request)
        case "concurrentCallback":
            try await servant._iceD_concurrentCallback(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? CallbackReceiverDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? CallbackReceiverDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? CallbackReceiverDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? CallbackReceiverDisp.defaultObject)._iceD_ice_ping(request)
        case "waitCallback":
            try await servant._iceD_waitCallback(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol CallbackReceiver {
    func callback(current: Ice.Current) async throws

    func callbackEx(current: Ice.Current) async throws

    func concurrentCallback(number: Swift.Int32, current: Ice.Current) async throws -> Swift.Int32

    func waitCallback(current: Ice.Current) async throws

    func callbackWithPayload(payload: Ice.ByteSeq, current: Ice.Current) async throws
}


/// Dispatcher for `Callback` servants.
public struct CallbackDisp: Ice.Dispatcher {
    public let servant: Callback
    private static let defaultObject = Ice.ObjectI<CallbackTraits>()

    public init(_ servant: Callback) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? CallbackDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? CallbackDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? CallbackDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? CallbackDisp.defaultObject)._iceD_ice_ping(request)
        case "initiateCallback":
            try await servant._iceD_initiateCallback(request)
        case "initiateCallbackEx":
            try await servant._iceD_initiateCallbackEx(request)
        case "initiateCallbackWithPayload":
            try await servant._iceD_initiateCallbackWithPayload(request)
        case "initiateConcurrentCallback":
            try await servant._iceD_initiateConcurrentCallback(request)
        case "initiateWaitCallback":
            try await servant._iceD_initiateWaitCallback(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol Callback {
    func initiateCallback(proxy: CallbackReceiverPrx?, current: Ice.Current) async throws

    func initiateCallbackEx(proxy: CallbackReceiverPrx?, current: Ice.Current) async throws

    func initiateConcurrentCallback(number: Swift.Int32, proxy: CallbackReceiverPrx?, current: Ice.Current) async throws -> Swift.Int32

    func initiateWaitCallback(proxy: CallbackReceiverPrx?, current: Ice.Current) async throws

    func initiateCallbackWithPayload(proxy: CallbackReceiverPrx?, current: Ice.Current) async throws

    func shutdown(current: Ice.Current) async throws
}

extension CallbackReceiver {
    public func _iceD_callback(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.callback(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_callbackEx(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.callbackEx(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_concurrentCallback(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_number: Swift.Int32 = try istr.read()
        let result = try await self.concurrentCallback(number: iceP_number, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_waitCallback(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.waitCallback(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_callbackWithPayload(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_payload: Ice.ByteSeq = try istr.read()
        try await self.callbackWithPayload(payload: iceP_payload, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

extension Callback {
    public func _iceD_initiateCallback(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_proxy: CallbackReceiverPrx? = try istr.read(CallbackReceiverPrx.self)
        try await self.initiateCallback(proxy: iceP_proxy, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_initiateCallbackEx(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_proxy: CallbackReceiverPrx? = try istr.read(CallbackReceiverPrx.self)
        try await self.initiateCallbackEx(proxy: iceP_proxy, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_initiateConcurrentCallback(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_number: Swift.Int32 = try istr.read()
        let iceP_proxy: CallbackReceiverPrx? = try istr.read(CallbackReceiverPrx.self)
        let result = try await self.initiateConcurrentCallback(number: iceP_number, proxy: iceP_proxy, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_initiateWaitCallback(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_proxy: CallbackReceiverPrx? = try istr.read(CallbackReceiverPrx.self)
        try await self.initiateWaitCallback(proxy: iceP_proxy, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_initiateCallbackWithPayload(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_proxy: CallbackReceiverPrx? = try istr.read(CallbackReceiverPrx.self)
        try await self.initiateCallbackWithPayload(proxy: iceP_proxy, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
