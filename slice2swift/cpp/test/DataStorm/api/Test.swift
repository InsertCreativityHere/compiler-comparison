//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public struct StructKey: Swift.Hashable {
    public var value: Swift.Int32 = 0

    public init() {}

    public init(value: Swift.Int32) {
        self.value = value
    }
}

/// An `Ice.InputStream` extension to read `StructKey` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `StructKey` structured value from the stream.
    ///
    /// - Returns: The structured value read from the stream.
    func read() throws -> StructKey {
        var v = StructKey()
        v.value = try self.read()
        return v
    }

    /// Read an optional `StructKey?` structured value from the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> StructKey? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as StructKey
    }
}

/// An `Ice.OutputStream` extension to write `StructKey` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `StructKey` structured value to the stream.
    ///
    /// - Parameter v: The value to write to the stream.
    func write(_ v: StructKey) {
        self.write(v.value)
    }

    /// Write an optional `StructKey?` structured value to the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    /// - Parameter value: The value to write to the stream.
    func write(tag: Swift.Int32, value: StructKey?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 4)
                write(v)
            }
        }
    }
}

/// :nodoc:
public class ClassKey_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return ClassKey.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_ClassKey() -> Ice.ValueTypeResolver {
        return ClassKey_TypeResolver()
    }
}

open class ClassKey: Ice.Value {
    public var value: Swift.Int32 = 0

    public required init() {}

    public init(value: Swift.Int32) {
        self.value = value
    }

    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::ClassKey" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.value = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: ClassKey.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.value)
        ostr.endSlice()
    }
}
