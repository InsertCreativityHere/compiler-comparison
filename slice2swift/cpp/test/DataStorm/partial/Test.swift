//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public struct Stock {
    public var price: Swift.Float = 0.0
    public var lastBid: Swift.Float = 0.0
    public var laskAsk: Swift.Float = 0.0

    public init() {}

    public init(price: Swift.Float, lastBid: Swift.Float, laskAsk: Swift.Float) {
        self.price = price
        self.lastBid = lastBid
        self.laskAsk = laskAsk
    }
}

/// An `Ice.InputStream` extension to read `Stock` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `Stock` structured value from the stream.
    ///
    /// - returns: `Stock` - The structured value read from the stream.
    func read() throws -> Stock {
        var v = Stock()
        v.price = try self.read()
        v.lastBid = try self.read()
        v.laskAsk = try self.read()
        return v
    }

    /// Read an optional `Stock?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `Stock?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> Stock? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as Stock
    }
}

/// An `Ice.OutputStream` extension to write `Stock` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `Stock` structured value to the stream.
    ///
    /// - parameter _: `Stock` - The value to write to the stream.
    func write(_ v: Stock) {
        self.write(v.price)
        self.write(v.lastBid)
        self.write(v.laskAsk)
    }

    /// Write an optional `Stock?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `Stock?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: Stock?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 12)
                write(v)
            }
        }
    }
}
