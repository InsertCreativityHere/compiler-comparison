//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `DBTypes.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public typealias StringLongDict = [Swift.String: Swift.Int64]

/// Helper class to read and write `StringLongDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct StringLongDictHelper {
    /// Read a `StringLongDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `StringLongDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> StringLongDict {
        let sz = try Swift.Int(istr.readSize())
        var v = StringLongDict()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: Swift.Int64 = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `StringLongDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `StringLongDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> StringLongDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `StringLongDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `StringLongDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: StringLongDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `StringLongDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `StringLongDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: StringLongDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public class AllData {
    public var applications: ApplicationInfoSeq = ApplicationInfoSeq()
    public var adapters: AdapterInfoSeq = AdapterInfoSeq()
    public var objects: ObjectInfoSeq = ObjectInfoSeq()
    public var internalObjects: ObjectInfoSeq = ObjectInfoSeq()
    public var serials: StringLongDict = StringLongDict()

    public init() {}

    public init(applications: ApplicationInfoSeq, adapters: AdapterInfoSeq, objects: ObjectInfoSeq, internalObjects: ObjectInfoSeq, serials: StringLongDict) {
        self.applications = applications
        self.adapters = adapters
        self.objects = objects
        self.internalObjects = internalObjects
        self.serials = serials
    }
}

/// An `Ice.InputStream` extension to read `AllData` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `AllData` structured value from the stream.
    ///
    /// - returns: `AllData` - The structured value read from the stream.
    func read() throws -> AllData {
        let v = AllData()
        v.applications = try ApplicationInfoSeqHelper.read(from: self)
        v.adapters = try AdapterInfoSeqHelper.read(from: self)
        v.objects = try ObjectInfoSeqHelper.read(from: self)
        v.internalObjects = try ObjectInfoSeqHelper.read(from: self)
        v.serials = try StringLongDictHelper.read(from: self)
        return v
    }

    /// Read an optional `AllData?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `AllData?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> AllData? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as AllData
    }
}

/// An `Ice.OutputStream` extension to write `AllData` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `AllData` structured value to the stream.
    ///
    /// - parameter _: `AllData` - The value to write to the stream.
    func write(_ v: AllData) {
        ApplicationInfoSeqHelper.write(to: self, value: v.applications)
        AdapterInfoSeqHelper.write(to: self, value: v.adapters)
        ObjectInfoSeqHelper.write(to: self, value: v.objects)
        ObjectInfoSeqHelper.write(to: self, value: v.internalObjects)
        StringLongDictHelper.write(to: self, value: v.serials)
    }

    /// Write an optional `AllData?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `AllData?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: AllData?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}
