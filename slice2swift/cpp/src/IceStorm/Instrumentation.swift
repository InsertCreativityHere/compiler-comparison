//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Instrumentation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public enum InstrumentationSubscriberState: Swift.UInt8 {
    /// SubscriberStateOnline Online waiting to send events.
    case SubscriberStateOnline = 0
    /// SubscriberStateOffline Offline, retrying.
    case SubscriberStateOffline = 1
    /// SubscriberStateError Error state, awaiting to be destroyed.
    case SubscriberStateError = 2
    public init() {
        self = .SubscriberStateOnline
    }
}

/// An `Ice.InputStream` extension to read `InstrumentationSubscriberState` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `InstrumentationSubscriberState` - The enumarated value.
    func read() throws -> InstrumentationSubscriberState {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 2)
        guard let val = InstrumentationSubscriberState(rawValue: rawValue) else {
            throw Ice.MarshalException(reason: "invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `InstrumentationSubscriberState` - The enumerated value.
    func read(tag: Swift.Int32) throws -> InstrumentationSubscriberState? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as InstrumentationSubscriberState
    }
}

/// An `Ice.OutputStream` extension to write `InstrumentationSubscriberState` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `InstrumentationSubscriberState` - The enumerator to write.
    func write(_ v: InstrumentationSubscriberState) {
        write(enum: v.rawValue, maxValue: 2)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `InstrumentationSubscriberState` - The enumerator to write.
    func write(tag: Swift.Int32, value: InstrumentationSubscriberState?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 2)
    }
}

public protocol InstrumentationTopicObserver: Ice.InstrumentationObserver {
    /// Notification of an event published on the topic by a publisher.
    func published() throws

    /// Notification of an event forwared on the topic by another topic.
    func forwarded() throws
}

public protocol InstrumentationSubscriberObserver: Ice.InstrumentationObserver {
    /// Notification of some events being queued.
    ///
    /// - parameter _: `Swift.Int32`
    func queued(_ count: Swift.Int32) throws

    /// Notification of a some events being sent.
    ///
    /// - parameter _: `Swift.Int32`
    func outstanding(_ count: Swift.Int32) throws

    /// Notification of some events being delivered.
    ///
    /// - parameter _: `Swift.Int32`
    func delivered(_ count: Swift.Int32) throws
}

/// The ObserverUpdater interface is implemented by IceStorm and an
/// instance of this interface is provided on initialization to the
/// TopicManagerObserver object.
///
/// This interface can be used by add-ins imlementing the
/// TopicManagerObserver interface to update the obsevers of observed
/// objects.
public protocol InstrumentationObserverUpdater:  Swift.AnyObject {
    /// Update topic observers associated with each topics.
    ///
    /// When called, this method goes through all the topics and for
    /// each topic TopicManagerObserver::getTopicObserver is
    /// called. The implementation of getTopicObserver has the
    /// possibility to return an updated observer if necessary.
    func updateTopicObservers() throws

    /// Update subscriber observers associated with each subscriber.
    ///
    /// When called, this method goes through all the subscribers and
    /// for each subscriber TopicManagerObserver::getSubscriberObserver
    /// is called. The implementation of getSubscriberObserver has the
    /// possibility to return an updated observer if necessary.
    func updateSubscriberObservers() throws
}

/// The topic manager observer interface used by the Ice run-time to
/// obtain and update observers for its observeable objects. This
/// interface should be implemented by add-ins that wish to observe
/// IceStorm objects in order to collect statistics.
public protocol InstrumentationTopicManagerObserver:  Swift.AnyObject {
    /// This method should return an observer for the given topic.
    ///
    /// - parameter svc: `Swift.String` The service name.
    ///
    /// - parameter name: `Swift.String` The topic name.
    ///
    /// - parameter old: `InstrumentationTopicObserver?` The previous observer, only set when updating an
    /// existing observer.
    ///
    /// - returns: `InstrumentationTopicObserver?`
    func getTopicObserver(svc: Swift.String, name: Swift.String, old: InstrumentationTopicObserver?) throws -> InstrumentationTopicObserver?

    /// This method should return an observer for the given subscriber.
    ///
    /// - parameter svc: `Swift.String`
    ///
    /// - parameter topic: `Swift.String` The name of the topic subscribed.
    ///
    /// - parameter prx: `Ice.ObjectPrx?`
    ///
    /// - parameter q: `QoS`
    ///
    /// - parameter link: `TopicPrx?` The proxy of the linked topic if this subscriber
    /// forwards events to a linked topic.
    ///
    /// - parameter s: `InstrumentationSubscriberState`
    ///
    /// - parameter old: `InstrumentationSubscriberObserver?` The previous observer, only set when updating an
    /// existing observer.
    ///
    /// - returns: `InstrumentationSubscriberObserver?`
    func getSubscriberObserver(svc: Swift.String, topic: Swift.String, prx: Ice.ObjectPrx?, q: QoS, link: TopicPrx?, s: InstrumentationSubscriberState, old: InstrumentationSubscriberObserver?) throws -> InstrumentationSubscriberObserver?

    /// IceStorm calls this method on initialization. The add-in
    /// implementing this interface can use this object to get IceStorm
    /// to re-obtain observers for topics and subscribers.
    ///
    /// - parameter _: `InstrumentationObserverUpdater?` The observer updater object.
    func setObserverUpdater(_ updater: InstrumentationObserverUpdater?) throws
}
