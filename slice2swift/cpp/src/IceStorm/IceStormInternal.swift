//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceStormInternal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import IceStormElection

/// The event data.
public struct EventData {
    /// The operation name.
    public var op: Swift.String = ""
    /// The operation mode.
    public var mode: Ice.OperationMode = .Normal
    /// The encoded data for the operation's input parameters.
    public var data: Ice.ByteSeq = Ice.ByteSeq()
    /// The Ice::Current::Context data from the originating request.
    public var context: Ice.Context = Ice.Context()

    public init() {}

    public init(op: Swift.String, mode: Ice.OperationMode, data: Ice.ByteSeq, context: Ice.Context) {
        self.op = op
        self.mode = mode
        self.data = data
        self.context = context
    }
}

/// An `Ice.InputStream` extension to read `EventData` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `EventData` structured value from the stream.
    ///
    /// - Returns: The structured value read from the stream.
    func read() throws -> EventData {
        var v = EventData()
        v.op = try self.read()
        v.mode = try self.read()
        v.data = try self.read()
        v.context = try Ice.ContextHelper.read(from: self)
        return v
    }

    /// Read an optional `EventData?` structured value from the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> EventData? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as EventData
    }
}

/// An `Ice.OutputStream` extension to write `EventData` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `EventData` structured value to the stream.
    ///
    /// - Parameter v: The value to write to the stream.
    func write(_ v: EventData) {
        self.write(v.op)
        self.write(v.mode)
        self.write(v.data)
        Ice.ContextHelper.write(to: self, value: v.context)
    }

    /// Write an optional `EventData?` structured value to the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    /// - Parameter value: The value to write to the stream.
    func write(tag: Swift.Int32, value: EventData?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// A sequence of EventData.
public typealias EventDataSeq = [EventData]

/// Helper class to read and write `EventDataSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct EventDataSeqHelper {
    /// Read a `EventDataSeq` sequence from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    ///
    /// - Returns: The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> EventDataSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = EventDataSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: EventData = try istr.read()
            v.append(j)
        }
        return v
    }

    /// Read an optional `EventDataSeq?` sequence from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> EventDataSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Write a `EventDataSeq` sequence to the stream.
    ///
    /// - Parameter ostr: The stream to write to.
    /// - Parameter value: The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: EventDataSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Write an optional `EventDataSeq?` sequence to the stream.
    ///
    /// - Parameters:
    ///   - ostr: The stream to write to.
    ///   - tag: The numeric tag associated with the value.
    ///   - value: The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: EventDataSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice interface `TopicLink`.
public struct TopicLinkTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceStorm::TopicLink"]
    public static let staticId = "::IceStorm::TopicLink"
}

/// :nodoc:
public class ReapWouldBlock_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return ReapWouldBlock.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceStorm_ReapWouldBlock() -> Ice.UserExceptionTypeResolver {
        return ReapWouldBlock_TypeResolver()
    }
}

/// Thrown if the reap call would block.
open class ReapWouldBlock: Ice.UserException, @unchecked Sendable {
    /// - Returns: The Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::IceStorm::ReapWouldBlock" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: ReapWouldBlock.ice_staticId(), compactId: -1, last: true)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }
}

/// Traits for Slice interface `TopicInternal`.
public struct TopicInternalTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceStorm::Topic", "::IceStorm::TopicInternal"]
    public static let staticId = "::IceStorm::TopicInternal"
}

/// Traits for Slice interface `TopicManagerInternal`.
public struct TopicManagerInternalTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::IceStorm::TopicManager", "::IceStorm::TopicManagerInternal"]
    public static let staticId = "::IceStorm::TopicManagerInternal"
}

/// The TopicLink interface. This is used to forward events between federated Topic instances.
///
/// TopicLinkPrx Methods:
///  - forward: Forward a sequence of events.
///  - forwardAsync: Forward a sequence of events.
public protocol TopicLinkPrx: Ice.ObjectPrx {}

private final class TopicLinkPrxI: Ice.ObjectPrxI, TopicLinkPrx {
    public override class func ice_staticId() -> Swift.String {
        return TopicLinkTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TopicLinkPrx.Protocol) throws -> TopicLinkPrx {
    try communicator.makeProxyImpl(proxyString) as TopicLinkPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TopicLinkPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> TopicLinkPrx? {
    return try await TopicLinkPrxI.checkedCast(prx: prx, facet: facet, context: context) as TopicLinkPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: TopicLinkPrx.Protocol, facet: Swift.String? = nil) -> TopicLinkPrx {
    return TopicLinkPrxI.uncheckedCast(prx: prx, facet: facet) as TopicLinkPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TopicLinkPrx.Protocol) -> Swift.String {
    return TopicLinkTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `TopicLinkPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: TopicLinkPrx.Protocol) throws -> TopicLinkPrx? {
        return try read() as TopicLinkPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: TopicLinkPrx.Protocol) throws -> TopicLinkPrx? {
        return try read(tag: tag) as TopicLinkPrxI?
    }
}

/// The TopicLink interface. This is used to forward events between federated Topic instances.
///
/// TopicLinkPrx Methods:
///  - forward: Forward a sequence of events.
///  - forwardAsync: Forward a sequence of events.
public extension TopicLinkPrx {
    /// Forward a sequence of events.
    ///
    /// - Parameters:
    ///   - iceP_events: The events to forward.
    ///   - context: Optional request context.
    func forward(_ iceP_events: EventDataSeq, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "forward",
                                       mode: .Normal,
                                       write: { ostr in
                                           EventDataSeqHelper.write(to: ostr, value: iceP_events)
                                       },
                                       context: context)
    }
}

/// Internal operations for a topic.
///
/// TopicInternalPrx Methods:
///  - getLinkProxy: Retrieve a proxy to the TopicLink interface.
///  - getLinkProxyAsync: Retrieve a proxy to the TopicLink interface.
///  - reap: Reap the given identities.
///  - reapAsync: Reap the given identities.
public protocol TopicInternalPrx: TopicPrx {}

private final class TopicInternalPrxI: Ice.ObjectPrxI, TopicInternalPrx {
    public override class func ice_staticId() -> Swift.String {
        return TopicInternalTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TopicInternalPrx.Protocol) throws -> TopicInternalPrx {
    try communicator.makeProxyImpl(proxyString) as TopicInternalPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TopicInternalPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> TopicInternalPrx? {
    return try await TopicInternalPrxI.checkedCast(prx: prx, facet: facet, context: context) as TopicInternalPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: TopicInternalPrx.Protocol, facet: Swift.String? = nil) -> TopicInternalPrx {
    return TopicInternalPrxI.uncheckedCast(prx: prx, facet: facet) as TopicInternalPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TopicInternalPrx.Protocol) -> Swift.String {
    return TopicInternalTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `TopicInternalPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: TopicInternalPrx.Protocol) throws -> TopicInternalPrx? {
        return try read() as TopicInternalPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: TopicInternalPrx.Protocol) throws -> TopicInternalPrx? {
        return try read(tag: tag) as TopicInternalPrxI?
    }
}

/// Internal operations for a topic.
///
/// TopicInternalPrx Methods:
///  - getLinkProxy: Retrieve a proxy to the TopicLink interface.
///  - getLinkProxyAsync: Retrieve a proxy to the TopicLink interface.
///  - reap: Reap the given identities.
///  - reapAsync: Reap the given identities.
public extension TopicInternalPrx {
    /// Retrieve a proxy to the TopicLink interface.
    ///
    /// - Parameter context: Optional request context.
    ///
    /// - Returns: The TopicLink for the Topic.
    func getLinkProxy(context: Ice.Context? = nil) async throws -> TopicLinkPrx? {
        return try await _impl._invoke(operation: "getLinkProxy",
                                       mode: .Idempotent,
                                       read: { istr in
                                           let iceP_returnValue: TopicLinkPrx? = try istr.read(TopicLinkPrx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    /// Reap the given identities.
    ///
    /// - Parameters:
    ///   - iceP_id: The sequence of identities.
    ///   - context: Optional request context.
    ///
    /// - Throws:
    ///   - ReapWouldBlock Raised if the reap call would block.
    func reap(_ iceP_id: Ice.IdentitySeq, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "reap",
                                       mode: .Normal,
                                       write: { ostr in
                                           Ice.IdentitySeqHelper.write(to: ostr, value: iceP_id)
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as ReapWouldBlock {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }
}

/// Internal operations for a topic manager.
///
/// TopicManagerInternalPrx Methods:
///  - getReplicaNode: Return the replica node proxy for this topic manager.
///  - getReplicaNodeAsync: Return the replica node proxy for this topic manager.
public protocol TopicManagerInternalPrx: TopicManagerPrx {}

private final class TopicManagerInternalPrxI: Ice.ObjectPrxI, TopicManagerInternalPrx {
    public override class func ice_staticId() -> Swift.String {
        return TopicManagerInternalTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TopicManagerInternalPrx.Protocol) throws -> TopicManagerInternalPrx {
    try communicator.makeProxyImpl(proxyString) as TopicManagerInternalPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TopicManagerInternalPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> TopicManagerInternalPrx? {
    return try await TopicManagerInternalPrxI.checkedCast(prx: prx, facet: facet, context: context) as TopicManagerInternalPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: TopicManagerInternalPrx.Protocol, facet: Swift.String? = nil) -> TopicManagerInternalPrx {
    return TopicManagerInternalPrxI.uncheckedCast(prx: prx, facet: facet) as TopicManagerInternalPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TopicManagerInternalPrx.Protocol) -> Swift.String {
    return TopicManagerInternalTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `TopicManagerInternalPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: TopicManagerInternalPrx.Protocol) throws -> TopicManagerInternalPrx? {
        return try read() as TopicManagerInternalPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: TopicManagerInternalPrx.Protocol) throws -> TopicManagerInternalPrx? {
        return try read(tag: tag) as TopicManagerInternalPrxI?
    }
}

/// Internal operations for a topic manager.
///
/// TopicManagerInternalPrx Methods:
///  - getReplicaNode: Return the replica node proxy for this topic manager.
///  - getReplicaNodeAsync: Return the replica node proxy for this topic manager.
public extension TopicManagerInternalPrx {
    /// Return the replica node proxy for this topic manager.
    ///
    /// - Parameter context: Optional request context.
    ///
    /// - Returns: The replica proxy, or null if this instance is not replicated.
    func getReplicaNode(context: Ice.Context? = nil) async throws -> IceStormElection.NodePrx? {
        return try await _impl._invoke(operation: "getReplicaNode",
                                       mode: .Idempotent,
                                       read: { istr in
                                           let iceP_returnValue: IceStormElection.NodePrx? = try istr.read(IceStormElection.NodePrx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}


/// Dispatcher for `TopicLink` servants.
public struct TopicLinkDisp: Ice.Dispatcher {
    public let servant: TopicLink
    private static let defaultObject = Ice.ObjectI<TopicLinkTraits>()

    public init(_ servant: TopicLink) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "forward":
            try await servant._iceD_forward(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? TopicLinkDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? TopicLinkDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? TopicLinkDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? TopicLinkDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// The TopicLink interface. This is used to forward events between federated Topic instances.
public protocol TopicLink {
    /// Forward a sequence of events.
    ///
    /// - Parameters:
    ///   - events: The events to forward.
    ///   - current: The Current object for the dispatch.
    func forward(events: EventDataSeq, current: Ice.Current) async throws
}


/// Dispatcher for `TopicInternal` servants.
public struct TopicInternalDisp: Ice.Dispatcher {
    public let servant: TopicInternal
    private static let defaultObject = Ice.ObjectI<TopicInternalTraits>()

    public init(_ servant: TopicInternal) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "destroy":
            try await servant._iceD_destroy(request)
        case "getLinkInfoSeq":
            try await servant._iceD_getLinkInfoSeq(request)
        case "getLinkProxy":
            try await servant._iceD_getLinkProxy(request)
        case "getName":
            try await servant._iceD_getName(request)
        case "getNonReplicatedPublisher":
            try await servant._iceD_getNonReplicatedPublisher(request)
        case "getPublisher":
            try await servant._iceD_getPublisher(request)
        case "getSubscribers":
            try await servant._iceD_getSubscribers(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? TopicInternalDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? TopicInternalDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? TopicInternalDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? TopicInternalDisp.defaultObject)._iceD_ice_ping(request)
        case "link":
            try await servant._iceD_link(request)
        case "reap":
            try await servant._iceD_reap(request)
        case "subscribeAndGetPublisher":
            try await servant._iceD_subscribeAndGetPublisher(request)
        case "unlink":
            try await servant._iceD_unlink(request)
        case "unsubscribe":
            try await servant._iceD_unsubscribe(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// Internal operations for a topic.
public protocol TopicInternal: Topic {
    /// Retrieve a proxy to the TopicLink interface.
    ///
    /// - Parameter current: The Current object for the dispatch.
    ///
    /// - Returns: The TopicLink for the Topic.
    func getLinkProxy(current: Ice.Current) async throws -> TopicLinkPrx?

    /// Reap the given identities.
    ///
    /// - Parameters:
    ///   - id: The sequence of identities.
    ///   - current: The Current object for the dispatch.
    ///
    /// - Throws:
    ///   - ReapWouldBlock Raised if the reap call would block.
    func reap(id: Ice.IdentitySeq, current: Ice.Current) async throws
}


/// Dispatcher for `TopicManagerInternal` servants.
public struct TopicManagerInternalDisp: Ice.Dispatcher {
    public let servant: TopicManagerInternal
    private static let defaultObject = Ice.ObjectI<TopicManagerInternalTraits>()

    public init(_ servant: TopicManagerInternal) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "create":
            try await servant._iceD_create(request)
        case "getReplicaNode":
            try await servant._iceD_getReplicaNode(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? TopicManagerInternalDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? TopicManagerInternalDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? TopicManagerInternalDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? TopicManagerInternalDisp.defaultObject)._iceD_ice_ping(request)
        case "retrieve":
            try await servant._iceD_retrieve(request)
        case "retrieveAll":
            try await servant._iceD_retrieveAll(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

/// Internal operations for a topic manager.
public protocol TopicManagerInternal: TopicManager {
    /// Return the replica node proxy for this topic manager.
    ///
    /// - Parameter current: The Current object for the dispatch.
    ///
    /// - Returns: The replica proxy, or null if this instance is not replicated.
    func getReplicaNode(current: Ice.Current) async throws -> IceStormElection.NodePrx?
}

/// The TopicLink interface. This is used to forward events between federated Topic instances.
///
/// TopicLink Methods:
///  - forward: Forward a sequence of events.
extension TopicLink {
    public func _iceD_forward(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_events: EventDataSeq = try EventDataSeqHelper.read(from: istr)
        try await self.forward(events: iceP_events, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// Internal operations for a topic.
///
/// TopicInternal Methods:
///  - getLinkProxy: Retrieve a proxy to the TopicLink interface.
///  - reap: Reap the given identities.
extension TopicInternal {
    public func _iceD_getLinkProxy(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getLinkProxy(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_reap(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_id: Ice.IdentitySeq = try Ice.IdentitySeqHelper.read(from: istr)
        try await self.reap(id: iceP_id, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// Internal operations for a topic manager.
///
/// TopicManagerInternal Methods:
///  - getReplicaNode: Return the replica node proxy for this topic manager.
extension TopicManagerInternal {
    public func _iceD_getReplicaNode(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.getReplicaNode(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}
