//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public enum `as`: Swift.UInt8 {
    case base = 0
    public init() {
        self = .base
    }
}

/// An `Ice.InputStream` extension to read ``as`` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - Returns:  The enumerated value.
    func read() throws -> `as` {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 0)
        guard let val = `as`(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The enumerated value.
    func read(tag: Swift.Int32) throws -> `as`? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as `as`
    }
}

/// An `Ice.OutputStream` extension to write ``as`` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// - Parameter v: The enumerator to write.
    func write(_ v: `as`) {
        write(enum: v.rawValue, maxValue: 0)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    /// - Parameter value: The enumerator to write.
    func write(tag: Swift.Int32, value: `as`?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 0)
    }
}

public struct `break`: Swift.Hashable {
    public var readonly: Swift.Int32 = 0

    public init() {}

    public init(readonly: Swift.Int32) {
        self.readonly = readonly
    }
}

/// An `Ice.InputStream` extension to read ``break`` structured values from the stream.
public extension Ice.InputStream {
    /// Read a ``break`` structured value from the stream.
    ///
    /// - Returns: The structured value read from the stream.
    func read() throws -> `break` {
        var v = `break`()
        v.readonly = try self.read()
        return v
    }

    /// Read an optional ``break`?` structured value from the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> `break`? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as `break`
    }
}

/// An `Ice.OutputStream` extension to write ``break`` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a ``break`` structured value to the stream.
    ///
    /// - Parameter v: The value to write to the stream.
    func write(_ v: `break`) {
        self.write(v.readonly)
    }

    /// Write an optional ``break`?` structured value to the stream.
    ///
    /// - Parameter tag: The numeric tag associated with the value.
    /// - Parameter value: The value to write to the stream.
    func write(tag: Swift.Int32, value: `break`?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 4)
                write(v)
            }
        }
    }
}

/// Traits for Slice interface ``case``.
public struct caseTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::abstract::case"]
    public static let staticId = "::abstract::case"
}

/// Traits for Slice interface `decimal`.
public struct decimalTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::abstract::decimal"]
    public static let staticId = "::abstract::decimal"
}

/// Traits for Slice interface `explicit`.
public struct explicitTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::abstract::case", "::abstract::decimal", "::abstract::explicit"]
    public static let staticId = "::abstract::explicit"
}

public typealias `while` = [Swift.String: `break`]

/// Helper class to read and write ``while`` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct whileHelper {
    /// Read a ``while`` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> `while` {
        let sz = try Swift.Int(istr.readSize())
        var v = `while`()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: `break` = try istr.read()
            v[key] = value
        }
        return v
    }

    /// Read an optional ``while`?` dictionary from the stream.
    ///
    /// - Parameter istr: The stream to read from.
    /// - Parameter tag: The numeric tag associated with the value.
    ///
    /// - Returns: The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> `while`? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Write a ``while`` dictionary to the stream.
    ///
    /// - Parameter ostr: The stream to write to.
    /// - Parameter value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: `while`) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Write an optional ``while`?` dictionary to the stream.
    ///
    /// - Parameters:
    ///   - ostr: The stream to write to.
    ///   - tag: The numeric tag associated with the value.
    ///   - value: The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: `while`?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice interface `optionalParams`.
public struct optionalParamsTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::abstract::optionalParams"]
    public static let staticId = "::abstract::optionalParams"
}

@_documentation(visibility: internal)
public class fixed_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return fixed.self
    }
}

public extension Ice.ClassResolver {
    @objc static func abstract_fixed() -> Ice.UserExceptionTypeResolver {
        return fixed_TypeResolver()
    }
}

open class fixed: Ice.UserException, @unchecked Sendable {
    public var `for`: Swift.Int32 = 0

    public required init() {}

    public init(`for`: Swift.Int32) {
        self.`for` = `for`
    }

    /// - Returns: The Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::abstract::fixed" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: fixed.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.`for`)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`for` = try istr.read()
        try istr.endSlice()
    }
}

@_documentation(visibility: internal)
public class foreach_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return foreach.self
    }
}

public extension Ice.ClassResolver {
    @objc static func abstract_foreach() -> Ice.UserExceptionTypeResolver {
        return foreach_TypeResolver()
    }
}

open class foreach: fixed, @unchecked Sendable {
    public var goto: Swift.Int32 = 0
    public var `if`: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(`for`: Swift.Int32, goto: Swift.Int32, `if`: Swift.Int32) {
        self.goto = goto
        self.`if` = `if`
        super.init(`for`: `for`)
    }

    /// - Returns: The Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::abstract::foreach" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: foreach.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.goto)
        ostr.write(self.`if`)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.goto = try istr.read()
        self.`if` = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

@_documentation(visibility: internal)
public class BaseMethods_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return BaseMethods.self
    }
}

public extension Ice.ClassResolver {
    @objc static func abstract_BaseMethods() -> Ice.UserExceptionTypeResolver {
        return BaseMethods_TypeResolver()
    }
}

open class BaseMethods: Ice.UserException, @unchecked Sendable {
    public var Data: Swift.Int32 = 0
    public var HelpLink: Swift.Int32 = 0
    public var InnerException: Swift.Int32 = 0
    public var Message: Swift.Int32 = 0
    public var Source: Swift.Int32 = 0
    public var StackTrace: Swift.Int32 = 0
    public var TargetSite: Swift.Int32 = 0
    public var HResult: Swift.Int32 = 0
    public var Equals: Swift.Int32 = 0
    public var GetBaseException: Swift.Int32 = 0
    public var GetHashCode: Swift.Int32 = 0
    public var GetObjectData: Swift.Int32 = 0
    public var GetType: Swift.Int32 = 0
    public var ReferenceEquals: Swift.Int32 = 0
    public var ToString: Swift.Int32 = 0

    public required init() {}

    public init(Data: Swift.Int32, HelpLink: Swift.Int32, InnerException: Swift.Int32, Message: Swift.Int32, Source: Swift.Int32, StackTrace: Swift.Int32, TargetSite: Swift.Int32, HResult: Swift.Int32, Equals: Swift.Int32, GetBaseException: Swift.Int32, GetHashCode: Swift.Int32, GetObjectData: Swift.Int32, GetType: Swift.Int32, ReferenceEquals: Swift.Int32, ToString: Swift.Int32) {
        self.Data = Data
        self.HelpLink = HelpLink
        self.InnerException = InnerException
        self.Message = Message
        self.Source = Source
        self.StackTrace = StackTrace
        self.TargetSite = TargetSite
        self.HResult = HResult
        self.Equals = Equals
        self.GetBaseException = GetBaseException
        self.GetHashCode = GetHashCode
        self.GetObjectData = GetObjectData
        self.GetType = GetType
        self.ReferenceEquals = ReferenceEquals
        self.ToString = ToString
    }

    /// - Returns: The Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::abstract::BaseMethods" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: BaseMethods.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.Data)
        ostr.write(self.HelpLink)
        ostr.write(self.InnerException)
        ostr.write(self.Message)
        ostr.write(self.Source)
        ostr.write(self.StackTrace)
        ostr.write(self.TargetSite)
        ostr.write(self.HResult)
        ostr.write(self.Equals)
        ostr.write(self.GetBaseException)
        ostr.write(self.GetHashCode)
        ostr.write(self.GetObjectData)
        ostr.write(self.GetType)
        ostr.write(self.ReferenceEquals)
        ostr.write(self.ToString)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.Data = try istr.read()
        self.HelpLink = try istr.read()
        self.InnerException = try istr.read()
        self.Message = try istr.read()
        self.Source = try istr.read()
        self.StackTrace = try istr.read()
        self.TargetSite = try istr.read()
        self.HResult = try istr.read()
        self.Equals = try istr.read()
        self.GetBaseException = try istr.read()
        self.GetHashCode = try istr.read()
        self.GetObjectData = try istr.read()
        self.GetType = try istr.read()
        self.ReferenceEquals = try istr.read()
        self.ToString = try istr.read()
        try istr.endSlice()
    }
}

/// Traits for Slice interface `implicit`.
public struct implicitTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::abstract::implicit"]
    public static let staticId = "::abstract::implicit"
}
public let protected: Swift.Int32 = 0

public let `public`: Swift.Int32 = 0


/// Traits for Slice interface `SystemTest`.
public struct SystemTestTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::abstract::System::Test"]
    public static let staticId = "::abstract::System::Test"
}

/// Traits for Slice interface `Test`.
public struct TestTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::System::Test"]
    public static let staticId = "::System::Test"
}

public protocol casePrx: Ice.ObjectPrx {}

private final class casePrxI: Ice.ObjectPrxI, casePrx {
    public override class func ice_staticId() -> Swift.String {
        return caseTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: casePrx.Protocol) throws -> casePrx {
    try communicator.makeProxyImpl(proxyString) as casePrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: casePrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> casePrx? {
    return try await casePrxI.checkedCast(prx: prx, facet: facet, context: context) as casePrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: casePrx.Protocol, facet: Swift.String? = nil) -> casePrx {
    return casePrxI.uncheckedCast(prx: prx, facet: facet) as casePrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: casePrx.Protocol) -> Swift.String {
    return caseTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `casePrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: casePrx.Protocol) throws -> casePrx? {
        return try read() as casePrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: casePrx.Protocol) throws -> casePrx? {
        return try read(tag: tag) as casePrxI?
    }
}

public extension casePrx {
    func `catch`(_ iceP_checked: Swift.Int32, context: Ice.Context? = nil) async throws -> Swift.Int32 {
        return try await _impl._invoke(operation: "catch",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_checked)
                                       },
                                       read: { istr in
                                           let iceP_continue: Swift.Int32 = try istr.read()
                                           return iceP_continue
                                       },
                                       context: context)
    }
}

public protocol decimalPrx: Ice.ObjectPrx {}

private final class decimalPrxI: Ice.ObjectPrxI, decimalPrx {
    public override class func ice_staticId() -> Swift.String {
        return decimalTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: decimalPrx.Protocol) throws -> decimalPrx {
    try communicator.makeProxyImpl(proxyString) as decimalPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: decimalPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> decimalPrx? {
    return try await decimalPrxI.checkedCast(prx: prx, facet: facet, context: context) as decimalPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: decimalPrx.Protocol, facet: Swift.String? = nil) -> decimalPrx {
    return decimalPrxI.uncheckedCast(prx: prx, facet: facet) as decimalPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: decimalPrx.Protocol) -> Swift.String {
    return decimalTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `decimalPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: decimalPrx.Protocol) throws -> decimalPrx? {
        return try read() as decimalPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: decimalPrx.Protocol) throws -> decimalPrx? {
        return try read(tag: tag) as decimalPrxI?
    }
}

public extension decimalPrx {
    func `default`(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "default",
                                       mode: .Normal,
                                       context: context)
    }
}

public protocol explicitPrx: decimalPrx, casePrx {}

private final class explicitPrxI: Ice.ObjectPrxI, explicitPrx {
    public override class func ice_staticId() -> Swift.String {
        return explicitTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: explicitPrx.Protocol) throws -> explicitPrx {
    try communicator.makeProxyImpl(proxyString) as explicitPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: explicitPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> explicitPrx? {
    return try await explicitPrxI.checkedCast(prx: prx, facet: facet, context: context) as explicitPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: explicitPrx.Protocol, facet: Swift.String? = nil) -> explicitPrx {
    return explicitPrxI.uncheckedCast(prx: prx, facet: facet) as explicitPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: explicitPrx.Protocol) -> Swift.String {
    return explicitTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `explicitPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: explicitPrx.Protocol) throws -> explicitPrx? {
        return try read() as explicitPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: explicitPrx.Protocol) throws -> explicitPrx? {
        return try read(tag: tag) as explicitPrxI?
    }
}

public extension explicitPrx {}

public protocol optionalParamsPrx: Ice.ObjectPrx {}

private final class optionalParamsPrxI: Ice.ObjectPrxI, optionalParamsPrx {
    public override class func ice_staticId() -> Swift.String {
        return optionalParamsTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: optionalParamsPrx.Protocol) throws -> optionalParamsPrx {
    try communicator.makeProxyImpl(proxyString) as optionalParamsPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: optionalParamsPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> optionalParamsPrx? {
    return try await optionalParamsPrxI.checkedCast(prx: prx, facet: facet, context: context) as optionalParamsPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: optionalParamsPrx.Protocol, facet: Swift.String? = nil) -> optionalParamsPrx {
    return optionalParamsPrxI.uncheckedCast(prx: prx, facet: facet) as optionalParamsPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: optionalParamsPrx.Protocol) -> Swift.String {
    return optionalParamsTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `optionalParamsPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: optionalParamsPrx.Protocol) throws -> optionalParamsPrx? {
        return try read() as optionalParamsPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: optionalParamsPrx.Protocol) throws -> optionalParamsPrx? {
        return try read(tag: tag) as optionalParamsPrxI?
    }
}

public extension optionalParamsPrx {
    func `for`(goto iceP_goto: `as`? = nil, if iceP_if: explicitPrx? = nil, internal iceP_internal: `while`? = nil, namespace iceP_namespace: Swift.String? = nil, context: Ice.Context? = nil) async throws -> `break`? {
        return try await _impl._invoke(operation: "for",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(tag: 2, value: iceP_goto)
                                           ostr.write(tag: 3, value: iceP_if)
                                           whileHelper.write(to: ostr, tag: 5, value: iceP_internal)
                                           ostr.write(tag: 7, value: iceP_namespace)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: `break`? = try istr.read(tag: 1)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func `continue`(goto iceP_goto: `as`? = nil, if iceP_if: explicitPrx? = nil, internal iceP_internal: `while`? = nil, namespace iceP_namespace: Swift.String? = nil, context: Ice.Context? = nil) async throws -> `break`? {
        return try await _impl._invoke(operation: "continue",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(tag: 2, value: iceP_goto)
                                           ostr.write(tag: 3, value: iceP_if)
                                           whileHelper.write(to: ostr, tag: 5, value: iceP_internal)
                                           ostr.write(tag: 7, value: iceP_namespace)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: `break`? = try istr.read(tag: 1)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func `in`(context: Ice.Context? = nil) async throws -> (returnValue: `break`?, goto: `as`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?) {
        return try await _impl._invoke(operation: "in",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: `break`? = try istr.read(tag: 1)
                                           let iceP_goto: `as`? = try istr.read(tag: 2)
                                           let iceP_if: explicitPrx? = try istr.read(tag: 3, type: explicitPrx.self)
                                           let iceP_internal: `while`? = try whileHelper.read(from: istr, tag: 5)
                                           let iceP_namespace: Swift.String? = try istr.read(tag: 7)
                                           return (iceP_returnValue, iceP_goto, iceP_if, iceP_internal, iceP_namespace)
                                       },
                                       context: context)
    }

    func foreach(context: Ice.Context? = nil) async throws -> (returnValue: `break`?, goto: `as`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?) {
        return try await _impl._invoke(operation: "foreach",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: `break`? = try istr.read(tag: 1)
                                           let iceP_goto: `as`? = try istr.read(tag: 2)
                                           let iceP_if: explicitPrx? = try istr.read(tag: 3, type: explicitPrx.self)
                                           let iceP_internal: `while`? = try whileHelper.read(from: istr, tag: 5)
                                           let iceP_namespace: Swift.String? = try istr.read(tag: 7)
                                           return (iceP_returnValue, iceP_goto, iceP_if, iceP_internal, iceP_namespace)
                                       },
                                       context: context)
    }
}

public protocol implicitPrx: Ice.ObjectPrx {}

private final class implicitPrxI: Ice.ObjectPrxI, implicitPrx {
    public override class func ice_staticId() -> Swift.String {
        return implicitTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: implicitPrx.Protocol) throws -> implicitPrx {
    try communicator.makeProxyImpl(proxyString) as implicitPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: implicitPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> implicitPrx? {
    return try await implicitPrxI.checkedCast(prx: prx, facet: facet, context: context) as implicitPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: implicitPrx.Protocol, facet: Swift.String? = nil) -> implicitPrx {
    return implicitPrxI.uncheckedCast(prx: prx, facet: facet) as implicitPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: implicitPrx.Protocol) -> Swift.String {
    return implicitTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `implicitPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: implicitPrx.Protocol) throws -> implicitPrx? {
        return try read() as implicitPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: implicitPrx.Protocol) throws -> implicitPrx? {
        return try read(tag: tag) as implicitPrxI?
    }
}

public extension implicitPrx {
    func `in`(internal iceP_internal: `break`, is iceP_is: delegate?, lock iceP_lock: explicitPrx?, namespace iceP_namespace: casePrx?, new iceP_new: decimalPrx?, null iceP_null: delegate?, override iceP_override: Swift.Int32, params iceP_params: Swift.Int32, private iceP_private: Swift.Int32, context: Ice.Context? = nil) async throws -> `as` {
        return try await _impl._invoke(operation: "in",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_internal)
                                           ostr.write(iceP_is)
                                           ostr.write(iceP_lock)
                                           ostr.write(iceP_namespace)
                                           ostr.write(iceP_new)
                                           ostr.write(iceP_null)
                                           ostr.write(iceP_override)
                                           ostr.write(iceP_params)
                                           ostr.write(iceP_private)
                                           ostr.writePendingValues()
                                       },
                                       read: { istr in
                                           let iceP_returnValue: `as` = try istr.read()
                                           return iceP_returnValue
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as fixed {
                                               throw error
                                           } catch let error as foreach {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }
}

public protocol SystemTestPrx: Ice.ObjectPrx {}

private final class SystemTestPrxI: Ice.ObjectPrxI, SystemTestPrx {
    public override class func ice_staticId() -> Swift.String {
        return SystemTestTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: SystemTestPrx.Protocol) throws -> SystemTestPrx {
    try communicator.makeProxyImpl(proxyString) as SystemTestPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: SystemTestPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> SystemTestPrx? {
    return try await SystemTestPrxI.checkedCast(prx: prx, facet: facet, context: context) as SystemTestPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: SystemTestPrx.Protocol, facet: Swift.String? = nil) -> SystemTestPrx {
    return SystemTestPrxI.uncheckedCast(prx: prx, facet: facet) as SystemTestPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: SystemTestPrx.Protocol) -> Swift.String {
    return SystemTestTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `SystemTestPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: SystemTestPrx.Protocol) throws -> SystemTestPrx? {
        return try read() as SystemTestPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: SystemTestPrx.Protocol) throws -> SystemTestPrx? {
        return try read(tag: tag) as SystemTestPrxI?
    }
}

public extension SystemTestPrx {
    func op(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "op",
                                       mode: .Normal,
                                       context: context)
    }
}

public protocol TestPrx: Ice.ObjectPrx {}

private final class TestPrxI: Ice.ObjectPrxI, TestPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
///
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
///
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestPrx.Protocol) throws -> TestPrx {
    try communicator.makeProxyImpl(proxyString) as TestPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///   - context: The optional context dictionary for the remote invocation.
///
/// - Returns: A proxy with the requested type or nil if the objet does not support this type.
///
/// - Throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> TestPrx? {
    return try await TestPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - Parameters:
///   - prx: The proxy to be cast.
///   - type: The proxy type to cast to.
///   - facet: The optional name of the desired facet.
///
/// - Returns: A proxy with the requested type.
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestPrx.Protocol, facet: Swift.String? = nil) -> TestPrx {
    return TestPrxI.uncheckedCast(prx: prx, facet: facet) as TestPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// - Parameter type:  The proxy type to retrieve the type id.
///
/// - Returns: The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestPrx.Protocol) -> Swift.String {
    return TestTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxies of type
/// `TestPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(_ type: TestPrx.Protocol) throws -> TestPrx? {
        return try read() as TestPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - Parameter tag:  The numeric tag associated with the value.
    /// - Parameter type: The type of the proxy to be extracted.
    ///
    /// - Returns: The extracted proxy.
    func read(tag: Swift.Int32, type: TestPrx.Protocol) throws -> TestPrx? {
        return try read(tag: tag) as TestPrxI?
    }
}

public extension TestPrx {
    func op(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "op",
                                       mode: .Normal,
                                       context: context)
    }
}

@_documentation(visibility: internal)
public class delegate_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return delegate.self
    }
}

public extension Ice.ClassResolver {
    @objc static func abstract_delegate() -> Ice.ValueTypeResolver {
        return delegate_TypeResolver()
    }
}

open class delegate: Ice.Value {
    public var `if`: Swift.Int32 = 0
    public var `else`: casePrx? = nil
    public var event: Swift.Int32 = 0

    public required init() {}

    public init(`if`: Swift.Int32, `else`: casePrx?, event: Swift.Int32) {
        self.`if` = `if`
        self.`else` = `else`
        self.event = event
    }

    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::abstract::delegate" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`if` = try istr.read()
        self.`else` = try istr.read(casePrx.self)
        self.event = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: delegate.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.`if`)
        ostr.write(self.`else`)
        ostr.write(self.event)
        ostr.endSlice()
    }
}

@_documentation(visibility: internal)
public class optionalMembers_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return optionalMembers.self
    }
}

public extension Ice.ClassResolver {
    @objc static func abstract_optionalMembers() -> Ice.ValueTypeResolver {
        return optionalMembers_TypeResolver()
    }
}

open class optionalMembers: Ice.Value {
    public var `for`: `break`? = nil
    public var goto: `as`? = nil
    public var `if`: explicitPrx? = nil
    public var `internal`: `while`? = nil
    public var namespace: Swift.String? = nil

    public required init() {}

    public init(`for`: `break`?, goto: `as`?, `if`: explicitPrx?, `internal`: `while`?, namespace: Swift.String?) {
        self.`for` = `for`
        self.goto = goto
        self.`if` = `if`
        self.`internal` = `internal`
        self.namespace = namespace
    }

    /// - Returns: The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::abstract::optionalMembers" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`for` = try istr.read(tag: 1)
        self.goto = try istr.read(tag: 2)
        self.`if` = try istr.read(tag: 3, type: explicitPrx.self)
        self.`internal` = try whileHelper.read(from: istr, tag: 5)
        self.namespace = try istr.read(tag: 7)
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: optionalMembers.ice_staticId(), compactId: -1, last: true)
        ostr.write(tag: 1, value: self.`for`)
        ostr.write(tag: 2, value: self.goto)
        ostr.write(tag: 3, value: self.`if`)
        whileHelper.write(to: ostr, tag: 5, value: self.`internal`)
        ostr.write(tag: 7, value: self.namespace)
        ostr.endSlice()
    }
}


/// Dispatcher for ``case`` servants.
public struct caseDisp: Ice.Dispatcher {
    public let servant: `case`
    private static let defaultObject = Ice.ObjectI<caseTraits>()

    public init(_ servant: `case`) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "catch":
            try await servant._iceD_catch(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? caseDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? caseDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? caseDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? caseDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol `case` {
    func `catch`(checked: Swift.Int32, current: Ice.Current) async throws -> Swift.Int32
}


/// Dispatcher for `decimal` servants.
public struct decimalDisp: Ice.Dispatcher {
    public let servant: decimal
    private static let defaultObject = Ice.ObjectI<decimalTraits>()

    public init(_ servant: decimal) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "default":
            try await servant._iceD_default(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? decimalDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? decimalDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? decimalDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? decimalDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol decimal {
    func `default`(current: Ice.Current) async throws
}


/// Dispatcher for `explicit` servants.
public struct explicitDisp: Ice.Dispatcher {
    public let servant: explicit
    private static let defaultObject = Ice.ObjectI<explicitTraits>()

    public init(_ servant: explicit) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "catch":
            try await servant._iceD_catch(request)
        case "default":
            try await servant._iceD_default(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? explicitDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? explicitDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? explicitDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? explicitDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol explicit: decimal, `case` {}


/// Dispatcher for `optionalParams` servants.
public struct optionalParamsDisp: Ice.Dispatcher {
    public let servant: optionalParams
    private static let defaultObject = Ice.ObjectI<optionalParamsTraits>()

    public init(_ servant: optionalParams) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "continue":
            try await servant._iceD_continue(request)
        case "for":
            try await servant._iceD_for(request)
        case "foreach":
            try await servant._iceD_foreach(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? optionalParamsDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? optionalParamsDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? optionalParamsDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? optionalParamsDisp.defaultObject)._iceD_ice_ping(request)
        case "in":
            try await servant._iceD_in(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol optionalParams {
    func `for`(goto: `as`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?, current: Ice.Current) async throws -> `break`?

    func `continue`(goto: `as`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?, current: Ice.Current) async throws -> `break`?

    func `in`(current: Ice.Current) async throws -> (returnValue: `break`?, goto: `as`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?)

    func foreach(current: Ice.Current) async throws -> (returnValue: `break`?, goto: `as`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?)
}


/// Dispatcher for `implicit` servants.
public struct implicitDisp: Ice.Dispatcher {
    public let servant: implicit
    private static let defaultObject = Ice.ObjectI<implicitTraits>()

    public init(_ servant: implicit) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? implicitDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? implicitDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? implicitDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? implicitDisp.defaultObject)._iceD_ice_ping(request)
        case "in":
            try await servant._iceD_in(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol implicit {
    func `in`(internal: `break`, is: delegate?, lock: explicitPrx?, namespace: casePrx?, new: decimalPrx?, null: delegate?, override: Swift.Int32, params: Swift.Int32, private: Swift.Int32, current: Ice.Current) async throws -> `as`
}


/// Dispatcher for `SystemTest` servants.
public struct SystemTestDisp: Ice.Dispatcher {
    public let servant: SystemTest
    private static let defaultObject = Ice.ObjectI<SystemTestTraits>()

    public init(_ servant: SystemTest) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? SystemTestDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? SystemTestDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? SystemTestDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? SystemTestDisp.defaultObject)._iceD_ice_ping(request)
        case "op":
            try await servant._iceD_op(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol SystemTest {
    func op(current: Ice.Current) async throws
}


/// Dispatcher for `Test` servants.
public struct TestDisp: Ice.Dispatcher {
    public let servant: Test
    private static let defaultObject = Ice.ObjectI<TestTraits>()

    public init(_ servant: Test) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? TestDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? TestDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? TestDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? TestDisp.defaultObject)._iceD_ice_ping(request)
        case "op":
            try await servant._iceD_op(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol Test {
    func op(current: Ice.Current) async throws
}

extension `case` {
    public func _iceD_catch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_checked: Swift.Int32 = try istr.read()
        let result = try await self.`catch`(checked: iceP_checked, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_continue = value
            ostr.write(iceP_continue)
        }
    }
}

extension decimal {
    public func _iceD_default(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.`default`(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

extension explicit {}

extension optionalParams {
    public func _iceD_for(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_goto: `as`? = try istr.read(tag: 2)
        let iceP_if: explicitPrx? = try istr.read(tag: 3, type: explicitPrx.self)
        let iceP_internal: `while`? = try whileHelper.read(from: istr, tag: 5)
        let iceP_namespace: Swift.String? = try istr.read(tag: 7)
        let result = try await self.`for`(goto: iceP_goto, if: iceP_if, internal: iceP_internal, namespace: iceP_namespace, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(tag: 1, value: iceP_returnValue)
        }
    }

    public func _iceD_continue(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_goto: `as`? = try istr.read(tag: 2)
        let iceP_if: explicitPrx? = try istr.read(tag: 3, type: explicitPrx.self)
        let iceP_internal: `while`? = try whileHelper.read(from: istr, tag: 5)
        let iceP_namespace: Swift.String? = try istr.read(tag: 7)
        let result = try await self.`continue`(goto: iceP_goto, if: iceP_if, internal: iceP_internal, namespace: iceP_namespace, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(tag: 1, value: iceP_returnValue)
        }
    }

    public func _iceD_in(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.`in`(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_goto, iceP_if, iceP_internal, iceP_namespace) = value
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 2, value: iceP_goto)
            ostr.write(tag: 3, value: iceP_if)
            whileHelper.write(to: ostr, tag: 5, value: iceP_internal)
            ostr.write(tag: 7, value: iceP_namespace)
        }
    }

    public func _iceD_foreach(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.foreach(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_goto, iceP_if, iceP_internal, iceP_namespace) = value
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 2, value: iceP_goto)
            ostr.write(tag: 3, value: iceP_if)
            whileHelper.write(to: ostr, tag: 5, value: iceP_internal)
            ostr.write(tag: 7, value: iceP_namespace)
        }
    }
}

extension implicit {
    public func _iceD_in(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_internal: `break` = try istr.read()
        var iceP_is: delegate?
        try istr.read(delegate.self) { iceP_is = $0 }
        let iceP_lock: explicitPrx? = try istr.read(explicitPrx.self)
        let iceP_namespace: casePrx? = try istr.read(casePrx.self)
        let iceP_new: decimalPrx? = try istr.read(decimalPrx.self)
        var iceP_null: delegate?
        try istr.read(delegate.self) { iceP_null = $0 }
        let iceP_override: Swift.Int32 = try istr.read()
        let iceP_params: Swift.Int32 = try istr.read()
        let iceP_private: Swift.Int32 = try istr.read()
        try istr.readPendingValues()
        let result = try await self.`in`(internal: iceP_internal, is: iceP_is, lock: iceP_lock, namespace: iceP_namespace, new: iceP_new, null: iceP_null, override: iceP_override, params: iceP_params, private: iceP_private, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}

extension SystemTest {
    public func _iceD_op(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.op(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

extension Test {
    public func _iceD_op(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.op(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
