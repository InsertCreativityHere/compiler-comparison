//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

public typealias NV = [Swift.Int32: Swift.Int32]

/// Helper class to read and write `NV` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct NVHelper {
    /// Read a `NV` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `NV` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> NV {
        let sz = try Swift.Int(istr.readSize())
        var v = NV()
        for _ in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            let value: Swift.Int32 = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `NV?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `NV` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> NV? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `NV` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `NV` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: NV) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `NV?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `NV` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: NV?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 8) {
            write(to: ostr, value: val)
        }
    }
}

public typealias NR = [Swift.String: Swift.String]

/// Helper class to read and write `NR` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct NRHelper {
    /// Read a `NR` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `NR` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> NR {
        let sz = try Swift.Int(istr.readSize())
        var v = NR()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: Swift.String = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `NR?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `NR` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> NR? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `NR` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `NR` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: NR) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `NR?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `NR` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: NR?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias NDV = [Swift.String: NV]

/// Helper class to read and write `NDV` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct NDVHelper {
    /// Read a `NDV` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `NDV` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> NDV {
        let sz = try Swift.Int(istr.readSize())
        var v = NDV()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: NV = try NVHelper.read(from: istr)
            v[key] = value
        }
        return v
    }
    /// Read an optional `NDV?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `NDV` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> NDV? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `NDV` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `NDV` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: NDV) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            NVHelper.write(to: ostr, value: value)
        }
    }

    /// Wite an optional `NDV?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `NDV` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: NDV?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias NDR = [Swift.String: NR]

/// Helper class to read and write `NDR` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct NDRHelper {
    /// Read a `NDR` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `NDR` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> NDR {
        let sz = try Swift.Int(istr.readSize())
        var v = NDR()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: NR = try NRHelper.read(from: istr)
            v[key] = value
        }
        return v
    }
    /// Read an optional `NDR?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `NDR` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> NDR? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `NDR` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `NDR` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: NDR) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            NRHelper.write(to: ostr, value: value)
        }
    }

    /// Wite an optional `NDR?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `NDR` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: NDR?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias IntSeq = [Swift.Int32]

public struct TEstNv {
    public var d: NV = NV()
    public var s: IntSeq = IntSeq()

    public init() {}

    public init(d: NV, s: IntSeq) {
        self.d = d
        self.s = s
    }
}

/// An `Ice.InputStream` extension to read `TEstNv` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `TEstNv` structured value from the stream.
    ///
    /// - returns: `TEstNv` - The structured value read from the stream.
    func read() throws -> TEstNv {
        var v = TEstNv()
        v.d = try NVHelper.read(from: self)
        v.s = try self.read()
        return v
    }

    /// Read an optional `TEstNv?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `TEstNv?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> TEstNv? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as TEstNv
    }
}

/// An `Ice.OutputStream` extension to write `TEstNv` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `TEstNv` structured value to the stream.
    ///
    /// - parameter _: `TEstNv` - The value to write to the stream.
    func write(_ v: TEstNv) {
        NVHelper.write(to: self, value: v.d)
        self.write(v.s)
    }

    /// Write an optional `TEstNv?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `TEstNv?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: TEstNv?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

public typealias AIS = [Swift.Int32]

public typealias GIS = [Swift.Int32]

public typealias ASS = [Swift.String]

public typealias GSS = [Swift.String]

public typealias NDAIS = [Swift.String: AIS]

/// Helper class to read and write `NDAIS` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct NDAISHelper {
    /// Read a `NDAIS` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `NDAIS` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> NDAIS {
        let sz = try Swift.Int(istr.readSize())
        var v = NDAIS()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: AIS = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `NDAIS?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `NDAIS` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> NDAIS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `NDAIS` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `NDAIS` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: NDAIS) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `NDAIS?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `NDAIS` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: NDAIS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias NDGIS = [Swift.String: GIS]

/// Helper class to read and write `NDGIS` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct NDGISHelper {
    /// Read a `NDGIS` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `NDGIS` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> NDGIS {
        let sz = try Swift.Int(istr.readSize())
        var v = NDGIS()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: GIS = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `NDGIS?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `NDGIS` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> NDGIS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `NDGIS` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `NDGIS` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: NDGIS) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `NDGIS?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `NDGIS` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: NDGIS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias NDASS = [Swift.String: ASS]

/// Helper class to read and write `NDASS` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct NDASSHelper {
    /// Read a `NDASS` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `NDASS` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> NDASS {
        let sz = try Swift.Int(istr.readSize())
        var v = NDASS()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: ASS = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `NDASS?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `NDASS` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> NDASS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `NDASS` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `NDASS` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: NDASS) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `NDASS?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `NDASS` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: NDASS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias NDGSS = [Swift.String: GSS]

/// Helper class to read and write `NDGSS` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct NDGSSHelper {
    /// Read a `NDGSS` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `NDGSS` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> NDGSS {
        let sz = try Swift.Int(istr.readSize())
        var v = NDGSS()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: GSS = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `NDGSS?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `NDGSS` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> NDGSS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `NDGSS` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `NDGSS` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: NDGSS) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `NDGSS?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `NDGSS` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: NDGSS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice interface`MyClass`.
public struct MyClassTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MyClass"]
    public static let staticId = "::Test::MyClass"
}

/// MyClassPrx overview.
///
/// MyClassPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - opNV: 
///
///  - opNVAsync: 
///
///  - opNR: 
///
///  - opNRAsync: 
///
///  - opNDV: 
///
///  - opNDVAsync: 
///
///  - opNDR: 
///
///  - opNDRAsync: 
///
///  - opNDAIS: 
///
///  - opNDAISAsync: 
///
///  - opNDGIS: 
///
///  - opNDGISAsync: 
///
///  - opNDASS: 
///
///  - opNDASSAsync: 
///
///  - opNDGSS: 
///
///  - opNDGSSAsync: 
public protocol MyClassPrx: Ice.ObjectPrx {}

private final class MyClassPrxI: Ice.ObjectPrxI, MyClassPrx {
    public override class func ice_staticId() -> Swift.String {
        return MyClassTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MyClassPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MyClassPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MyClassPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MyClassPrx? {
    return try MyClassPrxI.checkedCast(prx: prx, facet: facet, context: context) as MyClassPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MyClassPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MyClassPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MyClassPrx.Protocol, facet: Swift.String? = nil) -> MyClassPrx {
    return MyClassPrxI.uncheckedCast(prx: prx, facet: facet) as MyClassPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MyClassPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MyClassPrx.Protocol) -> Swift.String {
    return MyClassTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MyClassPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MyClassPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MyClassPrx?` - The extracted proxy
    func read(_ type: MyClassPrx.Protocol) throws -> MyClassPrx? {
        return try read() as MyClassPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MyClassPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MyClassPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MyClassPrx.Protocol) throws -> MyClassPrx? {
        return try read(tag: tag) as MyClassPrxI?
    }
}

/// MyClassPrx overview.
///
/// MyClassPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - opNV: 
///
///  - opNVAsync: 
///
///  - opNR: 
///
///  - opNRAsync: 
///
///  - opNDV: 
///
///  - opNDVAsync: 
///
///  - opNDR: 
///
///  - opNDRAsync: 
///
///  - opNDAIS: 
///
///  - opNDAISAsync: 
///
///  - opNDGIS: 
///
///  - opNDGISAsync: 
///
///  - opNDASS: 
///
///  - opNDASSAsync: 
///
///  - opNDGSS: 
///
///  - opNDGSSAsync: 
public extension MyClassPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `NV`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: NV, o: NV)`:
    ///
    ///   - returnValue: `NV`
    ///
    ///   - o: `NV`
    func opNV(_ iceP_i: NV, context: Ice.Context? = nil) throws -> (returnValue: NV, o: NV) {
        return try _impl._invoke(operation: "opNV",
                                 mode: .Normal,
                                 write: { ostr in
                                     NVHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: NV = try NVHelper.read(from: istr)
                                     let iceP_returnValue: NV = try NVHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `NV`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: NV, o: NV)>` - The result of the operation
    func opNVAsync(_ iceP_i: NV, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: NV, o: NV)> {
        return _impl._invokeAsync(operation: "opNV",
                                  mode: .Normal,
                                  write: { ostr in
                                      NVHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: NV = try NVHelper.read(from: istr)
                                      let iceP_returnValue: NV = try NVHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `NR`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: NR, o: NR)`:
    ///
    ///   - returnValue: `NR`
    ///
    ///   - o: `NR`
    func opNR(_ iceP_i: NR, context: Ice.Context? = nil) throws -> (returnValue: NR, o: NR) {
        return try _impl._invoke(operation: "opNR",
                                 mode: .Normal,
                                 write: { ostr in
                                     NRHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: NR = try NRHelper.read(from: istr)
                                     let iceP_returnValue: NR = try NRHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `NR`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: NR, o: NR)>` - The result of the operation
    func opNRAsync(_ iceP_i: NR, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: NR, o: NR)> {
        return _impl._invokeAsync(operation: "opNR",
                                  mode: .Normal,
                                  write: { ostr in
                                      NRHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: NR = try NRHelper.read(from: istr)
                                      let iceP_returnValue: NR = try NRHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `NDV`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: NDV, o: NDV)`:
    ///
    ///   - returnValue: `NDV`
    ///
    ///   - o: `NDV`
    func opNDV(_ iceP_i: NDV, context: Ice.Context? = nil) throws -> (returnValue: NDV, o: NDV) {
        return try _impl._invoke(operation: "opNDV",
                                 mode: .Normal,
                                 write: { ostr in
                                     NDVHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: NDV = try NDVHelper.read(from: istr)
                                     let iceP_returnValue: NDV = try NDVHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `NDV`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: NDV, o: NDV)>` - The result of the operation
    func opNDVAsync(_ iceP_i: NDV, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: NDV, o: NDV)> {
        return _impl._invokeAsync(operation: "opNDV",
                                  mode: .Normal,
                                  write: { ostr in
                                      NDVHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: NDV = try NDVHelper.read(from: istr)
                                      let iceP_returnValue: NDV = try NDVHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `NDR`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: NDR, o: NDR)`:
    ///
    ///   - returnValue: `NDR`
    ///
    ///   - o: `NDR`
    func opNDR(_ iceP_i: NDR, context: Ice.Context? = nil) throws -> (returnValue: NDR, o: NDR) {
        return try _impl._invoke(operation: "opNDR",
                                 mode: .Normal,
                                 write: { ostr in
                                     NDRHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: NDR = try NDRHelper.read(from: istr)
                                     let iceP_returnValue: NDR = try NDRHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `NDR`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: NDR, o: NDR)>` - The result of the operation
    func opNDRAsync(_ iceP_i: NDR, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: NDR, o: NDR)> {
        return _impl._invokeAsync(operation: "opNDR",
                                  mode: .Normal,
                                  write: { ostr in
                                      NDRHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: NDR = try NDRHelper.read(from: istr)
                                      let iceP_returnValue: NDR = try NDRHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `NDAIS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: NDAIS, o: NDAIS)`:
    ///
    ///   - returnValue: `NDAIS`
    ///
    ///   - o: `NDAIS`
    func opNDAIS(_ iceP_i: NDAIS, context: Ice.Context? = nil) throws -> (returnValue: NDAIS, o: NDAIS) {
        return try _impl._invoke(operation: "opNDAIS",
                                 mode: .Normal,
                                 write: { ostr in
                                     NDAISHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: NDAIS = try NDAISHelper.read(from: istr)
                                     let iceP_returnValue: NDAIS = try NDAISHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `NDAIS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: NDAIS, o: NDAIS)>` - The result of the operation
    func opNDAISAsync(_ iceP_i: NDAIS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: NDAIS, o: NDAIS)> {
        return _impl._invokeAsync(operation: "opNDAIS",
                                  mode: .Normal,
                                  write: { ostr in
                                      NDAISHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: NDAIS = try NDAISHelper.read(from: istr)
                                      let iceP_returnValue: NDAIS = try NDAISHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `NDGIS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: NDGIS, o: NDGIS)`:
    ///
    ///   - returnValue: `NDGIS`
    ///
    ///   - o: `NDGIS`
    func opNDGIS(_ iceP_i: NDGIS, context: Ice.Context? = nil) throws -> (returnValue: NDGIS, o: NDGIS) {
        return try _impl._invoke(operation: "opNDGIS",
                                 mode: .Normal,
                                 write: { ostr in
                                     NDGISHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: NDGIS = try NDGISHelper.read(from: istr)
                                     let iceP_returnValue: NDGIS = try NDGISHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `NDGIS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: NDGIS, o: NDGIS)>` - The result of the operation
    func opNDGISAsync(_ iceP_i: NDGIS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: NDGIS, o: NDGIS)> {
        return _impl._invokeAsync(operation: "opNDGIS",
                                  mode: .Normal,
                                  write: { ostr in
                                      NDGISHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: NDGIS = try NDGISHelper.read(from: istr)
                                      let iceP_returnValue: NDGIS = try NDGISHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `NDASS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: NDASS, o: NDASS)`:
    ///
    ///   - returnValue: `NDASS`
    ///
    ///   - o: `NDASS`
    func opNDASS(_ iceP_i: NDASS, context: Ice.Context? = nil) throws -> (returnValue: NDASS, o: NDASS) {
        return try _impl._invoke(operation: "opNDASS",
                                 mode: .Normal,
                                 write: { ostr in
                                     NDASSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: NDASS = try NDASSHelper.read(from: istr)
                                     let iceP_returnValue: NDASS = try NDASSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `NDASS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: NDASS, o: NDASS)>` - The result of the operation
    func opNDASSAsync(_ iceP_i: NDASS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: NDASS, o: NDASS)> {
        return _impl._invokeAsync(operation: "opNDASS",
                                  mode: .Normal,
                                  write: { ostr in
                                      NDASSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: NDASS = try NDASSHelper.read(from: istr)
                                      let iceP_returnValue: NDASS = try NDASSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `NDGSS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: NDGSS, o: NDGSS)`:
    ///
    ///   - returnValue: `NDGSS`
    ///
    ///   - o: `NDGSS`
    func opNDGSS(_ iceP_i: NDGSS, context: Ice.Context? = nil) throws -> (returnValue: NDGSS, o: NDGSS) {
        return try _impl._invoke(operation: "opNDGSS",
                                 mode: .Normal,
                                 write: { ostr in
                                     NDGSSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: NDGSS = try NDGSSHelper.read(from: istr)
                                     let iceP_returnValue: NDGSS = try NDGSSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `NDGSS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: NDGSS, o: NDGSS)>` - The result of the operation
    func opNDGSSAsync(_ iceP_i: NDGSS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: NDGSS, o: NDGSS)> {
        return _impl._invokeAsync(operation: "opNDGSS",
                                  mode: .Normal,
                                  write: { ostr in
                                      NDGSSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: NDGSS = try NDGSSHelper.read(from: istr)
                                      let iceP_returnValue: NDGSS = try NDGSSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `MyClass` servants.
public struct MyClassDisp: Ice.Disp {
    public let servant: MyClass
    private static let defaultObject = Ice.ObjectI<MyClassTraits>()

    public init(_ servant: MyClass) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "ice_id":
            return try (servant as? Object ?? MyClassDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MyClassDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MyClassDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MyClassDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "opNDAIS":
            return try servant._iceD_opNDAIS(incoming: request, current: current)
        case "opNDASS":
            return try servant._iceD_opNDASS(incoming: request, current: current)
        case "opNDGIS":
            return try servant._iceD_opNDGIS(incoming: request, current: current)
        case "opNDGSS":
            return try servant._iceD_opNDGSS(incoming: request, current: current)
        case "opNDR":
            return try servant._iceD_opNDR(incoming: request, current: current)
        case "opNDV":
            return try servant._iceD_opNDV(incoming: request, current: current)
        case "opNR":
            return try servant._iceD_opNR(incoming: request, current: current)
        case "opNV":
            return try servant._iceD_opNV(incoming: request, current: current)
        case "shutdown":
            return try servant._iceD_shutdown(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MyClass {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws

    ///
    /// - parameter i: `NV`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: NV, o: NV)`:
    ///
    ///   - returnValue: `NV`
    ///
    ///   - o: `NV`
    func opNV(i: NV, current: Ice.Current) throws -> (returnValue: NV, o: NV)

    ///
    /// - parameter i: `NR`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: NR, o: NR)`:
    ///
    ///   - returnValue: `NR`
    ///
    ///   - o: `NR`
    func opNR(i: NR, current: Ice.Current) throws -> (returnValue: NR, o: NR)

    ///
    /// - parameter i: `NDV`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: NDV, o: NDV)`:
    ///
    ///   - returnValue: `NDV`
    ///
    ///   - o: `NDV`
    func opNDV(i: NDV, current: Ice.Current) throws -> (returnValue: NDV, o: NDV)

    ///
    /// - parameter i: `NDR`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: NDR, o: NDR)`:
    ///
    ///   - returnValue: `NDR`
    ///
    ///   - o: `NDR`
    func opNDR(i: NDR, current: Ice.Current) throws -> (returnValue: NDR, o: NDR)

    ///
    /// - parameter i: `NDAIS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: NDAIS, o: NDAIS)`:
    ///
    ///   - returnValue: `NDAIS`
    ///
    ///   - o: `NDAIS`
    func opNDAIS(i: NDAIS, current: Ice.Current) throws -> (returnValue: NDAIS, o: NDAIS)

    ///
    /// - parameter i: `NDGIS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: NDGIS, o: NDGIS)`:
    ///
    ///   - returnValue: `NDGIS`
    ///
    ///   - o: `NDGIS`
    func opNDGIS(i: NDGIS, current: Ice.Current) throws -> (returnValue: NDGIS, o: NDGIS)

    ///
    /// - parameter i: `NDASS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: NDASS, o: NDASS)`:
    ///
    ///   - returnValue: `NDASS`
    ///
    ///   - o: `NDASS`
    func opNDASS(i: NDASS, current: Ice.Current) throws -> (returnValue: NDASS, o: NDASS)

    ///
    /// - parameter i: `NDGSS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: NDGSS, o: NDGSS)`:
    ///
    ///   - returnValue: `NDGSS`
    ///
    ///   - o: `NDGSS`
    func opNDGSS(i: NDGSS, current: Ice.Current) throws -> (returnValue: NDGSS, o: NDGSS)
}

/// MyClass overview.
///
/// MyClass Methods:
///
///  - shutdown: 
///
///  - opNV: 
///
///  - opNR: 
///
///  - opNDV: 
///
///  - opNDR: 
///
///  - opNDAIS: 
///
///  - opNDGIS: 
///
///  - opNDASS: 
///
///  - opNDGSS: 
public extension MyClass {
    func _iceD_shutdown(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.shutdown(current: current)

        return inS.setResult()
    }

    func _iceD_opNV(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: NV = try inS.read { istr in
            let iceP_i: NV = try NVHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opNV(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            NVHelper.write(to: ostr, value: iceP_o)
            NVHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opNR(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: NR = try inS.read { istr in
            let iceP_i: NR = try NRHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opNR(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            NRHelper.write(to: ostr, value: iceP_o)
            NRHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opNDV(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: NDV = try inS.read { istr in
            let iceP_i: NDV = try NDVHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opNDV(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            NDVHelper.write(to: ostr, value: iceP_o)
            NDVHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opNDR(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: NDR = try inS.read { istr in
            let iceP_i: NDR = try NDRHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opNDR(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            NDRHelper.write(to: ostr, value: iceP_o)
            NDRHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opNDAIS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: NDAIS = try inS.read { istr in
            let iceP_i: NDAIS = try NDAISHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opNDAIS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            NDAISHelper.write(to: ostr, value: iceP_o)
            NDAISHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opNDGIS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: NDGIS = try inS.read { istr in
            let iceP_i: NDGIS = try NDGISHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opNDGIS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            NDGISHelper.write(to: ostr, value: iceP_o)
            NDGISHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opNDASS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: NDASS = try inS.read { istr in
            let iceP_i: NDASS = try NDASSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opNDASS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            NDASSHelper.write(to: ostr, value: iceP_o)
            NDASSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opNDGSS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: NDGSS = try inS.read { istr in
            let iceP_i: NDGSS = try NDGSSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opNDGSS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            NDGSSHelper.write(to: ostr, value: iceP_o)
            NDGSSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }
}
