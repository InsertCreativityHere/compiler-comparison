//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

public typealias AByteS = Foundation.Data

public typealias LByteS = Foundation.Data

public typealias KByteS = Foundation.Data

public typealias QByteS = Foundation.Data

public typealias SByteS = Foundation.Data

public typealias CByteS = Foundation.Data

public typealias ABoolS = [Swift.Bool]

public typealias LBoolS = [Swift.Bool]

public typealias KBoolS = [Swift.Bool]

public typealias QBoolS = [Swift.Bool]

public typealias SBoolS = [Swift.Bool]

public typealias CBoolS = [Swift.Bool]

public typealias AShortS = [Swift.Int16]

public typealias LShortS = [Swift.Int16]

public typealias KShortS = [Swift.Int16]

public typealias QShortS = [Swift.Int16]

public typealias SShortS = [Swift.Int16]

public typealias CShortS = [Swift.Int16]

public typealias AIntS = [Swift.Int32]

public typealias LIntS = [Swift.Int32]

public typealias KIntS = [Swift.Int32]

public typealias QIntS = [Swift.Int32]

public typealias SIntS = [Swift.Int32]

public typealias CIntS = [Swift.Int32]

public typealias ALongS = [Swift.Int64]

public typealias LLongS = [Swift.Int64]

public typealias KLongS = [Swift.Int64]

public typealias QLongS = [Swift.Int64]

public typealias SLongS = [Swift.Int64]

public typealias CLongS = [Swift.Int64]

public typealias AFloatS = [Swift.Float]

public typealias LFloatS = [Swift.Float]

public typealias KFloatS = [Swift.Float]

public typealias QFloatS = [Swift.Float]

public typealias SFloatS = [Swift.Float]

public typealias CFloatS = [Swift.Float]

public typealias ADoubleS = [Swift.Double]

public typealias LDoubleS = [Swift.Double]

public typealias KDoubleS = [Swift.Double]

public typealias QDoubleS = [Swift.Double]

public typealias SDoubleS = [Swift.Double]

public typealias CDoubleS = [Swift.Double]

public typealias AStringS = [Swift.String]

public typealias LStringS = [Swift.String]

public typealias KStringS = [Swift.String]

public typealias QStringS = [Swift.String]

public typealias SStringS = [Swift.String]

public typealias CStringS = [Swift.String]

public typealias AObjectS = [Ice.Value?]

/// Helper class to read and write `AObjectS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct AObjectSHelper {
    /// Read a `AObjectS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `AObjectS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> AObjectS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = AObjectS(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read() { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `AObjectS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `AObjectS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> AObjectS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `AObjectS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `AObjectS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: AObjectS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `AObjectS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `AObjectS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: AObjectS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias LObjectS = [Ice.Value?]

/// Helper class to read and write `LObjectS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct LObjectSHelper {
    /// Read a `LObjectS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `LObjectS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> LObjectS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = LObjectS(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read() { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `LObjectS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `LObjectS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> LObjectS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `LObjectS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `LObjectS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: LObjectS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `LObjectS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `LObjectS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: LObjectS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias CObjectS = [Ice.Value?]

/// Helper class to read and write `CObjectS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct CObjectSHelper {
    /// Read a `CObjectS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `CObjectS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> CObjectS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = CObjectS(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read() { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `CObjectS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CObjectS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> CObjectS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `CObjectS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `CObjectS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: CObjectS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `CObjectS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `CObjectS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: CObjectS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias AObjectPrxS = [Ice.ObjectPrx?]

/// Helper class to read and write `AObjectPrxS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct AObjectPrxSHelper {
    /// Read a `AObjectPrxS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `AObjectPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> AObjectPrxS {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = AObjectPrxS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: Ice.ObjectPrx? = try istr.read(Ice.ObjectPrx.self)
            v.append(j)
        }
        return v
    }
    /// Read an optional `AObjectPrxS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `AObjectPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> AObjectPrxS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `AObjectPrxS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `AObjectPrxS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: AObjectPrxS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `AObjectPrxS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `AObjectPrxS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: AObjectPrxS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias LObjectPrxS = [Ice.ObjectPrx?]

/// Helper class to read and write `LObjectPrxS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct LObjectPrxSHelper {
    /// Read a `LObjectPrxS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `LObjectPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> LObjectPrxS {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = LObjectPrxS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: Ice.ObjectPrx? = try istr.read(Ice.ObjectPrx.self)
            v.append(j)
        }
        return v
    }
    /// Read an optional `LObjectPrxS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `LObjectPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> LObjectPrxS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `LObjectPrxS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `LObjectPrxS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: LObjectPrxS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `LObjectPrxS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `LObjectPrxS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: LObjectPrxS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias KObjectPrxS = [Ice.ObjectPrx?]

/// Helper class to read and write `KObjectPrxS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct KObjectPrxSHelper {
    /// Read a `KObjectPrxS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `KObjectPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> KObjectPrxS {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = KObjectPrxS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: Ice.ObjectPrx? = try istr.read(Ice.ObjectPrx.self)
            v.append(j)
        }
        return v
    }
    /// Read an optional `KObjectPrxS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `KObjectPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> KObjectPrxS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `KObjectPrxS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `KObjectPrxS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: KObjectPrxS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `KObjectPrxS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `KObjectPrxS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: KObjectPrxS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias QObjectPrxS = [Ice.ObjectPrx?]

/// Helper class to read and write `QObjectPrxS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct QObjectPrxSHelper {
    /// Read a `QObjectPrxS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `QObjectPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> QObjectPrxS {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = QObjectPrxS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: Ice.ObjectPrx? = try istr.read(Ice.ObjectPrx.self)
            v.append(j)
        }
        return v
    }
    /// Read an optional `QObjectPrxS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `QObjectPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> QObjectPrxS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `QObjectPrxS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `QObjectPrxS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: QObjectPrxS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `QObjectPrxS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `QObjectPrxS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: QObjectPrxS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias SObjectPrxS = [Ice.ObjectPrx?]

/// Helper class to read and write `SObjectPrxS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SObjectPrxSHelper {
    /// Read a `SObjectPrxS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `SObjectPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SObjectPrxS {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = SObjectPrxS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: Ice.ObjectPrx? = try istr.read(Ice.ObjectPrx.self)
            v.append(j)
        }
        return v
    }
    /// Read an optional `SObjectPrxS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SObjectPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SObjectPrxS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `SObjectPrxS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `SObjectPrxS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SObjectPrxS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `SObjectPrxS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SObjectPrxS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: SObjectPrxS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias CObjectPrxS = [Ice.ObjectPrx?]

/// Helper class to read and write `CObjectPrxS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct CObjectPrxSHelper {
    /// Read a `CObjectPrxS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `CObjectPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> CObjectPrxS {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = CObjectPrxS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: Ice.ObjectPrx? = try istr.read(Ice.ObjectPrx.self)
            v.append(j)
        }
        return v
    }
    /// Read an optional `CObjectPrxS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CObjectPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> CObjectPrxS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `CObjectPrxS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `CObjectPrxS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: CObjectPrxS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `CObjectPrxS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `CObjectPrxS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: CObjectPrxS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public struct S: Swift.Hashable {
    public var i: Swift.Int32 = 0

    public init() {}

    public init(i: Swift.Int32) {
        self.i = i
    }
}

/// An `Ice.InputStream` extension to read `S` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `S` structured value from the stream.
    ///
    /// - returns: `S` - The structured value read from the stream.
    func read() throws -> S {
        var v = S()
        v.i = try self.read()
        return v
    }

    /// Read an optional `S?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `S?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> S? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as S
    }
}

/// An `Ice.OutputStream` extension to write `S` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `S` structured value to the stream.
    ///
    /// - parameter _: `S` - The value to write to the stream.
    func write(_ v: S) {
        self.write(v.i)
    }

    /// Write an optional `S?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `S?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: S?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 4)
                write(v)
            }
        }
    }
}

public typealias AStructS = [S]

/// Helper class to read and write `AStructS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct AStructSHelper {
    /// Read a `AStructS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `AStructS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> AStructS {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = AStructS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: S = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `AStructS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `AStructS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> AStructS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `AStructS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `AStructS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: AStructS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `AStructS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `AStructS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: AStructS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias LStructS = [S]

/// Helper class to read and write `LStructS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct LStructSHelper {
    /// Read a `LStructS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `LStructS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> LStructS {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = LStructS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: S = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `LStructS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `LStructS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> LStructS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `LStructS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `LStructS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: LStructS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `LStructS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `LStructS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: LStructS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias KStructS = [S]

/// Helper class to read and write `KStructS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct KStructSHelper {
    /// Read a `KStructS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `KStructS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> KStructS {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = KStructS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: S = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `KStructS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `KStructS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> KStructS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `KStructS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `KStructS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: KStructS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `KStructS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `KStructS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: KStructS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias QStructS = [S]

/// Helper class to read and write `QStructS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct QStructSHelper {
    /// Read a `QStructS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `QStructS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> QStructS {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = QStructS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: S = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `QStructS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `QStructS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> QStructS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `QStructS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `QStructS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: QStructS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `QStructS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `QStructS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: QStructS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias SStructS = [S]

/// Helper class to read and write `SStructS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SStructSHelper {
    /// Read a `SStructS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `SStructS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SStructS {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = SStructS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: S = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `SStructS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SStructS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SStructS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `SStructS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `SStructS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SStructS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `SStructS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SStructS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: SStructS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias CStructS = [S]

/// Helper class to read and write `CStructS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct CStructSHelper {
    /// Read a `CStructS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `CStructS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> CStructS {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = CStructS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: S = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `CStructS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CStructS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> CStructS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `CStructS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `CStructS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: CStructS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `CStructS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `CStructS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: CStructS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public struct SD: Swift.Hashable {
    public var i: Swift.Int32 = 1

    public init() {}

    public init(i: Swift.Int32) {
        self.i = i
    }
}

/// An `Ice.InputStream` extension to read `SD` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `SD` structured value from the stream.
    ///
    /// - returns: `SD` - The structured value read from the stream.
    func read() throws -> SD {
        var v = SD()
        v.i = try self.read()
        return v
    }

    /// Read an optional `SD?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SD?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> SD? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as SD
    }
}

/// An `Ice.OutputStream` extension to write `SD` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `SD` structured value to the stream.
    ///
    /// - parameter _: `SD` - The value to write to the stream.
    func write(_ v: SD) {
        self.write(v.i)
    }

    /// Write an optional `SD?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SD?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: SD?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 4)
                write(v)
            }
        }
    }
}

public typealias AStructSD = [SD]

/// Helper class to read and write `AStructSD` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct AStructSDHelper {
    /// Read a `AStructSD` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `AStructSD` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> AStructSD {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = AStructSD()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: SD = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `AStructSD?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `AStructSD` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> AStructSD? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `AStructSD` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `AStructSD` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: AStructSD) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `AStructSD?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `AStructSD` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: AStructSD?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias LStructSD = [SD]

/// Helper class to read and write `LStructSD` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct LStructSDHelper {
    /// Read a `LStructSD` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `LStructSD` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> LStructSD {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = LStructSD()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: SD = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `LStructSD?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `LStructSD` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> LStructSD? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `LStructSD` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `LStructSD` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: LStructSD) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `LStructSD?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `LStructSD` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: LStructSD?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias KStructSD = [SD]

/// Helper class to read and write `KStructSD` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct KStructSDHelper {
    /// Read a `KStructSD` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `KStructSD` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> KStructSD {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = KStructSD()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: SD = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `KStructSD?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `KStructSD` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> KStructSD? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `KStructSD` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `KStructSD` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: KStructSD) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `KStructSD?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `KStructSD` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: KStructSD?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias QStructSD = [SD]

/// Helper class to read and write `QStructSD` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct QStructSDHelper {
    /// Read a `QStructSD` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `QStructSD` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> QStructSD {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = QStructSD()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: SD = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `QStructSD?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `QStructSD` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> QStructSD? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `QStructSD` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `QStructSD` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: QStructSD) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `QStructSD?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `QStructSD` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: QStructSD?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias SStructSD = [SD]

/// Helper class to read and write `SStructSD` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SStructSDHelper {
    /// Read a `SStructSD` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `SStructSD` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SStructSD {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = SStructSD()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: SD = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `SStructSD?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SStructSD` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SStructSD? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `SStructSD` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `SStructSD` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SStructSD) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `SStructSD?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SStructSD` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: SStructSD?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias CStructSD = [SD]

/// Helper class to read and write `CStructSD` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct CStructSDHelper {
    /// Read a `CStructSD` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `CStructSD` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> CStructSD {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = CStructSD()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: SD = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `CStructSD?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CStructSD` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> CStructSD? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `CStructSD` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `CStructSD` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: CStructSD) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `CStructSD?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `CStructSD` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: CStructSD?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

/// Traits for Slice class`CV`.
public struct CVTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::CV"]
    public static let staticId = "::Test::CV"
}

public typealias ACVS = [CV?]

/// Helper class to read and write `ACVS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ACVSHelper {
    /// Read a `ACVS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ACVS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ACVS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = ACVS(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read(CV.self) { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `ACVS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ACVS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ACVS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ACVS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ACVS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ACVS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ACVS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ACVS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ACVS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias LCVS = [CV?]

/// Helper class to read and write `LCVS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct LCVSHelper {
    /// Read a `LCVS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `LCVS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> LCVS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = LCVS(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read(CV.self) { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `LCVS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `LCVS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> LCVS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `LCVS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `LCVS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: LCVS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `LCVS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `LCVS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: LCVS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice interface`I`.
public struct ITraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::I"]
    public static let staticId = "::Test::I"
}

public typealias AIPrxS = [IPrx?]

/// Helper class to read and write `AIPrxS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct AIPrxSHelper {
    /// Read a `AIPrxS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `AIPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> AIPrxS {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = AIPrxS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: IPrx? = try istr.read(IPrx.self)
            v.append(j)
        }
        return v
    }
    /// Read an optional `AIPrxS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `AIPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> AIPrxS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `AIPrxS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `AIPrxS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: AIPrxS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `AIPrxS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `AIPrxS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: AIPrxS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias LIPrxS = [IPrx?]

/// Helper class to read and write `LIPrxS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct LIPrxSHelper {
    /// Read a `LIPrxS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `LIPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> LIPrxS {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = LIPrxS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: IPrx? = try istr.read(IPrx.self)
            v.append(j)
        }
        return v
    }
    /// Read an optional `LIPrxS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `LIPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> LIPrxS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `LIPrxS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `LIPrxS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: LIPrxS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `LIPrxS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `LIPrxS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: LIPrxS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias KIPrxS = [IPrx?]

/// Helper class to read and write `KIPrxS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct KIPrxSHelper {
    /// Read a `KIPrxS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `KIPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> KIPrxS {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = KIPrxS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: IPrx? = try istr.read(IPrx.self)
            v.append(j)
        }
        return v
    }
    /// Read an optional `KIPrxS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `KIPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> KIPrxS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `KIPrxS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `KIPrxS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: KIPrxS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `KIPrxS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `KIPrxS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: KIPrxS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias QIPrxS = [IPrx?]

/// Helper class to read and write `QIPrxS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct QIPrxSHelper {
    /// Read a `QIPrxS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `QIPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> QIPrxS {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = QIPrxS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: IPrx? = try istr.read(IPrx.self)
            v.append(j)
        }
        return v
    }
    /// Read an optional `QIPrxS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `QIPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> QIPrxS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `QIPrxS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `QIPrxS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: QIPrxS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `QIPrxS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `QIPrxS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: QIPrxS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias SIPrxS = [IPrx?]

/// Helper class to read and write `SIPrxS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SIPrxSHelper {
    /// Read a `SIPrxS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `SIPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SIPrxS {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = SIPrxS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: IPrx? = try istr.read(IPrx.self)
            v.append(j)
        }
        return v
    }
    /// Read an optional `SIPrxS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SIPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SIPrxS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `SIPrxS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `SIPrxS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SIPrxS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `SIPrxS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SIPrxS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: SIPrxS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias CIPrxS = [IPrx?]

/// Helper class to read and write `CIPrxS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct CIPrxSHelper {
    /// Read a `CIPrxS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `CIPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> CIPrxS {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = CIPrxS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: IPrx? = try istr.read(IPrx.self)
            v.append(j)
        }
        return v
    }
    /// Read an optional `CIPrxS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CIPrxS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> CIPrxS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `CIPrxS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `CIPrxS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: CIPrxS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `CIPrxS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `CIPrxS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: CIPrxS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice class`CR`.
public struct CRTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::CR"]
    public static let staticId = "::Test::CR"
}

public typealias ACRS = [CR?]

/// Helper class to read and write `ACRS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ACRSHelper {
    /// Read a `ACRS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ACRS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ACRS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = ACRS(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read(CR.self) { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `ACRS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ACRS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ACRS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ACRS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ACRS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ACRS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ACRS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ACRS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ACRS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias LCRS = [CR?]

/// Helper class to read and write `LCRS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct LCRSHelper {
    /// Read a `LCRS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `LCRS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> LCRS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = LCRS(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read(CR.self) { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `LCRS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `LCRS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> LCRS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `LCRS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `LCRS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: LCRS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `LCRS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `LCRS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: LCRS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias CCRS = [CR?]

/// Helper class to read and write `CCRS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct CCRSHelper {
    /// Read a `CCRS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `CCRS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> CCRS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = CCRS(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read(CR.self) { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `CCRS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CCRS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> CCRS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `CCRS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `CCRS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: CCRS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `CCRS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `CCRS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: CCRS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public enum En: Swift.UInt8 {
    /// A
    case A = 0
    /// B
    case B = 1
    /// C
    case C = 2
    public init() {
        self = .A
    }
}

/// An `Ice.InputStream` extension to read `En` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `En` - The enumarated value.
    func read() throws -> En {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 2)
        guard let val = En(rawValue: rawValue) else {
            throw Ice.MarshalException(reason: "invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `En` - The enumerated value.
    func read(tag: Swift.Int32) throws -> En? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as En
    }
}

/// An `Ice.OutputStream` extension to write `En` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `En` - The enumerator to write.
    func write(_ v: En) {
        write(enum: v.rawValue, maxValue: 2)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `En` - The enumerator to write.
    func write(tag: Swift.Int32, value: En?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 2)
    }
}

public typealias AEnS = [En]

/// Helper class to read and write `AEnS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct AEnSHelper {
    /// Read a `AEnS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `AEnS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> AEnS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = AEnS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: En = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `AEnS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `AEnS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> AEnS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `AEnS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `AEnS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: AEnS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `AEnS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `AEnS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: AEnS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias LEnS = [En]

/// Helper class to read and write `LEnS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct LEnSHelper {
    /// Read a `LEnS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `LEnS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> LEnS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = LEnS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: En = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `LEnS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `LEnS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> LEnS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `LEnS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `LEnS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: LEnS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `LEnS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `LEnS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: LEnS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias KEnS = [En]

/// Helper class to read and write `KEnS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct KEnSHelper {
    /// Read a `KEnS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `KEnS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> KEnS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = KEnS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: En = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `KEnS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `KEnS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> KEnS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `KEnS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `KEnS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: KEnS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `KEnS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `KEnS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: KEnS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias QEnS = [En]

/// Helper class to read and write `QEnS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct QEnSHelper {
    /// Read a `QEnS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `QEnS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> QEnS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = QEnS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: En = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `QEnS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `QEnS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> QEnS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `QEnS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `QEnS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: QEnS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `QEnS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `QEnS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: QEnS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias SEnS = [En]

/// Helper class to read and write `SEnS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SEnSHelper {
    /// Read a `SEnS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `SEnS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SEnS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = SEnS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: En = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `SEnS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SEnS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SEnS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `SEnS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `SEnS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SEnS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `SEnS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SEnS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: SEnS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias CEnS = [En]

/// Helper class to read and write `CEnS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct CEnSHelper {
    /// Read a `CEnS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `CEnS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> CEnS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = CEnS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: En = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `CEnS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CEnS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> CEnS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `CEnS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `CEnS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: CEnS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `CEnS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `CEnS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: CEnS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias CustomIntS = [Swift.Int32]

public typealias CustomCVS = [CV?]

/// Helper class to read and write `CustomCVS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct CustomCVSHelper {
    /// Read a `CustomCVS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `CustomCVS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> CustomCVS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = CustomCVS(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read(CV.self) { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `CustomCVS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CustomCVS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> CustomCVS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `CustomCVS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `CustomCVS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: CustomCVS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `CustomCVS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `CustomCVS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: CustomCVS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias CustomIntSS = [CustomIntS]

/// Helper class to read and write `CustomIntSS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct CustomIntSSHelper {
    /// Read a `CustomIntSS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `CustomIntSS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> CustomIntSS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = CustomIntSS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: CustomIntS = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `CustomIntSS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CustomIntSS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> CustomIntSS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `CustomIntSS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `CustomIntSS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: CustomIntSS) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `CustomIntSS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `CustomIntSS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: CustomIntSS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias CustomCVSS = [CustomCVS]

/// Helper class to read and write `CustomCVSS` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct CustomCVSSHelper {
    /// Read a `CustomCVSS` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `CustomCVSS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> CustomCVSS {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = CustomCVSS()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: CustomCVS = try CustomCVSHelper.read(from: istr)
            v.append(j)
        }
        return v
    }
    /// Read an optional `CustomCVSS?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CustomCVSS` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> CustomCVSS? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `CustomCVSS` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `CustomCVSS` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: CustomCVSS) {
        ostr.write(size: v.count)
        for item in v {
            CustomCVSHelper.write(to: ostr, value: item)
        }
    }

    /// Wite an optional `CustomCVSS?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `CustomCVSS` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: CustomCVSS?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice interface`MyClass`.
public struct MyClassTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MyClass"]
    public static let staticId = "::Test::MyClass"
}

/// IPrx overview.
public protocol IPrx: Ice.ObjectPrx {}

private final class IPrxI: Ice.ObjectPrxI, IPrx {
    public override class func ice_staticId() -> Swift.String {
        return ITraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `IPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `IPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: IPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> IPrx? {
    return try IPrxI.checkedCast(prx: prx, facet: facet, context: context) as IPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `IPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `IPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: IPrx.Protocol, facet: Swift.String? = nil) -> IPrx {
    return IPrxI.uncheckedCast(prx: prx, facet: facet) as IPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `IPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: IPrx.Protocol) -> Swift.String {
    return ITraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `IPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `IPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `IPrx?` - The extracted proxy
    func read(_ type: IPrx.Protocol) throws -> IPrx? {
        return try read() as IPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `IPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `IPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: IPrx.Protocol) throws -> IPrx? {
        return try read(tag: tag) as IPrxI?
    }
}

/// IPrx overview.
public extension IPrx {}

/// MyClassPrx overview.
///
/// MyClassPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - opAByteS: 
///
///  - opAByteSAsync: 
///
///  - opLByteS: 
///
///  - opLByteSAsync: 
///
///  - opKByteS: 
///
///  - opKByteSAsync: 
///
///  - opQByteS: 
///
///  - opQByteSAsync: 
///
///  - opSByteS: 
///
///  - opSByteSAsync: 
///
///  - opABoolS: 
///
///  - opABoolSAsync: 
///
///  - opLBoolS: 
///
///  - opLBoolSAsync: 
///
///  - opKBoolS: 
///
///  - opKBoolSAsync: 
///
///  - opQBoolS: 
///
///  - opQBoolSAsync: 
///
///  - opSBoolS: 
///
///  - opSBoolSAsync: 
///
///  - opAShortS: 
///
///  - opAShortSAsync: 
///
///  - opLShortS: 
///
///  - opLShortSAsync: 
///
///  - opKShortS: 
///
///  - opKShortSAsync: 
///
///  - opQShortS: 
///
///  - opQShortSAsync: 
///
///  - opSShortS: 
///
///  - opSShortSAsync: 
///
///  - opAIntS: 
///
///  - opAIntSAsync: 
///
///  - opLIntS: 
///
///  - opLIntSAsync: 
///
///  - opKIntS: 
///
///  - opKIntSAsync: 
///
///  - opQIntS: 
///
///  - opQIntSAsync: 
///
///  - opSIntS: 
///
///  - opSIntSAsync: 
///
///  - opALongS: 
///
///  - opALongSAsync: 
///
///  - opLLongS: 
///
///  - opLLongSAsync: 
///
///  - opKLongS: 
///
///  - opKLongSAsync: 
///
///  - opQLongS: 
///
///  - opQLongSAsync: 
///
///  - opSLongS: 
///
///  - opSLongSAsync: 
///
///  - opAFloatS: 
///
///  - opAFloatSAsync: 
///
///  - opLFloatS: 
///
///  - opLFloatSAsync: 
///
///  - opKFloatS: 
///
///  - opKFloatSAsync: 
///
///  - opQFloatS: 
///
///  - opQFloatSAsync: 
///
///  - opSFloatS: 
///
///  - opSFloatSAsync: 
///
///  - opADoubleS: 
///
///  - opADoubleSAsync: 
///
///  - opLDoubleS: 
///
///  - opLDoubleSAsync: 
///
///  - opKDoubleS: 
///
///  - opKDoubleSAsync: 
///
///  - opQDoubleS: 
///
///  - opQDoubleSAsync: 
///
///  - opSDoubleS: 
///
///  - opSDoubleSAsync: 
///
///  - opAStringS: 
///
///  - opAStringSAsync: 
///
///  - opLStringS: 
///
///  - opLStringSAsync: 
///
///  - opKStringS: 
///
///  - opKStringSAsync: 
///
///  - opQStringS: 
///
///  - opQStringSAsync: 
///
///  - opSStringS: 
///
///  - opSStringSAsync: 
///
///  - opAObjectS: 
///
///  - opAObjectSAsync: 
///
///  - opLObjectS: 
///
///  - opLObjectSAsync: 
///
///  - opAObjectPrxS: 
///
///  - opAObjectPrxSAsync: 
///
///  - opLObjectPrxS: 
///
///  - opLObjectPrxSAsync: 
///
///  - opKObjectPrxS: 
///
///  - opKObjectPrxSAsync: 
///
///  - opQObjectPrxS: 
///
///  - opQObjectPrxSAsync: 
///
///  - opSObjectPrxS: 
///
///  - opSObjectPrxSAsync: 
///
///  - opAStructS: 
///
///  - opAStructSAsync: 
///
///  - opLStructS: 
///
///  - opLStructSAsync: 
///
///  - opKStructS: 
///
///  - opKStructSAsync: 
///
///  - opQStructS: 
///
///  - opQStructSAsync: 
///
///  - opSStructS: 
///
///  - opSStructSAsync: 
///
///  - opAStructSD: 
///
///  - opAStructSDAsync: 
///
///  - opLStructSD: 
///
///  - opLStructSDAsync: 
///
///  - opKStructSD: 
///
///  - opKStructSDAsync: 
///
///  - opQStructSD: 
///
///  - opQStructSDAsync: 
///
///  - opSStructSD: 
///
///  - opSStructSDAsync: 
///
///  - opACVS: 
///
///  - opACVSAsync: 
///
///  - opLCVS: 
///
///  - opLCVSAsync: 
///
///  - opACRS: 
///
///  - opACRSAsync: 
///
///  - opLCRS: 
///
///  - opLCRSAsync: 
///
///  - opAEnS: 
///
///  - opAEnSAsync: 
///
///  - opLEnS: 
///
///  - opLEnSAsync: 
///
///  - opKEnS: 
///
///  - opKEnSAsync: 
///
///  - opQEnS: 
///
///  - opQEnSAsync: 
///
///  - opSEnS: 
///
///  - opSEnSAsync: 
///
///  - opAIPrxS: 
///
///  - opAIPrxSAsync: 
///
///  - opLIPrxS: 
///
///  - opLIPrxSAsync: 
///
///  - opKIPrxS: 
///
///  - opKIPrxSAsync: 
///
///  - opQIPrxS: 
///
///  - opQIPrxSAsync: 
///
///  - opSIPrxS: 
///
///  - opSIPrxSAsync: 
///
///  - opCustomIntS: 
///
///  - opCustomIntSAsync: 
///
///  - opCustomCVS: 
///
///  - opCustomCVSAsync: 
///
///  - opCustomIntSS: 
///
///  - opCustomIntSSAsync: 
///
///  - opCustomCVSS: 
///
///  - opCustomCVSSAsync: 
public protocol MyClassPrx: Ice.ObjectPrx {}

private final class MyClassPrxI: Ice.ObjectPrxI, MyClassPrx {
    public override class func ice_staticId() -> Swift.String {
        return MyClassTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MyClassPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MyClassPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MyClassPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MyClassPrx? {
    return try MyClassPrxI.checkedCast(prx: prx, facet: facet, context: context) as MyClassPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MyClassPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MyClassPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MyClassPrx.Protocol, facet: Swift.String? = nil) -> MyClassPrx {
    return MyClassPrxI.uncheckedCast(prx: prx, facet: facet) as MyClassPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MyClassPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MyClassPrx.Protocol) -> Swift.String {
    return MyClassTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MyClassPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MyClassPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MyClassPrx?` - The extracted proxy
    func read(_ type: MyClassPrx.Protocol) throws -> MyClassPrx? {
        return try read() as MyClassPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MyClassPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MyClassPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MyClassPrx.Protocol) throws -> MyClassPrx? {
        return try read(tag: tag) as MyClassPrxI?
    }
}

/// MyClassPrx overview.
///
/// MyClassPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - opAByteS: 
///
///  - opAByteSAsync: 
///
///  - opLByteS: 
///
///  - opLByteSAsync: 
///
///  - opKByteS: 
///
///  - opKByteSAsync: 
///
///  - opQByteS: 
///
///  - opQByteSAsync: 
///
///  - opSByteS: 
///
///  - opSByteSAsync: 
///
///  - opABoolS: 
///
///  - opABoolSAsync: 
///
///  - opLBoolS: 
///
///  - opLBoolSAsync: 
///
///  - opKBoolS: 
///
///  - opKBoolSAsync: 
///
///  - opQBoolS: 
///
///  - opQBoolSAsync: 
///
///  - opSBoolS: 
///
///  - opSBoolSAsync: 
///
///  - opAShortS: 
///
///  - opAShortSAsync: 
///
///  - opLShortS: 
///
///  - opLShortSAsync: 
///
///  - opKShortS: 
///
///  - opKShortSAsync: 
///
///  - opQShortS: 
///
///  - opQShortSAsync: 
///
///  - opSShortS: 
///
///  - opSShortSAsync: 
///
///  - opAIntS: 
///
///  - opAIntSAsync: 
///
///  - opLIntS: 
///
///  - opLIntSAsync: 
///
///  - opKIntS: 
///
///  - opKIntSAsync: 
///
///  - opQIntS: 
///
///  - opQIntSAsync: 
///
///  - opSIntS: 
///
///  - opSIntSAsync: 
///
///  - opALongS: 
///
///  - opALongSAsync: 
///
///  - opLLongS: 
///
///  - opLLongSAsync: 
///
///  - opKLongS: 
///
///  - opKLongSAsync: 
///
///  - opQLongS: 
///
///  - opQLongSAsync: 
///
///  - opSLongS: 
///
///  - opSLongSAsync: 
///
///  - opAFloatS: 
///
///  - opAFloatSAsync: 
///
///  - opLFloatS: 
///
///  - opLFloatSAsync: 
///
///  - opKFloatS: 
///
///  - opKFloatSAsync: 
///
///  - opQFloatS: 
///
///  - opQFloatSAsync: 
///
///  - opSFloatS: 
///
///  - opSFloatSAsync: 
///
///  - opADoubleS: 
///
///  - opADoubleSAsync: 
///
///  - opLDoubleS: 
///
///  - opLDoubleSAsync: 
///
///  - opKDoubleS: 
///
///  - opKDoubleSAsync: 
///
///  - opQDoubleS: 
///
///  - opQDoubleSAsync: 
///
///  - opSDoubleS: 
///
///  - opSDoubleSAsync: 
///
///  - opAStringS: 
///
///  - opAStringSAsync: 
///
///  - opLStringS: 
///
///  - opLStringSAsync: 
///
///  - opKStringS: 
///
///  - opKStringSAsync: 
///
///  - opQStringS: 
///
///  - opQStringSAsync: 
///
///  - opSStringS: 
///
///  - opSStringSAsync: 
///
///  - opAObjectS: 
///
///  - opAObjectSAsync: 
///
///  - opLObjectS: 
///
///  - opLObjectSAsync: 
///
///  - opAObjectPrxS: 
///
///  - opAObjectPrxSAsync: 
///
///  - opLObjectPrxS: 
///
///  - opLObjectPrxSAsync: 
///
///  - opKObjectPrxS: 
///
///  - opKObjectPrxSAsync: 
///
///  - opQObjectPrxS: 
///
///  - opQObjectPrxSAsync: 
///
///  - opSObjectPrxS: 
///
///  - opSObjectPrxSAsync: 
///
///  - opAStructS: 
///
///  - opAStructSAsync: 
///
///  - opLStructS: 
///
///  - opLStructSAsync: 
///
///  - opKStructS: 
///
///  - opKStructSAsync: 
///
///  - opQStructS: 
///
///  - opQStructSAsync: 
///
///  - opSStructS: 
///
///  - opSStructSAsync: 
///
///  - opAStructSD: 
///
///  - opAStructSDAsync: 
///
///  - opLStructSD: 
///
///  - opLStructSDAsync: 
///
///  - opKStructSD: 
///
///  - opKStructSDAsync: 
///
///  - opQStructSD: 
///
///  - opQStructSDAsync: 
///
///  - opSStructSD: 
///
///  - opSStructSDAsync: 
///
///  - opACVS: 
///
///  - opACVSAsync: 
///
///  - opLCVS: 
///
///  - opLCVSAsync: 
///
///  - opACRS: 
///
///  - opACRSAsync: 
///
///  - opLCRS: 
///
///  - opLCRSAsync: 
///
///  - opAEnS: 
///
///  - opAEnSAsync: 
///
///  - opLEnS: 
///
///  - opLEnSAsync: 
///
///  - opKEnS: 
///
///  - opKEnSAsync: 
///
///  - opQEnS: 
///
///  - opQEnSAsync: 
///
///  - opSEnS: 
///
///  - opSEnSAsync: 
///
///  - opAIPrxS: 
///
///  - opAIPrxSAsync: 
///
///  - opLIPrxS: 
///
///  - opLIPrxSAsync: 
///
///  - opKIPrxS: 
///
///  - opKIPrxSAsync: 
///
///  - opQIPrxS: 
///
///  - opQIPrxSAsync: 
///
///  - opSIPrxS: 
///
///  - opSIPrxSAsync: 
///
///  - opCustomIntS: 
///
///  - opCustomIntSAsync: 
///
///  - opCustomCVS: 
///
///  - opCustomCVSAsync: 
///
///  - opCustomIntSS: 
///
///  - opCustomIntSSAsync: 
///
///  - opCustomCVSS: 
///
///  - opCustomCVSSAsync: 
public extension MyClassPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `AByteS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AByteS, o: AByteS)`:
    ///
    ///   - returnValue: `AByteS`
    ///
    ///   - o: `AByteS`
    func opAByteS(_ iceP_i: AByteS, context: Ice.Context? = nil) throws -> (returnValue: AByteS, o: AByteS) {
        return try _impl._invoke(operation: "opAByteS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: AByteS = try istr.read()
                                     let iceP_returnValue: AByteS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AByteS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: AByteS, o: AByteS)>` - The result of the operation
    func opAByteSAsync(_ iceP_i: AByteS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: AByteS, o: AByteS)> {
        return _impl._invokeAsync(operation: "opAByteS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: AByteS = try istr.read()
                                      let iceP_returnValue: AByteS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LByteS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LByteS, o: LByteS)`:
    ///
    ///   - returnValue: `LByteS`
    ///
    ///   - o: `LByteS`
    func opLByteS(_ iceP_i: LByteS, context: Ice.Context? = nil) throws -> (returnValue: LByteS, o: LByteS) {
        return try _impl._invoke(operation: "opLByteS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: LByteS = try istr.read()
                                     let iceP_returnValue: LByteS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LByteS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LByteS, o: LByteS)>` - The result of the operation
    func opLByteSAsync(_ iceP_i: LByteS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LByteS, o: LByteS)> {
        return _impl._invokeAsync(operation: "opLByteS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: LByteS = try istr.read()
                                      let iceP_returnValue: LByteS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `KByteS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: KByteS, o: KByteS)`:
    ///
    ///   - returnValue: `KByteS`
    ///
    ///   - o: `KByteS`
    func opKByteS(_ iceP_i: KByteS, context: Ice.Context? = nil) throws -> (returnValue: KByteS, o: KByteS) {
        return try _impl._invoke(operation: "opKByteS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: KByteS = try istr.read()
                                     let iceP_returnValue: KByteS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `KByteS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: KByteS, o: KByteS)>` - The result of the operation
    func opKByteSAsync(_ iceP_i: KByteS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: KByteS, o: KByteS)> {
        return _impl._invokeAsync(operation: "opKByteS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: KByteS = try istr.read()
                                      let iceP_returnValue: KByteS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `QByteS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: QByteS, o: QByteS)`:
    ///
    ///   - returnValue: `QByteS`
    ///
    ///   - o: `QByteS`
    func opQByteS(_ iceP_i: QByteS, context: Ice.Context? = nil) throws -> (returnValue: QByteS, o: QByteS) {
        return try _impl._invoke(operation: "opQByteS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: QByteS = try istr.read()
                                     let iceP_returnValue: QByteS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `QByteS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: QByteS, o: QByteS)>` - The result of the operation
    func opQByteSAsync(_ iceP_i: QByteS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: QByteS, o: QByteS)> {
        return _impl._invokeAsync(operation: "opQByteS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: QByteS = try istr.read()
                                      let iceP_returnValue: QByteS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SByteS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SByteS, o: SByteS)`:
    ///
    ///   - returnValue: `SByteS`
    ///
    ///   - o: `SByteS`
    func opSByteS(_ iceP_i: SByteS, context: Ice.Context? = nil) throws -> (returnValue: SByteS, o: SByteS) {
        return try _impl._invoke(operation: "opSByteS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: SByteS = try istr.read()
                                     let iceP_returnValue: SByteS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SByteS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SByteS, o: SByteS)>` - The result of the operation
    func opSByteSAsync(_ iceP_i: SByteS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SByteS, o: SByteS)> {
        return _impl._invokeAsync(operation: "opSByteS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: SByteS = try istr.read()
                                      let iceP_returnValue: SByteS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ABoolS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ABoolS, o: ABoolS)`:
    ///
    ///   - returnValue: `ABoolS`
    ///
    ///   - o: `ABoolS`
    func opABoolS(_ iceP_i: ABoolS, context: Ice.Context? = nil) throws -> (returnValue: ABoolS, o: ABoolS) {
        return try _impl._invoke(operation: "opABoolS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: ABoolS = try istr.read()
                                     let iceP_returnValue: ABoolS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ABoolS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ABoolS, o: ABoolS)>` - The result of the operation
    func opABoolSAsync(_ iceP_i: ABoolS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ABoolS, o: ABoolS)> {
        return _impl._invokeAsync(operation: "opABoolS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: ABoolS = try istr.read()
                                      let iceP_returnValue: ABoolS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LBoolS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LBoolS, o: LBoolS)`:
    ///
    ///   - returnValue: `LBoolS`
    ///
    ///   - o: `LBoolS`
    func opLBoolS(_ iceP_i: LBoolS, context: Ice.Context? = nil) throws -> (returnValue: LBoolS, o: LBoolS) {
        return try _impl._invoke(operation: "opLBoolS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: LBoolS = try istr.read()
                                     let iceP_returnValue: LBoolS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LBoolS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LBoolS, o: LBoolS)>` - The result of the operation
    func opLBoolSAsync(_ iceP_i: LBoolS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LBoolS, o: LBoolS)> {
        return _impl._invokeAsync(operation: "opLBoolS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: LBoolS = try istr.read()
                                      let iceP_returnValue: LBoolS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `KBoolS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: KBoolS, o: KBoolS)`:
    ///
    ///   - returnValue: `KBoolS`
    ///
    ///   - o: `KBoolS`
    func opKBoolS(_ iceP_i: KBoolS, context: Ice.Context? = nil) throws -> (returnValue: KBoolS, o: KBoolS) {
        return try _impl._invoke(operation: "opKBoolS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: KBoolS = try istr.read()
                                     let iceP_returnValue: KBoolS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `KBoolS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: KBoolS, o: KBoolS)>` - The result of the operation
    func opKBoolSAsync(_ iceP_i: KBoolS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: KBoolS, o: KBoolS)> {
        return _impl._invokeAsync(operation: "opKBoolS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: KBoolS = try istr.read()
                                      let iceP_returnValue: KBoolS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `QBoolS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: QBoolS, o: QBoolS)`:
    ///
    ///   - returnValue: `QBoolS`
    ///
    ///   - o: `QBoolS`
    func opQBoolS(_ iceP_i: QBoolS, context: Ice.Context? = nil) throws -> (returnValue: QBoolS, o: QBoolS) {
        return try _impl._invoke(operation: "opQBoolS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: QBoolS = try istr.read()
                                     let iceP_returnValue: QBoolS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `QBoolS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: QBoolS, o: QBoolS)>` - The result of the operation
    func opQBoolSAsync(_ iceP_i: QBoolS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: QBoolS, o: QBoolS)> {
        return _impl._invokeAsync(operation: "opQBoolS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: QBoolS = try istr.read()
                                      let iceP_returnValue: QBoolS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SBoolS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SBoolS, o: SBoolS)`:
    ///
    ///   - returnValue: `SBoolS`
    ///
    ///   - o: `SBoolS`
    func opSBoolS(_ iceP_i: SBoolS, context: Ice.Context? = nil) throws -> (returnValue: SBoolS, o: SBoolS) {
        return try _impl._invoke(operation: "opSBoolS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: SBoolS = try istr.read()
                                     let iceP_returnValue: SBoolS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SBoolS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SBoolS, o: SBoolS)>` - The result of the operation
    func opSBoolSAsync(_ iceP_i: SBoolS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SBoolS, o: SBoolS)> {
        return _impl._invokeAsync(operation: "opSBoolS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: SBoolS = try istr.read()
                                      let iceP_returnValue: SBoolS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `AShortS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AShortS, o: AShortS)`:
    ///
    ///   - returnValue: `AShortS`
    ///
    ///   - o: `AShortS`
    func opAShortS(_ iceP_i: AShortS, context: Ice.Context? = nil) throws -> (returnValue: AShortS, o: AShortS) {
        return try _impl._invoke(operation: "opAShortS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: AShortS = try istr.read()
                                     let iceP_returnValue: AShortS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AShortS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: AShortS, o: AShortS)>` - The result of the operation
    func opAShortSAsync(_ iceP_i: AShortS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: AShortS, o: AShortS)> {
        return _impl._invokeAsync(operation: "opAShortS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: AShortS = try istr.read()
                                      let iceP_returnValue: AShortS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LShortS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LShortS, o: LShortS)`:
    ///
    ///   - returnValue: `LShortS`
    ///
    ///   - o: `LShortS`
    func opLShortS(_ iceP_i: LShortS, context: Ice.Context? = nil) throws -> (returnValue: LShortS, o: LShortS) {
        return try _impl._invoke(operation: "opLShortS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: LShortS = try istr.read()
                                     let iceP_returnValue: LShortS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LShortS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LShortS, o: LShortS)>` - The result of the operation
    func opLShortSAsync(_ iceP_i: LShortS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LShortS, o: LShortS)> {
        return _impl._invokeAsync(operation: "opLShortS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: LShortS = try istr.read()
                                      let iceP_returnValue: LShortS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `KShortS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: KShortS, o: KShortS)`:
    ///
    ///   - returnValue: `KShortS`
    ///
    ///   - o: `KShortS`
    func opKShortS(_ iceP_i: KShortS, context: Ice.Context? = nil) throws -> (returnValue: KShortS, o: KShortS) {
        return try _impl._invoke(operation: "opKShortS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: KShortS = try istr.read()
                                     let iceP_returnValue: KShortS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `KShortS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: KShortS, o: KShortS)>` - The result of the operation
    func opKShortSAsync(_ iceP_i: KShortS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: KShortS, o: KShortS)> {
        return _impl._invokeAsync(operation: "opKShortS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: KShortS = try istr.read()
                                      let iceP_returnValue: KShortS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `QShortS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: QShortS, o: QShortS)`:
    ///
    ///   - returnValue: `QShortS`
    ///
    ///   - o: `QShortS`
    func opQShortS(_ iceP_i: QShortS, context: Ice.Context? = nil) throws -> (returnValue: QShortS, o: QShortS) {
        return try _impl._invoke(operation: "opQShortS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: QShortS = try istr.read()
                                     let iceP_returnValue: QShortS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `QShortS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: QShortS, o: QShortS)>` - The result of the operation
    func opQShortSAsync(_ iceP_i: QShortS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: QShortS, o: QShortS)> {
        return _impl._invokeAsync(operation: "opQShortS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: QShortS = try istr.read()
                                      let iceP_returnValue: QShortS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SShortS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SShortS, o: SShortS)`:
    ///
    ///   - returnValue: `SShortS`
    ///
    ///   - o: `SShortS`
    func opSShortS(_ iceP_i: SShortS, context: Ice.Context? = nil) throws -> (returnValue: SShortS, o: SShortS) {
        return try _impl._invoke(operation: "opSShortS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: SShortS = try istr.read()
                                     let iceP_returnValue: SShortS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SShortS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SShortS, o: SShortS)>` - The result of the operation
    func opSShortSAsync(_ iceP_i: SShortS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SShortS, o: SShortS)> {
        return _impl._invokeAsync(operation: "opSShortS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: SShortS = try istr.read()
                                      let iceP_returnValue: SShortS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `AIntS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AIntS, o: AIntS)`:
    ///
    ///   - returnValue: `AIntS`
    ///
    ///   - o: `AIntS`
    func opAIntS(_ iceP_i: AIntS, context: Ice.Context? = nil) throws -> (returnValue: AIntS, o: AIntS) {
        return try _impl._invoke(operation: "opAIntS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: AIntS = try istr.read()
                                     let iceP_returnValue: AIntS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AIntS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: AIntS, o: AIntS)>` - The result of the operation
    func opAIntSAsync(_ iceP_i: AIntS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: AIntS, o: AIntS)> {
        return _impl._invokeAsync(operation: "opAIntS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: AIntS = try istr.read()
                                      let iceP_returnValue: AIntS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LIntS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LIntS, o: LIntS)`:
    ///
    ///   - returnValue: `LIntS`
    ///
    ///   - o: `LIntS`
    func opLIntS(_ iceP_i: LIntS, context: Ice.Context? = nil) throws -> (returnValue: LIntS, o: LIntS) {
        return try _impl._invoke(operation: "opLIntS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: LIntS = try istr.read()
                                     let iceP_returnValue: LIntS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LIntS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LIntS, o: LIntS)>` - The result of the operation
    func opLIntSAsync(_ iceP_i: LIntS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LIntS, o: LIntS)> {
        return _impl._invokeAsync(operation: "opLIntS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: LIntS = try istr.read()
                                      let iceP_returnValue: LIntS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `KIntS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: KIntS, o: KIntS)`:
    ///
    ///   - returnValue: `KIntS`
    ///
    ///   - o: `KIntS`
    func opKIntS(_ iceP_i: KIntS, context: Ice.Context? = nil) throws -> (returnValue: KIntS, o: KIntS) {
        return try _impl._invoke(operation: "opKIntS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: KIntS = try istr.read()
                                     let iceP_returnValue: KIntS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `KIntS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: KIntS, o: KIntS)>` - The result of the operation
    func opKIntSAsync(_ iceP_i: KIntS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: KIntS, o: KIntS)> {
        return _impl._invokeAsync(operation: "opKIntS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: KIntS = try istr.read()
                                      let iceP_returnValue: KIntS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `QIntS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: QIntS, o: QIntS)`:
    ///
    ///   - returnValue: `QIntS`
    ///
    ///   - o: `QIntS`
    func opQIntS(_ iceP_i: QIntS, context: Ice.Context? = nil) throws -> (returnValue: QIntS, o: QIntS) {
        return try _impl._invoke(operation: "opQIntS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: QIntS = try istr.read()
                                     let iceP_returnValue: QIntS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `QIntS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: QIntS, o: QIntS)>` - The result of the operation
    func opQIntSAsync(_ iceP_i: QIntS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: QIntS, o: QIntS)> {
        return _impl._invokeAsync(operation: "opQIntS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: QIntS = try istr.read()
                                      let iceP_returnValue: QIntS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SIntS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SIntS, o: SIntS)`:
    ///
    ///   - returnValue: `SIntS`
    ///
    ///   - o: `SIntS`
    func opSIntS(_ iceP_i: SIntS, context: Ice.Context? = nil) throws -> (returnValue: SIntS, o: SIntS) {
        return try _impl._invoke(operation: "opSIntS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: SIntS = try istr.read()
                                     let iceP_returnValue: SIntS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SIntS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SIntS, o: SIntS)>` - The result of the operation
    func opSIntSAsync(_ iceP_i: SIntS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SIntS, o: SIntS)> {
        return _impl._invokeAsync(operation: "opSIntS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: SIntS = try istr.read()
                                      let iceP_returnValue: SIntS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ALongS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ALongS, o: ALongS)`:
    ///
    ///   - returnValue: `ALongS`
    ///
    ///   - o: `ALongS`
    func opALongS(_ iceP_i: ALongS, context: Ice.Context? = nil) throws -> (returnValue: ALongS, o: ALongS) {
        return try _impl._invoke(operation: "opALongS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: ALongS = try istr.read()
                                     let iceP_returnValue: ALongS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ALongS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ALongS, o: ALongS)>` - The result of the operation
    func opALongSAsync(_ iceP_i: ALongS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ALongS, o: ALongS)> {
        return _impl._invokeAsync(operation: "opALongS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: ALongS = try istr.read()
                                      let iceP_returnValue: ALongS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LLongS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LLongS, o: LLongS)`:
    ///
    ///   - returnValue: `LLongS`
    ///
    ///   - o: `LLongS`
    func opLLongS(_ iceP_i: LLongS, context: Ice.Context? = nil) throws -> (returnValue: LLongS, o: LLongS) {
        return try _impl._invoke(operation: "opLLongS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: LLongS = try istr.read()
                                     let iceP_returnValue: LLongS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LLongS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LLongS, o: LLongS)>` - The result of the operation
    func opLLongSAsync(_ iceP_i: LLongS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LLongS, o: LLongS)> {
        return _impl._invokeAsync(operation: "opLLongS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: LLongS = try istr.read()
                                      let iceP_returnValue: LLongS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `KLongS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: KLongS, o: KLongS)`:
    ///
    ///   - returnValue: `KLongS`
    ///
    ///   - o: `KLongS`
    func opKLongS(_ iceP_i: KLongS, context: Ice.Context? = nil) throws -> (returnValue: KLongS, o: KLongS) {
        return try _impl._invoke(operation: "opKLongS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: KLongS = try istr.read()
                                     let iceP_returnValue: KLongS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `KLongS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: KLongS, o: KLongS)>` - The result of the operation
    func opKLongSAsync(_ iceP_i: KLongS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: KLongS, o: KLongS)> {
        return _impl._invokeAsync(operation: "opKLongS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: KLongS = try istr.read()
                                      let iceP_returnValue: KLongS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `QLongS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: QLongS, o: QLongS)`:
    ///
    ///   - returnValue: `QLongS`
    ///
    ///   - o: `QLongS`
    func opQLongS(_ iceP_i: QLongS, context: Ice.Context? = nil) throws -> (returnValue: QLongS, o: QLongS) {
        return try _impl._invoke(operation: "opQLongS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: QLongS = try istr.read()
                                     let iceP_returnValue: QLongS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `QLongS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: QLongS, o: QLongS)>` - The result of the operation
    func opQLongSAsync(_ iceP_i: QLongS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: QLongS, o: QLongS)> {
        return _impl._invokeAsync(operation: "opQLongS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: QLongS = try istr.read()
                                      let iceP_returnValue: QLongS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SLongS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SLongS, o: SLongS)`:
    ///
    ///   - returnValue: `SLongS`
    ///
    ///   - o: `SLongS`
    func opSLongS(_ iceP_i: SLongS, context: Ice.Context? = nil) throws -> (returnValue: SLongS, o: SLongS) {
        return try _impl._invoke(operation: "opSLongS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: SLongS = try istr.read()
                                     let iceP_returnValue: SLongS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SLongS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SLongS, o: SLongS)>` - The result of the operation
    func opSLongSAsync(_ iceP_i: SLongS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SLongS, o: SLongS)> {
        return _impl._invokeAsync(operation: "opSLongS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: SLongS = try istr.read()
                                      let iceP_returnValue: SLongS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `AFloatS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AFloatS, o: AFloatS)`:
    ///
    ///   - returnValue: `AFloatS`
    ///
    ///   - o: `AFloatS`
    func opAFloatS(_ iceP_i: AFloatS, context: Ice.Context? = nil) throws -> (returnValue: AFloatS, o: AFloatS) {
        return try _impl._invoke(operation: "opAFloatS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: AFloatS = try istr.read()
                                     let iceP_returnValue: AFloatS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AFloatS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: AFloatS, o: AFloatS)>` - The result of the operation
    func opAFloatSAsync(_ iceP_i: AFloatS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: AFloatS, o: AFloatS)> {
        return _impl._invokeAsync(operation: "opAFloatS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: AFloatS = try istr.read()
                                      let iceP_returnValue: AFloatS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LFloatS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LFloatS, o: LFloatS)`:
    ///
    ///   - returnValue: `LFloatS`
    ///
    ///   - o: `LFloatS`
    func opLFloatS(_ iceP_i: LFloatS, context: Ice.Context? = nil) throws -> (returnValue: LFloatS, o: LFloatS) {
        return try _impl._invoke(operation: "opLFloatS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: LFloatS = try istr.read()
                                     let iceP_returnValue: LFloatS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LFloatS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LFloatS, o: LFloatS)>` - The result of the operation
    func opLFloatSAsync(_ iceP_i: LFloatS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LFloatS, o: LFloatS)> {
        return _impl._invokeAsync(operation: "opLFloatS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: LFloatS = try istr.read()
                                      let iceP_returnValue: LFloatS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `KFloatS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: KFloatS, o: KFloatS)`:
    ///
    ///   - returnValue: `KFloatS`
    ///
    ///   - o: `KFloatS`
    func opKFloatS(_ iceP_i: KFloatS, context: Ice.Context? = nil) throws -> (returnValue: KFloatS, o: KFloatS) {
        return try _impl._invoke(operation: "opKFloatS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: KFloatS = try istr.read()
                                     let iceP_returnValue: KFloatS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `KFloatS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: KFloatS, o: KFloatS)>` - The result of the operation
    func opKFloatSAsync(_ iceP_i: KFloatS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: KFloatS, o: KFloatS)> {
        return _impl._invokeAsync(operation: "opKFloatS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: KFloatS = try istr.read()
                                      let iceP_returnValue: KFloatS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `QFloatS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: QFloatS, o: QFloatS)`:
    ///
    ///   - returnValue: `QFloatS`
    ///
    ///   - o: `QFloatS`
    func opQFloatS(_ iceP_i: QFloatS, context: Ice.Context? = nil) throws -> (returnValue: QFloatS, o: QFloatS) {
        return try _impl._invoke(operation: "opQFloatS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: QFloatS = try istr.read()
                                     let iceP_returnValue: QFloatS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `QFloatS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: QFloatS, o: QFloatS)>` - The result of the operation
    func opQFloatSAsync(_ iceP_i: QFloatS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: QFloatS, o: QFloatS)> {
        return _impl._invokeAsync(operation: "opQFloatS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: QFloatS = try istr.read()
                                      let iceP_returnValue: QFloatS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SFloatS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SFloatS, o: SFloatS)`:
    ///
    ///   - returnValue: `SFloatS`
    ///
    ///   - o: `SFloatS`
    func opSFloatS(_ iceP_i: SFloatS, context: Ice.Context? = nil) throws -> (returnValue: SFloatS, o: SFloatS) {
        return try _impl._invoke(operation: "opSFloatS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: SFloatS = try istr.read()
                                     let iceP_returnValue: SFloatS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SFloatS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SFloatS, o: SFloatS)>` - The result of the operation
    func opSFloatSAsync(_ iceP_i: SFloatS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SFloatS, o: SFloatS)> {
        return _impl._invokeAsync(operation: "opSFloatS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: SFloatS = try istr.read()
                                      let iceP_returnValue: SFloatS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ADoubleS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ADoubleS, o: ADoubleS)`:
    ///
    ///   - returnValue: `ADoubleS`
    ///
    ///   - o: `ADoubleS`
    func opADoubleS(_ iceP_i: ADoubleS, context: Ice.Context? = nil) throws -> (returnValue: ADoubleS, o: ADoubleS) {
        return try _impl._invoke(operation: "opADoubleS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: ADoubleS = try istr.read()
                                     let iceP_returnValue: ADoubleS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ADoubleS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ADoubleS, o: ADoubleS)>` - The result of the operation
    func opADoubleSAsync(_ iceP_i: ADoubleS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ADoubleS, o: ADoubleS)> {
        return _impl._invokeAsync(operation: "opADoubleS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: ADoubleS = try istr.read()
                                      let iceP_returnValue: ADoubleS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LDoubleS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LDoubleS, o: LDoubleS)`:
    ///
    ///   - returnValue: `LDoubleS`
    ///
    ///   - o: `LDoubleS`
    func opLDoubleS(_ iceP_i: LDoubleS, context: Ice.Context? = nil) throws -> (returnValue: LDoubleS, o: LDoubleS) {
        return try _impl._invoke(operation: "opLDoubleS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: LDoubleS = try istr.read()
                                     let iceP_returnValue: LDoubleS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LDoubleS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LDoubleS, o: LDoubleS)>` - The result of the operation
    func opLDoubleSAsync(_ iceP_i: LDoubleS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LDoubleS, o: LDoubleS)> {
        return _impl._invokeAsync(operation: "opLDoubleS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: LDoubleS = try istr.read()
                                      let iceP_returnValue: LDoubleS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `KDoubleS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: KDoubleS, o: KDoubleS)`:
    ///
    ///   - returnValue: `KDoubleS`
    ///
    ///   - o: `KDoubleS`
    func opKDoubleS(_ iceP_i: KDoubleS, context: Ice.Context? = nil) throws -> (returnValue: KDoubleS, o: KDoubleS) {
        return try _impl._invoke(operation: "opKDoubleS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: KDoubleS = try istr.read()
                                     let iceP_returnValue: KDoubleS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `KDoubleS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: KDoubleS, o: KDoubleS)>` - The result of the operation
    func opKDoubleSAsync(_ iceP_i: KDoubleS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: KDoubleS, o: KDoubleS)> {
        return _impl._invokeAsync(operation: "opKDoubleS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: KDoubleS = try istr.read()
                                      let iceP_returnValue: KDoubleS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `QDoubleS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: QDoubleS, o: QDoubleS)`:
    ///
    ///   - returnValue: `QDoubleS`
    ///
    ///   - o: `QDoubleS`
    func opQDoubleS(_ iceP_i: QDoubleS, context: Ice.Context? = nil) throws -> (returnValue: QDoubleS, o: QDoubleS) {
        return try _impl._invoke(operation: "opQDoubleS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: QDoubleS = try istr.read()
                                     let iceP_returnValue: QDoubleS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `QDoubleS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: QDoubleS, o: QDoubleS)>` - The result of the operation
    func opQDoubleSAsync(_ iceP_i: QDoubleS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: QDoubleS, o: QDoubleS)> {
        return _impl._invokeAsync(operation: "opQDoubleS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: QDoubleS = try istr.read()
                                      let iceP_returnValue: QDoubleS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SDoubleS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SDoubleS, o: SDoubleS)`:
    ///
    ///   - returnValue: `SDoubleS`
    ///
    ///   - o: `SDoubleS`
    func opSDoubleS(_ iceP_i: SDoubleS, context: Ice.Context? = nil) throws -> (returnValue: SDoubleS, o: SDoubleS) {
        return try _impl._invoke(operation: "opSDoubleS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: SDoubleS = try istr.read()
                                     let iceP_returnValue: SDoubleS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SDoubleS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SDoubleS, o: SDoubleS)>` - The result of the operation
    func opSDoubleSAsync(_ iceP_i: SDoubleS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SDoubleS, o: SDoubleS)> {
        return _impl._invokeAsync(operation: "opSDoubleS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: SDoubleS = try istr.read()
                                      let iceP_returnValue: SDoubleS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `AStringS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AStringS, o: AStringS)`:
    ///
    ///   - returnValue: `AStringS`
    ///
    ///   - o: `AStringS`
    func opAStringS(_ iceP_i: AStringS, context: Ice.Context? = nil) throws -> (returnValue: AStringS, o: AStringS) {
        return try _impl._invoke(operation: "opAStringS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: AStringS = try istr.read()
                                     let iceP_returnValue: AStringS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AStringS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: AStringS, o: AStringS)>` - The result of the operation
    func opAStringSAsync(_ iceP_i: AStringS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: AStringS, o: AStringS)> {
        return _impl._invokeAsync(operation: "opAStringS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: AStringS = try istr.read()
                                      let iceP_returnValue: AStringS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LStringS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LStringS, o: LStringS)`:
    ///
    ///   - returnValue: `LStringS`
    ///
    ///   - o: `LStringS`
    func opLStringS(_ iceP_i: LStringS, context: Ice.Context? = nil) throws -> (returnValue: LStringS, o: LStringS) {
        return try _impl._invoke(operation: "opLStringS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: LStringS = try istr.read()
                                     let iceP_returnValue: LStringS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LStringS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LStringS, o: LStringS)>` - The result of the operation
    func opLStringSAsync(_ iceP_i: LStringS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LStringS, o: LStringS)> {
        return _impl._invokeAsync(operation: "opLStringS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: LStringS = try istr.read()
                                      let iceP_returnValue: LStringS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `KStringS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: KStringS, o: KStringS)`:
    ///
    ///   - returnValue: `KStringS`
    ///
    ///   - o: `KStringS`
    func opKStringS(_ iceP_i: KStringS, context: Ice.Context? = nil) throws -> (returnValue: KStringS, o: KStringS) {
        return try _impl._invoke(operation: "opKStringS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: KStringS = try istr.read()
                                     let iceP_returnValue: KStringS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `KStringS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: KStringS, o: KStringS)>` - The result of the operation
    func opKStringSAsync(_ iceP_i: KStringS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: KStringS, o: KStringS)> {
        return _impl._invokeAsync(operation: "opKStringS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: KStringS = try istr.read()
                                      let iceP_returnValue: KStringS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `QStringS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: QStringS, o: QStringS)`:
    ///
    ///   - returnValue: `QStringS`
    ///
    ///   - o: `QStringS`
    func opQStringS(_ iceP_i: QStringS, context: Ice.Context? = nil) throws -> (returnValue: QStringS, o: QStringS) {
        return try _impl._invoke(operation: "opQStringS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: QStringS = try istr.read()
                                     let iceP_returnValue: QStringS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `QStringS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: QStringS, o: QStringS)>` - The result of the operation
    func opQStringSAsync(_ iceP_i: QStringS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: QStringS, o: QStringS)> {
        return _impl._invokeAsync(operation: "opQStringS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: QStringS = try istr.read()
                                      let iceP_returnValue: QStringS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SStringS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SStringS, o: SStringS)`:
    ///
    ///   - returnValue: `SStringS`
    ///
    ///   - o: `SStringS`
    func opSStringS(_ iceP_i: SStringS, context: Ice.Context? = nil) throws -> (returnValue: SStringS, o: SStringS) {
        return try _impl._invoke(operation: "opSStringS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: SStringS = try istr.read()
                                     let iceP_returnValue: SStringS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SStringS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SStringS, o: SStringS)>` - The result of the operation
    func opSStringSAsync(_ iceP_i: SStringS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SStringS, o: SStringS)> {
        return _impl._invokeAsync(operation: "opSStringS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: SStringS = try istr.read()
                                      let iceP_returnValue: SStringS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `AObjectS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AObjectS, o: AObjectS)`:
    ///
    ///   - returnValue: `AObjectS`
    ///
    ///   - o: `AObjectS`
    func opAObjectS(_ iceP_i: AObjectS, context: Ice.Context? = nil) throws -> (returnValue: AObjectS, o: AObjectS) {
        return try _impl._invoke(operation: "opAObjectS",
                                 mode: .Normal,
                                 write: { ostr in
                                     AObjectSHelper.write(to: ostr, value: iceP_i)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     let iceP_o: AObjectS = try AObjectSHelper.read(from: istr)
                                     let iceP_returnValue: AObjectS = try AObjectSHelper.read(from: istr)
                                     try istr.readPendingValues()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AObjectS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: AObjectS, o: AObjectS)>` - The result of the operation
    func opAObjectSAsync(_ iceP_i: AObjectS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: AObjectS, o: AObjectS)> {
        return _impl._invokeAsync(operation: "opAObjectS",
                                  mode: .Normal,
                                  write: { ostr in
                                      AObjectSHelper.write(to: ostr, value: iceP_i)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      let iceP_o: AObjectS = try AObjectSHelper.read(from: istr)
                                      let iceP_returnValue: AObjectS = try AObjectSHelper.read(from: istr)
                                      try istr.readPendingValues()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LObjectS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LObjectS, o: LObjectS)`:
    ///
    ///   - returnValue: `LObjectS`
    ///
    ///   - o: `LObjectS`
    func opLObjectS(_ iceP_i: LObjectS, context: Ice.Context? = nil) throws -> (returnValue: LObjectS, o: LObjectS) {
        return try _impl._invoke(operation: "opLObjectS",
                                 mode: .Normal,
                                 write: { ostr in
                                     LObjectSHelper.write(to: ostr, value: iceP_i)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     let iceP_o: LObjectS = try LObjectSHelper.read(from: istr)
                                     let iceP_returnValue: LObjectS = try LObjectSHelper.read(from: istr)
                                     try istr.readPendingValues()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LObjectS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LObjectS, o: LObjectS)>` - The result of the operation
    func opLObjectSAsync(_ iceP_i: LObjectS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LObjectS, o: LObjectS)> {
        return _impl._invokeAsync(operation: "opLObjectS",
                                  mode: .Normal,
                                  write: { ostr in
                                      LObjectSHelper.write(to: ostr, value: iceP_i)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      let iceP_o: LObjectS = try LObjectSHelper.read(from: istr)
                                      let iceP_returnValue: LObjectS = try LObjectSHelper.read(from: istr)
                                      try istr.readPendingValues()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `AObjectPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AObjectPrxS, o: AObjectPrxS)`:
    ///
    ///   - returnValue: `AObjectPrxS`
    ///
    ///   - o: `AObjectPrxS`
    func opAObjectPrxS(_ iceP_i: AObjectPrxS, context: Ice.Context? = nil) throws -> (returnValue: AObjectPrxS, o: AObjectPrxS) {
        return try _impl._invoke(operation: "opAObjectPrxS",
                                 mode: .Normal,
                                 write: { ostr in
                                     AObjectPrxSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: AObjectPrxS = try AObjectPrxSHelper.read(from: istr)
                                     let iceP_returnValue: AObjectPrxS = try AObjectPrxSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AObjectPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: AObjectPrxS, o: AObjectPrxS)>` - The result of the operation
    func opAObjectPrxSAsync(_ iceP_i: AObjectPrxS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: AObjectPrxS, o: AObjectPrxS)> {
        return _impl._invokeAsync(operation: "opAObjectPrxS",
                                  mode: .Normal,
                                  write: { ostr in
                                      AObjectPrxSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: AObjectPrxS = try AObjectPrxSHelper.read(from: istr)
                                      let iceP_returnValue: AObjectPrxS = try AObjectPrxSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LObjectPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LObjectPrxS, o: LObjectPrxS)`:
    ///
    ///   - returnValue: `LObjectPrxS`
    ///
    ///   - o: `LObjectPrxS`
    func opLObjectPrxS(_ iceP_i: LObjectPrxS, context: Ice.Context? = nil) throws -> (returnValue: LObjectPrxS, o: LObjectPrxS) {
        return try _impl._invoke(operation: "opLObjectPrxS",
                                 mode: .Normal,
                                 write: { ostr in
                                     LObjectPrxSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: LObjectPrxS = try LObjectPrxSHelper.read(from: istr)
                                     let iceP_returnValue: LObjectPrxS = try LObjectPrxSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LObjectPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LObjectPrxS, o: LObjectPrxS)>` - The result of the operation
    func opLObjectPrxSAsync(_ iceP_i: LObjectPrxS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LObjectPrxS, o: LObjectPrxS)> {
        return _impl._invokeAsync(operation: "opLObjectPrxS",
                                  mode: .Normal,
                                  write: { ostr in
                                      LObjectPrxSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: LObjectPrxS = try LObjectPrxSHelper.read(from: istr)
                                      let iceP_returnValue: LObjectPrxS = try LObjectPrxSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `KObjectPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: KObjectPrxS, o: KObjectPrxS)`:
    ///
    ///   - returnValue: `KObjectPrxS`
    ///
    ///   - o: `KObjectPrxS`
    func opKObjectPrxS(_ iceP_i: KObjectPrxS, context: Ice.Context? = nil) throws -> (returnValue: KObjectPrxS, o: KObjectPrxS) {
        return try _impl._invoke(operation: "opKObjectPrxS",
                                 mode: .Normal,
                                 write: { ostr in
                                     KObjectPrxSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: KObjectPrxS = try KObjectPrxSHelper.read(from: istr)
                                     let iceP_returnValue: KObjectPrxS = try KObjectPrxSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `KObjectPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: KObjectPrxS, o: KObjectPrxS)>` - The result of the operation
    func opKObjectPrxSAsync(_ iceP_i: KObjectPrxS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: KObjectPrxS, o: KObjectPrxS)> {
        return _impl._invokeAsync(operation: "opKObjectPrxS",
                                  mode: .Normal,
                                  write: { ostr in
                                      KObjectPrxSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: KObjectPrxS = try KObjectPrxSHelper.read(from: istr)
                                      let iceP_returnValue: KObjectPrxS = try KObjectPrxSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `QObjectPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: QObjectPrxS, o: QObjectPrxS)`:
    ///
    ///   - returnValue: `QObjectPrxS`
    ///
    ///   - o: `QObjectPrxS`
    func opQObjectPrxS(_ iceP_i: QObjectPrxS, context: Ice.Context? = nil) throws -> (returnValue: QObjectPrxS, o: QObjectPrxS) {
        return try _impl._invoke(operation: "opQObjectPrxS",
                                 mode: .Normal,
                                 write: { ostr in
                                     QObjectPrxSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: QObjectPrxS = try QObjectPrxSHelper.read(from: istr)
                                     let iceP_returnValue: QObjectPrxS = try QObjectPrxSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `QObjectPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: QObjectPrxS, o: QObjectPrxS)>` - The result of the operation
    func opQObjectPrxSAsync(_ iceP_i: QObjectPrxS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: QObjectPrxS, o: QObjectPrxS)> {
        return _impl._invokeAsync(operation: "opQObjectPrxS",
                                  mode: .Normal,
                                  write: { ostr in
                                      QObjectPrxSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: QObjectPrxS = try QObjectPrxSHelper.read(from: istr)
                                      let iceP_returnValue: QObjectPrxS = try QObjectPrxSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SObjectPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SObjectPrxS, o: SObjectPrxS)`:
    ///
    ///   - returnValue: `SObjectPrxS`
    ///
    ///   - o: `SObjectPrxS`
    func opSObjectPrxS(_ iceP_i: SObjectPrxS, context: Ice.Context? = nil) throws -> (returnValue: SObjectPrxS, o: SObjectPrxS) {
        return try _impl._invoke(operation: "opSObjectPrxS",
                                 mode: .Normal,
                                 write: { ostr in
                                     SObjectPrxSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: SObjectPrxS = try SObjectPrxSHelper.read(from: istr)
                                     let iceP_returnValue: SObjectPrxS = try SObjectPrxSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SObjectPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SObjectPrxS, o: SObjectPrxS)>` - The result of the operation
    func opSObjectPrxSAsync(_ iceP_i: SObjectPrxS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SObjectPrxS, o: SObjectPrxS)> {
        return _impl._invokeAsync(operation: "opSObjectPrxS",
                                  mode: .Normal,
                                  write: { ostr in
                                      SObjectPrxSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: SObjectPrxS = try SObjectPrxSHelper.read(from: istr)
                                      let iceP_returnValue: SObjectPrxS = try SObjectPrxSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `AStructS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AStructS, o: AStructS)`:
    ///
    ///   - returnValue: `AStructS`
    ///
    ///   - o: `AStructS`
    func opAStructS(_ iceP_i: AStructS, context: Ice.Context? = nil) throws -> (returnValue: AStructS, o: AStructS) {
        return try _impl._invoke(operation: "opAStructS",
                                 mode: .Normal,
                                 write: { ostr in
                                     AStructSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: AStructS = try AStructSHelper.read(from: istr)
                                     let iceP_returnValue: AStructS = try AStructSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AStructS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: AStructS, o: AStructS)>` - The result of the operation
    func opAStructSAsync(_ iceP_i: AStructS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: AStructS, o: AStructS)> {
        return _impl._invokeAsync(operation: "opAStructS",
                                  mode: .Normal,
                                  write: { ostr in
                                      AStructSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: AStructS = try AStructSHelper.read(from: istr)
                                      let iceP_returnValue: AStructS = try AStructSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LStructS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LStructS, o: LStructS)`:
    ///
    ///   - returnValue: `LStructS`
    ///
    ///   - o: `LStructS`
    func opLStructS(_ iceP_i: LStructS, context: Ice.Context? = nil) throws -> (returnValue: LStructS, o: LStructS) {
        return try _impl._invoke(operation: "opLStructS",
                                 mode: .Normal,
                                 write: { ostr in
                                     LStructSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: LStructS = try LStructSHelper.read(from: istr)
                                     let iceP_returnValue: LStructS = try LStructSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LStructS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LStructS, o: LStructS)>` - The result of the operation
    func opLStructSAsync(_ iceP_i: LStructS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LStructS, o: LStructS)> {
        return _impl._invokeAsync(operation: "opLStructS",
                                  mode: .Normal,
                                  write: { ostr in
                                      LStructSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: LStructS = try LStructSHelper.read(from: istr)
                                      let iceP_returnValue: LStructS = try LStructSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `KStructS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: KStructS, o: KStructS)`:
    ///
    ///   - returnValue: `KStructS`
    ///
    ///   - o: `KStructS`
    func opKStructS(_ iceP_i: KStructS, context: Ice.Context? = nil) throws -> (returnValue: KStructS, o: KStructS) {
        return try _impl._invoke(operation: "opKStructS",
                                 mode: .Normal,
                                 write: { ostr in
                                     KStructSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: KStructS = try KStructSHelper.read(from: istr)
                                     let iceP_returnValue: KStructS = try KStructSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `KStructS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: KStructS, o: KStructS)>` - The result of the operation
    func opKStructSAsync(_ iceP_i: KStructS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: KStructS, o: KStructS)> {
        return _impl._invokeAsync(operation: "opKStructS",
                                  mode: .Normal,
                                  write: { ostr in
                                      KStructSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: KStructS = try KStructSHelper.read(from: istr)
                                      let iceP_returnValue: KStructS = try KStructSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `QStructS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: QStructS, o: QStructS)`:
    ///
    ///   - returnValue: `QStructS`
    ///
    ///   - o: `QStructS`
    func opQStructS(_ iceP_i: QStructS, context: Ice.Context? = nil) throws -> (returnValue: QStructS, o: QStructS) {
        return try _impl._invoke(operation: "opQStructS",
                                 mode: .Normal,
                                 write: { ostr in
                                     QStructSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: QStructS = try QStructSHelper.read(from: istr)
                                     let iceP_returnValue: QStructS = try QStructSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `QStructS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: QStructS, o: QStructS)>` - The result of the operation
    func opQStructSAsync(_ iceP_i: QStructS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: QStructS, o: QStructS)> {
        return _impl._invokeAsync(operation: "opQStructS",
                                  mode: .Normal,
                                  write: { ostr in
                                      QStructSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: QStructS = try QStructSHelper.read(from: istr)
                                      let iceP_returnValue: QStructS = try QStructSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SStructS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SStructS, o: SStructS)`:
    ///
    ///   - returnValue: `SStructS`
    ///
    ///   - o: `SStructS`
    func opSStructS(_ iceP_i: SStructS, context: Ice.Context? = nil) throws -> (returnValue: SStructS, o: SStructS) {
        return try _impl._invoke(operation: "opSStructS",
                                 mode: .Normal,
                                 write: { ostr in
                                     SStructSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: SStructS = try SStructSHelper.read(from: istr)
                                     let iceP_returnValue: SStructS = try SStructSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SStructS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SStructS, o: SStructS)>` - The result of the operation
    func opSStructSAsync(_ iceP_i: SStructS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SStructS, o: SStructS)> {
        return _impl._invokeAsync(operation: "opSStructS",
                                  mode: .Normal,
                                  write: { ostr in
                                      SStructSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: SStructS = try SStructSHelper.read(from: istr)
                                      let iceP_returnValue: SStructS = try SStructSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `AStructSD`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AStructSD, o: AStructSD)`:
    ///
    ///   - returnValue: `AStructSD`
    ///
    ///   - o: `AStructSD`
    func opAStructSD(_ iceP_i: AStructSD, context: Ice.Context? = nil) throws -> (returnValue: AStructSD, o: AStructSD) {
        return try _impl._invoke(operation: "opAStructSD",
                                 mode: .Normal,
                                 write: { ostr in
                                     AStructSDHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: AStructSD = try AStructSDHelper.read(from: istr)
                                     let iceP_returnValue: AStructSD = try AStructSDHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AStructSD`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: AStructSD, o: AStructSD)>` - The result of the operation
    func opAStructSDAsync(_ iceP_i: AStructSD, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: AStructSD, o: AStructSD)> {
        return _impl._invokeAsync(operation: "opAStructSD",
                                  mode: .Normal,
                                  write: { ostr in
                                      AStructSDHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: AStructSD = try AStructSDHelper.read(from: istr)
                                      let iceP_returnValue: AStructSD = try AStructSDHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LStructSD`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LStructSD, o: LStructSD)`:
    ///
    ///   - returnValue: `LStructSD`
    ///
    ///   - o: `LStructSD`
    func opLStructSD(_ iceP_i: LStructSD, context: Ice.Context? = nil) throws -> (returnValue: LStructSD, o: LStructSD) {
        return try _impl._invoke(operation: "opLStructSD",
                                 mode: .Normal,
                                 write: { ostr in
                                     LStructSDHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: LStructSD = try LStructSDHelper.read(from: istr)
                                     let iceP_returnValue: LStructSD = try LStructSDHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LStructSD`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LStructSD, o: LStructSD)>` - The result of the operation
    func opLStructSDAsync(_ iceP_i: LStructSD, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LStructSD, o: LStructSD)> {
        return _impl._invokeAsync(operation: "opLStructSD",
                                  mode: .Normal,
                                  write: { ostr in
                                      LStructSDHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: LStructSD = try LStructSDHelper.read(from: istr)
                                      let iceP_returnValue: LStructSD = try LStructSDHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `KStructSD`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: KStructSD, o: KStructSD)`:
    ///
    ///   - returnValue: `KStructSD`
    ///
    ///   - o: `KStructSD`
    func opKStructSD(_ iceP_i: KStructSD, context: Ice.Context? = nil) throws -> (returnValue: KStructSD, o: KStructSD) {
        return try _impl._invoke(operation: "opKStructSD",
                                 mode: .Normal,
                                 write: { ostr in
                                     KStructSDHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: KStructSD = try KStructSDHelper.read(from: istr)
                                     let iceP_returnValue: KStructSD = try KStructSDHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `KStructSD`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: KStructSD, o: KStructSD)>` - The result of the operation
    func opKStructSDAsync(_ iceP_i: KStructSD, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: KStructSD, o: KStructSD)> {
        return _impl._invokeAsync(operation: "opKStructSD",
                                  mode: .Normal,
                                  write: { ostr in
                                      KStructSDHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: KStructSD = try KStructSDHelper.read(from: istr)
                                      let iceP_returnValue: KStructSD = try KStructSDHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `QStructSD`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: QStructSD, o: QStructSD)`:
    ///
    ///   - returnValue: `QStructSD`
    ///
    ///   - o: `QStructSD`
    func opQStructSD(_ iceP_i: QStructSD, context: Ice.Context? = nil) throws -> (returnValue: QStructSD, o: QStructSD) {
        return try _impl._invoke(operation: "opQStructSD",
                                 mode: .Normal,
                                 write: { ostr in
                                     QStructSDHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: QStructSD = try QStructSDHelper.read(from: istr)
                                     let iceP_returnValue: QStructSD = try QStructSDHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `QStructSD`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: QStructSD, o: QStructSD)>` - The result of the operation
    func opQStructSDAsync(_ iceP_i: QStructSD, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: QStructSD, o: QStructSD)> {
        return _impl._invokeAsync(operation: "opQStructSD",
                                  mode: .Normal,
                                  write: { ostr in
                                      QStructSDHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: QStructSD = try QStructSDHelper.read(from: istr)
                                      let iceP_returnValue: QStructSD = try QStructSDHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SStructSD`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SStructSD, o: SStructSD)`:
    ///
    ///   - returnValue: `SStructSD`
    ///
    ///   - o: `SStructSD`
    func opSStructSD(_ iceP_i: SStructSD, context: Ice.Context? = nil) throws -> (returnValue: SStructSD, o: SStructSD) {
        return try _impl._invoke(operation: "opSStructSD",
                                 mode: .Normal,
                                 write: { ostr in
                                     SStructSDHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: SStructSD = try SStructSDHelper.read(from: istr)
                                     let iceP_returnValue: SStructSD = try SStructSDHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SStructSD`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SStructSD, o: SStructSD)>` - The result of the operation
    func opSStructSDAsync(_ iceP_i: SStructSD, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SStructSD, o: SStructSD)> {
        return _impl._invokeAsync(operation: "opSStructSD",
                                  mode: .Normal,
                                  write: { ostr in
                                      SStructSDHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: SStructSD = try SStructSDHelper.read(from: istr)
                                      let iceP_returnValue: SStructSD = try SStructSDHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ACVS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ACVS, o: ACVS)`:
    ///
    ///   - returnValue: `ACVS`
    ///
    ///   - o: `ACVS`
    func opACVS(_ iceP_i: ACVS, context: Ice.Context? = nil) throws -> (returnValue: ACVS, o: ACVS) {
        return try _impl._invoke(operation: "opACVS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ACVSHelper.write(to: ostr, value: iceP_i)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     let iceP_o: ACVS = try ACVSHelper.read(from: istr)
                                     let iceP_returnValue: ACVS = try ACVSHelper.read(from: istr)
                                     try istr.readPendingValues()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ACVS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ACVS, o: ACVS)>` - The result of the operation
    func opACVSAsync(_ iceP_i: ACVS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ACVS, o: ACVS)> {
        return _impl._invokeAsync(operation: "opACVS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ACVSHelper.write(to: ostr, value: iceP_i)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      let iceP_o: ACVS = try ACVSHelper.read(from: istr)
                                      let iceP_returnValue: ACVS = try ACVSHelper.read(from: istr)
                                      try istr.readPendingValues()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LCVS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LCVS, o: LCVS)`:
    ///
    ///   - returnValue: `LCVS`
    ///
    ///   - o: `LCVS`
    func opLCVS(_ iceP_i: LCVS, context: Ice.Context? = nil) throws -> (returnValue: LCVS, o: LCVS) {
        return try _impl._invoke(operation: "opLCVS",
                                 mode: .Normal,
                                 write: { ostr in
                                     LCVSHelper.write(to: ostr, value: iceP_i)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     let iceP_o: LCVS = try LCVSHelper.read(from: istr)
                                     let iceP_returnValue: LCVS = try LCVSHelper.read(from: istr)
                                     try istr.readPendingValues()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LCVS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LCVS, o: LCVS)>` - The result of the operation
    func opLCVSAsync(_ iceP_i: LCVS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LCVS, o: LCVS)> {
        return _impl._invokeAsync(operation: "opLCVS",
                                  mode: .Normal,
                                  write: { ostr in
                                      LCVSHelper.write(to: ostr, value: iceP_i)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      let iceP_o: LCVS = try LCVSHelper.read(from: istr)
                                      let iceP_returnValue: LCVS = try LCVSHelper.read(from: istr)
                                      try istr.readPendingValues()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ACRS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ACRS, o: ACRS)`:
    ///
    ///   - returnValue: `ACRS`
    ///
    ///   - o: `ACRS`
    func opACRS(_ iceP_i: ACRS, context: Ice.Context? = nil) throws -> (returnValue: ACRS, o: ACRS) {
        return try _impl._invoke(operation: "opACRS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ACRSHelper.write(to: ostr, value: iceP_i)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     let iceP_o: ACRS = try ACRSHelper.read(from: istr)
                                     let iceP_returnValue: ACRS = try ACRSHelper.read(from: istr)
                                     try istr.readPendingValues()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ACRS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ACRS, o: ACRS)>` - The result of the operation
    func opACRSAsync(_ iceP_i: ACRS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ACRS, o: ACRS)> {
        return _impl._invokeAsync(operation: "opACRS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ACRSHelper.write(to: ostr, value: iceP_i)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      let iceP_o: ACRS = try ACRSHelper.read(from: istr)
                                      let iceP_returnValue: ACRS = try ACRSHelper.read(from: istr)
                                      try istr.readPendingValues()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LCRS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LCRS, o: LCRS)`:
    ///
    ///   - returnValue: `LCRS`
    ///
    ///   - o: `LCRS`
    func opLCRS(_ iceP_i: LCRS, context: Ice.Context? = nil) throws -> (returnValue: LCRS, o: LCRS) {
        return try _impl._invoke(operation: "opLCRS",
                                 mode: .Normal,
                                 write: { ostr in
                                     LCRSHelper.write(to: ostr, value: iceP_i)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     let iceP_o: LCRS = try LCRSHelper.read(from: istr)
                                     let iceP_returnValue: LCRS = try LCRSHelper.read(from: istr)
                                     try istr.readPendingValues()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LCRS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LCRS, o: LCRS)>` - The result of the operation
    func opLCRSAsync(_ iceP_i: LCRS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LCRS, o: LCRS)> {
        return _impl._invokeAsync(operation: "opLCRS",
                                  mode: .Normal,
                                  write: { ostr in
                                      LCRSHelper.write(to: ostr, value: iceP_i)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      let iceP_o: LCRS = try LCRSHelper.read(from: istr)
                                      let iceP_returnValue: LCRS = try LCRSHelper.read(from: istr)
                                      try istr.readPendingValues()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `AEnS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AEnS, o: AEnS)`:
    ///
    ///   - returnValue: `AEnS`
    ///
    ///   - o: `AEnS`
    func opAEnS(_ iceP_i: AEnS, context: Ice.Context? = nil) throws -> (returnValue: AEnS, o: AEnS) {
        return try _impl._invoke(operation: "opAEnS",
                                 mode: .Normal,
                                 write: { ostr in
                                     AEnSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: AEnS = try AEnSHelper.read(from: istr)
                                     let iceP_returnValue: AEnS = try AEnSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AEnS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: AEnS, o: AEnS)>` - The result of the operation
    func opAEnSAsync(_ iceP_i: AEnS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: AEnS, o: AEnS)> {
        return _impl._invokeAsync(operation: "opAEnS",
                                  mode: .Normal,
                                  write: { ostr in
                                      AEnSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: AEnS = try AEnSHelper.read(from: istr)
                                      let iceP_returnValue: AEnS = try AEnSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LEnS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LEnS, o: LEnS)`:
    ///
    ///   - returnValue: `LEnS`
    ///
    ///   - o: `LEnS`
    func opLEnS(_ iceP_i: LEnS, context: Ice.Context? = nil) throws -> (returnValue: LEnS, o: LEnS) {
        return try _impl._invoke(operation: "opLEnS",
                                 mode: .Normal,
                                 write: { ostr in
                                     LEnSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: LEnS = try LEnSHelper.read(from: istr)
                                     let iceP_returnValue: LEnS = try LEnSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LEnS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LEnS, o: LEnS)>` - The result of the operation
    func opLEnSAsync(_ iceP_i: LEnS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LEnS, o: LEnS)> {
        return _impl._invokeAsync(operation: "opLEnS",
                                  mode: .Normal,
                                  write: { ostr in
                                      LEnSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: LEnS = try LEnSHelper.read(from: istr)
                                      let iceP_returnValue: LEnS = try LEnSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `KEnS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: KEnS, o: KEnS)`:
    ///
    ///   - returnValue: `KEnS`
    ///
    ///   - o: `KEnS`
    func opKEnS(_ iceP_i: KEnS, context: Ice.Context? = nil) throws -> (returnValue: KEnS, o: KEnS) {
        return try _impl._invoke(operation: "opKEnS",
                                 mode: .Normal,
                                 write: { ostr in
                                     KEnSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: KEnS = try KEnSHelper.read(from: istr)
                                     let iceP_returnValue: KEnS = try KEnSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `KEnS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: KEnS, o: KEnS)>` - The result of the operation
    func opKEnSAsync(_ iceP_i: KEnS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: KEnS, o: KEnS)> {
        return _impl._invokeAsync(operation: "opKEnS",
                                  mode: .Normal,
                                  write: { ostr in
                                      KEnSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: KEnS = try KEnSHelper.read(from: istr)
                                      let iceP_returnValue: KEnS = try KEnSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `QEnS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: QEnS, o: QEnS)`:
    ///
    ///   - returnValue: `QEnS`
    ///
    ///   - o: `QEnS`
    func opQEnS(_ iceP_i: QEnS, context: Ice.Context? = nil) throws -> (returnValue: QEnS, o: QEnS) {
        return try _impl._invoke(operation: "opQEnS",
                                 mode: .Normal,
                                 write: { ostr in
                                     QEnSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: QEnS = try QEnSHelper.read(from: istr)
                                     let iceP_returnValue: QEnS = try QEnSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `QEnS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: QEnS, o: QEnS)>` - The result of the operation
    func opQEnSAsync(_ iceP_i: QEnS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: QEnS, o: QEnS)> {
        return _impl._invokeAsync(operation: "opQEnS",
                                  mode: .Normal,
                                  write: { ostr in
                                      QEnSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: QEnS = try QEnSHelper.read(from: istr)
                                      let iceP_returnValue: QEnS = try QEnSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SEnS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SEnS, o: SEnS)`:
    ///
    ///   - returnValue: `SEnS`
    ///
    ///   - o: `SEnS`
    func opSEnS(_ iceP_i: SEnS, context: Ice.Context? = nil) throws -> (returnValue: SEnS, o: SEnS) {
        return try _impl._invoke(operation: "opSEnS",
                                 mode: .Normal,
                                 write: { ostr in
                                     SEnSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: SEnS = try SEnSHelper.read(from: istr)
                                     let iceP_returnValue: SEnS = try SEnSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SEnS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SEnS, o: SEnS)>` - The result of the operation
    func opSEnSAsync(_ iceP_i: SEnS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SEnS, o: SEnS)> {
        return _impl._invokeAsync(operation: "opSEnS",
                                  mode: .Normal,
                                  write: { ostr in
                                      SEnSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: SEnS = try SEnSHelper.read(from: istr)
                                      let iceP_returnValue: SEnS = try SEnSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `AIPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: AIPrxS, o: AIPrxS)`:
    ///
    ///   - returnValue: `AIPrxS`
    ///
    ///   - o: `AIPrxS`
    func opAIPrxS(_ iceP_i: AIPrxS, context: Ice.Context? = nil) throws -> (returnValue: AIPrxS, o: AIPrxS) {
        return try _impl._invoke(operation: "opAIPrxS",
                                 mode: .Normal,
                                 write: { ostr in
                                     AIPrxSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: AIPrxS = try AIPrxSHelper.read(from: istr)
                                     let iceP_returnValue: AIPrxS = try AIPrxSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `AIPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: AIPrxS, o: AIPrxS)>` - The result of the operation
    func opAIPrxSAsync(_ iceP_i: AIPrxS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: AIPrxS, o: AIPrxS)> {
        return _impl._invokeAsync(operation: "opAIPrxS",
                                  mode: .Normal,
                                  write: { ostr in
                                      AIPrxSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: AIPrxS = try AIPrxSHelper.read(from: istr)
                                      let iceP_returnValue: AIPrxS = try AIPrxSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LIPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LIPrxS, o: LIPrxS)`:
    ///
    ///   - returnValue: `LIPrxS`
    ///
    ///   - o: `LIPrxS`
    func opLIPrxS(_ iceP_i: LIPrxS, context: Ice.Context? = nil) throws -> (returnValue: LIPrxS, o: LIPrxS) {
        return try _impl._invoke(operation: "opLIPrxS",
                                 mode: .Normal,
                                 write: { ostr in
                                     LIPrxSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: LIPrxS = try LIPrxSHelper.read(from: istr)
                                     let iceP_returnValue: LIPrxS = try LIPrxSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LIPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LIPrxS, o: LIPrxS)>` - The result of the operation
    func opLIPrxSAsync(_ iceP_i: LIPrxS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LIPrxS, o: LIPrxS)> {
        return _impl._invokeAsync(operation: "opLIPrxS",
                                  mode: .Normal,
                                  write: { ostr in
                                      LIPrxSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: LIPrxS = try LIPrxSHelper.read(from: istr)
                                      let iceP_returnValue: LIPrxS = try LIPrxSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `KIPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: KIPrxS, o: KIPrxS)`:
    ///
    ///   - returnValue: `KIPrxS`
    ///
    ///   - o: `KIPrxS`
    func opKIPrxS(_ iceP_i: KIPrxS, context: Ice.Context? = nil) throws -> (returnValue: KIPrxS, o: KIPrxS) {
        return try _impl._invoke(operation: "opKIPrxS",
                                 mode: .Normal,
                                 write: { ostr in
                                     KIPrxSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: KIPrxS = try KIPrxSHelper.read(from: istr)
                                     let iceP_returnValue: KIPrxS = try KIPrxSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `KIPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: KIPrxS, o: KIPrxS)>` - The result of the operation
    func opKIPrxSAsync(_ iceP_i: KIPrxS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: KIPrxS, o: KIPrxS)> {
        return _impl._invokeAsync(operation: "opKIPrxS",
                                  mode: .Normal,
                                  write: { ostr in
                                      KIPrxSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: KIPrxS = try KIPrxSHelper.read(from: istr)
                                      let iceP_returnValue: KIPrxS = try KIPrxSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `QIPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: QIPrxS, o: QIPrxS)`:
    ///
    ///   - returnValue: `QIPrxS`
    ///
    ///   - o: `QIPrxS`
    func opQIPrxS(_ iceP_i: QIPrxS, context: Ice.Context? = nil) throws -> (returnValue: QIPrxS, o: QIPrxS) {
        return try _impl._invoke(operation: "opQIPrxS",
                                 mode: .Normal,
                                 write: { ostr in
                                     QIPrxSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: QIPrxS = try QIPrxSHelper.read(from: istr)
                                     let iceP_returnValue: QIPrxS = try QIPrxSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `QIPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: QIPrxS, o: QIPrxS)>` - The result of the operation
    func opQIPrxSAsync(_ iceP_i: QIPrxS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: QIPrxS, o: QIPrxS)> {
        return _impl._invokeAsync(operation: "opQIPrxS",
                                  mode: .Normal,
                                  write: { ostr in
                                      QIPrxSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: QIPrxS = try QIPrxSHelper.read(from: istr)
                                      let iceP_returnValue: QIPrxS = try QIPrxSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SIPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SIPrxS, o: SIPrxS)`:
    ///
    ///   - returnValue: `SIPrxS`
    ///
    ///   - o: `SIPrxS`
    func opSIPrxS(_ iceP_i: SIPrxS, context: Ice.Context? = nil) throws -> (returnValue: SIPrxS, o: SIPrxS) {
        return try _impl._invoke(operation: "opSIPrxS",
                                 mode: .Normal,
                                 write: { ostr in
                                     SIPrxSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: SIPrxS = try SIPrxSHelper.read(from: istr)
                                     let iceP_returnValue: SIPrxS = try SIPrxSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SIPrxS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SIPrxS, o: SIPrxS)>` - The result of the operation
    func opSIPrxSAsync(_ iceP_i: SIPrxS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SIPrxS, o: SIPrxS)> {
        return _impl._invokeAsync(operation: "opSIPrxS",
                                  mode: .Normal,
                                  write: { ostr in
                                      SIPrxSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: SIPrxS = try SIPrxSHelper.read(from: istr)
                                      let iceP_returnValue: SIPrxS = try SIPrxSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `CustomIntS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: CustomIntS, o: CustomIntS)`:
    ///
    ///   - returnValue: `CustomIntS`
    ///
    ///   - o: `CustomIntS`
    func opCustomIntS(_ iceP_i: CustomIntS, context: Ice.Context? = nil) throws -> (returnValue: CustomIntS, o: CustomIntS) {
        return try _impl._invoke(operation: "opCustomIntS",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: CustomIntS = try istr.read()
                                     let iceP_returnValue: CustomIntS = try istr.read()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `CustomIntS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: CustomIntS, o: CustomIntS)>` - The result of the operation
    func opCustomIntSAsync(_ iceP_i: CustomIntS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: CustomIntS, o: CustomIntS)> {
        return _impl._invokeAsync(operation: "opCustomIntS",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: CustomIntS = try istr.read()
                                      let iceP_returnValue: CustomIntS = try istr.read()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `CustomCVS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: CustomCVS, o: CustomCVS)`:
    ///
    ///   - returnValue: `CustomCVS`
    ///
    ///   - o: `CustomCVS`
    func opCustomCVS(_ iceP_i: CustomCVS, context: Ice.Context? = nil) throws -> (returnValue: CustomCVS, o: CustomCVS) {
        return try _impl._invoke(operation: "opCustomCVS",
                                 mode: .Normal,
                                 write: { ostr in
                                     CustomCVSHelper.write(to: ostr, value: iceP_i)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     let iceP_o: CustomCVS = try CustomCVSHelper.read(from: istr)
                                     let iceP_returnValue: CustomCVS = try CustomCVSHelper.read(from: istr)
                                     try istr.readPendingValues()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `CustomCVS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: CustomCVS, o: CustomCVS)>` - The result of the operation
    func opCustomCVSAsync(_ iceP_i: CustomCVS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: CustomCVS, o: CustomCVS)> {
        return _impl._invokeAsync(operation: "opCustomCVS",
                                  mode: .Normal,
                                  write: { ostr in
                                      CustomCVSHelper.write(to: ostr, value: iceP_i)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      let iceP_o: CustomCVS = try CustomCVSHelper.read(from: istr)
                                      let iceP_returnValue: CustomCVS = try CustomCVSHelper.read(from: istr)
                                      try istr.readPendingValues()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `CustomIntSS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: CustomIntSS, o: CustomIntSS)`:
    ///
    ///   - returnValue: `CustomIntSS`
    ///
    ///   - o: `CustomIntSS`
    func opCustomIntSS(_ iceP_i: CustomIntSS, context: Ice.Context? = nil) throws -> (returnValue: CustomIntSS, o: CustomIntSS) {
        return try _impl._invoke(operation: "opCustomIntSS",
                                 mode: .Normal,
                                 write: { ostr in
                                     CustomIntSSHelper.write(to: ostr, value: iceP_i)
                                 },
                                 read: { istr in
                                     let iceP_o: CustomIntSS = try CustomIntSSHelper.read(from: istr)
                                     let iceP_returnValue: CustomIntSS = try CustomIntSSHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `CustomIntSS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: CustomIntSS, o: CustomIntSS)>` - The result of the operation
    func opCustomIntSSAsync(_ iceP_i: CustomIntSS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: CustomIntSS, o: CustomIntSS)> {
        return _impl._invokeAsync(operation: "opCustomIntSS",
                                  mode: .Normal,
                                  write: { ostr in
                                      CustomIntSSHelper.write(to: ostr, value: iceP_i)
                                  },
                                  read: { istr in
                                      let iceP_o: CustomIntSS = try CustomIntSSHelper.read(from: istr)
                                      let iceP_returnValue: CustomIntSS = try CustomIntSSHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `CustomCVSS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: CustomCVSS, o: CustomCVSS)`:
    ///
    ///   - returnValue: `CustomCVSS`
    ///
    ///   - o: `CustomCVSS`
    func opCustomCVSS(_ iceP_i: CustomCVSS, context: Ice.Context? = nil) throws -> (returnValue: CustomCVSS, o: CustomCVSS) {
        return try _impl._invoke(operation: "opCustomCVSS",
                                 mode: .Normal,
                                 write: { ostr in
                                     CustomCVSSHelper.write(to: ostr, value: iceP_i)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     let iceP_o: CustomCVSS = try CustomCVSSHelper.read(from: istr)
                                     let iceP_returnValue: CustomCVSS = try CustomCVSSHelper.read(from: istr)
                                     try istr.readPendingValues()
                                     return (iceP_returnValue, iceP_o)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `CustomCVSS`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: CustomCVSS, o: CustomCVSS)>` - The result of the operation
    func opCustomCVSSAsync(_ iceP_i: CustomCVSS, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: CustomCVSS, o: CustomCVSS)> {
        return _impl._invokeAsync(operation: "opCustomCVSS",
                                  mode: .Normal,
                                  write: { ostr in
                                      CustomCVSSHelper.write(to: ostr, value: iceP_i)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      let iceP_o: CustomCVSS = try CustomCVSSHelper.read(from: istr)
                                      let iceP_returnValue: CustomCVSS = try CustomCVSSHelper.read(from: istr)
                                      try istr.readPendingValues()
                                      return (iceP_returnValue, iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// :nodoc:
public class CV_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return CV.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_CV() -> Ice.ValueTypeResolver {
        return CV_TypeResolver()
    }
}

open class CV: Ice.Value {
    public var i: Swift.Int32 = 0

    public required init() {}

    public init(i: Swift.Int32) {
        self.i = i
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return CVTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return CVTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.i = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CVTraits.staticId, compactId: -1, last: true)
        ostr.write(self.i)
        ostr.endSlice()
    }
}

/// :nodoc:
public class CR_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return CR.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_CR() -> Ice.ValueTypeResolver {
        return CR_TypeResolver()
    }
}

open class CR: Ice.Value {
    public var v: CV? = nil

    public required init() {}

    public init(v: CV?) {
        self.v = v
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return CRTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return CRTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.read(CV.self) { self.v = $0 }
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CRTraits.staticId, compactId: -1, last: true)
        ostr.write(self.v)
        ostr.endSlice()
    }
}


/// Dispatcher for `I` servants.
public struct IDisp: Ice.Disp {
    public let servant: I
    private static let defaultObject = Ice.ObjectI<ITraits>()

    public init(_ servant: I) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "ice_id":
            return try (servant as? Object ?? IDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? IDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? IDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? IDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol I {}


/// Dispatcher for `MyClass` servants.
public struct MyClassDisp: Ice.Disp {
    public let servant: MyClass
    private static let defaultObject = Ice.ObjectI<MyClassTraits>()

    public init(_ servant: MyClass) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "ice_id":
            return try (servant as? Object ?? MyClassDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MyClassDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MyClassDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MyClassDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "opABoolS":
            return try servant._iceD_opABoolS(incoming: request, current: current)
        case "opAByteS":
            return try servant._iceD_opAByteS(incoming: request, current: current)
        case "opACRS":
            return try servant._iceD_opACRS(incoming: request, current: current)
        case "opACVS":
            return try servant._iceD_opACVS(incoming: request, current: current)
        case "opADoubleS":
            return try servant._iceD_opADoubleS(incoming: request, current: current)
        case "opAEnS":
            return try servant._iceD_opAEnS(incoming: request, current: current)
        case "opAFloatS":
            return try servant._iceD_opAFloatS(incoming: request, current: current)
        case "opAIPrxS":
            return try servant._iceD_opAIPrxS(incoming: request, current: current)
        case "opAIntS":
            return try servant._iceD_opAIntS(incoming: request, current: current)
        case "opALongS":
            return try servant._iceD_opALongS(incoming: request, current: current)
        case "opAObjectPrxS":
            return try servant._iceD_opAObjectPrxS(incoming: request, current: current)
        case "opAObjectS":
            return try servant._iceD_opAObjectS(incoming: request, current: current)
        case "opAShortS":
            return try servant._iceD_opAShortS(incoming: request, current: current)
        case "opAStringS":
            return try servant._iceD_opAStringS(incoming: request, current: current)
        case "opAStructS":
            return try servant._iceD_opAStructS(incoming: request, current: current)
        case "opAStructSD":
            return try servant._iceD_opAStructSD(incoming: request, current: current)
        case "opCustomCVS":
            return try servant._iceD_opCustomCVS(incoming: request, current: current)
        case "opCustomCVSS":
            return try servant._iceD_opCustomCVSS(incoming: request, current: current)
        case "opCustomIntS":
            return try servant._iceD_opCustomIntS(incoming: request, current: current)
        case "opCustomIntSS":
            return try servant._iceD_opCustomIntSS(incoming: request, current: current)
        case "opKBoolS":
            return try servant._iceD_opKBoolS(incoming: request, current: current)
        case "opKByteS":
            return try servant._iceD_opKByteS(incoming: request, current: current)
        case "opKDoubleS":
            return try servant._iceD_opKDoubleS(incoming: request, current: current)
        case "opKEnS":
            return try servant._iceD_opKEnS(incoming: request, current: current)
        case "opKFloatS":
            return try servant._iceD_opKFloatS(incoming: request, current: current)
        case "opKIPrxS":
            return try servant._iceD_opKIPrxS(incoming: request, current: current)
        case "opKIntS":
            return try servant._iceD_opKIntS(incoming: request, current: current)
        case "opKLongS":
            return try servant._iceD_opKLongS(incoming: request, current: current)
        case "opKObjectPrxS":
            return try servant._iceD_opKObjectPrxS(incoming: request, current: current)
        case "opKShortS":
            return try servant._iceD_opKShortS(incoming: request, current: current)
        case "opKStringS":
            return try servant._iceD_opKStringS(incoming: request, current: current)
        case "opKStructS":
            return try servant._iceD_opKStructS(incoming: request, current: current)
        case "opKStructSD":
            return try servant._iceD_opKStructSD(incoming: request, current: current)
        case "opLBoolS":
            return try servant._iceD_opLBoolS(incoming: request, current: current)
        case "opLByteS":
            return try servant._iceD_opLByteS(incoming: request, current: current)
        case "opLCRS":
            return try servant._iceD_opLCRS(incoming: request, current: current)
        case "opLCVS":
            return try servant._iceD_opLCVS(incoming: request, current: current)
        case "opLDoubleS":
            return try servant._iceD_opLDoubleS(incoming: request, current: current)
        case "opLEnS":
            return try servant._iceD_opLEnS(incoming: request, current: current)
        case "opLFloatS":
            return try servant._iceD_opLFloatS(incoming: request, current: current)
        case "opLIPrxS":
            return try servant._iceD_opLIPrxS(incoming: request, current: current)
        case "opLIntS":
            return try servant._iceD_opLIntS(incoming: request, current: current)
        case "opLLongS":
            return try servant._iceD_opLLongS(incoming: request, current: current)
        case "opLObjectPrxS":
            return try servant._iceD_opLObjectPrxS(incoming: request, current: current)
        case "opLObjectS":
            return try servant._iceD_opLObjectS(incoming: request, current: current)
        case "opLShortS":
            return try servant._iceD_opLShortS(incoming: request, current: current)
        case "opLStringS":
            return try servant._iceD_opLStringS(incoming: request, current: current)
        case "opLStructS":
            return try servant._iceD_opLStructS(incoming: request, current: current)
        case "opLStructSD":
            return try servant._iceD_opLStructSD(incoming: request, current: current)
        case "opQBoolS":
            return try servant._iceD_opQBoolS(incoming: request, current: current)
        case "opQByteS":
            return try servant._iceD_opQByteS(incoming: request, current: current)
        case "opQDoubleS":
            return try servant._iceD_opQDoubleS(incoming: request, current: current)
        case "opQEnS":
            return try servant._iceD_opQEnS(incoming: request, current: current)
        case "opQFloatS":
            return try servant._iceD_opQFloatS(incoming: request, current: current)
        case "opQIPrxS":
            return try servant._iceD_opQIPrxS(incoming: request, current: current)
        case "opQIntS":
            return try servant._iceD_opQIntS(incoming: request, current: current)
        case "opQLongS":
            return try servant._iceD_opQLongS(incoming: request, current: current)
        case "opQObjectPrxS":
            return try servant._iceD_opQObjectPrxS(incoming: request, current: current)
        case "opQShortS":
            return try servant._iceD_opQShortS(incoming: request, current: current)
        case "opQStringS":
            return try servant._iceD_opQStringS(incoming: request, current: current)
        case "opQStructS":
            return try servant._iceD_opQStructS(incoming: request, current: current)
        case "opQStructSD":
            return try servant._iceD_opQStructSD(incoming: request, current: current)
        case "opSBoolS":
            return try servant._iceD_opSBoolS(incoming: request, current: current)
        case "opSByteS":
            return try servant._iceD_opSByteS(incoming: request, current: current)
        case "opSDoubleS":
            return try servant._iceD_opSDoubleS(incoming: request, current: current)
        case "opSEnS":
            return try servant._iceD_opSEnS(incoming: request, current: current)
        case "opSFloatS":
            return try servant._iceD_opSFloatS(incoming: request, current: current)
        case "opSIPrxS":
            return try servant._iceD_opSIPrxS(incoming: request, current: current)
        case "opSIntS":
            return try servant._iceD_opSIntS(incoming: request, current: current)
        case "opSLongS":
            return try servant._iceD_opSLongS(incoming: request, current: current)
        case "opSObjectPrxS":
            return try servant._iceD_opSObjectPrxS(incoming: request, current: current)
        case "opSShortS":
            return try servant._iceD_opSShortS(incoming: request, current: current)
        case "opSStringS":
            return try servant._iceD_opSStringS(incoming: request, current: current)
        case "opSStructS":
            return try servant._iceD_opSStructS(incoming: request, current: current)
        case "opSStructSD":
            return try servant._iceD_opSStructSD(incoming: request, current: current)
        case "shutdown":
            return try servant._iceD_shutdown(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MyClass {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws

    ///
    /// - parameter i: `AByteS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AByteS, o: AByteS)`:
    ///
    ///   - returnValue: `AByteS`
    ///
    ///   - o: `AByteS`
    func opAByteS(i: AByteS, current: Ice.Current) throws -> (returnValue: AByteS, o: AByteS)

    ///
    /// - parameter i: `LByteS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LByteS, o: LByteS)`:
    ///
    ///   - returnValue: `LByteS`
    ///
    ///   - o: `LByteS`
    func opLByteS(i: LByteS, current: Ice.Current) throws -> (returnValue: LByteS, o: LByteS)

    ///
    /// - parameter i: `KByteS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: KByteS, o: KByteS)`:
    ///
    ///   - returnValue: `KByteS`
    ///
    ///   - o: `KByteS`
    func opKByteS(i: KByteS, current: Ice.Current) throws -> (returnValue: KByteS, o: KByteS)

    ///
    /// - parameter i: `QByteS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: QByteS, o: QByteS)`:
    ///
    ///   - returnValue: `QByteS`
    ///
    ///   - o: `QByteS`
    func opQByteS(i: QByteS, current: Ice.Current) throws -> (returnValue: QByteS, o: QByteS)

    ///
    /// - parameter i: `SByteS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SByteS, o: SByteS)`:
    ///
    ///   - returnValue: `SByteS`
    ///
    ///   - o: `SByteS`
    func opSByteS(i: SByteS, current: Ice.Current) throws -> (returnValue: SByteS, o: SByteS)

    ///
    /// - parameter i: `ABoolS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ABoolS, o: ABoolS)`:
    ///
    ///   - returnValue: `ABoolS`
    ///
    ///   - o: `ABoolS`
    func opABoolS(i: ABoolS, current: Ice.Current) throws -> (returnValue: ABoolS, o: ABoolS)

    ///
    /// - parameter i: `LBoolS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LBoolS, o: LBoolS)`:
    ///
    ///   - returnValue: `LBoolS`
    ///
    ///   - o: `LBoolS`
    func opLBoolS(i: LBoolS, current: Ice.Current) throws -> (returnValue: LBoolS, o: LBoolS)

    ///
    /// - parameter i: `KBoolS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: KBoolS, o: KBoolS)`:
    ///
    ///   - returnValue: `KBoolS`
    ///
    ///   - o: `KBoolS`
    func opKBoolS(i: KBoolS, current: Ice.Current) throws -> (returnValue: KBoolS, o: KBoolS)

    ///
    /// - parameter i: `QBoolS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: QBoolS, o: QBoolS)`:
    ///
    ///   - returnValue: `QBoolS`
    ///
    ///   - o: `QBoolS`
    func opQBoolS(i: QBoolS, current: Ice.Current) throws -> (returnValue: QBoolS, o: QBoolS)

    ///
    /// - parameter i: `SBoolS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SBoolS, o: SBoolS)`:
    ///
    ///   - returnValue: `SBoolS`
    ///
    ///   - o: `SBoolS`
    func opSBoolS(i: SBoolS, current: Ice.Current) throws -> (returnValue: SBoolS, o: SBoolS)

    ///
    /// - parameter i: `AShortS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AShortS, o: AShortS)`:
    ///
    ///   - returnValue: `AShortS`
    ///
    ///   - o: `AShortS`
    func opAShortS(i: AShortS, current: Ice.Current) throws -> (returnValue: AShortS, o: AShortS)

    ///
    /// - parameter i: `LShortS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LShortS, o: LShortS)`:
    ///
    ///   - returnValue: `LShortS`
    ///
    ///   - o: `LShortS`
    func opLShortS(i: LShortS, current: Ice.Current) throws -> (returnValue: LShortS, o: LShortS)

    ///
    /// - parameter i: `KShortS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: KShortS, o: KShortS)`:
    ///
    ///   - returnValue: `KShortS`
    ///
    ///   - o: `KShortS`
    func opKShortS(i: KShortS, current: Ice.Current) throws -> (returnValue: KShortS, o: KShortS)

    ///
    /// - parameter i: `QShortS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: QShortS, o: QShortS)`:
    ///
    ///   - returnValue: `QShortS`
    ///
    ///   - o: `QShortS`
    func opQShortS(i: QShortS, current: Ice.Current) throws -> (returnValue: QShortS, o: QShortS)

    ///
    /// - parameter i: `SShortS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SShortS, o: SShortS)`:
    ///
    ///   - returnValue: `SShortS`
    ///
    ///   - o: `SShortS`
    func opSShortS(i: SShortS, current: Ice.Current) throws -> (returnValue: SShortS, o: SShortS)

    ///
    /// - parameter i: `AIntS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AIntS, o: AIntS)`:
    ///
    ///   - returnValue: `AIntS`
    ///
    ///   - o: `AIntS`
    func opAIntS(i: AIntS, current: Ice.Current) throws -> (returnValue: AIntS, o: AIntS)

    ///
    /// - parameter i: `LIntS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LIntS, o: LIntS)`:
    ///
    ///   - returnValue: `LIntS`
    ///
    ///   - o: `LIntS`
    func opLIntS(i: LIntS, current: Ice.Current) throws -> (returnValue: LIntS, o: LIntS)

    ///
    /// - parameter i: `KIntS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: KIntS, o: KIntS)`:
    ///
    ///   - returnValue: `KIntS`
    ///
    ///   - o: `KIntS`
    func opKIntS(i: KIntS, current: Ice.Current) throws -> (returnValue: KIntS, o: KIntS)

    ///
    /// - parameter i: `QIntS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: QIntS, o: QIntS)`:
    ///
    ///   - returnValue: `QIntS`
    ///
    ///   - o: `QIntS`
    func opQIntS(i: QIntS, current: Ice.Current) throws -> (returnValue: QIntS, o: QIntS)

    ///
    /// - parameter i: `SIntS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SIntS, o: SIntS)`:
    ///
    ///   - returnValue: `SIntS`
    ///
    ///   - o: `SIntS`
    func opSIntS(i: SIntS, current: Ice.Current) throws -> (returnValue: SIntS, o: SIntS)

    ///
    /// - parameter i: `ALongS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ALongS, o: ALongS)`:
    ///
    ///   - returnValue: `ALongS`
    ///
    ///   - o: `ALongS`
    func opALongS(i: ALongS, current: Ice.Current) throws -> (returnValue: ALongS, o: ALongS)

    ///
    /// - parameter i: `LLongS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LLongS, o: LLongS)`:
    ///
    ///   - returnValue: `LLongS`
    ///
    ///   - o: `LLongS`
    func opLLongS(i: LLongS, current: Ice.Current) throws -> (returnValue: LLongS, o: LLongS)

    ///
    /// - parameter i: `KLongS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: KLongS, o: KLongS)`:
    ///
    ///   - returnValue: `KLongS`
    ///
    ///   - o: `KLongS`
    func opKLongS(i: KLongS, current: Ice.Current) throws -> (returnValue: KLongS, o: KLongS)

    ///
    /// - parameter i: `QLongS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: QLongS, o: QLongS)`:
    ///
    ///   - returnValue: `QLongS`
    ///
    ///   - o: `QLongS`
    func opQLongS(i: QLongS, current: Ice.Current) throws -> (returnValue: QLongS, o: QLongS)

    ///
    /// - parameter i: `SLongS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SLongS, o: SLongS)`:
    ///
    ///   - returnValue: `SLongS`
    ///
    ///   - o: `SLongS`
    func opSLongS(i: SLongS, current: Ice.Current) throws -> (returnValue: SLongS, o: SLongS)

    ///
    /// - parameter i: `AFloatS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AFloatS, o: AFloatS)`:
    ///
    ///   - returnValue: `AFloatS`
    ///
    ///   - o: `AFloatS`
    func opAFloatS(i: AFloatS, current: Ice.Current) throws -> (returnValue: AFloatS, o: AFloatS)

    ///
    /// - parameter i: `LFloatS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LFloatS, o: LFloatS)`:
    ///
    ///   - returnValue: `LFloatS`
    ///
    ///   - o: `LFloatS`
    func opLFloatS(i: LFloatS, current: Ice.Current) throws -> (returnValue: LFloatS, o: LFloatS)

    ///
    /// - parameter i: `KFloatS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: KFloatS, o: KFloatS)`:
    ///
    ///   - returnValue: `KFloatS`
    ///
    ///   - o: `KFloatS`
    func opKFloatS(i: KFloatS, current: Ice.Current) throws -> (returnValue: KFloatS, o: KFloatS)

    ///
    /// - parameter i: `QFloatS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: QFloatS, o: QFloatS)`:
    ///
    ///   - returnValue: `QFloatS`
    ///
    ///   - o: `QFloatS`
    func opQFloatS(i: QFloatS, current: Ice.Current) throws -> (returnValue: QFloatS, o: QFloatS)

    ///
    /// - parameter i: `SFloatS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SFloatS, o: SFloatS)`:
    ///
    ///   - returnValue: `SFloatS`
    ///
    ///   - o: `SFloatS`
    func opSFloatS(i: SFloatS, current: Ice.Current) throws -> (returnValue: SFloatS, o: SFloatS)

    ///
    /// - parameter i: `ADoubleS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ADoubleS, o: ADoubleS)`:
    ///
    ///   - returnValue: `ADoubleS`
    ///
    ///   - o: `ADoubleS`
    func opADoubleS(i: ADoubleS, current: Ice.Current) throws -> (returnValue: ADoubleS, o: ADoubleS)

    ///
    /// - parameter i: `LDoubleS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LDoubleS, o: LDoubleS)`:
    ///
    ///   - returnValue: `LDoubleS`
    ///
    ///   - o: `LDoubleS`
    func opLDoubleS(i: LDoubleS, current: Ice.Current) throws -> (returnValue: LDoubleS, o: LDoubleS)

    ///
    /// - parameter i: `KDoubleS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: KDoubleS, o: KDoubleS)`:
    ///
    ///   - returnValue: `KDoubleS`
    ///
    ///   - o: `KDoubleS`
    func opKDoubleS(i: KDoubleS, current: Ice.Current) throws -> (returnValue: KDoubleS, o: KDoubleS)

    ///
    /// - parameter i: `QDoubleS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: QDoubleS, o: QDoubleS)`:
    ///
    ///   - returnValue: `QDoubleS`
    ///
    ///   - o: `QDoubleS`
    func opQDoubleS(i: QDoubleS, current: Ice.Current) throws -> (returnValue: QDoubleS, o: QDoubleS)

    ///
    /// - parameter i: `SDoubleS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SDoubleS, o: SDoubleS)`:
    ///
    ///   - returnValue: `SDoubleS`
    ///
    ///   - o: `SDoubleS`
    func opSDoubleS(i: SDoubleS, current: Ice.Current) throws -> (returnValue: SDoubleS, o: SDoubleS)

    ///
    /// - parameter i: `AStringS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AStringS, o: AStringS)`:
    ///
    ///   - returnValue: `AStringS`
    ///
    ///   - o: `AStringS`
    func opAStringS(i: AStringS, current: Ice.Current) throws -> (returnValue: AStringS, o: AStringS)

    ///
    /// - parameter i: `LStringS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LStringS, o: LStringS)`:
    ///
    ///   - returnValue: `LStringS`
    ///
    ///   - o: `LStringS`
    func opLStringS(i: LStringS, current: Ice.Current) throws -> (returnValue: LStringS, o: LStringS)

    ///
    /// - parameter i: `KStringS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: KStringS, o: KStringS)`:
    ///
    ///   - returnValue: `KStringS`
    ///
    ///   - o: `KStringS`
    func opKStringS(i: KStringS, current: Ice.Current) throws -> (returnValue: KStringS, o: KStringS)

    ///
    /// - parameter i: `QStringS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: QStringS, o: QStringS)`:
    ///
    ///   - returnValue: `QStringS`
    ///
    ///   - o: `QStringS`
    func opQStringS(i: QStringS, current: Ice.Current) throws -> (returnValue: QStringS, o: QStringS)

    ///
    /// - parameter i: `SStringS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SStringS, o: SStringS)`:
    ///
    ///   - returnValue: `SStringS`
    ///
    ///   - o: `SStringS`
    func opSStringS(i: SStringS, current: Ice.Current) throws -> (returnValue: SStringS, o: SStringS)

    ///
    /// - parameter i: `AObjectS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AObjectS, o: AObjectS)`:
    ///
    ///   - returnValue: `AObjectS`
    ///
    ///   - o: `AObjectS`
    func opAObjectS(i: AObjectS, current: Ice.Current) throws -> (returnValue: AObjectS, o: AObjectS)

    ///
    /// - parameter i: `LObjectS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LObjectS, o: LObjectS)`:
    ///
    ///   - returnValue: `LObjectS`
    ///
    ///   - o: `LObjectS`
    func opLObjectS(i: LObjectS, current: Ice.Current) throws -> (returnValue: LObjectS, o: LObjectS)

    ///
    /// - parameter i: `AObjectPrxS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AObjectPrxS, o: AObjectPrxS)`:
    ///
    ///   - returnValue: `AObjectPrxS`
    ///
    ///   - o: `AObjectPrxS`
    func opAObjectPrxS(i: AObjectPrxS, current: Ice.Current) throws -> (returnValue: AObjectPrxS, o: AObjectPrxS)

    ///
    /// - parameter i: `LObjectPrxS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LObjectPrxS, o: LObjectPrxS)`:
    ///
    ///   - returnValue: `LObjectPrxS`
    ///
    ///   - o: `LObjectPrxS`
    func opLObjectPrxS(i: LObjectPrxS, current: Ice.Current) throws -> (returnValue: LObjectPrxS, o: LObjectPrxS)

    ///
    /// - parameter i: `KObjectPrxS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: KObjectPrxS, o: KObjectPrxS)`:
    ///
    ///   - returnValue: `KObjectPrxS`
    ///
    ///   - o: `KObjectPrxS`
    func opKObjectPrxS(i: KObjectPrxS, current: Ice.Current) throws -> (returnValue: KObjectPrxS, o: KObjectPrxS)

    ///
    /// - parameter i: `QObjectPrxS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: QObjectPrxS, o: QObjectPrxS)`:
    ///
    ///   - returnValue: `QObjectPrxS`
    ///
    ///   - o: `QObjectPrxS`
    func opQObjectPrxS(i: QObjectPrxS, current: Ice.Current) throws -> (returnValue: QObjectPrxS, o: QObjectPrxS)

    ///
    /// - parameter i: `SObjectPrxS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SObjectPrxS, o: SObjectPrxS)`:
    ///
    ///   - returnValue: `SObjectPrxS`
    ///
    ///   - o: `SObjectPrxS`
    func opSObjectPrxS(i: SObjectPrxS, current: Ice.Current) throws -> (returnValue: SObjectPrxS, o: SObjectPrxS)

    ///
    /// - parameter i: `AStructS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AStructS, o: AStructS)`:
    ///
    ///   - returnValue: `AStructS`
    ///
    ///   - o: `AStructS`
    func opAStructS(i: AStructS, current: Ice.Current) throws -> (returnValue: AStructS, o: AStructS)

    ///
    /// - parameter i: `LStructS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LStructS, o: LStructS)`:
    ///
    ///   - returnValue: `LStructS`
    ///
    ///   - o: `LStructS`
    func opLStructS(i: LStructS, current: Ice.Current) throws -> (returnValue: LStructS, o: LStructS)

    ///
    /// - parameter i: `KStructS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: KStructS, o: KStructS)`:
    ///
    ///   - returnValue: `KStructS`
    ///
    ///   - o: `KStructS`
    func opKStructS(i: KStructS, current: Ice.Current) throws -> (returnValue: KStructS, o: KStructS)

    ///
    /// - parameter i: `QStructS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: QStructS, o: QStructS)`:
    ///
    ///   - returnValue: `QStructS`
    ///
    ///   - o: `QStructS`
    func opQStructS(i: QStructS, current: Ice.Current) throws -> (returnValue: QStructS, o: QStructS)

    ///
    /// - parameter i: `SStructS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SStructS, o: SStructS)`:
    ///
    ///   - returnValue: `SStructS`
    ///
    ///   - o: `SStructS`
    func opSStructS(i: SStructS, current: Ice.Current) throws -> (returnValue: SStructS, o: SStructS)

    ///
    /// - parameter i: `AStructSD`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AStructSD, o: AStructSD)`:
    ///
    ///   - returnValue: `AStructSD`
    ///
    ///   - o: `AStructSD`
    func opAStructSD(i: AStructSD, current: Ice.Current) throws -> (returnValue: AStructSD, o: AStructSD)

    ///
    /// - parameter i: `LStructSD`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LStructSD, o: LStructSD)`:
    ///
    ///   - returnValue: `LStructSD`
    ///
    ///   - o: `LStructSD`
    func opLStructSD(i: LStructSD, current: Ice.Current) throws -> (returnValue: LStructSD, o: LStructSD)

    ///
    /// - parameter i: `KStructSD`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: KStructSD, o: KStructSD)`:
    ///
    ///   - returnValue: `KStructSD`
    ///
    ///   - o: `KStructSD`
    func opKStructSD(i: KStructSD, current: Ice.Current) throws -> (returnValue: KStructSD, o: KStructSD)

    ///
    /// - parameter i: `QStructSD`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: QStructSD, o: QStructSD)`:
    ///
    ///   - returnValue: `QStructSD`
    ///
    ///   - o: `QStructSD`
    func opQStructSD(i: QStructSD, current: Ice.Current) throws -> (returnValue: QStructSD, o: QStructSD)

    ///
    /// - parameter i: `SStructSD`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SStructSD, o: SStructSD)`:
    ///
    ///   - returnValue: `SStructSD`
    ///
    ///   - o: `SStructSD`
    func opSStructSD(i: SStructSD, current: Ice.Current) throws -> (returnValue: SStructSD, o: SStructSD)

    ///
    /// - parameter i: `ACVS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ACVS, o: ACVS)`:
    ///
    ///   - returnValue: `ACVS`
    ///
    ///   - o: `ACVS`
    func opACVS(i: ACVS, current: Ice.Current) throws -> (returnValue: ACVS, o: ACVS)

    ///
    /// - parameter i: `LCVS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LCVS, o: LCVS)`:
    ///
    ///   - returnValue: `LCVS`
    ///
    ///   - o: `LCVS`
    func opLCVS(i: LCVS, current: Ice.Current) throws -> (returnValue: LCVS, o: LCVS)

    ///
    /// - parameter i: `ACRS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ACRS, o: ACRS)`:
    ///
    ///   - returnValue: `ACRS`
    ///
    ///   - o: `ACRS`
    func opACRS(i: ACRS, current: Ice.Current) throws -> (returnValue: ACRS, o: ACRS)

    ///
    /// - parameter i: `LCRS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LCRS, o: LCRS)`:
    ///
    ///   - returnValue: `LCRS`
    ///
    ///   - o: `LCRS`
    func opLCRS(i: LCRS, current: Ice.Current) throws -> (returnValue: LCRS, o: LCRS)

    ///
    /// - parameter i: `AEnS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AEnS, o: AEnS)`:
    ///
    ///   - returnValue: `AEnS`
    ///
    ///   - o: `AEnS`
    func opAEnS(i: AEnS, current: Ice.Current) throws -> (returnValue: AEnS, o: AEnS)

    ///
    /// - parameter i: `LEnS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LEnS, o: LEnS)`:
    ///
    ///   - returnValue: `LEnS`
    ///
    ///   - o: `LEnS`
    func opLEnS(i: LEnS, current: Ice.Current) throws -> (returnValue: LEnS, o: LEnS)

    ///
    /// - parameter i: `KEnS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: KEnS, o: KEnS)`:
    ///
    ///   - returnValue: `KEnS`
    ///
    ///   - o: `KEnS`
    func opKEnS(i: KEnS, current: Ice.Current) throws -> (returnValue: KEnS, o: KEnS)

    ///
    /// - parameter i: `QEnS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: QEnS, o: QEnS)`:
    ///
    ///   - returnValue: `QEnS`
    ///
    ///   - o: `QEnS`
    func opQEnS(i: QEnS, current: Ice.Current) throws -> (returnValue: QEnS, o: QEnS)

    ///
    /// - parameter i: `SEnS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SEnS, o: SEnS)`:
    ///
    ///   - returnValue: `SEnS`
    ///
    ///   - o: `SEnS`
    func opSEnS(i: SEnS, current: Ice.Current) throws -> (returnValue: SEnS, o: SEnS)

    ///
    /// - parameter i: `AIPrxS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: AIPrxS, o: AIPrxS)`:
    ///
    ///   - returnValue: `AIPrxS`
    ///
    ///   - o: `AIPrxS`
    func opAIPrxS(i: AIPrxS, current: Ice.Current) throws -> (returnValue: AIPrxS, o: AIPrxS)

    ///
    /// - parameter i: `LIPrxS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LIPrxS, o: LIPrxS)`:
    ///
    ///   - returnValue: `LIPrxS`
    ///
    ///   - o: `LIPrxS`
    func opLIPrxS(i: LIPrxS, current: Ice.Current) throws -> (returnValue: LIPrxS, o: LIPrxS)

    ///
    /// - parameter i: `KIPrxS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: KIPrxS, o: KIPrxS)`:
    ///
    ///   - returnValue: `KIPrxS`
    ///
    ///   - o: `KIPrxS`
    func opKIPrxS(i: KIPrxS, current: Ice.Current) throws -> (returnValue: KIPrxS, o: KIPrxS)

    ///
    /// - parameter i: `QIPrxS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: QIPrxS, o: QIPrxS)`:
    ///
    ///   - returnValue: `QIPrxS`
    ///
    ///   - o: `QIPrxS`
    func opQIPrxS(i: QIPrxS, current: Ice.Current) throws -> (returnValue: QIPrxS, o: QIPrxS)

    ///
    /// - parameter i: `SIPrxS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SIPrxS, o: SIPrxS)`:
    ///
    ///   - returnValue: `SIPrxS`
    ///
    ///   - o: `SIPrxS`
    func opSIPrxS(i: SIPrxS, current: Ice.Current) throws -> (returnValue: SIPrxS, o: SIPrxS)

    ///
    /// - parameter i: `CustomIntS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: CustomIntS, o: CustomIntS)`:
    ///
    ///   - returnValue: `CustomIntS`
    ///
    ///   - o: `CustomIntS`
    func opCustomIntS(i: CustomIntS, current: Ice.Current) throws -> (returnValue: CustomIntS, o: CustomIntS)

    ///
    /// - parameter i: `CustomCVS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: CustomCVS, o: CustomCVS)`:
    ///
    ///   - returnValue: `CustomCVS`
    ///
    ///   - o: `CustomCVS`
    func opCustomCVS(i: CustomCVS, current: Ice.Current) throws -> (returnValue: CustomCVS, o: CustomCVS)

    ///
    /// - parameter i: `CustomIntSS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: CustomIntSS, o: CustomIntSS)`:
    ///
    ///   - returnValue: `CustomIntSS`
    ///
    ///   - o: `CustomIntSS`
    func opCustomIntSS(i: CustomIntSS, current: Ice.Current) throws -> (returnValue: CustomIntSS, o: CustomIntSS)

    ///
    /// - parameter i: `CustomCVSS`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: CustomCVSS, o: CustomCVSS)`:
    ///
    ///   - returnValue: `CustomCVSS`
    ///
    ///   - o: `CustomCVSS`
    func opCustomCVSS(i: CustomCVSS, current: Ice.Current) throws -> (returnValue: CustomCVSS, o: CustomCVSS)
}

/// I overview.
public extension I {}

/// MyClass overview.
///
/// MyClass Methods:
///
///  - shutdown: 
///
///  - opAByteS: 
///
///  - opLByteS: 
///
///  - opKByteS: 
///
///  - opQByteS: 
///
///  - opSByteS: 
///
///  - opABoolS: 
///
///  - opLBoolS: 
///
///  - opKBoolS: 
///
///  - opQBoolS: 
///
///  - opSBoolS: 
///
///  - opAShortS: 
///
///  - opLShortS: 
///
///  - opKShortS: 
///
///  - opQShortS: 
///
///  - opSShortS: 
///
///  - opAIntS: 
///
///  - opLIntS: 
///
///  - opKIntS: 
///
///  - opQIntS: 
///
///  - opSIntS: 
///
///  - opALongS: 
///
///  - opLLongS: 
///
///  - opKLongS: 
///
///  - opQLongS: 
///
///  - opSLongS: 
///
///  - opAFloatS: 
///
///  - opLFloatS: 
///
///  - opKFloatS: 
///
///  - opQFloatS: 
///
///  - opSFloatS: 
///
///  - opADoubleS: 
///
///  - opLDoubleS: 
///
///  - opKDoubleS: 
///
///  - opQDoubleS: 
///
///  - opSDoubleS: 
///
///  - opAStringS: 
///
///  - opLStringS: 
///
///  - opKStringS: 
///
///  - opQStringS: 
///
///  - opSStringS: 
///
///  - opAObjectS: 
///
///  - opLObjectS: 
///
///  - opAObjectPrxS: 
///
///  - opLObjectPrxS: 
///
///  - opKObjectPrxS: 
///
///  - opQObjectPrxS: 
///
///  - opSObjectPrxS: 
///
///  - opAStructS: 
///
///  - opLStructS: 
///
///  - opKStructS: 
///
///  - opQStructS: 
///
///  - opSStructS: 
///
///  - opAStructSD: 
///
///  - opLStructSD: 
///
///  - opKStructSD: 
///
///  - opQStructSD: 
///
///  - opSStructSD: 
///
///  - opACVS: 
///
///  - opLCVS: 
///
///  - opACRS: 
///
///  - opLCRS: 
///
///  - opAEnS: 
///
///  - opLEnS: 
///
///  - opKEnS: 
///
///  - opQEnS: 
///
///  - opSEnS: 
///
///  - opAIPrxS: 
///
///  - opLIPrxS: 
///
///  - opKIPrxS: 
///
///  - opQIPrxS: 
///
///  - opSIPrxS: 
///
///  - opCustomIntS: 
///
///  - opCustomCVS: 
///
///  - opCustomIntSS: 
///
///  - opCustomCVSS: 
public extension MyClass {
    func _iceD_shutdown(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.shutdown(current: current)

        return inS.setResult()
    }

    func _iceD_opAByteS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: AByteS = try inS.read { istr in
            let iceP_i: AByteS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opAByteS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opLByteS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LByteS = try inS.read { istr in
            let iceP_i: LByteS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLByteS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opKByteS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: KByteS = try inS.read { istr in
            let iceP_i: KByteS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opKByteS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opQByteS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: QByteS = try inS.read { istr in
            let iceP_i: QByteS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opQByteS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opSByteS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: SByteS = try inS.read { istr in
            let iceP_i: SByteS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opSByteS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opABoolS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: ABoolS = try inS.read { istr in
            let iceP_i: ABoolS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opABoolS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opLBoolS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LBoolS = try inS.read { istr in
            let iceP_i: LBoolS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLBoolS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opKBoolS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: KBoolS = try inS.read { istr in
            let iceP_i: KBoolS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opKBoolS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opQBoolS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: QBoolS = try inS.read { istr in
            let iceP_i: QBoolS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opQBoolS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opSBoolS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: SBoolS = try inS.read { istr in
            let iceP_i: SBoolS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opSBoolS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opAShortS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: AShortS = try inS.read { istr in
            let iceP_i: AShortS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opAShortS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opLShortS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LShortS = try inS.read { istr in
            let iceP_i: LShortS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLShortS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opKShortS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: KShortS = try inS.read { istr in
            let iceP_i: KShortS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opKShortS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opQShortS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: QShortS = try inS.read { istr in
            let iceP_i: QShortS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opQShortS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opSShortS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: SShortS = try inS.read { istr in
            let iceP_i: SShortS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opSShortS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opAIntS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: AIntS = try inS.read { istr in
            let iceP_i: AIntS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opAIntS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opLIntS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LIntS = try inS.read { istr in
            let iceP_i: LIntS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLIntS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opKIntS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: KIntS = try inS.read { istr in
            let iceP_i: KIntS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opKIntS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opQIntS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: QIntS = try inS.read { istr in
            let iceP_i: QIntS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opQIntS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opSIntS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: SIntS = try inS.read { istr in
            let iceP_i: SIntS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opSIntS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opALongS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: ALongS = try inS.read { istr in
            let iceP_i: ALongS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opALongS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opLLongS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LLongS = try inS.read { istr in
            let iceP_i: LLongS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLLongS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opKLongS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: KLongS = try inS.read { istr in
            let iceP_i: KLongS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opKLongS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opQLongS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: QLongS = try inS.read { istr in
            let iceP_i: QLongS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opQLongS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opSLongS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: SLongS = try inS.read { istr in
            let iceP_i: SLongS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opSLongS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opAFloatS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: AFloatS = try inS.read { istr in
            let iceP_i: AFloatS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opAFloatS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opLFloatS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LFloatS = try inS.read { istr in
            let iceP_i: LFloatS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLFloatS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opKFloatS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: KFloatS = try inS.read { istr in
            let iceP_i: KFloatS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opKFloatS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opQFloatS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: QFloatS = try inS.read { istr in
            let iceP_i: QFloatS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opQFloatS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opSFloatS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: SFloatS = try inS.read { istr in
            let iceP_i: SFloatS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opSFloatS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opADoubleS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: ADoubleS = try inS.read { istr in
            let iceP_i: ADoubleS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opADoubleS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opLDoubleS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LDoubleS = try inS.read { istr in
            let iceP_i: LDoubleS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLDoubleS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opKDoubleS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: KDoubleS = try inS.read { istr in
            let iceP_i: KDoubleS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opKDoubleS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opQDoubleS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: QDoubleS = try inS.read { istr in
            let iceP_i: QDoubleS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opQDoubleS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opSDoubleS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: SDoubleS = try inS.read { istr in
            let iceP_i: SDoubleS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opSDoubleS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opAStringS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: AStringS = try inS.read { istr in
            let iceP_i: AStringS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opAStringS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opLStringS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LStringS = try inS.read { istr in
            let iceP_i: LStringS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLStringS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opKStringS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: KStringS = try inS.read { istr in
            let iceP_i: KStringS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opKStringS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opQStringS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: QStringS = try inS.read { istr in
            let iceP_i: QStringS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opQStringS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opSStringS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: SStringS = try inS.read { istr in
            let iceP_i: SStringS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opSStringS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opAObjectS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: AObjectS = try inS.read { istr in
            let iceP_i: AObjectS = try AObjectSHelper.read(from: istr)
            try istr.readPendingValues()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opAObjectS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            AObjectSHelper.write(to: ostr, value: iceP_o)
            AObjectSHelper.write(to: ostr, value: iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    func _iceD_opLObjectS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LObjectS = try inS.read { istr in
            let iceP_i: LObjectS = try LObjectSHelper.read(from: istr)
            try istr.readPendingValues()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLObjectS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            LObjectSHelper.write(to: ostr, value: iceP_o)
            LObjectSHelper.write(to: ostr, value: iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    func _iceD_opAObjectPrxS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: AObjectPrxS = try inS.read { istr in
            let iceP_i: AObjectPrxS = try AObjectPrxSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opAObjectPrxS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            AObjectPrxSHelper.write(to: ostr, value: iceP_o)
            AObjectPrxSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opLObjectPrxS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LObjectPrxS = try inS.read { istr in
            let iceP_i: LObjectPrxS = try LObjectPrxSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLObjectPrxS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            LObjectPrxSHelper.write(to: ostr, value: iceP_o)
            LObjectPrxSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opKObjectPrxS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: KObjectPrxS = try inS.read { istr in
            let iceP_i: KObjectPrxS = try KObjectPrxSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opKObjectPrxS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            KObjectPrxSHelper.write(to: ostr, value: iceP_o)
            KObjectPrxSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opQObjectPrxS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: QObjectPrxS = try inS.read { istr in
            let iceP_i: QObjectPrxS = try QObjectPrxSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opQObjectPrxS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            QObjectPrxSHelper.write(to: ostr, value: iceP_o)
            QObjectPrxSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opSObjectPrxS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: SObjectPrxS = try inS.read { istr in
            let iceP_i: SObjectPrxS = try SObjectPrxSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opSObjectPrxS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            SObjectPrxSHelper.write(to: ostr, value: iceP_o)
            SObjectPrxSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opAStructS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: AStructS = try inS.read { istr in
            let iceP_i: AStructS = try AStructSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opAStructS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            AStructSHelper.write(to: ostr, value: iceP_o)
            AStructSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opLStructS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LStructS = try inS.read { istr in
            let iceP_i: LStructS = try LStructSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLStructS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            LStructSHelper.write(to: ostr, value: iceP_o)
            LStructSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opKStructS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: KStructS = try inS.read { istr in
            let iceP_i: KStructS = try KStructSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opKStructS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            KStructSHelper.write(to: ostr, value: iceP_o)
            KStructSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opQStructS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: QStructS = try inS.read { istr in
            let iceP_i: QStructS = try QStructSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opQStructS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            QStructSHelper.write(to: ostr, value: iceP_o)
            QStructSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opSStructS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: SStructS = try inS.read { istr in
            let iceP_i: SStructS = try SStructSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opSStructS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            SStructSHelper.write(to: ostr, value: iceP_o)
            SStructSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opAStructSD(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: AStructSD = try inS.read { istr in
            let iceP_i: AStructSD = try AStructSDHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opAStructSD(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            AStructSDHelper.write(to: ostr, value: iceP_o)
            AStructSDHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opLStructSD(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LStructSD = try inS.read { istr in
            let iceP_i: LStructSD = try LStructSDHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLStructSD(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            LStructSDHelper.write(to: ostr, value: iceP_o)
            LStructSDHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opKStructSD(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: KStructSD = try inS.read { istr in
            let iceP_i: KStructSD = try KStructSDHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opKStructSD(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            KStructSDHelper.write(to: ostr, value: iceP_o)
            KStructSDHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opQStructSD(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: QStructSD = try inS.read { istr in
            let iceP_i: QStructSD = try QStructSDHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opQStructSD(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            QStructSDHelper.write(to: ostr, value: iceP_o)
            QStructSDHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opSStructSD(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: SStructSD = try inS.read { istr in
            let iceP_i: SStructSD = try SStructSDHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opSStructSD(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            SStructSDHelper.write(to: ostr, value: iceP_o)
            SStructSDHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opACVS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: ACVS = try inS.read { istr in
            let iceP_i: ACVS = try ACVSHelper.read(from: istr)
            try istr.readPendingValues()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opACVS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ACVSHelper.write(to: ostr, value: iceP_o)
            ACVSHelper.write(to: ostr, value: iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    func _iceD_opLCVS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LCVS = try inS.read { istr in
            let iceP_i: LCVS = try LCVSHelper.read(from: istr)
            try istr.readPendingValues()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLCVS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            LCVSHelper.write(to: ostr, value: iceP_o)
            LCVSHelper.write(to: ostr, value: iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    func _iceD_opACRS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: ACRS = try inS.read { istr in
            let iceP_i: ACRS = try ACRSHelper.read(from: istr)
            try istr.readPendingValues()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opACRS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ACRSHelper.write(to: ostr, value: iceP_o)
            ACRSHelper.write(to: ostr, value: iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    func _iceD_opLCRS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LCRS = try inS.read { istr in
            let iceP_i: LCRS = try LCRSHelper.read(from: istr)
            try istr.readPendingValues()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLCRS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            LCRSHelper.write(to: ostr, value: iceP_o)
            LCRSHelper.write(to: ostr, value: iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    func _iceD_opAEnS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: AEnS = try inS.read { istr in
            let iceP_i: AEnS = try AEnSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opAEnS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            AEnSHelper.write(to: ostr, value: iceP_o)
            AEnSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opLEnS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LEnS = try inS.read { istr in
            let iceP_i: LEnS = try LEnSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLEnS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            LEnSHelper.write(to: ostr, value: iceP_o)
            LEnSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opKEnS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: KEnS = try inS.read { istr in
            let iceP_i: KEnS = try KEnSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opKEnS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            KEnSHelper.write(to: ostr, value: iceP_o)
            KEnSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opQEnS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: QEnS = try inS.read { istr in
            let iceP_i: QEnS = try QEnSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opQEnS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            QEnSHelper.write(to: ostr, value: iceP_o)
            QEnSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opSEnS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: SEnS = try inS.read { istr in
            let iceP_i: SEnS = try SEnSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opSEnS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            SEnSHelper.write(to: ostr, value: iceP_o)
            SEnSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opAIPrxS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: AIPrxS = try inS.read { istr in
            let iceP_i: AIPrxS = try AIPrxSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opAIPrxS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            AIPrxSHelper.write(to: ostr, value: iceP_o)
            AIPrxSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opLIPrxS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: LIPrxS = try inS.read { istr in
            let iceP_i: LIPrxS = try LIPrxSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opLIPrxS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            LIPrxSHelper.write(to: ostr, value: iceP_o)
            LIPrxSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opKIPrxS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: KIPrxS = try inS.read { istr in
            let iceP_i: KIPrxS = try KIPrxSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opKIPrxS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            KIPrxSHelper.write(to: ostr, value: iceP_o)
            KIPrxSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opQIPrxS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: QIPrxS = try inS.read { istr in
            let iceP_i: QIPrxS = try QIPrxSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opQIPrxS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            QIPrxSHelper.write(to: ostr, value: iceP_o)
            QIPrxSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opSIPrxS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: SIPrxS = try inS.read { istr in
            let iceP_i: SIPrxS = try SIPrxSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opSIPrxS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            SIPrxSHelper.write(to: ostr, value: iceP_o)
            SIPrxSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opCustomIntS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: CustomIntS = try inS.read { istr in
            let iceP_i: CustomIntS = try istr.read()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opCustomIntS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_o)
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opCustomCVS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: CustomCVS = try inS.read { istr in
            let iceP_i: CustomCVS = try CustomCVSHelper.read(from: istr)
            try istr.readPendingValues()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opCustomCVS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            CustomCVSHelper.write(to: ostr, value: iceP_o)
            CustomCVSHelper.write(to: ostr, value: iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    func _iceD_opCustomIntSS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: CustomIntSS = try inS.read { istr in
            let iceP_i: CustomIntSS = try CustomIntSSHelper.read(from: istr)
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opCustomIntSS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            CustomIntSSHelper.write(to: ostr, value: iceP_o)
            CustomIntSSHelper.write(to: ostr, value: iceP_returnValue)
        }
    }

    func _iceD_opCustomCVSS(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_i: CustomCVSS = try inS.read { istr in
            let iceP_i: CustomCVSS = try CustomCVSSHelper.read(from: istr)
            try istr.readPendingValues()
            return iceP_i
        }

        let (iceP_returnValue, iceP_o) = try self.opCustomCVSS(i: iceP_i, current: current)

        return inS.setResult{ ostr in
            CustomCVSSHelper.write(to: ostr, value: iceP_o)
            CustomCVSSHelper.write(to: ostr, value: iceP_returnValue)
            ostr.writePendingValues()
        }
    }
}
