//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `User.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice class `UserInfo`.
public struct UserInfoTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::User::UserInfo"]
    public static let staticId = "::User::UserInfo"
}

/// Traits for Slice interface `Registry`.
public struct RegistryTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::User::Registry"]
    public static let staticId = "::User::Registry"
}

/// RegistryPrx overview.
///
/// RegistryPrx Methods:
///
///  - getUserInfo: 
///
///  - getUserInfoAsync: 
public protocol RegistryPrx: Ice.ObjectPrx {}

private final class RegistryPrxI: Ice.ObjectPrxI, RegistryPrx {
    public override class func ice_staticId() -> Swift.String {
        return RegistryTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `RegistryPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `RegistryPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: RegistryPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> RegistryPrx? {
    return try RegistryPrxI.checkedCast(prx: prx, facet: facet, context: context) as RegistryPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `RegistryPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `RegistryPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: RegistryPrx.Protocol, facet: Swift.String? = nil) -> RegistryPrx {
    return RegistryPrxI.uncheckedCast(prx: prx, facet: facet) as RegistryPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `RegistryPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: RegistryPrx.Protocol) -> Swift.String {
    return RegistryTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `RegistryPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `RegistryPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `RegistryPrx?` - The extracted proxy
    func read(_ type: RegistryPrx.Protocol) throws -> RegistryPrx? {
        return try read() as RegistryPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `RegistryPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `RegistryPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: RegistryPrx.Protocol) throws -> RegistryPrx? {
        return try read(tag: tag) as RegistryPrxI?
    }
}

/// RegistryPrx overview.
///
/// RegistryPrx Methods:
///
///  - getUserInfo: 
///
///  - getUserInfoAsync: 
public extension RegistryPrx {
    ///
    /// - parameter _: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `UserInfo?`
    func getUserInfo(_ iceP_id: Swift.String, context: Ice.Context? = nil) throws -> UserInfo? {
        return try _impl._invoke(operation: "getUserInfo",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_id)
                                 },
                                 read: { istr in
                                     var iceP_returnValue: UserInfo?
                                     try istr.read(UserInfo.self) { iceP_returnValue = $0 }
                                     try istr.readPendingValues()
                                     return iceP_returnValue
                                 },
                                 userException:{ ex in
                                     do  {
                                         throw ex
                                     } catch let error as Core.ArgumentException {
                                         throw error
                                     } catch is Ice.UserException {}
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<UserInfo?>` - The result of the operation
    func getUserInfoAsync(_ iceP_id: Swift.String, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<UserInfo?> {
        return _impl._invokeAsync(operation: "getUserInfo",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_id)
                                  },
                                  read: { istr in
                                      var iceP_returnValue: UserInfo?
                                      try istr.read(UserInfo.self) { iceP_returnValue = $0 }
                                      try istr.readPendingValues()
                                      return iceP_returnValue
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as Core.ArgumentException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// :nodoc:
public class UserInfo_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return UserInfo.self
    }
}

public extension Ice.ClassResolver {
    @objc static func User_UserInfo() -> Ice.ValueTypeResolver {
        return UserInfo_TypeResolver()
    }
}

open class UserInfo: Ice.Value {
    public required init() {}

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return UserInfoTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return UserInfoTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: UserInfoTraits.staticId, compactId: -1, last: true)
        ostr.endSlice()
    }
}


/// Dispatcher for `Registry` servants.
public struct RegistryDisp: Ice.Disp {
    public let servant: Registry
    private static let defaultObject = Ice.ObjectI<RegistryTraits>()

    public init(_ servant: Registry) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "getUserInfo":
            return try servant._iceD_getUserInfo(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? RegistryDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? RegistryDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? RegistryDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? RegistryDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol Registry {
    ///
    /// - parameter id: `Swift.String`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `UserInfo?`
    func getUserInfo(id: Swift.String, current: Ice.Current) throws -> UserInfo?
}

/// Registry overview.
///
/// Registry Methods:
///
///  - getUserInfo: 
public extension Registry {
    func _iceD_getUserInfo(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_id: Swift.String = try inS.read { istr in
            let iceP_id: Swift.String = try istr.read()
            return iceP_id
        }

        let iceP_returnValue = try self.getUserInfo(id: iceP_id, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }
}
