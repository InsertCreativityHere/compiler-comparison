//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServerPrivateAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// :nodoc:
public class UnknownDerived_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return UnknownDerived.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_UnknownDerived() -> Ice.UserExceptionTypeResolver {
        return UnknownDerived_TypeResolver()
    }
}

open class UnknownDerived: Base {
    public var ud: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(b: Swift.String, ud: Swift.String) {
        self.ud = ud
        super.init(b: b)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::UnknownDerived" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: UnknownDerived.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.ud)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.ud = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class UnknownIntermediate_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return UnknownIntermediate.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_UnknownIntermediate() -> Ice.UserExceptionTypeResolver {
        return UnknownIntermediate_TypeResolver()
    }
}

open class UnknownIntermediate: Base {
    public var ui: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(b: Swift.String, ui: Swift.String) {
        self.ui = ui
        super.init(b: b)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::UnknownIntermediate" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: UnknownIntermediate.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.ui)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.ui = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class UnknownMostDerived1_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return UnknownMostDerived1.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_UnknownMostDerived1() -> Ice.UserExceptionTypeResolver {
        return UnknownMostDerived1_TypeResolver()
    }
}

open class UnknownMostDerived1: KnownIntermediate {
    public var umd1: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(b: Swift.String, ki: Swift.String, umd1: Swift.String) {
        self.umd1 = umd1
        super.init(b: b, ki: ki)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::UnknownMostDerived1" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: UnknownMostDerived1.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.umd1)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.umd1 = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class UnknownMostDerived2_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return UnknownMostDerived2.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_UnknownMostDerived2() -> Ice.UserExceptionTypeResolver {
        return UnknownMostDerived2_TypeResolver()
    }
}

open class UnknownMostDerived2: UnknownIntermediate {
    public var umd2: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(b: Swift.String, ui: Swift.String, umd2: Swift.String) {
        self.umd2 = umd2
        super.init(b: b, ui: ui)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::UnknownMostDerived2" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: UnknownMostDerived2.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.umd2)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.umd2 = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}
