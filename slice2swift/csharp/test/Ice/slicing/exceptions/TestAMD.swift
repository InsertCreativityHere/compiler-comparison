//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// :nodoc:
public class Base_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return Base.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Base() -> Ice.UserExceptionTypeResolver {
        return Base_TypeResolver()
    }
}

open class Base: Ice.UserException {
    public var b: Swift.String = ""

    public required init() {}

    public init(b: Swift.String) {
        self.b = b
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::Base" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: Base.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.b)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.b = try istr.read()
        try istr.endSlice()
    }
}

/// :nodoc:
public class KnownDerived_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return KnownDerived.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_KnownDerived() -> Ice.UserExceptionTypeResolver {
        return KnownDerived_TypeResolver()
    }
}

open class KnownDerived: Base {
    public var kd: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(b: Swift.String, kd: Swift.String) {
        self.kd = kd
        super.init(b: b)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::KnownDerived" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: KnownDerived.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.kd)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.kd = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class KnownIntermediate_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return KnownIntermediate.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_KnownIntermediate() -> Ice.UserExceptionTypeResolver {
        return KnownIntermediate_TypeResolver()
    }
}

open class KnownIntermediate: Base {
    public var ki: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(b: Swift.String, ki: Swift.String) {
        self.ki = ki
        super.init(b: b)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::KnownIntermediate" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: KnownIntermediate.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.ki)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.ki = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class KnownMostDerived_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return KnownMostDerived.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_KnownMostDerived() -> Ice.UserExceptionTypeResolver {
        return KnownMostDerived_TypeResolver()
    }
}

open class KnownMostDerived: KnownIntermediate {
    public var kmd: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(b: Swift.String, ki: Swift.String, kmd: Swift.String) {
        self.kmd = kmd
        super.init(b: b, ki: ki)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::KnownMostDerived" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: KnownMostDerived.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.kmd)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.kmd = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// Traits for Slice interface`TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - baseAsBase: 
///
///  - baseAsBaseAsync: 
///
///  - unknownDerivedAsBase: 
///
///  - unknownDerivedAsBaseAsync: 
///
///  - knownDerivedAsBase: 
///
///  - knownDerivedAsBaseAsync: 
///
///  - knownDerivedAsKnownDerived: 
///
///  - knownDerivedAsKnownDerivedAsync: 
///
///  - unknownIntermediateAsBase: 
///
///  - unknownIntermediateAsBaseAsync: 
///
///  - knownIntermediateAsBase: 
///
///  - knownIntermediateAsBaseAsync: 
///
///  - knownMostDerivedAsBase: 
///
///  - knownMostDerivedAsBaseAsync: 
///
///  - knownIntermediateAsKnownIntermediate: 
///
///  - knownIntermediateAsKnownIntermediateAsync: 
///
///  - knownMostDerivedAsKnownIntermediate: 
///
///  - knownMostDerivedAsKnownIntermediateAsync: 
///
///  - knownMostDerivedAsKnownMostDerived: 
///
///  - knownMostDerivedAsKnownMostDerivedAsync: 
///
///  - unknownMostDerived1AsBase: 
///
///  - unknownMostDerived1AsBaseAsync: 
///
///  - unknownMostDerived1AsKnownIntermediate: 
///
///  - unknownMostDerived1AsKnownIntermediateAsync: 
///
///  - unknownMostDerived2AsBase: 
///
///  - unknownMostDerived2AsBaseAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol TestIntfPrx: Ice.ObjectPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestIntfPrx.Protocol) throws -> TestIntfPrx {
    try communicator.makeProxyImpl(proxyString) as TestIntfPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestIntfPrx? {
    return try TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - baseAsBase: 
///
///  - baseAsBaseAsync: 
///
///  - unknownDerivedAsBase: 
///
///  - unknownDerivedAsBaseAsync: 
///
///  - knownDerivedAsBase: 
///
///  - knownDerivedAsBaseAsync: 
///
///  - knownDerivedAsKnownDerived: 
///
///  - knownDerivedAsKnownDerivedAsync: 
///
///  - unknownIntermediateAsBase: 
///
///  - unknownIntermediateAsBaseAsync: 
///
///  - knownIntermediateAsBase: 
///
///  - knownIntermediateAsBaseAsync: 
///
///  - knownMostDerivedAsBase: 
///
///  - knownMostDerivedAsBaseAsync: 
///
///  - knownIntermediateAsKnownIntermediate: 
///
///  - knownIntermediateAsKnownIntermediateAsync: 
///
///  - knownMostDerivedAsKnownIntermediate: 
///
///  - knownMostDerivedAsKnownIntermediateAsync: 
///
///  - knownMostDerivedAsKnownMostDerived: 
///
///  - knownMostDerivedAsKnownMostDerivedAsync: 
///
///  - unknownMostDerived1AsBase: 
///
///  - unknownMostDerived1AsBaseAsync: 
///
///  - unknownMostDerived1AsKnownIntermediate: 
///
///  - unknownMostDerived1AsKnownIntermediateAsync: 
///
///  - unknownMostDerived2AsBase: 
///
///  - unknownMostDerived2AsBaseAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension TestIntfPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func baseAsBase(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "baseAsBase",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as Base {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func baseAsBaseAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "baseAsBase",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as Base {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func unknownDerivedAsBase(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "unknownDerivedAsBase",
                          mode: .Normal,
                          format: .CompactFormat,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as Base {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func unknownDerivedAsBaseAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "unknownDerivedAsBase",
                                            mode: .Normal,
                                            format: .CompactFormat,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as Base {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func knownDerivedAsBase(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "knownDerivedAsBase",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as Base {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func knownDerivedAsBaseAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "knownDerivedAsBase",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as Base {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func knownDerivedAsKnownDerived(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "knownDerivedAsKnownDerived",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as KnownDerived {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func knownDerivedAsKnownDerivedAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "knownDerivedAsKnownDerived",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as KnownDerived {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func unknownIntermediateAsBase(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "unknownIntermediateAsBase",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as Base {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func unknownIntermediateAsBaseAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "unknownIntermediateAsBase",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as Base {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func knownIntermediateAsBase(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "knownIntermediateAsBase",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as Base {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func knownIntermediateAsBaseAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "knownIntermediateAsBase",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as Base {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func knownMostDerivedAsBase(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "knownMostDerivedAsBase",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as Base {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func knownMostDerivedAsBaseAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "knownMostDerivedAsBase",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as Base {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func knownIntermediateAsKnownIntermediate(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "knownIntermediateAsKnownIntermediate",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as KnownIntermediate {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func knownIntermediateAsKnownIntermediateAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "knownIntermediateAsKnownIntermediate",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as KnownIntermediate {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func knownMostDerivedAsKnownIntermediate(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "knownMostDerivedAsKnownIntermediate",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as KnownIntermediate {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func knownMostDerivedAsKnownIntermediateAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "knownMostDerivedAsKnownIntermediate",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as KnownIntermediate {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func knownMostDerivedAsKnownMostDerived(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "knownMostDerivedAsKnownMostDerived",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as KnownMostDerived {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func knownMostDerivedAsKnownMostDerivedAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "knownMostDerivedAsKnownMostDerived",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as KnownMostDerived {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func unknownMostDerived1AsBase(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "unknownMostDerived1AsBase",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as Base {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func unknownMostDerived1AsBaseAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "unknownMostDerived1AsBase",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as Base {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func unknownMostDerived1AsKnownIntermediate(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "unknownMostDerived1AsKnownIntermediate",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as KnownIntermediate {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func unknownMostDerived1AsKnownIntermediateAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "unknownMostDerived1AsKnownIntermediate",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as KnownIntermediate {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func unknownMostDerived2AsBase(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "unknownMostDerived2AsBase",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as Base {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func unknownMostDerived2AsBaseAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "unknownMostDerived2AsBase",
                                            mode: .Normal,
                                            userException:{ ex in
                                                do  {
                                                    throw ex
                                                } catch let error as Base {
                                                    throw error
                                                } catch is Ice.UserException {}
                                            },
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "shutdown",
                                            mode: .Normal,
                                            context: context,
                                            sentOn: sentOn,
                                            sentFlags: sentFlags,
                                            sent: sent)
    }
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Dispatcher {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "baseAsBase":
            try await servant._iceD_baseAsBase(request)
        case "ice_id":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(request)
        case "knownDerivedAsBase":
            try await servant._iceD_knownDerivedAsBase(request)
        case "knownDerivedAsKnownDerived":
            try await servant._iceD_knownDerivedAsKnownDerived(request)
        case "knownIntermediateAsBase":
            try await servant._iceD_knownIntermediateAsBase(request)
        case "knownIntermediateAsKnownIntermediate":
            try await servant._iceD_knownIntermediateAsKnownIntermediate(request)
        case "knownMostDerivedAsBase":
            try await servant._iceD_knownMostDerivedAsBase(request)
        case "knownMostDerivedAsKnownIntermediate":
            try await servant._iceD_knownMostDerivedAsKnownIntermediate(request)
        case "knownMostDerivedAsKnownMostDerived":
            try await servant._iceD_knownMostDerivedAsKnownMostDerived(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        case "unknownDerivedAsBase":
            try await servant._iceD_unknownDerivedAsBase(request)
        case "unknownIntermediateAsBase":
            try await servant._iceD_unknownIntermediateAsBase(request)
        case "unknownMostDerived1AsBase":
            try await servant._iceD_unknownMostDerived1AsBase(request)
        case "unknownMostDerived1AsKnownIntermediate":
            try await servant._iceD_unknownMostDerived1AsKnownIntermediate(request)
        case "unknownMostDerived2AsBase":
            try await servant._iceD_unknownMostDerived2AsBase(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol TestIntf {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func baseAsBaseAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func unknownDerivedAsBaseAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func knownDerivedAsBaseAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func knownDerivedAsKnownDerivedAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func unknownIntermediateAsBaseAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func knownIntermediateAsBaseAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func knownMostDerivedAsBaseAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func knownIntermediateAsKnownIntermediateAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func knownMostDerivedAsKnownIntermediateAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func knownMostDerivedAsKnownMostDerivedAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func unknownMostDerived1AsBaseAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func unknownMostDerived1AsKnownIntermediateAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func unknownMostDerived2AsBaseAsync(current: Ice.Current) async throws -> Swift.Void

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func shutdownAsync(current: Ice.Current) async throws -> Swift.Void
}

/// TestIntf overview.
///
/// TestIntf Methods:
///
///  - baseAsBase: 
///
///  - unknownDerivedAsBase: 
///
///  - knownDerivedAsBase: 
///
///  - knownDerivedAsKnownDerived: 
///
///  - unknownIntermediateAsBase: 
///
///  - knownIntermediateAsBase: 
///
///  - knownMostDerivedAsBase: 
///
///  - knownIntermediateAsKnownIntermediate: 
///
///  - knownMostDerivedAsKnownIntermediate: 
///
///  - knownMostDerivedAsKnownMostDerived: 
///
///  - unknownMostDerived1AsBase: 
///
///  - unknownMostDerived1AsKnownIntermediate: 
///
///  - unknownMostDerived2AsBase: 
///
///  - shutdown: 
extension TestIntf {
    public func _iceD_baseAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.baseAsBaseAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownDerivedAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownDerivedAsBaseAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownDerivedAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownDerivedAsBaseAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownDerivedAsKnownDerived(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownDerivedAsKnownDerivedAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownIntermediateAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownIntermediateAsBaseAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownIntermediateAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownIntermediateAsBaseAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownMostDerivedAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownMostDerivedAsBaseAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownIntermediateAsKnownIntermediate(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownIntermediateAsKnownIntermediateAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownMostDerivedAsKnownIntermediate(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownMostDerivedAsKnownIntermediateAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownMostDerivedAsKnownMostDerived(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownMostDerivedAsKnownMostDerivedAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownMostDerived1AsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownMostDerived1AsBaseAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownMostDerived1AsKnownIntermediate(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownMostDerived1AsKnownIntermediateAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownMostDerived2AsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownMostDerived2AsBaseAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdownAsync(
            current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
