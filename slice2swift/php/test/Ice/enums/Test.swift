//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
public let ByteConst1: Swift.UInt8 = 10

public let ShortConst1: Swift.Int16 = 20

public let IntConst1: Swift.Int32 = 30

public let LongConst1: Swift.Int64 = 40

public let ByteConst2: Swift.UInt8 = 126

public let ShortConst2: Swift.Int16 = 32766

public let IntConst2: Swift.Int32 = 2147483647

public let LongConst2: Swift.Int64 = 2147483646


public enum ByteEnum: Swift.UInt8 {
    case benum1 = 0
    case benum2 = 1
    case benum3 = 10
    case benum4 = 11
    case benum5 = 20
    case benum6 = 21
    case benum7 = 30
    case benum8 = 31
    case benum9 = 40
    case benum10 = 41
    case benum11 = 126
    public init() {
        self = .benum1
    }
}

/// An `Ice.InputStream` extension to read `ByteEnum` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `ByteEnum` - The enumarated value.
    func read() throws -> ByteEnum {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 126)
        guard let val = ByteEnum(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ByteEnum` - The enumerated value.
    func read(tag: Swift.Int32) throws -> ByteEnum? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as ByteEnum
    }
}

/// An `Ice.OutputStream` extension to write `ByteEnum` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `ByteEnum` - The enumerator to write.
    func write(_ v: ByteEnum) {
        write(enum: v.rawValue, maxValue: 126)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `ByteEnum` - The enumerator to write.
    func write(tag: Swift.Int32, value: ByteEnum?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 126)
    }
}

public enum ShortEnum: Swift.Int32 {
    case senum1 = 3
    case senum2 = 4
    case senum3 = 10
    case senum4 = 11
    case senum5 = 20
    case senum6 = 21
    case senum7 = 30
    case senum8 = 31
    case senum9 = 40
    case senum10 = 41
    case senum11 = 32766
    public init() {
        self = .senum1
    }
}

/// An `Ice.InputStream` extension to read `ShortEnum` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `ShortEnum` - The enumarated value.
    func read() throws -> ShortEnum {
        let rawValue: Swift.Int32 = try read(enumMaxValue: 32766)
        guard let val = ShortEnum(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ShortEnum` - The enumerated value.
    func read(tag: Swift.Int32) throws -> ShortEnum? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as ShortEnum
    }
}

/// An `Ice.OutputStream` extension to write `ShortEnum` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `ShortEnum` - The enumerator to write.
    func write(_ v: ShortEnum) {
        write(enum: v.rawValue, maxValue: 32766)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `ShortEnum` - The enumerator to write.
    func write(tag: Swift.Int32, value: ShortEnum?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 32766)
    }
}

public enum IntEnum: Swift.Int32 {
    case ienum1 = 0
    case ienum2 = 1
    case ienum3 = 10
    case ienum4 = 11
    case ienum5 = 20
    case ienum6 = 21
    case ienum7 = 30
    case ienum8 = 31
    case ienum9 = 40
    case ienum10 = 41
    case ienum11 = 2147483647
    case ienum12 = 2147483646
    public init() {
        self = .ienum1
    }
}

/// An `Ice.InputStream` extension to read `IntEnum` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `IntEnum` - The enumarated value.
    func read() throws -> IntEnum {
        let rawValue: Swift.Int32 = try read(enumMaxValue: 2147483647)
        guard let val = IntEnum(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `IntEnum` - The enumerated value.
    func read(tag: Swift.Int32) throws -> IntEnum? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as IntEnum
    }
}

/// An `Ice.OutputStream` extension to write `IntEnum` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `IntEnum` - The enumerator to write.
    func write(_ v: IntEnum) {
        write(enum: v.rawValue, maxValue: 2147483647)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `IntEnum` - The enumerator to write.
    func write(tag: Swift.Int32, value: IntEnum?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 2147483647)
    }
}

public enum SimpleEnum: Swift.UInt8 {
    case red = 0
    case green = 1
    case blue = 2
    public init() {
        self = .red
    }
}

/// An `Ice.InputStream` extension to read `SimpleEnum` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `SimpleEnum` - The enumarated value.
    func read() throws -> SimpleEnum {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 2)
        guard let val = SimpleEnum(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SimpleEnum` - The enumerated value.
    func read(tag: Swift.Int32) throws -> SimpleEnum? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as SimpleEnum
    }
}

/// An `Ice.OutputStream` extension to write `SimpleEnum` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `SimpleEnum` - The enumerator to write.
    func write(_ v: SimpleEnum) {
        write(enum: v.rawValue, maxValue: 2)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `SimpleEnum` - The enumerator to write.
    func write(tag: Swift.Int32, value: SimpleEnum?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 2)
    }
}

/// Traits for Slice interface`TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

public protocol TestIntfPrx: Ice.ObjectPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestIntfPrx.Protocol) throws -> TestIntfPrx {
    try communicator.makeProxyImpl(proxyString) as TestIntfPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> TestIntfPrx? {
    return try await TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

public extension TestIntfPrx {
    func opByte(_ iceP_b1: ByteEnum, context: Ice.Context? = nil) async throws -> (returnValue: ByteEnum, b2: ByteEnum) {
        return try await _impl._invoke(operation: "opByte",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_b1)
                                       },
                                       read: { istr in
                                           let iceP_b2: ByteEnum = try istr.read()
                                           let iceP_returnValue: ByteEnum = try istr.read()
                                           return (iceP_returnValue, iceP_b2)
                                       },
                                       context: context)
    }

    func opShort(_ iceP_s1: ShortEnum, context: Ice.Context? = nil) async throws -> (returnValue: ShortEnum, s2: ShortEnum) {
        return try await _impl._invoke(operation: "opShort",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_s1)
                                       },
                                       read: { istr in
                                           let iceP_s2: ShortEnum = try istr.read()
                                           let iceP_returnValue: ShortEnum = try istr.read()
                                           return (iceP_returnValue, iceP_s2)
                                       },
                                       context: context)
    }

    func opInt(_ iceP_i1: IntEnum, context: Ice.Context? = nil) async throws -> (returnValue: IntEnum, i2: IntEnum) {
        return try await _impl._invoke(operation: "opInt",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_i1)
                                       },
                                       read: { istr in
                                           let iceP_i2: IntEnum = try istr.read()
                                           let iceP_returnValue: IntEnum = try istr.read()
                                           return (iceP_returnValue, iceP_i2)
                                       },
                                       context: context)
    }

    func opSimple(_ iceP_s1: SimpleEnum, context: Ice.Context? = nil) async throws -> (returnValue: SimpleEnum, s2: SimpleEnum) {
        return try await _impl._invoke(operation: "opSimple",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_s1)
                                       },
                                       read: { istr in
                                           let iceP_s2: SimpleEnum = try istr.read()
                                           let iceP_returnValue: SimpleEnum = try istr.read()
                                           return (iceP_returnValue, iceP_s2)
                                       },
                                       context: context)
    }

    func shutdown(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "shutdown",
                                       mode: .Normal,
                                       context: context)
    }
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Dispatcher {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(request)
        case "opByte":
            try await servant._iceD_opByte(request)
        case "opInt":
            try await servant._iceD_opInt(request)
        case "opShort":
            try await servant._iceD_opShort(request)
        case "opSimple":
            try await servant._iceD_opSimple(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol TestIntf {
    func opByte(b1: ByteEnum, current: Ice.Current) async throws -> (returnValue: ByteEnum, b2: ByteEnum)

    func opShort(s1: ShortEnum, current: Ice.Current) async throws -> (returnValue: ShortEnum, s2: ShortEnum)

    func opInt(i1: IntEnum, current: Ice.Current) async throws -> (returnValue: IntEnum, i2: IntEnum)

    func opSimple(s1: SimpleEnum, current: Ice.Current) async throws -> (returnValue: SimpleEnum, s2: SimpleEnum)

    func shutdown(current: Ice.Current) async throws
}

extension TestIntf {
    public func _iceD_opByte(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_b1: ByteEnum = try istr.read()
        let result = try await self.opByte(b1: iceP_b1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_b2) = value
            ostr.write(iceP_b2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opShort(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_s1: ShortEnum = try istr.read()
        let result = try await self.opShort(s1: iceP_s1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_s2) = value
            ostr.write(iceP_s2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opInt(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_i1: IntEnum = try istr.read()
        let result = try await self.opInt(i1: iceP_i1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_i2) = value
            ostr.write(iceP_i2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opSimple(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_s1: SimpleEnum = try istr.read()
        let result = try await self.opSimple(s1: iceP_s1, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_s2) = value
            ostr.write(iceP_s2)
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
