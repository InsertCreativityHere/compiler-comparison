//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice class `D`.
public struct DTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::A", "::Test::B", "::Test::D"]
    public static let staticId = "::Test::D"
}

/// Traits for Slice interface `Initial2`.
public struct Initial2Traits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Initial2"]
    public static let staticId = "::Test::Initial2"
}

/// Initial2Prx overview.
///
/// Initial2Prx Methods:
///
///  - opClassAndUnknownOptional: 
///
///  - opClassAndUnknownOptionalAsync: 
///
///  - opVoid: 
///
///  - opVoidAsync: 
public protocol Initial2Prx: Ice.ObjectPrx {}

private final class Initial2PrxI: Ice.ObjectPrxI, Initial2Prx {
    public override class func ice_staticId() -> Swift.String {
        return Initial2Traits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `Initial2Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `Initial2Prx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: Initial2Prx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> Initial2Prx? {
    return try Initial2PrxI.checkedCast(prx: prx, facet: facet, context: context) as Initial2PrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `Initial2Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `Initial2Prx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: Initial2Prx.Protocol, facet: Swift.String? = nil) -> Initial2Prx {
    return Initial2PrxI.uncheckedCast(prx: prx, facet: facet) as Initial2PrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `Initial2Prx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: Initial2Prx.Protocol) -> Swift.String {
    return Initial2Traits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `Initial2Prx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `Initial2Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `Initial2Prx?` - The extracted proxy
    func read(_ type: Initial2Prx.Protocol) throws -> Initial2Prx? {
        return try read() as Initial2PrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `Initial2Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `Initial2Prx` - The extracted proxy.
    func read(tag: Swift.Int32, type: Initial2Prx.Protocol) throws -> Initial2Prx? {
        return try read(tag: tag) as Initial2PrxI?
    }
}

/// Initial2Prx overview.
///
/// Initial2Prx Methods:
///
///  - opClassAndUnknownOptional: 
///
///  - opClassAndUnknownOptionalAsync: 
///
///  - opVoid: 
///
///  - opVoidAsync: 
public extension Initial2Prx {
    ///
    /// - parameter p: `A?`
    ///
    /// - parameter o: `Ice.Value?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func opClassAndUnknownOptional(p iceP_p: A?, o iceP_o: Ice.Value? = nil, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "opClassAndUnknownOptional",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_p)
                              ostr.write(tag: 1, value: iceP_o)
                              ostr.writePendingValues()
                          },
                          context: context)
    }

    ///
    /// - parameter p: `A?`
    ///
    /// - parameter o: `Ice.Value?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func opClassAndUnknownOptionalAsync(p iceP_p: A?, o iceP_o: Ice.Value? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "opClassAndUnknownOptional",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                      ostr.write(tag: 1, value: iceP_o)
                                      ostr.writePendingValues()
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter a: `Swift.Int32?`
    ///
    /// - parameter v: `Swift.String?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func opVoid(a iceP_a: Swift.Int32? = nil, v iceP_v: Swift.String? = nil, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "opVoid",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(tag: 1, value: iceP_a)
                              ostr.write(tag: 2, value: iceP_v)
                          },
                          context: context)
    }

    ///
    /// - parameter a: `Swift.Int32?`
    ///
    /// - parameter v: `Swift.String?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func opVoidAsync(a iceP_a: Swift.Int32? = nil, v iceP_v: Swift.String? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "opVoid",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 1, value: iceP_a)
                                      ostr.write(tag: 2, value: iceP_v)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// :nodoc:
public class D_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return D.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_D() -> Ice.ValueTypeResolver {
        return D_TypeResolver()
    }
}

open class D: B {
    public var ds: Swift.String = ""
    public var seq: StringSeq? = nil
    public var ao: A? = nil

    public required init() {
        super.init()
    }

    public init(requiredA: Swift.Int32, ma: Swift.Int32?, mb: Swift.Int32?, mc: Swift.Int32?, requiredB: Swift.Int32, md: Swift.Int32?, ds: Swift.String, seq: StringSeq?, ao: A?) {
        self.ds = ds
        self.seq = seq
        self.ao = ao
        super.init(requiredA: requiredA, ma: ma, mb: mb, mc: mc, requiredB: requiredB, md: md)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return DTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return DTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.ds = try istr.read()
        self.seq = try istr.read(tag: 990)
        try istr.read(tag: 1000, value: A.self) { self.ao = $0 }
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: DTraits.staticId, compactId: -1, last: false)
        ostr.write(self.ds)
        ostr.write(tag: 990, value: self.seq)
        ostr.write(tag: 1000, value: self.ao)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}


/// Dispatcher for `Initial2` servants.
public struct Initial2Disp: Ice.Disp {
    public let servant: Initial2
    private static let defaultObject = Ice.ObjectI<Initial2Traits>()

    public init(_ servant: Initial2) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "ice_id":
            return try (servant as? Object ?? Initial2Disp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? Initial2Disp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? Initial2Disp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? Initial2Disp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "opClassAndUnknownOptional":
            return try servant._iceD_opClassAndUnknownOptional(incoming: request, current: current)
        case "opVoid":
            return try servant._iceD_opVoid(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol Initial2 {
    ///
    /// - parameter p: `A?`
    ///
    /// - parameter o: `Ice.Value?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func opClassAndUnknownOptional(p: A?, o: Ice.Value?, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32?`
    ///
    /// - parameter v: `Swift.String?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func opVoid(a: Swift.Int32?, v: Swift.String?, current: Ice.Current) throws
}

/// Initial2 overview.
///
/// Initial2 Methods:
///
///  - opClassAndUnknownOptional: 
///
///  - opVoid: 
public extension Initial2 {
    func _iceD_opClassAndUnknownOptional(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_p, iceP_o): (A?, Ice.Value?) = try inS.read { istr in
            var iceP_p: A?
            try istr.read(A.self) { iceP_p = $0 }
            var iceP_o: Ice.Value?
            try istr.read(tag: 1) { iceP_o = $0 }
            try istr.readPendingValues()
            return (iceP_p, iceP_o)
        }

        try self.opClassAndUnknownOptional(p: iceP_p, o: iceP_o, current: current)

        return inS.setResult()
    }

    func _iceD_opVoid(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_a, iceP_v): (Swift.Int32?, Swift.String?) = try inS.read { istr in
            let iceP_a: Swift.Int32? = try istr.read(tag: 1)
            let iceP_v: Swift.String? = try istr.read(tag: 2)
            return (iceP_a, iceP_v)
        }

        try self.opVoid(a: iceP_a, v: iceP_v, current: current)

        return inS.setResult()
    }
}
