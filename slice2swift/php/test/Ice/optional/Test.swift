//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice class `OneOptional`.
public struct OneOptionalTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::OneOptional"]
    public static let staticId = "::Test::OneOptional"
}

public enum MyEnum: Swift.UInt8 {
    /// MyEnumMember
    case MyEnumMember = 0
    public init() {
        self = .MyEnumMember
    }
}

/// An `Ice.InputStream` extension to read `MyEnum` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `MyEnum` - The enumarated value.
    func read() throws -> MyEnum {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 0)
        guard let val = MyEnum(rawValue: rawValue) else {
            throw Ice.MarshalException(reason: "invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `MyEnum` - The enumerated value.
    func read(tag: Swift.Int32) throws -> MyEnum? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as MyEnum
    }
}

/// An `Ice.OutputStream` extension to write `MyEnum` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `MyEnum` - The enumerator to write.
    func write(_ v: MyEnum) {
        write(enum: v.rawValue, maxValue: 0)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `MyEnum` - The enumerator to write.
    func write(tag: Swift.Int32, value: MyEnum?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 0)
    }
}

public struct SmallStruct: Swift.Hashable {
    public var m: Swift.UInt8 = 0

    public init() {}

    public init(m: Swift.UInt8) {
        self.m = m
    }
}

/// An `Ice.InputStream` extension to read `SmallStruct` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `SmallStruct` structured value from the stream.
    ///
    /// - returns: `SmallStruct` - The structured value read from the stream.
    func read() throws -> SmallStruct {
        var v = SmallStruct()
        v.m = try self.read()
        return v
    }

    /// Read an optional `SmallStruct?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SmallStruct?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> SmallStruct? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as SmallStruct
    }
}

/// An `Ice.OutputStream` extension to write `SmallStruct` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `SmallStruct` structured value to the stream.
    ///
    /// - parameter _: `SmallStruct` - The value to write to the stream.
    func write(_ v: SmallStruct) {
        self.write(v.m)
    }

    /// Write an optional `SmallStruct?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SmallStruct?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: SmallStruct?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 1)
                write(v)
            }
        }
    }
}

public struct FixedStruct: Swift.Hashable {
    public var m: Swift.Int32 = 0

    public init() {}

    public init(m: Swift.Int32) {
        self.m = m
    }
}

/// An `Ice.InputStream` extension to read `FixedStruct` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `FixedStruct` structured value from the stream.
    ///
    /// - returns: `FixedStruct` - The structured value read from the stream.
    func read() throws -> FixedStruct {
        var v = FixedStruct()
        v.m = try self.read()
        return v
    }

    /// Read an optional `FixedStruct?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `FixedStruct?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> FixedStruct? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as FixedStruct
    }
}

/// An `Ice.OutputStream` extension to write `FixedStruct` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `FixedStruct` structured value to the stream.
    ///
    /// - parameter _: `FixedStruct` - The value to write to the stream.
    func write(_ v: FixedStruct) {
        self.write(v.m)
    }

    /// Write an optional `FixedStruct?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `FixedStruct?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: FixedStruct?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 4)
                write(v)
            }
        }
    }
}

public struct VarStruct: Swift.Hashable {
    public var m: Swift.String = ""

    public init() {}

    public init(m: Swift.String) {
        self.m = m
    }
}

/// An `Ice.InputStream` extension to read `VarStruct` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `VarStruct` structured value from the stream.
    ///
    /// - returns: `VarStruct` - The structured value read from the stream.
    func read() throws -> VarStruct {
        var v = VarStruct()
        v.m = try self.read()
        return v
    }

    /// Read an optional `VarStruct?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `VarStruct?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> VarStruct? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as VarStruct
    }
}

/// An `Ice.OutputStream` extension to write `VarStruct` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `VarStruct` structured value to the stream.
    ///
    /// - parameter _: `VarStruct` - The value to write to the stream.
    func write(_ v: VarStruct) {
        self.write(v.m)
    }

    /// Write an optional `VarStruct?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `VarStruct?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: VarStruct?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

public struct ClassVarStruct: Swift.Hashable {
    public var a: Swift.Int32 = 0

    public init() {}

    public init(a: Swift.Int32) {
        self.a = a
    }
}

/// An `Ice.InputStream` extension to read `ClassVarStruct` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `ClassVarStruct` structured value from the stream.
    ///
    /// - returns: `ClassVarStruct` - The structured value read from the stream.
    func read() throws -> ClassVarStruct {
        var v = ClassVarStruct()
        v.a = try self.read()
        return v
    }

    /// Read an optional `ClassVarStruct?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ClassVarStruct?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> ClassVarStruct? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as ClassVarStruct
    }
}

/// An `Ice.OutputStream` extension to write `ClassVarStruct` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `ClassVarStruct` structured value to the stream.
    ///
    /// - parameter _: `ClassVarStruct` - The value to write to the stream.
    func write(_ v: ClassVarStruct) {
        self.write(v.a)
    }

    /// Write an optional `ClassVarStruct?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ClassVarStruct?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: ClassVarStruct?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 4)
                write(v)
            }
        }
    }
}

public typealias ByteSeq = Foundation.Data

public typealias BoolSeq = [Swift.Bool]

public typealias ShortSeq = [Swift.Int16]

public typealias IntSeq = [Swift.Int32]

public typealias LongSeq = [Swift.Int64]

public typealias FloatSeq = [Swift.Float]

public typealias DoubleSeq = [Swift.Double]

public typealias StringSeq = [Swift.String]

public typealias MyEnumSeq = [MyEnum]

/// Helper class to read and write `MyEnumSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct MyEnumSeqHelper {
    /// Read a `MyEnumSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `MyEnumSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> MyEnumSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = MyEnumSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: MyEnum = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `MyEnumSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `MyEnumSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> MyEnumSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `MyEnumSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `MyEnumSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: MyEnumSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `MyEnumSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `MyEnumSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: MyEnumSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias SmallStructSeq = [SmallStruct]

/// Helper class to read and write `SmallStructSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SmallStructSeqHelper {
    /// Read a `SmallStructSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `SmallStructSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SmallStructSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = SmallStructSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: SmallStruct = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `SmallStructSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SmallStructSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SmallStructSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        return try read(from: istr)
    }

    /// Wite a `SmallStructSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `SmallStructSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SmallStructSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `SmallStructSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SmallStructSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: SmallStructSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .VSize) {
            write(to: ostr, value: val)
        }
    }
}

public typealias SmallStructList = [SmallStruct]

/// Helper class to read and write `SmallStructList` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SmallStructListHelper {
    /// Read a `SmallStructList` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `SmallStructList` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SmallStructList {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = SmallStructList()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: SmallStruct = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `SmallStructList?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SmallStructList` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SmallStructList? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        return try read(from: istr)
    }

    /// Wite a `SmallStructList` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `SmallStructList` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SmallStructList) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `SmallStructList?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SmallStructList` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: SmallStructList?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .VSize) {
            write(to: ostr, value: val)
        }
    }
}

public typealias FixedStructSeq = [FixedStruct]

/// Helper class to read and write `FixedStructSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct FixedStructSeqHelper {
    /// Read a `FixedStructSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `FixedStructSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> FixedStructSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = FixedStructSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: FixedStruct = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `FixedStructSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `FixedStructSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> FixedStructSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `FixedStructSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `FixedStructSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: FixedStructSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `FixedStructSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `FixedStructSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: FixedStructSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias FixedStructList = [FixedStruct]

/// Helper class to read and write `FixedStructList` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct FixedStructListHelper {
    /// Read a `FixedStructList` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `FixedStructList` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> FixedStructList {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = FixedStructList()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: FixedStruct = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `FixedStructList?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `FixedStructList` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> FixedStructList? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `FixedStructList` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `FixedStructList` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: FixedStructList) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `FixedStructList?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `FixedStructList` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: FixedStructList?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias VarStructSeq = [VarStruct]

/// Helper class to read and write `VarStructSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct VarStructSeqHelper {
    /// Read a `VarStructSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `VarStructSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> VarStructSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = VarStructSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: VarStruct = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `VarStructSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `VarStructSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> VarStructSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `VarStructSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `VarStructSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: VarStructSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `VarStructSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `VarStructSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: VarStructSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias OneOptionalSeq = [OneOptional?]

/// Helper class to read and write `OneOptionalSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct OneOptionalSeqHelper {
    /// Read a `OneOptionalSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `OneOptionalSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> OneOptionalSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = OneOptionalSeq(repeating: nil, count: sz)
        for i in 0 ..< sz {
            try Swift.withUnsafeMutablePointer(to: &v[i]) { p in
                try istr.read(OneOptional.self) { p.pointee = $0 }
            }
        }
        return v
    }
    /// Read an optional `OneOptionalSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `OneOptionalSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> OneOptionalSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `OneOptionalSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `OneOptionalSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: OneOptionalSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `OneOptionalSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `OneOptionalSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: OneOptionalSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias OneOptionalPrxSeq = [Ice.ObjectPrx?]

/// Helper class to read and write `OneOptionalPrxSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct OneOptionalPrxSeqHelper {
    /// Read a `OneOptionalPrxSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `OneOptionalPrxSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> OneOptionalPrxSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 2)
        var v = OneOptionalPrxSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: Ice.ObjectPrx? = try istr.read(Ice.ObjectPrx.self)
            v.append(j)
        }
        return v
    }
    /// Read an optional `OneOptionalPrxSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `OneOptionalPrxSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> OneOptionalPrxSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `OneOptionalPrxSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `OneOptionalPrxSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: OneOptionalPrxSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `OneOptionalPrxSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `OneOptionalPrxSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: OneOptionalPrxSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias Serializable = Foundation.Data

public typealias IntIntDict = [Swift.Int32: Swift.Int32]

/// Helper class to read and write `IntIntDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct IntIntDictHelper {
    /// Read a `IntIntDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `IntIntDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> IntIntDict {
        let sz = try Swift.Int(istr.readSize())
        var v = IntIntDict()
        for _ in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            let value: Swift.Int32 = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `IntIntDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `IntIntDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> IntIntDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `IntIntDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `IntIntDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: IntIntDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `IntIntDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `IntIntDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: IntIntDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 8) {
            write(to: ostr, value: val)
        }
    }
}

public typealias StringIntDict = [Swift.String: Swift.Int32]

/// Helper class to read and write `StringIntDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct StringIntDictHelper {
    /// Read a `StringIntDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `StringIntDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> StringIntDict {
        let sz = try Swift.Int(istr.readSize())
        var v = StringIntDict()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: Swift.Int32 = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `StringIntDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `StringIntDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> StringIntDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `StringIntDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `StringIntDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: StringIntDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `StringIntDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `StringIntDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: StringIntDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias IntEnumDict = [Swift.Int32: MyEnum]

/// Helper class to read and write `IntEnumDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct IntEnumDictHelper {
    /// Read a `IntEnumDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `IntEnumDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> IntEnumDict {
        let sz = try Swift.Int(istr.readSize())
        var v = IntEnumDict()
        for _ in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            let value: MyEnum = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `IntEnumDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `IntEnumDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> IntEnumDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `IntEnumDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `IntEnumDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: IntEnumDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `IntEnumDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `IntEnumDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: IntEnumDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias IntFixedStructDict = [Swift.Int32: FixedStruct]

/// Helper class to read and write `IntFixedStructDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct IntFixedStructDictHelper {
    /// Read a `IntFixedStructDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `IntFixedStructDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> IntFixedStructDict {
        let sz = try Swift.Int(istr.readSize())
        var v = IntFixedStructDict()
        for _ in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            let value: FixedStruct = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `IntFixedStructDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `IntFixedStructDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> IntFixedStructDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a `IntFixedStructDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `IntFixedStructDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: IntFixedStructDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `IntFixedStructDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `IntFixedStructDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: IntFixedStructDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 8) {
            write(to: ostr, value: val)
        }
    }
}

public typealias IntVarStructDict = [Swift.Int32: VarStruct]

/// Helper class to read and write `IntVarStructDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct IntVarStructDictHelper {
    /// Read a `IntVarStructDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `IntVarStructDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> IntVarStructDict {
        let sz = try Swift.Int(istr.readSize())
        var v = IntVarStructDict()
        for _ in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            let value: VarStruct = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `IntVarStructDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `IntVarStructDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> IntVarStructDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `IntVarStructDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `IntVarStructDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: IntVarStructDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `IntVarStructDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `IntVarStructDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: IntVarStructDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias IntOneOptionalDict = [Swift.Int32: OneOptional?]

/// Helper class to read and write `IntOneOptionalDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct IntOneOptionalDictHelper {
    /// Read a `IntOneOptionalDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `IntOneOptionalDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> IntOneOptionalDict {
        let sz = try Swift.Int(istr.readSize())
        var v = IntOneOptionalDict()
        let e = Ice.DictEntryArray<Swift.Int32, OneOptional?>(size: sz)
        for i in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            v[key] = nil as OneOptional?
            Swift.withUnsafeMutablePointer(to: &v[key, default:nil]) {
                e.values[i] = Ice.DictEntry<Swift.Int32, OneOptional?>(key: key, value: $0)
            }
            try istr.read(OneOptional.self) { e.values[i].value.pointee = $0 }
        }
        for i in 0..<sz {
            Swift.withUnsafeMutablePointer(to: &v[e.values[i].key, default:nil]) {
                e.values[i].value = $0
            }
        }
        return v
    }
    /// Read an optional `IntOneOptionalDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `IntOneOptionalDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> IntOneOptionalDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `IntOneOptionalDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `IntOneOptionalDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: IntOneOptionalDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `IntOneOptionalDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `IntOneOptionalDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: IntOneOptionalDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias IntOneOptionalPrxDict = [Swift.Int32: Ice.ObjectPrx?]

/// Helper class to read and write `IntOneOptionalPrxDict` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct IntOneOptionalPrxDictHelper {
    /// Read a `IntOneOptionalPrxDict` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `IntOneOptionalPrxDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> IntOneOptionalPrxDict {
        let sz = try Swift.Int(istr.readSize())
        var v = IntOneOptionalPrxDict()
        for _ in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            let value: Ice.ObjectPrx? = try istr.read(Ice.ObjectPrx.self)
            v[key] = value
        }
        return v
    }
    /// Read an optional `IntOneOptionalPrxDict?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `IntOneOptionalPrxDict` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> IntOneOptionalPrxDict? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `IntOneOptionalPrxDict` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `IntOneOptionalPrxDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: IntOneOptionalPrxDict) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `IntOneOptionalPrxDict?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `IntOneOptionalPrxDict` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: IntOneOptionalPrxDict?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice class `MultiOptional`.
public struct MultiOptionalTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MultiOptional"]
    public static let staticId = "::Test::MultiOptional"
}

/// Traits for Slice class `A`.
public struct ATraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::A"]
    public static let staticId = "::Test::A"
}

/// Traits for Slice class `B`.
public struct BTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::A", "::Test::B"]
    public static let staticId = "::Test::B"
}

/// Traits for Slice class `C`.
public struct CTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::A", "::Test::B", "::Test::C"]
    public static let staticId = "::Test::C"
}

/// Traits for Slice class `WD`.
public struct WDTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::WD"]
    public static let staticId = "::Test::WD"
}

/// :nodoc:
public class OptionalException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return OptionalException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_OptionalException() -> Ice.UserExceptionTypeResolver {
        return OptionalException_TypeResolver()
    }
}

open class OptionalException: Ice.UserException {
    public var req: Swift.Bool = false
    public var a: Swift.Int32? = 5
    public var b: Swift.String? = nil
    public var o: OneOptional? = nil

    public required init() {}

    public init(req: Swift.Bool, a: Swift.Int32?, b: Swift.String?, o: OneOptional?) {
        self.req = req
        self.a = a
        self.b = b
        self.o = o
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::OptionalException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: OptionalException.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.req)
        ostr.write(tag: 1, value: self.a)
        ostr.write(tag: 2, value: self.b)
        ostr.write(tag: 50, value: self.o)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.req = try istr.read()
        self.a = try istr.read(tag: 1)
        self.b = try istr.read(tag: 2)
        try istr.read(tag: 50, value: OneOptional.self) { self.o = $0 }
        try istr.endSlice()
    }
}

/// :nodoc:
public class DerivedException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return DerivedException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_DerivedException() -> Ice.UserExceptionTypeResolver {
        return DerivedException_TypeResolver()
    }
}

open class DerivedException: OptionalException {
    public var d1: Swift.String = ""
    public var ss: Swift.String? = "test"
    public var o2: OneOptional? = nil
    public var d2: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(req: Swift.Bool, a: Swift.Int32?, b: Swift.String?, o: OneOptional?, d1: Swift.String, ss: Swift.String?, o2: OneOptional?, d2: Swift.String) {
        self.d1 = d1
        self.ss = ss
        self.o2 = o2
        self.d2 = d2
        super.init(req: req, a: a, b: b, o: o)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::DerivedException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: DerivedException.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.d1)
        ostr.write(self.d2)
        ostr.write(tag: 600, value: self.ss)
        ostr.write(tag: 601, value: self.o2)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.d1 = try istr.read()
        self.d2 = try istr.read()
        self.ss = try istr.read(tag: 600)
        try istr.read(tag: 601, value: OneOptional.self) { self.o2 = $0 }
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class RequiredException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return RequiredException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_RequiredException() -> Ice.UserExceptionTypeResolver {
        return RequiredException_TypeResolver()
    }
}

open class RequiredException: OptionalException {
    public var ss: Swift.String = "test"
    public var o2: OneOptional? = nil

    public required init() {
        super.init()
    }

    public init(req: Swift.Bool, a: Swift.Int32?, b: Swift.String?, o: OneOptional?, ss: Swift.String, o2: OneOptional?) {
        self.ss = ss
        self.o2 = o2
        super.init(req: req, a: a, b: b, o: o)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::RequiredException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: RequiredException.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.ss)
        ostr.write(self.o2)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.ss = try istr.read()
        try istr.read(OneOptional.self) { self.o2 = $0 }
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _usesClasses() -> Swift.Bool {
        return true
    }
}

/// Traits for Slice class `OptionalWithCustom`.
public struct OptionalWithCustomTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::OptionalWithCustom"]
    public static let staticId = "::Test::OptionalWithCustom"
}

/// Traits for Slice class `E`.
public struct ETraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::E"]
    public static let staticId = "::Test::E"
}

/// Traits for Slice class `F`.
public struct FTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::E", "::Test::F"]
    public static let staticId = "::Test::F"
}

/// Traits for Slice class `G1`.
public struct G1Traits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::G1"]
    public static let staticId = "::Test::G1"
}

/// Traits for Slice class `G2`.
public struct G2Traits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::G2"]
    public static let staticId = "::Test::G2"
}

/// Traits for Slice class `G`.
public struct GTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::G"]
    public static let staticId = "::Test::G"
}

/// Traits for Slice interface `Initial`.
public struct InitialTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Initial"]
    public static let staticId = "::Test::Initial"
}

/// InitialPrx overview.
///
/// InitialPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - pingPong: 
///
///  - pingPongAsync: 
///
///  - opOptionalException: 
///
///  - opOptionalExceptionAsync: 
///
///  - opDerivedException: 
///
///  - opDerivedExceptionAsync: 
///
///  - opRequiredException: 
///
///  - opRequiredExceptionAsync: 
///
///  - opByte: 
///
///  - opByteAsync: 
///
///  - opBool: 
///
///  - opBoolAsync: 
///
///  - opShort: 
///
///  - opShortAsync: 
///
///  - opInt: 
///
///  - opIntAsync: 
///
///  - opLong: 
///
///  - opLongAsync: 
///
///  - opFloat: 
///
///  - opFloatAsync: 
///
///  - opDouble: 
///
///  - opDoubleAsync: 
///
///  - opString: 
///
///  - opStringAsync: 
///
///  - opMyEnum: 
///
///  - opMyEnumAsync: 
///
///  - opSmallStruct: 
///
///  - opSmallStructAsync: 
///
///  - opFixedStruct: 
///
///  - opFixedStructAsync: 
///
///  - opVarStruct: 
///
///  - opVarStructAsync: 
///
///  - opOneOptional: 
///
///  - opOneOptionalAsync: 
///
///  - opOneOptionalProxy: 
///
///  - opOneOptionalProxyAsync: 
///
///  - opByteSeq: 
///
///  - opByteSeqAsync: 
///
///  - opBoolSeq: 
///
///  - opBoolSeqAsync: 
///
///  - opShortSeq: 
///
///  - opShortSeqAsync: 
///
///  - opIntSeq: 
///
///  - opIntSeqAsync: 
///
///  - opLongSeq: 
///
///  - opLongSeqAsync: 
///
///  - opFloatSeq: 
///
///  - opFloatSeqAsync: 
///
///  - opDoubleSeq: 
///
///  - opDoubleSeqAsync: 
///
///  - opStringSeq: 
///
///  - opStringSeqAsync: 
///
///  - opSmallStructSeq: 
///
///  - opSmallStructSeqAsync: 
///
///  - opSmallStructList: 
///
///  - opSmallStructListAsync: 
///
///  - opFixedStructSeq: 
///
///  - opFixedStructSeqAsync: 
///
///  - opFixedStructList: 
///
///  - opFixedStructListAsync: 
///
///  - opVarStructSeq: 
///
///  - opVarStructSeqAsync: 
///
///  - opSerializable: 
///
///  - opSerializableAsync: 
///
///  - opIntIntDict: 
///
///  - opIntIntDictAsync: 
///
///  - opStringIntDict: 
///
///  - opStringIntDictAsync: 
///
///  - opIntOneOptionalDict: 
///
///  - opIntOneOptionalDictAsync: 
///
///  - opClassAndUnknownOptional: 
///
///  - opClassAndUnknownOptionalAsync: 
///
///  - sendOptionalClass: 
///
///  - sendOptionalClassAsync: 
///
///  - returnOptionalClass: 
///
///  - returnOptionalClassAsync: 
///
///  - opG: 
///
///  - opGAsync: 
///
///  - opMStruct1: 
///
///  - opMStruct1Async: 
///
///  - opMStruct2: 
///
///  - opMStruct2Async: 
///
///  - opMSeq1: 
///
///  - opMSeq1Async: 
///
///  - opMSeq2: 
///
///  - opMSeq2Async: 
///
///  - opMDict1: 
///
///  - opMDict1Async: 
///
///  - opMDict2: 
///
///  - opMDict2Async: 
///
///  - opMG1: 
///
///  - opMG1Async: 
///
///  - opMG2: 
///
///  - opMG2Async: 
///
///  - supportsRequiredParams: 
///
///  - supportsRequiredParamsAsync: 
///
///  - supportsJavaSerializable: 
///
///  - supportsJavaSerializableAsync: 
///
///  - supportsCsharpSerializable: 
///
///  - supportsCsharpSerializableAsync: 
///
///  - supportsCppStringView: 
///
///  - supportsCppStringViewAsync: 
///
///  - supportsNullOptional: 
///
///  - supportsNullOptionalAsync: 
public protocol InitialPrx: Ice.ObjectPrx {}

private final class InitialPrxI: Ice.ObjectPrxI, InitialPrx {
    public override class func ice_staticId() -> Swift.String {
        return InitialTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `InitialPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `InitialPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: InitialPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> InitialPrx? {
    return try InitialPrxI.checkedCast(prx: prx, facet: facet, context: context) as InitialPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `InitialPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `InitialPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: InitialPrx.Protocol, facet: Swift.String? = nil) -> InitialPrx {
    return InitialPrxI.uncheckedCast(prx: prx, facet: facet) as InitialPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `InitialPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: InitialPrx.Protocol) -> Swift.String {
    return InitialTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `InitialPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `InitialPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `InitialPrx?` - The extracted proxy
    func read(_ type: InitialPrx.Protocol) throws -> InitialPrx? {
        return try read() as InitialPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `InitialPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `InitialPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: InitialPrx.Protocol) throws -> InitialPrx? {
        return try read(tag: tag) as InitialPrxI?
    }
}

/// InitialPrx overview.
///
/// InitialPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - pingPong: 
///
///  - pingPongAsync: 
///
///  - opOptionalException: 
///
///  - opOptionalExceptionAsync: 
///
///  - opDerivedException: 
///
///  - opDerivedExceptionAsync: 
///
///  - opRequiredException: 
///
///  - opRequiredExceptionAsync: 
///
///  - opByte: 
///
///  - opByteAsync: 
///
///  - opBool: 
///
///  - opBoolAsync: 
///
///  - opShort: 
///
///  - opShortAsync: 
///
///  - opInt: 
///
///  - opIntAsync: 
///
///  - opLong: 
///
///  - opLongAsync: 
///
///  - opFloat: 
///
///  - opFloatAsync: 
///
///  - opDouble: 
///
///  - opDoubleAsync: 
///
///  - opString: 
///
///  - opStringAsync: 
///
///  - opMyEnum: 
///
///  - opMyEnumAsync: 
///
///  - opSmallStruct: 
///
///  - opSmallStructAsync: 
///
///  - opFixedStruct: 
///
///  - opFixedStructAsync: 
///
///  - opVarStruct: 
///
///  - opVarStructAsync: 
///
///  - opOneOptional: 
///
///  - opOneOptionalAsync: 
///
///  - opOneOptionalProxy: 
///
///  - opOneOptionalProxyAsync: 
///
///  - opByteSeq: 
///
///  - opByteSeqAsync: 
///
///  - opBoolSeq: 
///
///  - opBoolSeqAsync: 
///
///  - opShortSeq: 
///
///  - opShortSeqAsync: 
///
///  - opIntSeq: 
///
///  - opIntSeqAsync: 
///
///  - opLongSeq: 
///
///  - opLongSeqAsync: 
///
///  - opFloatSeq: 
///
///  - opFloatSeqAsync: 
///
///  - opDoubleSeq: 
///
///  - opDoubleSeqAsync: 
///
///  - opStringSeq: 
///
///  - opStringSeqAsync: 
///
///  - opSmallStructSeq: 
///
///  - opSmallStructSeqAsync: 
///
///  - opSmallStructList: 
///
///  - opSmallStructListAsync: 
///
///  - opFixedStructSeq: 
///
///  - opFixedStructSeqAsync: 
///
///  - opFixedStructList: 
///
///  - opFixedStructListAsync: 
///
///  - opVarStructSeq: 
///
///  - opVarStructSeqAsync: 
///
///  - opSerializable: 
///
///  - opSerializableAsync: 
///
///  - opIntIntDict: 
///
///  - opIntIntDictAsync: 
///
///  - opStringIntDict: 
///
///  - opStringIntDictAsync: 
///
///  - opIntOneOptionalDict: 
///
///  - opIntOneOptionalDictAsync: 
///
///  - opClassAndUnknownOptional: 
///
///  - opClassAndUnknownOptionalAsync: 
///
///  - sendOptionalClass: 
///
///  - sendOptionalClassAsync: 
///
///  - returnOptionalClass: 
///
///  - returnOptionalClassAsync: 
///
///  - opG: 
///
///  - opGAsync: 
///
///  - opMStruct1: 
///
///  - opMStruct1Async: 
///
///  - opMStruct2: 
///
///  - opMStruct2Async: 
///
///  - opMSeq1: 
///
///  - opMSeq1Async: 
///
///  - opMSeq2: 
///
///  - opMSeq2Async: 
///
///  - opMDict1: 
///
///  - opMDict1Async: 
///
///  - opMDict2: 
///
///  - opMDict2Async: 
///
///  - opMG1: 
///
///  - opMG1Async: 
///
///  - opMG2: 
///
///  - opMG2Async: 
///
///  - supportsRequiredParams: 
///
///  - supportsRequiredParamsAsync: 
///
///  - supportsJavaSerializable: 
///
///  - supportsJavaSerializableAsync: 
///
///  - supportsCsharpSerializable: 
///
///  - supportsCsharpSerializableAsync: 
///
///  - supportsCppStringView: 
///
///  - supportsCppStringViewAsync: 
///
///  - supportsNullOptional: 
///
///  - supportsNullOptionalAsync: 
public extension InitialPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Ice.Value?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Ice.Value?`
    func pingPong(_ iceP_o: Ice.Value?, context: Ice.Context? = nil) throws -> Ice.Value? {
        return try _impl._invoke(operation: "pingPong",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_o)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     var iceP_returnValue: Ice.Value?
                                     try istr.read() { iceP_returnValue = $0 }
                                     try istr.readPendingValues()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Ice.Value?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Ice.Value?>` - The result of the operation
    func pingPongAsync(_ iceP_o: Ice.Value?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Ice.Value?> {
        return _impl._invokeAsync(operation: "pingPong",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_o)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      var iceP_returnValue: Ice.Value?
                                      try istr.read() { iceP_returnValue = $0 }
                                      try istr.readPendingValues()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter a: `Swift.Int32?`
    ///
    /// - parameter b: `Swift.String?`
    ///
    /// - parameter o: `OneOptional?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func opOptionalException(a iceP_a: Swift.Int32? = nil, b iceP_b: Swift.String? = nil, o iceP_o: OneOptional? = nil, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "opOptionalException",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(tag: 1, value: iceP_a)
                              ostr.write(tag: 2, value: iceP_b)
                              ostr.write(tag: 3, value: iceP_o)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as OptionalException {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter a: `Swift.Int32?`
    ///
    /// - parameter b: `Swift.String?`
    ///
    /// - parameter o: `OneOptional?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func opOptionalExceptionAsync(a iceP_a: Swift.Int32? = nil, b iceP_b: Swift.String? = nil, o iceP_o: OneOptional? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "opOptionalException",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 1, value: iceP_a)
                                      ostr.write(tag: 2, value: iceP_b)
                                      ostr.write(tag: 3, value: iceP_o)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as OptionalException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter a: `Swift.Int32?`
    ///
    /// - parameter b: `Swift.String?`
    ///
    /// - parameter o: `OneOptional?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func opDerivedException(a iceP_a: Swift.Int32? = nil, b iceP_b: Swift.String? = nil, o iceP_o: OneOptional? = nil, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "opDerivedException",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(tag: 1, value: iceP_a)
                              ostr.write(tag: 2, value: iceP_b)
                              ostr.write(tag: 3, value: iceP_o)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as OptionalException {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter a: `Swift.Int32?`
    ///
    /// - parameter b: `Swift.String?`
    ///
    /// - parameter o: `OneOptional?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func opDerivedExceptionAsync(a iceP_a: Swift.Int32? = nil, b iceP_b: Swift.String? = nil, o iceP_o: OneOptional? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "opDerivedException",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 1, value: iceP_a)
                                      ostr.write(tag: 2, value: iceP_b)
                                      ostr.write(tag: 3, value: iceP_o)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as OptionalException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter a: `Swift.Int32?`
    ///
    /// - parameter b: `Swift.String?`
    ///
    /// - parameter o: `OneOptional?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func opRequiredException(a iceP_a: Swift.Int32? = nil, b iceP_b: Swift.String? = nil, o iceP_o: OneOptional? = nil, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "opRequiredException",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(tag: 1, value: iceP_a)
                              ostr.write(tag: 2, value: iceP_b)
                              ostr.write(tag: 3, value: iceP_o)
                          },
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as OptionalException {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter a: `Swift.Int32?`
    ///
    /// - parameter b: `Swift.String?`
    ///
    /// - parameter o: `OneOptional?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func opRequiredExceptionAsync(a iceP_a: Swift.Int32? = nil, b iceP_b: Swift.String? = nil, o iceP_o: OneOptional? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "opRequiredException",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 1, value: iceP_a)
                                      ostr.write(tag: 2, value: iceP_b)
                                      ostr.write(tag: 3, value: iceP_o)
                                  },
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as OptionalException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.UInt8?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: Swift.UInt8?, p3: Swift.UInt8?)`:
    ///
    ///   - returnValue: `Swift.UInt8?`
    ///
    ///   - p3: `Swift.UInt8?`
    func opByte(_ iceP_p1: Swift.UInt8? = nil, context: Ice.Context? = nil) throws -> (returnValue: Swift.UInt8?, p3: Swift.UInt8?) {
        return try _impl._invoke(operation: "opByte",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.UInt8? = try istr.read(tag: 1)
                                     let iceP_p3: Swift.UInt8? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.UInt8?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: Swift.UInt8?, p3: Swift.UInt8?)>` - The result of the operation
    func opByteAsync(_ iceP_p1: Swift.UInt8? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: Swift.UInt8?, p3: Swift.UInt8?)> {
        return _impl._invokeAsync(operation: "opByte",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.UInt8? = try istr.read(tag: 1)
                                      let iceP_p3: Swift.UInt8? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Bool?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: Swift.Bool?, p3: Swift.Bool?)`:
    ///
    ///   - returnValue: `Swift.Bool?`
    ///
    ///   - p3: `Swift.Bool?`
    func opBool(_ iceP_p1: Swift.Bool? = nil, context: Ice.Context? = nil) throws -> (returnValue: Swift.Bool?, p3: Swift.Bool?) {
        return try _impl._invoke(operation: "opBool",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.Bool? = try istr.read(tag: 1)
                                     let iceP_p3: Swift.Bool? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.Bool?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: Swift.Bool?, p3: Swift.Bool?)>` - The result of the operation
    func opBoolAsync(_ iceP_p1: Swift.Bool? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: Swift.Bool?, p3: Swift.Bool?)> {
        return _impl._invokeAsync(operation: "opBool",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.Bool? = try istr.read(tag: 1)
                                      let iceP_p3: Swift.Bool? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int16?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: Swift.Int16?, p3: Swift.Int16?)`:
    ///
    ///   - returnValue: `Swift.Int16?`
    ///
    ///   - p3: `Swift.Int16?`
    func opShort(_ iceP_p1: Swift.Int16? = nil, context: Ice.Context? = nil) throws -> (returnValue: Swift.Int16?, p3: Swift.Int16?) {
        return try _impl._invoke(operation: "opShort",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int16? = try istr.read(tag: 1)
                                     let iceP_p3: Swift.Int16? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.Int16?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: Swift.Int16?, p3: Swift.Int16?)>` - The result of the operation
    func opShortAsync(_ iceP_p1: Swift.Int16? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: Swift.Int16?, p3: Swift.Int16?)> {
        return _impl._invokeAsync(operation: "opShort",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int16? = try istr.read(tag: 1)
                                      let iceP_p3: Swift.Int16? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: Swift.Int32?, p3: Swift.Int32?)`:
    ///
    ///   - returnValue: `Swift.Int32?`
    ///
    ///   - p3: `Swift.Int32?`
    func opInt(_ iceP_p1: Swift.Int32? = nil, context: Ice.Context? = nil) throws -> (returnValue: Swift.Int32?, p3: Swift.Int32?) {
        return try _impl._invoke(operation: "opInt",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int32? = try istr.read(tag: 1)
                                     let iceP_p3: Swift.Int32? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.Int32?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: Swift.Int32?, p3: Swift.Int32?)>` - The result of the operation
    func opIntAsync(_ iceP_p1: Swift.Int32? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: Swift.Int32?, p3: Swift.Int32?)> {
        return _impl._invokeAsync(operation: "opInt",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int32? = try istr.read(tag: 1)
                                      let iceP_p3: Swift.Int32? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int64?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: Swift.Int64?, p3: Swift.Int64?)`:
    ///
    ///   - returnValue: `Swift.Int64?`
    ///
    ///   - p3: `Swift.Int64?`
    func opLong(_ iceP_p1: Swift.Int64? = nil, context: Ice.Context? = nil) throws -> (returnValue: Swift.Int64?, p3: Swift.Int64?) {
        return try _impl._invoke(operation: "opLong",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 1, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_p3: Swift.Int64? = try istr.read(tag: 2)
                                     let iceP_returnValue: Swift.Int64? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.Int64?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: Swift.Int64?, p3: Swift.Int64?)>` - The result of the operation
    func opLongAsync(_ iceP_p1: Swift.Int64? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: Swift.Int64?, p3: Swift.Int64?)> {
        return _impl._invokeAsync(operation: "opLong",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 1, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_p3: Swift.Int64? = try istr.read(tag: 2)
                                      let iceP_returnValue: Swift.Int64? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Float?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: Swift.Float?, p3: Swift.Float?)`:
    ///
    ///   - returnValue: `Swift.Float?`
    ///
    ///   - p3: `Swift.Float?`
    func opFloat(_ iceP_p1: Swift.Float? = nil, context: Ice.Context? = nil) throws -> (returnValue: Swift.Float?, p3: Swift.Float?) {
        return try _impl._invoke(operation: "opFloat",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.Float? = try istr.read(tag: 1)
                                     let iceP_p3: Swift.Float? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.Float?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: Swift.Float?, p3: Swift.Float?)>` - The result of the operation
    func opFloatAsync(_ iceP_p1: Swift.Float? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: Swift.Float?, p3: Swift.Float?)> {
        return _impl._invokeAsync(operation: "opFloat",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.Float? = try istr.read(tag: 1)
                                      let iceP_p3: Swift.Float? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Double?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: Swift.Double?, p3: Swift.Double?)`:
    ///
    ///   - returnValue: `Swift.Double?`
    ///
    ///   - p3: `Swift.Double?`
    func opDouble(_ iceP_p1: Swift.Double? = nil, context: Ice.Context? = nil) throws -> (returnValue: Swift.Double?, p3: Swift.Double?) {
        return try _impl._invoke(operation: "opDouble",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.Double? = try istr.read(tag: 1)
                                     let iceP_p3: Swift.Double? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.Double?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: Swift.Double?, p3: Swift.Double?)>` - The result of the operation
    func opDoubleAsync(_ iceP_p1: Swift.Double? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: Swift.Double?, p3: Swift.Double?)> {
        return _impl._invokeAsync(operation: "opDouble",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.Double? = try istr.read(tag: 1)
                                      let iceP_p3: Swift.Double? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.String?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: Swift.String?, p3: Swift.String?)`:
    ///
    ///   - returnValue: `Swift.String?`
    ///
    ///   - p3: `Swift.String?`
    func opString(_ iceP_p1: Swift.String? = nil, context: Ice.Context? = nil) throws -> (returnValue: Swift.String?, p3: Swift.String?) {
        return try _impl._invoke(operation: "opString",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.String? = try istr.read(tag: 1)
                                     let iceP_p3: Swift.String? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.String?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: Swift.String?, p3: Swift.String?)>` - The result of the operation
    func opStringAsync(_ iceP_p1: Swift.String? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: Swift.String?, p3: Swift.String?)> {
        return _impl._invokeAsync(operation: "opString",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.String? = try istr.read(tag: 1)
                                      let iceP_p3: Swift.String? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `MyEnum?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: MyEnum?, p3: MyEnum?)`:
    ///
    ///   - returnValue: `MyEnum?`
    ///
    ///   - p3: `MyEnum?`
    func opMyEnum(_ iceP_p1: MyEnum? = nil, context: Ice.Context? = nil) throws -> (returnValue: MyEnum?, p3: MyEnum?) {
        return try _impl._invoke(operation: "opMyEnum",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MyEnum? = try istr.read(tag: 1)
                                     let iceP_p3: MyEnum? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `MyEnum?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: MyEnum?, p3: MyEnum?)>` - The result of the operation
    func opMyEnumAsync(_ iceP_p1: MyEnum? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: MyEnum?, p3: MyEnum?)> {
        return _impl._invokeAsync(operation: "opMyEnum",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MyEnum? = try istr.read(tag: 1)
                                      let iceP_p3: MyEnum? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SmallStruct?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SmallStruct?, p3: SmallStruct?)`:
    ///
    ///   - returnValue: `SmallStruct?`
    ///
    ///   - p3: `SmallStruct?`
    func opSmallStruct(_ iceP_p1: SmallStruct? = nil, context: Ice.Context? = nil) throws -> (returnValue: SmallStruct?, p3: SmallStruct?) {
        return try _impl._invoke(operation: "opSmallStruct",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: SmallStruct? = try istr.read(tag: 1)
                                     let iceP_p3: SmallStruct? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SmallStruct?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SmallStruct?, p3: SmallStruct?)>` - The result of the operation
    func opSmallStructAsync(_ iceP_p1: SmallStruct? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SmallStruct?, p3: SmallStruct?)> {
        return _impl._invokeAsync(operation: "opSmallStruct",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: SmallStruct? = try istr.read(tag: 1)
                                      let iceP_p3: SmallStruct? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `FixedStruct?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FixedStruct?, p3: FixedStruct?)`:
    ///
    ///   - returnValue: `FixedStruct?`
    ///
    ///   - p3: `FixedStruct?`
    func opFixedStruct(_ iceP_p1: FixedStruct? = nil, context: Ice.Context? = nil) throws -> (returnValue: FixedStruct?, p3: FixedStruct?) {
        return try _impl._invoke(operation: "opFixedStruct",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: FixedStruct? = try istr.read(tag: 1)
                                     let iceP_p3: FixedStruct? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `FixedStruct?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: FixedStruct?, p3: FixedStruct?)>` - The result of the operation
    func opFixedStructAsync(_ iceP_p1: FixedStruct? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: FixedStruct?, p3: FixedStruct?)> {
        return _impl._invokeAsync(operation: "opFixedStruct",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: FixedStruct? = try istr.read(tag: 1)
                                      let iceP_p3: FixedStruct? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `VarStruct?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: VarStruct?, p3: VarStruct?)`:
    ///
    ///   - returnValue: `VarStruct?`
    ///
    ///   - p3: `VarStruct?`
    func opVarStruct(_ iceP_p1: VarStruct? = nil, context: Ice.Context? = nil) throws -> (returnValue: VarStruct?, p3: VarStruct?) {
        return try _impl._invoke(operation: "opVarStruct",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: VarStruct? = try istr.read(tag: 1)
                                     let iceP_p3: VarStruct? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `VarStruct?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: VarStruct?, p3: VarStruct?)>` - The result of the operation
    func opVarStructAsync(_ iceP_p1: VarStruct? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: VarStruct?, p3: VarStruct?)> {
        return _impl._invokeAsync(operation: "opVarStruct",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: VarStruct? = try istr.read(tag: 1)
                                      let iceP_p3: VarStruct? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `OneOptional?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: OneOptional?, p3: OneOptional?)`:
    ///
    ///   - returnValue: `OneOptional?`
    ///
    ///   - p3: `OneOptional?`
    func opOneOptional(_ iceP_p1: OneOptional? = nil, context: Ice.Context? = nil) throws -> (returnValue: OneOptional?, p3: OneOptional?) {
        return try _impl._invoke(operation: "opOneOptional",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     var iceP_returnValue: OneOptional?
                                     try istr.read(tag: 1, value: OneOptional.self) { iceP_returnValue = $0 }
                                     var iceP_p3: OneOptional?
                                     try istr.read(tag: 3, value: OneOptional.self) { iceP_p3 = $0 }
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `OneOptional?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: OneOptional?, p3: OneOptional?)>` - The result of the operation
    func opOneOptionalAsync(_ iceP_p1: OneOptional? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: OneOptional?, p3: OneOptional?)> {
        return _impl._invokeAsync(operation: "opOneOptional",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      var iceP_returnValue: OneOptional?
                                      try istr.read(tag: 1, value: OneOptional.self) { iceP_returnValue = $0 }
                                      var iceP_p3: OneOptional?
                                      try istr.read(tag: 3, value: OneOptional.self) { iceP_p3 = $0 }
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Ice.ObjectPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: Ice.ObjectPrx?, p3: Ice.ObjectPrx?)`:
    ///
    ///   - returnValue: `Ice.ObjectPrx?`
    ///
    ///   - p3: `Ice.ObjectPrx?`
    func opOneOptionalProxy(_ iceP_p1: Ice.ObjectPrx? = nil, context: Ice.Context? = nil) throws -> (returnValue: Ice.ObjectPrx?, p3: Ice.ObjectPrx?) {
        return try _impl._invoke(operation: "opOneOptionalProxy",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Ice.ObjectPrx? = try istr.read(tag: 1, type: Ice.ObjectPrx.self)
                                     let iceP_p3: Ice.ObjectPrx? = try istr.read(tag: 3, type: Ice.ObjectPrx.self)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Ice.ObjectPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: Ice.ObjectPrx?, p3: Ice.ObjectPrx?)>` - The result of the operation
    func opOneOptionalProxyAsync(_ iceP_p1: Ice.ObjectPrx? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: Ice.ObjectPrx?, p3: Ice.ObjectPrx?)> {
        return _impl._invokeAsync(operation: "opOneOptionalProxy",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Ice.ObjectPrx? = try istr.read(tag: 1, type: Ice.ObjectPrx.self)
                                      let iceP_p3: Ice.ObjectPrx? = try istr.read(tag: 3, type: Ice.ObjectPrx.self)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ByteSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteSeq?, p3: ByteSeq?)`:
    ///
    ///   - returnValue: `ByteSeq?`
    ///
    ///   - p3: `ByteSeq?`
    func opByteSeq(_ iceP_p1: ByteSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: ByteSeq?, p3: ByteSeq?) {
        return try _impl._invoke(operation: "opByteSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ByteSeq? = try istr.read(tag: 1)
                                     let iceP_p3: ByteSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ByteSeq?, p3: ByteSeq?)>` - The result of the operation
    func opByteSeqAsync(_ iceP_p1: ByteSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ByteSeq?, p3: ByteSeq?)> {
        return _impl._invokeAsync(operation: "opByteSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: ByteSeq? = try istr.read(tag: 1)
                                      let iceP_p3: ByteSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `BoolSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: BoolSeq?, p3: BoolSeq?)`:
    ///
    ///   - returnValue: `BoolSeq?`
    ///
    ///   - p3: `BoolSeq?`
    func opBoolSeq(_ iceP_p1: BoolSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: BoolSeq?, p3: BoolSeq?) {
        return try _impl._invoke(operation: "opBoolSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: BoolSeq? = try istr.read(tag: 1)
                                     let iceP_p3: BoolSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `BoolSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: BoolSeq?, p3: BoolSeq?)>` - The result of the operation
    func opBoolSeqAsync(_ iceP_p1: BoolSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: BoolSeq?, p3: BoolSeq?)> {
        return _impl._invokeAsync(operation: "opBoolSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: BoolSeq? = try istr.read(tag: 1)
                                      let iceP_p3: BoolSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ShortSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortSeq?, p3: ShortSeq?)`:
    ///
    ///   - returnValue: `ShortSeq?`
    ///
    ///   - p3: `ShortSeq?`
    func opShortSeq(_ iceP_p1: ShortSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: ShortSeq?, p3: ShortSeq?) {
        return try _impl._invoke(operation: "opShortSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: ShortSeq? = try istr.read(tag: 1)
                                     let iceP_p3: ShortSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ShortSeq?, p3: ShortSeq?)>` - The result of the operation
    func opShortSeqAsync(_ iceP_p1: ShortSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ShortSeq?, p3: ShortSeq?)> {
        return _impl._invokeAsync(operation: "opShortSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: ShortSeq? = try istr.read(tag: 1)
                                      let iceP_p3: ShortSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `IntSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntSeq?, p3: IntSeq?)`:
    ///
    ///   - returnValue: `IntSeq?`
    ///
    ///   - p3: `IntSeq?`
    func opIntSeq(_ iceP_p1: IntSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: IntSeq?, p3: IntSeq?) {
        return try _impl._invoke(operation: "opIntSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: IntSeq? = try istr.read(tag: 1)
                                     let iceP_p3: IntSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: IntSeq?, p3: IntSeq?)>` - The result of the operation
    func opIntSeqAsync(_ iceP_p1: IntSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: IntSeq?, p3: IntSeq?)> {
        return _impl._invokeAsync(operation: "opIntSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: IntSeq? = try istr.read(tag: 1)
                                      let iceP_p3: IntSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `LongSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: LongSeq?, p3: LongSeq?)`:
    ///
    ///   - returnValue: `LongSeq?`
    ///
    ///   - p3: `LongSeq?`
    func opLongSeq(_ iceP_p1: LongSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: LongSeq?, p3: LongSeq?) {
        return try _impl._invoke(operation: "opLongSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: LongSeq? = try istr.read(tag: 1)
                                     let iceP_p3: LongSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `LongSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: LongSeq?, p3: LongSeq?)>` - The result of the operation
    func opLongSeqAsync(_ iceP_p1: LongSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: LongSeq?, p3: LongSeq?)> {
        return _impl._invokeAsync(operation: "opLongSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: LongSeq? = try istr.read(tag: 1)
                                      let iceP_p3: LongSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `FloatSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FloatSeq?, p3: FloatSeq?)`:
    ///
    ///   - returnValue: `FloatSeq?`
    ///
    ///   - p3: `FloatSeq?`
    func opFloatSeq(_ iceP_p1: FloatSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: FloatSeq?, p3: FloatSeq?) {
        return try _impl._invoke(operation: "opFloatSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: FloatSeq? = try istr.read(tag: 1)
                                     let iceP_p3: FloatSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `FloatSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: FloatSeq?, p3: FloatSeq?)>` - The result of the operation
    func opFloatSeqAsync(_ iceP_p1: FloatSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: FloatSeq?, p3: FloatSeq?)> {
        return _impl._invokeAsync(operation: "opFloatSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: FloatSeq? = try istr.read(tag: 1)
                                      let iceP_p3: FloatSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `DoubleSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: DoubleSeq?, p3: DoubleSeq?)`:
    ///
    ///   - returnValue: `DoubleSeq?`
    ///
    ///   - p3: `DoubleSeq?`
    func opDoubleSeq(_ iceP_p1: DoubleSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: DoubleSeq?, p3: DoubleSeq?) {
        return try _impl._invoke(operation: "opDoubleSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: DoubleSeq? = try istr.read(tag: 1)
                                     let iceP_p3: DoubleSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `DoubleSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: DoubleSeq?, p3: DoubleSeq?)>` - The result of the operation
    func opDoubleSeqAsync(_ iceP_p1: DoubleSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: DoubleSeq?, p3: DoubleSeq?)> {
        return _impl._invokeAsync(operation: "opDoubleSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: DoubleSeq? = try istr.read(tag: 1)
                                      let iceP_p3: DoubleSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `StringSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeq?, p3: StringSeq?)`:
    ///
    ///   - returnValue: `StringSeq?`
    ///
    ///   - p3: `StringSeq?`
    func opStringSeq(_ iceP_p1: StringSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: StringSeq?, p3: StringSeq?) {
        return try _impl._invoke(operation: "opStringSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: StringSeq? = try istr.read(tag: 1)
                                     let iceP_p3: StringSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: StringSeq?, p3: StringSeq?)>` - The result of the operation
    func opStringSeqAsync(_ iceP_p1: StringSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: StringSeq?, p3: StringSeq?)> {
        return _impl._invokeAsync(operation: "opStringSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: StringSeq? = try istr.read(tag: 1)
                                      let iceP_p3: StringSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SmallStructSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SmallStructSeq?, p3: SmallStructSeq?)`:
    ///
    ///   - returnValue: `SmallStructSeq?`
    ///
    ///   - p3: `SmallStructSeq?`
    func opSmallStructSeq(_ iceP_p1: SmallStructSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: SmallStructSeq?, p3: SmallStructSeq?) {
        return try _impl._invoke(operation: "opSmallStructSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     SmallStructSeqHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: SmallStructSeq? = try SmallStructSeqHelper.read(from: istr, tag: 1)
                                     let iceP_p3: SmallStructSeq? = try SmallStructSeqHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SmallStructSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SmallStructSeq?, p3: SmallStructSeq?)>` - The result of the operation
    func opSmallStructSeqAsync(_ iceP_p1: SmallStructSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SmallStructSeq?, p3: SmallStructSeq?)> {
        return _impl._invokeAsync(operation: "opSmallStructSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      SmallStructSeqHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: SmallStructSeq? = try SmallStructSeqHelper.read(from: istr, tag: 1)
                                      let iceP_p3: SmallStructSeq? = try SmallStructSeqHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SmallStructList?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SmallStructList?, p3: SmallStructList?)`:
    ///
    ///   - returnValue: `SmallStructList?`
    ///
    ///   - p3: `SmallStructList?`
    func opSmallStructList(_ iceP_p1: SmallStructList? = nil, context: Ice.Context? = nil) throws -> (returnValue: SmallStructList?, p3: SmallStructList?) {
        return try _impl._invoke(operation: "opSmallStructList",
                                 mode: .Normal,
                                 write: { ostr in
                                     SmallStructListHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: SmallStructList? = try SmallStructListHelper.read(from: istr, tag: 1)
                                     let iceP_p3: SmallStructList? = try SmallStructListHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SmallStructList?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SmallStructList?, p3: SmallStructList?)>` - The result of the operation
    func opSmallStructListAsync(_ iceP_p1: SmallStructList? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SmallStructList?, p3: SmallStructList?)> {
        return _impl._invokeAsync(operation: "opSmallStructList",
                                  mode: .Normal,
                                  write: { ostr in
                                      SmallStructListHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: SmallStructList? = try SmallStructListHelper.read(from: istr, tag: 1)
                                      let iceP_p3: SmallStructList? = try SmallStructListHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `FixedStructSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FixedStructSeq?, p3: FixedStructSeq?)`:
    ///
    ///   - returnValue: `FixedStructSeq?`
    ///
    ///   - p3: `FixedStructSeq?`
    func opFixedStructSeq(_ iceP_p1: FixedStructSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: FixedStructSeq?, p3: FixedStructSeq?) {
        return try _impl._invoke(operation: "opFixedStructSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     FixedStructSeqHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: FixedStructSeq? = try FixedStructSeqHelper.read(from: istr, tag: 1)
                                     let iceP_p3: FixedStructSeq? = try FixedStructSeqHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `FixedStructSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: FixedStructSeq?, p3: FixedStructSeq?)>` - The result of the operation
    func opFixedStructSeqAsync(_ iceP_p1: FixedStructSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: FixedStructSeq?, p3: FixedStructSeq?)> {
        return _impl._invokeAsync(operation: "opFixedStructSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      FixedStructSeqHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: FixedStructSeq? = try FixedStructSeqHelper.read(from: istr, tag: 1)
                                      let iceP_p3: FixedStructSeq? = try FixedStructSeqHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `FixedStructList?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: FixedStructList?, p3: FixedStructList?)`:
    ///
    ///   - returnValue: `FixedStructList?`
    ///
    ///   - p3: `FixedStructList?`
    func opFixedStructList(_ iceP_p1: FixedStructList? = nil, context: Ice.Context? = nil) throws -> (returnValue: FixedStructList?, p3: FixedStructList?) {
        return try _impl._invoke(operation: "opFixedStructList",
                                 mode: .Normal,
                                 write: { ostr in
                                     FixedStructListHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: FixedStructList? = try FixedStructListHelper.read(from: istr, tag: 1)
                                     let iceP_p3: FixedStructList? = try FixedStructListHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `FixedStructList?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: FixedStructList?, p3: FixedStructList?)>` - The result of the operation
    func opFixedStructListAsync(_ iceP_p1: FixedStructList? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: FixedStructList?, p3: FixedStructList?)> {
        return _impl._invokeAsync(operation: "opFixedStructList",
                                  mode: .Normal,
                                  write: { ostr in
                                      FixedStructListHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: FixedStructList? = try FixedStructListHelper.read(from: istr, tag: 1)
                                      let iceP_p3: FixedStructList? = try FixedStructListHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `VarStructSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: VarStructSeq?, p3: VarStructSeq?)`:
    ///
    ///   - returnValue: `VarStructSeq?`
    ///
    ///   - p3: `VarStructSeq?`
    func opVarStructSeq(_ iceP_p1: VarStructSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: VarStructSeq?, p3: VarStructSeq?) {
        return try _impl._invoke(operation: "opVarStructSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     VarStructSeqHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: VarStructSeq? = try VarStructSeqHelper.read(from: istr, tag: 1)
                                     let iceP_p3: VarStructSeq? = try VarStructSeqHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `VarStructSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: VarStructSeq?, p3: VarStructSeq?)>` - The result of the operation
    func opVarStructSeqAsync(_ iceP_p1: VarStructSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: VarStructSeq?, p3: VarStructSeq?)> {
        return _impl._invokeAsync(operation: "opVarStructSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      VarStructSeqHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: VarStructSeq? = try VarStructSeqHelper.read(from: istr, tag: 1)
                                      let iceP_p3: VarStructSeq? = try VarStructSeqHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Serializable?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: Serializable?, p3: Serializable?)`:
    ///
    ///   - returnValue: `Serializable?`
    ///
    ///   - p3: `Serializable?`
    func opSerializable(_ iceP_p1: Serializable? = nil, context: Ice.Context? = nil) throws -> (returnValue: Serializable?, p3: Serializable?) {
        return try _impl._invoke(operation: "opSerializable",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Serializable? = try istr.read(tag: 1)
                                     let iceP_p3: Serializable? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Serializable?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: Serializable?, p3: Serializable?)>` - The result of the operation
    func opSerializableAsync(_ iceP_p1: Serializable? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: Serializable?, p3: Serializable?)> {
        return _impl._invokeAsync(operation: "opSerializable",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Serializable? = try istr.read(tag: 1)
                                      let iceP_p3: Serializable? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `IntIntDict?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntIntDict?, p3: IntIntDict?)`:
    ///
    ///   - returnValue: `IntIntDict?`
    ///
    ///   - p3: `IntIntDict?`
    func opIntIntDict(_ iceP_p1: IntIntDict? = nil, context: Ice.Context? = nil) throws -> (returnValue: IntIntDict?, p3: IntIntDict?) {
        return try _impl._invoke(operation: "opIntIntDict",
                                 mode: .Normal,
                                 write: { ostr in
                                     IntIntDictHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: IntIntDict? = try IntIntDictHelper.read(from: istr, tag: 1)
                                     let iceP_p3: IntIntDict? = try IntIntDictHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntIntDict?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: IntIntDict?, p3: IntIntDict?)>` - The result of the operation
    func opIntIntDictAsync(_ iceP_p1: IntIntDict? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: IntIntDict?, p3: IntIntDict?)> {
        return _impl._invokeAsync(operation: "opIntIntDict",
                                  mode: .Normal,
                                  write: { ostr in
                                      IntIntDictHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: IntIntDict? = try IntIntDictHelper.read(from: istr, tag: 1)
                                      let iceP_p3: IntIntDict? = try IntIntDictHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `StringIntDict?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringIntDict?, p3: StringIntDict?)`:
    ///
    ///   - returnValue: `StringIntDict?`
    ///
    ///   - p3: `StringIntDict?`
    func opStringIntDict(_ iceP_p1: StringIntDict? = nil, context: Ice.Context? = nil) throws -> (returnValue: StringIntDict?, p3: StringIntDict?) {
        return try _impl._invoke(operation: "opStringIntDict",
                                 mode: .Normal,
                                 write: { ostr in
                                     StringIntDictHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: StringIntDict? = try StringIntDictHelper.read(from: istr, tag: 1)
                                     let iceP_p3: StringIntDict? = try StringIntDictHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringIntDict?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: StringIntDict?, p3: StringIntDict?)>` - The result of the operation
    func opStringIntDictAsync(_ iceP_p1: StringIntDict? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: StringIntDict?, p3: StringIntDict?)> {
        return _impl._invokeAsync(operation: "opStringIntDict",
                                  mode: .Normal,
                                  write: { ostr in
                                      StringIntDictHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: StringIntDict? = try StringIntDictHelper.read(from: istr, tag: 1)
                                      let iceP_p3: StringIntDict? = try StringIntDictHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `IntOneOptionalDict?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntOneOptionalDict?, p3: IntOneOptionalDict?)`:
    ///
    ///   - returnValue: `IntOneOptionalDict?`
    ///
    ///   - p3: `IntOneOptionalDict?`
    func opIntOneOptionalDict(_ iceP_p1: IntOneOptionalDict? = nil, context: Ice.Context? = nil) throws -> (returnValue: IntOneOptionalDict?, p3: IntOneOptionalDict?) {
        return try _impl._invoke(operation: "opIntOneOptionalDict",
                                 mode: .Normal,
                                 write: { ostr in
                                     IntOneOptionalDictHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: IntOneOptionalDict? = try IntOneOptionalDictHelper.read(from: istr, tag: 1)
                                     let iceP_p3: IntOneOptionalDict? = try IntOneOptionalDictHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_p3)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntOneOptionalDict?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: IntOneOptionalDict?, p3: IntOneOptionalDict?)>` - The result of the operation
    func opIntOneOptionalDictAsync(_ iceP_p1: IntOneOptionalDict? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: IntOneOptionalDict?, p3: IntOneOptionalDict?)> {
        return _impl._invokeAsync(operation: "opIntOneOptionalDict",
                                  mode: .Normal,
                                  write: { ostr in
                                      IntOneOptionalDictHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: IntOneOptionalDict? = try IntOneOptionalDictHelper.read(from: istr, tag: 1)
                                      let iceP_p3: IntOneOptionalDict? = try IntOneOptionalDictHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_p3)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `A?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func opClassAndUnknownOptional(_ iceP_p: A?, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "opClassAndUnknownOptional",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_p)
                              ostr.writePendingValues()
                          },
                          context: context)
    }

    ///
    /// - parameter _: `A?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func opClassAndUnknownOptionalAsync(_ iceP_p: A?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "opClassAndUnknownOptional",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                      ostr.writePendingValues()
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter req: `Swift.Bool`
    ///
    /// - parameter o: `OneOptional?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func sendOptionalClass(req iceP_req: Swift.Bool, o iceP_o: OneOptional? = nil, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "sendOptionalClass",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_req)
                              ostr.write(tag: 1, value: iceP_o)
                          },
                          context: context)
    }

    ///
    /// - parameter req: `Swift.Bool`
    ///
    /// - parameter o: `OneOptional?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func sendOptionalClassAsync(req iceP_req: Swift.Bool, o iceP_o: OneOptional? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "sendOptionalClass",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_req)
                                      ostr.write(tag: 1, value: iceP_o)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `OneOptional?`
    func returnOptionalClass(_ iceP_req: Swift.Bool, context: Ice.Context? = nil) throws -> OneOptional? {
        return try _impl._invoke(operation: "returnOptionalClass",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_req)
                                 },
                                 read: { istr in
                                     var iceP_o: OneOptional?
                                     try istr.read(tag: 1, value: OneOptional.self) { iceP_o = $0 }
                                     return iceP_o
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.Bool`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<OneOptional?>` - The result of the operation
    func returnOptionalClassAsync(_ iceP_req: Swift.Bool, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<OneOptional?> {
        return _impl._invokeAsync(operation: "returnOptionalClass",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_req)
                                  },
                                  read: { istr in
                                      var iceP_o: OneOptional?
                                      try istr.read(tag: 1, value: OneOptional.self) { iceP_o = $0 }
                                      return iceP_o
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `G?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `G?`
    func opG(_ iceP_g: G?, context: Ice.Context? = nil) throws -> G? {
        return try _impl._invoke(operation: "opG",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_g)
                                     ostr.writePendingValues()
                                 },
                                 read: { istr in
                                     var iceP_returnValue: G?
                                     try istr.read(G.self) { iceP_returnValue = $0 }
                                     try istr.readPendingValues()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `G?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<G?>` - The result of the operation
    func opGAsync(_ iceP_g: G?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<G?> {
        return _impl._invokeAsync(operation: "opG",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_g)
                                      ostr.writePendingValues()
                                  },
                                  read: { istr in
                                      var iceP_returnValue: G?
                                      try istr.read(G.self) { iceP_returnValue = $0 }
                                      try istr.readPendingValues()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `SmallStruct?`
    func opMStruct1(context: Ice.Context? = nil) throws -> SmallStruct? {
        return try _impl._invoke(operation: "opMStruct1",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: SmallStruct? = try istr.read(tag: 1)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<SmallStruct?>` - The result of the operation
    func opMStruct1Async(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<SmallStruct?> {
        return _impl._invokeAsync(operation: "opMStruct1",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: SmallStruct? = try istr.read(tag: 1)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SmallStruct?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SmallStruct?, p2: SmallStruct?)`:
    ///
    ///   - returnValue: `SmallStruct?`
    ///
    ///   - p2: `SmallStruct?`
    func opMStruct2(_ iceP_p1: SmallStruct? = nil, context: Ice.Context? = nil) throws -> (returnValue: SmallStruct?, p2: SmallStruct?) {
        return try _impl._invoke(operation: "opMStruct2",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: SmallStruct? = try istr.read(tag: 1)
                                     let iceP_p2: SmallStruct? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SmallStruct?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SmallStruct?, p2: SmallStruct?)>` - The result of the operation
    func opMStruct2Async(_ iceP_p1: SmallStruct? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SmallStruct?, p2: SmallStruct?)> {
        return _impl._invokeAsync(operation: "opMStruct2",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: SmallStruct? = try istr.read(tag: 1)
                                      let iceP_p2: SmallStruct? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p2)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `StringSeq?`
    func opMSeq1(context: Ice.Context? = nil) throws -> StringSeq? {
        return try _impl._invoke(operation: "opMSeq1",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: StringSeq? = try istr.read(tag: 1)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<StringSeq?>` - The result of the operation
    func opMSeq1Async(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<StringSeq?> {
        return _impl._invokeAsync(operation: "opMSeq1",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: StringSeq? = try istr.read(tag: 1)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `StringSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringSeq?, p2: StringSeq?)`:
    ///
    ///   - returnValue: `StringSeq?`
    ///
    ///   - p2: `StringSeq?`
    func opMSeq2(_ iceP_p1: StringSeq? = nil, context: Ice.Context? = nil) throws -> (returnValue: StringSeq?, p2: StringSeq?) {
        return try _impl._invoke(operation: "opMSeq2",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: StringSeq? = try istr.read(tag: 1)
                                     let iceP_p2: StringSeq? = try istr.read(tag: 3)
                                     return (iceP_returnValue, iceP_p2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringSeq?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: StringSeq?, p2: StringSeq?)>` - The result of the operation
    func opMSeq2Async(_ iceP_p1: StringSeq? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: StringSeq?, p2: StringSeq?)> {
        return _impl._invokeAsync(operation: "opMSeq2",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: StringSeq? = try istr.read(tag: 1)
                                      let iceP_p2: StringSeq? = try istr.read(tag: 3)
                                      return (iceP_returnValue, iceP_p2)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `StringIntDict?`
    func opMDict1(context: Ice.Context? = nil) throws -> StringIntDict? {
        return try _impl._invoke(operation: "opMDict1",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: StringIntDict? = try StringIntDictHelper.read(from: istr, tag: 1)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<StringIntDict?>` - The result of the operation
    func opMDict1Async(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<StringIntDict?> {
        return _impl._invokeAsync(operation: "opMDict1",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: StringIntDict? = try StringIntDictHelper.read(from: istr, tag: 1)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `StringIntDict?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: StringIntDict?, p2: StringIntDict?)`:
    ///
    ///   - returnValue: `StringIntDict?`
    ///
    ///   - p2: `StringIntDict?`
    func opMDict2(_ iceP_p1: StringIntDict? = nil, context: Ice.Context? = nil) throws -> (returnValue: StringIntDict?, p2: StringIntDict?) {
        return try _impl._invoke(operation: "opMDict2",
                                 mode: .Normal,
                                 write: { ostr in
                                     StringIntDictHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: StringIntDict? = try StringIntDictHelper.read(from: istr, tag: 1)
                                     let iceP_p2: StringIntDict? = try StringIntDictHelper.read(from: istr, tag: 3)
                                     return (iceP_returnValue, iceP_p2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `StringIntDict?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: StringIntDict?, p2: StringIntDict?)>` - The result of the operation
    func opMDict2Async(_ iceP_p1: StringIntDict? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: StringIntDict?, p2: StringIntDict?)> {
        return _impl._invokeAsync(operation: "opMDict2",
                                  mode: .Normal,
                                  write: { ostr in
                                      StringIntDictHelper.write(to: ostr, tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: StringIntDict? = try StringIntDictHelper.read(from: istr, tag: 1)
                                      let iceP_p2: StringIntDict? = try StringIntDictHelper.read(from: istr, tag: 3)
                                      return (iceP_returnValue, iceP_p2)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `G?`
    func opMG1(context: Ice.Context? = nil) throws -> G? {
        return try _impl._invoke(operation: "opMG1",
                                 mode: .Normal,
                                 read: { istr in
                                     var iceP_returnValue: G?
                                     try istr.read(tag: 1, value: G.self) { iceP_returnValue = $0 }
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<G?>` - The result of the operation
    func opMG1Async(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<G?> {
        return _impl._invokeAsync(operation: "opMG1",
                                  mode: .Normal,
                                  read: { istr in
                                      var iceP_returnValue: G?
                                      try istr.read(tag: 1, value: G.self) { iceP_returnValue = $0 }
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `G?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: G?, p2: G?)`:
    ///
    ///   - returnValue: `G?`
    ///
    ///   - p2: `G?`
    func opMG2(_ iceP_p1: G? = nil, context: Ice.Context? = nil) throws -> (returnValue: G?, p2: G?) {
        return try _impl._invoke(operation: "opMG2",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(tag: 2, value: iceP_p1)
                                 },
                                 read: { istr in
                                     var iceP_returnValue: G?
                                     try istr.read(tag: 1, value: G.self) { iceP_returnValue = $0 }
                                     var iceP_p2: G?
                                     try istr.read(tag: 3, value: G.self) { iceP_p2 = $0 }
                                     return (iceP_returnValue, iceP_p2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `G?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: G?, p2: G?)>` - The result of the operation
    func opMG2Async(_ iceP_p1: G? = nil, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: G?, p2: G?)> {
        return _impl._invokeAsync(operation: "opMG2",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(tag: 2, value: iceP_p1)
                                  },
                                  read: { istr in
                                      var iceP_returnValue: G?
                                      try istr.read(tag: 1, value: G.self) { iceP_returnValue = $0 }
                                      var iceP_p2: G?
                                      try istr.read(tag: 3, value: G.self) { iceP_p2 = $0 }
                                      return (iceP_returnValue, iceP_p2)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Bool`
    func supportsRequiredParams(context: Ice.Context? = nil) throws -> Swift.Bool {
        return try _impl._invoke(operation: "supportsRequiredParams",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Bool = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Bool>` - The result of the operation
    func supportsRequiredParamsAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Bool> {
        return _impl._invokeAsync(operation: "supportsRequiredParams",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Bool = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Bool`
    func supportsJavaSerializable(context: Ice.Context? = nil) throws -> Swift.Bool {
        return try _impl._invoke(operation: "supportsJavaSerializable",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Bool = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Bool>` - The result of the operation
    func supportsJavaSerializableAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Bool> {
        return _impl._invokeAsync(operation: "supportsJavaSerializable",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Bool = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Bool`
    func supportsCsharpSerializable(context: Ice.Context? = nil) throws -> Swift.Bool {
        return try _impl._invoke(operation: "supportsCsharpSerializable",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Bool = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Bool>` - The result of the operation
    func supportsCsharpSerializableAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Bool> {
        return _impl._invokeAsync(operation: "supportsCsharpSerializable",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Bool = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Bool`
    func supportsCppStringView(context: Ice.Context? = nil) throws -> Swift.Bool {
        return try _impl._invoke(operation: "supportsCppStringView",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Bool = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Bool>` - The result of the operation
    func supportsCppStringViewAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Bool> {
        return _impl._invokeAsync(operation: "supportsCppStringView",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Bool = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Bool`
    func supportsNullOptional(context: Ice.Context? = nil) throws -> Swift.Bool {
        return try _impl._invoke(operation: "supportsNullOptional",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Bool = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Bool>` - The result of the operation
    func supportsNullOptionalAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Bool> {
        return _impl._invokeAsync(operation: "supportsNullOptional",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Bool = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// :nodoc:
public class OneOptional_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return OneOptional.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_OneOptional() -> Ice.ValueTypeResolver {
        return OneOptional_TypeResolver()
    }
}

open class OneOptional: Ice.Value {
    public var a: Swift.Int32? = nil

    public required init() {}

    public init(a: Swift.Int32?) {
        self.a = a
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return OneOptionalTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return OneOptionalTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.a = try istr.read(tag: 1)
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: OneOptionalTraits.staticId, compactId: -1, last: true)
        ostr.write(tag: 1, value: self.a)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MultiOptional_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MultiOptional.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_MultiOptional() -> Ice.ValueTypeResolver {
        return MultiOptional_TypeResolver()
    }
}

open class MultiOptional: Ice.Value {
    public var a: Swift.UInt8? = nil
    public var b: Swift.Bool? = nil
    public var c: Swift.Int16? = nil
    public var d: Swift.Int32? = nil
    public var e: Swift.Int64? = nil
    public var f: Swift.Float? = nil
    public var g: Swift.Double? = nil
    public var h: Swift.String? = nil
    public var i: MyEnum? = nil
    public var j: Ice.ObjectPrx? = nil
    public var k: MultiOptional? = nil
    public var bs: ByteSeq? = nil
    public var ss: StringSeq? = nil
    public var iid: IntIntDict? = nil
    public var sid: StringIntDict? = nil
    public var fs: FixedStruct? = nil
    public var vs: VarStruct? = nil
    public var shs: ShortSeq? = nil
    public var es: MyEnumSeq? = nil
    public var fss: FixedStructSeq? = nil
    public var vss: VarStructSeq? = nil
    public var oos: OneOptionalSeq? = nil
    public var oops: OneOptionalPrxSeq? = nil
    public var ied: IntEnumDict? = nil
    public var ifsd: IntFixedStructDict? = nil
    public var ivsd: IntVarStructDict? = nil
    public var iood: IntOneOptionalDict? = nil
    public var ioopd: IntOneOptionalPrxDict? = nil
    public var bos: BoolSeq? = nil
    public var ser: Serializable? = nil

    public required init() {}

    public init(a: Swift.UInt8?, b: Swift.Bool?, c: Swift.Int16?, d: Swift.Int32?, e: Swift.Int64?, f: Swift.Float?, g: Swift.Double?, h: Swift.String?, i: MyEnum?, j: Ice.ObjectPrx?, k: MultiOptional?, bs: ByteSeq?, ss: StringSeq?, iid: IntIntDict?, sid: StringIntDict?, fs: FixedStruct?, vs: VarStruct?, shs: ShortSeq?, es: MyEnumSeq?, fss: FixedStructSeq?, vss: VarStructSeq?, oos: OneOptionalSeq?, oops: OneOptionalPrxSeq?, ied: IntEnumDict?, ifsd: IntFixedStructDict?, ivsd: IntVarStructDict?, iood: IntOneOptionalDict?, ioopd: IntOneOptionalPrxDict?, bos: BoolSeq?, ser: Serializable?) {
        self.a = a
        self.b = b
        self.c = c
        self.d = d
        self.e = e
        self.f = f
        self.g = g
        self.h = h
        self.i = i
        self.j = j
        self.k = k
        self.bs = bs
        self.ss = ss
        self.iid = iid
        self.sid = sid
        self.fs = fs
        self.vs = vs
        self.shs = shs
        self.es = es
        self.fss = fss
        self.vss = vss
        self.oos = oos
        self.oops = oops
        self.ied = ied
        self.ifsd = ifsd
        self.ivsd = ivsd
        self.iood = iood
        self.ioopd = ioopd
        self.bos = bos
        self.ser = ser
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MultiOptionalTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MultiOptionalTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.a = try istr.read(tag: 1)
        self.b = try istr.read(tag: 2)
        self.c = try istr.read(tag: 3)
        self.d = try istr.read(tag: 4)
        self.e = try istr.read(tag: 5)
        self.f = try istr.read(tag: 6)
        self.g = try istr.read(tag: 7)
        self.h = try istr.read(tag: 8)
        self.i = try istr.read(tag: 9)
        self.j = try istr.read(tag: 10, type: Ice.ObjectPrx.self)
        try istr.read(tag: 11, value: MultiOptional.self) { self.k = $0 }
        self.bs = try istr.read(tag: 12)
        self.ss = try istr.read(tag: 13)
        self.iid = try IntIntDictHelper.read(from: istr, tag: 14)
        self.sid = try StringIntDictHelper.read(from: istr, tag: 15)
        self.fs = try istr.read(tag: 16)
        self.vs = try istr.read(tag: 17)
        self.shs = try istr.read(tag: 18)
        self.es = try MyEnumSeqHelper.read(from: istr, tag: 19)
        self.fss = try FixedStructSeqHelper.read(from: istr, tag: 20)
        self.vss = try VarStructSeqHelper.read(from: istr, tag: 21)
        self.oos = try OneOptionalSeqHelper.read(from: istr, tag: 22)
        self.oops = try OneOptionalPrxSeqHelper.read(from: istr, tag: 23)
        self.ied = try IntEnumDictHelper.read(from: istr, tag: 24)
        self.ifsd = try IntFixedStructDictHelper.read(from: istr, tag: 25)
        self.ivsd = try IntVarStructDictHelper.read(from: istr, tag: 26)
        self.iood = try IntOneOptionalDictHelper.read(from: istr, tag: 27)
        self.ioopd = try IntOneOptionalPrxDictHelper.read(from: istr, tag: 28)
        self.bos = try istr.read(tag: 29)
        self.ser = try istr.read(tag: 30)
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MultiOptionalTraits.staticId, compactId: -1, last: true)
        ostr.write(tag: 1, value: self.a)
        ostr.write(tag: 2, value: self.b)
        ostr.write(tag: 3, value: self.c)
        ostr.write(tag: 4, value: self.d)
        ostr.write(tag: 5, value: self.e)
        ostr.write(tag: 6, value: self.f)
        ostr.write(tag: 7, value: self.g)
        ostr.write(tag: 8, value: self.h)
        ostr.write(tag: 9, value: self.i)
        ostr.write(tag: 10, value: self.j)
        ostr.write(tag: 11, value: self.k)
        ostr.write(tag: 12, value: self.bs)
        ostr.write(tag: 13, value: self.ss)
        IntIntDictHelper.write(to: ostr, tag: 14, value: self.iid)
        StringIntDictHelper.write(to: ostr, tag: 15, value: self.sid)
        ostr.write(tag: 16, value: self.fs)
        ostr.write(tag: 17, value: self.vs)
        ostr.write(tag: 18, value: self.shs)
        MyEnumSeqHelper.write(to: ostr, tag: 19, value: self.es)
        FixedStructSeqHelper.write(to: ostr, tag: 20, value: self.fss)
        VarStructSeqHelper.write(to: ostr, tag: 21, value: self.vss)
        OneOptionalSeqHelper.write(to: ostr, tag: 22, value: self.oos)
        OneOptionalPrxSeqHelper.write(to: ostr, tag: 23, value: self.oops)
        IntEnumDictHelper.write(to: ostr, tag: 24, value: self.ied)
        IntFixedStructDictHelper.write(to: ostr, tag: 25, value: self.ifsd)
        IntVarStructDictHelper.write(to: ostr, tag: 26, value: self.ivsd)
        IntOneOptionalDictHelper.write(to: ostr, tag: 27, value: self.iood)
        IntOneOptionalPrxDictHelper.write(to: ostr, tag: 28, value: self.ioopd)
        ostr.write(tag: 29, value: self.bos)
        ostr.write(tag: 30, value: self.ser)
        ostr.endSlice()
    }
}

/// :nodoc:
public class A_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return A.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_A() -> Ice.ValueTypeResolver {
        return A_TypeResolver()
    }
}

open class A: Ice.Value {
    public var requiredA: Swift.Int32 = 0
    public var ma: Swift.Int32? = nil
    public var mb: Swift.Int32? = nil
    public var mc: Swift.Int32? = nil

    public required init() {}

    public init(requiredA: Swift.Int32, ma: Swift.Int32?, mb: Swift.Int32?, mc: Swift.Int32?) {
        self.requiredA = requiredA
        self.ma = ma
        self.mb = mb
        self.mc = mc
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return ATraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return ATraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.requiredA = try istr.read()
        self.ma = try istr.read(tag: 1)
        self.mb = try istr.read(tag: 50)
        self.mc = try istr.read(tag: 500)
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: ATraits.staticId, compactId: -1, last: true)
        ostr.write(self.requiredA)
        ostr.write(tag: 1, value: self.ma)
        ostr.write(tag: 50, value: self.mb)
        ostr.write(tag: 500, value: self.mc)
        ostr.endSlice()
    }
}

/// :nodoc:
public class B_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return B.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_B() -> Ice.ValueTypeResolver {
        return B_TypeResolver()
    }
}

open class B: A {
    public var requiredB: Swift.Int32 = 0
    public var md: Swift.Int32? = nil
    var _slicedData: Ice.SlicedData?

    public required init() {
        super.init()
    }

    public init(requiredA: Swift.Int32, ma: Swift.Int32?, mb: Swift.Int32?, mc: Swift.Int32?, requiredB: Swift.Int32, md: Swift.Int32?) {
        self.requiredB = requiredB
        self.md = md
        super.init(requiredA: requiredA, ma: ma, mb: mb, mc: mc)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return BTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return BTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.requiredB = try istr.read()
        self.md = try istr.read(tag: 10)
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: BTraits.staticId, compactId: -1, last: false)
        ostr.write(self.requiredB)
        ostr.write(tag: 10, value: self.md)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    /// Returns the sliced data if the value has a preserved-slice base class and has been sliced
    /// during un-marshaling of the value, nil is returned otherwise.
    ///
    /// returns: `Ice.SlicedData?` - The sliced data or nil
    open override func ice_getSlicedData() -> Ice.SlicedData? {
        return _slicedData
    }

    open override func _iceRead(from istr: Ice.InputStream) throws {
        istr.startValue()
        try _iceReadImpl(from: istr)
        _slicedData = try istr.endValue(preserve: true)
    }

    open override func _iceWrite(to ostr: Ice.OutputStream) {
        ostr.startValue(data: _slicedData)
        _iceWriteImpl(to: ostr)
        ostr.endValue()
    }
}

/// :nodoc:
public class C_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return C.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_C() -> Ice.ValueTypeResolver {
        return C_TypeResolver()
    }
}

open class C: B {
    public var ss: Swift.String = ""
    public var ms: Swift.String? = nil

    public required init() {
        super.init()
    }

    public init(requiredA: Swift.Int32, ma: Swift.Int32?, mb: Swift.Int32?, mc: Swift.Int32?, requiredB: Swift.Int32, md: Swift.Int32?, ss: Swift.String, ms: Swift.String?) {
        self.ss = ss
        self.ms = ms
        super.init(requiredA: requiredA, ma: ma, mb: mb, mc: mc, requiredB: requiredB, md: md)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return CTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return CTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.ss = try istr.read()
        self.ms = try istr.read(tag: 890)
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: CTraits.staticId, compactId: -1, last: false)
        ostr.write(self.ss)
        ostr.write(tag: 890, value: self.ms)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class WD_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return WD.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_WD() -> Ice.ValueTypeResolver {
        return WD_TypeResolver()
    }
}

open class WD: Ice.Value {
    public var a: Swift.Int32? = 5
    public var s: Swift.String? = "test"

    public required init() {}

    public init(a: Swift.Int32?, s: Swift.String?) {
        self.a = a
        self.s = s
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return WDTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return WDTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.a = try istr.read(tag: 1)
        self.s = try istr.read(tag: 2)
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: WDTraits.staticId, compactId: -1, last: true)
        ostr.write(tag: 1, value: self.a)
        ostr.write(tag: 2, value: self.s)
        ostr.endSlice()
    }
}

/// :nodoc:
public class OptionalWithCustom_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return OptionalWithCustom.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_OptionalWithCustom() -> Ice.ValueTypeResolver {
        return OptionalWithCustom_TypeResolver()
    }
}

open class OptionalWithCustom: Ice.Value {
    public var l: SmallStructList? = nil
    public var lp: SmallStructList? = nil
    public var s: ClassVarStruct? = nil

    public required init() {}

    public init(l: SmallStructList?, lp: SmallStructList?, s: ClassVarStruct?) {
        self.l = l
        self.lp = lp
        self.s = s
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return OptionalWithCustomTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return OptionalWithCustomTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.l = try SmallStructListHelper.read(from: istr, tag: 1)
        self.lp = try SmallStructListHelper.read(from: istr, tag: 2)
        self.s = try istr.read(tag: 3)
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: OptionalWithCustomTraits.staticId, compactId: -1, last: true)
        SmallStructListHelper.write(to: ostr, tag: 1, value: self.l)
        SmallStructListHelper.write(to: ostr, tag: 2, value: self.lp)
        ostr.write(tag: 3, value: self.s)
        ostr.endSlice()
    }
}

/// :nodoc:
public class E_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return E.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_E() -> Ice.ValueTypeResolver {
        return E_TypeResolver()
    }
}

open class E: Ice.Value {
    public var ae: A? = nil

    public required init() {}

    public init(ae: A?) {
        self.ae = ae
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return ETraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return ETraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.read(A.self) { self.ae = $0 }
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: ETraits.staticId, compactId: -1, last: true)
        ostr.write(self.ae)
        ostr.endSlice()
    }
}

/// :nodoc:
public class F_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return F.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_F() -> Ice.ValueTypeResolver {
        return F_TypeResolver()
    }
}

open class F: E {
    public var af: A? = nil

    public required init() {
        super.init()
    }

    public init(ae: A?, af: A?) {
        self.af = af
        super.init(ae: ae)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return FTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return FTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.read(tag: 1, value: A.self) { self.af = $0 }
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: FTraits.staticId, compactId: -1, last: false)
        ostr.write(tag: 1, value: self.af)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class G1_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return G1.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_G1() -> Ice.ValueTypeResolver {
        return G1_TypeResolver()
    }
}

open class G1: Ice.Value {
    public var a: Swift.String = ""

    public required init() {}

    public init(a: Swift.String) {
        self.a = a
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return G1Traits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return G1Traits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.a = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: G1Traits.staticId, compactId: -1, last: true)
        ostr.write(self.a)
        ostr.endSlice()
    }
}

/// :nodoc:
public class G2_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return G2.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_G2() -> Ice.ValueTypeResolver {
        return G2_TypeResolver()
    }
}

open class G2: Ice.Value {
    public var a: Swift.Int64 = 0

    public required init() {}

    public init(a: Swift.Int64) {
        self.a = a
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return G2Traits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return G2Traits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.a = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: G2Traits.staticId, compactId: -1, last: true)
        ostr.write(self.a)
        ostr.endSlice()
    }
}

/// :nodoc:
public class G_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return G.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_G() -> Ice.ValueTypeResolver {
        return G_TypeResolver()
    }
}

open class G: Ice.Value {
    public var gg1Opt: G1? = nil
    public var gg2: G2? = nil
    public var gg2Opt: G2? = nil
    public var gg1: G1? = nil

    public required init() {}

    public init(gg1Opt: G1?, gg2: G2?, gg2Opt: G2?, gg1: G1?) {
        self.gg1Opt = gg1Opt
        self.gg2 = gg2
        self.gg2Opt = gg2Opt
        self.gg1 = gg1
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return GTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return GTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.read(G2.self) { self.gg2 = $0 }
        try istr.read(G1.self) { self.gg1 = $0 }
        try istr.read(tag: 0, value: G2.self) { self.gg2Opt = $0 }
        try istr.read(tag: 1, value: G1.self) { self.gg1Opt = $0 }
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: GTraits.staticId, compactId: -1, last: true)
        ostr.write(self.gg2)
        ostr.write(self.gg1)
        ostr.write(tag: 0, value: self.gg2Opt)
        ostr.write(tag: 1, value: self.gg1Opt)
        ostr.endSlice()
    }
}


/// Dispatcher for `Initial` servants.
public struct InitialDisp: Ice.Disp {
    public let servant: Initial
    private static let defaultObject = Ice.ObjectI<InitialTraits>()

    public init(_ servant: Initial) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "ice_id":
            return try (servant as? Object ?? InitialDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? InitialDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? InitialDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? InitialDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "opBool":
            return try servant._iceD_opBool(incoming: request, current: current)
        case "opBoolSeq":
            return try servant._iceD_opBoolSeq(incoming: request, current: current)
        case "opByte":
            return try servant._iceD_opByte(incoming: request, current: current)
        case "opByteSeq":
            return try servant._iceD_opByteSeq(incoming: request, current: current)
        case "opClassAndUnknownOptional":
            return try servant._iceD_opClassAndUnknownOptional(incoming: request, current: current)
        case "opDerivedException":
            return try servant._iceD_opDerivedException(incoming: request, current: current)
        case "opDouble":
            return try servant._iceD_opDouble(incoming: request, current: current)
        case "opDoubleSeq":
            return try servant._iceD_opDoubleSeq(incoming: request, current: current)
        case "opFixedStruct":
            return try servant._iceD_opFixedStruct(incoming: request, current: current)
        case "opFixedStructList":
            return try servant._iceD_opFixedStructList(incoming: request, current: current)
        case "opFixedStructSeq":
            return try servant._iceD_opFixedStructSeq(incoming: request, current: current)
        case "opFloat":
            return try servant._iceD_opFloat(incoming: request, current: current)
        case "opFloatSeq":
            return try servant._iceD_opFloatSeq(incoming: request, current: current)
        case "opG":
            return try servant._iceD_opG(incoming: request, current: current)
        case "opInt":
            return try servant._iceD_opInt(incoming: request, current: current)
        case "opIntIntDict":
            return try servant._iceD_opIntIntDict(incoming: request, current: current)
        case "opIntOneOptionalDict":
            return try servant._iceD_opIntOneOptionalDict(incoming: request, current: current)
        case "opIntSeq":
            return try servant._iceD_opIntSeq(incoming: request, current: current)
        case "opLong":
            return try servant._iceD_opLong(incoming: request, current: current)
        case "opLongSeq":
            return try servant._iceD_opLongSeq(incoming: request, current: current)
        case "opMDict1":
            return try servant._iceD_opMDict1(incoming: request, current: current)
        case "opMDict2":
            return try servant._iceD_opMDict2(incoming: request, current: current)
        case "opMG1":
            return try servant._iceD_opMG1(incoming: request, current: current)
        case "opMG2":
            return try servant._iceD_opMG2(incoming: request, current: current)
        case "opMSeq1":
            return try servant._iceD_opMSeq1(incoming: request, current: current)
        case "opMSeq2":
            return try servant._iceD_opMSeq2(incoming: request, current: current)
        case "opMStruct1":
            return try servant._iceD_opMStruct1(incoming: request, current: current)
        case "opMStruct2":
            return try servant._iceD_opMStruct2(incoming: request, current: current)
        case "opMyEnum":
            return try servant._iceD_opMyEnum(incoming: request, current: current)
        case "opOneOptional":
            return try servant._iceD_opOneOptional(incoming: request, current: current)
        case "opOneOptionalProxy":
            return try servant._iceD_opOneOptionalProxy(incoming: request, current: current)
        case "opOptionalException":
            return try servant._iceD_opOptionalException(incoming: request, current: current)
        case "opRequiredException":
            return try servant._iceD_opRequiredException(incoming: request, current: current)
        case "opSerializable":
            return try servant._iceD_opSerializable(incoming: request, current: current)
        case "opShort":
            return try servant._iceD_opShort(incoming: request, current: current)
        case "opShortSeq":
            return try servant._iceD_opShortSeq(incoming: request, current: current)
        case "opSmallStruct":
            return try servant._iceD_opSmallStruct(incoming: request, current: current)
        case "opSmallStructList":
            return try servant._iceD_opSmallStructList(incoming: request, current: current)
        case "opSmallStructSeq":
            return try servant._iceD_opSmallStructSeq(incoming: request, current: current)
        case "opString":
            return try servant._iceD_opString(incoming: request, current: current)
        case "opStringIntDict":
            return try servant._iceD_opStringIntDict(incoming: request, current: current)
        case "opStringSeq":
            return try servant._iceD_opStringSeq(incoming: request, current: current)
        case "opVarStruct":
            return try servant._iceD_opVarStruct(incoming: request, current: current)
        case "opVarStructSeq":
            return try servant._iceD_opVarStructSeq(incoming: request, current: current)
        case "pingPong":
            return try servant._iceD_pingPong(incoming: request, current: current)
        case "returnOptionalClass":
            return try servant._iceD_returnOptionalClass(incoming: request, current: current)
        case "sendOptionalClass":
            return try servant._iceD_sendOptionalClass(incoming: request, current: current)
        case "shutdown":
            return try servant._iceD_shutdown(incoming: request, current: current)
        case "supportsCppStringView":
            return try servant._iceD_supportsCppStringView(incoming: request, current: current)
        case "supportsCsharpSerializable":
            return try servant._iceD_supportsCsharpSerializable(incoming: request, current: current)
        case "supportsJavaSerializable":
            return try servant._iceD_supportsJavaSerializable(incoming: request, current: current)
        case "supportsNullOptional":
            return try servant._iceD_supportsNullOptional(incoming: request, current: current)
        case "supportsRequiredParams":
            return try servant._iceD_supportsRequiredParams(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol Initial {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws

    ///
    /// - parameter o: `Ice.Value?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Ice.Value?`
    func pingPong(o: Ice.Value?, current: Ice.Current) throws -> Ice.Value?

    ///
    /// - parameter a: `Swift.Int32?`
    ///
    /// - parameter b: `Swift.String?`
    ///
    /// - parameter o: `OneOptional?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func opOptionalException(a: Swift.Int32?, b: Swift.String?, o: OneOptional?, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32?`
    ///
    /// - parameter b: `Swift.String?`
    ///
    /// - parameter o: `OneOptional?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func opDerivedException(a: Swift.Int32?, b: Swift.String?, o: OneOptional?, current: Ice.Current) throws

    ///
    /// - parameter a: `Swift.Int32?`
    ///
    /// - parameter b: `Swift.String?`
    ///
    /// - parameter o: `OneOptional?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func opRequiredException(a: Swift.Int32?, b: Swift.String?, o: OneOptional?, current: Ice.Current) throws

    ///
    /// - parameter p1: `Swift.UInt8?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: Swift.UInt8?, p3: Swift.UInt8?)`:
    ///
    ///   - returnValue: `Swift.UInt8?`
    ///
    ///   - p3: `Swift.UInt8?`
    func opByte(p1: Swift.UInt8?, current: Ice.Current) throws -> (returnValue: Swift.UInt8?, p3: Swift.UInt8?)

    ///
    /// - parameter p1: `Swift.Bool?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: Swift.Bool?, p3: Swift.Bool?)`:
    ///
    ///   - returnValue: `Swift.Bool?`
    ///
    ///   - p3: `Swift.Bool?`
    func opBool(p1: Swift.Bool?, current: Ice.Current) throws -> (returnValue: Swift.Bool?, p3: Swift.Bool?)

    ///
    /// - parameter p1: `Swift.Int16?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: Swift.Int16?, p3: Swift.Int16?)`:
    ///
    ///   - returnValue: `Swift.Int16?`
    ///
    ///   - p3: `Swift.Int16?`
    func opShort(p1: Swift.Int16?, current: Ice.Current) throws -> (returnValue: Swift.Int16?, p3: Swift.Int16?)

    ///
    /// - parameter p1: `Swift.Int32?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: Swift.Int32?, p3: Swift.Int32?)`:
    ///
    ///   - returnValue: `Swift.Int32?`
    ///
    ///   - p3: `Swift.Int32?`
    func opInt(p1: Swift.Int32?, current: Ice.Current) throws -> (returnValue: Swift.Int32?, p3: Swift.Int32?)

    ///
    /// - parameter p1: `Swift.Int64?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: Swift.Int64?, p3: Swift.Int64?)`:
    ///
    ///   - returnValue: `Swift.Int64?`
    ///
    ///   - p3: `Swift.Int64?`
    func opLong(p1: Swift.Int64?, current: Ice.Current) throws -> (returnValue: Swift.Int64?, p3: Swift.Int64?)

    ///
    /// - parameter p1: `Swift.Float?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: Swift.Float?, p3: Swift.Float?)`:
    ///
    ///   - returnValue: `Swift.Float?`
    ///
    ///   - p3: `Swift.Float?`
    func opFloat(p1: Swift.Float?, current: Ice.Current) throws -> (returnValue: Swift.Float?, p3: Swift.Float?)

    ///
    /// - parameter p1: `Swift.Double?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: Swift.Double?, p3: Swift.Double?)`:
    ///
    ///   - returnValue: `Swift.Double?`
    ///
    ///   - p3: `Swift.Double?`
    func opDouble(p1: Swift.Double?, current: Ice.Current) throws -> (returnValue: Swift.Double?, p3: Swift.Double?)

    ///
    /// - parameter p1: `Swift.String?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: Swift.String?, p3: Swift.String?)`:
    ///
    ///   - returnValue: `Swift.String?`
    ///
    ///   - p3: `Swift.String?`
    func opString(p1: Swift.String?, current: Ice.Current) throws -> (returnValue: Swift.String?, p3: Swift.String?)

    ///
    /// - parameter p1: `MyEnum?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: MyEnum?, p3: MyEnum?)`:
    ///
    ///   - returnValue: `MyEnum?`
    ///
    ///   - p3: `MyEnum?`
    func opMyEnum(p1: MyEnum?, current: Ice.Current) throws -> (returnValue: MyEnum?, p3: MyEnum?)

    ///
    /// - parameter p1: `SmallStruct?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SmallStruct?, p3: SmallStruct?)`:
    ///
    ///   - returnValue: `SmallStruct?`
    ///
    ///   - p3: `SmallStruct?`
    func opSmallStruct(p1: SmallStruct?, current: Ice.Current) throws -> (returnValue: SmallStruct?, p3: SmallStruct?)

    ///
    /// - parameter p1: `FixedStruct?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: FixedStruct?, p3: FixedStruct?)`:
    ///
    ///   - returnValue: `FixedStruct?`
    ///
    ///   - p3: `FixedStruct?`
    func opFixedStruct(p1: FixedStruct?, current: Ice.Current) throws -> (returnValue: FixedStruct?, p3: FixedStruct?)

    ///
    /// - parameter p1: `VarStruct?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: VarStruct?, p3: VarStruct?)`:
    ///
    ///   - returnValue: `VarStruct?`
    ///
    ///   - p3: `VarStruct?`
    func opVarStruct(p1: VarStruct?, current: Ice.Current) throws -> (returnValue: VarStruct?, p3: VarStruct?)

    ///
    /// - parameter p1: `OneOptional?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: OneOptional?, p3: OneOptional?)`:
    ///
    ///   - returnValue: `OneOptional?`
    ///
    ///   - p3: `OneOptional?`
    func opOneOptional(p1: OneOptional?, current: Ice.Current) throws -> (returnValue: OneOptional?, p3: OneOptional?)

    ///
    /// - parameter p1: `Ice.ObjectPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: Ice.ObjectPrx?, p3: Ice.ObjectPrx?)`:
    ///
    ///   - returnValue: `Ice.ObjectPrx?`
    ///
    ///   - p3: `Ice.ObjectPrx?`
    func opOneOptionalProxy(p1: Ice.ObjectPrx?, current: Ice.Current) throws -> (returnValue: Ice.ObjectPrx?, p3: Ice.ObjectPrx?)

    ///
    /// - parameter p1: `ByteSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteSeq?, p3: ByteSeq?)`:
    ///
    ///   - returnValue: `ByteSeq?`
    ///
    ///   - p3: `ByteSeq?`
    func opByteSeq(p1: ByteSeq?, current: Ice.Current) throws -> (returnValue: ByteSeq?, p3: ByteSeq?)

    ///
    /// - parameter p1: `BoolSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: BoolSeq?, p3: BoolSeq?)`:
    ///
    ///   - returnValue: `BoolSeq?`
    ///
    ///   - p3: `BoolSeq?`
    func opBoolSeq(p1: BoolSeq?, current: Ice.Current) throws -> (returnValue: BoolSeq?, p3: BoolSeq?)

    ///
    /// - parameter p1: `ShortSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortSeq?, p3: ShortSeq?)`:
    ///
    ///   - returnValue: `ShortSeq?`
    ///
    ///   - p3: `ShortSeq?`
    func opShortSeq(p1: ShortSeq?, current: Ice.Current) throws -> (returnValue: ShortSeq?, p3: ShortSeq?)

    ///
    /// - parameter p1: `IntSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntSeq?, p3: IntSeq?)`:
    ///
    ///   - returnValue: `IntSeq?`
    ///
    ///   - p3: `IntSeq?`
    func opIntSeq(p1: IntSeq?, current: Ice.Current) throws -> (returnValue: IntSeq?, p3: IntSeq?)

    ///
    /// - parameter p1: `LongSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: LongSeq?, p3: LongSeq?)`:
    ///
    ///   - returnValue: `LongSeq?`
    ///
    ///   - p3: `LongSeq?`
    func opLongSeq(p1: LongSeq?, current: Ice.Current) throws -> (returnValue: LongSeq?, p3: LongSeq?)

    ///
    /// - parameter p1: `FloatSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: FloatSeq?, p3: FloatSeq?)`:
    ///
    ///   - returnValue: `FloatSeq?`
    ///
    ///   - p3: `FloatSeq?`
    func opFloatSeq(p1: FloatSeq?, current: Ice.Current) throws -> (returnValue: FloatSeq?, p3: FloatSeq?)

    ///
    /// - parameter p1: `DoubleSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: DoubleSeq?, p3: DoubleSeq?)`:
    ///
    ///   - returnValue: `DoubleSeq?`
    ///
    ///   - p3: `DoubleSeq?`
    func opDoubleSeq(p1: DoubleSeq?, current: Ice.Current) throws -> (returnValue: DoubleSeq?, p3: DoubleSeq?)

    ///
    /// - parameter p1: `StringSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringSeq?, p3: StringSeq?)`:
    ///
    ///   - returnValue: `StringSeq?`
    ///
    ///   - p3: `StringSeq?`
    func opStringSeq(p1: StringSeq?, current: Ice.Current) throws -> (returnValue: StringSeq?, p3: StringSeq?)

    ///
    /// - parameter p1: `SmallStructSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SmallStructSeq?, p3: SmallStructSeq?)`:
    ///
    ///   - returnValue: `SmallStructSeq?`
    ///
    ///   - p3: `SmallStructSeq?`
    func opSmallStructSeq(p1: SmallStructSeq?, current: Ice.Current) throws -> (returnValue: SmallStructSeq?, p3: SmallStructSeq?)

    ///
    /// - parameter p1: `SmallStructList?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SmallStructList?, p3: SmallStructList?)`:
    ///
    ///   - returnValue: `SmallStructList?`
    ///
    ///   - p3: `SmallStructList?`
    func opSmallStructList(p1: SmallStructList?, current: Ice.Current) throws -> (returnValue: SmallStructList?, p3: SmallStructList?)

    ///
    /// - parameter p1: `FixedStructSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: FixedStructSeq?, p3: FixedStructSeq?)`:
    ///
    ///   - returnValue: `FixedStructSeq?`
    ///
    ///   - p3: `FixedStructSeq?`
    func opFixedStructSeq(p1: FixedStructSeq?, current: Ice.Current) throws -> (returnValue: FixedStructSeq?, p3: FixedStructSeq?)

    ///
    /// - parameter p1: `FixedStructList?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: FixedStructList?, p3: FixedStructList?)`:
    ///
    ///   - returnValue: `FixedStructList?`
    ///
    ///   - p3: `FixedStructList?`
    func opFixedStructList(p1: FixedStructList?, current: Ice.Current) throws -> (returnValue: FixedStructList?, p3: FixedStructList?)

    ///
    /// - parameter p1: `VarStructSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: VarStructSeq?, p3: VarStructSeq?)`:
    ///
    ///   - returnValue: `VarStructSeq?`
    ///
    ///   - p3: `VarStructSeq?`
    func opVarStructSeq(p1: VarStructSeq?, current: Ice.Current) throws -> (returnValue: VarStructSeq?, p3: VarStructSeq?)

    ///
    /// - parameter p1: `Serializable?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: Serializable?, p3: Serializable?)`:
    ///
    ///   - returnValue: `Serializable?`
    ///
    ///   - p3: `Serializable?`
    func opSerializable(p1: Serializable?, current: Ice.Current) throws -> (returnValue: Serializable?, p3: Serializable?)

    ///
    /// - parameter p1: `IntIntDict?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntIntDict?, p3: IntIntDict?)`:
    ///
    ///   - returnValue: `IntIntDict?`
    ///
    ///   - p3: `IntIntDict?`
    func opIntIntDict(p1: IntIntDict?, current: Ice.Current) throws -> (returnValue: IntIntDict?, p3: IntIntDict?)

    ///
    /// - parameter p1: `StringIntDict?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringIntDict?, p3: StringIntDict?)`:
    ///
    ///   - returnValue: `StringIntDict?`
    ///
    ///   - p3: `StringIntDict?`
    func opStringIntDict(p1: StringIntDict?, current: Ice.Current) throws -> (returnValue: StringIntDict?, p3: StringIntDict?)

    ///
    /// - parameter p1: `IntOneOptionalDict?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntOneOptionalDict?, p3: IntOneOptionalDict?)`:
    ///
    ///   - returnValue: `IntOneOptionalDict?`
    ///
    ///   - p3: `IntOneOptionalDict?`
    func opIntOneOptionalDict(p1: IntOneOptionalDict?, current: Ice.Current) throws -> (returnValue: IntOneOptionalDict?, p3: IntOneOptionalDict?)

    ///
    /// - parameter p: `A?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func opClassAndUnknownOptional(p: A?, current: Ice.Current) throws

    ///
    /// - parameter req: `Swift.Bool`
    ///
    /// - parameter o: `OneOptional?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func sendOptionalClass(req: Swift.Bool, o: OneOptional?, current: Ice.Current) throws

    ///
    /// - parameter req: `Swift.Bool`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `OneOptional?`
    func returnOptionalClass(req: Swift.Bool, current: Ice.Current) throws -> OneOptional?

    ///
    /// - parameter g: `G?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `G?`
    func opG(g: G?, current: Ice.Current) throws -> G?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `SmallStruct?`
    func opMStruct1(current: Ice.Current) throws -> SmallStruct?

    ///
    /// - parameter p1: `SmallStruct?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SmallStruct?, p2: SmallStruct?)`:
    ///
    ///   - returnValue: `SmallStruct?`
    ///
    ///   - p2: `SmallStruct?`
    func opMStruct2(p1: SmallStruct?, current: Ice.Current) throws -> (returnValue: SmallStruct?, p2: SmallStruct?)

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `StringSeq?`
    func opMSeq1(current: Ice.Current) throws -> StringSeq?

    ///
    /// - parameter p1: `StringSeq?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringSeq?, p2: StringSeq?)`:
    ///
    ///   - returnValue: `StringSeq?`
    ///
    ///   - p2: `StringSeq?`
    func opMSeq2(p1: StringSeq?, current: Ice.Current) throws -> (returnValue: StringSeq?, p2: StringSeq?)

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `StringIntDict?`
    func opMDict1(current: Ice.Current) throws -> StringIntDict?

    ///
    /// - parameter p1: `StringIntDict?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: StringIntDict?, p2: StringIntDict?)`:
    ///
    ///   - returnValue: `StringIntDict?`
    ///
    ///   - p2: `StringIntDict?`
    func opMDict2(p1: StringIntDict?, current: Ice.Current) throws -> (returnValue: StringIntDict?, p2: StringIntDict?)

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `G?`
    func opMG1(current: Ice.Current) throws -> G?

    ///
    /// - parameter p1: `G?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: G?, p2: G?)`:
    ///
    ///   - returnValue: `G?`
    ///
    ///   - p2: `G?`
    func opMG2(p1: G?, current: Ice.Current) throws -> (returnValue: G?, p2: G?)

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Bool`
    func supportsRequiredParams(current: Ice.Current) throws -> Swift.Bool

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Bool`
    func supportsJavaSerializable(current: Ice.Current) throws -> Swift.Bool

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Bool`
    func supportsCsharpSerializable(current: Ice.Current) throws -> Swift.Bool

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Bool`
    func supportsCppStringView(current: Ice.Current) throws -> Swift.Bool

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Bool`
    func supportsNullOptional(current: Ice.Current) throws -> Swift.Bool
}

/// Initial overview.
///
/// Initial Methods:
///
///  - shutdown: 
///
///  - pingPong: 
///
///  - opOptionalException: 
///
///  - opDerivedException: 
///
///  - opRequiredException: 
///
///  - opByte: 
///
///  - opBool: 
///
///  - opShort: 
///
///  - opInt: 
///
///  - opLong: 
///
///  - opFloat: 
///
///  - opDouble: 
///
///  - opString: 
///
///  - opMyEnum: 
///
///  - opSmallStruct: 
///
///  - opFixedStruct: 
///
///  - opVarStruct: 
///
///  - opOneOptional: 
///
///  - opOneOptionalProxy: 
///
///  - opByteSeq: 
///
///  - opBoolSeq: 
///
///  - opShortSeq: 
///
///  - opIntSeq: 
///
///  - opLongSeq: 
///
///  - opFloatSeq: 
///
///  - opDoubleSeq: 
///
///  - opStringSeq: 
///
///  - opSmallStructSeq: 
///
///  - opSmallStructList: 
///
///  - opFixedStructSeq: 
///
///  - opFixedStructList: 
///
///  - opVarStructSeq: 
///
///  - opSerializable: 
///
///  - opIntIntDict: 
///
///  - opStringIntDict: 
///
///  - opIntOneOptionalDict: 
///
///  - opClassAndUnknownOptional: 
///
///  - sendOptionalClass: 
///
///  - returnOptionalClass: 
///
///  - opG: 
///
///  - opMStruct1: 
///
///  - opMStruct2: 
///
///  - opMSeq1: 
///
///  - opMSeq2: 
///
///  - opMDict1: 
///
///  - opMDict2: 
///
///  - opMG1: 
///
///  - opMG2: 
///
///  - supportsRequiredParams: 
///
///  - supportsJavaSerializable: 
///
///  - supportsCsharpSerializable: 
///
///  - supportsCppStringView: 
///
///  - supportsNullOptional: 
public extension Initial {
    func _iceD_shutdown(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.shutdown(current: current)

        return inS.setResult()
    }

    func _iceD_pingPong(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_o: Ice.Value? = try inS.read { istr in
            var iceP_o: Ice.Value?
            try istr.read() { iceP_o = $0 }
            try istr.readPendingValues()
            return iceP_o
        }

        let iceP_returnValue = try self.pingPong(o: iceP_o, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    func _iceD_opOptionalException(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_a, iceP_b, iceP_o): (Swift.Int32?, Swift.String?, OneOptional?) = try inS.read { istr in
            let iceP_a: Swift.Int32? = try istr.read(tag: 1)
            let iceP_b: Swift.String? = try istr.read(tag: 2)
            var iceP_o: OneOptional?
            try istr.read(tag: 3, value: OneOptional.self) { iceP_o = $0 }
            return (iceP_a, iceP_b, iceP_o)
        }

        try self.opOptionalException(a: iceP_a, b: iceP_b, o: iceP_o, current: current)

        return inS.setResult()
    }

    func _iceD_opDerivedException(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_a, iceP_b, iceP_o): (Swift.Int32?, Swift.String?, OneOptional?) = try inS.read { istr in
            let iceP_a: Swift.Int32? = try istr.read(tag: 1)
            let iceP_b: Swift.String? = try istr.read(tag: 2)
            var iceP_o: OneOptional?
            try istr.read(tag: 3, value: OneOptional.self) { iceP_o = $0 }
            return (iceP_a, iceP_b, iceP_o)
        }

        try self.opDerivedException(a: iceP_a, b: iceP_b, o: iceP_o, current: current)

        return inS.setResult()
    }

    func _iceD_opRequiredException(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_a, iceP_b, iceP_o): (Swift.Int32?, Swift.String?, OneOptional?) = try inS.read { istr in
            let iceP_a: Swift.Int32? = try istr.read(tag: 1)
            let iceP_b: Swift.String? = try istr.read(tag: 2)
            var iceP_o: OneOptional?
            try istr.read(tag: 3, value: OneOptional.self) { iceP_o = $0 }
            return (iceP_a, iceP_b, iceP_o)
        }

        try self.opRequiredException(a: iceP_a, b: iceP_b, o: iceP_o, current: current)

        return inS.setResult()
    }

    func _iceD_opByte(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: Swift.UInt8? = try inS.read { istr in
            let iceP_p1: Swift.UInt8? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opByte(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opBool(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: Swift.Bool? = try inS.read { istr in
            let iceP_p1: Swift.Bool? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opBool(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opShort(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: Swift.Int16? = try inS.read { istr in
            let iceP_p1: Swift.Int16? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opShort(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opInt(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: Swift.Int32? = try inS.read { istr in
            let iceP_p1: Swift.Int32? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opInt(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opLong(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: Swift.Int64? = try inS.read { istr in
            let iceP_p1: Swift.Int64? = try istr.read(tag: 1)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opLong(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 2, value: iceP_p3)
            ostr.write(tag: 3, value: iceP_returnValue)
        }
    }

    func _iceD_opFloat(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: Swift.Float? = try inS.read { istr in
            let iceP_p1: Swift.Float? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opFloat(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opDouble(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: Swift.Double? = try inS.read { istr in
            let iceP_p1: Swift.Double? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opDouble(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opString(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: Swift.String? = try inS.read { istr in
            let iceP_p1: Swift.String? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opString(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opMyEnum(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: MyEnum? = try inS.read { istr in
            let iceP_p1: MyEnum? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opMyEnum(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opSmallStruct(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: SmallStruct? = try inS.read { istr in
            let iceP_p1: SmallStruct? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opSmallStruct(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opFixedStruct(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: FixedStruct? = try inS.read { istr in
            let iceP_p1: FixedStruct? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opFixedStruct(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opVarStruct(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: VarStruct? = try inS.read { istr in
            let iceP_p1: VarStruct? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opVarStruct(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opOneOptional(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: OneOptional? = try inS.read { istr in
            var iceP_p1: OneOptional?
            try istr.read(tag: 2, value: OneOptional.self) { iceP_p1 = $0 }
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opOneOptional(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opOneOptionalProxy(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: Ice.ObjectPrx? = try inS.read { istr in
            let iceP_p1: Ice.ObjectPrx? = try istr.read(tag: 2, type: Ice.ObjectPrx.self)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opOneOptionalProxy(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opByteSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: ByteSeq? = try inS.read { istr in
            let iceP_p1: ByteSeq? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opByteSeq(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opBoolSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: BoolSeq? = try inS.read { istr in
            let iceP_p1: BoolSeq? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opBoolSeq(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opShortSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: ShortSeq? = try inS.read { istr in
            let iceP_p1: ShortSeq? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opShortSeq(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opIntSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: IntSeq? = try inS.read { istr in
            let iceP_p1: IntSeq? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opIntSeq(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opLongSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: LongSeq? = try inS.read { istr in
            let iceP_p1: LongSeq? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opLongSeq(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opFloatSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: FloatSeq? = try inS.read { istr in
            let iceP_p1: FloatSeq? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opFloatSeq(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opDoubleSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: DoubleSeq? = try inS.read { istr in
            let iceP_p1: DoubleSeq? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opDoubleSeq(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opStringSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: StringSeq? = try inS.read { istr in
            let iceP_p1: StringSeq? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opStringSeq(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opSmallStructSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: SmallStructSeq? = try inS.read { istr in
            let iceP_p1: SmallStructSeq? = try SmallStructSeqHelper.read(from: istr, tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opSmallStructSeq(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            SmallStructSeqHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            SmallStructSeqHelper.write(to: ostr, tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opSmallStructList(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: SmallStructList? = try inS.read { istr in
            let iceP_p1: SmallStructList? = try SmallStructListHelper.read(from: istr, tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opSmallStructList(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            SmallStructListHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            SmallStructListHelper.write(to: ostr, tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opFixedStructSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: FixedStructSeq? = try inS.read { istr in
            let iceP_p1: FixedStructSeq? = try FixedStructSeqHelper.read(from: istr, tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opFixedStructSeq(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            FixedStructSeqHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            FixedStructSeqHelper.write(to: ostr, tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opFixedStructList(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: FixedStructList? = try inS.read { istr in
            let iceP_p1: FixedStructList? = try FixedStructListHelper.read(from: istr, tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opFixedStructList(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            FixedStructListHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            FixedStructListHelper.write(to: ostr, tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opVarStructSeq(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: VarStructSeq? = try inS.read { istr in
            let iceP_p1: VarStructSeq? = try VarStructSeqHelper.read(from: istr, tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opVarStructSeq(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            VarStructSeqHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            VarStructSeqHelper.write(to: ostr, tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opSerializable(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: Serializable? = try inS.read { istr in
            let iceP_p1: Serializable? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opSerializable(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opIntIntDict(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: IntIntDict? = try inS.read { istr in
            let iceP_p1: IntIntDict? = try IntIntDictHelper.read(from: istr, tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opIntIntDict(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            IntIntDictHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            IntIntDictHelper.write(to: ostr, tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opStringIntDict(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: StringIntDict? = try inS.read { istr in
            let iceP_p1: StringIntDict? = try StringIntDictHelper.read(from: istr, tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opStringIntDict(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            StringIntDictHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            StringIntDictHelper.write(to: ostr, tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opIntOneOptionalDict(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: IntOneOptionalDict? = try inS.read { istr in
            let iceP_p1: IntOneOptionalDict? = try IntOneOptionalDictHelper.read(from: istr, tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p3) = try self.opIntOneOptionalDict(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            IntOneOptionalDictHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            IntOneOptionalDictHelper.write(to: ostr, tag: 3, value: iceP_p3)
        }
    }

    func _iceD_opClassAndUnknownOptional(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p: A? = try inS.read { istr in
            var iceP_p: A?
            try istr.read(A.self) { iceP_p = $0 }
            try istr.readPendingValues()
            return iceP_p
        }

        try self.opClassAndUnknownOptional(p: iceP_p, current: current)

        return inS.setResult()
    }

    func _iceD_sendOptionalClass(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let (iceP_req, iceP_o): (Swift.Bool, OneOptional?) = try inS.read { istr in
            let iceP_req: Swift.Bool = try istr.read()
            var iceP_o: OneOptional?
            try istr.read(tag: 1, value: OneOptional.self) { iceP_o = $0 }
            return (iceP_req, iceP_o)
        }

        try self.sendOptionalClass(req: iceP_req, o: iceP_o, current: current)

        return inS.setResult()
    }

    func _iceD_returnOptionalClass(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_req: Swift.Bool = try inS.read { istr in
            let iceP_req: Swift.Bool = try istr.read()
            return iceP_req
        }

        let iceP_o = try self.returnOptionalClass(req: iceP_req, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_o)
        }
    }

    func _iceD_opG(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_g: G? = try inS.read { istr in
            var iceP_g: G?
            try istr.read(G.self) { iceP_g = $0 }
            try istr.readPendingValues()
            return iceP_g
        }

        let iceP_returnValue = try self.opG(g: iceP_g, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
            ostr.writePendingValues()
        }
    }

    func _iceD_opMStruct1(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.opMStruct1(current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
        }
    }

    func _iceD_opMStruct2(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: SmallStruct? = try inS.read { istr in
            let iceP_p1: SmallStruct? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p2) = try self.opMStruct2(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p2)
        }
    }

    func _iceD_opMSeq1(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.opMSeq1(current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
        }
    }

    func _iceD_opMSeq2(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: StringSeq? = try inS.read { istr in
            let iceP_p1: StringSeq? = try istr.read(tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p2) = try self.opMSeq2(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p2)
        }
    }

    func _iceD_opMDict1(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.opMDict1(current: current)

        return inS.setResult{ ostr in
            StringIntDictHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
        }
    }

    func _iceD_opMDict2(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: StringIntDict? = try inS.read { istr in
            let iceP_p1: StringIntDict? = try StringIntDictHelper.read(from: istr, tag: 2)
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p2) = try self.opMDict2(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            StringIntDictHelper.write(to: ostr, tag: 1, value: iceP_returnValue)
            StringIntDictHelper.write(to: ostr, tag: 3, value: iceP_p2)
        }
    }

    func _iceD_opMG1(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.opMG1(current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
        }
    }

    func _iceD_opMG2(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p1: G? = try inS.read { istr in
            var iceP_p1: G?
            try istr.read(tag: 2, value: G.self) { iceP_p1 = $0 }
            return iceP_p1
        }

        let (iceP_returnValue, iceP_p2) = try self.opMG2(p1: iceP_p1, current: current)

        return inS.setResult{ ostr in
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 3, value: iceP_p2)
        }
    }

    func _iceD_supportsRequiredParams(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.supportsRequiredParams(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_supportsJavaSerializable(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.supportsJavaSerializable(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_supportsCsharpSerializable(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.supportsCsharpSerializable(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_supportsCppStringView(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.supportsCppStringView(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_supportsNullOptional(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.supportsNullOptional(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}
