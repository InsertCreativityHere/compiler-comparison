//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public enum array: Swift.UInt8 {
    /// `as`
    case `as` = 0
    public init() {
        self = .`as`
    }
}

/// An `Ice.InputStream` extension to read `array` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `array` - The enumarated value.
    func read() throws -> array {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 0)
        guard let val = array(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `array` - The enumerated value.
    func read(tag: Swift.Int32) throws -> array? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as array
    }
}

/// An `Ice.OutputStream` extension to write `array` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `array` - The enumerator to write.
    func write(_ v: array) {
        write(enum: v.rawValue, maxValue: 0)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `array` - The enumerator to write.
    func write(tag: Swift.Int32, value: array?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 0)
    }
}

public struct xor: Swift.Hashable {
    public var abstract: Swift.Int32 = 0
    public var clone: Swift.Int32 = 0
    public var `private`: Swift.Int32 = 0
    public var protected: Swift.Int32 = 0
    public var `public`: Swift.Int32 = 0
    public var this: Swift.Int32 = 0
    public var `throw`: Swift.Int32 = 0
    public var use: Swift.Int32 = 0
    public var `var`: Swift.Int32 = 0

    public init() {}

    public init(abstract: Swift.Int32, clone: Swift.Int32, `private`: Swift.Int32, protected: Swift.Int32, `public`: Swift.Int32, this: Swift.Int32, `throw`: Swift.Int32, use: Swift.Int32, `var`: Swift.Int32) {
        self.abstract = abstract
        self.clone = clone
        self.`private` = `private`
        self.protected = protected
        self.`public` = `public`
        self.this = this
        self.`throw` = `throw`
        self.use = use
        self.`var` = `var`
    }
}

/// An `Ice.InputStream` extension to read `xor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `xor` structured value from the stream.
    ///
    /// - returns: `xor` - The structured value read from the stream.
    func read() throws -> xor {
        var v = xor()
        v.abstract = try self.read()
        v.clone = try self.read()
        v.`private` = try self.read()
        v.protected = try self.read()
        v.`public` = try self.read()
        v.this = try self.read()
        v.`throw` = try self.read()
        v.use = try self.read()
        v.`var` = try self.read()
        return v
    }

    /// Read an optional `xor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `xor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> xor? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as xor
    }
}

/// An `Ice.OutputStream` extension to write `xor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `xor` structured value to the stream.
    ///
    /// - parameter _: `xor` - The value to write to the stream.
    func write(_ v: xor) {
        self.write(v.abstract)
        self.write(v.clone)
        self.write(v.`private`)
        self.write(v.protected)
        self.write(v.`public`)
        self.write(v.this)
        self.write(v.`throw`)
        self.write(v.use)
        self.write(v.`var`)
    }

    /// Write an optional `xor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `xor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: xor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 36)
                write(v)
            }
        }
    }
}

/// Traits for Slice interface``break``.
public struct breakTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::and::break"]
    public static let staticId = "::and::break"
}

/// Traits for Slice interface`function`.
public struct functionTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::and::function"]
    public static let staticId = "::and::function"
}

/// Traits for Slice interface`die`.
public struct dieTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::and::die"]
    public static let staticId = "::and::die"
}

/// Traits for Slice interface`enddeclare`.
public struct enddeclareTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::and::die", "::and::enddeclare", "::and::function"]
    public static let staticId = "::and::enddeclare"
}

public typealias endfor = [array]

/// Helper class to read and write `endfor` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct endforHelper {
    /// Read a `endfor` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `endfor` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> endfor {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = endfor()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: array = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `endfor?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `endfor` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> endfor? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `endfor` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `endfor` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: endfor) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `endfor?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `endfor` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: endfor?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias endforeach = [Swift.String: array]

/// Helper class to read and write `endforeach` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct endforeachHelper {
    /// Read a `endforeach` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `endforeach` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> endforeach {
        let sz = try Swift.Int(istr.readSize())
        var v = endforeach()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: array = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `endforeach?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `endforeach` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> endforeach? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `endforeach` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `endforeach` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: endforeach) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `endforeach?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `endforeach` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: endforeach?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// :nodoc:
public class endif_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return endif.self
    }
}

public extension Ice.ClassResolver {
    @objc static func and_endif() -> Ice.UserExceptionTypeResolver {
        return endif_TypeResolver()
    }
}

open class endif: Ice.UserException {
    public var endswitch: Swift.Int32 = 0

    public required init() {}

    public init(endswitch: Swift.Int32) {
        self.endswitch = endswitch
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::and::endif" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: endif.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.endswitch)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.endswitch = try istr.read()
        try istr.endSlice()
    }
}

/// :nodoc:
public class endwhile_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return endwhile.self
    }
}

public extension Ice.ClassResolver {
    @objc static func and_endwhile() -> Ice.UserExceptionTypeResolver {
        return endwhile_TypeResolver()
    }
}

open class endwhile: endif {
    public var eval: Swift.Int32 = 0
    public var exit: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(endswitch: Swift.Int32, eval: Swift.Int32, exit: Swift.Int32) {
        self.eval = eval
        self.exit = exit
        super.init(endswitch: endswitch)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::and::endwhile" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: endwhile.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.eval)
        ostr.write(self.exit)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.eval = try istr.read()
        self.exit = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// Traits for Slice interface``for``.
public struct forTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::and::for"]
    public static let staticId = "::and::for"
}
public let or: Swift.Int32 = 0

public let print: Swift.Int32 = 0

public let require_once: Swift.Int32 = 0


/// breakPrx overview.
///
/// breakPrx Methods:
///
///  - `case`: 
///
///  - caseAsync: 
public protocol breakPrx: Ice.ObjectPrx {}

private final class breakPrxI: Ice.ObjectPrxI, breakPrx {
    public override class func ice_staticId() -> Swift.String {
        return breakTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: breakPrx.Protocol) throws -> breakPrx {
    try communicator.makeProxyImpl(proxyString) as breakPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `breakPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `breakPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: breakPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> breakPrx? {
    return try await breakPrxI.checkedCast(prx: prx, facet: facet, context: context) as breakPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `breakPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `breakPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: breakPrx.Protocol, facet: Swift.String? = nil) -> breakPrx {
    return breakPrxI.uncheckedCast(prx: prx, facet: facet) as breakPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `breakPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: breakPrx.Protocol) -> Swift.String {
    return breakTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `breakPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `breakPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `breakPrx?` - The extracted proxy
    func read(_ type: breakPrx.Protocol) throws -> breakPrx? {
        return try read() as breakPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `breakPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `breakPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: breakPrx.Protocol) throws -> breakPrx? {
        return try read(tag: tag) as breakPrxI?
    }
}

/// breakPrx overview.
///
/// breakPrx Methods:
///
///  - `case`: 
///
///  - caseAsync: 
public extension breakPrx {
    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func `case`(_ iceP_catch: Swift.Int32, context: Ice.Context? = nil) async throws -> Swift.Int32 {
        return try await _impl._invoke(operation: "case",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_catch)
                                       },
                                       read: { istr in
                                           let iceP_try: Swift.Int32 = try istr.read()
                                           return iceP_try
                                       },
                                       context: context)
    }
}

/// functionPrx overview.
///
/// functionPrx Methods:
///
///  - `continue`: 
///
///  - continueAsync: 
public protocol functionPrx: Ice.ObjectPrx {}

private final class functionPrxI: Ice.ObjectPrxI, functionPrx {
    public override class func ice_staticId() -> Swift.String {
        return functionTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: functionPrx.Protocol) throws -> functionPrx {
    try communicator.makeProxyImpl(proxyString) as functionPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `functionPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `functionPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: functionPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> functionPrx? {
    return try await functionPrxI.checkedCast(prx: prx, facet: facet, context: context) as functionPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `functionPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `functionPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: functionPrx.Protocol, facet: Swift.String? = nil) -> functionPrx {
    return functionPrxI.uncheckedCast(prx: prx, facet: facet) as functionPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `functionPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: functionPrx.Protocol) -> Swift.String {
    return functionTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `functionPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `functionPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `functionPrx?` - The extracted proxy
    func read(_ type: functionPrx.Protocol) throws -> functionPrx? {
        return try read() as functionPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `functionPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `functionPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: functionPrx.Protocol) throws -> functionPrx? {
        return try read(tag: tag) as functionPrxI?
    }
}

/// functionPrx overview.
///
/// functionPrx Methods:
///
///  - `continue`: 
///
///  - continueAsync: 
public extension functionPrx {
    ///
    /// - parameter declare: `Swift.Int32`
    ///
    /// - parameter default: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func `continue`(declare iceP_declare: Swift.Int32, default iceP_default: Swift.Int32, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "continue",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_declare)
                                           ostr.write(iceP_default)
                                       },
                                       context: context)
    }
}

/// diePrx overview.
///
/// diePrx Methods:
///
///  - `do`: 
///
///  - doAsync: 
public protocol diePrx: Ice.ObjectPrx {}

private final class diePrxI: Ice.ObjectPrxI, diePrx {
    public override class func ice_staticId() -> Swift.String {
        return dieTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: diePrx.Protocol) throws -> diePrx {
    try communicator.makeProxyImpl(proxyString) as diePrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `diePrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `diePrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: diePrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> diePrx? {
    return try await diePrxI.checkedCast(prx: prx, facet: facet, context: context) as diePrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `diePrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `diePrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: diePrx.Protocol, facet: Swift.String? = nil) -> diePrx {
    return diePrxI.uncheckedCast(prx: prx, facet: facet) as diePrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `diePrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: diePrx.Protocol) -> Swift.String {
    return dieTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `diePrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `diePrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `diePrx?` - The extracted proxy
    func read(_ type: diePrx.Protocol) throws -> diePrx? {
        return try read() as diePrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `diePrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `diePrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: diePrx.Protocol) throws -> diePrx? {
        return try read(tag: tag) as diePrxI?
    }
}

/// diePrx overview.
///
/// diePrx Methods:
///
///  - `do`: 
///
///  - doAsync: 
public extension diePrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func `do`(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "do",
                                       mode: .Normal,
                                       context: context)
    }
}

/// enddeclarePrx overview.
public protocol enddeclarePrx: diePrx, functionPrx {}

private final class enddeclarePrxI: Ice.ObjectPrxI, enddeclarePrx {
    public override class func ice_staticId() -> Swift.String {
        return enddeclareTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: enddeclarePrx.Protocol) throws -> enddeclarePrx {
    try communicator.makeProxyImpl(proxyString) as enddeclarePrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `enddeclarePrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `enddeclarePrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: enddeclarePrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> enddeclarePrx? {
    return try await enddeclarePrxI.checkedCast(prx: prx, facet: facet, context: context) as enddeclarePrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `enddeclarePrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `enddeclarePrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: enddeclarePrx.Protocol, facet: Swift.String? = nil) -> enddeclarePrx {
    return enddeclarePrxI.uncheckedCast(prx: prx, facet: facet) as enddeclarePrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `enddeclarePrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: enddeclarePrx.Protocol) -> Swift.String {
    return enddeclareTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `enddeclarePrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `enddeclarePrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `enddeclarePrx?` - The extracted proxy
    func read(_ type: enddeclarePrx.Protocol) throws -> enddeclarePrx? {
        return try read() as enddeclarePrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `enddeclarePrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `enddeclarePrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: enddeclarePrx.Protocol) throws -> enddeclarePrx? {
        return try read(tag: tag) as enddeclarePrxI?
    }
}

/// enddeclarePrx overview.
public extension enddeclarePrx {}

/// forPrx overview.
///
/// forPrx Methods:
///
///  - foreach: 
///
///  - foreachAsync: 
public protocol forPrx: Ice.ObjectPrx {}

private final class forPrxI: Ice.ObjectPrxI, forPrx {
    public override class func ice_staticId() -> Swift.String {
        return forTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: forPrx.Protocol) throws -> forPrx {
    try communicator.makeProxyImpl(proxyString) as forPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `forPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `forPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: forPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> forPrx? {
    return try await forPrxI.checkedCast(prx: prx, facet: facet, context: context) as forPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `forPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `forPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: forPrx.Protocol, facet: Swift.String? = nil) -> forPrx {
    return forPrxI.uncheckedCast(prx: prx, facet: facet) as forPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `forPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: forPrx.Protocol) -> Swift.String {
    return forTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `forPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `forPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `forPrx?` - The extracted proxy
    func read(_ type: forPrx.Protocol) throws -> forPrx? {
        return try read() as forPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `forPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `forPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: forPrx.Protocol) throws -> forPrx? {
        return try read(tag: tag) as forPrxI?
    }
}

/// forPrx overview.
///
/// forPrx Methods:
///
///  - foreach: 
///
///  - foreachAsync: 
public extension forPrx {
    ///
    /// - parameter if: `breakPrx?`
    ///
    /// - parameter global: `echo?`
    ///
    /// - parameter include: `functionPrx?`
    ///
    /// - parameter return: `diePrx?`
    ///
    /// - parameter list: `enddeclarePrx?`
    ///
    /// - parameter new: `Swift.Int32`
    ///
    /// - parameter static: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `array`
    func foreach(if iceP_if: breakPrx?, global iceP_global: echo?, include iceP_include: functionPrx?, return iceP_return: diePrx?, list iceP_list: enddeclarePrx?, new iceP_new: Swift.Int32, static iceP_static: Swift.Int32, context: Ice.Context? = nil) async throws -> array {
        return try await _impl._invoke(operation: "foreach",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_if)
                                           ostr.write(iceP_global)
                                           ostr.write(iceP_include)
                                           ostr.write(iceP_return)
                                           ostr.write(iceP_list)
                                           ostr.write(iceP_new)
                                           ostr.write(iceP_static)
                                           ostr.writePendingValues()
                                       },
                                       read: { istr in
                                           let iceP_returnValue: array = try istr.read()
                                           return iceP_returnValue
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as endwhile {
                                               throw error
                                           } catch let error as endif {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }
}

/// :nodoc:
public class echo_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return echo.self
    }
}

public extension Ice.ClassResolver {
    @objc static func and_echo() -> Ice.ValueTypeResolver {
        return echo_TypeResolver()
    }
}

open class echo: Ice.Value {
    public var `if`: Swift.Int32 = 0
    public var `else`: Swift.Int32 = 0
    public var elseif: diePrx? = nil
    public var empty: Swift.Int32 = 0

    public required init() {}

    public init(`if`: Swift.Int32, `else`: Swift.Int32, elseif: diePrx?, empty: Swift.Int32) {
        self.`if` = `if`
        self.`else` = `else`
        self.elseif = elseif
        self.empty = empty
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::and::echo" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`if` = try istr.read()
        self.`else` = try istr.read()
        self.elseif = try istr.read(diePrx.self)
        self.empty = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: echo.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.`if`)
        ostr.write(self.`else`)
        ostr.write(self.elseif)
        ostr.write(self.empty)
        ostr.endSlice()
    }
}


/// Dispatcher for ``break`` servants.
public struct breakDisp: Ice.Dispatcher {
    public let servant: `break`
    private static let defaultObject = Ice.ObjectI<breakTraits>()

    public init(_ servant: `break`) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "case":
            try await servant._iceD_case(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? breakDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? breakDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? breakDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? breakDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol `break` {
    ///
    /// - parameter catch: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func `case`(catch: Swift.Int32, current: Ice.Current) async throws -> Swift.Int32
}


/// Dispatcher for `function` servants.
public struct functionDisp: Ice.Dispatcher {
    public let servant: function
    private static let defaultObject = Ice.ObjectI<functionTraits>()

    public init(_ servant: function) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "continue":
            try await servant._iceD_continue(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? functionDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? functionDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? functionDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? functionDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol function {
    ///
    /// - parameter declare: `Swift.Int32`
    ///
    /// - parameter default: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func `continue`(declare: Swift.Int32, default: Swift.Int32, current: Ice.Current) async throws
}


/// Dispatcher for `die` servants.
public struct dieDisp: Ice.Dispatcher {
    public let servant: die
    private static let defaultObject = Ice.ObjectI<dieTraits>()

    public init(_ servant: die) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "do":
            try await servant._iceD_do(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? dieDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? dieDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? dieDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? dieDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol die {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func `do`(current: Ice.Current) async throws
}


/// Dispatcher for `enddeclare` servants.
public struct enddeclareDisp: Ice.Dispatcher {
    public let servant: enddeclare
    private static let defaultObject = Ice.ObjectI<enddeclareTraits>()

    public init(_ servant: enddeclare) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "continue":
            try await servant._iceD_continue(request)
        case "do":
            try await servant._iceD_do(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? enddeclareDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? enddeclareDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? enddeclareDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? enddeclareDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol enddeclare: die, function {}


/// Dispatcher for ``for`` servants.
public struct forDisp: Ice.Dispatcher {
    public let servant: `for`
    private static let defaultObject = Ice.ObjectI<forTraits>()

    public init(_ servant: `for`) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "foreach":
            try await servant._iceD_foreach(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? forDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? forDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? forDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? forDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol `for` {
    ///
    /// - parameter if: `breakPrx?`
    ///
    /// - parameter global: `echo?`
    ///
    /// - parameter include: `functionPrx?`
    ///
    /// - parameter return: `diePrx?`
    ///
    /// - parameter list: `enddeclarePrx?`
    ///
    /// - parameter new: `Swift.Int32`
    ///
    /// - parameter static: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `array`
    func foreach(if: breakPrx?, global: echo?, include: functionPrx?, return: diePrx?, list: enddeclarePrx?, new: Swift.Int32, static: Swift.Int32, current: Ice.Current) async throws -> array
}

/// break overview.
///
/// break Methods:
///
///  - `case`: 
extension `break` {
    public func _iceD_case(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_catch: Swift.Int32 = try istr.read()
        let result = try await self.`case`(catch: iceP_catch, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_try = value
            ostr.write(iceP_try)
        }
    }
}

/// function overview.
///
/// function Methods:
///
///  - `continue`: 
extension function {
    public func _iceD_continue(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_declare: Swift.Int32 = try istr.read()
        let iceP_default: Swift.Int32 = try istr.read()
        try await self.`continue`(declare: iceP_declare, default: iceP_default, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// die overview.
///
/// die Methods:
///
///  - `do`: 
extension die {
    public func _iceD_do(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.`do`(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// enddeclare overview.
extension enddeclare {}

/// for overview.
///
/// for Methods:
///
///  - foreach: 
extension `for` {
    public func _iceD_foreach(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_if: breakPrx? = try istr.read(breakPrx.self)
        var iceP_global: echo?
        try istr.read(echo.self) { iceP_global = $0 }
        let iceP_include: functionPrx? = try istr.read(functionPrx.self)
        let iceP_return: diePrx? = try istr.read(diePrx.self)
        let iceP_list: enddeclarePrx? = try istr.read(enddeclarePrx.self)
        let iceP_new: Swift.Int32 = try istr.read()
        let iceP_static: Swift.Int32 = try istr.read()
        try istr.readPendingValues()
        let result = try await self.foreach(if: iceP_if, global: iceP_global, include: iceP_include, return: iceP_return, list: iceP_list, new: iceP_new, static: iceP_static, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}
