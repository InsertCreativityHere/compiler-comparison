//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public enum breakbitand: Swift.UInt8 {
    /// `break`
    case `break` = 0
    /// `case`
    case `case` = 1
    /// `catch`
    case `catch` = 2
    /// classdef
    case classdef = 3
    /// `continue`
    case `continue` = 4
    /// `else`
    case `else` = 5
    /// elseif
    case elseif = 6
    /// end
    case end = 7
    /// enumeration
    case enumeration = 8
    /// events
    case events = 9
    /// `for`
    case `for` = 10
    /// function
    case function = 11
    /// global
    case global = 12
    /// `if`
    case `if` = 13
    /// methods
    case methods = 14
    /// otherwise
    case otherwise = 15
    /// parfor
    case parfor = 16
    /// persistent
    case persistent = 17
    /// properties
    case properties = 18
    /// `return`
    case `return` = 19
    /// spmd
    case spmd = 20
    /// `switch`
    case `switch` = 21
    /// `try`
    case `try` = 22
    /// `while`
    case `while` = 23
    /// abs
    case abs = 24
    /// and
    case and = 25
    /// char
    case char = 26
    /// eq
    case eq = 27
    /// length
    case length = 28
    /// size
    case size = 29
    /// xor
    case xor = 30
    /// LAST
    case LAST = 31
    public init() {
        self = .`break`
    }
}

/// An `Ice.InputStream` extension to read `breakbitand` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `breakbitand` - The enumarated value.
    func read() throws -> breakbitand {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 31)
        guard let val = breakbitand(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `breakbitand` - The enumerated value.
    func read(tag: Swift.Int32) throws -> breakbitand? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as breakbitand
    }
}

/// An `Ice.OutputStream` extension to write `breakbitand` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `breakbitand` - The enumerator to write.
    func write(_ v: breakbitand) {
        write(enum: v.rawValue, maxValue: 31)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `breakbitand` - The enumerator to write.
    func write(tag: Swift.Int32, value: breakbitand?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 31)
    }
}

public struct breakbitor: Swift.Hashable {
    public var `case`: breakbitand = breakbitand.catch
    public var `continue`: Swift.Int32 = 1
    public var eq: Swift.Int32 = 2
    public var ne: Swift.Int32 = 3

    public init() {}

    public init(`case`: breakbitand, `continue`: Swift.Int32, eq: Swift.Int32, ne: Swift.Int32) {
        self.`case` = `case`
        self.`continue` = `continue`
        self.eq = eq
        self.ne = ne
    }
}

/// An `Ice.InputStream` extension to read `breakbitor` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `breakbitor` structured value from the stream.
    ///
    /// - returns: `breakbitor` - The structured value read from the stream.
    func read() throws -> breakbitor {
        var v = breakbitor()
        v.`case` = try self.read()
        v.`continue` = try self.read()
        v.eq = try self.read()
        v.ne = try self.read()
        return v
    }

    /// Read an optional `breakbitor?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `breakbitor?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> breakbitor? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as breakbitor
    }
}

/// An `Ice.OutputStream` extension to write `breakbitor` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `breakbitor` structured value to the stream.
    ///
    /// - parameter _: `breakbitor` - The value to write to the stream.
    func write(_ v: breakbitor) {
        self.write(v.`case`)
        self.write(v.`continue`)
        self.write(v.eq)
        self.write(v.ne)
    }

    /// Write an optional `breakbitor?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `breakbitor?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: breakbitor?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

public typealias breakparfor = [breakbitor]

/// Helper class to read and write `breakparfor` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct breakparforHelper {
    /// Read a `breakparfor` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `breakparfor` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> breakparfor {
        let sz = try istr.readAndCheckSeqSize(minSize: 13)
        var v = breakparfor()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: breakbitor = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `breakparfor?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `breakparfor` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> breakparfor? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `breakparfor` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `breakparfor` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: breakparfor) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `breakparfor?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `breakparfor` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: breakparfor?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public typealias breakswitch = [Swift.Int32: breakbitor]

/// Helper class to read and write `breakswitch` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct breakswitchHelper {
    /// Read a `breakswitch` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `breakswitch` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> breakswitch {
        let sz = try Swift.Int(istr.readSize())
        var v = breakswitch()
        for _ in 0 ..< sz {
            let key: Swift.Int32 = try istr.read()
            let value: breakbitor = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `breakswitch?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `breakswitch` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> breakswitch? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `breakswitch` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `breakswitch` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: breakswitch) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `breakswitch?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `breakswitch` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: breakswitch?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// :nodoc:
public class breakpersistent_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return breakpersistent.self
    }
}

public extension Ice.ClassResolver {
    @objc static func classdef_break_persistent() -> Ice.UserExceptionTypeResolver {
        return breakpersistent_TypeResolver()
    }
}

open class breakpersistent: Ice.UserException {
    public var identifier: Swift.String = "1"
    public var message: Swift.String = "2"
    public var stack: Swift.String = "3"
    public var cause: Swift.String = "4"
    public var `type`: Swift.String = "5"
    public var end: breaklogical? = nil

    public required init() {}

    public init(identifier: Swift.String, message: Swift.String, stack: Swift.String, cause: Swift.String, `type`: Swift.String, end: breaklogical?) {
        self.identifier = identifier
        self.message = message
        self.stack = stack
        self.cause = cause
        self.`type` = `type`
        self.end = end
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::classdef::break::persistent" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: breakpersistent.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.identifier)
        ostr.write(self.message)
        ostr.write(self.stack)
        ostr.write(self.cause)
        ostr.write(self.`type`)
        ostr.write(self.end)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.identifier = try istr.read()
        self.message = try istr.read()
        self.stack = try istr.read()
        self.cause = try istr.read()
        self.`type` = try istr.read()
        try istr.read(breaklogical.self) { self.end = $0 }
        try istr.endSlice()
    }

    open override func _usesClasses() -> Swift.Bool {
        return true
    }
}

/// :nodoc:
public class breakglobal_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return breakglobal.self
    }
}

public extension Ice.ClassResolver {
    @objc static func classdef_break_global() -> Ice.UserExceptionTypeResolver {
        return breakglobal_TypeResolver()
    }
}

open class breakglobal: breakpersistent {
    public var enumeration: Swift.Int32 = 1

    public required init() {
        super.init()
    }

    public init(identifier: Swift.String, message: Swift.String, stack: Swift.String, cause: Swift.String, `type`: Swift.String, end: breaklogical?, enumeration: Swift.Int32) {
        self.enumeration = enumeration
        super.init(identifier: identifier, message: message, stack: stack, cause: cause, `type`: `type`, end: end)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::classdef::break::global" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: breakglobal.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.enumeration)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.enumeration = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// Traits for Slice interface`breakelseif`.
public struct breakelseifTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::classdef::break::elseif"]
    public static let staticId = "::classdef::break::elseif"
}
public let methods: Swift.Int32 = 1


/// breakelseifPrx overview.
///
/// breakelseifPrx Methods:
///
///  - events: 
///
///  - eventsAsync: 
///
///  - function: 
///
///  - functionAsync: 
///
///  - delete: 
///
///  - deleteAsync: 
///
///  - checkedCast: 
///
///  - checkedCastAsync: 
public protocol breakelseifPrx: Ice.ObjectPrx {}

private final class breakelseifPrxI: Ice.ObjectPrxI, breakelseifPrx {
    public override class func ice_staticId() -> Swift.String {
        return breakelseifTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: breakelseifPrx.Protocol) throws -> breakelseifPrx {
    try communicator.makeProxyImpl(proxyString) as breakelseifPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `breakelseifPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `breakelseifPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: breakelseifPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> breakelseifPrx? {
    return try breakelseifPrxI.checkedCast(prx: prx, facet: facet, context: context) as breakelseifPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `breakelseifPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `breakelseifPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: breakelseifPrx.Protocol, facet: Swift.String? = nil) -> breakelseifPrx {
    return breakelseifPrxI.uncheckedCast(prx: prx, facet: facet) as breakelseifPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `breakelseifPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: breakelseifPrx.Protocol) -> Swift.String {
    return breakelseifTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `breakelseifPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `breakelseifPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `breakelseifPrx?` - The extracted proxy
    func read(_ type: breakelseifPrx.Protocol) throws -> breakelseifPrx? {
        return try read() as breakelseifPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `breakelseifPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `breakelseifPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: breakelseifPrx.Protocol) throws -> breakelseifPrx? {
        return try read(tag: tag) as breakelseifPrxI?
    }
}

/// breakelseifPrx overview.
///
/// breakelseifPrx Methods:
///
///  - events: 
///
///  - eventsAsync: 
///
///  - function: 
///
///  - functionAsync: 
///
///  - delete: 
///
///  - deleteAsync: 
///
///  - checkedCast: 
///
///  - checkedCastAsync: 
public extension breakelseifPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func events(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "events",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `` - The result of the operation
    func eventsAsync(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "events",
                                            mode: .Normal,
                                            context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func function(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "function",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `` - The result of the operation
    func functionAsync(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "function",
                                            mode: .Normal,
                                            context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func delete(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "delete",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `` - The result of the operation
    func deleteAsync(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "delete",
                                            mode: .Normal,
                                            context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func checkedCast(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "checkedCast",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `` - The result of the operation
    func checkedCastAsync(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invokeAsync(operation: "checkedCast",
                                            mode: .Normal,
                                            context: context)
    }
}

/// :nodoc:
public class breaklogical_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return breaklogical.self
    }
}

public extension Ice.ClassResolver {
    @objc static func classdef_break_logical() -> Ice.ValueTypeResolver {
        return breaklogical_TypeResolver()
    }
}

open class breaklogical: Ice.Value {
    public var `else`: breakbitand = breakbitand.enumeration
    public var `for`: breakbitor = breakbitor()
    public var int64: Swift.Bool = true

    public required init() {}

    public init(`else`: breakbitand, `for`: breakbitor, int64: Swift.Bool) {
        self.`else` = `else`
        self.`for` = `for`
        self.int64 = int64
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::classdef::break::logical" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`else` = try istr.read()
        self.`for` = try istr.read()
        self.int64 = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: breaklogical.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.`else`)
        ostr.write(self.`for`)
        ostr.write(self.int64)
        ostr.endSlice()
    }
}

/// :nodoc:
public class breakxor_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return breakxor.self
    }
}

public extension Ice.ClassResolver {
    @objc static func classdef_break_xor() -> Ice.ValueTypeResolver {
        return breakxor_TypeResolver()
    }
}

open class breakxor: breaklogical {
    public var `return`: Swift.Int32 = 1

    public required init() {
        super.init()
    }

    public init(`else`: breakbitand, `for`: breakbitor, int64: Swift.Bool, `return`: Swift.Int32) {
        self.`return` = `return`
        super.init(`else`: `else`, `for`: `for`, int64: int64)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::classdef::break::xor" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`return` = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: breakxor.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.`return`)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class breaktry_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return breaktry.self
    }
}

public extension Ice.ClassResolver {
    @objc static func classdef_break_try() -> Ice.ValueTypeResolver {
        return breaktry_TypeResolver()
    }
}

open class breaktry: Ice.Value {
    public var `while`: Swift.Int32 = 1
    public var delete: Swift.Int32 = 2

    public required init() {}

    public init(`while`: Swift.Int32, delete: Swift.Int32) {
        self.`while` = `while`
        self.delete = delete
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::classdef::break::try" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`while` = try istr.read()
        self.delete = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: breaktry.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.`while`)
        ostr.write(self.delete)
        ostr.endSlice()
    }
}

/// :nodoc:
public class breakproperties_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return breakproperties.self
    }
}

public extension Ice.ClassResolver {
    @objc static func classdef_break_properties() -> Ice.ValueTypeResolver {
        return breakproperties_TypeResolver()
    }
}

open class breakproperties: breaktry {
    public var `if`: Swift.Int32 = 2
    public var `catch`: breakxor? = nil
    public var spmd: breakparfor = breakparfor()
    public var otherwise: breakswitch = breakswitch()

    public required init() {
        super.init()
    }

    public init(`while`: Swift.Int32, delete: Swift.Int32, `if`: Swift.Int32, `catch`: breakxor?, spmd: breakparfor, otherwise: breakswitch) {
        self.`if` = `if`
        self.`catch` = `catch`
        self.spmd = spmd
        self.otherwise = otherwise
        super.init(`while`: `while`, delete: delete)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::classdef::break::properties" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`if` = try istr.read()
        try istr.read(breakxor.self) { self.`catch` = $0 }
        self.spmd = try breakparforHelper.read(from: istr)
        self.otherwise = try breakswitchHelper.read(from: istr)
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: breakproperties.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.`if`)
        ostr.write(self.`catch`)
        breakparforHelper.write(to: ostr, value: self.spmd)
        breakswitchHelper.write(to: ostr, value: self.otherwise)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}


/// Dispatcher for `breakelseif` servants.
public struct breakelseifDisp: Ice.Dispatcher {
    public let servant: breakelseif
    private static let defaultObject = Ice.ObjectI<breakelseifTraits>()

    public init(_ servant: breakelseif) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "checkedCast":
            try await servant._iceD_checkedCast(request)
        case "delete":
            try await servant._iceD_delete(request)
        case "events":
            try await servant._iceD_events(request)
        case "function":
            try await servant._iceD_function(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? breakelseifDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? breakelseifDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? breakelseifDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? breakelseifDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol breakelseif {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func events(current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func function(current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func delete(current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `` - The result of the operation
    func checkedCast(current: Ice.Current) async throws
}

/// breakelseif overview.
///
/// breakelseif Methods:
///
///  - events: 
///
///  - function: 
///
///  - delete: 
///
///  - checkedCast: 
extension breakelseif {
    public func _iceD_events(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.events(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_function(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.function(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_delete(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.delete(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_checkedCast(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.checkedCast(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
