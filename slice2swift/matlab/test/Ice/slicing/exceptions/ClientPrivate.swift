//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// :nodoc:
public class Base_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return Base.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Base() -> Ice.UserExceptionTypeResolver {
        return Base_TypeResolver()
    }
}

open class Base: Ice.UserException, @unchecked Sendable {
    public var b: Swift.String = ""

    public required init() {}

    public init(b: Swift.String) {
        self.b = b
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::Base" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: Base.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.b)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.b = try istr.read()
        try istr.endSlice()
    }
}

/// :nodoc:
public class KnownDerived_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return KnownDerived.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_KnownDerived() -> Ice.UserExceptionTypeResolver {
        return KnownDerived_TypeResolver()
    }
}

open class KnownDerived: Base, @unchecked Sendable {
    public var kd: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(b: Swift.String, kd: Swift.String) {
        self.kd = kd
        super.init(b: b)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::KnownDerived" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: KnownDerived.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.kd)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.kd = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class KnownIntermediate_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return KnownIntermediate.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_KnownIntermediate() -> Ice.UserExceptionTypeResolver {
        return KnownIntermediate_TypeResolver()
    }
}

open class KnownIntermediate: Base, @unchecked Sendable {
    public var ki: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(b: Swift.String, ki: Swift.String) {
        self.ki = ki
        super.init(b: b)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::KnownIntermediate" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: KnownIntermediate.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.ki)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.ki = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class KnownMostDerived_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return KnownMostDerived.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_KnownMostDerived() -> Ice.UserExceptionTypeResolver {
        return KnownMostDerived_TypeResolver()
    }
}

open class KnownMostDerived: KnownIntermediate, @unchecked Sendable {
    public var kmd: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(b: Swift.String, ki: Swift.String, kmd: Swift.String) {
        self.kmd = kmd
        super.init(b: b, ki: ki)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::KnownMostDerived" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: KnownMostDerived.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.kmd)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.kmd = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class KnownPreserved_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return KnownPreserved.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_KnownPreserved() -> Ice.UserExceptionTypeResolver {
        return KnownPreserved_TypeResolver()
    }
}

open class KnownPreserved: Base, @unchecked Sendable {
    public var kp: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(b: Swift.String, kp: Swift.String) {
        self.kp = kp
        super.init(b: b)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::KnownPreserved" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: KnownPreserved.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.kp)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.kp = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class KnownPreservedDerived_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return KnownPreservedDerived.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_KnownPreservedDerived() -> Ice.UserExceptionTypeResolver {
        return KnownPreservedDerived_TypeResolver()
    }
}

open class KnownPreservedDerived: KnownPreserved, @unchecked Sendable {
    public var kpd: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(b: Swift.String, kp: Swift.String, kpd: Swift.String) {
        self.kpd = kpd
        super.init(b: b, kp: kp)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::KnownPreservedDerived" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: KnownPreservedDerived.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.kpd)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.kpd = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// Traits for Slice interface`Relay`.
public struct RelayTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Relay"]
    public static let staticId = "::Test::Relay"
}

/// Traits for Slice interface`TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

/// :nodoc:
public class Preserved1_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return Preserved1.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Preserved1() -> Ice.UserExceptionTypeResolver {
        return Preserved1_TypeResolver()
    }
}

open class Preserved1: KnownPreservedDerived, @unchecked Sendable {
    public var p1: BaseClass? = nil

    public required init() {
        super.init()
    }

    public init(b: Swift.String, kp: Swift.String, kpd: Swift.String, p1: BaseClass?) {
        self.p1 = p1
        super.init(b: b, kp: kp, kpd: kpd)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::Preserved1" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: Preserved1.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.p1)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.read(BaseClass.self) { self.p1 = $0 }
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _usesClasses() -> Swift.Bool {
        return true
    }
}

/// :nodoc:
public class Preserved2_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return Preserved2.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_Preserved2() -> Ice.UserExceptionTypeResolver {
        return Preserved2_TypeResolver()
    }
}

open class Preserved2: Preserved1, @unchecked Sendable {
    public var p2: BaseClass? = nil

    public required init() {
        super.init()
    }

    public init(b: Swift.String, kp: Swift.String, kpd: Swift.String, p1: BaseClass?, p2: BaseClass?) {
        self.p2 = p2
        super.init(b: b, kp: kp, kpd: kpd, p1: p1)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::Preserved2" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: Preserved2.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.p2)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.read(BaseClass.self) { self.p2 = $0 }
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

public protocol RelayPrx: Ice.ObjectPrx {}

private final class RelayPrxI: Ice.ObjectPrxI, RelayPrx {
    public override class func ice_staticId() -> Swift.String {
        return RelayTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: RelayPrx.Protocol) throws -> RelayPrx {
    try communicator.makeProxyImpl(proxyString) as RelayPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `RelayPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `RelayPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: RelayPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> RelayPrx? {
    return try await RelayPrxI.checkedCast(prx: prx, facet: facet, context: context) as RelayPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `RelayPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `RelayPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: RelayPrx.Protocol, facet: Swift.String? = nil) -> RelayPrx {
    return RelayPrxI.uncheckedCast(prx: prx, facet: facet) as RelayPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `RelayPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: RelayPrx.Protocol) -> Swift.String {
    return RelayTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `RelayPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `RelayPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `RelayPrx?` - The extracted proxy
    func read(_ type: RelayPrx.Protocol) throws -> RelayPrx? {
        return try read() as RelayPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `RelayPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `RelayPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: RelayPrx.Protocol) throws -> RelayPrx? {
        return try read(tag: tag) as RelayPrxI?
    }
}

public extension RelayPrx {
    func knownPreservedAsBase(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "knownPreservedAsBase",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func knownPreservedAsKnownPreserved(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "knownPreservedAsKnownPreserved",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as KnownPreserved {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func unknownPreservedAsBase(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "unknownPreservedAsBase",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func unknownPreservedAsKnownPreserved(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "unknownPreservedAsKnownPreserved",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as KnownPreserved {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }
}

public protocol TestIntfPrx: Ice.ObjectPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestIntfPrx.Protocol) throws -> TestIntfPrx {
    try communicator.makeProxyImpl(proxyString) as TestIntfPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> TestIntfPrx? {
    return try await TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

public extension TestIntfPrx {
    func baseAsBase(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "baseAsBase",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func unknownDerivedAsBase(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "unknownDerivedAsBase",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func knownDerivedAsBase(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "knownDerivedAsBase",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func knownDerivedAsKnownDerived(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "knownDerivedAsKnownDerived",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as KnownDerived {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func unknownIntermediateAsBase(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "unknownIntermediateAsBase",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func knownIntermediateAsBase(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "knownIntermediateAsBase",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func knownMostDerivedAsBase(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "knownMostDerivedAsBase",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func knownIntermediateAsKnownIntermediate(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "knownIntermediateAsKnownIntermediate",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as KnownIntermediate {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func knownMostDerivedAsKnownIntermediate(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "knownMostDerivedAsKnownIntermediate",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as KnownIntermediate {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func knownMostDerivedAsKnownMostDerived(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "knownMostDerivedAsKnownMostDerived",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as KnownMostDerived {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func unknownMostDerived1AsBase(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "unknownMostDerived1AsBase",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func unknownMostDerived1AsKnownIntermediate(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "unknownMostDerived1AsKnownIntermediate",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as KnownIntermediate {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func unknownMostDerived2AsBase(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "unknownMostDerived2AsBase",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func unknownMostDerived2AsBaseCompact(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "unknownMostDerived2AsBaseCompact",
                                       mode: .Normal,
                                       format: .CompactFormat,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func knownPreservedAsBase(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "knownPreservedAsBase",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func knownPreservedAsKnownPreserved(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "knownPreservedAsKnownPreserved",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as KnownPreserved {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func relayKnownPreservedAsBase(_ iceP_r: RelayPrx?, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "relayKnownPreservedAsBase",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_r)
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func relayKnownPreservedAsKnownPreserved(_ iceP_r: RelayPrx?, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "relayKnownPreservedAsKnownPreserved",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_r)
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as KnownPreserved {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func unknownPreservedAsBase(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "unknownPreservedAsBase",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func unknownPreservedAsKnownPreserved(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "unknownPreservedAsKnownPreserved",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as KnownPreserved {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func relayUnknownPreservedAsBase(_ iceP_r: RelayPrx?, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "relayUnknownPreservedAsBase",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_r)
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as Base {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func relayUnknownPreservedAsKnownPreserved(_ iceP_r: RelayPrx?, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "relayUnknownPreservedAsKnownPreserved",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_r)
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as KnownPreserved {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    func shutdown(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "shutdown",
                                       mode: .Normal,
                                       context: context)
    }
}

/// :nodoc:
public class BaseClass_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return BaseClass.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_BaseClass() -> Ice.ValueTypeResolver {
        return BaseClass_TypeResolver()
    }
}

open class BaseClass: Ice.Value {
    public var bc: Swift.String = ""

    public required init() {}

    public init(bc: Swift.String) {
        self.bc = bc
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::BaseClass" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bc = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: BaseClass.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.bc)
        ostr.endSlice()
    }
}

/// :nodoc:
public class PreservedClass_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return PreservedClass.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_PreservedClass() -> Ice.ValueTypeResolver {
        return PreservedClass_TypeResolver()
    }
}

open class PreservedClass: BaseClass {
    public var pc: Swift.String = ""

    public required init() {
        super.init()
    }

    public init(bc: Swift.String, pc: Swift.String) {
        self.pc = pc
        super.init(bc: bc)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::PreservedClass" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.pc = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: PreservedClass.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.pc)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}


/// Dispatcher for `Relay` servants.
public struct RelayDisp: Ice.Dispatcher {
    public let servant: Relay
    private static let defaultObject = Ice.ObjectI<RelayTraits>()

    public init(_ servant: Relay) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? RelayDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? RelayDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? RelayDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? RelayDisp.defaultObject)._iceD_ice_ping(request)
        case "knownPreservedAsBase":
            try await servant._iceD_knownPreservedAsBase(request)
        case "knownPreservedAsKnownPreserved":
            try await servant._iceD_knownPreservedAsKnownPreserved(request)
        case "unknownPreservedAsBase":
            try await servant._iceD_unknownPreservedAsBase(request)
        case "unknownPreservedAsKnownPreserved":
            try await servant._iceD_unknownPreservedAsKnownPreserved(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol Relay {
    func knownPreservedAsBase(current: Ice.Current) async throws

    func knownPreservedAsKnownPreserved(current: Ice.Current) async throws

    func unknownPreservedAsBase(current: Ice.Current) async throws

    func unknownPreservedAsKnownPreserved(current: Ice.Current) async throws
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Dispatcher {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "baseAsBase":
            try await servant._iceD_baseAsBase(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(request)
        case "knownDerivedAsBase":
            try await servant._iceD_knownDerivedAsBase(request)
        case "knownDerivedAsKnownDerived":
            try await servant._iceD_knownDerivedAsKnownDerived(request)
        case "knownIntermediateAsBase":
            try await servant._iceD_knownIntermediateAsBase(request)
        case "knownIntermediateAsKnownIntermediate":
            try await servant._iceD_knownIntermediateAsKnownIntermediate(request)
        case "knownMostDerivedAsBase":
            try await servant._iceD_knownMostDerivedAsBase(request)
        case "knownMostDerivedAsKnownIntermediate":
            try await servant._iceD_knownMostDerivedAsKnownIntermediate(request)
        case "knownMostDerivedAsKnownMostDerived":
            try await servant._iceD_knownMostDerivedAsKnownMostDerived(request)
        case "knownPreservedAsBase":
            try await servant._iceD_knownPreservedAsBase(request)
        case "knownPreservedAsKnownPreserved":
            try await servant._iceD_knownPreservedAsKnownPreserved(request)
        case "relayKnownPreservedAsBase":
            try await servant._iceD_relayKnownPreservedAsBase(request)
        case "relayKnownPreservedAsKnownPreserved":
            try await servant._iceD_relayKnownPreservedAsKnownPreserved(request)
        case "relayUnknownPreservedAsBase":
            try await servant._iceD_relayUnknownPreservedAsBase(request)
        case "relayUnknownPreservedAsKnownPreserved":
            try await servant._iceD_relayUnknownPreservedAsKnownPreserved(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        case "unknownDerivedAsBase":
            try await servant._iceD_unknownDerivedAsBase(request)
        case "unknownIntermediateAsBase":
            try await servant._iceD_unknownIntermediateAsBase(request)
        case "unknownMostDerived1AsBase":
            try await servant._iceD_unknownMostDerived1AsBase(request)
        case "unknownMostDerived1AsKnownIntermediate":
            try await servant._iceD_unknownMostDerived1AsKnownIntermediate(request)
        case "unknownMostDerived2AsBase":
            try await servant._iceD_unknownMostDerived2AsBase(request)
        case "unknownMostDerived2AsBaseCompact":
            try await servant._iceD_unknownMostDerived2AsBaseCompact(request)
        case "unknownPreservedAsBase":
            try await servant._iceD_unknownPreservedAsBase(request)
        case "unknownPreservedAsKnownPreserved":
            try await servant._iceD_unknownPreservedAsKnownPreserved(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol TestIntf {
    func baseAsBase(current: Ice.Current) async throws

    func unknownDerivedAsBase(current: Ice.Current) async throws

    func knownDerivedAsBase(current: Ice.Current) async throws

    func knownDerivedAsKnownDerived(current: Ice.Current) async throws

    func unknownIntermediateAsBase(current: Ice.Current) async throws

    func knownIntermediateAsBase(current: Ice.Current) async throws

    func knownMostDerivedAsBase(current: Ice.Current) async throws

    func knownIntermediateAsKnownIntermediate(current: Ice.Current) async throws

    func knownMostDerivedAsKnownIntermediate(current: Ice.Current) async throws

    func knownMostDerivedAsKnownMostDerived(current: Ice.Current) async throws

    func unknownMostDerived1AsBase(current: Ice.Current) async throws

    func unknownMostDerived1AsKnownIntermediate(current: Ice.Current) async throws

    func unknownMostDerived2AsBase(current: Ice.Current) async throws

    func unknownMostDerived2AsBaseCompact(current: Ice.Current) async throws

    func knownPreservedAsBase(current: Ice.Current) async throws

    func knownPreservedAsKnownPreserved(current: Ice.Current) async throws

    func relayKnownPreservedAsBase(r: RelayPrx?, current: Ice.Current) async throws

    func relayKnownPreservedAsKnownPreserved(r: RelayPrx?, current: Ice.Current) async throws

    func unknownPreservedAsBase(current: Ice.Current) async throws

    func unknownPreservedAsKnownPreserved(current: Ice.Current) async throws

    func relayUnknownPreservedAsBase(r: RelayPrx?, current: Ice.Current) async throws

    func relayUnknownPreservedAsKnownPreserved(r: RelayPrx?, current: Ice.Current) async throws

    func shutdown(current: Ice.Current) async throws
}

extension Relay {
    public func _iceD_knownPreservedAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownPreservedAsBase(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownPreservedAsKnownPreserved(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownPreservedAsKnownPreserved(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownPreservedAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownPreservedAsBase(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownPreservedAsKnownPreserved(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownPreservedAsKnownPreserved(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

extension TestIntf {
    public func _iceD_baseAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.baseAsBase(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownDerivedAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownDerivedAsBase(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownDerivedAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownDerivedAsBase(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownDerivedAsKnownDerived(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownDerivedAsKnownDerived(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownIntermediateAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownIntermediateAsBase(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownIntermediateAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownIntermediateAsBase(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownMostDerivedAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownMostDerivedAsBase(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownIntermediateAsKnownIntermediate(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownIntermediateAsKnownIntermediate(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownMostDerivedAsKnownIntermediate(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownMostDerivedAsKnownIntermediate(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownMostDerivedAsKnownMostDerived(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownMostDerivedAsKnownMostDerived(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownMostDerived1AsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownMostDerived1AsBase(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownMostDerived1AsKnownIntermediate(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownMostDerived1AsKnownIntermediate(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownMostDerived2AsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownMostDerived2AsBase(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownMostDerived2AsBaseCompact(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownMostDerived2AsBaseCompact(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownPreservedAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownPreservedAsBase(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_knownPreservedAsKnownPreserved(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.knownPreservedAsKnownPreserved(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_relayKnownPreservedAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_r: RelayPrx? = try istr.read(RelayPrx.self)
        try await self.relayKnownPreservedAsBase(r: iceP_r, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_relayKnownPreservedAsKnownPreserved(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_r: RelayPrx? = try istr.read(RelayPrx.self)
        try await self.relayKnownPreservedAsKnownPreserved(r: iceP_r, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownPreservedAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownPreservedAsBase(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_unknownPreservedAsKnownPreserved(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.unknownPreservedAsKnownPreserved(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_relayUnknownPreservedAsBase(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_r: RelayPrx? = try istr.read(RelayPrx.self)
        try await self.relayUnknownPreservedAsBase(r: iceP_r, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_relayUnknownPreservedAsKnownPreserved(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_r: RelayPrx? = try istr.read(RelayPrx.self)
        try await self.relayUnknownPreservedAsKnownPreserved(r: iceP_r, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
