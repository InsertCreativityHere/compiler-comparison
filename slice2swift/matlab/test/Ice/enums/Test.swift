//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit
public let ByteConst1: Swift.UInt8 = 10

public let ShortConst1: Swift.Int16 = 20

public let IntConst1: Swift.Int32 = 30

public let LongConst1: Swift.Int64 = 40

public let ByteConst2: Swift.UInt8 = 126

public let ShortConst2: Swift.Int16 = 32766

public let IntConst2: Swift.Int32 = 2147483647

public let LongConst2: Swift.Int64 = 2147483646


public enum ByteEnum: Swift.UInt8 {
    /// benum1
    case benum1 = 0
    /// benum2
    case benum2 = 1
    /// benum3
    case benum3 = 10
    /// benum4
    case benum4 = 11
    /// benum5
    case benum5 = 20
    /// benum6
    case benum6 = 21
    /// benum7
    case benum7 = 30
    /// benum8
    case benum8 = 31
    /// benum9
    case benum9 = 40
    /// benum10
    case benum10 = 41
    /// benum11
    case benum11 = 126
    public init() {
        self = .benum1
    }
}

/// An `Ice.InputStream` extension to read `ByteEnum` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `ByteEnum` - The enumarated value.
    func read() throws -> ByteEnum {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 126)
        guard let val = ByteEnum(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ByteEnum` - The enumerated value.
    func read(tag: Swift.Int32) throws -> ByteEnum? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as ByteEnum
    }
}

/// An `Ice.OutputStream` extension to write `ByteEnum` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `ByteEnum` - The enumerator to write.
    func write(_ v: ByteEnum) {
        write(enum: v.rawValue, maxValue: 126)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `ByteEnum` - The enumerator to write.
    func write(tag: Swift.Int32, value: ByteEnum?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 126)
    }
}

public typealias ByteEnumSeq = [ByteEnum]

/// Helper class to read and write `ByteEnumSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ByteEnumSeqHelper {
    /// Read a `ByteEnumSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ByteEnumSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ByteEnumSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = ByteEnumSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: ByteEnum = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `ByteEnumSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ByteEnumSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ByteEnumSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ByteEnumSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ByteEnumSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ByteEnumSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ByteEnumSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ByteEnumSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ByteEnumSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public enum ShortEnum: Swift.Int32 {
    /// senum1
    case senum1 = 3
    /// senum2
    case senum2 = 4
    /// senum3
    case senum3 = 10
    /// senum4
    case senum4 = 11
    /// senum5
    case senum5 = 20
    /// senum6
    case senum6 = 21
    /// senum7
    case senum7 = 30
    /// senum8
    case senum8 = 31
    /// senum9
    case senum9 = 40
    /// senum10
    case senum10 = 41
    /// senum11
    case senum11 = 32766
    public init() {
        self = .senum1
    }
}

/// An `Ice.InputStream` extension to read `ShortEnum` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `ShortEnum` - The enumarated value.
    func read() throws -> ShortEnum {
        let rawValue: Swift.Int32 = try read(enumMaxValue: 32766)
        guard let val = ShortEnum(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ShortEnum` - The enumerated value.
    func read(tag: Swift.Int32) throws -> ShortEnum? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as ShortEnum
    }
}

/// An `Ice.OutputStream` extension to write `ShortEnum` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `ShortEnum` - The enumerator to write.
    func write(_ v: ShortEnum) {
        write(enum: v.rawValue, maxValue: 32766)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `ShortEnum` - The enumerator to write.
    func write(tag: Swift.Int32, value: ShortEnum?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 32766)
    }
}

public typealias ShortEnumSeq = [ShortEnum]

/// Helper class to read and write `ShortEnumSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct ShortEnumSeqHelper {
    /// Read a `ShortEnumSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `ShortEnumSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> ShortEnumSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = ShortEnumSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: ShortEnum = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `ShortEnumSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `ShortEnumSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> ShortEnumSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `ShortEnumSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `ShortEnumSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: ShortEnumSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `ShortEnumSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `ShortEnumSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: ShortEnumSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public enum IntEnum: Swift.Int32 {
    /// ienum1
    case ienum1 = 0
    /// ienum2
    case ienum2 = 1
    /// ienum3
    case ienum3 = 10
    /// ienum4
    case ienum4 = 11
    /// ienum5
    case ienum5 = 20
    /// ienum6
    case ienum6 = 21
    /// ienum7
    case ienum7 = 30
    /// ienum8
    case ienum8 = 31
    /// ienum9
    case ienum9 = 40
    /// ienum10
    case ienum10 = 41
    /// ienum11
    case ienum11 = 2147483647
    /// ienum12
    case ienum12 = 2147483646
    public init() {
        self = .ienum1
    }
}

/// An `Ice.InputStream` extension to read `IntEnum` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `IntEnum` - The enumarated value.
    func read() throws -> IntEnum {
        let rawValue: Swift.Int32 = try read(enumMaxValue: 2147483647)
        guard let val = IntEnum(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `IntEnum` - The enumerated value.
    func read(tag: Swift.Int32) throws -> IntEnum? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as IntEnum
    }
}

/// An `Ice.OutputStream` extension to write `IntEnum` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `IntEnum` - The enumerator to write.
    func write(_ v: IntEnum) {
        write(enum: v.rawValue, maxValue: 2147483647)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `IntEnum` - The enumerator to write.
    func write(tag: Swift.Int32, value: IntEnum?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 2147483647)
    }
}

public typealias IntEnumSeq = [IntEnum]

/// Helper class to read and write `IntEnumSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct IntEnumSeqHelper {
    /// Read a `IntEnumSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `IntEnumSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> IntEnumSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = IntEnumSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: IntEnum = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `IntEnumSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `IntEnumSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> IntEnumSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `IntEnumSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `IntEnumSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: IntEnumSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `IntEnumSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `IntEnumSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: IntEnumSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

public enum SimpleEnum: Swift.UInt8 {
    /// red
    case red = 0
    /// green
    case green = 1
    /// blue
    case blue = 2
    public init() {
        self = .red
    }
}

/// An `Ice.InputStream` extension to read `SimpleEnum` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `SimpleEnum` - The enumarated value.
    func read() throws -> SimpleEnum {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 2)
        guard let val = SimpleEnum(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SimpleEnum` - The enumerated value.
    func read(tag: Swift.Int32) throws -> SimpleEnum? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as SimpleEnum
    }
}

/// An `Ice.OutputStream` extension to write `SimpleEnum` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `SimpleEnum` - The enumerator to write.
    func write(_ v: SimpleEnum) {
        write(enum: v.rawValue, maxValue: 2)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `SimpleEnum` - The enumerator to write.
    func write(tag: Swift.Int32, value: SimpleEnum?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 2)
    }
}

public typealias SimpleEnumSeq = [SimpleEnum]

/// Helper class to read and write `SimpleEnumSeq` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SimpleEnumSeqHelper {
    /// Read a `SimpleEnumSeq` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `SimpleEnumSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SimpleEnumSeq {
        let sz = try istr.readAndCheckSeqSize(minSize: 1)
        var v = SimpleEnumSeq()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: SimpleEnum = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional `SimpleEnumSeq?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SimpleEnumSeq` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SimpleEnumSeq? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `SimpleEnumSeq` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `SimpleEnumSeq` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SimpleEnumSeq) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional `SimpleEnumSeq?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SimpleEnumSeq` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: SimpleEnumSeq?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice interface`TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - opByte: 
///
///  - opByteAsync: 
///
///  - opShort: 
///
///  - opShortAsync: 
///
///  - opInt: 
///
///  - opIntAsync: 
///
///  - opSimple: 
///
///  - opSimpleAsync: 
///
///  - opByteSeq: 
///
///  - opByteSeqAsync: 
///
///  - opShortSeq: 
///
///  - opShortSeqAsync: 
///
///  - opIntSeq: 
///
///  - opIntSeqAsync: 
///
///  - opSimpleSeq: 
///
///  - opSimpleSeqAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol TestIntfPrx: Ice.ObjectPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestIntfPrx.Protocol) throws -> TestIntfPrx {
    try communicator.makeProxyImpl(proxyString) as TestIntfPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestIntfPrx? {
    return try TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - opByte: 
///
///  - opByteAsync: 
///
///  - opShort: 
///
///  - opShortAsync: 
///
///  - opInt: 
///
///  - opIntAsync: 
///
///  - opSimple: 
///
///  - opSimpleAsync: 
///
///  - opByteSeq: 
///
///  - opByteSeqAsync: 
///
///  - opShortSeq: 
///
///  - opShortSeqAsync: 
///
///  - opIntSeq: 
///
///  - opIntSeqAsync: 
///
///  - opSimpleSeq: 
///
///  - opSimpleSeqAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension TestIntfPrx {
    ///
    /// - parameter _: `ByteEnum`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteEnum, b2: ByteEnum)`:
    ///
    ///   - returnValue: `ByteEnum`
    ///
    ///   - b2: `ByteEnum`
    func opByte(_ iceP_b1: ByteEnum, context: Ice.Context? = nil) throws -> (returnValue: ByteEnum, b2: ByteEnum) {
        return try _impl._invoke(operation: "opByte",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_b1)
                                 },
                                 read: { istr in
                                     let iceP_b2: ByteEnum = try istr.read()
                                     let iceP_returnValue: ByteEnum = try istr.read()
                                     return (iceP_returnValue, iceP_b2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteEnum`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ByteEnum, b2: ByteEnum)>` - The result of the operation
    func opByteAsync(_ iceP_b1: ByteEnum, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ByteEnum, b2: ByteEnum)> {
        return _impl._invokeAsync(operation: "opByte",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_b1)
                                  },
                                  read: { istr in
                                      let iceP_b2: ByteEnum = try istr.read()
                                      let iceP_returnValue: ByteEnum = try istr.read()
                                      return (iceP_returnValue, iceP_b2)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ShortEnum`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortEnum, s2: ShortEnum)`:
    ///
    ///   - returnValue: `ShortEnum`
    ///
    ///   - s2: `ShortEnum`
    func opShort(_ iceP_s1: ShortEnum, context: Ice.Context? = nil) throws -> (returnValue: ShortEnum, s2: ShortEnum) {
        return try _impl._invoke(operation: "opShort",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_s1)
                                 },
                                 read: { istr in
                                     let iceP_s2: ShortEnum = try istr.read()
                                     let iceP_returnValue: ShortEnum = try istr.read()
                                     return (iceP_returnValue, iceP_s2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortEnum`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ShortEnum, s2: ShortEnum)>` - The result of the operation
    func opShortAsync(_ iceP_s1: ShortEnum, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ShortEnum, s2: ShortEnum)> {
        return _impl._invokeAsync(operation: "opShort",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_s1)
                                  },
                                  read: { istr in
                                      let iceP_s2: ShortEnum = try istr.read()
                                      let iceP_returnValue: ShortEnum = try istr.read()
                                      return (iceP_returnValue, iceP_s2)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `IntEnum`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntEnum, i2: IntEnum)`:
    ///
    ///   - returnValue: `IntEnum`
    ///
    ///   - i2: `IntEnum`
    func opInt(_ iceP_i1: IntEnum, context: Ice.Context? = nil) throws -> (returnValue: IntEnum, i2: IntEnum) {
        return try _impl._invoke(operation: "opInt",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_i1)
                                 },
                                 read: { istr in
                                     let iceP_i2: IntEnum = try istr.read()
                                     let iceP_returnValue: IntEnum = try istr.read()
                                     return (iceP_returnValue, iceP_i2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntEnum`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: IntEnum, i2: IntEnum)>` - The result of the operation
    func opIntAsync(_ iceP_i1: IntEnum, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: IntEnum, i2: IntEnum)> {
        return _impl._invokeAsync(operation: "opInt",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_i1)
                                  },
                                  read: { istr in
                                      let iceP_i2: IntEnum = try istr.read()
                                      let iceP_returnValue: IntEnum = try istr.read()
                                      return (iceP_returnValue, iceP_i2)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SimpleEnum`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SimpleEnum, s2: SimpleEnum)`:
    ///
    ///   - returnValue: `SimpleEnum`
    ///
    ///   - s2: `SimpleEnum`
    func opSimple(_ iceP_s1: SimpleEnum, context: Ice.Context? = nil) throws -> (returnValue: SimpleEnum, s2: SimpleEnum) {
        return try _impl._invoke(operation: "opSimple",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_s1)
                                 },
                                 read: { istr in
                                     let iceP_s2: SimpleEnum = try istr.read()
                                     let iceP_returnValue: SimpleEnum = try istr.read()
                                     return (iceP_returnValue, iceP_s2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SimpleEnum`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SimpleEnum, s2: SimpleEnum)>` - The result of the operation
    func opSimpleAsync(_ iceP_s1: SimpleEnum, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SimpleEnum, s2: SimpleEnum)> {
        return _impl._invokeAsync(operation: "opSimple",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_s1)
                                  },
                                  read: { istr in
                                      let iceP_s2: SimpleEnum = try istr.read()
                                      let iceP_returnValue: SimpleEnum = try istr.read()
                                      return (iceP_returnValue, iceP_s2)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ByteEnumSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ByteEnumSeq, b2: ByteEnumSeq)`:
    ///
    ///   - returnValue: `ByteEnumSeq`
    ///
    ///   - b2: `ByteEnumSeq`
    func opByteSeq(_ iceP_b1: ByteEnumSeq, context: Ice.Context? = nil) throws -> (returnValue: ByteEnumSeq, b2: ByteEnumSeq) {
        return try _impl._invoke(operation: "opByteSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ByteEnumSeqHelper.write(to: ostr, value: iceP_b1)
                                 },
                                 read: { istr in
                                     let iceP_b2: ByteEnumSeq = try ByteEnumSeqHelper.read(from: istr)
                                     let iceP_returnValue: ByteEnumSeq = try ByteEnumSeqHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_b2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ByteEnumSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ByteEnumSeq, b2: ByteEnumSeq)>` - The result of the operation
    func opByteSeqAsync(_ iceP_b1: ByteEnumSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ByteEnumSeq, b2: ByteEnumSeq)> {
        return _impl._invokeAsync(operation: "opByteSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ByteEnumSeqHelper.write(to: ostr, value: iceP_b1)
                                  },
                                  read: { istr in
                                      let iceP_b2: ByteEnumSeq = try ByteEnumSeqHelper.read(from: istr)
                                      let iceP_returnValue: ByteEnumSeq = try ByteEnumSeqHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_b2)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `ShortEnumSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: ShortEnumSeq, s2: ShortEnumSeq)`:
    ///
    ///   - returnValue: `ShortEnumSeq`
    ///
    ///   - s2: `ShortEnumSeq`
    func opShortSeq(_ iceP_s1: ShortEnumSeq, context: Ice.Context? = nil) throws -> (returnValue: ShortEnumSeq, s2: ShortEnumSeq) {
        return try _impl._invoke(operation: "opShortSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     ShortEnumSeqHelper.write(to: ostr, value: iceP_s1)
                                 },
                                 read: { istr in
                                     let iceP_s2: ShortEnumSeq = try ShortEnumSeqHelper.read(from: istr)
                                     let iceP_returnValue: ShortEnumSeq = try ShortEnumSeqHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_s2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `ShortEnumSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: ShortEnumSeq, s2: ShortEnumSeq)>` - The result of the operation
    func opShortSeqAsync(_ iceP_s1: ShortEnumSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: ShortEnumSeq, s2: ShortEnumSeq)> {
        return _impl._invokeAsync(operation: "opShortSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      ShortEnumSeqHelper.write(to: ostr, value: iceP_s1)
                                  },
                                  read: { istr in
                                      let iceP_s2: ShortEnumSeq = try ShortEnumSeqHelper.read(from: istr)
                                      let iceP_returnValue: ShortEnumSeq = try ShortEnumSeqHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_s2)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `IntEnumSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: IntEnumSeq, i2: IntEnumSeq)`:
    ///
    ///   - returnValue: `IntEnumSeq`
    ///
    ///   - i2: `IntEnumSeq`
    func opIntSeq(_ iceP_i1: IntEnumSeq, context: Ice.Context? = nil) throws -> (returnValue: IntEnumSeq, i2: IntEnumSeq) {
        return try _impl._invoke(operation: "opIntSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     IntEnumSeqHelper.write(to: ostr, value: iceP_i1)
                                 },
                                 read: { istr in
                                     let iceP_i2: IntEnumSeq = try IntEnumSeqHelper.read(from: istr)
                                     let iceP_returnValue: IntEnumSeq = try IntEnumSeqHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_i2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `IntEnumSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: IntEnumSeq, i2: IntEnumSeq)>` - The result of the operation
    func opIntSeqAsync(_ iceP_i1: IntEnumSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: IntEnumSeq, i2: IntEnumSeq)> {
        return _impl._invokeAsync(operation: "opIntSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      IntEnumSeqHelper.write(to: ostr, value: iceP_i1)
                                  },
                                  read: { istr in
                                      let iceP_i2: IntEnumSeq = try IntEnumSeqHelper.read(from: istr)
                                      let iceP_returnValue: IntEnumSeq = try IntEnumSeqHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_i2)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SimpleEnumSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: SimpleEnumSeq, s2: SimpleEnumSeq)`:
    ///
    ///   - returnValue: `SimpleEnumSeq`
    ///
    ///   - s2: `SimpleEnumSeq`
    func opSimpleSeq(_ iceP_s1: SimpleEnumSeq, context: Ice.Context? = nil) throws -> (returnValue: SimpleEnumSeq, s2: SimpleEnumSeq) {
        return try _impl._invoke(operation: "opSimpleSeq",
                                 mode: .Normal,
                                 write: { ostr in
                                     SimpleEnumSeqHelper.write(to: ostr, value: iceP_s1)
                                 },
                                 read: { istr in
                                     let iceP_s2: SimpleEnumSeq = try SimpleEnumSeqHelper.read(from: istr)
                                     let iceP_returnValue: SimpleEnumSeq = try SimpleEnumSeqHelper.read(from: istr)
                                     return (iceP_returnValue, iceP_s2)
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SimpleEnumSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<(returnValue: SimpleEnumSeq, s2: SimpleEnumSeq)>` - The result of the operation
    func opSimpleSeqAsync(_ iceP_s1: SimpleEnumSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<(returnValue: SimpleEnumSeq, s2: SimpleEnumSeq)> {
        return _impl._invokeAsync(operation: "opSimpleSeq",
                                  mode: .Normal,
                                  write: { ostr in
                                      SimpleEnumSeqHelper.write(to: ostr, value: iceP_s1)
                                  },
                                  read: { istr in
                                      let iceP_s2: SimpleEnumSeq = try SimpleEnumSeqHelper.read(from: istr)
                                      let iceP_returnValue: SimpleEnumSeq = try SimpleEnumSeqHelper.read(from: istr)
                                      return (iceP_returnValue, iceP_s2)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Dispatcher {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "ice_id":
            (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(request)
        case "opByte":
            servant._iceD_opByte(request)
        case "opByteSeq":
            servant._iceD_opByteSeq(request)
        case "opInt":
            servant._iceD_opInt(request)
        case "opIntSeq":
            servant._iceD_opIntSeq(request)
        case "opShort":
            servant._iceD_opShort(request)
        case "opShortSeq":
            servant._iceD_opShortSeq(request)
        case "opSimple":
            servant._iceD_opSimple(request)
        case "opSimpleSeq":
            servant._iceD_opSimpleSeq(request)
        case "shutdown":
            servant._iceD_shutdown(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol TestIntf {
    ///
    /// - parameter b1: `ByteEnum`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteEnum, b2: ByteEnum)`:
    ///
    ///   - returnValue: `ByteEnum`
    ///
    ///   - b2: `ByteEnum`
    func opByte(b1: ByteEnum, current: Ice.Current) throws -> (returnValue: ByteEnum, b2: ByteEnum)

    ///
    /// - parameter s1: `ShortEnum`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortEnum, s2: ShortEnum)`:
    ///
    ///   - returnValue: `ShortEnum`
    ///
    ///   - s2: `ShortEnum`
    func opShort(s1: ShortEnum, current: Ice.Current) throws -> (returnValue: ShortEnum, s2: ShortEnum)

    ///
    /// - parameter i1: `IntEnum`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntEnum, i2: IntEnum)`:
    ///
    ///   - returnValue: `IntEnum`
    ///
    ///   - i2: `IntEnum`
    func opInt(i1: IntEnum, current: Ice.Current) throws -> (returnValue: IntEnum, i2: IntEnum)

    ///
    /// - parameter s1: `SimpleEnum`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SimpleEnum, s2: SimpleEnum)`:
    ///
    ///   - returnValue: `SimpleEnum`
    ///
    ///   - s2: `SimpleEnum`
    func opSimple(s1: SimpleEnum, current: Ice.Current) throws -> (returnValue: SimpleEnum, s2: SimpleEnum)

    ///
    /// - parameter b1: `ByteEnumSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ByteEnumSeq, b2: ByteEnumSeq)`:
    ///
    ///   - returnValue: `ByteEnumSeq`
    ///
    ///   - b2: `ByteEnumSeq`
    func opByteSeq(b1: ByteEnumSeq, current: Ice.Current) throws -> (returnValue: ByteEnumSeq, b2: ByteEnumSeq)

    ///
    /// - parameter s1: `ShortEnumSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: ShortEnumSeq, s2: ShortEnumSeq)`:
    ///
    ///   - returnValue: `ShortEnumSeq`
    ///
    ///   - s2: `ShortEnumSeq`
    func opShortSeq(s1: ShortEnumSeq, current: Ice.Current) throws -> (returnValue: ShortEnumSeq, s2: ShortEnumSeq)

    ///
    /// - parameter i1: `IntEnumSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: IntEnumSeq, i2: IntEnumSeq)`:
    ///
    ///   - returnValue: `IntEnumSeq`
    ///
    ///   - i2: `IntEnumSeq`
    func opIntSeq(i1: IntEnumSeq, current: Ice.Current) throws -> (returnValue: IntEnumSeq, i2: IntEnumSeq)

    ///
    /// - parameter s1: `SimpleEnumSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: SimpleEnumSeq, s2: SimpleEnumSeq)`:
    ///
    ///   - returnValue: `SimpleEnumSeq`
    ///
    ///   - s2: `SimpleEnumSeq`
    func opSimpleSeq(s1: SimpleEnumSeq, current: Ice.Current) throws -> (returnValue: SimpleEnumSeq, s2: SimpleEnumSeq)

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws
}

/// TestIntf overview.
///
/// TestIntf Methods:
///
///  - opByte: 
///
///  - opShort: 
///
///  - opInt: 
///
///  - opSimple: 
///
///  - opByteSeq: 
///
///  - opShortSeq: 
///
///  - opIntSeq: 
///
///  - opSimpleSeq: 
///
///  - shutdown: 
extension TestIntf {
    public func _iceD_opByte(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_b1: ByteEnum = try istr.read()

            let (iceP_returnValue, iceP_b2) = try self.opByte(b1: iceP_b1, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_b2)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_opShort(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_s1: ShortEnum = try istr.read()

            let (iceP_returnValue, iceP_s2) = try self.opShort(s1: iceP_s1, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_s2)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_opInt(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_i1: IntEnum = try istr.read()

            let (iceP_returnValue, iceP_i2) = try self.opInt(i1: iceP_i1, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_i2)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_opSimple(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_s1: SimpleEnum = try istr.read()

            let (iceP_returnValue, iceP_s2) = try self.opSimple(s1: iceP_s1, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_s2)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_opByteSeq(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_b1: ByteEnumSeq = try ByteEnumSeqHelper.read(from: istr)

            let (iceP_returnValue, iceP_b2) = try self.opByteSeq(b1: iceP_b1, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ByteEnumSeqHelper.write(to: ostr, value: iceP_b2)
            ByteEnumSeqHelper.write(to: ostr, value: iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_opShortSeq(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_s1: ShortEnumSeq = try ShortEnumSeqHelper.read(from: istr)

            let (iceP_returnValue, iceP_s2) = try self.opShortSeq(s1: iceP_s1, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ShortEnumSeqHelper.write(to: ostr, value: iceP_s2)
            ShortEnumSeqHelper.write(to: ostr, value: iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_opIntSeq(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_i1: IntEnumSeq = try IntEnumSeqHelper.read(from: istr)

            let (iceP_returnValue, iceP_i2) = try self.opIntSeq(i1: iceP_i1, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            IntEnumSeqHelper.write(to: ostr, value: iceP_i2)
            IntEnumSeqHelper.write(to: ostr, value: iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_opSimpleSeq(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_s1: SimpleEnumSeq = try SimpleEnumSeqHelper.read(from: istr)

            let (iceP_returnValue, iceP_s2) = try self.opSimpleSeq(s1: iceP_s1, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            SimpleEnumSeqHelper.write(to: ostr, value: iceP_s2)
            SimpleEnumSeqHelper.write(to: ostr, value: iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.shutdown(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}
