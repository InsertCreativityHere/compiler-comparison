//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// Traits for Slice interface`MAIA`.
public struct MAIATraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::IA"]
    public static let staticId = "::Test::MA::IA"
}

/// Traits for Slice interface`MBIB1`.
public struct MBIB1Traits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::IA", "::Test::MB::IB1"]
    public static let staticId = "::Test::MB::IB1"
}

/// Traits for Slice interface`MBIB2`.
public struct MBIB2Traits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::IA", "::Test::MB::IB2"]
    public static let staticId = "::Test::MB::IB2"
}

/// Traits for Slice interface`MAIC`.
public struct MAICTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::IA", "::Test::MA::IC", "::Test::MB::IB1", "::Test::MB::IB2"]
    public static let staticId = "::Test::MA::IC"
}

/// Traits for Slice interface`Initial`.
public struct InitialTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Initial"]
    public static let staticId = "::Test::Initial"
}

public protocol MAIAPrx: Ice.ObjectPrx {}

private final class MAIAPrxI: Ice.ObjectPrxI, MAIAPrx {
    public override class func ice_staticId() -> Swift.String {
        return MAIATraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: MAIAPrx.Protocol) throws -> MAIAPrx {
    try communicator.makeProxyImpl(proxyString) as MAIAPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MAIAPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MAIAPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MAIAPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> MAIAPrx? {
    return try await MAIAPrxI.checkedCast(prx: prx, facet: facet, context: context) as MAIAPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MAIAPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MAIAPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MAIAPrx.Protocol, facet: Swift.String? = nil) -> MAIAPrx {
    return MAIAPrxI.uncheckedCast(prx: prx, facet: facet) as MAIAPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `MAIAPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: MAIAPrx.Protocol) -> Swift.String {
    return MAIATraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MAIAPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MAIAPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MAIAPrx?` - The extracted proxy
    func read(_ type: MAIAPrx.Protocol) throws -> MAIAPrx? {
        return try read() as MAIAPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MAIAPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MAIAPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MAIAPrx.Protocol) throws -> MAIAPrx? {
        return try read(tag: tag) as MAIAPrxI?
    }
}

public extension MAIAPrx {
    func iaop(_ iceP_p: MAIAPrx?, context: Ice.Context? = nil) async throws -> MAIAPrx? {
        return try await _impl._invoke(operation: "iaop",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_p)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: MAIAPrx? = try istr.read(MAIAPrx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}

public protocol MBIB1Prx: MAIAPrx {}

private final class MBIB1PrxI: Ice.ObjectPrxI, MBIB1Prx {
    public override class func ice_staticId() -> Swift.String {
        return MBIB1Traits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: MBIB1Prx.Protocol) throws -> MBIB1Prx {
    try communicator.makeProxyImpl(proxyString) as MBIB1PrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MBIB1Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MBIB1Prx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MBIB1Prx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> MBIB1Prx? {
    return try await MBIB1PrxI.checkedCast(prx: prx, facet: facet, context: context) as MBIB1PrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MBIB1Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MBIB1Prx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MBIB1Prx.Protocol, facet: Swift.String? = nil) -> MBIB1Prx {
    return MBIB1PrxI.uncheckedCast(prx: prx, facet: facet) as MBIB1PrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `MBIB1Prx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: MBIB1Prx.Protocol) -> Swift.String {
    return MBIB1Traits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MBIB1Prx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MBIB1Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBIB1Prx?` - The extracted proxy
    func read(_ type: MBIB1Prx.Protocol) throws -> MBIB1Prx? {
        return try read() as MBIB1PrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MBIB1Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBIB1Prx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MBIB1Prx.Protocol) throws -> MBIB1Prx? {
        return try read(tag: tag) as MBIB1PrxI?
    }
}

public extension MBIB1Prx {
    func ib1op(_ iceP_p: MBIB1Prx?, context: Ice.Context? = nil) async throws -> MBIB1Prx? {
        return try await _impl._invoke(operation: "ib1op",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_p)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: MBIB1Prx? = try istr.read(MBIB1Prx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}

public protocol MBIB2Prx: MAIAPrx {}

private final class MBIB2PrxI: Ice.ObjectPrxI, MBIB2Prx {
    public override class func ice_staticId() -> Swift.String {
        return MBIB2Traits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: MBIB2Prx.Protocol) throws -> MBIB2Prx {
    try communicator.makeProxyImpl(proxyString) as MBIB2PrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MBIB2Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MBIB2Prx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MBIB2Prx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> MBIB2Prx? {
    return try await MBIB2PrxI.checkedCast(prx: prx, facet: facet, context: context) as MBIB2PrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MBIB2Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MBIB2Prx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MBIB2Prx.Protocol, facet: Swift.String? = nil) -> MBIB2Prx {
    return MBIB2PrxI.uncheckedCast(prx: prx, facet: facet) as MBIB2PrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `MBIB2Prx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: MBIB2Prx.Protocol) -> Swift.String {
    return MBIB2Traits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MBIB2Prx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MBIB2Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBIB2Prx?` - The extracted proxy
    func read(_ type: MBIB2Prx.Protocol) throws -> MBIB2Prx? {
        return try read() as MBIB2PrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MBIB2Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBIB2Prx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MBIB2Prx.Protocol) throws -> MBIB2Prx? {
        return try read(tag: tag) as MBIB2PrxI?
    }
}

public extension MBIB2Prx {
    func ib2op(_ iceP_p: MBIB2Prx?, context: Ice.Context? = nil) async throws -> MBIB2Prx? {
        return try await _impl._invoke(operation: "ib2op",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_p)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: MBIB2Prx? = try istr.read(MBIB2Prx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}

public protocol MAICPrx: MBIB1Prx, MBIB2Prx {}

private final class MAICPrxI: Ice.ObjectPrxI, MAICPrx {
    public override class func ice_staticId() -> Swift.String {
        return MAICTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: MAICPrx.Protocol) throws -> MAICPrx {
    try communicator.makeProxyImpl(proxyString) as MAICPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MAICPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MAICPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MAICPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> MAICPrx? {
    return try await MAICPrxI.checkedCast(prx: prx, facet: facet, context: context) as MAICPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MAICPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MAICPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MAICPrx.Protocol, facet: Swift.String? = nil) -> MAICPrx {
    return MAICPrxI.uncheckedCast(prx: prx, facet: facet) as MAICPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `MAICPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: MAICPrx.Protocol) -> Swift.String {
    return MAICTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MAICPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MAICPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MAICPrx?` - The extracted proxy
    func read(_ type: MAICPrx.Protocol) throws -> MAICPrx? {
        return try read() as MAICPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MAICPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MAICPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MAICPrx.Protocol) throws -> MAICPrx? {
        return try read(tag: tag) as MAICPrxI?
    }
}

public extension MAICPrx {
    func icop(_ iceP_p: MAICPrx?, context: Ice.Context? = nil) async throws -> MAICPrx? {
        return try await _impl._invoke(operation: "icop",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_p)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: MAICPrx? = try istr.read(MAICPrx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}

public protocol InitialPrx: Ice.ObjectPrx {}

private final class InitialPrxI: Ice.ObjectPrxI, InitialPrx {
    public override class func ice_staticId() -> Swift.String {
        return InitialTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: InitialPrx.Protocol) throws -> InitialPrx {
    try communicator.makeProxyImpl(proxyString) as InitialPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `InitialPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `InitialPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: InitialPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> InitialPrx? {
    return try await InitialPrxI.checkedCast(prx: prx, facet: facet, context: context) as InitialPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `InitialPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `InitialPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: InitialPrx.Protocol, facet: Swift.String? = nil) -> InitialPrx {
    return InitialPrxI.uncheckedCast(prx: prx, facet: facet) as InitialPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `InitialPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: InitialPrx.Protocol) -> Swift.String {
    return InitialTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `InitialPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `InitialPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `InitialPrx?` - The extracted proxy
    func read(_ type: InitialPrx.Protocol) throws -> InitialPrx? {
        return try read() as InitialPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `InitialPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `InitialPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: InitialPrx.Protocol) throws -> InitialPrx? {
        return try read(tag: tag) as InitialPrxI?
    }
}

public extension InitialPrx {
    func shutdown(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "shutdown",
                                       mode: .Normal,
                                       context: context)
    }

    func iaop(context: Ice.Context? = nil) async throws -> MAIAPrx? {
        return try await _impl._invoke(operation: "iaop",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: MAIAPrx? = try istr.read(MAIAPrx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func ib1op(context: Ice.Context? = nil) async throws -> MBIB1Prx? {
        return try await _impl._invoke(operation: "ib1op",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: MBIB1Prx? = try istr.read(MBIB1Prx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func ib2op(context: Ice.Context? = nil) async throws -> MBIB2Prx? {
        return try await _impl._invoke(operation: "ib2op",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: MBIB2Prx? = try istr.read(MBIB2Prx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    func icop(context: Ice.Context? = nil) async throws -> MAICPrx? {
        return try await _impl._invoke(operation: "icop",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: MAICPrx? = try istr.read(MAICPrx.self)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }
}

/// :nodoc:
public class MCA_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MCA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MC_A() -> Ice.ValueTypeResolver {
        return MCA_TypeResolver()
    }
}

open class MCA: Ice.Value {
    public var aA: Swift.Int32 = 0

    public required init() {}

    public init(aA: Swift.Int32) {
        self.aA = aA
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MC::A" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.aA = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MCA.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.aA)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MCB_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MCB.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MC_B() -> Ice.ValueTypeResolver {
        return MCB_TypeResolver()
    }
}

open class MCB: MCA {
    public var bB: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32) {
        self.bB = bB
        super.init(aA: aA)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MC::B" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bB = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MCB.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.bB)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MCC_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MCC.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MC_C() -> Ice.ValueTypeResolver {
        return MCC_TypeResolver()
    }
}

open class MCC: MCB {
    public var cC: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32) {
        self.cC = cC
        super.init(aA: aA, bB: bB)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MC::C" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.cC = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MCC.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.cC)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MCD_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MCD.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MC_D() -> Ice.ValueTypeResolver {
        return MCD_TypeResolver()
    }
}

open class MCD: MCC {
    public var dD: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32, dD: Swift.Int32) {
        self.dD = dD
        super.init(aA: aA, bB: bB, cC: cC)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MC::D" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.dD = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MCD.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.dD)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MDA_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MDA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MD_A() -> Ice.ValueTypeResolver {
        return MDA_TypeResolver()
    }
}

open class MDA: Ice.Value {
    public var aA: Swift.Int32 = 0

    public required init() {}

    public init(aA: Swift.Int32) {
        self.aA = aA
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MD::A" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.aA = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MDA.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.aA)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MDB_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MDB.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MD_B() -> Ice.ValueTypeResolver {
        return MDB_TypeResolver()
    }
}

open class MDB: MDA {
    public var bB: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32) {
        self.bB = bB
        super.init(aA: aA)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MD::B" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bB = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MDB.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.bB)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MDC_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MDC.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MD_C() -> Ice.ValueTypeResolver {
        return MDC_TypeResolver()
    }
}

open class MDC: MDB {
    public var cC: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32) {
        self.cC = cC
        super.init(aA: aA, bB: bB)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MD::C" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.cC = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MDC.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.cC)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MDD_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MDD.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MD_D() -> Ice.ValueTypeResolver {
        return MDD_TypeResolver()
    }
}

open class MDD: MDC {
    public var dD: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32, dD: Swift.Int32) {
        self.dD = dD
        super.init(aA: aA, bB: bB, cC: cC)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MD::D" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.dD = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MDD.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.dD)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MEA_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MEA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_ME_A() -> Ice.ValueTypeResolver {
        return MEA_TypeResolver()
    }
}

open class MEA: Ice.Value {
    public var aA: Swift.Int32 = 0

    public required init() {}

    public init(aA: Swift.Int32) {
        self.aA = aA
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::ME::A" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.aA = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MEA.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.aA)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MEB_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MEB.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_ME_B() -> Ice.ValueTypeResolver {
        return MEB_TypeResolver()
    }
}

open class MEB: MEA {
    public var bB: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32) {
        self.bB = bB
        super.init(aA: aA)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::ME::B" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bB = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MEB.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.bB)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MEC_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MEC.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_ME_C() -> Ice.ValueTypeResolver {
        return MEC_TypeResolver()
    }
}

open class MEC: MEB {
    public var cC: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32) {
        self.cC = cC
        super.init(aA: aA, bB: bB)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::ME::C" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.cC = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MEC.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.cC)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MED_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MED.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_ME_D() -> Ice.ValueTypeResolver {
        return MED_TypeResolver()
    }
}

open class MED: MEC {
    public var dD: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32, dD: Swift.Int32) {
        self.dD = dD
        super.init(aA: aA, bB: bB, cC: cC)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::ME::D" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.dD = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MED.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.dD)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MFA_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MFA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MF_A() -> Ice.ValueTypeResolver {
        return MFA_TypeResolver()
    }
}

open class MFA: Ice.Value {
    public var aA: Swift.Int32 = 0

    public required init() {}

    public init(aA: Swift.Int32) {
        self.aA = aA
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MF::A" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.aA = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MFA.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.aA)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MFB_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MFB.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MF_B() -> Ice.ValueTypeResolver {
        return MFB_TypeResolver()
    }
}

open class MFB: MFA {
    public var bB: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32) {
        self.bB = bB
        super.init(aA: aA)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MF::B" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bB = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MFB.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.bB)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MFC_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MFC.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MF_C() -> Ice.ValueTypeResolver {
        return MFC_TypeResolver()
    }
}

open class MFC: MFB {
    public var cC: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32) {
        self.cC = cC
        super.init(aA: aA, bB: bB)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MF::C" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.cC = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MFC.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.cC)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MFD_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MFD.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MF_D() -> Ice.ValueTypeResolver {
        return MFD_TypeResolver()
    }
}

open class MFD: MFC {
    public var dD: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32, dD: Swift.Int32) {
        self.dD = dD
        super.init(aA: aA, bB: bB, cC: cC)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MF::D" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.dD = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MFD.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.dD)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MGA_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MGA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MG_A() -> Ice.ValueTypeResolver {
        return MGA_TypeResolver()
    }
}

open class MGA: Ice.Value {
    public var aA: Swift.Int32 = 0

    public required init() {}

    public init(aA: Swift.Int32) {
        self.aA = aA
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MG::A" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.aA = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MGA.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.aA)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MGB_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MGB.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MG_B() -> Ice.ValueTypeResolver {
        return MGB_TypeResolver()
    }
}

open class MGB: MGA {
    public var bB: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32) {
        self.bB = bB
        super.init(aA: aA)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MG::B" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bB = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MGB.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.bB)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MGC_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MGC.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MG_C() -> Ice.ValueTypeResolver {
        return MGC_TypeResolver()
    }
}

open class MGC: MGB {
    public var cC: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32) {
        self.cC = cC
        super.init(aA: aA, bB: bB)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MG::C" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.cC = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MGC.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.cC)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MGD_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MGD.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MG_D() -> Ice.ValueTypeResolver {
        return MGD_TypeResolver()
    }
}

open class MGD: MGC {
    public var dD: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32, dD: Swift.Int32) {
        self.dD = dD
        super.init(aA: aA, bB: bB, cC: cC)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MG::D" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.dD = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MGD.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.dD)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MHA_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MHA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MH_A() -> Ice.ValueTypeResolver {
        return MHA_TypeResolver()
    }
}

open class MHA: Ice.Value {
    public var aA: Swift.Int32 = 0

    public required init() {}

    public init(aA: Swift.Int32) {
        self.aA = aA
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MH::A" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.aA = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MHA.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.aA)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MHB_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MHB.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MH_B() -> Ice.ValueTypeResolver {
        return MHB_TypeResolver()
    }
}

open class MHB: MHA {
    public var bB: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32) {
        self.bB = bB
        super.init(aA: aA)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MH::B" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bB = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MHB.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.bB)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MHC_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MHC.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MH_C() -> Ice.ValueTypeResolver {
        return MHC_TypeResolver()
    }
}

open class MHC: MHB {
    public var cC: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32) {
        self.cC = cC
        super.init(aA: aA, bB: bB)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MH::C" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.cC = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MHC.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.cC)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MHD_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MHD.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MH_D() -> Ice.ValueTypeResolver {
        return MHD_TypeResolver()
    }
}

open class MHD: MHC {
    public var dD: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32, dD: Swift.Int32) {
        self.dD = dD
        super.init(aA: aA, bB: bB, cC: cC)
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::Test::MH::D" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.dD = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MHD.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.dD)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}


/// Dispatcher for `MAIA` servants.
public struct MAIADisp: Ice.Dispatcher {
    public let servant: MAIA
    private static let defaultObject = Ice.ObjectI<MAIATraits>()

    public init(_ servant: MAIA) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "iaop":
            try await servant._iceD_iaop(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? MAIADisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? MAIADisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? MAIADisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? MAIADisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol MAIA {
    func iaop(p: MAIAPrx?, current: Ice.Current) async throws -> MAIAPrx?
}


/// Dispatcher for `MBIB1` servants.
public struct MBIB1Disp: Ice.Dispatcher {
    public let servant: MBIB1
    private static let defaultObject = Ice.ObjectI<MBIB1Traits>()

    public init(_ servant: MBIB1) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "iaop":
            try await servant._iceD_iaop(request)
        case "ib1op":
            try await servant._iceD_ib1op(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? MBIB1Disp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? MBIB1Disp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? MBIB1Disp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? MBIB1Disp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol MBIB1: MAIA {
    func ib1op(p: MBIB1Prx?, current: Ice.Current) async throws -> MBIB1Prx?
}


/// Dispatcher for `MBIB2` servants.
public struct MBIB2Disp: Ice.Dispatcher {
    public let servant: MBIB2
    private static let defaultObject = Ice.ObjectI<MBIB2Traits>()

    public init(_ servant: MBIB2) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "iaop":
            try await servant._iceD_iaop(request)
        case "ib2op":
            try await servant._iceD_ib2op(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? MBIB2Disp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? MBIB2Disp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? MBIB2Disp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? MBIB2Disp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol MBIB2: MAIA {
    func ib2op(p: MBIB2Prx?, current: Ice.Current) async throws -> MBIB2Prx?
}


/// Dispatcher for `MAIC` servants.
public struct MAICDisp: Ice.Dispatcher {
    public let servant: MAIC
    private static let defaultObject = Ice.ObjectI<MAICTraits>()

    public init(_ servant: MAIC) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "iaop":
            try await servant._iceD_iaop(request)
        case "ib1op":
            try await servant._iceD_ib1op(request)
        case "ib2op":
            try await servant._iceD_ib2op(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? MAICDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? MAICDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? MAICDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? MAICDisp.defaultObject)._iceD_ice_ping(request)
        case "icop":
            try await servant._iceD_icop(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol MAIC: MBIB1, MBIB2 {
    func icop(p: MAICPrx?, current: Ice.Current) async throws -> MAICPrx?
}


/// Dispatcher for `Initial` servants.
public struct InitialDisp: Ice.Dispatcher {
    public let servant: Initial
    private static let defaultObject = Ice.ObjectI<InitialTraits>()

    public init(_ servant: Initial) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "iaop":
            try await servant._iceD_iaop(request)
        case "ib1op":
            try await servant._iceD_ib1op(request)
        case "ib2op":
            try await servant._iceD_ib2op(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? InitialDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? InitialDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? InitialDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? InitialDisp.defaultObject)._iceD_ice_ping(request)
        case "icop":
            try await servant._iceD_icop(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol Initial {
    func shutdown(current: Ice.Current) async throws

    func iaop(current: Ice.Current) async throws -> MAIAPrx?

    func ib1op(current: Ice.Current) async throws -> MBIB1Prx?

    func ib2op(current: Ice.Current) async throws -> MBIB2Prx?

    func icop(current: Ice.Current) async throws -> MAICPrx?
}

extension MAIA {
    public func _iceD_iaop(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_p: MAIAPrx? = try istr.read(MAIAPrx.self)
        let result = try await self.iaop(p: iceP_p, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}

extension MBIB1 {
    public func _iceD_ib1op(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_p: MBIB1Prx? = try istr.read(MBIB1Prx.self)
        let result = try await self.ib1op(p: iceP_p, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}

extension MBIB2 {
    public func _iceD_ib2op(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_p: MBIB2Prx? = try istr.read(MBIB2Prx.self)
        let result = try await self.ib2op(p: iceP_p, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}

extension MAIC {
    public func _iceD_icop(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_p: MAICPrx? = try istr.read(MAICPrx.self)
        let result = try await self.icop(p: iceP_p, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}

extension Initial {
    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_iaop(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.iaop(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_ib1op(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.ib1op(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_ib2op(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.ib2op(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_icop(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.icop(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}
