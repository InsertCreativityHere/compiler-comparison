//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice interface `MAIA`.
public struct MAIATraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::IA"]
    public static let staticId = "::Test::MA::IA"
}

/// Traits for Slice class `MACA`.
public struct MACATraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::CA"]
    public static let staticId = "::Test::MA::CA"
}

/// Traits for Slice interface `MBIB1`.
public struct MBIB1Traits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::IA", "::Test::MB::IB1"]
    public static let staticId = "::Test::MB::IB1"
}

/// Traits for Slice interface `MBIB2`.
public struct MBIB2Traits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::IA", "::Test::MB::IB2"]
    public static let staticId = "::Test::MB::IB2"
}

/// Traits for Slice class `MBCB`.
public struct MBCBTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::CA", "::Test::MB::CB"]
    public static let staticId = "::Test::MB::CB"
}

/// Traits for Slice interface `MAIC`.
public struct MAICTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::IA", "::Test::MA::IC", "::Test::MB::IB1", "::Test::MB::IB2"]
    public static let staticId = "::Test::MA::IC"
}

/// Traits for Slice class `MACC`.
public struct MACCTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::CA", "::Test::MA::CC", "::Test::MB::CB"]
    public static let staticId = "::Test::MA::CC"
}

/// Traits for Slice class `MACD`.
public struct MACDTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MA::CA", "::Test::MA::CC", "::Test::MA::CD", "::Test::MA::IA", "::Test::MB::CB", "::Test::MB::IB1", "::Test::MB::IB2"]
    public static let staticId = "::Test::MA::CD"
}

/// Traits for Slice interface `Initial`.
public struct InitialTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Initial"]
    public static let staticId = "::Test::Initial"
}

/// Traits for Slice class `MCA`.
public struct MCATraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MC::A"]
    public static let staticId = "::Test::MC::A"
}

/// Traits for Slice class `MCB`.
public struct MCBTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MC::A", "::Test::MC::B"]
    public static let staticId = "::Test::MC::B"
}

/// Traits for Slice class `MCC`.
public struct MCCTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MC::A", "::Test::MC::B", "::Test::MC::C"]
    public static let staticId = "::Test::MC::C"
}

/// Traits for Slice class `MCD`.
public struct MCDTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MC::A", "::Test::MC::B", "::Test::MC::C", "::Test::MC::D"]
    public static let staticId = "::Test::MC::D"
}

/// Traits for Slice class `MDA`.
public struct MDATraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MD::A"]
    public static let staticId = "::Test::MD::A"
}

/// Traits for Slice class `MDB`.
public struct MDBTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MD::A", "::Test::MD::B"]
    public static let staticId = "::Test::MD::B"
}

/// Traits for Slice class `MDC`.
public struct MDCTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MD::A", "::Test::MD::B", "::Test::MD::C"]
    public static let staticId = "::Test::MD::C"
}

/// Traits for Slice class `MDD`.
public struct MDDTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MD::A", "::Test::MD::B", "::Test::MD::C", "::Test::MD::D"]
    public static let staticId = "::Test::MD::D"
}

/// Traits for Slice class `MEA`.
public struct MEATraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::ME::A"]
    public static let staticId = "::Test::ME::A"
}

/// Traits for Slice class `MEB`.
public struct MEBTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::ME::A", "::Test::ME::B"]
    public static let staticId = "::Test::ME::B"
}

/// Traits for Slice class `MEC`.
public struct MECTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::ME::A", "::Test::ME::B", "::Test::ME::C"]
    public static let staticId = "::Test::ME::C"
}

/// Traits for Slice class `MED`.
public struct MEDTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::ME::A", "::Test::ME::B", "::Test::ME::C", "::Test::ME::D"]
    public static let staticId = "::Test::ME::D"
}

/// Traits for Slice class `MFA`.
public struct MFATraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MF::A"]
    public static let staticId = "::Test::MF::A"
}

/// Traits for Slice class `MFB`.
public struct MFBTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MF::A", "::Test::MF::B"]
    public static let staticId = "::Test::MF::B"
}

/// Traits for Slice class `MFC`.
public struct MFCTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MF::A", "::Test::MF::B", "::Test::MF::C"]
    public static let staticId = "::Test::MF::C"
}

/// Traits for Slice class `MFD`.
public struct MFDTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MF::A", "::Test::MF::B", "::Test::MF::C", "::Test::MF::D"]
    public static let staticId = "::Test::MF::D"
}

/// Traits for Slice class `MGA`.
public struct MGATraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MG::A"]
    public static let staticId = "::Test::MG::A"
}

/// Traits for Slice class `MGB`.
public struct MGBTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MG::A", "::Test::MG::B"]
    public static let staticId = "::Test::MG::B"
}

/// Traits for Slice class `MGC`.
public struct MGCTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MG::A", "::Test::MG::B", "::Test::MG::C"]
    public static let staticId = "::Test::MG::C"
}

/// Traits for Slice class `MGD`.
public struct MGDTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MG::A", "::Test::MG::B", "::Test::MG::C", "::Test::MG::D"]
    public static let staticId = "::Test::MG::D"
}

/// Traits for Slice class `MHA`.
public struct MHATraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MH::A"]
    public static let staticId = "::Test::MH::A"
}

/// Traits for Slice class `MHB`.
public struct MHBTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MH::A", "::Test::MH::B"]
    public static let staticId = "::Test::MH::B"
}

/// Traits for Slice class `MHC`.
public struct MHCTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MH::A", "::Test::MH::B", "::Test::MH::C"]
    public static let staticId = "::Test::MH::C"
}

/// Traits for Slice class `MHD`.
public struct MHDTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::MH::A", "::Test::MH::B", "::Test::MH::C", "::Test::MH::D"]
    public static let staticId = "::Test::MH::D"
}

/// MAIAPrx overview.
///
/// MAIAPrx Methods:
///
///  - iaop: 
///
///  - iaopAsync: 
public protocol MAIAPrx: Ice.ObjectPrx {}

private final class MAIAPrxI: Ice.ObjectPrxI, MAIAPrx {
    public override class func ice_staticId() -> Swift.String {
        return MAIATraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MAIAPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MAIAPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MAIAPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MAIAPrx? {
    return try MAIAPrxI.checkedCast(prx: prx, facet: facet, context: context) as MAIAPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MAIAPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MAIAPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MAIAPrx.Protocol, facet: Swift.String? = nil) -> MAIAPrx {
    return MAIAPrxI.uncheckedCast(prx: prx, facet: facet) as MAIAPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MAIAPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MAIAPrx.Protocol) -> Swift.String {
    return MAIATraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MAIAPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MAIAPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MAIAPrx?` - The extracted proxy
    func read(_ type: MAIAPrx.Protocol) throws -> MAIAPrx? {
        return try read() as MAIAPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MAIAPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MAIAPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MAIAPrx.Protocol) throws -> MAIAPrx? {
        return try read(tag: tag) as MAIAPrxI?
    }
}

/// MAIAPrx overview.
///
/// MAIAPrx Methods:
///
///  - iaop: 
///
///  - iaopAsync: 
public extension MAIAPrx {
    ///
    /// - parameter _: `MAIAPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MAIAPrx?`
    func iaop(_ iceP_p: MAIAPrx?, context: Ice.Context? = nil) throws -> MAIAPrx? {
        return try _impl._invoke(operation: "iaop",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_p)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MAIAPrx? = try istr.read(MAIAPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `MAIAPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MAIAPrx?>` - The result of the operation
    func iaopAsync(_ iceP_p: MAIAPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MAIAPrx?> {
        return _impl._invokeAsync(operation: "iaop",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MAIAPrx? = try istr.read(MAIAPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// MACAPrx overview.
///
/// MACAPrx Methods:
///
///  - caop: 
///
///  - caopAsync: 
public protocol MACAPrx: Ice.ObjectPrx {}

private final class MACAPrxI: Ice.ObjectPrxI, MACAPrx {
    public override class func ice_staticId() -> Swift.String {
        return MACATraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MACAPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MACAPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MACAPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MACAPrx? {
    return try MACAPrxI.checkedCast(prx: prx, facet: facet, context: context) as MACAPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MACAPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MACAPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MACAPrx.Protocol, facet: Swift.String? = nil) -> MACAPrx {
    return MACAPrxI.uncheckedCast(prx: prx, facet: facet) as MACAPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MACAPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MACAPrx.Protocol) -> Swift.String {
    return MACATraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MACAPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MACAPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MACAPrx?` - The extracted proxy
    func read(_ type: MACAPrx.Protocol) throws -> MACAPrx? {
        return try read() as MACAPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MACAPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MACAPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MACAPrx.Protocol) throws -> MACAPrx? {
        return try read(tag: tag) as MACAPrxI?
    }
}

/// MACAPrx overview.
///
/// MACAPrx Methods:
///
///  - caop: 
///
///  - caopAsync: 
public extension MACAPrx {
    ///
    /// - parameter _: `MACAPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MACAPrx?`
    func caop(_ iceP_p: MACAPrx?, context: Ice.Context? = nil) throws -> MACAPrx? {
        return try _impl._invoke(operation: "caop",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_p)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MACAPrx? = try istr.read(MACAPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `MACAPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MACAPrx?>` - The result of the operation
    func caopAsync(_ iceP_p: MACAPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MACAPrx?> {
        return _impl._invokeAsync(operation: "caop",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MACAPrx? = try istr.read(MACAPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// MBIB1Prx overview.
///
/// MBIB1Prx Methods:
///
///  - ib1op: 
///
///  - ib1opAsync: 
public protocol MBIB1Prx: MAIAPrx {}

private final class MBIB1PrxI: Ice.ObjectPrxI, MBIB1Prx {
    public override class func ice_staticId() -> Swift.String {
        return MBIB1Traits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MBIB1Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MBIB1Prx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MBIB1Prx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MBIB1Prx? {
    return try MBIB1PrxI.checkedCast(prx: prx, facet: facet, context: context) as MBIB1PrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MBIB1Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MBIB1Prx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MBIB1Prx.Protocol, facet: Swift.String? = nil) -> MBIB1Prx {
    return MBIB1PrxI.uncheckedCast(prx: prx, facet: facet) as MBIB1PrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MBIB1Prx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MBIB1Prx.Protocol) -> Swift.String {
    return MBIB1Traits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MBIB1Prx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MBIB1Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBIB1Prx?` - The extracted proxy
    func read(_ type: MBIB1Prx.Protocol) throws -> MBIB1Prx? {
        return try read() as MBIB1PrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MBIB1Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBIB1Prx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MBIB1Prx.Protocol) throws -> MBIB1Prx? {
        return try read(tag: tag) as MBIB1PrxI?
    }
}

/// MBIB1Prx overview.
///
/// MBIB1Prx Methods:
///
///  - ib1op: 
///
///  - ib1opAsync: 
public extension MBIB1Prx {
    ///
    /// - parameter _: `MBIB1Prx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MBIB1Prx?`
    func ib1op(_ iceP_p: MBIB1Prx?, context: Ice.Context? = nil) throws -> MBIB1Prx? {
        return try _impl._invoke(operation: "ib1op",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_p)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MBIB1Prx? = try istr.read(MBIB1Prx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `MBIB1Prx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MBIB1Prx?>` - The result of the operation
    func ib1opAsync(_ iceP_p: MBIB1Prx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MBIB1Prx?> {
        return _impl._invokeAsync(operation: "ib1op",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MBIB1Prx? = try istr.read(MBIB1Prx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// MBIB2Prx overview.
///
/// MBIB2Prx Methods:
///
///  - ib2op: 
///
///  - ib2opAsync: 
public protocol MBIB2Prx: MAIAPrx {}

private final class MBIB2PrxI: Ice.ObjectPrxI, MBIB2Prx {
    public override class func ice_staticId() -> Swift.String {
        return MBIB2Traits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MBIB2Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MBIB2Prx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MBIB2Prx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MBIB2Prx? {
    return try MBIB2PrxI.checkedCast(prx: prx, facet: facet, context: context) as MBIB2PrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MBIB2Prx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MBIB2Prx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MBIB2Prx.Protocol, facet: Swift.String? = nil) -> MBIB2Prx {
    return MBIB2PrxI.uncheckedCast(prx: prx, facet: facet) as MBIB2PrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MBIB2Prx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MBIB2Prx.Protocol) -> Swift.String {
    return MBIB2Traits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MBIB2Prx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MBIB2Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBIB2Prx?` - The extracted proxy
    func read(_ type: MBIB2Prx.Protocol) throws -> MBIB2Prx? {
        return try read() as MBIB2PrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MBIB2Prx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBIB2Prx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MBIB2Prx.Protocol) throws -> MBIB2Prx? {
        return try read(tag: tag) as MBIB2PrxI?
    }
}

/// MBIB2Prx overview.
///
/// MBIB2Prx Methods:
///
///  - ib2op: 
///
///  - ib2opAsync: 
public extension MBIB2Prx {
    ///
    /// - parameter _: `MBIB2Prx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MBIB2Prx?`
    func ib2op(_ iceP_p: MBIB2Prx?, context: Ice.Context? = nil) throws -> MBIB2Prx? {
        return try _impl._invoke(operation: "ib2op",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_p)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MBIB2Prx? = try istr.read(MBIB2Prx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `MBIB2Prx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MBIB2Prx?>` - The result of the operation
    func ib2opAsync(_ iceP_p: MBIB2Prx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MBIB2Prx?> {
        return _impl._invokeAsync(operation: "ib2op",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MBIB2Prx? = try istr.read(MBIB2Prx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// MBCBPrx overview.
///
/// MBCBPrx Methods:
///
///  - cbop: 
///
///  - cbopAsync: 
public protocol MBCBPrx: MACAPrx {}

private final class MBCBPrxI: Ice.ObjectPrxI, MBCBPrx {
    public override class func ice_staticId() -> Swift.String {
        return MBCBTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MBCBPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MBCBPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MBCBPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MBCBPrx? {
    return try MBCBPrxI.checkedCast(prx: prx, facet: facet, context: context) as MBCBPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MBCBPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MBCBPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MBCBPrx.Protocol, facet: Swift.String? = nil) -> MBCBPrx {
    return MBCBPrxI.uncheckedCast(prx: prx, facet: facet) as MBCBPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MBCBPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MBCBPrx.Protocol) -> Swift.String {
    return MBCBTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MBCBPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MBCBPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBCBPrx?` - The extracted proxy
    func read(_ type: MBCBPrx.Protocol) throws -> MBCBPrx? {
        return try read() as MBCBPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MBCBPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MBCBPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MBCBPrx.Protocol) throws -> MBCBPrx? {
        return try read(tag: tag) as MBCBPrxI?
    }
}

/// MBCBPrx overview.
///
/// MBCBPrx Methods:
///
///  - cbop: 
///
///  - cbopAsync: 
public extension MBCBPrx {
    ///
    /// - parameter _: `MBCBPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MBCBPrx?`
    func cbop(_ iceP_p: MBCBPrx?, context: Ice.Context? = nil) throws -> MBCBPrx? {
        return try _impl._invoke(operation: "cbop",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_p)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MBCBPrx? = try istr.read(MBCBPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `MBCBPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MBCBPrx?>` - The result of the operation
    func cbopAsync(_ iceP_p: MBCBPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MBCBPrx?> {
        return _impl._invokeAsync(operation: "cbop",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MBCBPrx? = try istr.read(MBCBPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// MAICPrx overview.
///
/// MAICPrx Methods:
///
///  - icop: 
///
///  - icopAsync: 
public protocol MAICPrx: MBIB1Prx, MBIB2Prx {}

private final class MAICPrxI: Ice.ObjectPrxI, MAICPrx {
    public override class func ice_staticId() -> Swift.String {
        return MAICTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MAICPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MAICPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MAICPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MAICPrx? {
    return try MAICPrxI.checkedCast(prx: prx, facet: facet, context: context) as MAICPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MAICPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MAICPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MAICPrx.Protocol, facet: Swift.String? = nil) -> MAICPrx {
    return MAICPrxI.uncheckedCast(prx: prx, facet: facet) as MAICPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MAICPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MAICPrx.Protocol) -> Swift.String {
    return MAICTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MAICPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MAICPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MAICPrx?` - The extracted proxy
    func read(_ type: MAICPrx.Protocol) throws -> MAICPrx? {
        return try read() as MAICPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MAICPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MAICPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MAICPrx.Protocol) throws -> MAICPrx? {
        return try read(tag: tag) as MAICPrxI?
    }
}

/// MAICPrx overview.
///
/// MAICPrx Methods:
///
///  - icop: 
///
///  - icopAsync: 
public extension MAICPrx {
    ///
    /// - parameter _: `MAICPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MAICPrx?`
    func icop(_ iceP_p: MAICPrx?, context: Ice.Context? = nil) throws -> MAICPrx? {
        return try _impl._invoke(operation: "icop",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_p)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MAICPrx? = try istr.read(MAICPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `MAICPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MAICPrx?>` - The result of the operation
    func icopAsync(_ iceP_p: MAICPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MAICPrx?> {
        return _impl._invokeAsync(operation: "icop",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MAICPrx? = try istr.read(MAICPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// MACCPrx overview.
///
/// MACCPrx Methods:
///
///  - ccop: 
///
///  - ccopAsync: 
public protocol MACCPrx: MBCBPrx {}

private final class MACCPrxI: Ice.ObjectPrxI, MACCPrx {
    public override class func ice_staticId() -> Swift.String {
        return MACCTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MACCPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MACCPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MACCPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MACCPrx? {
    return try MACCPrxI.checkedCast(prx: prx, facet: facet, context: context) as MACCPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MACCPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MACCPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MACCPrx.Protocol, facet: Swift.String? = nil) -> MACCPrx {
    return MACCPrxI.uncheckedCast(prx: prx, facet: facet) as MACCPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MACCPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MACCPrx.Protocol) -> Swift.String {
    return MACCTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MACCPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MACCPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MACCPrx?` - The extracted proxy
    func read(_ type: MACCPrx.Protocol) throws -> MACCPrx? {
        return try read() as MACCPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MACCPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MACCPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MACCPrx.Protocol) throws -> MACCPrx? {
        return try read(tag: tag) as MACCPrxI?
    }
}

/// MACCPrx overview.
///
/// MACCPrx Methods:
///
///  - ccop: 
///
///  - ccopAsync: 
public extension MACCPrx {
    ///
    /// - parameter _: `MACCPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MACCPrx?`
    func ccop(_ iceP_p: MACCPrx?, context: Ice.Context? = nil) throws -> MACCPrx? {
        return try _impl._invoke(operation: "ccop",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_p)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MACCPrx? = try istr.read(MACCPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `MACCPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MACCPrx?>` - The result of the operation
    func ccopAsync(_ iceP_p: MACCPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MACCPrx?> {
        return _impl._invokeAsync(operation: "ccop",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MACCPrx? = try istr.read(MACCPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// MACDPrx overview.
///
/// MACDPrx Methods:
///
///  - cdop: 
///
///  - cdopAsync: 
public protocol MACDPrx: MACCPrx, MBIB1Prx, MBIB2Prx {}

private final class MACDPrxI: Ice.ObjectPrxI, MACDPrx {
    public override class func ice_staticId() -> Swift.String {
        return MACDTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `MACDPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `MACDPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: MACDPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> MACDPrx? {
    return try MACDPrxI.checkedCast(prx: prx, facet: facet, context: context) as MACDPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `MACDPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `MACDPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: MACDPrx.Protocol, facet: Swift.String? = nil) -> MACDPrx {
    return MACDPrxI.uncheckedCast(prx: prx, facet: facet) as MACDPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `MACDPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: MACDPrx.Protocol) -> Swift.String {
    return MACDTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `MACDPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `MACDPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MACDPrx?` - The extracted proxy
    func read(_ type: MACDPrx.Protocol) throws -> MACDPrx? {
        return try read() as MACDPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `MACDPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `MACDPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: MACDPrx.Protocol) throws -> MACDPrx? {
        return try read(tag: tag) as MACDPrxI?
    }
}

/// MACDPrx overview.
///
/// MACDPrx Methods:
///
///  - cdop: 
///
///  - cdopAsync: 
public extension MACDPrx {
    ///
    /// - parameter _: `MACDPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MACDPrx?`
    func cdop(_ iceP_p: MACDPrx?, context: Ice.Context? = nil) throws -> MACDPrx? {
        return try _impl._invoke(operation: "cdop",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_p)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: MACDPrx? = try istr.read(MACDPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `MACDPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MACDPrx?>` - The result of the operation
    func cdopAsync(_ iceP_p: MACDPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MACDPrx?> {
        return _impl._invokeAsync(operation: "cdop",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_p)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: MACDPrx? = try istr.read(MACDPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// InitialPrx overview.
///
/// InitialPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - caop: 
///
///  - caopAsync: 
///
///  - cbop: 
///
///  - cbopAsync: 
///
///  - ccop: 
///
///  - ccopAsync: 
///
///  - cdop: 
///
///  - cdopAsync: 
///
///  - iaop: 
///
///  - iaopAsync: 
///
///  - ib1op: 
///
///  - ib1opAsync: 
///
///  - ib2op: 
///
///  - ib2opAsync: 
///
///  - icop: 
///
///  - icopAsync: 
public protocol InitialPrx: Ice.ObjectPrx {}

private final class InitialPrxI: Ice.ObjectPrxI, InitialPrx {
    public override class func ice_staticId() -> Swift.String {
        return InitialTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `InitialPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `InitialPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: InitialPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> InitialPrx? {
    return try InitialPrxI.checkedCast(prx: prx, facet: facet, context: context) as InitialPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `InitialPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `InitialPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: InitialPrx.Protocol, facet: Swift.String? = nil) -> InitialPrx {
    return InitialPrxI.uncheckedCast(prx: prx, facet: facet) as InitialPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `InitialPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: InitialPrx.Protocol) -> Swift.String {
    return InitialTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `InitialPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `InitialPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `InitialPrx?` - The extracted proxy
    func read(_ type: InitialPrx.Protocol) throws -> InitialPrx? {
        return try read() as InitialPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `InitialPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `InitialPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: InitialPrx.Protocol) throws -> InitialPrx? {
        return try read(tag: tag) as InitialPrxI?
    }
}

/// InitialPrx overview.
///
/// InitialPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - caop: 
///
///  - caopAsync: 
///
///  - cbop: 
///
///  - cbopAsync: 
///
///  - ccop: 
///
///  - ccopAsync: 
///
///  - cdop: 
///
///  - cdopAsync: 
///
///  - iaop: 
///
///  - iaopAsync: 
///
///  - ib1op: 
///
///  - ib1opAsync: 
///
///  - ib2op: 
///
///  - ib2opAsync: 
///
///  - icop: 
///
///  - icopAsync: 
public extension InitialPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MACAPrx?`
    func caop(context: Ice.Context? = nil) throws -> MACAPrx? {
        return try _impl._invoke(operation: "caop",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: MACAPrx? = try istr.read(MACAPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MACAPrx?>` - The result of the operation
    func caopAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MACAPrx?> {
        return _impl._invokeAsync(operation: "caop",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: MACAPrx? = try istr.read(MACAPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MBCBPrx?`
    func cbop(context: Ice.Context? = nil) throws -> MBCBPrx? {
        return try _impl._invoke(operation: "cbop",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: MBCBPrx? = try istr.read(MBCBPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MBCBPrx?>` - The result of the operation
    func cbopAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MBCBPrx?> {
        return _impl._invokeAsync(operation: "cbop",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: MBCBPrx? = try istr.read(MBCBPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MACCPrx?`
    func ccop(context: Ice.Context? = nil) throws -> MACCPrx? {
        return try _impl._invoke(operation: "ccop",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: MACCPrx? = try istr.read(MACCPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MACCPrx?>` - The result of the operation
    func ccopAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MACCPrx?> {
        return _impl._invokeAsync(operation: "ccop",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: MACCPrx? = try istr.read(MACCPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MACDPrx?`
    func cdop(context: Ice.Context? = nil) throws -> MACDPrx? {
        return try _impl._invoke(operation: "cdop",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: MACDPrx? = try istr.read(MACDPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MACDPrx?>` - The result of the operation
    func cdopAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MACDPrx?> {
        return _impl._invokeAsync(operation: "cdop",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: MACDPrx? = try istr.read(MACDPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MAIAPrx?`
    func iaop(context: Ice.Context? = nil) throws -> MAIAPrx? {
        return try _impl._invoke(operation: "iaop",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: MAIAPrx? = try istr.read(MAIAPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MAIAPrx?>` - The result of the operation
    func iaopAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MAIAPrx?> {
        return _impl._invokeAsync(operation: "iaop",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: MAIAPrx? = try istr.read(MAIAPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MBIB1Prx?`
    func ib1op(context: Ice.Context? = nil) throws -> MBIB1Prx? {
        return try _impl._invoke(operation: "ib1op",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: MBIB1Prx? = try istr.read(MBIB1Prx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MBIB1Prx?>` - The result of the operation
    func ib1opAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MBIB1Prx?> {
        return _impl._invokeAsync(operation: "ib1op",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: MBIB1Prx? = try istr.read(MBIB1Prx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MBIB2Prx?`
    func ib2op(context: Ice.Context? = nil) throws -> MBIB2Prx? {
        return try _impl._invoke(operation: "ib2op",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: MBIB2Prx? = try istr.read(MBIB2Prx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MBIB2Prx?>` - The result of the operation
    func ib2opAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MBIB2Prx?> {
        return _impl._invokeAsync(operation: "ib2op",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: MBIB2Prx? = try istr.read(MBIB2Prx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `MAICPrx?`
    func icop(context: Ice.Context? = nil) throws -> MAICPrx? {
        return try _impl._invoke(operation: "icop",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: MAICPrx? = try istr.read(MAICPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<MAICPrx?>` - The result of the operation
    func icopAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<MAICPrx?> {
        return _impl._invokeAsync(operation: "icop",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: MAICPrx? = try istr.read(MAICPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// :nodoc:
public class MACA_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MACA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MA_CA() -> Ice.ValueTypeResolver {
        return MACA_TypeResolver()
    }
}

open class MACA: Ice.Value {
    public required init() {}

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MACATraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MACATraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MACATraits.staticId, compactId: -1, last: true)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MBCB_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MBCB.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MB_CB() -> Ice.ValueTypeResolver {
        return MBCB_TypeResolver()
    }
}

open class MBCB: MACA {
    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MBCBTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MBCBTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MBCBTraits.staticId, compactId: -1, last: false)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MACC_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MACC.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MA_CC() -> Ice.ValueTypeResolver {
        return MACC_TypeResolver()
    }
}

open class MACC: MBCB {
    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MACCTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MACCTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MACCTraits.staticId, compactId: -1, last: false)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MACD_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MACD.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MA_CD() -> Ice.ValueTypeResolver {
        return MACD_TypeResolver()
    }
}

open class MACD: MACC {
    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MACDTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MACDTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MACDTraits.staticId, compactId: -1, last: false)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MCA_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MCA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MC_A() -> Ice.ValueTypeResolver {
        return MCA_TypeResolver()
    }
}

open class MCA: Ice.Value {
    public var aA: Swift.Int32 = 0

    public required init() {}

    public init(aA: Swift.Int32) {
        self.aA = aA
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MCATraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MCATraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.aA = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MCATraits.staticId, compactId: -1, last: true)
        ostr.write(self.aA)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MCB_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MCB.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MC_B() -> Ice.ValueTypeResolver {
        return MCB_TypeResolver()
    }
}

open class MCB: MCA {
    public var bB: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32) {
        self.bB = bB
        super.init(aA: aA)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MCBTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MCBTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bB = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MCBTraits.staticId, compactId: -1, last: false)
        ostr.write(self.bB)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MCC_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MCC.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MC_C() -> Ice.ValueTypeResolver {
        return MCC_TypeResolver()
    }
}

open class MCC: MCB {
    public var cC: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32) {
        self.cC = cC
        super.init(aA: aA, bB: bB)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MCCTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MCCTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.cC = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MCCTraits.staticId, compactId: -1, last: false)
        ostr.write(self.cC)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MCD_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MCD.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MC_D() -> Ice.ValueTypeResolver {
        return MCD_TypeResolver()
    }
}

open class MCD: MCC {
    public var dD: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32, dD: Swift.Int32) {
        self.dD = dD
        super.init(aA: aA, bB: bB, cC: cC)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MCDTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MCDTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.dD = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MCDTraits.staticId, compactId: -1, last: false)
        ostr.write(self.dD)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MDA_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MDA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MD_A() -> Ice.ValueTypeResolver {
        return MDA_TypeResolver()
    }
}

open class MDA: Ice.Value {
    public var aA: Swift.Int32 = 0

    public required init() {}

    public init(aA: Swift.Int32) {
        self.aA = aA
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MDATraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MDATraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.aA = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MDATraits.staticId, compactId: -1, last: true)
        ostr.write(self.aA)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MDB_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MDB.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MD_B() -> Ice.ValueTypeResolver {
        return MDB_TypeResolver()
    }
}

open class MDB: MDA {
    public var bB: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32) {
        self.bB = bB
        super.init(aA: aA)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MDBTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MDBTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bB = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MDBTraits.staticId, compactId: -1, last: false)
        ostr.write(self.bB)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MDC_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MDC.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MD_C() -> Ice.ValueTypeResolver {
        return MDC_TypeResolver()
    }
}

open class MDC: MDB {
    public var cC: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32) {
        self.cC = cC
        super.init(aA: aA, bB: bB)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MDCTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MDCTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.cC = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MDCTraits.staticId, compactId: -1, last: false)
        ostr.write(self.cC)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MDD_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MDD.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MD_D() -> Ice.ValueTypeResolver {
        return MDD_TypeResolver()
    }
}

open class MDD: MDC {
    public var dD: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32, dD: Swift.Int32) {
        self.dD = dD
        super.init(aA: aA, bB: bB, cC: cC)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MDDTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MDDTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.dD = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MDDTraits.staticId, compactId: -1, last: false)
        ostr.write(self.dD)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MEA_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MEA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_ME_A() -> Ice.ValueTypeResolver {
        return MEA_TypeResolver()
    }
}

open class MEA: Ice.Value {
    public var aA: Swift.Int32 = 0

    public required init() {}

    public init(aA: Swift.Int32) {
        self.aA = aA
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MEATraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MEATraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.aA = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MEATraits.staticId, compactId: -1, last: true)
        ostr.write(self.aA)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MEB_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MEB.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_ME_B() -> Ice.ValueTypeResolver {
        return MEB_TypeResolver()
    }
}

open class MEB: MEA {
    public var bB: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32) {
        self.bB = bB
        super.init(aA: aA)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MEBTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MEBTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bB = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MEBTraits.staticId, compactId: -1, last: false)
        ostr.write(self.bB)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MEC_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MEC.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_ME_C() -> Ice.ValueTypeResolver {
        return MEC_TypeResolver()
    }
}

open class MEC: MEB {
    public var cC: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32) {
        self.cC = cC
        super.init(aA: aA, bB: bB)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MECTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MECTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.cC = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MECTraits.staticId, compactId: -1, last: false)
        ostr.write(self.cC)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MED_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MED.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_ME_D() -> Ice.ValueTypeResolver {
        return MED_TypeResolver()
    }
}

open class MED: MEC {
    public var dD: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32, dD: Swift.Int32) {
        self.dD = dD
        super.init(aA: aA, bB: bB, cC: cC)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MEDTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MEDTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.dD = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MEDTraits.staticId, compactId: -1, last: false)
        ostr.write(self.dD)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MFA_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MFA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MF_A() -> Ice.ValueTypeResolver {
        return MFA_TypeResolver()
    }
}

open class MFA: Ice.Value {
    public var aA: Swift.Int32 = 0

    public required init() {}

    public init(aA: Swift.Int32) {
        self.aA = aA
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MFATraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MFATraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.aA = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MFATraits.staticId, compactId: -1, last: true)
        ostr.write(self.aA)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MFB_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MFB.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MF_B() -> Ice.ValueTypeResolver {
        return MFB_TypeResolver()
    }
}

open class MFB: MFA {
    public var bB: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32) {
        self.bB = bB
        super.init(aA: aA)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MFBTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MFBTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bB = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MFBTraits.staticId, compactId: -1, last: false)
        ostr.write(self.bB)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MFC_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MFC.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MF_C() -> Ice.ValueTypeResolver {
        return MFC_TypeResolver()
    }
}

open class MFC: MFB {
    public var cC: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32) {
        self.cC = cC
        super.init(aA: aA, bB: bB)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MFCTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MFCTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.cC = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MFCTraits.staticId, compactId: -1, last: false)
        ostr.write(self.cC)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MFD_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MFD.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MF_D() -> Ice.ValueTypeResolver {
        return MFD_TypeResolver()
    }
}

open class MFD: MFC {
    public var dD: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32, dD: Swift.Int32) {
        self.dD = dD
        super.init(aA: aA, bB: bB, cC: cC)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MFDTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MFDTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.dD = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MFDTraits.staticId, compactId: -1, last: false)
        ostr.write(self.dD)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MGA_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MGA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MG_A() -> Ice.ValueTypeResolver {
        return MGA_TypeResolver()
    }
}

open class MGA: Ice.Value {
    public var aA: Swift.Int32 = 0

    public required init() {}

    public init(aA: Swift.Int32) {
        self.aA = aA
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MGATraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MGATraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.aA = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MGATraits.staticId, compactId: -1, last: true)
        ostr.write(self.aA)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MGB_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MGB.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MG_B() -> Ice.ValueTypeResolver {
        return MGB_TypeResolver()
    }
}

open class MGB: MGA {
    public var bB: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32) {
        self.bB = bB
        super.init(aA: aA)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MGBTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MGBTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bB = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MGBTraits.staticId, compactId: -1, last: false)
        ostr.write(self.bB)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MGC_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MGC.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MG_C() -> Ice.ValueTypeResolver {
        return MGC_TypeResolver()
    }
}

open class MGC: MGB {
    public var cC: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32) {
        self.cC = cC
        super.init(aA: aA, bB: bB)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MGCTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MGCTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.cC = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MGCTraits.staticId, compactId: -1, last: false)
        ostr.write(self.cC)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MGD_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MGD.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MG_D() -> Ice.ValueTypeResolver {
        return MGD_TypeResolver()
    }
}

open class MGD: MGC {
    public var dD: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32, dD: Swift.Int32) {
        self.dD = dD
        super.init(aA: aA, bB: bB, cC: cC)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MGDTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MGDTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.dD = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MGDTraits.staticId, compactId: -1, last: false)
        ostr.write(self.dD)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MHA_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MHA.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MH_A() -> Ice.ValueTypeResolver {
        return MHA_TypeResolver()
    }
}

open class MHA: Ice.Value {
    public var aA: Swift.Int32 = 0

    public required init() {}

    public init(aA: Swift.Int32) {
        self.aA = aA
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MHATraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MHATraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.aA = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MHATraits.staticId, compactId: -1, last: true)
        ostr.write(self.aA)
        ostr.endSlice()
    }
}

/// :nodoc:
public class MHB_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MHB.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MH_B() -> Ice.ValueTypeResolver {
        return MHB_TypeResolver()
    }
}

open class MHB: MHA {
    public var bB: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32) {
        self.bB = bB
        super.init(aA: aA)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MHBTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MHBTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.bB = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MHBTraits.staticId, compactId: -1, last: false)
        ostr.write(self.bB)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MHC_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MHC.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MH_C() -> Ice.ValueTypeResolver {
        return MHC_TypeResolver()
    }
}

open class MHC: MHB {
    public var cC: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32) {
        self.cC = cC
        super.init(aA: aA, bB: bB)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MHCTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MHCTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.cC = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MHCTraits.staticId, compactId: -1, last: false)
        ostr.write(self.cC)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}

/// :nodoc:
public class MHD_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return MHD.self
    }
}

public extension Ice.ClassResolver {
    @objc static func IceInheritanceTest_MH_D() -> Ice.ValueTypeResolver {
        return MHD_TypeResolver()
    }
}

open class MHD: MHC {
    public var dD: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(aA: Swift.Int32, bB: Swift.Int32, cC: Swift.Int32, dD: Swift.Int32) {
        self.dD = dD
        super.init(aA: aA, bB: bB, cC: cC)
    }

    /// Returns the Slice type ID of the most-derived interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the most-derived interface supported by this object
    open override func ice_id() -> Swift.String {
        return MHDTraits.staticId
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String {
        return MHDTraits.staticId
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.dD = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: MHDTraits.staticId, compactId: -1, last: false)
        ostr.write(self.dD)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }
}


/// Dispatcher for `MAIA` servants.
public struct MAIADisp: Ice.Disp {
    public let servant: MAIA
    private static let defaultObject = Ice.ObjectI<MAIATraits>()

    public init(_ servant: MAIA) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "iaop":
            return try servant._iceD_iaop(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MAIADisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MAIADisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MAIADisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MAIADisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MAIA {
    ///
    /// - parameter p: `MAIAPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MAIAPrx?`
    func iaop(p: MAIAPrx?, current: Ice.Current) throws -> MAIAPrx?
}


/// Dispatcher for `MACAOperations` servants.
public struct MACADisp: Ice.Disp {
    public let servant: MACAOperations
    private static let defaultObject = Ice.ObjectI<MACATraits>()

    public init(_ servant: MACAOperations) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "caop":
            return try servant._iceD_caop(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MACADisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MACADisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MACADisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MACADisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MACAOperations {
    ///
    /// - parameter p: `MACAPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MACAPrx?`
    func caop(p: MACAPrx?, current: Ice.Current) throws -> MACAPrx?
}


/// Dispatcher for `MBIB1` servants.
public struct MBIB1Disp: Ice.Disp {
    public let servant: MBIB1
    private static let defaultObject = Ice.ObjectI<MBIB1Traits>()

    public init(_ servant: MBIB1) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "iaop":
            return try servant._iceD_iaop(incoming: request, current: current)
        case "ib1op":
            return try servant._iceD_ib1op(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MBIB1Disp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MBIB1Disp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MBIB1Disp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MBIB1Disp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MBIB1: MAIA {
    ///
    /// - parameter p: `MBIB1Prx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MBIB1Prx?`
    func ib1op(p: MBIB1Prx?, current: Ice.Current) throws -> MBIB1Prx?
}


/// Dispatcher for `MBIB2` servants.
public struct MBIB2Disp: Ice.Disp {
    public let servant: MBIB2
    private static let defaultObject = Ice.ObjectI<MBIB2Traits>()

    public init(_ servant: MBIB2) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "iaop":
            return try servant._iceD_iaop(incoming: request, current: current)
        case "ib2op":
            return try servant._iceD_ib2op(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MBIB2Disp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MBIB2Disp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MBIB2Disp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MBIB2Disp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MBIB2: MAIA {
    ///
    /// - parameter p: `MBIB2Prx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MBIB2Prx?`
    func ib2op(p: MBIB2Prx?, current: Ice.Current) throws -> MBIB2Prx?
}


/// Dispatcher for `MBCBOperations` servants.
public struct MBCBDisp: Ice.Disp {
    public let servant: MBCBOperations
    private static let defaultObject = Ice.ObjectI<MBCBTraits>()

    public init(_ servant: MBCBOperations) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "caop":
            return try servant._iceD_caop(incoming: request, current: current)
        case "cbop":
            return try servant._iceD_cbop(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MBCBDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MBCBDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MBCBDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MBCBDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MBCBOperations: MACAOperations {
    ///
    /// - parameter p: `MBCBPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MBCBPrx?`
    func cbop(p: MBCBPrx?, current: Ice.Current) throws -> MBCBPrx?
}


/// Dispatcher for `MAIC` servants.
public struct MAICDisp: Ice.Disp {
    public let servant: MAIC
    private static let defaultObject = Ice.ObjectI<MAICTraits>()

    public init(_ servant: MAIC) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "iaop":
            return try servant._iceD_iaop(incoming: request, current: current)
        case "ib1op":
            return try servant._iceD_ib1op(incoming: request, current: current)
        case "ib2op":
            return try servant._iceD_ib2op(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MAICDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MAICDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MAICDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MAICDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "icop":
            return try servant._iceD_icop(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MAIC: MBIB1, MBIB2 {
    ///
    /// - parameter p: `MAICPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MAICPrx?`
    func icop(p: MAICPrx?, current: Ice.Current) throws -> MAICPrx?
}


/// Dispatcher for `MACCOperations` servants.
public struct MACCDisp: Ice.Disp {
    public let servant: MACCOperations
    private static let defaultObject = Ice.ObjectI<MACCTraits>()

    public init(_ servant: MACCOperations) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "caop":
            return try servant._iceD_caop(incoming: request, current: current)
        case "cbop":
            return try servant._iceD_cbop(incoming: request, current: current)
        case "ccop":
            return try servant._iceD_ccop(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MACCDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MACCDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MACCDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MACCDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MACCOperations: MBCBOperations {
    ///
    /// - parameter p: `MACCPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MACCPrx?`
    func ccop(p: MACCPrx?, current: Ice.Current) throws -> MACCPrx?
}


/// Dispatcher for `MACDOperations` servants.
public struct MACDDisp: Ice.Disp {
    public let servant: MACDOperations
    private static let defaultObject = Ice.ObjectI<MACDTraits>()

    public init(_ servant: MACDOperations) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "caop":
            return try servant._iceD_caop(incoming: request, current: current)
        case "cbop":
            return try servant._iceD_cbop(incoming: request, current: current)
        case "ccop":
            return try servant._iceD_ccop(incoming: request, current: current)
        case "cdop":
            return try servant._iceD_cdop(incoming: request, current: current)
        case "iaop":
            return try servant._iceD_iaop(incoming: request, current: current)
        case "ib1op":
            return try servant._iceD_ib1op(incoming: request, current: current)
        case "ib2op":
            return try servant._iceD_ib2op(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? MACDDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? MACDDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? MACDDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? MACDDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol MACDOperations: MACCOperations, MBIB1, MBIB2 {
    ///
    /// - parameter p: `MACDPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MACDPrx?`
    func cdop(p: MACDPrx?, current: Ice.Current) throws -> MACDPrx?
}


/// Dispatcher for `Initial` servants.
public struct InitialDisp: Ice.Disp {
    public let servant: Initial
    private static let defaultObject = Ice.ObjectI<InitialTraits>()

    public init(_ servant: Initial) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "caop":
            return try servant._iceD_caop(incoming: request, current: current)
        case "cbop":
            return try servant._iceD_cbop(incoming: request, current: current)
        case "ccop":
            return try servant._iceD_ccop(incoming: request, current: current)
        case "cdop":
            return try servant._iceD_cdop(incoming: request, current: current)
        case "iaop":
            return try servant._iceD_iaop(incoming: request, current: current)
        case "ib1op":
            return try servant._iceD_ib1op(incoming: request, current: current)
        case "ib2op":
            return try servant._iceD_ib2op(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? InitialDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? InitialDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? InitialDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? InitialDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "icop":
            return try servant._iceD_icop(incoming: request, current: current)
        case "shutdown":
            return try servant._iceD_shutdown(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol Initial {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MACAPrx?`
    func caop(current: Ice.Current) throws -> MACAPrx?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MBCBPrx?`
    func cbop(current: Ice.Current) throws -> MBCBPrx?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MACCPrx?`
    func ccop(current: Ice.Current) throws -> MACCPrx?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MACDPrx?`
    func cdop(current: Ice.Current) throws -> MACDPrx?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MAIAPrx?`
    func iaop(current: Ice.Current) throws -> MAIAPrx?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MBIB1Prx?`
    func ib1op(current: Ice.Current) throws -> MBIB1Prx?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MBIB2Prx?`
    func ib2op(current: Ice.Current) throws -> MBIB2Prx?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `MAICPrx?`
    func icop(current: Ice.Current) throws -> MAICPrx?
}

/// MAIA overview.
///
/// MAIA Methods:
///
///  - iaop: 
public extension MAIA {
    func _iceD_iaop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p: MAIAPrx? = try inS.read { istr in
            let iceP_p: MAIAPrx? = try istr.read(MAIAPrx.self)
            return iceP_p
        }

        let iceP_returnValue = try self.iaop(p: iceP_p, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// MACA overview.
///
/// MACA Methods:
///
///  - caop: 
public extension MACAOperations {
    func _iceD_caop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p: MACAPrx? = try inS.read { istr in
            let iceP_p: MACAPrx? = try istr.read(MACAPrx.self)
            return iceP_p
        }

        let iceP_returnValue = try self.caop(p: iceP_p, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// MBIB1 overview.
///
/// MBIB1 Methods:
///
///  - ib1op: 
public extension MBIB1 {
    func _iceD_ib1op(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p: MBIB1Prx? = try inS.read { istr in
            let iceP_p: MBIB1Prx? = try istr.read(MBIB1Prx.self)
            return iceP_p
        }

        let iceP_returnValue = try self.ib1op(p: iceP_p, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// MBIB2 overview.
///
/// MBIB2 Methods:
///
///  - ib2op: 
public extension MBIB2 {
    func _iceD_ib2op(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p: MBIB2Prx? = try inS.read { istr in
            let iceP_p: MBIB2Prx? = try istr.read(MBIB2Prx.self)
            return iceP_p
        }

        let iceP_returnValue = try self.ib2op(p: iceP_p, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// MBCB overview.
///
/// MBCB Methods:
///
///  - cbop: 
public extension MBCBOperations {
    func _iceD_cbop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p: MBCBPrx? = try inS.read { istr in
            let iceP_p: MBCBPrx? = try istr.read(MBCBPrx.self)
            return iceP_p
        }

        let iceP_returnValue = try self.cbop(p: iceP_p, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// MAIC overview.
///
/// MAIC Methods:
///
///  - icop: 
public extension MAIC {
    func _iceD_icop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p: MAICPrx? = try inS.read { istr in
            let iceP_p: MAICPrx? = try istr.read(MAICPrx.self)
            return iceP_p
        }

        let iceP_returnValue = try self.icop(p: iceP_p, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// MACC overview.
///
/// MACC Methods:
///
///  - ccop: 
public extension MACCOperations {
    func _iceD_ccop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p: MACCPrx? = try inS.read { istr in
            let iceP_p: MACCPrx? = try istr.read(MACCPrx.self)
            return iceP_p
        }

        let iceP_returnValue = try self.ccop(p: iceP_p, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// MACD overview.
///
/// MACD Methods:
///
///  - cdop: 
public extension MACDOperations {
    func _iceD_cdop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_p: MACDPrx? = try inS.read { istr in
            let iceP_p: MACDPrx? = try istr.read(MACDPrx.self)
            return iceP_p
        }

        let iceP_returnValue = try self.cdop(p: iceP_p, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// Initial overview.
///
/// Initial Methods:
///
///  - shutdown: 
///
///  - caop: 
///
///  - cbop: 
///
///  - ccop: 
///
///  - cdop: 
///
///  - iaop: 
///
///  - ib1op: 
///
///  - ib2op: 
///
///  - icop: 
public extension Initial {
    func _iceD_shutdown(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.shutdown(current: current)

        return inS.setResult()
    }

    func _iceD_caop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.caop(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_cbop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.cbop(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_ccop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.ccop(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_cdop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.cdop(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_iaop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.iaop(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_ib1op(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.ib1op(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_ib2op(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.ib2op(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_icop(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.icop(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}
