//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// Traits for Slice interface`Hold`.
public struct HoldTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Hold"]
    public static let staticId = "::Test::Hold"
}

/// HoldPrx overview.
///
/// HoldPrx Methods:
///
///  - putOnHold: 
///
///  - putOnHoldAsync: 
///
///  - waitForHold: 
///
///  - waitForHoldAsync: 
///
///  - setOneway: 
///
///  - setOnewayAsync: 
///
///  - `set`: 
///
///  - setAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol HoldPrx: Ice.ObjectPrx {}

private final class HoldPrxI: Ice.ObjectPrxI, HoldPrx {
    public override class func ice_staticId() -> Swift.String {
        return HoldTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: HoldPrx.Protocol) throws -> HoldPrx {
    try communicator.makeProxyImpl(proxyString) as HoldPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `HoldPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `HoldPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: HoldPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> HoldPrx? {
    return try await HoldPrxI.checkedCast(prx: prx, facet: facet, context: context) as HoldPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `HoldPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `HoldPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: HoldPrx.Protocol, facet: Swift.String? = nil) -> HoldPrx {
    return HoldPrxI.uncheckedCast(prx: prx, facet: facet) as HoldPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `HoldPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: HoldPrx.Protocol) -> Swift.String {
    return HoldTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `HoldPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `HoldPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `HoldPrx?` - The extracted proxy
    func read(_ type: HoldPrx.Protocol) throws -> HoldPrx? {
        return try read() as HoldPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `HoldPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `HoldPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: HoldPrx.Protocol) throws -> HoldPrx? {
        return try read(tag: tag) as HoldPrxI?
    }
}

/// HoldPrx overview.
///
/// HoldPrx Methods:
///
///  - putOnHold: 
///
///  - putOnHoldAsync: 
///
///  - waitForHold: 
///
///  - waitForHoldAsync: 
///
///  - setOneway: 
///
///  - setOnewayAsync: 
///
///  - `set`: 
///
///  - setAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension HoldPrx {
    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func putOnHold(_ iceP_seconds: Swift.Int32, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "putOnHold",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_seconds)
                                       },
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func waitForHold(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "waitForHold",
                                       mode: .Normal,
                                       context: context)
    }

    ///
    /// - parameter value: `Swift.Int32`
    ///
    /// - parameter expected: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func setOneway(value iceP_value: Swift.Int32, expected iceP_expected: Swift.Int32, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "setOneway",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_value)
                                           ostr.write(iceP_expected)
                                       },
                                       context: context)
    }

    ///
    /// - parameter value: `Swift.Int32`
    ///
    /// - parameter delay: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func `set`(value iceP_value: Swift.Int32, delay iceP_delay: Swift.Int32, context: Ice.Context? = nil) async throws -> Swift.Int32 {
        return try await _impl._invoke(operation: "set",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_value)
                                           ostr.write(iceP_delay)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: Swift.Int32 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "shutdown",
                                       mode: .Normal,
                                       context: context)
    }
}


/// Dispatcher for `Hold` servants.
public struct HoldDisp: Ice.Dispatcher {
    public let servant: Hold
    private static let defaultObject = Ice.ObjectI<HoldTraits>()

    public init(_ servant: Hold) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? HoldDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? HoldDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? HoldDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? HoldDisp.defaultObject)._iceD_ice_ping(request)
        case "putOnHold":
            try await servant._iceD_putOnHold(request)
        case "set":
            try await servant._iceD_set(request)
        case "setOneway":
            try await servant._iceD_setOneway(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        case "waitForHold":
            try await servant._iceD_waitForHold(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol Hold {
    ///
    /// - parameter seconds: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func putOnHold(seconds: Swift.Int32, current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func waitForHold(current: Ice.Current) async throws

    ///
    /// - parameter value: `Swift.Int32`
    ///
    /// - parameter expected: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func setOneway(value: Swift.Int32, expected: Swift.Int32, current: Ice.Current) async throws

    ///
    /// - parameter value: `Swift.Int32`
    ///
    /// - parameter delay: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func `set`(value: Swift.Int32, delay: Swift.Int32, current: Ice.Current) async throws -> Swift.Int32

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) async throws
}

/// Hold overview.
///
/// Hold Methods:
///
///  - putOnHold: 
///
///  - waitForHold: 
///
///  - setOneway: 
///
///  - `set`: 
///
///  - shutdown: 
extension Hold {
    public func _iceD_putOnHold(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_seconds: Swift.Int32 = try istr.read()
        try await self.putOnHold(seconds: iceP_seconds, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_waitForHold(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.waitForHold(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_setOneway(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_value: Swift.Int32 = try istr.read()
        let iceP_expected: Swift.Int32 = try istr.read()
        try await self.setOneway(value: iceP_value, expected: iceP_expected, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_set(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_value: Swift.Int32 = try istr.read()
        let iceP_delay: Swift.Int32 = try istr.read()
        let result = try await self.`set`(value: iceP_value, delay: iceP_delay, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
