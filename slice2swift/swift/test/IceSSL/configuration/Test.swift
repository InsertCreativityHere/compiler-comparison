//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice interface`SSLServer`.
public struct SSLServerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Server"]
    public static let staticId = "::Test::Server"
}

public typealias SSLProperties = [Swift.String: Swift.String]

/// Helper class to read and write `SSLProperties` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct SSLPropertiesHelper {
    /// Read a `SSLProperties` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: `SSLProperties` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> SSLProperties {
        let sz = try Swift.Int(istr.readSize())
        var v = SSLProperties()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: Swift.String = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional `SSLProperties?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `SSLProperties` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> SSLProperties? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a `SSLProperties` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: `SSLProperties` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: SSLProperties) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional `SSLProperties?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `SSLProperties` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: SSLProperties?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice interface`SSLServerFactory`.
public struct SSLServerFactoryTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::ServerFactory"]
    public static let staticId = "::Test::ServerFactory"
}

/// SSLServerPrx overview.
///
/// SSLServerPrx Methods:
///
///  - noCert: 
///
///  - noCertAsync: 
///
///  - checkCert: 
///
///  - checkCertAsync: 
public protocol SSLServerPrx: Ice.ObjectPrx {}

private final class SSLServerPrxI: Ice.ObjectPrxI, SSLServerPrx {
    public override class func ice_staticId() -> Swift.String {
        return SSLServerTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: SSLServerPrx.Protocol) throws -> SSLServerPrx {
    try communicator.makeProxyImpl(proxyString) as SSLServerPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `SSLServerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `SSLServerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: SSLServerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> SSLServerPrx? {
    return try SSLServerPrxI.checkedCast(prx: prx, facet: facet, context: context) as SSLServerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `SSLServerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `SSLServerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: SSLServerPrx.Protocol, facet: Swift.String? = nil) -> SSLServerPrx {
    return SSLServerPrxI.uncheckedCast(prx: prx, facet: facet) as SSLServerPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `SSLServerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: SSLServerPrx.Protocol) -> Swift.String {
    return SSLServerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `SSLServerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `SSLServerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SSLServerPrx?` - The extracted proxy
    func read(_ type: SSLServerPrx.Protocol) throws -> SSLServerPrx? {
        return try read() as SSLServerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `SSLServerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SSLServerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: SSLServerPrx.Protocol) throws -> SSLServerPrx? {
        return try read(tag: tag) as SSLServerPrxI?
    }
}

/// SSLServerPrx overview.
///
/// SSLServerPrx Methods:
///
///  - noCert: 
///
///  - noCertAsync: 
///
///  - checkCert: 
///
///  - checkCertAsync: 
public extension SSLServerPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func noCert(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "noCert",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func noCertAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "noCert",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter subjectDN: `Swift.String`
    ///
    /// - parameter issuerDN: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func checkCert(subjectDN iceP_subjectDN: Swift.String, issuerDN iceP_issuerDN: Swift.String, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "checkCert",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_subjectDN)
                              ostr.write(iceP_issuerDN)
                          },
                          context: context)
    }

    ///
    /// - parameter subjectDN: `Swift.String`
    ///
    /// - parameter issuerDN: `Swift.String`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func checkCertAsync(subjectDN iceP_subjectDN: Swift.String, issuerDN iceP_issuerDN: Swift.String, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "checkCert",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_subjectDN)
                                      ostr.write(iceP_issuerDN)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// SSLServerFactoryPrx overview.
///
/// SSLServerFactoryPrx Methods:
///
///  - createServer: 
///
///  - createServerAsync: 
///
///  - destroyServer: 
///
///  - destroyServerAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol SSLServerFactoryPrx: Ice.ObjectPrx {}

private final class SSLServerFactoryPrxI: Ice.ObjectPrxI, SSLServerFactoryPrx {
    public override class func ice_staticId() -> Swift.String {
        return SSLServerFactoryTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: SSLServerFactoryPrx.Protocol) throws -> SSLServerFactoryPrx {
    try communicator.makeProxyImpl(proxyString) as SSLServerFactoryPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `SSLServerFactoryPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `SSLServerFactoryPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: SSLServerFactoryPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> SSLServerFactoryPrx? {
    return try SSLServerFactoryPrxI.checkedCast(prx: prx, facet: facet, context: context) as SSLServerFactoryPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `SSLServerFactoryPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `SSLServerFactoryPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: SSLServerFactoryPrx.Protocol, facet: Swift.String? = nil) -> SSLServerFactoryPrx {
    return SSLServerFactoryPrxI.uncheckedCast(prx: prx, facet: facet) as SSLServerFactoryPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `SSLServerFactoryPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: SSLServerFactoryPrx.Protocol) -> Swift.String {
    return SSLServerFactoryTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `SSLServerFactoryPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `SSLServerFactoryPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SSLServerFactoryPrx?` - The extracted proxy
    func read(_ type: SSLServerFactoryPrx.Protocol) throws -> SSLServerFactoryPrx? {
        return try read() as SSLServerFactoryPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `SSLServerFactoryPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SSLServerFactoryPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: SSLServerFactoryPrx.Protocol) throws -> SSLServerFactoryPrx? {
        return try read(tag: tag) as SSLServerFactoryPrxI?
    }
}

/// SSLServerFactoryPrx overview.
///
/// SSLServerFactoryPrx Methods:
///
///  - createServer: 
///
///  - createServerAsync: 
///
///  - destroyServer: 
///
///  - destroyServerAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension SSLServerFactoryPrx {
    ///
    /// - parameter _: `SSLProperties`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `SSLServerPrx?`
    func createServer(_ iceP_props: SSLProperties, context: Ice.Context? = nil) throws -> SSLServerPrx? {
        return try _impl._invoke(operation: "createServer",
                                 mode: .Normal,
                                 write: { ostr in
                                     SSLPropertiesHelper.write(to: ostr, value: iceP_props)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: SSLServerPrx? = try istr.read(SSLServerPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `SSLProperties`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<SSLServerPrx?>` - The result of the operation
    func createServerAsync(_ iceP_props: SSLProperties, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<SSLServerPrx?> {
        return _impl._invokeAsync(operation: "createServer",
                                  mode: .Normal,
                                  write: { ostr in
                                      SSLPropertiesHelper.write(to: ostr, value: iceP_props)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: SSLServerPrx? = try istr.read(SSLServerPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `SSLServerPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func destroyServer(_ iceP_srv: SSLServerPrx?, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "destroyServer",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_srv)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `SSLServerPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func destroyServerAsync(_ iceP_srv: SSLServerPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "destroyServer",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_srv)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `SSLServer` servants.
public struct SSLServerDisp: Ice.Dispatcher {
    public let servant: SSLServer
    private static let defaultObject = Ice.ObjectI<SSLServerTraits>()

    public init(_ servant: SSLServer) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "checkCert":
            servant._iceD_checkCert(request)
        case "ice_id":
            (servant as? Ice.Object ?? SSLServerDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? SSLServerDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? SSLServerDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? SSLServerDisp.defaultObject)._iceD_ice_ping(request)
        case "noCert":
            servant._iceD_noCert(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol SSLServer {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func noCert(current: Ice.Current) throws

    ///
    /// - parameter subjectDN: `Swift.String`
    ///
    /// - parameter issuerDN: `Swift.String`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func checkCert(subjectDN: Swift.String, issuerDN: Swift.String, current: Ice.Current) throws
}


/// Dispatcher for `SSLServerFactory` servants.
public struct SSLServerFactoryDisp: Ice.Dispatcher {
    public let servant: SSLServerFactory
    private static let defaultObject = Ice.ObjectI<SSLServerFactoryTraits>()

    public init(_ servant: SSLServerFactory) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "createServer":
            servant._iceD_createServer(request)
        case "destroyServer":
            servant._iceD_destroyServer(request)
        case "ice_id":
            (servant as? Ice.Object ?? SSLServerFactoryDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? SSLServerFactoryDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? SSLServerFactoryDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? SSLServerFactoryDisp.defaultObject)._iceD_ice_ping(request)
        case "shutdown":
            servant._iceD_shutdown(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol SSLServerFactory {
    ///
    /// - parameter props: `SSLProperties`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `SSLServerPrx?`
    func createServer(props: SSLProperties, current: Ice.Current) throws -> SSLServerPrx?

    ///
    /// - parameter srv: `SSLServerPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func destroyServer(srv: SSLServerPrx?, current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws
}

/// SSLServer overview.
///
/// SSLServer Methods:
///
///  - noCert: 
///
///  - checkCert: 
extension SSLServer {
    public func _iceD_noCert(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.noCert(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_checkCert(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_subjectDN: Swift.String = try istr.read()
            let iceP_issuerDN: Swift.String = try istr.read()

            try self.checkCert(subjectDN: iceP_subjectDN, issuerDN: iceP_issuerDN, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}

/// SSLServerFactory overview.
///
/// SSLServerFactory Methods:
///
///  - createServer: 
///
///  - destroyServer: 
///
///  - shutdown: 
extension SSLServerFactory {
    public func _iceD_createServer(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_props: SSLProperties = try SSLPropertiesHelper.read(from: istr)

            let iceP_returnValue = try self.createServer(props: iceP_props, current: request.current)
            let ostr = request.current.startReplyStream()
            ostr.startEncapsulation(encoding: request.current.encoding, format: .DefaultFormat)
            ostr.write(iceP_returnValue)
            ostr.endEncapsulation()
            return PromiseKit.Promise.value(Ice.OutgoingResponse(ostr))
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_destroyServer(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_srv: SSLServerPrx? = try istr.read(SSLServerPrx.self)

            try self.destroyServer(srv: iceP_srv, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.shutdown(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}
