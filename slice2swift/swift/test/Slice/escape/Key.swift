//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public enum `continue`: Swift.UInt8 {
    /// `let`
    case `let` = 0
    /// `var`
    case `var` = 1
    public init() {
        self = .`let`
    }
}

/// An `Ice.InputStream` extension to read ``continue`` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: ``continue`` - The enumarated value.
    func read() throws -> `continue` {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 1)
        guard let val = `continue`(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: ``continue`` - The enumerated value.
    func read(tag: Swift.Int32) throws -> `continue`? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as `continue`
    }
}

/// An `Ice.OutputStream` extension to write ``continue`` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: ``continue`` - The enumerator to write.
    func write(_ v: `continue`) {
        write(enum: v.rawValue, maxValue: 1)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: ``continue`` - The enumerator to write.
    func write(tag: Swift.Int32, value: `continue`?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 1)
    }
}

public struct `guard`: Swift.Hashable {
    public var `default`: Swift.Int32 = 0

    public init() {}

    public init(`default`: Swift.Int32) {
        self.`default` = `default`
    }
}

/// An `Ice.InputStream` extension to read ``guard`` structured values from the stream.
public extension Ice.InputStream {
    /// Read a ``guard`` structured value from the stream.
    ///
    /// - returns: ``guard`` - The structured value read from the stream.
    func read() throws -> `guard` {
        var v = `guard`()
        v.`default` = try self.read()
        return v
    }

    /// Read an optional ``guard`?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: ``guard`?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> `guard`? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as `guard`
    }
}

/// An `Ice.OutputStream` extension to write ``guard`` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a ``guard`` structured value to the stream.
    ///
    /// - parameter _: ``guard`` - The value to write to the stream.
    func write(_ v: `guard`) {
        self.write(v.`default`)
    }

    /// Write an optional ``guard`?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: ``guard`?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: `guard`?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 4)
                write(v)
            }
        }
    }
}

public struct `defer`: Swift.Hashable {
    public var `else`: Swift.String = ""

    public init() {}

    public init(`else`: Swift.String) {
        self.`else` = `else`
    }
}

/// An `Ice.InputStream` extension to read ``defer`` structured values from the stream.
public extension Ice.InputStream {
    /// Read a ``defer`` structured value from the stream.
    ///
    /// - returns: ``defer`` - The structured value read from the stream.
    func read() throws -> `defer` {
        var v = `defer`()
        v.`else` = try self.read()
        return v
    }

    /// Read an optional ``defer`?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: ``defer`?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> `defer`? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as `defer`
    }
}

/// An `Ice.OutputStream` extension to write ``defer`` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a ``defer`` structured value to the stream.
    ///
    /// - parameter _: ``defer`` - The value to write to the stream.
    func write(_ v: `defer`) {
        self.write(v.`else`)
    }

    /// Write an optional ``defer`?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: ``defer`?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: `defer`?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// Traits for Slice interface``break``.
public struct breakTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::and::break"]
    public static let staticId = "::and::break"
}

/// Traits for Slice interface``func``.
public struct funcTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::and::func"]
    public static let staticId = "::and::func"
}

/// Traits for Slice interface``do``.
public struct doTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::and::break", "::and::do", "::and::func"]
    public static let staticId = "::and::do"
}

public typealias `fileprivate` = [`guard`]

/// Helper class to read and write ``fileprivate`` sequence values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct fileprivateHelper {
    /// Read a ``fileprivate`` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: ``fileprivate`` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> `fileprivate` {
        let sz = try istr.readAndCheckSeqSize(minSize: 4)
        var v = `fileprivate`()
        v.reserveCapacity(sz)
        for _ in 0 ..< sz {
            let j: `guard` = try istr.read()
            v.append(j)
        }
        return v
    }
    /// Read an optional ``fileprivate`?` sequence from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: ``fileprivate`` - The sequence read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> `fileprivate`? {
        guard try istr.readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try istr.skipSize()
        return try read(from: istr)
    }

    /// Wite a ``fileprivate`` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: ``fileprivate`` - The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: `fileprivate`) {
        ostr.write(size: v.count)
        for item in v {
            ostr.write(item)
        }
    }

    /// Wite an optional ``fileprivate`?` sequence to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: ``fileprivate`` The sequence value to write to the stream.
    public static func write(to ostr: Ice.OutputStream,  tag: Swift.Int32, value v: `fileprivate`?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptionalVSize(tag: tag, len: val.count, elemSize: 4) {
            write(to: ostr, value: val)
        }
    }
}

public typealias `for` = [Swift.String: `guard`]

/// Helper class to read and write ``for`` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct forHelper {
    /// Read a ``for`` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: ``for`` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> `for` {
        let sz = try Swift.Int(istr.readSize())
        var v = `for`()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: `guard` = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional ``for`?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: ``for`` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> `for`? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a ``for`` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: ``for`` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: `for`) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional ``for`?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: ``for`` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: `for`?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// :nodoc:
public class return_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return `return`.self
    }
}

public extension Ice.ClassResolver {
    @objc static func and_return() -> Ice.UserExceptionTypeResolver {
        return return_TypeResolver()
    }
}

open class `return`: Ice.UserException, @unchecked Sendable {
    public var Int32: Swift.Int32 = 0

    public required init() {}

    public init(Int32: Swift.Int32) {
        self.Int32 = Int32
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::and::return" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: `return`.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.Int32)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.Int32 = try istr.read()
        try istr.endSlice()
    }
}

/// :nodoc:
public class as_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return `as`.self
    }
}

public extension Ice.ClassResolver {
    @objc static func and_as() -> Ice.UserExceptionTypeResolver {
        return as_TypeResolver()
    }
}

open class `as`: `return`, @unchecked Sendable {
    public var `static`: Swift.Int32 = 0
    public var `switch`: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(Int32: Swift.Int32, `static`: Swift.Int32, `switch`: Swift.Int32) {
        self.`static` = `static`
        self.`switch` = `switch`
        super.init(Int32: Int32)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::and::as" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: `as`.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.`static`)
        ostr.write(self.`switch`)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`static` = try istr.read()
        self.`switch` = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// Traits for Slice interface`friend`.
public struct friendTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::and::friend"]
    public static let staticId = "::and::friend"
}
public let `is`: Swift.Int32 = 0

public let `self`: Swift.Int32 = 0

public let `throw`: Swift.Int32 = 0

public let `typealias`: Swift.Int32 = 0

public let `internal`: Swift.Int32 = 0

public let `while`: Swift.Int32 = 0

public let `import`: Swift.Int32 = 0


/// breakPrx overview.
///
/// breakPrx Methods:
///
///  - `case`: 
///
///  - caseAsync: 
public protocol breakPrx: Ice.ObjectPrx {}

private final class breakPrxI: Ice.ObjectPrxI, breakPrx {
    public override class func ice_staticId() -> Swift.String {
        return breakTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: breakPrx.Protocol) throws -> breakPrx {
    try communicator.makeProxyImpl(proxyString) as breakPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `breakPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `breakPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: breakPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> breakPrx? {
    return try await breakPrxI.checkedCast(prx: prx, facet: facet, context: context) as breakPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `breakPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `breakPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: breakPrx.Protocol, facet: Swift.String? = nil) -> breakPrx {
    return breakPrxI.uncheckedCast(prx: prx, facet: facet) as breakPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `breakPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: breakPrx.Protocol) -> Swift.String {
    return breakTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `breakPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `breakPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `breakPrx?` - The extracted proxy
    func read(_ type: breakPrx.Protocol) throws -> breakPrx? {
        return try read() as breakPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `breakPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `breakPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: breakPrx.Protocol) throws -> breakPrx? {
        return try read(tag: tag) as breakPrxI?
    }
}

/// breakPrx overview.
///
/// breakPrx Methods:
///
///  - `case`: 
///
///  - caseAsync: 
public extension breakPrx {
    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func `case`(_ iceP_catch: Swift.Int32, context: Ice.Context? = nil) async throws -> Swift.Int32 {
        return try await _impl._invoke(operation: "case",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_catch)
                                       },
                                       read: { istr in
                                           let iceP_try: Swift.Int32 = try istr.read()
                                           return iceP_try
                                       },
                                       context: context)
    }
}

/// funcPrx overview.
///
/// funcPrx Methods:
///
///  - `public`: 
///
///  - publicAsync: 
public protocol funcPrx: Ice.ObjectPrx {}

private final class funcPrxI: Ice.ObjectPrxI, funcPrx {
    public override class func ice_staticId() -> Swift.String {
        return funcTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: funcPrx.Protocol) throws -> funcPrx {
    try communicator.makeProxyImpl(proxyString) as funcPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `funcPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `funcPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: funcPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> funcPrx? {
    return try await funcPrxI.checkedCast(prx: prx, facet: facet, context: context) as funcPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `funcPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `funcPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: funcPrx.Protocol, facet: Swift.String? = nil) -> funcPrx {
    return funcPrxI.uncheckedCast(prx: prx, facet: facet) as funcPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `funcPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: funcPrx.Protocol) -> Swift.String {
    return funcTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `funcPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `funcPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `funcPrx?` - The extracted proxy
    func read(_ type: funcPrx.Protocol) throws -> funcPrx? {
        return try read() as funcPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `funcPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `funcPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: funcPrx.Protocol) throws -> funcPrx? {
        return try read(tag: tag) as funcPrxI?
    }
}

/// funcPrx overview.
///
/// funcPrx Methods:
///
///  - `public`: 
///
///  - publicAsync: 
public extension funcPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func `public`(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "public",
                                       mode: .Normal,
                                       context: context)
    }
}

/// doPrx overview.
public protocol doPrx: funcPrx, breakPrx {}

private final class doPrxI: Ice.ObjectPrxI, doPrx {
    public override class func ice_staticId() -> Swift.String {
        return doTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: doPrx.Protocol) throws -> doPrx {
    try communicator.makeProxyImpl(proxyString) as doPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `doPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `doPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: doPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> doPrx? {
    return try await doPrxI.checkedCast(prx: prx, facet: facet, context: context) as doPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `doPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `doPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: doPrx.Protocol, facet: Swift.String? = nil) -> doPrx {
    return doPrxI.uncheckedCast(prx: prx, facet: facet) as doPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `doPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: doPrx.Protocol) -> Swift.String {
    return doTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `doPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `doPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `doPrx?` - The extracted proxy
    func read(_ type: doPrx.Protocol) throws -> doPrx? {
        return try read() as doPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `doPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `doPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: doPrx.Protocol) throws -> doPrx? {
        return try read(tag: tag) as doPrxI?
    }
}

/// doPrx overview.
public extension doPrx {}

/// friendPrx overview.
///
/// friendPrx Methods:
///
///  - goto: 
///
///  - gotoAsync: 
public protocol friendPrx: Ice.ObjectPrx {}

private final class friendPrxI: Ice.ObjectPrxI, friendPrx {
    public override class func ice_staticId() -> Swift.String {
        return friendTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: friendPrx.Protocol) throws -> friendPrx {
    try communicator.makeProxyImpl(proxyString) as friendPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `friendPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `friendPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: friendPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> friendPrx? {
    return try await friendPrxI.checkedCast(prx: prx, facet: facet, context: context) as friendPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `friendPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `friendPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: friendPrx.Protocol, facet: Swift.String? = nil) -> friendPrx {
    return friendPrxI.uncheckedCast(prx: prx, facet: facet) as friendPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `friendPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: friendPrx.Protocol) -> Swift.String {
    return friendTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `friendPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `friendPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `friendPrx?` - The extracted proxy
    func read(_ type: friendPrx.Protocol) throws -> friendPrx? {
        return try read() as friendPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `friendPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `friendPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: friendPrx.Protocol) throws -> friendPrx? {
        return try read(tag: tag) as friendPrxI?
    }
}

/// friendPrx overview.
///
/// friendPrx Methods:
///
///  - goto: 
///
///  - gotoAsync: 
public extension friendPrx {
    ///
    /// - parameter if: ``continue``
    ///
    /// - parameter d: ``guard``
    ///
    /// - parameter inline: ``defer``
    ///
    /// - parameter private: ``switch`?`
    ///
    /// - parameter mutable: `doPrx?`
    ///
    /// - parameter namespace: `breakPrx?`
    ///
    /// - parameter new: `funcPrx?`
    ///
    /// - parameter not: ``switch`?`
    ///
    /// - parameter operator: `doPrx?`
    ///
    /// - parameter or: `Swift.Int32`
    ///
    /// - parameter protected: `Swift.Int32`
    ///
    /// - parameter public: `Swift.Int32`
    ///
    /// - parameter register: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: ``guard``
    func goto(if iceP_if: `continue`, d iceP_d: `guard`, inline iceP_inline: `defer`, private iceP_private: `switch`?, mutable iceP_mutable: doPrx?, namespace iceP_namespace: breakPrx?, new iceP_new: funcPrx?, not iceP_not: `switch`?, operator iceP_operator: doPrx?, or iceP_or: Swift.Int32, protected iceP_protected: Swift.Int32, public iceP_public: Swift.Int32, register iceP_register: Swift.Int32, context: Ice.Context? = nil) async throws -> `guard` {
        return try await _impl._invoke(operation: "goto",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_if)
                                           ostr.write(iceP_d)
                                           ostr.write(iceP_inline)
                                           ostr.write(iceP_private)
                                           ostr.write(iceP_mutable)
                                           ostr.write(iceP_namespace)
                                           ostr.write(iceP_new)
                                           ostr.write(iceP_not)
                                           ostr.write(iceP_operator)
                                           ostr.write(iceP_or)
                                           ostr.write(iceP_protected)
                                           ostr.write(iceP_public)
                                           ostr.write(iceP_register)
                                           ostr.writePendingValues()
                                       },
                                       read: { istr in
                                           let iceP_returnValue: `guard` = try istr.read()
                                           return iceP_returnValue
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as `as` {
                                               throw error
                                           } catch let error as `return` {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }
}

/// :nodoc:
public class switch_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return `switch`.self
    }
}

public extension Ice.ClassResolver {
    @objc static func and_switch() -> Ice.ValueTypeResolver {
        return switch_TypeResolver()
    }
}

open class `switch`: Ice.Value {
    public var `if`: Swift.Int32 = 0
    public var export: funcPrx? = nil
    public var volatile: Swift.Int32 = 0

    public required init() {}

    public init(`if`: Swift.Int32, export: funcPrx?, volatile: Swift.Int32) {
        self.`if` = `if`
        self.export = export
        self.volatile = volatile
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::and::switch" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`if` = try istr.read()
        self.export = try istr.read(funcPrx.self)
        self.volatile = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: `switch`.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.`if`)
        ostr.write(self.export)
        ostr.write(self.volatile)
        ostr.endSlice()
    }
}


/// Dispatcher for ``break`` servants.
public struct breakDisp: Ice.Dispatcher {
    public let servant: `break`
    private static let defaultObject = Ice.ObjectI<breakTraits>()

    public init(_ servant: `break`) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "case":
            try await servant._iceD_case(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? breakDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? breakDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? breakDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? breakDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol `break` {
    ///
    /// - parameter catch: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func `case`(catch: Swift.Int32, current: Ice.Current) async throws -> Swift.Int32
}


/// Dispatcher for ``func`` servants.
public struct funcDisp: Ice.Dispatcher {
    public let servant: `func`
    private static let defaultObject = Ice.ObjectI<funcTraits>()

    public init(_ servant: `func`) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? funcDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? funcDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? funcDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? funcDisp.defaultObject)._iceD_ice_ping(request)
        case "public":
            try await servant._iceD_public(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol `func` {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func `public`(current: Ice.Current) async throws
}


/// Dispatcher for ``do`` servants.
public struct doDisp: Ice.Dispatcher {
    public let servant: `do`
    private static let defaultObject = Ice.ObjectI<doTraits>()

    public init(_ servant: `do`) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "case":
            try await servant._iceD_case(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? doDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? doDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? doDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? doDisp.defaultObject)._iceD_ice_ping(request)
        case "public":
            try await servant._iceD_public(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol `do`: `func`, `break` {}


/// Dispatcher for `friend` servants.
public struct friendDisp: Ice.Dispatcher {
    public let servant: friend
    private static let defaultObject = Ice.ObjectI<friendTraits>()

    public init(_ servant: friend) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "goto":
            try await servant._iceD_goto(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? friendDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? friendDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? friendDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? friendDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol friend {
    ///
    /// - parameter if: ``continue``
    ///
    /// - parameter d: ``guard``
    ///
    /// - parameter inline: ``defer``
    ///
    /// - parameter private: ``switch`?`
    ///
    /// - parameter mutable: `doPrx?`
    ///
    /// - parameter namespace: `breakPrx?`
    ///
    /// - parameter new: `funcPrx?`
    ///
    /// - parameter not: ``switch`?`
    ///
    /// - parameter operator: `doPrx?`
    ///
    /// - parameter or: `Swift.Int32`
    ///
    /// - parameter protected: `Swift.Int32`
    ///
    /// - parameter public: `Swift.Int32`
    ///
    /// - parameter register: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: ``guard``
    func goto(if: `continue`, d: `guard`, inline: `defer`, private: `switch`?, mutable: doPrx?, namespace: breakPrx?, new: funcPrx?, not: `switch`?, operator: doPrx?, or: Swift.Int32, protected: Swift.Int32, public: Swift.Int32, register: Swift.Int32, current: Ice.Current) async throws -> `guard`
}

/// break overview.
///
/// break Methods:
///
///  - `case`: 
extension `break` {
    public func _iceD_case(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_catch: Swift.Int32 = try istr.read()
        let result = try await self.`case`(catch: iceP_catch, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_try = value
            ostr.write(iceP_try)
        }
    }
}

/// func overview.
///
/// func Methods:
///
///  - `public`: 
extension `func` {
    public func _iceD_public(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.`public`(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// do overview.
extension `do` {}

/// friend overview.
///
/// friend Methods:
///
///  - goto: 
extension friend {
    public func _iceD_goto(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_if: `continue` = try istr.read()
        let iceP_d: `guard` = try istr.read()
        let iceP_inline: `defer` = try istr.read()
        var iceP_private: `switch`?
        try istr.read(`switch`.self) { iceP_private = $0 }
        let iceP_mutable: doPrx? = try istr.read(doPrx.self)
        let iceP_namespace: breakPrx? = try istr.read(breakPrx.self)
        let iceP_new: funcPrx? = try istr.read(funcPrx.self)
        var iceP_not: `switch`?
        try istr.read(`switch`.self) { iceP_not = $0 }
        let iceP_operator: doPrx? = try istr.read(doPrx.self)
        let iceP_or: Swift.Int32 = try istr.read()
        let iceP_protected: Swift.Int32 = try istr.read()
        let iceP_public: Swift.Int32 = try istr.read()
        let iceP_register: Swift.Int32 = try istr.read()
        try istr.readPendingValues()
        let result = try await self.goto(if: iceP_if, d: iceP_d, inline: iceP_inline, private: iceP_private, mutable: iceP_mutable, namespace: iceP_namespace, new: iceP_new, not: iceP_not, operator: iceP_operator, or: iceP_or, protected: iceP_protected, public: iceP_public, register: iceP_register, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}
