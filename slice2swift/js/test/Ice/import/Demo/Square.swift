//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Square.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public struct gxSquare: Swift.Hashable {
    public var p1: gxPoint = gxPoint()
    public var p2: gxPoint = gxPoint()
    public var p3: gxPoint = gxPoint()
    public var p4: gxPoint = gxPoint()

    public init() {}

    public init(p1: gxPoint, p2: gxPoint, p3: gxPoint, p4: gxPoint) {
        self.p1 = p1
        self.p2 = p2
        self.p3 = p3
        self.p4 = p4
    }
}

/// An `Ice.InputStream` extension to read `gxSquare` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `gxSquare` structured value from the stream.
    ///
    /// - returns: `gxSquare` - The structured value read from the stream.
    func read() throws -> gxSquare {
        var v = gxSquare()
        v.p1 = try self.read()
        v.p2 = try self.read()
        v.p3 = try self.read()
        v.p4 = try self.read()
        return v
    }

    /// Read an optional `gxSquare?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `gxSquare?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> gxSquare? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as gxSquare
    }
}

/// An `Ice.OutputStream` extension to write `gxSquare` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `gxSquare` structured value to the stream.
    ///
    /// - parameter _: `gxSquare` - The value to write to the stream.
    func write(_ v: gxSquare) {
        self.write(v.p1)
        self.write(v.p2)
        self.write(v.p3)
        self.write(v.p4)
    }

    /// Write an optional `gxSquare?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `gxSquare?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: gxSquare?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 32)
                write(v)
            }
        }
    }
}
