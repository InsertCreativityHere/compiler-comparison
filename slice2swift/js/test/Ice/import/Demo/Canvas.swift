//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Canvas.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit
import Glacier2

/// Traits for Slice interface`gxCanvas`.
public struct gxCanvasTraits: Ice.SliceTraits {
    public static let staticIds = ["::Demo::gx::Canvas", "::Ice::Object"]
    public static let staticId = "::Demo::gx::Canvas"
}

/// Traits for Slice interface`gxSession`.
public struct gxSessionTraits: Ice.SliceTraits {
    public static let staticIds = ["::Demo::gx::Session", "::Glacier2::Session", "::Ice::Object"]
    public static let staticId = "::Demo::gx::Session"
}

/// gxCanvasPrx overview.
///
/// gxCanvasPrx Methods:
///
///  - paintSquare: 
///
///  - paintSquareAsync: 
///
///  - paintCircle: 
///
///  - paintCircleAsync: 
public protocol gxCanvasPrx: Ice.ObjectPrx {}

private final class gxCanvasPrxI: Ice.ObjectPrxI, gxCanvasPrx {
    public override class func ice_staticId() -> Swift.String {
        return gxCanvasTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `gxCanvasPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `gxCanvasPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: gxCanvasPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> gxCanvasPrx? {
    return try gxCanvasPrxI.checkedCast(prx: prx, facet: facet, context: context) as gxCanvasPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `gxCanvasPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `gxCanvasPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: gxCanvasPrx.Protocol, facet: Swift.String? = nil) -> gxCanvasPrx {
    return gxCanvasPrxI.uncheckedCast(prx: prx, facet: facet) as gxCanvasPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `gxCanvasPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: gxCanvasPrx.Protocol) -> Swift.String {
    return gxCanvasTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `gxCanvasPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `gxCanvasPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `gxCanvasPrx?` - The extracted proxy
    func read(_ type: gxCanvasPrx.Protocol) throws -> gxCanvasPrx? {
        return try read() as gxCanvasPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `gxCanvasPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `gxCanvasPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: gxCanvasPrx.Protocol) throws -> gxCanvasPrx? {
        return try read(tag: tag) as gxCanvasPrxI?
    }
}

/// gxCanvasPrx overview.
///
/// gxCanvasPrx Methods:
///
///  - paintSquare: 
///
///  - paintSquareAsync: 
///
///  - paintCircle: 
///
///  - paintCircleAsync: 
public extension gxCanvasPrx {
    ///
    /// - parameter _: `gxSquare`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func paintSquare(_ iceP_square: gxSquare, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "paintSquare",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_square)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `gxSquare`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func paintSquareAsync(_ iceP_square: gxSquare, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "paintSquare",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_square)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `gxCircle`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func paintCircle(_ iceP_circle: gxCircle, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "paintCircle",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_circle)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `gxCircle`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func paintCircleAsync(_ iceP_circle: gxCircle, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "paintCircle",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_circle)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// gxSessionPrx overview.
///
/// gxSessionPrx Methods:
///
///  - destroySession: 
///
///  - destroySessionAsync: 
public protocol gxSessionPrx: Glacier2.SessionPrx {}

private final class gxSessionPrxI: Ice.ObjectPrxI, gxSessionPrx {
    public override class func ice_staticId() -> Swift.String {
        return gxSessionTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `gxSessionPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `gxSessionPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: gxSessionPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> gxSessionPrx? {
    return try gxSessionPrxI.checkedCast(prx: prx, facet: facet, context: context) as gxSessionPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `gxSessionPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `gxSessionPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: gxSessionPrx.Protocol, facet: Swift.String? = nil) -> gxSessionPrx {
    return gxSessionPrxI.uncheckedCast(prx: prx, facet: facet) as gxSessionPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `gxSessionPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: gxSessionPrx.Protocol) -> Swift.String {
    return gxSessionTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `gxSessionPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `gxSessionPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `gxSessionPrx?` - The extracted proxy
    func read(_ type: gxSessionPrx.Protocol) throws -> gxSessionPrx? {
        return try read() as gxSessionPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `gxSessionPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `gxSessionPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: gxSessionPrx.Protocol) throws -> gxSessionPrx? {
        return try read(tag: tag) as gxSessionPrxI?
    }
}

/// gxSessionPrx overview.
///
/// gxSessionPrx Methods:
///
///  - destroySession: 
///
///  - destroySessionAsync: 
public extension gxSessionPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func destroySession(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "destroySession",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func destroySessionAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "destroySession",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `gxCanvas` servants.
public struct gxCanvasDisp: Ice.Dispatcher {
    public let servant: gxCanvas
    private static let defaultObject = Ice.ObjectI<gxCanvasTraits>()

    public init(_ servant: gxCanvas) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "ice_id":
            (servant as? Ice.Object ?? gxCanvasDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? gxCanvasDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? gxCanvasDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? gxCanvasDisp.defaultObject)._iceD_ice_ping(request)
        case "paintCircle":
            servant._iceD_paintCircle(request)
        case "paintSquare":
            servant._iceD_paintSquare(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol gxCanvas {
    ///
    /// - parameter square: `gxSquare`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func paintSquare(square: gxSquare, current: Ice.Current) throws

    ///
    /// - parameter circle: `gxCircle`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func paintCircle(circle: gxCircle, current: Ice.Current) throws
}


/// Dispatcher for `gxSession` servants.
public struct gxSessionDisp: Ice.Dispatcher {
    public let servant: gxSession
    private static let defaultObject = Ice.ObjectI<gxSessionTraits>()

    public init(_ servant: gxSession) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        switch request.current.operation {
        case "destroy":
            servant._iceD_destroy(request)
        case "destroySession":
            servant._iceD_destroySession(request)
        case "ice_id":
            (servant as? Ice.Object ?? gxSessionDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            (servant as? Ice.Object ?? gxSessionDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            (servant as? Ice.Object ?? gxSessionDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            (servant as? Ice.Object ?? gxSessionDisp.defaultObject)._iceD_ice_ping(request)
        default:
            PromiseKit.Promise(error: Ice.OperationNotExistException())
        }
    }
}

public protocol gxSession: Glacier2.Session {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func destroySession(current: Ice.Current) throws
}

/// gxCanvas overview.
///
/// gxCanvas Methods:
///
///  - paintSquare: 
///
///  - paintCircle: 
extension gxCanvas {
    public func _iceD_paintSquare(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_square: gxSquare = try istr.read()

            try self.paintSquare(square: iceP_square, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }

    public func _iceD_paintCircle(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            let istr = request.inputStream
            _ = try istr.startEncapsulation()
            let iceP_circle: gxCircle = try istr.read()

            try self.paintCircle(circle: iceP_circle, current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}

/// gxSession overview.
///
/// gxSession Methods:
///
///  - destroySession: 
extension gxSession {
    public func _iceD_destroySession(_ request: Ice.IncomingRequest) -> PromiseKit.Promise<Ice.OutgoingResponse> {
        do {
            _ = try request.inputStream.skipEmptyEncapsulation()

            try self.destroySession(current: request.current)
            return PromiseKit.Promise.value(request.current.makeEmptyOutgoingResponse())
        } catch {
            return PromiseKit.Promise(error: error)
        }
    }
}
