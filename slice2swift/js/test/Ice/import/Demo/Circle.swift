//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Circle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public struct gxCircle: Swift.Hashable {
    public var center: gxPoint = gxPoint()
    public var radius: Swift.Int64 = 0

    public init() {}

    public init(center: gxPoint, radius: Swift.Int64) {
        self.center = center
        self.radius = radius
    }
}

/// An `Ice.InputStream` extension to read `gxCircle` structured values from the stream.
public extension Ice.InputStream {
    /// Read a `gxCircle` structured value from the stream.
    ///
    /// - returns: `gxCircle` - The structured value read from the stream.
    func read() throws -> gxCircle {
        var v = gxCircle()
        v.center = try self.read()
        v.radius = try self.read()
        return v
    }

    /// Read an optional `gxCircle?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `gxCircle?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> gxCircle? {
        guard try readOptional(tag: tag, expectedFormat: .VSize) else {
            return nil
        }
        try skipSize()
        return try read() as gxCircle
    }
}

/// An `Ice.OutputStream` extension to write `gxCircle` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a `gxCircle` structured value to the stream.
    ///
    /// - parameter _: `gxCircle` - The value to write to the stream.
    func write(_ v: gxCircle) {
        self.write(v.center)
        self.write(v.radius)
    }

    /// Write an optional `gxCircle?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: `gxCircle?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: gxCircle?) {
        if let v = value {
            if writeOptional(tag: tag, format: .VSize) {
                write(size: 16)
                write(v)
            }
        }
    }
}
